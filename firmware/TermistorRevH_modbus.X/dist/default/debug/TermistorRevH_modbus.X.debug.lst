

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Oct 04 11:50:50 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F18424
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    27                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    30                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2
    62                           	psect	text37,local,class=CODE,merge=1,delta=2
    63                           	psect	text38,local,class=CODE,merge=1,delta=2
    64                           	psect	text39,local,class=CODE,merge=1,delta=2
    65                           	psect	text40,local,class=CODE,merge=1,delta=2
    66                           	psect	text41,local,class=CODE,merge=1,delta=2
    67                           	psect	text42,local,class=CODE,merge=1,delta=2
    68                           	psect	text43,local,class=CODE,merge=1,delta=2
    69                           	psect	text44,local,class=CODE,merge=1,delta=2
    70                           	psect	text45,local,class=CODE,merge=1,delta=2
    71                           	psect	text46,local,class=CODE,merge=1,delta=2
    72                           	psect	text47,local,class=CODE,merge=1,delta=2
    73                           	psect	text48,local,class=CODE,merge=1,delta=2
    74                           	psect	text49,local,class=CODE,merge=1,delta=2
    75                           	psect	text50,local,class=CODE,merge=1,delta=2
    76                           	psect	text51,local,class=CODE,merge=1,delta=2
    77                           	psect	text52,local,class=CODE,merge=1,delta=2
    78                           	psect	text53,local,class=CODE,merge=1,delta=2,group=3
    79                           	psect	text54,local,class=CODE,merge=1,delta=2,group=3
    80                           	psect	text55,local,class=CODE,merge=1,delta=2,group=3
    81                           	psect	text56,local,class=CODE,merge=1,delta=2
    82                           	psect	text57,local,class=CODE,merge=1,delta=2
    83                           	psect	text58,local,class=CODE,merge=1,delta=2
    84                           	psect	text59,local,class=CODE,merge=1,delta=2
    85                           	psect	text60,local,class=CODE,merge=1,delta=2
    86                           	psect	text61,local,class=CODE,merge=1,delta=2
    87                           	psect	text62,local,class=CODE,merge=1,delta=2
    88                           	psect	text63,local,class=CODE,merge=1,delta=2
    89                           	psect	text64,local,class=CODE,merge=1,delta=2
    90                           	psect	text65,local,class=CODE,merge=1,delta=2
    91                           	psect	text66,local,class=CODE,merge=1,delta=2
    92                           	psect	text67,local,class=CODE,merge=1,delta=2
    93                           	psect	text68,local,class=CODE,merge=1,delta=2
    94                           	psect	text69,local,class=CODE,merge=1,delta=2
    95                           	psect	text70,local,class=CODE,merge=1,delta=2
    96                           	psect	text71,local,class=CODE,merge=1,delta=2
    97                           	psect	text72,local,class=CODE,merge=1,delta=2
    98                           	psect	text73,local,class=CODE,merge=1,delta=2
    99                           	psect	text74,local,class=CODE,merge=1,delta=2
   100                           	psect	text75,local,class=CODE,merge=1,delta=2
   101                           	psect	text76,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text78,local,class=CODE,merge=1,delta=2
   104                           	psect	text79,local,class=CODE,merge=1,delta=2
   105                           	psect	text80,local,class=CODE,merge=1,delta=2
   106                           	psect	text81,local,class=CODE,merge=1,delta=2
   107                           	psect	text82,local,class=CODE,merge=1,delta=2
   108                           	psect	text83,local,class=CODE,merge=1,delta=2
   109                           	psect	text84,local,class=CODE,merge=1,delta=2
   110                           	psect	text85,local,class=CODE,merge=1,delta=2
   111                           	psect	text86,local,class=CODE,merge=1,delta=2
   112                           	psect	text87,local,class=CODE,merge=1,delta=2
   113                           	psect	text88,local,class=CODE,merge=1,delta=2
   114                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   115                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   116                           	dabs	1,0x7E,2
   117     0000                     
   118                           ; Generated 19/07/2022 GMT
   119                           ; 
   120                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
   121                           ; All rights reserved.
   122                           ; 
   123                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   124                           ; 
   125                           ; Redistribution and use in source and binary forms, with or without modification, are
   126                           ; permitted provided that the following conditions are met:
   127                           ; 
   128                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   129                           ;        conditions and the following disclaimer.
   130                           ; 
   131                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   132                           ;        of conditions and the following disclaimer in the documentation and/or other
   133                           ;        materials provided with the distribution. Publication is not required when
   134                           ;        this file is used in an embedded application.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC16F18424 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152     0000                     	;# 
   153     0001                     	;# 
   154     0002                     	;# 
   155     0003                     	;# 
   156     0004                     	;# 
   157     0005                     	;# 
   158     0006                     	;# 
   159     0007                     	;# 
   160     0008                     	;# 
   161     0009                     	;# 
   162     000A                     	;# 
   163     000B                     	;# 
   164     000C                     	;# 
   165     000E                     	;# 
   166     0012                     	;# 
   167     0014                     	;# 
   168     0018                     	;# 
   169     001A                     	;# 
   170     008C                     	;# 
   171     008C                     	;# 
   172     008D                     	;# 
   173     008E                     	;# 
   174     008E                     	;# 
   175     008F                     	;# 
   176     0090                     	;# 
   177     0090                     	;# 
   178     0091                     	;# 
   179     0092                     	;# 
   180     0092                     	;# 
   181     0093                     	;# 
   182     0094                     	;# 
   183     0094                     	;# 
   184     0095                     	;# 
   185     0096                     	;# 
   186     0096                     	;# 
   187     0097                     	;# 
   188     0098                     	;# 
   189     0099                     	;# 
   190     009A                     	;# 
   191     009B                     	;# 
   192     009B                     	;# 
   193     009C                     	;# 
   194     009D                     	;# 
   195     009D                     	;# 
   196     009E                     	;# 
   197     009F                     	;# 
   198     010C                     	;# 
   199     010C                     	;# 
   200     010D                     	;# 
   201     010E                     	;# 
   202     010F                     	;# 
   203     010F                     	;# 
   204     0110                     	;# 
   205     0111                     	;# 
   206     0112                     	;# 
   207     0113                     	;# 
   208     0114                     	;# 
   209     0115                     	;# 
   210     0116                     	;# 
   211     0117                     	;# 
   212     0118                     	;# 
   213     0119                     	;# 
   214     0119                     	;# 
   215     0119                     	;# 
   216     011A                     	;# 
   217     011A                     	;# 
   218     011A                     	;# 
   219     011B                     	;# 
   220     011B                     	;# 
   221     011B                     	;# 
   222     011B                     	;# 
   223     011B                     	;# 
   224     011C                     	;# 
   225     011C                     	;# 
   226     011C                     	;# 
   227     011D                     	;# 
   228     011D                     	;# 
   229     011D                     	;# 
   230     011E                     	;# 
   231     011E                     	;# 
   232     011E                     	;# 
   233     011F                     	;# 
   234     011F                     	;# 
   235     011F                     	;# 
   236     011F                     	;# 
   237     011F                     	;# 
   238     018C                     	;# 
   239     018D                     	;# 
   240     018E                     	;# 
   241     018F                     	;# 
   242     0190                     	;# 
   243     0191                     	;# 
   244     0192                     	;# 
   245     020C                     	;# 
   246     020D                     	;# 
   247     020E                     	;# 
   248     020E                     	;# 
   249     020F                     	;# 
   250     020F                     	;# 
   251     0210                     	;# 
   252     0210                     	;# 
   253     0211                     	;# 
   254     0211                     	;# 
   255     0212                     	;# 
   256     0213                     	;# 
   257     0214                     	;# 
   258     0214                     	;# 
   259     0215                     	;# 
   260     0215                     	;# 
   261     0216                     	;# 
   262     0216                     	;# 
   263     0217                     	;# 
   264     0217                     	;# 
   265     0218                     	;# 
   266     0219                     	;# 
   267     021A                     	;# 
   268     021A                     	;# 
   269     021B                     	;# 
   270     021B                     	;# 
   271     021C                     	;# 
   272     021C                     	;# 
   273     021D                     	;# 
   274     021D                     	;# 
   275     021E                     	;# 
   276     021F                     	;# 
   277     028C                     	;# 
   278     028C                     	;# 
   279     028D                     	;# 
   280     028D                     	;# 
   281     028E                     	;# 
   282     028F                     	;# 
   283     0290                     	;# 
   284     0291                     	;# 
   285     0292                     	;# 
   286     0292                     	;# 
   287     0293                     	;# 
   288     0293                     	;# 
   289     0294                     	;# 
   290     0295                     	;# 
   291     0296                     	;# 
   292     0297                     	;# 
   293     0298                     	;# 
   294     0298                     	;# 
   295     0299                     	;# 
   296     0299                     	;# 
   297     029A                     	;# 
   298     029B                     	;# 
   299     029C                     	;# 
   300     029D                     	;# 
   301     029F                     	;# 
   302     030C                     	;# 
   303     030C                     	;# 
   304     030D                     	;# 
   305     030E                     	;# 
   306     030F                     	;# 
   307     0310                     	;# 
   308     0310                     	;# 
   309     0311                     	;# 
   310     0312                     	;# 
   311     0313                     	;# 
   312     0314                     	;# 
   313     0314                     	;# 
   314     0315                     	;# 
   315     0316                     	;# 
   316     0317                     	;# 
   317     0318                     	;# 
   318     0318                     	;# 
   319     0319                     	;# 
   320     031A                     	;# 
   321     031B                     	;# 
   322     038C                     	;# 
   323     038C                     	;# 
   324     038D                     	;# 
   325     038E                     	;# 
   326     0390                     	;# 
   327     0390                     	;# 
   328     0391                     	;# 
   329     0392                     	;# 
   330     048C                     	;# 
   331     048C                     	;# 
   332     048D                     	;# 
   333     048E                     	;# 
   334     048F                     	;# 
   335     048F                     	;# 
   336     0490                     	;# 
   337     0491                     	;# 
   338     0492                     	;# 
   339     0492                     	;# 
   340     0493                     	;# 
   341     0494                     	;# 
   342     0495                     	;# 
   343     0495                     	;# 
   344     0496                     	;# 
   345     0497                     	;# 
   346     0498                     	;# 
   347     0499                     	;# 
   348     049A                     	;# 
   349     049B                     	;# 
   350     049C                     	;# 
   351     049D                     	;# 
   352     058C                     	;# 
   353     058C                     	;# 
   354     058D                     	;# 
   355     058E                     	;# 
   356     058F                     	;# 
   357     058F                     	;# 
   358     0590                     	;# 
   359     0591                     	;# 
   360     0592                     	;# 
   361     0593                     	;# 
   362     059C                     	;# 
   363     059C                     	;# 
   364     059D                     	;# 
   365     059D                     	;# 
   366     059E                     	;# 
   367     059F                     	;# 
   368     060C                     	;# 
   369     060C                     	;# 
   370     060D                     	;# 
   371     060D                     	;# 
   372     060E                     	;# 
   373     060F                     	;# 
   374     0610                     	;# 
   375     0611                     	;# 
   376     0612                     	;# 
   377     0613                     	;# 
   378     0614                     	;# 
   379     0616                     	;# 
   380     0616                     	;# 
   381     0617                     	;# 
   382     0617                     	;# 
   383     0618                     	;# 
   384     0619                     	;# 
   385     061A                     	;# 
   386     061B                     	;# 
   387     061C                     	;# 
   388     061D                     	;# 
   389     061E                     	;# 
   390     070C                     	;# 
   391     070D                     	;# 
   392     070E                     	;# 
   393     070F                     	;# 
   394     0710                     	;# 
   395     0711                     	;# 
   396     0712                     	;# 
   397     0713                     	;# 
   398     0714                     	;# 
   399     0716                     	;# 
   400     0717                     	;# 
   401     0718                     	;# 
   402     0719                     	;# 
   403     071A                     	;# 
   404     071B                     	;# 
   405     071C                     	;# 
   406     071D                     	;# 
   407     071E                     	;# 
   408     0796                     	;# 
   409     0797                     	;# 
   410     0798                     	;# 
   411     0799                     	;# 
   412     079A                     	;# 
   413     079B                     	;# 
   414     079C                     	;# 
   415     079D                     	;# 
   416     080C                     	;# 
   417     080D                     	;# 
   418     080E                     	;# 
   419     080F                     	;# 
   420     0810                     	;# 
   421     0811                     	;# 
   422     0812                     	;# 
   423     0813                     	;# 
   424     0814                     	;# 
   425     081A                     	;# 
   426     081A                     	;# 
   427     081B                     	;# 
   428     081C                     	;# 
   429     081C                     	;# 
   430     081D                     	;# 
   431     081E                     	;# 
   432     081F                     	;# 
   433     088C                     	;# 
   434     088D                     	;# 
   435     088E                     	;# 
   436     088F                     	;# 
   437     0890                     	;# 
   438     0891                     	;# 
   439     0892                     	;# 
   440     0893                     	;# 
   441     0895                     	;# 
   442     0896                     	;# 
   443     0897                     	;# 
   444     0898                     	;# 
   445     0899                     	;# 
   446     089A                     	;# 
   447     089B                     	;# 
   448     090C                     	;# 
   449     090E                     	;# 
   450     090F                     	;# 
   451     091F                     	;# 
   452     098F                     	;# 
   453     098F                     	;# 
   454     0990                     	;# 
   455     0991                     	;# 
   456     0992                     	;# 
   457     0993                     	;# 
   458     0994                     	;# 
   459     0995                     	;# 
   460     0996                     	;# 
   461     0997                     	;# 
   462     1E0F                     	;# 
   463     1E10                     	;# 
   464     1E11                     	;# 
   465     1E12                     	;# 
   466     1E13                     	;# 
   467     1E14                     	;# 
   468     1E15                     	;# 
   469     1E16                     	;# 
   470     1E17                     	;# 
   471     1E18                     	;# 
   472     1E19                     	;# 
   473     1E1A                     	;# 
   474     1E1B                     	;# 
   475     1E1C                     	;# 
   476     1E1D                     	;# 
   477     1E1E                     	;# 
   478     1E1F                     	;# 
   479     1E20                     	;# 
   480     1E21                     	;# 
   481     1E22                     	;# 
   482     1E23                     	;# 
   483     1E24                     	;# 
   484     1E25                     	;# 
   485     1E26                     	;# 
   486     1E27                     	;# 
   487     1E28                     	;# 
   488     1E29                     	;# 
   489     1E2A                     	;# 
   490     1E2B                     	;# 
   491     1E2C                     	;# 
   492     1E2D                     	;# 
   493     1E2E                     	;# 
   494     1E2F                     	;# 
   495     1E30                     	;# 
   496     1E31                     	;# 
   497     1E32                     	;# 
   498     1E33                     	;# 
   499     1E34                     	;# 
   500     1E35                     	;# 
   501     1E36                     	;# 
   502     1E37                     	;# 
   503     1E8F                     	;# 
   504     1E90                     	;# 
   505     1E91                     	;# 
   506     1E92                     	;# 
   507     1E93                     	;# 
   508     1E94                     	;# 
   509     1E95                     	;# 
   510     1E96                     	;# 
   511     1E97                     	;# 
   512     1E9C                     	;# 
   513     1E9D                     	;# 
   514     1E9E                     	;# 
   515     1EA1                     	;# 
   516     1EA2                     	;# 
   517     1EA3                     	;# 
   518     1EA4                     	;# 
   519     1EA9                     	;# 
   520     1EAA                     	;# 
   521     1EB1                     	;# 
   522     1EB2                     	;# 
   523     1EB8                     	;# 
   524     1EB9                     	;# 
   525     1EBA                     	;# 
   526     1EBB                     	;# 
   527     1EBC                     	;# 
   528     1EBD                     	;# 
   529     1EBE                     	;# 
   530     1EC3                     	;# 
   531     1EC5                     	;# 
   532     1EC6                     	;# 
   533     1EC7                     	;# 
   534     1ECB                     	;# 
   535     1ECC                     	;# 
   536     1F10                     	;# 
   537     1F11                     	;# 
   538     1F12                     	;# 
   539     1F14                     	;# 
   540     1F15                     	;# 
   541     1F20                     	;# 
   542     1F21                     	;# 
   543     1F22                     	;# 
   544     1F23                     	;# 
   545     1F24                     	;# 
   546     1F25                     	;# 
   547     1F38                     	;# 
   548     1F39                     	;# 
   549     1F3A                     	;# 
   550     1F3B                     	;# 
   551     1F3C                     	;# 
   552     1F3D                     	;# 
   553     1F3E                     	;# 
   554     1F3F                     	;# 
   555     1F4E                     	;# 
   556     1F4F                     	;# 
   557     1F50                     	;# 
   558     1F51                     	;# 
   559     1F52                     	;# 
   560     1F53                     	;# 
   561     1F54                     	;# 
   562     1F55                     	;# 
   563     1FE4                     	;# 
   564     1FE5                     	;# 
   565     1FE6                     	;# 
   566     1FE7                     	;# 
   567     1FE8                     	;# 
   568     1FE8                     	;# 
   569     1FE9                     	;# 
   570     1FEA                     	;# 
   571     1FEB                     	;# 
   572     1FED                     	;# 
   573     1FEE                     	;# 
   574     1FEF                     	;# 
   575     0000                     	;# 
   576     0001                     	;# 
   577     0002                     	;# 
   578     0003                     	;# 
   579     0004                     	;# 
   580     0005                     	;# 
   581     0006                     	;# 
   582     0007                     	;# 
   583     0008                     	;# 
   584     0009                     	;# 
   585     000A                     	;# 
   586     000B                     	;# 
   587     000C                     	;# 
   588     000E                     	;# 
   589     0012                     	;# 
   590     0014                     	;# 
   591     0018                     	;# 
   592     001A                     	;# 
   593     008C                     	;# 
   594     008C                     	;# 
   595     008D                     	;# 
   596     008E                     	;# 
   597     008E                     	;# 
   598     008F                     	;# 
   599     0090                     	;# 
   600     0090                     	;# 
   601     0091                     	;# 
   602     0092                     	;# 
   603     0092                     	;# 
   604     0093                     	;# 
   605     0094                     	;# 
   606     0094                     	;# 
   607     0095                     	;# 
   608     0096                     	;# 
   609     0096                     	;# 
   610     0097                     	;# 
   611     0098                     	;# 
   612     0099                     	;# 
   613     009A                     	;# 
   614     009B                     	;# 
   615     009B                     	;# 
   616     009C                     	;# 
   617     009D                     	;# 
   618     009D                     	;# 
   619     009E                     	;# 
   620     009F                     	;# 
   621     010C                     	;# 
   622     010C                     	;# 
   623     010D                     	;# 
   624     010E                     	;# 
   625     010F                     	;# 
   626     010F                     	;# 
   627     0110                     	;# 
   628     0111                     	;# 
   629     0112                     	;# 
   630     0113                     	;# 
   631     0114                     	;# 
   632     0115                     	;# 
   633     0116                     	;# 
   634     0117                     	;# 
   635     0118                     	;# 
   636     0119                     	;# 
   637     0119                     	;# 
   638     0119                     	;# 
   639     011A                     	;# 
   640     011A                     	;# 
   641     011A                     	;# 
   642     011B                     	;# 
   643     011B                     	;# 
   644     011B                     	;# 
   645     011B                     	;# 
   646     011B                     	;# 
   647     011C                     	;# 
   648     011C                     	;# 
   649     011C                     	;# 
   650     011D                     	;# 
   651     011D                     	;# 
   652     011D                     	;# 
   653     011E                     	;# 
   654     011E                     	;# 
   655     011E                     	;# 
   656     011F                     	;# 
   657     011F                     	;# 
   658     011F                     	;# 
   659     011F                     	;# 
   660     011F                     	;# 
   661     018C                     	;# 
   662     018D                     	;# 
   663     018E                     	;# 
   664     018F                     	;# 
   665     0190                     	;# 
   666     0191                     	;# 
   667     0192                     	;# 
   668     020C                     	;# 
   669     020D                     	;# 
   670     020E                     	;# 
   671     020E                     	;# 
   672     020F                     	;# 
   673     020F                     	;# 
   674     0210                     	;# 
   675     0210                     	;# 
   676     0211                     	;# 
   677     0211                     	;# 
   678     0212                     	;# 
   679     0213                     	;# 
   680     0214                     	;# 
   681     0214                     	;# 
   682     0215                     	;# 
   683     0215                     	;# 
   684     0216                     	;# 
   685     0216                     	;# 
   686     0217                     	;# 
   687     0217                     	;# 
   688     0218                     	;# 
   689     0219                     	;# 
   690     021A                     	;# 
   691     021A                     	;# 
   692     021B                     	;# 
   693     021B                     	;# 
   694     021C                     	;# 
   695     021C                     	;# 
   696     021D                     	;# 
   697     021D                     	;# 
   698     021E                     	;# 
   699     021F                     	;# 
   700     028C                     	;# 
   701     028C                     	;# 
   702     028D                     	;# 
   703     028D                     	;# 
   704     028E                     	;# 
   705     028F                     	;# 
   706     0290                     	;# 
   707     0291                     	;# 
   708     0292                     	;# 
   709     0292                     	;# 
   710     0293                     	;# 
   711     0293                     	;# 
   712     0294                     	;# 
   713     0295                     	;# 
   714     0296                     	;# 
   715     0297                     	;# 
   716     0298                     	;# 
   717     0298                     	;# 
   718     0299                     	;# 
   719     0299                     	;# 
   720     029A                     	;# 
   721     029B                     	;# 
   722     029C                     	;# 
   723     029D                     	;# 
   724     029F                     	;# 
   725     030C                     	;# 
   726     030C                     	;# 
   727     030D                     	;# 
   728     030E                     	;# 
   729     030F                     	;# 
   730     0310                     	;# 
   731     0310                     	;# 
   732     0311                     	;# 
   733     0312                     	;# 
   734     0313                     	;# 
   735     0314                     	;# 
   736     0314                     	;# 
   737     0315                     	;# 
   738     0316                     	;# 
   739     0317                     	;# 
   740     0318                     	;# 
   741     0318                     	;# 
   742     0319                     	;# 
   743     031A                     	;# 
   744     031B                     	;# 
   745     038C                     	;# 
   746     038C                     	;# 
   747     038D                     	;# 
   748     038E                     	;# 
   749     0390                     	;# 
   750     0390                     	;# 
   751     0391                     	;# 
   752     0392                     	;# 
   753     048C                     	;# 
   754     048C                     	;# 
   755     048D                     	;# 
   756     048E                     	;# 
   757     048F                     	;# 
   758     048F                     	;# 
   759     0490                     	;# 
   760     0491                     	;# 
   761     0492                     	;# 
   762     0492                     	;# 
   763     0493                     	;# 
   764     0494                     	;# 
   765     0495                     	;# 
   766     0495                     	;# 
   767     0496                     	;# 
   768     0497                     	;# 
   769     0498                     	;# 
   770     0499                     	;# 
   771     049A                     	;# 
   772     049B                     	;# 
   773     049C                     	;# 
   774     049D                     	;# 
   775     058C                     	;# 
   776     058C                     	;# 
   777     058D                     	;# 
   778     058E                     	;# 
   779     058F                     	;# 
   780     058F                     	;# 
   781     0590                     	;# 
   782     0591                     	;# 
   783     0592                     	;# 
   784     0593                     	;# 
   785     059C                     	;# 
   786     059C                     	;# 
   787     059D                     	;# 
   788     059D                     	;# 
   789     059E                     	;# 
   790     059F                     	;# 
   791     060C                     	;# 
   792     060C                     	;# 
   793     060D                     	;# 
   794     060D                     	;# 
   795     060E                     	;# 
   796     060F                     	;# 
   797     0610                     	;# 
   798     0611                     	;# 
   799     0612                     	;# 
   800     0613                     	;# 
   801     0614                     	;# 
   802     0616                     	;# 
   803     0616                     	;# 
   804     0617                     	;# 
   805     0617                     	;# 
   806     0618                     	;# 
   807     0619                     	;# 
   808     061A                     	;# 
   809     061B                     	;# 
   810     061C                     	;# 
   811     061D                     	;# 
   812     061E                     	;# 
   813     070C                     	;# 
   814     070D                     	;# 
   815     070E                     	;# 
   816     070F                     	;# 
   817     0710                     	;# 
   818     0711                     	;# 
   819     0712                     	;# 
   820     0713                     	;# 
   821     0714                     	;# 
   822     0716                     	;# 
   823     0717                     	;# 
   824     0718                     	;# 
   825     0719                     	;# 
   826     071A                     	;# 
   827     071B                     	;# 
   828     071C                     	;# 
   829     071D                     	;# 
   830     071E                     	;# 
   831     0796                     	;# 
   832     0797                     	;# 
   833     0798                     	;# 
   834     0799                     	;# 
   835     079A                     	;# 
   836     079B                     	;# 
   837     079C                     	;# 
   838     079D                     	;# 
   839     080C                     	;# 
   840     080D                     	;# 
   841     080E                     	;# 
   842     080F                     	;# 
   843     0810                     	;# 
   844     0811                     	;# 
   845     0812                     	;# 
   846     0813                     	;# 
   847     0814                     	;# 
   848     081A                     	;# 
   849     081A                     	;# 
   850     081B                     	;# 
   851     081C                     	;# 
   852     081C                     	;# 
   853     081D                     	;# 
   854     081E                     	;# 
   855     081F                     	;# 
   856     088C                     	;# 
   857     088D                     	;# 
   858     088E                     	;# 
   859     088F                     	;# 
   860     0890                     	;# 
   861     0891                     	;# 
   862     0892                     	;# 
   863     0893                     	;# 
   864     0895                     	;# 
   865     0896                     	;# 
   866     0897                     	;# 
   867     0898                     	;# 
   868     0899                     	;# 
   869     089A                     	;# 
   870     089B                     	;# 
   871     090C                     	;# 
   872     090E                     	;# 
   873     090F                     	;# 
   874     091F                     	;# 
   875     098F                     	;# 
   876     098F                     	;# 
   877     0990                     	;# 
   878     0991                     	;# 
   879     0992                     	;# 
   880     0993                     	;# 
   881     0994                     	;# 
   882     0995                     	;# 
   883     0996                     	;# 
   884     0997                     	;# 
   885     1E0F                     	;# 
   886     1E10                     	;# 
   887     1E11                     	;# 
   888     1E12                     	;# 
   889     1E13                     	;# 
   890     1E14                     	;# 
   891     1E15                     	;# 
   892     1E16                     	;# 
   893     1E17                     	;# 
   894     1E18                     	;# 
   895     1E19                     	;# 
   896     1E1A                     	;# 
   897     1E1B                     	;# 
   898     1E1C                     	;# 
   899     1E1D                     	;# 
   900     1E1E                     	;# 
   901     1E1F                     	;# 
   902     1E20                     	;# 
   903     1E21                     	;# 
   904     1E22                     	;# 
   905     1E23                     	;# 
   906     1E24                     	;# 
   907     1E25                     	;# 
   908     1E26                     	;# 
   909     1E27                     	;# 
   910     1E28                     	;# 
   911     1E29                     	;# 
   912     1E2A                     	;# 
   913     1E2B                     	;# 
   914     1E2C                     	;# 
   915     1E2D                     	;# 
   916     1E2E                     	;# 
   917     1E2F                     	;# 
   918     1E30                     	;# 
   919     1E31                     	;# 
   920     1E32                     	;# 
   921     1E33                     	;# 
   922     1E34                     	;# 
   923     1E35                     	;# 
   924     1E36                     	;# 
   925     1E37                     	;# 
   926     1E8F                     	;# 
   927     1E90                     	;# 
   928     1E91                     	;# 
   929     1E92                     	;# 
   930     1E93                     	;# 
   931     1E94                     	;# 
   932     1E95                     	;# 
   933     1E96                     	;# 
   934     1E97                     	;# 
   935     1E9C                     	;# 
   936     1E9D                     	;# 
   937     1E9E                     	;# 
   938     1EA1                     	;# 
   939     1EA2                     	;# 
   940     1EA3                     	;# 
   941     1EA4                     	;# 
   942     1EA9                     	;# 
   943     1EAA                     	;# 
   944     1EB1                     	;# 
   945     1EB2                     	;# 
   946     1EB8                     	;# 
   947     1EB9                     	;# 
   948     1EBA                     	;# 
   949     1EBB                     	;# 
   950     1EBC                     	;# 
   951     1EBD                     	;# 
   952     1EBE                     	;# 
   953     1EC3                     	;# 
   954     1EC5                     	;# 
   955     1EC6                     	;# 
   956     1EC7                     	;# 
   957     1ECB                     	;# 
   958     1ECC                     	;# 
   959     1F10                     	;# 
   960     1F11                     	;# 
   961     1F12                     	;# 
   962     1F14                     	;# 
   963     1F15                     	;# 
   964     1F20                     	;# 
   965     1F21                     	;# 
   966     1F22                     	;# 
   967     1F23                     	;# 
   968     1F24                     	;# 
   969     1F25                     	;# 
   970     1F38                     	;# 
   971     1F39                     	;# 
   972     1F3A                     	;# 
   973     1F3B                     	;# 
   974     1F3C                     	;# 
   975     1F3D                     	;# 
   976     1F3E                     	;# 
   977     1F3F                     	;# 
   978     1F4E                     	;# 
   979     1F4F                     	;# 
   980     1F50                     	;# 
   981     1F51                     	;# 
   982     1F52                     	;# 
   983     1F53                     	;# 
   984     1F54                     	;# 
   985     1F55                     	;# 
   986     1FE4                     	;# 
   987     1FE5                     	;# 
   988     1FE6                     	;# 
   989     1FE7                     	;# 
   990     1FE8                     	;# 
   991     1FE8                     	;# 
   992     1FE9                     	;# 
   993     1FEA                     	;# 
   994     1FEB                     	;# 
   995     1FED                     	;# 
   996     1FEE                     	;# 
   997     1FEF                     	;# 
   998     0000                     	;# 
   999     0001                     	;# 
  1000     0002                     	;# 
  1001     0003                     	;# 
  1002     0004                     	;# 
  1003     0005                     	;# 
  1004     0006                     	;# 
  1005     0007                     	;# 
  1006     0008                     	;# 
  1007     0009                     	;# 
  1008     000A                     	;# 
  1009     000B                     	;# 
  1010     000C                     	;# 
  1011     000E                     	;# 
  1012     0012                     	;# 
  1013     0014                     	;# 
  1014     0018                     	;# 
  1015     001A                     	;# 
  1016     008C                     	;# 
  1017     008C                     	;# 
  1018     008D                     	;# 
  1019     008E                     	;# 
  1020     008E                     	;# 
  1021     008F                     	;# 
  1022     0090                     	;# 
  1023     0090                     	;# 
  1024     0091                     	;# 
  1025     0092                     	;# 
  1026     0092                     	;# 
  1027     0093                     	;# 
  1028     0094                     	;# 
  1029     0094                     	;# 
  1030     0095                     	;# 
  1031     0096                     	;# 
  1032     0096                     	;# 
  1033     0097                     	;# 
  1034     0098                     	;# 
  1035     0099                     	;# 
  1036     009A                     	;# 
  1037     009B                     	;# 
  1038     009B                     	;# 
  1039     009C                     	;# 
  1040     009D                     	;# 
  1041     009D                     	;# 
  1042     009E                     	;# 
  1043     009F                     	;# 
  1044     010C                     	;# 
  1045     010C                     	;# 
  1046     010D                     	;# 
  1047     010E                     	;# 
  1048     010F                     	;# 
  1049     010F                     	;# 
  1050     0110                     	;# 
  1051     0111                     	;# 
  1052     0112                     	;# 
  1053     0113                     	;# 
  1054     0114                     	;# 
  1055     0115                     	;# 
  1056     0116                     	;# 
  1057     0117                     	;# 
  1058     0118                     	;# 
  1059     0119                     	;# 
  1060     0119                     	;# 
  1061     0119                     	;# 
  1062     011A                     	;# 
  1063     011A                     	;# 
  1064     011A                     	;# 
  1065     011B                     	;# 
  1066     011B                     	;# 
  1067     011B                     	;# 
  1068     011B                     	;# 
  1069     011B                     	;# 
  1070     011C                     	;# 
  1071     011C                     	;# 
  1072     011C                     	;# 
  1073     011D                     	;# 
  1074     011D                     	;# 
  1075     011D                     	;# 
  1076     011E                     	;# 
  1077     011E                     	;# 
  1078     011E                     	;# 
  1079     011F                     	;# 
  1080     011F                     	;# 
  1081     011F                     	;# 
  1082     011F                     	;# 
  1083     011F                     	;# 
  1084     018C                     	;# 
  1085     018D                     	;# 
  1086     018E                     	;# 
  1087     018F                     	;# 
  1088     0190                     	;# 
  1089     0191                     	;# 
  1090     0192                     	;# 
  1091     020C                     	;# 
  1092     020D                     	;# 
  1093     020E                     	;# 
  1094     020E                     	;# 
  1095     020F                     	;# 
  1096     020F                     	;# 
  1097     0210                     	;# 
  1098     0210                     	;# 
  1099     0211                     	;# 
  1100     0211                     	;# 
  1101     0212                     	;# 
  1102     0213                     	;# 
  1103     0214                     	;# 
  1104     0214                     	;# 
  1105     0215                     	;# 
  1106     0215                     	;# 
  1107     0216                     	;# 
  1108     0216                     	;# 
  1109     0217                     	;# 
  1110     0217                     	;# 
  1111     0218                     	;# 
  1112     0219                     	;# 
  1113     021A                     	;# 
  1114     021A                     	;# 
  1115     021B                     	;# 
  1116     021B                     	;# 
  1117     021C                     	;# 
  1118     021C                     	;# 
  1119     021D                     	;# 
  1120     021D                     	;# 
  1121     021E                     	;# 
  1122     021F                     	;# 
  1123     028C                     	;# 
  1124     028C                     	;# 
  1125     028D                     	;# 
  1126     028D                     	;# 
  1127     028E                     	;# 
  1128     028F                     	;# 
  1129     0290                     	;# 
  1130     0291                     	;# 
  1131     0292                     	;# 
  1132     0292                     	;# 
  1133     0293                     	;# 
  1134     0293                     	;# 
  1135     0294                     	;# 
  1136     0295                     	;# 
  1137     0296                     	;# 
  1138     0297                     	;# 
  1139     0298                     	;# 
  1140     0298                     	;# 
  1141     0299                     	;# 
  1142     0299                     	;# 
  1143     029A                     	;# 
  1144     029B                     	;# 
  1145     029C                     	;# 
  1146     029D                     	;# 
  1147     029F                     	;# 
  1148     030C                     	;# 
  1149     030C                     	;# 
  1150     030D                     	;# 
  1151     030E                     	;# 
  1152     030F                     	;# 
  1153     0310                     	;# 
  1154     0310                     	;# 
  1155     0311                     	;# 
  1156     0312                     	;# 
  1157     0313                     	;# 
  1158     0314                     	;# 
  1159     0314                     	;# 
  1160     0315                     	;# 
  1161     0316                     	;# 
  1162     0317                     	;# 
  1163     0318                     	;# 
  1164     0318                     	;# 
  1165     0319                     	;# 
  1166     031A                     	;# 
  1167     031B                     	;# 
  1168     038C                     	;# 
  1169     038C                     	;# 
  1170     038D                     	;# 
  1171     038E                     	;# 
  1172     0390                     	;# 
  1173     0390                     	;# 
  1174     0391                     	;# 
  1175     0392                     	;# 
  1176     048C                     	;# 
  1177     048C                     	;# 
  1178     048D                     	;# 
  1179     048E                     	;# 
  1180     048F                     	;# 
  1181     048F                     	;# 
  1182     0490                     	;# 
  1183     0491                     	;# 
  1184     0492                     	;# 
  1185     0492                     	;# 
  1186     0493                     	;# 
  1187     0494                     	;# 
  1188     0495                     	;# 
  1189     0495                     	;# 
  1190     0496                     	;# 
  1191     0497                     	;# 
  1192     0498                     	;# 
  1193     0499                     	;# 
  1194     049A                     	;# 
  1195     049B                     	;# 
  1196     049C                     	;# 
  1197     049D                     	;# 
  1198     058C                     	;# 
  1199     058C                     	;# 
  1200     058D                     	;# 
  1201     058E                     	;# 
  1202     058F                     	;# 
  1203     058F                     	;# 
  1204     0590                     	;# 
  1205     0591                     	;# 
  1206     0592                     	;# 
  1207     0593                     	;# 
  1208     059C                     	;# 
  1209     059C                     	;# 
  1210     059D                     	;# 
  1211     059D                     	;# 
  1212     059E                     	;# 
  1213     059F                     	;# 
  1214     060C                     	;# 
  1215     060C                     	;# 
  1216     060D                     	;# 
  1217     060D                     	;# 
  1218     060E                     	;# 
  1219     060F                     	;# 
  1220     0610                     	;# 
  1221     0611                     	;# 
  1222     0612                     	;# 
  1223     0613                     	;# 
  1224     0614                     	;# 
  1225     0616                     	;# 
  1226     0616                     	;# 
  1227     0617                     	;# 
  1228     0617                     	;# 
  1229     0618                     	;# 
  1230     0619                     	;# 
  1231     061A                     	;# 
  1232     061B                     	;# 
  1233     061C                     	;# 
  1234     061D                     	;# 
  1235     061E                     	;# 
  1236     070C                     	;# 
  1237     070D                     	;# 
  1238     070E                     	;# 
  1239     070F                     	;# 
  1240     0710                     	;# 
  1241     0711                     	;# 
  1242     0712                     	;# 
  1243     0713                     	;# 
  1244     0714                     	;# 
  1245     0716                     	;# 
  1246     0717                     	;# 
  1247     0718                     	;# 
  1248     0719                     	;# 
  1249     071A                     	;# 
  1250     071B                     	;# 
  1251     071C                     	;# 
  1252     071D                     	;# 
  1253     071E                     	;# 
  1254     0796                     	;# 
  1255     0797                     	;# 
  1256     0798                     	;# 
  1257     0799                     	;# 
  1258     079A                     	;# 
  1259     079B                     	;# 
  1260     079C                     	;# 
  1261     079D                     	;# 
  1262     080C                     	;# 
  1263     080D                     	;# 
  1264     080E                     	;# 
  1265     080F                     	;# 
  1266     0810                     	;# 
  1267     0811                     	;# 
  1268     0812                     	;# 
  1269     0813                     	;# 
  1270     0814                     	;# 
  1271     081A                     	;# 
  1272     081A                     	;# 
  1273     081B                     	;# 
  1274     081C                     	;# 
  1275     081C                     	;# 
  1276     081D                     	;# 
  1277     081E                     	;# 
  1278     081F                     	;# 
  1279     088C                     	;# 
  1280     088D                     	;# 
  1281     088E                     	;# 
  1282     088F                     	;# 
  1283     0890                     	;# 
  1284     0891                     	;# 
  1285     0892                     	;# 
  1286     0893                     	;# 
  1287     0895                     	;# 
  1288     0896                     	;# 
  1289     0897                     	;# 
  1290     0898                     	;# 
  1291     0899                     	;# 
  1292     089A                     	;# 
  1293     089B                     	;# 
  1294     090C                     	;# 
  1295     090E                     	;# 
  1296     090F                     	;# 
  1297     091F                     	;# 
  1298     098F                     	;# 
  1299     098F                     	;# 
  1300     0990                     	;# 
  1301     0991                     	;# 
  1302     0992                     	;# 
  1303     0993                     	;# 
  1304     0994                     	;# 
  1305     0995                     	;# 
  1306     0996                     	;# 
  1307     0997                     	;# 
  1308     1E0F                     	;# 
  1309     1E10                     	;# 
  1310     1E11                     	;# 
  1311     1E12                     	;# 
  1312     1E13                     	;# 
  1313     1E14                     	;# 
  1314     1E15                     	;# 
  1315     1E16                     	;# 
  1316     1E17                     	;# 
  1317     1E18                     	;# 
  1318     1E19                     	;# 
  1319     1E1A                     	;# 
  1320     1E1B                     	;# 
  1321     1E1C                     	;# 
  1322     1E1D                     	;# 
  1323     1E1E                     	;# 
  1324     1E1F                     	;# 
  1325     1E20                     	;# 
  1326     1E21                     	;# 
  1327     1E22                     	;# 
  1328     1E23                     	;# 
  1329     1E24                     	;# 
  1330     1E25                     	;# 
  1331     1E26                     	;# 
  1332     1E27                     	;# 
  1333     1E28                     	;# 
  1334     1E29                     	;# 
  1335     1E2A                     	;# 
  1336     1E2B                     	;# 
  1337     1E2C                     	;# 
  1338     1E2D                     	;# 
  1339     1E2E                     	;# 
  1340     1E2F                     	;# 
  1341     1E30                     	;# 
  1342     1E31                     	;# 
  1343     1E32                     	;# 
  1344     1E33                     	;# 
  1345     1E34                     	;# 
  1346     1E35                     	;# 
  1347     1E36                     	;# 
  1348     1E37                     	;# 
  1349     1E8F                     	;# 
  1350     1E90                     	;# 
  1351     1E91                     	;# 
  1352     1E92                     	;# 
  1353     1E93                     	;# 
  1354     1E94                     	;# 
  1355     1E95                     	;# 
  1356     1E96                     	;# 
  1357     1E97                     	;# 
  1358     1E9C                     	;# 
  1359     1E9D                     	;# 
  1360     1E9E                     	;# 
  1361     1EA1                     	;# 
  1362     1EA2                     	;# 
  1363     1EA3                     	;# 
  1364     1EA4                     	;# 
  1365     1EA9                     	;# 
  1366     1EAA                     	;# 
  1367     1EB1                     	;# 
  1368     1EB2                     	;# 
  1369     1EB8                     	;# 
  1370     1EB9                     	;# 
  1371     1EBA                     	;# 
  1372     1EBB                     	;# 
  1373     1EBC                     	;# 
  1374     1EBD                     	;# 
  1375     1EBE                     	;# 
  1376     1EC3                     	;# 
  1377     1EC5                     	;# 
  1378     1EC6                     	;# 
  1379     1EC7                     	;# 
  1380     1ECB                     	;# 
  1381     1ECC                     	;# 
  1382     1F10                     	;# 
  1383     1F11                     	;# 
  1384     1F12                     	;# 
  1385     1F14                     	;# 
  1386     1F15                     	;# 
  1387     1F20                     	;# 
  1388     1F21                     	;# 
  1389     1F22                     	;# 
  1390     1F23                     	;# 
  1391     1F24                     	;# 
  1392     1F25                     	;# 
  1393     1F38                     	;# 
  1394     1F39                     	;# 
  1395     1F3A                     	;# 
  1396     1F3B                     	;# 
  1397     1F3C                     	;# 
  1398     1F3D                     	;# 
  1399     1F3E                     	;# 
  1400     1F3F                     	;# 
  1401     1F4E                     	;# 
  1402     1F4F                     	;# 
  1403     1F50                     	;# 
  1404     1F51                     	;# 
  1405     1F52                     	;# 
  1406     1F53                     	;# 
  1407     1F54                     	;# 
  1408     1F55                     	;# 
  1409     1FE4                     	;# 
  1410     1FE5                     	;# 
  1411     1FE6                     	;# 
  1412     1FE7                     	;# 
  1413     1FE8                     	;# 
  1414     1FE8                     	;# 
  1415     1FE9                     	;# 
  1416     1FEA                     	;# 
  1417     1FEB                     	;# 
  1418     1FED                     	;# 
  1419     1FEE                     	;# 
  1420     1FEF                     	;# 
  1421     0000                     	;# 
  1422     0001                     	;# 
  1423     0002                     	;# 
  1424     0003                     	;# 
  1425     0004                     	;# 
  1426     0005                     	;# 
  1427     0006                     	;# 
  1428     0007                     	;# 
  1429     0008                     	;# 
  1430     0009                     	;# 
  1431     000A                     	;# 
  1432     000B                     	;# 
  1433     000C                     	;# 
  1434     000E                     	;# 
  1435     0012                     	;# 
  1436     0014                     	;# 
  1437     0018                     	;# 
  1438     001A                     	;# 
  1439     008C                     	;# 
  1440     008C                     	;# 
  1441     008D                     	;# 
  1442     008E                     	;# 
  1443     008E                     	;# 
  1444     008F                     	;# 
  1445     0090                     	;# 
  1446     0090                     	;# 
  1447     0091                     	;# 
  1448     0092                     	;# 
  1449     0092                     	;# 
  1450     0093                     	;# 
  1451     0094                     	;# 
  1452     0094                     	;# 
  1453     0095                     	;# 
  1454     0096                     	;# 
  1455     0096                     	;# 
  1456     0097                     	;# 
  1457     0098                     	;# 
  1458     0099                     	;# 
  1459     009A                     	;# 
  1460     009B                     	;# 
  1461     009B                     	;# 
  1462     009C                     	;# 
  1463     009D                     	;# 
  1464     009D                     	;# 
  1465     009E                     	;# 
  1466     009F                     	;# 
  1467     010C                     	;# 
  1468     010C                     	;# 
  1469     010D                     	;# 
  1470     010E                     	;# 
  1471     010F                     	;# 
  1472     010F                     	;# 
  1473     0110                     	;# 
  1474     0111                     	;# 
  1475     0112                     	;# 
  1476     0113                     	;# 
  1477     0114                     	;# 
  1478     0115                     	;# 
  1479     0116                     	;# 
  1480     0117                     	;# 
  1481     0118                     	;# 
  1482     0119                     	;# 
  1483     0119                     	;# 
  1484     0119                     	;# 
  1485     011A                     	;# 
  1486     011A                     	;# 
  1487     011A                     	;# 
  1488     011B                     	;# 
  1489     011B                     	;# 
  1490     011B                     	;# 
  1491     011B                     	;# 
  1492     011B                     	;# 
  1493     011C                     	;# 
  1494     011C                     	;# 
  1495     011C                     	;# 
  1496     011D                     	;# 
  1497     011D                     	;# 
  1498     011D                     	;# 
  1499     011E                     	;# 
  1500     011E                     	;# 
  1501     011E                     	;# 
  1502     011F                     	;# 
  1503     011F                     	;# 
  1504     011F                     	;# 
  1505     011F                     	;# 
  1506     011F                     	;# 
  1507     018C                     	;# 
  1508     018D                     	;# 
  1509     018E                     	;# 
  1510     018F                     	;# 
  1511     0190                     	;# 
  1512     0191                     	;# 
  1513     0192                     	;# 
  1514     020C                     	;# 
  1515     020D                     	;# 
  1516     020E                     	;# 
  1517     020E                     	;# 
  1518     020F                     	;# 
  1519     020F                     	;# 
  1520     0210                     	;# 
  1521     0210                     	;# 
  1522     0211                     	;# 
  1523     0211                     	;# 
  1524     0212                     	;# 
  1525     0213                     	;# 
  1526     0214                     	;# 
  1527     0214                     	;# 
  1528     0215                     	;# 
  1529     0215                     	;# 
  1530     0216                     	;# 
  1531     0216                     	;# 
  1532     0217                     	;# 
  1533     0217                     	;# 
  1534     0218                     	;# 
  1535     0219                     	;# 
  1536     021A                     	;# 
  1537     021A                     	;# 
  1538     021B                     	;# 
  1539     021B                     	;# 
  1540     021C                     	;# 
  1541     021C                     	;# 
  1542     021D                     	;# 
  1543     021D                     	;# 
  1544     021E                     	;# 
  1545     021F                     	;# 
  1546     028C                     	;# 
  1547     028C                     	;# 
  1548     028D                     	;# 
  1549     028D                     	;# 
  1550     028E                     	;# 
  1551     028F                     	;# 
  1552     0290                     	;# 
  1553     0291                     	;# 
  1554     0292                     	;# 
  1555     0292                     	;# 
  1556     0293                     	;# 
  1557     0293                     	;# 
  1558     0294                     	;# 
  1559     0295                     	;# 
  1560     0296                     	;# 
  1561     0297                     	;# 
  1562     0298                     	;# 
  1563     0298                     	;# 
  1564     0299                     	;# 
  1565     0299                     	;# 
  1566     029A                     	;# 
  1567     029B                     	;# 
  1568     029C                     	;# 
  1569     029D                     	;# 
  1570     029F                     	;# 
  1571     030C                     	;# 
  1572     030C                     	;# 
  1573     030D                     	;# 
  1574     030E                     	;# 
  1575     030F                     	;# 
  1576     0310                     	;# 
  1577     0310                     	;# 
  1578     0311                     	;# 
  1579     0312                     	;# 
  1580     0313                     	;# 
  1581     0314                     	;# 
  1582     0314                     	;# 
  1583     0315                     	;# 
  1584     0316                     	;# 
  1585     0317                     	;# 
  1586     0318                     	;# 
  1587     0318                     	;# 
  1588     0319                     	;# 
  1589     031A                     	;# 
  1590     031B                     	;# 
  1591     038C                     	;# 
  1592     038C                     	;# 
  1593     038D                     	;# 
  1594     038E                     	;# 
  1595     0390                     	;# 
  1596     0390                     	;# 
  1597     0391                     	;# 
  1598     0392                     	;# 
  1599     048C                     	;# 
  1600     048C                     	;# 
  1601     048D                     	;# 
  1602     048E                     	;# 
  1603     048F                     	;# 
  1604     048F                     	;# 
  1605     0490                     	;# 
  1606     0491                     	;# 
  1607     0492                     	;# 
  1608     0492                     	;# 
  1609     0493                     	;# 
  1610     0494                     	;# 
  1611     0495                     	;# 
  1612     0495                     	;# 
  1613     0496                     	;# 
  1614     0497                     	;# 
  1615     0498                     	;# 
  1616     0499                     	;# 
  1617     049A                     	;# 
  1618     049B                     	;# 
  1619     049C                     	;# 
  1620     049D                     	;# 
  1621     058C                     	;# 
  1622     058C                     	;# 
  1623     058D                     	;# 
  1624     058E                     	;# 
  1625     058F                     	;# 
  1626     058F                     	;# 
  1627     0590                     	;# 
  1628     0591                     	;# 
  1629     0592                     	;# 
  1630     0593                     	;# 
  1631     059C                     	;# 
  1632     059C                     	;# 
  1633     059D                     	;# 
  1634     059D                     	;# 
  1635     059E                     	;# 
  1636     059F                     	;# 
  1637     060C                     	;# 
  1638     060C                     	;# 
  1639     060D                     	;# 
  1640     060D                     	;# 
  1641     060E                     	;# 
  1642     060F                     	;# 
  1643     0610                     	;# 
  1644     0611                     	;# 
  1645     0612                     	;# 
  1646     0613                     	;# 
  1647     0614                     	;# 
  1648     0616                     	;# 
  1649     0616                     	;# 
  1650     0617                     	;# 
  1651     0617                     	;# 
  1652     0618                     	;# 
  1653     0619                     	;# 
  1654     061A                     	;# 
  1655     061B                     	;# 
  1656     061C                     	;# 
  1657     061D                     	;# 
  1658     061E                     	;# 
  1659     070C                     	;# 
  1660     070D                     	;# 
  1661     070E                     	;# 
  1662     070F                     	;# 
  1663     0710                     	;# 
  1664     0711                     	;# 
  1665     0712                     	;# 
  1666     0713                     	;# 
  1667     0714                     	;# 
  1668     0716                     	;# 
  1669     0717                     	;# 
  1670     0718                     	;# 
  1671     0719                     	;# 
  1672     071A                     	;# 
  1673     071B                     	;# 
  1674     071C                     	;# 
  1675     071D                     	;# 
  1676     071E                     	;# 
  1677     0796                     	;# 
  1678     0797                     	;# 
  1679     0798                     	;# 
  1680     0799                     	;# 
  1681     079A                     	;# 
  1682     079B                     	;# 
  1683     079C                     	;# 
  1684     079D                     	;# 
  1685     080C                     	;# 
  1686     080D                     	;# 
  1687     080E                     	;# 
  1688     080F                     	;# 
  1689     0810                     	;# 
  1690     0811                     	;# 
  1691     0812                     	;# 
  1692     0813                     	;# 
  1693     0814                     	;# 
  1694     081A                     	;# 
  1695     081A                     	;# 
  1696     081B                     	;# 
  1697     081C                     	;# 
  1698     081C                     	;# 
  1699     081D                     	;# 
  1700     081E                     	;# 
  1701     081F                     	;# 
  1702     088C                     	;# 
  1703     088D                     	;# 
  1704     088E                     	;# 
  1705     088F                     	;# 
  1706     0890                     	;# 
  1707     0891                     	;# 
  1708     0892                     	;# 
  1709     0893                     	;# 
  1710     0895                     	;# 
  1711     0896                     	;# 
  1712     0897                     	;# 
  1713     0898                     	;# 
  1714     0899                     	;# 
  1715     089A                     	;# 
  1716     089B                     	;# 
  1717     090C                     	;# 
  1718     090E                     	;# 
  1719     090F                     	;# 
  1720     091F                     	;# 
  1721     098F                     	;# 
  1722     098F                     	;# 
  1723     0990                     	;# 
  1724     0991                     	;# 
  1725     0992                     	;# 
  1726     0993                     	;# 
  1727     0994                     	;# 
  1728     0995                     	;# 
  1729     0996                     	;# 
  1730     0997                     	;# 
  1731     1E0F                     	;# 
  1732     1E10                     	;# 
  1733     1E11                     	;# 
  1734     1E12                     	;# 
  1735     1E13                     	;# 
  1736     1E14                     	;# 
  1737     1E15                     	;# 
  1738     1E16                     	;# 
  1739     1E17                     	;# 
  1740     1E18                     	;# 
  1741     1E19                     	;# 
  1742     1E1A                     	;# 
  1743     1E1B                     	;# 
  1744     1E1C                     	;# 
  1745     1E1D                     	;# 
  1746     1E1E                     	;# 
  1747     1E1F                     	;# 
  1748     1E20                     	;# 
  1749     1E21                     	;# 
  1750     1E22                     	;# 
  1751     1E23                     	;# 
  1752     1E24                     	;# 
  1753     1E25                     	;# 
  1754     1E26                     	;# 
  1755     1E27                     	;# 
  1756     1E28                     	;# 
  1757     1E29                     	;# 
  1758     1E2A                     	;# 
  1759     1E2B                     	;# 
  1760     1E2C                     	;# 
  1761     1E2D                     	;# 
  1762     1E2E                     	;# 
  1763     1E2F                     	;# 
  1764     1E30                     	;# 
  1765     1E31                     	;# 
  1766     1E32                     	;# 
  1767     1E33                     	;# 
  1768     1E34                     	;# 
  1769     1E35                     	;# 
  1770     1E36                     	;# 
  1771     1E37                     	;# 
  1772     1E8F                     	;# 
  1773     1E90                     	;# 
  1774     1E91                     	;# 
  1775     1E92                     	;# 
  1776     1E93                     	;# 
  1777     1E94                     	;# 
  1778     1E95                     	;# 
  1779     1E96                     	;# 
  1780     1E97                     	;# 
  1781     1E9C                     	;# 
  1782     1E9D                     	;# 
  1783     1E9E                     	;# 
  1784     1EA1                     	;# 
  1785     1EA2                     	;# 
  1786     1EA3                     	;# 
  1787     1EA4                     	;# 
  1788     1EA9                     	;# 
  1789     1EAA                     	;# 
  1790     1EB1                     	;# 
  1791     1EB2                     	;# 
  1792     1EB8                     	;# 
  1793     1EB9                     	;# 
  1794     1EBA                     	;# 
  1795     1EBB                     	;# 
  1796     1EBC                     	;# 
  1797     1EBD                     	;# 
  1798     1EBE                     	;# 
  1799     1EC3                     	;# 
  1800     1EC5                     	;# 
  1801     1EC6                     	;# 
  1802     1EC7                     	;# 
  1803     1ECB                     	;# 
  1804     1ECC                     	;# 
  1805     1F10                     	;# 
  1806     1F11                     	;# 
  1807     1F12                     	;# 
  1808     1F14                     	;# 
  1809     1F15                     	;# 
  1810     1F20                     	;# 
  1811     1F21                     	;# 
  1812     1F22                     	;# 
  1813     1F23                     	;# 
  1814     1F24                     	;# 
  1815     1F25                     	;# 
  1816     1F38                     	;# 
  1817     1F39                     	;# 
  1818     1F3A                     	;# 
  1819     1F3B                     	;# 
  1820     1F3C                     	;# 
  1821     1F3D                     	;# 
  1822     1F3E                     	;# 
  1823     1F3F                     	;# 
  1824     1F4E                     	;# 
  1825     1F4F                     	;# 
  1826     1F50                     	;# 
  1827     1F51                     	;# 
  1828     1F52                     	;# 
  1829     1F53                     	;# 
  1830     1F54                     	;# 
  1831     1F55                     	;# 
  1832     1FE4                     	;# 
  1833     1FE5                     	;# 
  1834     1FE6                     	;# 
  1835     1FE7                     	;# 
  1836     1FE8                     	;# 
  1837     1FE8                     	;# 
  1838     1FE9                     	;# 
  1839     1FEA                     	;# 
  1840     1FEB                     	;# 
  1841     1FED                     	;# 
  1842     1FEE                     	;# 
  1843     1FEF                     	;# 
  1844     0000                     	;# 
  1845     0001                     	;# 
  1846     0002                     	;# 
  1847     0003                     	;# 
  1848     0004                     	;# 
  1849     0005                     	;# 
  1850     0006                     	;# 
  1851     0007                     	;# 
  1852     0008                     	;# 
  1853     0009                     	;# 
  1854     000A                     	;# 
  1855     000B                     	;# 
  1856     000C                     	;# 
  1857     000E                     	;# 
  1858     0012                     	;# 
  1859     0014                     	;# 
  1860     0018                     	;# 
  1861     001A                     	;# 
  1862     008C                     	;# 
  1863     008C                     	;# 
  1864     008D                     	;# 
  1865     008E                     	;# 
  1866     008E                     	;# 
  1867     008F                     	;# 
  1868     0090                     	;# 
  1869     0090                     	;# 
  1870     0091                     	;# 
  1871     0092                     	;# 
  1872     0092                     	;# 
  1873     0093                     	;# 
  1874     0094                     	;# 
  1875     0094                     	;# 
  1876     0095                     	;# 
  1877     0096                     	;# 
  1878     0096                     	;# 
  1879     0097                     	;# 
  1880     0098                     	;# 
  1881     0099                     	;# 
  1882     009A                     	;# 
  1883     009B                     	;# 
  1884     009B                     	;# 
  1885     009C                     	;# 
  1886     009D                     	;# 
  1887     009D                     	;# 
  1888     009E                     	;# 
  1889     009F                     	;# 
  1890     010C                     	;# 
  1891     010C                     	;# 
  1892     010D                     	;# 
  1893     010E                     	;# 
  1894     010F                     	;# 
  1895     010F                     	;# 
  1896     0110                     	;# 
  1897     0111                     	;# 
  1898     0112                     	;# 
  1899     0113                     	;# 
  1900     0114                     	;# 
  1901     0115                     	;# 
  1902     0116                     	;# 
  1903     0117                     	;# 
  1904     0118                     	;# 
  1905     0119                     	;# 
  1906     0119                     	;# 
  1907     0119                     	;# 
  1908     011A                     	;# 
  1909     011A                     	;# 
  1910     011A                     	;# 
  1911     011B                     	;# 
  1912     011B                     	;# 
  1913     011B                     	;# 
  1914     011B                     	;# 
  1915     011B                     	;# 
  1916     011C                     	;# 
  1917     011C                     	;# 
  1918     011C                     	;# 
  1919     011D                     	;# 
  1920     011D                     	;# 
  1921     011D                     	;# 
  1922     011E                     	;# 
  1923     011E                     	;# 
  1924     011E                     	;# 
  1925     011F                     	;# 
  1926     011F                     	;# 
  1927     011F                     	;# 
  1928     011F                     	;# 
  1929     011F                     	;# 
  1930     018C                     	;# 
  1931     018D                     	;# 
  1932     018E                     	;# 
  1933     018F                     	;# 
  1934     0190                     	;# 
  1935     0191                     	;# 
  1936     0192                     	;# 
  1937     020C                     	;# 
  1938     020D                     	;# 
  1939     020E                     	;# 
  1940     020E                     	;# 
  1941     020F                     	;# 
  1942     020F                     	;# 
  1943     0210                     	;# 
  1944     0210                     	;# 
  1945     0211                     	;# 
  1946     0211                     	;# 
  1947     0212                     	;# 
  1948     0213                     	;# 
  1949     0214                     	;# 
  1950     0214                     	;# 
  1951     0215                     	;# 
  1952     0215                     	;# 
  1953     0216                     	;# 
  1954     0216                     	;# 
  1955     0217                     	;# 
  1956     0217                     	;# 
  1957     0218                     	;# 
  1958     0219                     	;# 
  1959     021A                     	;# 
  1960     021A                     	;# 
  1961     021B                     	;# 
  1962     021B                     	;# 
  1963     021C                     	;# 
  1964     021C                     	;# 
  1965     021D                     	;# 
  1966     021D                     	;# 
  1967     021E                     	;# 
  1968     021F                     	;# 
  1969     028C                     	;# 
  1970     028C                     	;# 
  1971     028D                     	;# 
  1972     028D                     	;# 
  1973     028E                     	;# 
  1974     028F                     	;# 
  1975     0290                     	;# 
  1976     0291                     	;# 
  1977     0292                     	;# 
  1978     0292                     	;# 
  1979     0293                     	;# 
  1980     0293                     	;# 
  1981     0294                     	;# 
  1982     0295                     	;# 
  1983     0296                     	;# 
  1984     0297                     	;# 
  1985     0298                     	;# 
  1986     0298                     	;# 
  1987     0299                     	;# 
  1988     0299                     	;# 
  1989     029A                     	;# 
  1990     029B                     	;# 
  1991     029C                     	;# 
  1992     029D                     	;# 
  1993     029F                     	;# 
  1994     030C                     	;# 
  1995     030C                     	;# 
  1996     030D                     	;# 
  1997     030E                     	;# 
  1998     030F                     	;# 
  1999     0310                     	;# 
  2000     0310                     	;# 
  2001     0311                     	;# 
  2002     0312                     	;# 
  2003     0313                     	;# 
  2004     0314                     	;# 
  2005     0314                     	;# 
  2006     0315                     	;# 
  2007     0316                     	;# 
  2008     0317                     	;# 
  2009     0318                     	;# 
  2010     0318                     	;# 
  2011     0319                     	;# 
  2012     031A                     	;# 
  2013     031B                     	;# 
  2014     038C                     	;# 
  2015     038C                     	;# 
  2016     038D                     	;# 
  2017     038E                     	;# 
  2018     0390                     	;# 
  2019     0390                     	;# 
  2020     0391                     	;# 
  2021     0392                     	;# 
  2022     048C                     	;# 
  2023     048C                     	;# 
  2024     048D                     	;# 
  2025     048E                     	;# 
  2026     048F                     	;# 
  2027     048F                     	;# 
  2028     0490                     	;# 
  2029     0491                     	;# 
  2030     0492                     	;# 
  2031     0492                     	;# 
  2032     0493                     	;# 
  2033     0494                     	;# 
  2034     0495                     	;# 
  2035     0495                     	;# 
  2036     0496                     	;# 
  2037     0497                     	;# 
  2038     0498                     	;# 
  2039     0499                     	;# 
  2040     049A                     	;# 
  2041     049B                     	;# 
  2042     049C                     	;# 
  2043     049D                     	;# 
  2044     058C                     	;# 
  2045     058C                     	;# 
  2046     058D                     	;# 
  2047     058E                     	;# 
  2048     058F                     	;# 
  2049     058F                     	;# 
  2050     0590                     	;# 
  2051     0591                     	;# 
  2052     0592                     	;# 
  2053     0593                     	;# 
  2054     059C                     	;# 
  2055     059C                     	;# 
  2056     059D                     	;# 
  2057     059D                     	;# 
  2058     059E                     	;# 
  2059     059F                     	;# 
  2060     060C                     	;# 
  2061     060C                     	;# 
  2062     060D                     	;# 
  2063     060D                     	;# 
  2064     060E                     	;# 
  2065     060F                     	;# 
  2066     0610                     	;# 
  2067     0611                     	;# 
  2068     0612                     	;# 
  2069     0613                     	;# 
  2070     0614                     	;# 
  2071     0616                     	;# 
  2072     0616                     	;# 
  2073     0617                     	;# 
  2074     0617                     	;# 
  2075     0618                     	;# 
  2076     0619                     	;# 
  2077     061A                     	;# 
  2078     061B                     	;# 
  2079     061C                     	;# 
  2080     061D                     	;# 
  2081     061E                     	;# 
  2082     070C                     	;# 
  2083     070D                     	;# 
  2084     070E                     	;# 
  2085     070F                     	;# 
  2086     0710                     	;# 
  2087     0711                     	;# 
  2088     0712                     	;# 
  2089     0713                     	;# 
  2090     0714                     	;# 
  2091     0716                     	;# 
  2092     0717                     	;# 
  2093     0718                     	;# 
  2094     0719                     	;# 
  2095     071A                     	;# 
  2096     071B                     	;# 
  2097     071C                     	;# 
  2098     071D                     	;# 
  2099     071E                     	;# 
  2100     0796                     	;# 
  2101     0797                     	;# 
  2102     0798                     	;# 
  2103     0799                     	;# 
  2104     079A                     	;# 
  2105     079B                     	;# 
  2106     079C                     	;# 
  2107     079D                     	;# 
  2108     080C                     	;# 
  2109     080D                     	;# 
  2110     080E                     	;# 
  2111     080F                     	;# 
  2112     0810                     	;# 
  2113     0811                     	;# 
  2114     0812                     	;# 
  2115     0813                     	;# 
  2116     0814                     	;# 
  2117     081A                     	;# 
  2118     081A                     	;# 
  2119     081B                     	;# 
  2120     081C                     	;# 
  2121     081C                     	;# 
  2122     081D                     	;# 
  2123     081E                     	;# 
  2124     081F                     	;# 
  2125     088C                     	;# 
  2126     088D                     	;# 
  2127     088E                     	;# 
  2128     088F                     	;# 
  2129     0890                     	;# 
  2130     0891                     	;# 
  2131     0892                     	;# 
  2132     0893                     	;# 
  2133     0895                     	;# 
  2134     0896                     	;# 
  2135     0897                     	;# 
  2136     0898                     	;# 
  2137     0899                     	;# 
  2138     089A                     	;# 
  2139     089B                     	;# 
  2140     090C                     	;# 
  2141     090E                     	;# 
  2142     090F                     	;# 
  2143     091F                     	;# 
  2144     098F                     	;# 
  2145     098F                     	;# 
  2146     0990                     	;# 
  2147     0991                     	;# 
  2148     0992                     	;# 
  2149     0993                     	;# 
  2150     0994                     	;# 
  2151     0995                     	;# 
  2152     0996                     	;# 
  2153     0997                     	;# 
  2154     1E0F                     	;# 
  2155     1E10                     	;# 
  2156     1E11                     	;# 
  2157     1E12                     	;# 
  2158     1E13                     	;# 
  2159     1E14                     	;# 
  2160     1E15                     	;# 
  2161     1E16                     	;# 
  2162     1E17                     	;# 
  2163     1E18                     	;# 
  2164     1E19                     	;# 
  2165     1E1A                     	;# 
  2166     1E1B                     	;# 
  2167     1E1C                     	;# 
  2168     1E1D                     	;# 
  2169     1E1E                     	;# 
  2170     1E1F                     	;# 
  2171     1E20                     	;# 
  2172     1E21                     	;# 
  2173     1E22                     	;# 
  2174     1E23                     	;# 
  2175     1E24                     	;# 
  2176     1E25                     	;# 
  2177     1E26                     	;# 
  2178     1E27                     	;# 
  2179     1E28                     	;# 
  2180     1E29                     	;# 
  2181     1E2A                     	;# 
  2182     1E2B                     	;# 
  2183     1E2C                     	;# 
  2184     1E2D                     	;# 
  2185     1E2E                     	;# 
  2186     1E2F                     	;# 
  2187     1E30                     	;# 
  2188     1E31                     	;# 
  2189     1E32                     	;# 
  2190     1E33                     	;# 
  2191     1E34                     	;# 
  2192     1E35                     	;# 
  2193     1E36                     	;# 
  2194     1E37                     	;# 
  2195     1E8F                     	;# 
  2196     1E90                     	;# 
  2197     1E91                     	;# 
  2198     1E92                     	;# 
  2199     1E93                     	;# 
  2200     1E94                     	;# 
  2201     1E95                     	;# 
  2202     1E96                     	;# 
  2203     1E97                     	;# 
  2204     1E9C                     	;# 
  2205     1E9D                     	;# 
  2206     1E9E                     	;# 
  2207     1EA1                     	;# 
  2208     1EA2                     	;# 
  2209     1EA3                     	;# 
  2210     1EA4                     	;# 
  2211     1EA9                     	;# 
  2212     1EAA                     	;# 
  2213     1EB1                     	;# 
  2214     1EB2                     	;# 
  2215     1EB8                     	;# 
  2216     1EB9                     	;# 
  2217     1EBA                     	;# 
  2218     1EBB                     	;# 
  2219     1EBC                     	;# 
  2220     1EBD                     	;# 
  2221     1EBE                     	;# 
  2222     1EC3                     	;# 
  2223     1EC5                     	;# 
  2224     1EC6                     	;# 
  2225     1EC7                     	;# 
  2226     1ECB                     	;# 
  2227     1ECC                     	;# 
  2228     1F10                     	;# 
  2229     1F11                     	;# 
  2230     1F12                     	;# 
  2231     1F14                     	;# 
  2232     1F15                     	;# 
  2233     1F20                     	;# 
  2234     1F21                     	;# 
  2235     1F22                     	;# 
  2236     1F23                     	;# 
  2237     1F24                     	;# 
  2238     1F25                     	;# 
  2239     1F38                     	;# 
  2240     1F39                     	;# 
  2241     1F3A                     	;# 
  2242     1F3B                     	;# 
  2243     1F3C                     	;# 
  2244     1F3D                     	;# 
  2245     1F3E                     	;# 
  2246     1F3F                     	;# 
  2247     1F4E                     	;# 
  2248     1F4F                     	;# 
  2249     1F50                     	;# 
  2250     1F51                     	;# 
  2251     1F52                     	;# 
  2252     1F53                     	;# 
  2253     1F54                     	;# 
  2254     1F55                     	;# 
  2255     1FE4                     	;# 
  2256     1FE5                     	;# 
  2257     1FE6                     	;# 
  2258     1FE7                     	;# 
  2259     1FE8                     	;# 
  2260     1FE8                     	;# 
  2261     1FE9                     	;# 
  2262     1FEA                     	;# 
  2263     1FEB                     	;# 
  2264     1FED                     	;# 
  2265     1FEE                     	;# 
  2266     1FEF                     	;# 
  2267     0000                     	;# 
  2268     0001                     	;# 
  2269     0002                     	;# 
  2270     0003                     	;# 
  2271     0004                     	;# 
  2272     0005                     	;# 
  2273     0006                     	;# 
  2274     0007                     	;# 
  2275     0008                     	;# 
  2276     0009                     	;# 
  2277     000A                     	;# 
  2278     000B                     	;# 
  2279     000C                     	;# 
  2280     000E                     	;# 
  2281     0012                     	;# 
  2282     0014                     	;# 
  2283     0018                     	;# 
  2284     001A                     	;# 
  2285     008C                     	;# 
  2286     008C                     	;# 
  2287     008D                     	;# 
  2288     008E                     	;# 
  2289     008E                     	;# 
  2290     008F                     	;# 
  2291     0090                     	;# 
  2292     0090                     	;# 
  2293     0091                     	;# 
  2294     0092                     	;# 
  2295     0092                     	;# 
  2296     0093                     	;# 
  2297     0094                     	;# 
  2298     0094                     	;# 
  2299     0095                     	;# 
  2300     0096                     	;# 
  2301     0096                     	;# 
  2302     0097                     	;# 
  2303     0098                     	;# 
  2304     0099                     	;# 
  2305     009A                     	;# 
  2306     009B                     	;# 
  2307     009B                     	;# 
  2308     009C                     	;# 
  2309     009D                     	;# 
  2310     009D                     	;# 
  2311     009E                     	;# 
  2312     009F                     	;# 
  2313     010C                     	;# 
  2314     010C                     	;# 
  2315     010D                     	;# 
  2316     010E                     	;# 
  2317     010F                     	;# 
  2318     010F                     	;# 
  2319     0110                     	;# 
  2320     0111                     	;# 
  2321     0112                     	;# 
  2322     0113                     	;# 
  2323     0114                     	;# 
  2324     0115                     	;# 
  2325     0116                     	;# 
  2326     0117                     	;# 
  2327     0118                     	;# 
  2328     0119                     	;# 
  2329     0119                     	;# 
  2330     0119                     	;# 
  2331     011A                     	;# 
  2332     011A                     	;# 
  2333     011A                     	;# 
  2334     011B                     	;# 
  2335     011B                     	;# 
  2336     011B                     	;# 
  2337     011B                     	;# 
  2338     011B                     	;# 
  2339     011C                     	;# 
  2340     011C                     	;# 
  2341     011C                     	;# 
  2342     011D                     	;# 
  2343     011D                     	;# 
  2344     011D                     	;# 
  2345     011E                     	;# 
  2346     011E                     	;# 
  2347     011E                     	;# 
  2348     011F                     	;# 
  2349     011F                     	;# 
  2350     011F                     	;# 
  2351     011F                     	;# 
  2352     011F                     	;# 
  2353     018C                     	;# 
  2354     018D                     	;# 
  2355     018E                     	;# 
  2356     018F                     	;# 
  2357     0190                     	;# 
  2358     0191                     	;# 
  2359     0192                     	;# 
  2360     020C                     	;# 
  2361     020D                     	;# 
  2362     020E                     	;# 
  2363     020E                     	;# 
  2364     020F                     	;# 
  2365     020F                     	;# 
  2366     0210                     	;# 
  2367     0210                     	;# 
  2368     0211                     	;# 
  2369     0211                     	;# 
  2370     0212                     	;# 
  2371     0213                     	;# 
  2372     0214                     	;# 
  2373     0214                     	;# 
  2374     0215                     	;# 
  2375     0215                     	;# 
  2376     0216                     	;# 
  2377     0216                     	;# 
  2378     0217                     	;# 
  2379     0217                     	;# 
  2380     0218                     	;# 
  2381     0219                     	;# 
  2382     021A                     	;# 
  2383     021A                     	;# 
  2384     021B                     	;# 
  2385     021B                     	;# 
  2386     021C                     	;# 
  2387     021C                     	;# 
  2388     021D                     	;# 
  2389     021D                     	;# 
  2390     021E                     	;# 
  2391     021F                     	;# 
  2392     028C                     	;# 
  2393     028C                     	;# 
  2394     028D                     	;# 
  2395     028D                     	;# 
  2396     028E                     	;# 
  2397     028F                     	;# 
  2398     0290                     	;# 
  2399     0291                     	;# 
  2400     0292                     	;# 
  2401     0292                     	;# 
  2402     0293                     	;# 
  2403     0293                     	;# 
  2404     0294                     	;# 
  2405     0295                     	;# 
  2406     0296                     	;# 
  2407     0297                     	;# 
  2408     0298                     	;# 
  2409     0298                     	;# 
  2410     0299                     	;# 
  2411     0299                     	;# 
  2412     029A                     	;# 
  2413     029B                     	;# 
  2414     029C                     	;# 
  2415     029D                     	;# 
  2416     029F                     	;# 
  2417     030C                     	;# 
  2418     030C                     	;# 
  2419     030D                     	;# 
  2420     030E                     	;# 
  2421     030F                     	;# 
  2422     0310                     	;# 
  2423     0310                     	;# 
  2424     0311                     	;# 
  2425     0312                     	;# 
  2426     0313                     	;# 
  2427     0314                     	;# 
  2428     0314                     	;# 
  2429     0315                     	;# 
  2430     0316                     	;# 
  2431     0317                     	;# 
  2432     0318                     	;# 
  2433     0318                     	;# 
  2434     0319                     	;# 
  2435     031A                     	;# 
  2436     031B                     	;# 
  2437     038C                     	;# 
  2438     038C                     	;# 
  2439     038D                     	;# 
  2440     038E                     	;# 
  2441     0390                     	;# 
  2442     0390                     	;# 
  2443     0391                     	;# 
  2444     0392                     	;# 
  2445     048C                     	;# 
  2446     048C                     	;# 
  2447     048D                     	;# 
  2448     048E                     	;# 
  2449     048F                     	;# 
  2450     048F                     	;# 
  2451     0490                     	;# 
  2452     0491                     	;# 
  2453     0492                     	;# 
  2454     0492                     	;# 
  2455     0493                     	;# 
  2456     0494                     	;# 
  2457     0495                     	;# 
  2458     0495                     	;# 
  2459     0496                     	;# 
  2460     0497                     	;# 
  2461     0498                     	;# 
  2462     0499                     	;# 
  2463     049A                     	;# 
  2464     049B                     	;# 
  2465     049C                     	;# 
  2466     049D                     	;# 
  2467     058C                     	;# 
  2468     058C                     	;# 
  2469     058D                     	;# 
  2470     058E                     	;# 
  2471     058F                     	;# 
  2472     058F                     	;# 
  2473     0590                     	;# 
  2474     0591                     	;# 
  2475     0592                     	;# 
  2476     0593                     	;# 
  2477     059C                     	;# 
  2478     059C                     	;# 
  2479     059D                     	;# 
  2480     059D                     	;# 
  2481     059E                     	;# 
  2482     059F                     	;# 
  2483     060C                     	;# 
  2484     060C                     	;# 
  2485     060D                     	;# 
  2486     060D                     	;# 
  2487     060E                     	;# 
  2488     060F                     	;# 
  2489     0610                     	;# 
  2490     0611                     	;# 
  2491     0612                     	;# 
  2492     0613                     	;# 
  2493     0614                     	;# 
  2494     0616                     	;# 
  2495     0616                     	;# 
  2496     0617                     	;# 
  2497     0617                     	;# 
  2498     0618                     	;# 
  2499     0619                     	;# 
  2500     061A                     	;# 
  2501     061B                     	;# 
  2502     061C                     	;# 
  2503     061D                     	;# 
  2504     061E                     	;# 
  2505     070C                     	;# 
  2506     070D                     	;# 
  2507     070E                     	;# 
  2508     070F                     	;# 
  2509     0710                     	;# 
  2510     0711                     	;# 
  2511     0712                     	;# 
  2512     0713                     	;# 
  2513     0714                     	;# 
  2514     0716                     	;# 
  2515     0717                     	;# 
  2516     0718                     	;# 
  2517     0719                     	;# 
  2518     071A                     	;# 
  2519     071B                     	;# 
  2520     071C                     	;# 
  2521     071D                     	;# 
  2522     071E                     	;# 
  2523     0796                     	;# 
  2524     0797                     	;# 
  2525     0798                     	;# 
  2526     0799                     	;# 
  2527     079A                     	;# 
  2528     079B                     	;# 
  2529     079C                     	;# 
  2530     079D                     	;# 
  2531     080C                     	;# 
  2532     080D                     	;# 
  2533     080E                     	;# 
  2534     080F                     	;# 
  2535     0810                     	;# 
  2536     0811                     	;# 
  2537     0812                     	;# 
  2538     0813                     	;# 
  2539     0814                     	;# 
  2540     081A                     	;# 
  2541     081A                     	;# 
  2542     081B                     	;# 
  2543     081C                     	;# 
  2544     081C                     	;# 
  2545     081D                     	;# 
  2546     081E                     	;# 
  2547     081F                     	;# 
  2548     088C                     	;# 
  2549     088D                     	;# 
  2550     088E                     	;# 
  2551     088F                     	;# 
  2552     0890                     	;# 
  2553     0891                     	;# 
  2554     0892                     	;# 
  2555     0893                     	;# 
  2556     0895                     	;# 
  2557     0896                     	;# 
  2558     0897                     	;# 
  2559     0898                     	;# 
  2560     0899                     	;# 
  2561     089A                     	;# 
  2562     089B                     	;# 
  2563     090C                     	;# 
  2564     090E                     	;# 
  2565     090F                     	;# 
  2566     091F                     	;# 
  2567     098F                     	;# 
  2568     098F                     	;# 
  2569     0990                     	;# 
  2570     0991                     	;# 
  2571     0992                     	;# 
  2572     0993                     	;# 
  2573     0994                     	;# 
  2574     0995                     	;# 
  2575     0996                     	;# 
  2576     0997                     	;# 
  2577     1E0F                     	;# 
  2578     1E10                     	;# 
  2579     1E11                     	;# 
  2580     1E12                     	;# 
  2581     1E13                     	;# 
  2582     1E14                     	;# 
  2583     1E15                     	;# 
  2584     1E16                     	;# 
  2585     1E17                     	;# 
  2586     1E18                     	;# 
  2587     1E19                     	;# 
  2588     1E1A                     	;# 
  2589     1E1B                     	;# 
  2590     1E1C                     	;# 
  2591     1E1D                     	;# 
  2592     1E1E                     	;# 
  2593     1E1F                     	;# 
  2594     1E20                     	;# 
  2595     1E21                     	;# 
  2596     1E22                     	;# 
  2597     1E23                     	;# 
  2598     1E24                     	;# 
  2599     1E25                     	;# 
  2600     1E26                     	;# 
  2601     1E27                     	;# 
  2602     1E28                     	;# 
  2603     1E29                     	;# 
  2604     1E2A                     	;# 
  2605     1E2B                     	;# 
  2606     1E2C                     	;# 
  2607     1E2D                     	;# 
  2608     1E2E                     	;# 
  2609     1E2F                     	;# 
  2610     1E30                     	;# 
  2611     1E31                     	;# 
  2612     1E32                     	;# 
  2613     1E33                     	;# 
  2614     1E34                     	;# 
  2615     1E35                     	;# 
  2616     1E36                     	;# 
  2617     1E37                     	;# 
  2618     1E8F                     	;# 
  2619     1E90                     	;# 
  2620     1E91                     	;# 
  2621     1E92                     	;# 
  2622     1E93                     	;# 
  2623     1E94                     	;# 
  2624     1E95                     	;# 
  2625     1E96                     	;# 
  2626     1E97                     	;# 
  2627     1E9C                     	;# 
  2628     1E9D                     	;# 
  2629     1E9E                     	;# 
  2630     1EA1                     	;# 
  2631     1EA2                     	;# 
  2632     1EA3                     	;# 
  2633     1EA4                     	;# 
  2634     1EA9                     	;# 
  2635     1EAA                     	;# 
  2636     1EB1                     	;# 
  2637     1EB2                     	;# 
  2638     1EB8                     	;# 
  2639     1EB9                     	;# 
  2640     1EBA                     	;# 
  2641     1EBB                     	;# 
  2642     1EBC                     	;# 
  2643     1EBD                     	;# 
  2644     1EBE                     	;# 
  2645     1EC3                     	;# 
  2646     1EC5                     	;# 
  2647     1EC6                     	;# 
  2648     1EC7                     	;# 
  2649     1ECB                     	;# 
  2650     1ECC                     	;# 
  2651     1F10                     	;# 
  2652     1F11                     	;# 
  2653     1F12                     	;# 
  2654     1F14                     	;# 
  2655     1F15                     	;# 
  2656     1F20                     	;# 
  2657     1F21                     	;# 
  2658     1F22                     	;# 
  2659     1F23                     	;# 
  2660     1F24                     	;# 
  2661     1F25                     	;# 
  2662     1F38                     	;# 
  2663     1F39                     	;# 
  2664     1F3A                     	;# 
  2665     1F3B                     	;# 
  2666     1F3C                     	;# 
  2667     1F3D                     	;# 
  2668     1F3E                     	;# 
  2669     1F3F                     	;# 
  2670     1F4E                     	;# 
  2671     1F4F                     	;# 
  2672     1F50                     	;# 
  2673     1F51                     	;# 
  2674     1F52                     	;# 
  2675     1F53                     	;# 
  2676     1F54                     	;# 
  2677     1F55                     	;# 
  2678     1FE4                     	;# 
  2679     1FE5                     	;# 
  2680     1FE6                     	;# 
  2681     1FE7                     	;# 
  2682     1FE8                     	;# 
  2683     1FE8                     	;# 
  2684     1FE9                     	;# 
  2685     1FEA                     	;# 
  2686     1FEB                     	;# 
  2687     1FED                     	;# 
  2688     1FEE                     	;# 
  2689     1FEF                     	;# 
  2690     0000                     	;# 
  2691     0001                     	;# 
  2692     0002                     	;# 
  2693     0003                     	;# 
  2694     0004                     	;# 
  2695     0005                     	;# 
  2696     0006                     	;# 
  2697     0007                     	;# 
  2698     0008                     	;# 
  2699     0009                     	;# 
  2700     000A                     	;# 
  2701     000B                     	;# 
  2702     000C                     	;# 
  2703     000E                     	;# 
  2704     0012                     	;# 
  2705     0014                     	;# 
  2706     0018                     	;# 
  2707     001A                     	;# 
  2708     008C                     	;# 
  2709     008C                     	;# 
  2710     008D                     	;# 
  2711     008E                     	;# 
  2712     008E                     	;# 
  2713     008F                     	;# 
  2714     0090                     	;# 
  2715     0090                     	;# 
  2716     0091                     	;# 
  2717     0092                     	;# 
  2718     0092                     	;# 
  2719     0093                     	;# 
  2720     0094                     	;# 
  2721     0094                     	;# 
  2722     0095                     	;# 
  2723     0096                     	;# 
  2724     0096                     	;# 
  2725     0097                     	;# 
  2726     0098                     	;# 
  2727     0099                     	;# 
  2728     009A                     	;# 
  2729     009B                     	;# 
  2730     009B                     	;# 
  2731     009C                     	;# 
  2732     009D                     	;# 
  2733     009D                     	;# 
  2734     009E                     	;# 
  2735     009F                     	;# 
  2736     010C                     	;# 
  2737     010C                     	;# 
  2738     010D                     	;# 
  2739     010E                     	;# 
  2740     010F                     	;# 
  2741     010F                     	;# 
  2742     0110                     	;# 
  2743     0111                     	;# 
  2744     0112                     	;# 
  2745     0113                     	;# 
  2746     0114                     	;# 
  2747     0115                     	;# 
  2748     0116                     	;# 
  2749     0117                     	;# 
  2750     0118                     	;# 
  2751     0119                     	;# 
  2752     0119                     	;# 
  2753     0119                     	;# 
  2754     011A                     	;# 
  2755     011A                     	;# 
  2756     011A                     	;# 
  2757     011B                     	;# 
  2758     011B                     	;# 
  2759     011B                     	;# 
  2760     011B                     	;# 
  2761     011B                     	;# 
  2762     011C                     	;# 
  2763     011C                     	;# 
  2764     011C                     	;# 
  2765     011D                     	;# 
  2766     011D                     	;# 
  2767     011D                     	;# 
  2768     011E                     	;# 
  2769     011E                     	;# 
  2770     011E                     	;# 
  2771     011F                     	;# 
  2772     011F                     	;# 
  2773     011F                     	;# 
  2774     011F                     	;# 
  2775     011F                     	;# 
  2776     018C                     	;# 
  2777     018D                     	;# 
  2778     018E                     	;# 
  2779     018F                     	;# 
  2780     0190                     	;# 
  2781     0191                     	;# 
  2782     0192                     	;# 
  2783     020C                     	;# 
  2784     020D                     	;# 
  2785     020E                     	;# 
  2786     020E                     	;# 
  2787     020F                     	;# 
  2788     020F                     	;# 
  2789     0210                     	;# 
  2790     0210                     	;# 
  2791     0211                     	;# 
  2792     0211                     	;# 
  2793     0212                     	;# 
  2794     0213                     	;# 
  2795     0214                     	;# 
  2796     0214                     	;# 
  2797     0215                     	;# 
  2798     0215                     	;# 
  2799     0216                     	;# 
  2800     0216                     	;# 
  2801     0217                     	;# 
  2802     0217                     	;# 
  2803     0218                     	;# 
  2804     0219                     	;# 
  2805     021A                     	;# 
  2806     021A                     	;# 
  2807     021B                     	;# 
  2808     021B                     	;# 
  2809     021C                     	;# 
  2810     021C                     	;# 
  2811     021D                     	;# 
  2812     021D                     	;# 
  2813     021E                     	;# 
  2814     021F                     	;# 
  2815     028C                     	;# 
  2816     028C                     	;# 
  2817     028D                     	;# 
  2818     028D                     	;# 
  2819     028E                     	;# 
  2820     028F                     	;# 
  2821     0290                     	;# 
  2822     0291                     	;# 
  2823     0292                     	;# 
  2824     0292                     	;# 
  2825     0293                     	;# 
  2826     0293                     	;# 
  2827     0294                     	;# 
  2828     0295                     	;# 
  2829     0296                     	;# 
  2830     0297                     	;# 
  2831     0298                     	;# 
  2832     0298                     	;# 
  2833     0299                     	;# 
  2834     0299                     	;# 
  2835     029A                     	;# 
  2836     029B                     	;# 
  2837     029C                     	;# 
  2838     029D                     	;# 
  2839     029F                     	;# 
  2840     030C                     	;# 
  2841     030C                     	;# 
  2842     030D                     	;# 
  2843     030E                     	;# 
  2844     030F                     	;# 
  2845     0310                     	;# 
  2846     0310                     	;# 
  2847     0311                     	;# 
  2848     0312                     	;# 
  2849     0313                     	;# 
  2850     0314                     	;# 
  2851     0314                     	;# 
  2852     0315                     	;# 
  2853     0316                     	;# 
  2854     0317                     	;# 
  2855     0318                     	;# 
  2856     0318                     	;# 
  2857     0319                     	;# 
  2858     031A                     	;# 
  2859     031B                     	;# 
  2860     038C                     	;# 
  2861     038C                     	;# 
  2862     038D                     	;# 
  2863     038E                     	;# 
  2864     0390                     	;# 
  2865     0390                     	;# 
  2866     0391                     	;# 
  2867     0392                     	;# 
  2868     048C                     	;# 
  2869     048C                     	;# 
  2870     048D                     	;# 
  2871     048E                     	;# 
  2872     048F                     	;# 
  2873     048F                     	;# 
  2874     0490                     	;# 
  2875     0491                     	;# 
  2876     0492                     	;# 
  2877     0492                     	;# 
  2878     0493                     	;# 
  2879     0494                     	;# 
  2880     0495                     	;# 
  2881     0495                     	;# 
  2882     0496                     	;# 
  2883     0497                     	;# 
  2884     0498                     	;# 
  2885     0499                     	;# 
  2886     049A                     	;# 
  2887     049B                     	;# 
  2888     049C                     	;# 
  2889     049D                     	;# 
  2890     058C                     	;# 
  2891     058C                     	;# 
  2892     058D                     	;# 
  2893     058E                     	;# 
  2894     058F                     	;# 
  2895     058F                     	;# 
  2896     0590                     	;# 
  2897     0591                     	;# 
  2898     0592                     	;# 
  2899     0593                     	;# 
  2900     059C                     	;# 
  2901     059C                     	;# 
  2902     059D                     	;# 
  2903     059D                     	;# 
  2904     059E                     	;# 
  2905     059F                     	;# 
  2906     060C                     	;# 
  2907     060C                     	;# 
  2908     060D                     	;# 
  2909     060D                     	;# 
  2910     060E                     	;# 
  2911     060F                     	;# 
  2912     0610                     	;# 
  2913     0611                     	;# 
  2914     0612                     	;# 
  2915     0613                     	;# 
  2916     0614                     	;# 
  2917     0616                     	;# 
  2918     0616                     	;# 
  2919     0617                     	;# 
  2920     0617                     	;# 
  2921     0618                     	;# 
  2922     0619                     	;# 
  2923     061A                     	;# 
  2924     061B                     	;# 
  2925     061C                     	;# 
  2926     061D                     	;# 
  2927     061E                     	;# 
  2928     070C                     	;# 
  2929     070D                     	;# 
  2930     070E                     	;# 
  2931     070F                     	;# 
  2932     0710                     	;# 
  2933     0711                     	;# 
  2934     0712                     	;# 
  2935     0713                     	;# 
  2936     0714                     	;# 
  2937     0716                     	;# 
  2938     0717                     	;# 
  2939     0718                     	;# 
  2940     0719                     	;# 
  2941     071A                     	;# 
  2942     071B                     	;# 
  2943     071C                     	;# 
  2944     071D                     	;# 
  2945     071E                     	;# 
  2946     0796                     	;# 
  2947     0797                     	;# 
  2948     0798                     	;# 
  2949     0799                     	;# 
  2950     079A                     	;# 
  2951     079B                     	;# 
  2952     079C                     	;# 
  2953     079D                     	;# 
  2954     080C                     	;# 
  2955     080D                     	;# 
  2956     080E                     	;# 
  2957     080F                     	;# 
  2958     0810                     	;# 
  2959     0811                     	;# 
  2960     0812                     	;# 
  2961     0813                     	;# 
  2962     0814                     	;# 
  2963     081A                     	;# 
  2964     081A                     	;# 
  2965     081B                     	;# 
  2966     081C                     	;# 
  2967     081C                     	;# 
  2968     081D                     	;# 
  2969     081E                     	;# 
  2970     081F                     	;# 
  2971     088C                     	;# 
  2972     088D                     	;# 
  2973     088E                     	;# 
  2974     088F                     	;# 
  2975     0890                     	;# 
  2976     0891                     	;# 
  2977     0892                     	;# 
  2978     0893                     	;# 
  2979     0895                     	;# 
  2980     0896                     	;# 
  2981     0897                     	;# 
  2982     0898                     	;# 
  2983     0899                     	;# 
  2984     089A                     	;# 
  2985     089B                     	;# 
  2986     090C                     	;# 
  2987     090E                     	;# 
  2988     090F                     	;# 
  2989     091F                     	;# 
  2990     098F                     	;# 
  2991     098F                     	;# 
  2992     0990                     	;# 
  2993     0991                     	;# 
  2994     0992                     	;# 
  2995     0993                     	;# 
  2996     0994                     	;# 
  2997     0995                     	;# 
  2998     0996                     	;# 
  2999     0997                     	;# 
  3000     1E0F                     	;# 
  3001     1E10                     	;# 
  3002     1E11                     	;# 
  3003     1E12                     	;# 
  3004     1E13                     	;# 
  3005     1E14                     	;# 
  3006     1E15                     	;# 
  3007     1E16                     	;# 
  3008     1E17                     	;# 
  3009     1E18                     	;# 
  3010     1E19                     	;# 
  3011     1E1A                     	;# 
  3012     1E1B                     	;# 
  3013     1E1C                     	;# 
  3014     1E1D                     	;# 
  3015     1E1E                     	;# 
  3016     1E1F                     	;# 
  3017     1E20                     	;# 
  3018     1E21                     	;# 
  3019     1E22                     	;# 
  3020     1E23                     	;# 
  3021     1E24                     	;# 
  3022     1E25                     	;# 
  3023     1E26                     	;# 
  3024     1E27                     	;# 
  3025     1E28                     	;# 
  3026     1E29                     	;# 
  3027     1E2A                     	;# 
  3028     1E2B                     	;# 
  3029     1E2C                     	;# 
  3030     1E2D                     	;# 
  3031     1E2E                     	;# 
  3032     1E2F                     	;# 
  3033     1E30                     	;# 
  3034     1E31                     	;# 
  3035     1E32                     	;# 
  3036     1E33                     	;# 
  3037     1E34                     	;# 
  3038     1E35                     	;# 
  3039     1E36                     	;# 
  3040     1E37                     	;# 
  3041     1E8F                     	;# 
  3042     1E90                     	;# 
  3043     1E91                     	;# 
  3044     1E92                     	;# 
  3045     1E93                     	;# 
  3046     1E94                     	;# 
  3047     1E95                     	;# 
  3048     1E96                     	;# 
  3049     1E97                     	;# 
  3050     1E9C                     	;# 
  3051     1E9D                     	;# 
  3052     1E9E                     	;# 
  3053     1EA1                     	;# 
  3054     1EA2                     	;# 
  3055     1EA3                     	;# 
  3056     1EA4                     	;# 
  3057     1EA9                     	;# 
  3058     1EAA                     	;# 
  3059     1EB1                     	;# 
  3060     1EB2                     	;# 
  3061     1EB8                     	;# 
  3062     1EB9                     	;# 
  3063     1EBA                     	;# 
  3064     1EBB                     	;# 
  3065     1EBC                     	;# 
  3066     1EBD                     	;# 
  3067     1EBE                     	;# 
  3068     1EC3                     	;# 
  3069     1EC5                     	;# 
  3070     1EC6                     	;# 
  3071     1EC7                     	;# 
  3072     1ECB                     	;# 
  3073     1ECC                     	;# 
  3074     1F10                     	;# 
  3075     1F11                     	;# 
  3076     1F12                     	;# 
  3077     1F14                     	;# 
  3078     1F15                     	;# 
  3079     1F20                     	;# 
  3080     1F21                     	;# 
  3081     1F22                     	;# 
  3082     1F23                     	;# 
  3083     1F24                     	;# 
  3084     1F25                     	;# 
  3085     1F38                     	;# 
  3086     1F39                     	;# 
  3087     1F3A                     	;# 
  3088     1F3B                     	;# 
  3089     1F3C                     	;# 
  3090     1F3D                     	;# 
  3091     1F3E                     	;# 
  3092     1F3F                     	;# 
  3093     1F4E                     	;# 
  3094     1F4F                     	;# 
  3095     1F50                     	;# 
  3096     1F51                     	;# 
  3097     1F52                     	;# 
  3098     1F53                     	;# 
  3099     1F54                     	;# 
  3100     1F55                     	;# 
  3101     1FE4                     	;# 
  3102     1FE5                     	;# 
  3103     1FE6                     	;# 
  3104     1FE7                     	;# 
  3105     1FE8                     	;# 
  3106     1FE8                     	;# 
  3107     1FE9                     	;# 
  3108     1FEA                     	;# 
  3109     1FEB                     	;# 
  3110     1FED                     	;# 
  3111     1FEE                     	;# 
  3112     1FEF                     	;# 
  3113     0000                     	;# 
  3114     0001                     	;# 
  3115     0002                     	;# 
  3116     0003                     	;# 
  3117     0004                     	;# 
  3118     0005                     	;# 
  3119     0006                     	;# 
  3120     0007                     	;# 
  3121     0008                     	;# 
  3122     0009                     	;# 
  3123     000A                     	;# 
  3124     000B                     	;# 
  3125     000C                     	;# 
  3126     000E                     	;# 
  3127     0012                     	;# 
  3128     0014                     	;# 
  3129     0018                     	;# 
  3130     001A                     	;# 
  3131     008C                     	;# 
  3132     008C                     	;# 
  3133     008D                     	;# 
  3134     008E                     	;# 
  3135     008E                     	;# 
  3136     008F                     	;# 
  3137     0090                     	;# 
  3138     0090                     	;# 
  3139     0091                     	;# 
  3140     0092                     	;# 
  3141     0092                     	;# 
  3142     0093                     	;# 
  3143     0094                     	;# 
  3144     0094                     	;# 
  3145     0095                     	;# 
  3146     0096                     	;# 
  3147     0096                     	;# 
  3148     0097                     	;# 
  3149     0098                     	;# 
  3150     0099                     	;# 
  3151     009A                     	;# 
  3152     009B                     	;# 
  3153     009B                     	;# 
  3154     009C                     	;# 
  3155     009D                     	;# 
  3156     009D                     	;# 
  3157     009E                     	;# 
  3158     009F                     	;# 
  3159     010C                     	;# 
  3160     010C                     	;# 
  3161     010D                     	;# 
  3162     010E                     	;# 
  3163     010F                     	;# 
  3164     010F                     	;# 
  3165     0110                     	;# 
  3166     0111                     	;# 
  3167     0112                     	;# 
  3168     0113                     	;# 
  3169     0114                     	;# 
  3170     0115                     	;# 
  3171     0116                     	;# 
  3172     0117                     	;# 
  3173     0118                     	;# 
  3174     0119                     	;# 
  3175     0119                     	;# 
  3176     0119                     	;# 
  3177     011A                     	;# 
  3178     011A                     	;# 
  3179     011A                     	;# 
  3180     011B                     	;# 
  3181     011B                     	;# 
  3182     011B                     	;# 
  3183     011B                     	;# 
  3184     011B                     	;# 
  3185     011C                     	;# 
  3186     011C                     	;# 
  3187     011C                     	;# 
  3188     011D                     	;# 
  3189     011D                     	;# 
  3190     011D                     	;# 
  3191     011E                     	;# 
  3192     011E                     	;# 
  3193     011E                     	;# 
  3194     011F                     	;# 
  3195     011F                     	;# 
  3196     011F                     	;# 
  3197     011F                     	;# 
  3198     011F                     	;# 
  3199     018C                     	;# 
  3200     018D                     	;# 
  3201     018E                     	;# 
  3202     018F                     	;# 
  3203     0190                     	;# 
  3204     0191                     	;# 
  3205     0192                     	;# 
  3206     020C                     	;# 
  3207     020D                     	;# 
  3208     020E                     	;# 
  3209     020E                     	;# 
  3210     020F                     	;# 
  3211     020F                     	;# 
  3212     0210                     	;# 
  3213     0210                     	;# 
  3214     0211                     	;# 
  3215     0211                     	;# 
  3216     0212                     	;# 
  3217     0213                     	;# 
  3218     0214                     	;# 
  3219     0214                     	;# 
  3220     0215                     	;# 
  3221     0215                     	;# 
  3222     0216                     	;# 
  3223     0216                     	;# 
  3224     0217                     	;# 
  3225     0217                     	;# 
  3226     0218                     	;# 
  3227     0219                     	;# 
  3228     021A                     	;# 
  3229     021A                     	;# 
  3230     021B                     	;# 
  3231     021B                     	;# 
  3232     021C                     	;# 
  3233     021C                     	;# 
  3234     021D                     	;# 
  3235     021D                     	;# 
  3236     021E                     	;# 
  3237     021F                     	;# 
  3238     028C                     	;# 
  3239     028C                     	;# 
  3240     028D                     	;# 
  3241     028D                     	;# 
  3242     028E                     	;# 
  3243     028F                     	;# 
  3244     0290                     	;# 
  3245     0291                     	;# 
  3246     0292                     	;# 
  3247     0292                     	;# 
  3248     0293                     	;# 
  3249     0293                     	;# 
  3250     0294                     	;# 
  3251     0295                     	;# 
  3252     0296                     	;# 
  3253     0297                     	;# 
  3254     0298                     	;# 
  3255     0298                     	;# 
  3256     0299                     	;# 
  3257     0299                     	;# 
  3258     029A                     	;# 
  3259     029B                     	;# 
  3260     029C                     	;# 
  3261     029D                     	;# 
  3262     029F                     	;# 
  3263     030C                     	;# 
  3264     030C                     	;# 
  3265     030D                     	;# 
  3266     030E                     	;# 
  3267     030F                     	;# 
  3268     0310                     	;# 
  3269     0310                     	;# 
  3270     0311                     	;# 
  3271     0312                     	;# 
  3272     0313                     	;# 
  3273     0314                     	;# 
  3274     0314                     	;# 
  3275     0315                     	;# 
  3276     0316                     	;# 
  3277     0317                     	;# 
  3278     0318                     	;# 
  3279     0318                     	;# 
  3280     0319                     	;# 
  3281     031A                     	;# 
  3282     031B                     	;# 
  3283     038C                     	;# 
  3284     038C                     	;# 
  3285     038D                     	;# 
  3286     038E                     	;# 
  3287     0390                     	;# 
  3288     0390                     	;# 
  3289     0391                     	;# 
  3290     0392                     	;# 
  3291     048C                     	;# 
  3292     048C                     	;# 
  3293     048D                     	;# 
  3294     048E                     	;# 
  3295     048F                     	;# 
  3296     048F                     	;# 
  3297     0490                     	;# 
  3298     0491                     	;# 
  3299     0492                     	;# 
  3300     0492                     	;# 
  3301     0493                     	;# 
  3302     0494                     	;# 
  3303     0495                     	;# 
  3304     0495                     	;# 
  3305     0496                     	;# 
  3306     0497                     	;# 
  3307     0498                     	;# 
  3308     0499                     	;# 
  3309     049A                     	;# 
  3310     049B                     	;# 
  3311     049C                     	;# 
  3312     049D                     	;# 
  3313     058C                     	;# 
  3314     058C                     	;# 
  3315     058D                     	;# 
  3316     058E                     	;# 
  3317     058F                     	;# 
  3318     058F                     	;# 
  3319     0590                     	;# 
  3320     0591                     	;# 
  3321     0592                     	;# 
  3322     0593                     	;# 
  3323     059C                     	;# 
  3324     059C                     	;# 
  3325     059D                     	;# 
  3326     059D                     	;# 
  3327     059E                     	;# 
  3328     059F                     	;# 
  3329     060C                     	;# 
  3330     060C                     	;# 
  3331     060D                     	;# 
  3332     060D                     	;# 
  3333     060E                     	;# 
  3334     060F                     	;# 
  3335     0610                     	;# 
  3336     0611                     	;# 
  3337     0612                     	;# 
  3338     0613                     	;# 
  3339     0614                     	;# 
  3340     0616                     	;# 
  3341     0616                     	;# 
  3342     0617                     	;# 
  3343     0617                     	;# 
  3344     0618                     	;# 
  3345     0619                     	;# 
  3346     061A                     	;# 
  3347     061B                     	;# 
  3348     061C                     	;# 
  3349     061D                     	;# 
  3350     061E                     	;# 
  3351     070C                     	;# 
  3352     070D                     	;# 
  3353     070E                     	;# 
  3354     070F                     	;# 
  3355     0710                     	;# 
  3356     0711                     	;# 
  3357     0712                     	;# 
  3358     0713                     	;# 
  3359     0714                     	;# 
  3360     0716                     	;# 
  3361     0717                     	;# 
  3362     0718                     	;# 
  3363     0719                     	;# 
  3364     071A                     	;# 
  3365     071B                     	;# 
  3366     071C                     	;# 
  3367     071D                     	;# 
  3368     071E                     	;# 
  3369     0796                     	;# 
  3370     0797                     	;# 
  3371     0798                     	;# 
  3372     0799                     	;# 
  3373     079A                     	;# 
  3374     079B                     	;# 
  3375     079C                     	;# 
  3376     079D                     	;# 
  3377     080C                     	;# 
  3378     080D                     	;# 
  3379     080E                     	;# 
  3380     080F                     	;# 
  3381     0810                     	;# 
  3382     0811                     	;# 
  3383     0812                     	;# 
  3384     0813                     	;# 
  3385     0814                     	;# 
  3386     081A                     	;# 
  3387     081A                     	;# 
  3388     081B                     	;# 
  3389     081C                     	;# 
  3390     081C                     	;# 
  3391     081D                     	;# 
  3392     081E                     	;# 
  3393     081F                     	;# 
  3394     088C                     	;# 
  3395     088D                     	;# 
  3396     088E                     	;# 
  3397     088F                     	;# 
  3398     0890                     	;# 
  3399     0891                     	;# 
  3400     0892                     	;# 
  3401     0893                     	;# 
  3402     0895                     	;# 
  3403     0896                     	;# 
  3404     0897                     	;# 
  3405     0898                     	;# 
  3406     0899                     	;# 
  3407     089A                     	;# 
  3408     089B                     	;# 
  3409     090C                     	;# 
  3410     090E                     	;# 
  3411     090F                     	;# 
  3412     091F                     	;# 
  3413     098F                     	;# 
  3414     098F                     	;# 
  3415     0990                     	;# 
  3416     0991                     	;# 
  3417     0992                     	;# 
  3418     0993                     	;# 
  3419     0994                     	;# 
  3420     0995                     	;# 
  3421     0996                     	;# 
  3422     0997                     	;# 
  3423     1E0F                     	;# 
  3424     1E10                     	;# 
  3425     1E11                     	;# 
  3426     1E12                     	;# 
  3427     1E13                     	;# 
  3428     1E14                     	;# 
  3429     1E15                     	;# 
  3430     1E16                     	;# 
  3431     1E17                     	;# 
  3432     1E18                     	;# 
  3433     1E19                     	;# 
  3434     1E1A                     	;# 
  3435     1E1B                     	;# 
  3436     1E1C                     	;# 
  3437     1E1D                     	;# 
  3438     1E1E                     	;# 
  3439     1E1F                     	;# 
  3440     1E20                     	;# 
  3441     1E21                     	;# 
  3442     1E22                     	;# 
  3443     1E23                     	;# 
  3444     1E24                     	;# 
  3445     1E25                     	;# 
  3446     1E26                     	;# 
  3447     1E27                     	;# 
  3448     1E28                     	;# 
  3449     1E29                     	;# 
  3450     1E2A                     	;# 
  3451     1E2B                     	;# 
  3452     1E2C                     	;# 
  3453     1E2D                     	;# 
  3454     1E2E                     	;# 
  3455     1E2F                     	;# 
  3456     1E30                     	;# 
  3457     1E31                     	;# 
  3458     1E32                     	;# 
  3459     1E33                     	;# 
  3460     1E34                     	;# 
  3461     1E35                     	;# 
  3462     1E36                     	;# 
  3463     1E37                     	;# 
  3464     1E8F                     	;# 
  3465     1E90                     	;# 
  3466     1E91                     	;# 
  3467     1E92                     	;# 
  3468     1E93                     	;# 
  3469     1E94                     	;# 
  3470     1E95                     	;# 
  3471     1E96                     	;# 
  3472     1E97                     	;# 
  3473     1E9C                     	;# 
  3474     1E9D                     	;# 
  3475     1E9E                     	;# 
  3476     1EA1                     	;# 
  3477     1EA2                     	;# 
  3478     1EA3                     	;# 
  3479     1EA4                     	;# 
  3480     1EA9                     	;# 
  3481     1EAA                     	;# 
  3482     1EB1                     	;# 
  3483     1EB2                     	;# 
  3484     1EB8                     	;# 
  3485     1EB9                     	;# 
  3486     1EBA                     	;# 
  3487     1EBB                     	;# 
  3488     1EBC                     	;# 
  3489     1EBD                     	;# 
  3490     1EBE                     	;# 
  3491     1EC3                     	;# 
  3492     1EC5                     	;# 
  3493     1EC6                     	;# 
  3494     1EC7                     	;# 
  3495     1ECB                     	;# 
  3496     1ECC                     	;# 
  3497     1F10                     	;# 
  3498     1F11                     	;# 
  3499     1F12                     	;# 
  3500     1F14                     	;# 
  3501     1F15                     	;# 
  3502     1F20                     	;# 
  3503     1F21                     	;# 
  3504     1F22                     	;# 
  3505     1F23                     	;# 
  3506     1F24                     	;# 
  3507     1F25                     	;# 
  3508     1F38                     	;# 
  3509     1F39                     	;# 
  3510     1F3A                     	;# 
  3511     1F3B                     	;# 
  3512     1F3C                     	;# 
  3513     1F3D                     	;# 
  3514     1F3E                     	;# 
  3515     1F3F                     	;# 
  3516     1F4E                     	;# 
  3517     1F4F                     	;# 
  3518     1F50                     	;# 
  3519     1F51                     	;# 
  3520     1F52                     	;# 
  3521     1F53                     	;# 
  3522     1F54                     	;# 
  3523     1F55                     	;# 
  3524     1FE4                     	;# 
  3525     1FE5                     	;# 
  3526     1FE6                     	;# 
  3527     1FE7                     	;# 
  3528     1FE8                     	;# 
  3529     1FE8                     	;# 
  3530     1FE9                     	;# 
  3531     1FEA                     	;# 
  3532     1FEB                     	;# 
  3533     1FED                     	;# 
  3534     1FEE                     	;# 
  3535     1FEF                     	;# 
  3536     0000                     	;# 
  3537     0001                     	;# 
  3538     0002                     	;# 
  3539     0003                     	;# 
  3540     0004                     	;# 
  3541     0005                     	;# 
  3542     0006                     	;# 
  3543     0007                     	;# 
  3544     0008                     	;# 
  3545     0009                     	;# 
  3546     000A                     	;# 
  3547     000B                     	;# 
  3548     000C                     	;# 
  3549     000E                     	;# 
  3550     0012                     	;# 
  3551     0014                     	;# 
  3552     0018                     	;# 
  3553     001A                     	;# 
  3554     008C                     	;# 
  3555     008C                     	;# 
  3556     008D                     	;# 
  3557     008E                     	;# 
  3558     008E                     	;# 
  3559     008F                     	;# 
  3560     0090                     	;# 
  3561     0090                     	;# 
  3562     0091                     	;# 
  3563     0092                     	;# 
  3564     0092                     	;# 
  3565     0093                     	;# 
  3566     0094                     	;# 
  3567     0094                     	;# 
  3568     0095                     	;# 
  3569     0096                     	;# 
  3570     0096                     	;# 
  3571     0097                     	;# 
  3572     0098                     	;# 
  3573     0099                     	;# 
  3574     009A                     	;# 
  3575     009B                     	;# 
  3576     009B                     	;# 
  3577     009C                     	;# 
  3578     009D                     	;# 
  3579     009D                     	;# 
  3580     009E                     	;# 
  3581     009F                     	;# 
  3582     010C                     	;# 
  3583     010C                     	;# 
  3584     010D                     	;# 
  3585     010E                     	;# 
  3586     010F                     	;# 
  3587     010F                     	;# 
  3588     0110                     	;# 
  3589     0111                     	;# 
  3590     0112                     	;# 
  3591     0113                     	;# 
  3592     0114                     	;# 
  3593     0115                     	;# 
  3594     0116                     	;# 
  3595     0117                     	;# 
  3596     0118                     	;# 
  3597     0119                     	;# 
  3598     0119                     	;# 
  3599     0119                     	;# 
  3600     011A                     	;# 
  3601     011A                     	;# 
  3602     011A                     	;# 
  3603     011B                     	;# 
  3604     011B                     	;# 
  3605     011B                     	;# 
  3606     011B                     	;# 
  3607     011B                     	;# 
  3608     011C                     	;# 
  3609     011C                     	;# 
  3610     011C                     	;# 
  3611     011D                     	;# 
  3612     011D                     	;# 
  3613     011D                     	;# 
  3614     011E                     	;# 
  3615     011E                     	;# 
  3616     011E                     	;# 
  3617     011F                     	;# 
  3618     011F                     	;# 
  3619     011F                     	;# 
  3620     011F                     	;# 
  3621     011F                     	;# 
  3622     018C                     	;# 
  3623     018D                     	;# 
  3624     018E                     	;# 
  3625     018F                     	;# 
  3626     0190                     	;# 
  3627     0191                     	;# 
  3628     0192                     	;# 
  3629     020C                     	;# 
  3630     020D                     	;# 
  3631     020E                     	;# 
  3632     020E                     	;# 
  3633     020F                     	;# 
  3634     020F                     	;# 
  3635     0210                     	;# 
  3636     0210                     	;# 
  3637     0211                     	;# 
  3638     0211                     	;# 
  3639     0212                     	;# 
  3640     0213                     	;# 
  3641     0214                     	;# 
  3642     0214                     	;# 
  3643     0215                     	;# 
  3644     0215                     	;# 
  3645     0216                     	;# 
  3646     0216                     	;# 
  3647     0217                     	;# 
  3648     0217                     	;# 
  3649     0218                     	;# 
  3650     0219                     	;# 
  3651     021A                     	;# 
  3652     021A                     	;# 
  3653     021B                     	;# 
  3654     021B                     	;# 
  3655     021C                     	;# 
  3656     021C                     	;# 
  3657     021D                     	;# 
  3658     021D                     	;# 
  3659     021E                     	;# 
  3660     021F                     	;# 
  3661     028C                     	;# 
  3662     028C                     	;# 
  3663     028D                     	;# 
  3664     028D                     	;# 
  3665     028E                     	;# 
  3666     028F                     	;# 
  3667     0290                     	;# 
  3668     0291                     	;# 
  3669     0292                     	;# 
  3670     0292                     	;# 
  3671     0293                     	;# 
  3672     0293                     	;# 
  3673     0294                     	;# 
  3674     0295                     	;# 
  3675     0296                     	;# 
  3676     0297                     	;# 
  3677     0298                     	;# 
  3678     0298                     	;# 
  3679     0299                     	;# 
  3680     0299                     	;# 
  3681     029A                     	;# 
  3682     029B                     	;# 
  3683     029C                     	;# 
  3684     029D                     	;# 
  3685     029F                     	;# 
  3686     030C                     	;# 
  3687     030C                     	;# 
  3688     030D                     	;# 
  3689     030E                     	;# 
  3690     030F                     	;# 
  3691     0310                     	;# 
  3692     0310                     	;# 
  3693     0311                     	;# 
  3694     0312                     	;# 
  3695     0313                     	;# 
  3696     0314                     	;# 
  3697     0314                     	;# 
  3698     0315                     	;# 
  3699     0316                     	;# 
  3700     0317                     	;# 
  3701     0318                     	;# 
  3702     0318                     	;# 
  3703     0319                     	;# 
  3704     031A                     	;# 
  3705     031B                     	;# 
  3706     038C                     	;# 
  3707     038C                     	;# 
  3708     038D                     	;# 
  3709     038E                     	;# 
  3710     0390                     	;# 
  3711     0390                     	;# 
  3712     0391                     	;# 
  3713     0392                     	;# 
  3714     048C                     	;# 
  3715     048C                     	;# 
  3716     048D                     	;# 
  3717     048E                     	;# 
  3718     048F                     	;# 
  3719     048F                     	;# 
  3720     0490                     	;# 
  3721     0491                     	;# 
  3722     0492                     	;# 
  3723     0492                     	;# 
  3724     0493                     	;# 
  3725     0494                     	;# 
  3726     0495                     	;# 
  3727     0495                     	;# 
  3728     0496                     	;# 
  3729     0497                     	;# 
  3730     0498                     	;# 
  3731     0499                     	;# 
  3732     049A                     	;# 
  3733     049B                     	;# 
  3734     049C                     	;# 
  3735     049D                     	;# 
  3736     058C                     	;# 
  3737     058C                     	;# 
  3738     058D                     	;# 
  3739     058E                     	;# 
  3740     058F                     	;# 
  3741     058F                     	;# 
  3742     0590                     	;# 
  3743     0591                     	;# 
  3744     0592                     	;# 
  3745     0593                     	;# 
  3746     059C                     	;# 
  3747     059C                     	;# 
  3748     059D                     	;# 
  3749     059D                     	;# 
  3750     059E                     	;# 
  3751     059F                     	;# 
  3752     060C                     	;# 
  3753     060C                     	;# 
  3754     060D                     	;# 
  3755     060D                     	;# 
  3756     060E                     	;# 
  3757     060F                     	;# 
  3758     0610                     	;# 
  3759     0611                     	;# 
  3760     0612                     	;# 
  3761     0613                     	;# 
  3762     0614                     	;# 
  3763     0616                     	;# 
  3764     0616                     	;# 
  3765     0617                     	;# 
  3766     0617                     	;# 
  3767     0618                     	;# 
  3768     0619                     	;# 
  3769     061A                     	;# 
  3770     061B                     	;# 
  3771     061C                     	;# 
  3772     061D                     	;# 
  3773     061E                     	;# 
  3774     070C                     	;# 
  3775     070D                     	;# 
  3776     070E                     	;# 
  3777     070F                     	;# 
  3778     0710                     	;# 
  3779     0711                     	;# 
  3780     0712                     	;# 
  3781     0713                     	;# 
  3782     0714                     	;# 
  3783     0716                     	;# 
  3784     0717                     	;# 
  3785     0718                     	;# 
  3786     0719                     	;# 
  3787     071A                     	;# 
  3788     071B                     	;# 
  3789     071C                     	;# 
  3790     071D                     	;# 
  3791     071E                     	;# 
  3792     0796                     	;# 
  3793     0797                     	;# 
  3794     0798                     	;# 
  3795     0799                     	;# 
  3796     079A                     	;# 
  3797     079B                     	;# 
  3798     079C                     	;# 
  3799     079D                     	;# 
  3800     080C                     	;# 
  3801     080D                     	;# 
  3802     080E                     	;# 
  3803     080F                     	;# 
  3804     0810                     	;# 
  3805     0811                     	;# 
  3806     0812                     	;# 
  3807     0813                     	;# 
  3808     0814                     	;# 
  3809     081A                     	;# 
  3810     081A                     	;# 
  3811     081B                     	;# 
  3812     081C                     	;# 
  3813     081C                     	;# 
  3814     081D                     	;# 
  3815     081E                     	;# 
  3816     081F                     	;# 
  3817     088C                     	;# 
  3818     088D                     	;# 
  3819     088E                     	;# 
  3820     088F                     	;# 
  3821     0890                     	;# 
  3822     0891                     	;# 
  3823     0892                     	;# 
  3824     0893                     	;# 
  3825     0895                     	;# 
  3826     0896                     	;# 
  3827     0897                     	;# 
  3828     0898                     	;# 
  3829     0899                     	;# 
  3830     089A                     	;# 
  3831     089B                     	;# 
  3832     090C                     	;# 
  3833     090E                     	;# 
  3834     090F                     	;# 
  3835     091F                     	;# 
  3836     098F                     	;# 
  3837     098F                     	;# 
  3838     0990                     	;# 
  3839     0991                     	;# 
  3840     0992                     	;# 
  3841     0993                     	;# 
  3842     0994                     	;# 
  3843     0995                     	;# 
  3844     0996                     	;# 
  3845     0997                     	;# 
  3846     1E0F                     	;# 
  3847     1E10                     	;# 
  3848     1E11                     	;# 
  3849     1E12                     	;# 
  3850     1E13                     	;# 
  3851     1E14                     	;# 
  3852     1E15                     	;# 
  3853     1E16                     	;# 
  3854     1E17                     	;# 
  3855     1E18                     	;# 
  3856     1E19                     	;# 
  3857     1E1A                     	;# 
  3858     1E1B                     	;# 
  3859     1E1C                     	;# 
  3860     1E1D                     	;# 
  3861     1E1E                     	;# 
  3862     1E1F                     	;# 
  3863     1E20                     	;# 
  3864     1E21                     	;# 
  3865     1E22                     	;# 
  3866     1E23                     	;# 
  3867     1E24                     	;# 
  3868     1E25                     	;# 
  3869     1E26                     	;# 
  3870     1E27                     	;# 
  3871     1E28                     	;# 
  3872     1E29                     	;# 
  3873     1E2A                     	;# 
  3874     1E2B                     	;# 
  3875     1E2C                     	;# 
  3876     1E2D                     	;# 
  3877     1E2E                     	;# 
  3878     1E2F                     	;# 
  3879     1E30                     	;# 
  3880     1E31                     	;# 
  3881     1E32                     	;# 
  3882     1E33                     	;# 
  3883     1E34                     	;# 
  3884     1E35                     	;# 
  3885     1E36                     	;# 
  3886     1E37                     	;# 
  3887     1E8F                     	;# 
  3888     1E90                     	;# 
  3889     1E91                     	;# 
  3890     1E92                     	;# 
  3891     1E93                     	;# 
  3892     1E94                     	;# 
  3893     1E95                     	;# 
  3894     1E96                     	;# 
  3895     1E97                     	;# 
  3896     1E9C                     	;# 
  3897     1E9D                     	;# 
  3898     1E9E                     	;# 
  3899     1EA1                     	;# 
  3900     1EA2                     	;# 
  3901     1EA3                     	;# 
  3902     1EA4                     	;# 
  3903     1EA9                     	;# 
  3904     1EAA                     	;# 
  3905     1EB1                     	;# 
  3906     1EB2                     	;# 
  3907     1EB8                     	;# 
  3908     1EB9                     	;# 
  3909     1EBA                     	;# 
  3910     1EBB                     	;# 
  3911     1EBC                     	;# 
  3912     1EBD                     	;# 
  3913     1EBE                     	;# 
  3914     1EC3                     	;# 
  3915     1EC5                     	;# 
  3916     1EC6                     	;# 
  3917     1EC7                     	;# 
  3918     1ECB                     	;# 
  3919     1ECC                     	;# 
  3920     1F10                     	;# 
  3921     1F11                     	;# 
  3922     1F12                     	;# 
  3923     1F14                     	;# 
  3924     1F15                     	;# 
  3925     1F20                     	;# 
  3926     1F21                     	;# 
  3927     1F22                     	;# 
  3928     1F23                     	;# 
  3929     1F24                     	;# 
  3930     1F25                     	;# 
  3931     1F38                     	;# 
  3932     1F39                     	;# 
  3933     1F3A                     	;# 
  3934     1F3B                     	;# 
  3935     1F3C                     	;# 
  3936     1F3D                     	;# 
  3937     1F3E                     	;# 
  3938     1F3F                     	;# 
  3939     1F4E                     	;# 
  3940     1F4F                     	;# 
  3941     1F50                     	;# 
  3942     1F51                     	;# 
  3943     1F52                     	;# 
  3944     1F53                     	;# 
  3945     1F54                     	;# 
  3946     1F55                     	;# 
  3947     1FE4                     	;# 
  3948     1FE5                     	;# 
  3949     1FE6                     	;# 
  3950     1FE7                     	;# 
  3951     1FE8                     	;# 
  3952     1FE8                     	;# 
  3953     1FE9                     	;# 
  3954     1FEA                     	;# 
  3955     1FEB                     	;# 
  3956     1FED                     	;# 
  3957     1FEE                     	;# 
  3958     1FEF                     	;# 
  3959     0000                     	;# 
  3960     0001                     	;# 
  3961     0002                     	;# 
  3962     0003                     	;# 
  3963     0004                     	;# 
  3964     0005                     	;# 
  3965     0006                     	;# 
  3966     0007                     	;# 
  3967     0008                     	;# 
  3968     0009                     	;# 
  3969     000A                     	;# 
  3970     000B                     	;# 
  3971     000C                     	;# 
  3972     000E                     	;# 
  3973     0012                     	;# 
  3974     0014                     	;# 
  3975     0018                     	;# 
  3976     001A                     	;# 
  3977     008C                     	;# 
  3978     008C                     	;# 
  3979     008D                     	;# 
  3980     008E                     	;# 
  3981     008E                     	;# 
  3982     008F                     	;# 
  3983     0090                     	;# 
  3984     0090                     	;# 
  3985     0091                     	;# 
  3986     0092                     	;# 
  3987     0092                     	;# 
  3988     0093                     	;# 
  3989     0094                     	;# 
  3990     0094                     	;# 
  3991     0095                     	;# 
  3992     0096                     	;# 
  3993     0096                     	;# 
  3994     0097                     	;# 
  3995     0098                     	;# 
  3996     0099                     	;# 
  3997     009A                     	;# 
  3998     009B                     	;# 
  3999     009B                     	;# 
  4000     009C                     	;# 
  4001     009D                     	;# 
  4002     009D                     	;# 
  4003     009E                     	;# 
  4004     009F                     	;# 
  4005     010C                     	;# 
  4006     010C                     	;# 
  4007     010D                     	;# 
  4008     010E                     	;# 
  4009     010F                     	;# 
  4010     010F                     	;# 
  4011     0110                     	;# 
  4012     0111                     	;# 
  4013     0112                     	;# 
  4014     0113                     	;# 
  4015     0114                     	;# 
  4016     0115                     	;# 
  4017     0116                     	;# 
  4018     0117                     	;# 
  4019     0118                     	;# 
  4020     0119                     	;# 
  4021     0119                     	;# 
  4022     0119                     	;# 
  4023     011A                     	;# 
  4024     011A                     	;# 
  4025     011A                     	;# 
  4026     011B                     	;# 
  4027     011B                     	;# 
  4028     011B                     	;# 
  4029     011B                     	;# 
  4030     011B                     	;# 
  4031     011C                     	;# 
  4032     011C                     	;# 
  4033     011C                     	;# 
  4034     011D                     	;# 
  4035     011D                     	;# 
  4036     011D                     	;# 
  4037     011E                     	;# 
  4038     011E                     	;# 
  4039     011E                     	;# 
  4040     011F                     	;# 
  4041     011F                     	;# 
  4042     011F                     	;# 
  4043     011F                     	;# 
  4044     011F                     	;# 
  4045     018C                     	;# 
  4046     018D                     	;# 
  4047     018E                     	;# 
  4048     018F                     	;# 
  4049     0190                     	;# 
  4050     0191                     	;# 
  4051     0192                     	;# 
  4052     020C                     	;# 
  4053     020D                     	;# 
  4054     020E                     	;# 
  4055     020E                     	;# 
  4056     020F                     	;# 
  4057     020F                     	;# 
  4058     0210                     	;# 
  4059     0210                     	;# 
  4060     0211                     	;# 
  4061     0211                     	;# 
  4062     0212                     	;# 
  4063     0213                     	;# 
  4064     0214                     	;# 
  4065     0214                     	;# 
  4066     0215                     	;# 
  4067     0215                     	;# 
  4068     0216                     	;# 
  4069     0216                     	;# 
  4070     0217                     	;# 
  4071     0217                     	;# 
  4072     0218                     	;# 
  4073     0219                     	;# 
  4074     021A                     	;# 
  4075     021A                     	;# 
  4076     021B                     	;# 
  4077     021B                     	;# 
  4078     021C                     	;# 
  4079     021C                     	;# 
  4080     021D                     	;# 
  4081     021D                     	;# 
  4082     021E                     	;# 
  4083     021F                     	;# 
  4084     028C                     	;# 
  4085     028C                     	;# 
  4086     028D                     	;# 
  4087     028D                     	;# 
  4088     028E                     	;# 
  4089     028F                     	;# 
  4090     0290                     	;# 
  4091     0291                     	;# 
  4092     0292                     	;# 
  4093     0292                     	;# 
  4094     0293                     	;# 
  4095     0293                     	;# 
  4096     0294                     	;# 
  4097     0295                     	;# 
  4098     0296                     	;# 
  4099     0297                     	;# 
  4100     0298                     	;# 
  4101     0298                     	;# 
  4102     0299                     	;# 
  4103     0299                     	;# 
  4104     029A                     	;# 
  4105     029B                     	;# 
  4106     029C                     	;# 
  4107     029D                     	;# 
  4108     029F                     	;# 
  4109     030C                     	;# 
  4110     030C                     	;# 
  4111     030D                     	;# 
  4112     030E                     	;# 
  4113     030F                     	;# 
  4114     0310                     	;# 
  4115     0310                     	;# 
  4116     0311                     	;# 
  4117     0312                     	;# 
  4118     0313                     	;# 
  4119     0314                     	;# 
  4120     0314                     	;# 
  4121     0315                     	;# 
  4122     0316                     	;# 
  4123     0317                     	;# 
  4124     0318                     	;# 
  4125     0318                     	;# 
  4126     0319                     	;# 
  4127     031A                     	;# 
  4128     031B                     	;# 
  4129     038C                     	;# 
  4130     038C                     	;# 
  4131     038D                     	;# 
  4132     038E                     	;# 
  4133     0390                     	;# 
  4134     0390                     	;# 
  4135     0391                     	;# 
  4136     0392                     	;# 
  4137     048C                     	;# 
  4138     048C                     	;# 
  4139     048D                     	;# 
  4140     048E                     	;# 
  4141     048F                     	;# 
  4142     048F                     	;# 
  4143     0490                     	;# 
  4144     0491                     	;# 
  4145     0492                     	;# 
  4146     0492                     	;# 
  4147     0493                     	;# 
  4148     0494                     	;# 
  4149     0495                     	;# 
  4150     0495                     	;# 
  4151     0496                     	;# 
  4152     0497                     	;# 
  4153     0498                     	;# 
  4154     0499                     	;# 
  4155     049A                     	;# 
  4156     049B                     	;# 
  4157     049C                     	;# 
  4158     049D                     	;# 
  4159     058C                     	;# 
  4160     058C                     	;# 
  4161     058D                     	;# 
  4162     058E                     	;# 
  4163     058F                     	;# 
  4164     058F                     	;# 
  4165     0590                     	;# 
  4166     0591                     	;# 
  4167     0592                     	;# 
  4168     0593                     	;# 
  4169     059C                     	;# 
  4170     059C                     	;# 
  4171     059D                     	;# 
  4172     059D                     	;# 
  4173     059E                     	;# 
  4174     059F                     	;# 
  4175     060C                     	;# 
  4176     060C                     	;# 
  4177     060D                     	;# 
  4178     060D                     	;# 
  4179     060E                     	;# 
  4180     060F                     	;# 
  4181     0610                     	;# 
  4182     0611                     	;# 
  4183     0612                     	;# 
  4184     0613                     	;# 
  4185     0614                     	;# 
  4186     0616                     	;# 
  4187     0616                     	;# 
  4188     0617                     	;# 
  4189     0617                     	;# 
  4190     0618                     	;# 
  4191     0619                     	;# 
  4192     061A                     	;# 
  4193     061B                     	;# 
  4194     061C                     	;# 
  4195     061D                     	;# 
  4196     061E                     	;# 
  4197     070C                     	;# 
  4198     070D                     	;# 
  4199     070E                     	;# 
  4200     070F                     	;# 
  4201     0710                     	;# 
  4202     0711                     	;# 
  4203     0712                     	;# 
  4204     0713                     	;# 
  4205     0714                     	;# 
  4206     0716                     	;# 
  4207     0717                     	;# 
  4208     0718                     	;# 
  4209     0719                     	;# 
  4210     071A                     	;# 
  4211     071B                     	;# 
  4212     071C                     	;# 
  4213     071D                     	;# 
  4214     071E                     	;# 
  4215     0796                     	;# 
  4216     0797                     	;# 
  4217     0798                     	;# 
  4218     0799                     	;# 
  4219     079A                     	;# 
  4220     079B                     	;# 
  4221     079C                     	;# 
  4222     079D                     	;# 
  4223     080C                     	;# 
  4224     080D                     	;# 
  4225     080E                     	;# 
  4226     080F                     	;# 
  4227     0810                     	;# 
  4228     0811                     	;# 
  4229     0812                     	;# 
  4230     0813                     	;# 
  4231     0814                     	;# 
  4232     081A                     	;# 
  4233     081A                     	;# 
  4234     081B                     	;# 
  4235     081C                     	;# 
  4236     081C                     	;# 
  4237     081D                     	;# 
  4238     081E                     	;# 
  4239     081F                     	;# 
  4240     088C                     	;# 
  4241     088D                     	;# 
  4242     088E                     	;# 
  4243     088F                     	;# 
  4244     0890                     	;# 
  4245     0891                     	;# 
  4246     0892                     	;# 
  4247     0893                     	;# 
  4248     0895                     	;# 
  4249     0896                     	;# 
  4250     0897                     	;# 
  4251     0898                     	;# 
  4252     0899                     	;# 
  4253     089A                     	;# 
  4254     089B                     	;# 
  4255     090C                     	;# 
  4256     090E                     	;# 
  4257     090F                     	;# 
  4258     091F                     	;# 
  4259     098F                     	;# 
  4260     098F                     	;# 
  4261     0990                     	;# 
  4262     0991                     	;# 
  4263     0992                     	;# 
  4264     0993                     	;# 
  4265     0994                     	;# 
  4266     0995                     	;# 
  4267     0996                     	;# 
  4268     0997                     	;# 
  4269     1E0F                     	;# 
  4270     1E10                     	;# 
  4271     1E11                     	;# 
  4272     1E12                     	;# 
  4273     1E13                     	;# 
  4274     1E14                     	;# 
  4275     1E15                     	;# 
  4276     1E16                     	;# 
  4277     1E17                     	;# 
  4278     1E18                     	;# 
  4279     1E19                     	;# 
  4280     1E1A                     	;# 
  4281     1E1B                     	;# 
  4282     1E1C                     	;# 
  4283     1E1D                     	;# 
  4284     1E1E                     	;# 
  4285     1E1F                     	;# 
  4286     1E20                     	;# 
  4287     1E21                     	;# 
  4288     1E22                     	;# 
  4289     1E23                     	;# 
  4290     1E24                     	;# 
  4291     1E25                     	;# 
  4292     1E26                     	;# 
  4293     1E27                     	;# 
  4294     1E28                     	;# 
  4295     1E29                     	;# 
  4296     1E2A                     	;# 
  4297     1E2B                     	;# 
  4298     1E2C                     	;# 
  4299     1E2D                     	;# 
  4300     1E2E                     	;# 
  4301     1E2F                     	;# 
  4302     1E30                     	;# 
  4303     1E31                     	;# 
  4304     1E32                     	;# 
  4305     1E33                     	;# 
  4306     1E34                     	;# 
  4307     1E35                     	;# 
  4308     1E36                     	;# 
  4309     1E37                     	;# 
  4310     1E8F                     	;# 
  4311     1E90                     	;# 
  4312     1E91                     	;# 
  4313     1E92                     	;# 
  4314     1E93                     	;# 
  4315     1E94                     	;# 
  4316     1E95                     	;# 
  4317     1E96                     	;# 
  4318     1E97                     	;# 
  4319     1E9C                     	;# 
  4320     1E9D                     	;# 
  4321     1E9E                     	;# 
  4322     1EA1                     	;# 
  4323     1EA2                     	;# 
  4324     1EA3                     	;# 
  4325     1EA4                     	;# 
  4326     1EA9                     	;# 
  4327     1EAA                     	;# 
  4328     1EB1                     	;# 
  4329     1EB2                     	;# 
  4330     1EB8                     	;# 
  4331     1EB9                     	;# 
  4332     1EBA                     	;# 
  4333     1EBB                     	;# 
  4334     1EBC                     	;# 
  4335     1EBD                     	;# 
  4336     1EBE                     	;# 
  4337     1EC3                     	;# 
  4338     1EC5                     	;# 
  4339     1EC6                     	;# 
  4340     1EC7                     	;# 
  4341     1ECB                     	;# 
  4342     1ECC                     	;# 
  4343     1F10                     	;# 
  4344     1F11                     	;# 
  4345     1F12                     	;# 
  4346     1F14                     	;# 
  4347     1F15                     	;# 
  4348     1F20                     	;# 
  4349     1F21                     	;# 
  4350     1F22                     	;# 
  4351     1F23                     	;# 
  4352     1F24                     	;# 
  4353     1F25                     	;# 
  4354     1F38                     	;# 
  4355     1F39                     	;# 
  4356     1F3A                     	;# 
  4357     1F3B                     	;# 
  4358     1F3C                     	;# 
  4359     1F3D                     	;# 
  4360     1F3E                     	;# 
  4361     1F3F                     	;# 
  4362     1F4E                     	;# 
  4363     1F4F                     	;# 
  4364     1F50                     	;# 
  4365     1F51                     	;# 
  4366     1F52                     	;# 
  4367     1F53                     	;# 
  4368     1F54                     	;# 
  4369     1F55                     	;# 
  4370     1FE4                     	;# 
  4371     1FE5                     	;# 
  4372     1FE6                     	;# 
  4373     1FE7                     	;# 
  4374     1FE8                     	;# 
  4375     1FE8                     	;# 
  4376     1FE9                     	;# 
  4377     1FEA                     	;# 
  4378     1FEB                     	;# 
  4379     1FED                     	;# 
  4380     1FEE                     	;# 
  4381     1FEF                     	;# 
  4382     0000                     	;# 
  4383     0001                     	;# 
  4384     0002                     	;# 
  4385     0003                     	;# 
  4386     0004                     	;# 
  4387     0005                     	;# 
  4388     0006                     	;# 
  4389     0007                     	;# 
  4390     0008                     	;# 
  4391     0009                     	;# 
  4392     000A                     	;# 
  4393     000B                     	;# 
  4394     000C                     	;# 
  4395     000E                     	;# 
  4396     0012                     	;# 
  4397     0014                     	;# 
  4398     0018                     	;# 
  4399     001A                     	;# 
  4400     008C                     	;# 
  4401     008C                     	;# 
  4402     008D                     	;# 
  4403     008E                     	;# 
  4404     008E                     	;# 
  4405     008F                     	;# 
  4406     0090                     	;# 
  4407     0090                     	;# 
  4408     0091                     	;# 
  4409     0092                     	;# 
  4410     0092                     	;# 
  4411     0093                     	;# 
  4412     0094                     	;# 
  4413     0094                     	;# 
  4414     0095                     	;# 
  4415     0096                     	;# 
  4416     0096                     	;# 
  4417     0097                     	;# 
  4418     0098                     	;# 
  4419     0099                     	;# 
  4420     009A                     	;# 
  4421     009B                     	;# 
  4422     009B                     	;# 
  4423     009C                     	;# 
  4424     009D                     	;# 
  4425     009D                     	;# 
  4426     009E                     	;# 
  4427     009F                     	;# 
  4428     010C                     	;# 
  4429     010C                     	;# 
  4430     010D                     	;# 
  4431     010E                     	;# 
  4432     010F                     	;# 
  4433     010F                     	;# 
  4434     0110                     	;# 
  4435     0111                     	;# 
  4436     0112                     	;# 
  4437     0113                     	;# 
  4438     0114                     	;# 
  4439     0115                     	;# 
  4440     0116                     	;# 
  4441     0117                     	;# 
  4442     0118                     	;# 
  4443     0119                     	;# 
  4444     0119                     	;# 
  4445     0119                     	;# 
  4446     011A                     	;# 
  4447     011A                     	;# 
  4448     011A                     	;# 
  4449     011B                     	;# 
  4450     011B                     	;# 
  4451     011B                     	;# 
  4452     011B                     	;# 
  4453     011B                     	;# 
  4454     011C                     	;# 
  4455     011C                     	;# 
  4456     011C                     	;# 
  4457     011D                     	;# 
  4458     011D                     	;# 
  4459     011D                     	;# 
  4460     011E                     	;# 
  4461     011E                     	;# 
  4462     011E                     	;# 
  4463     011F                     	;# 
  4464     011F                     	;# 
  4465     011F                     	;# 
  4466     011F                     	;# 
  4467     011F                     	;# 
  4468     018C                     	;# 
  4469     018D                     	;# 
  4470     018E                     	;# 
  4471     018F                     	;# 
  4472     0190                     	;# 
  4473     0191                     	;# 
  4474     0192                     	;# 
  4475     020C                     	;# 
  4476     020D                     	;# 
  4477     020E                     	;# 
  4478     020E                     	;# 
  4479     020F                     	;# 
  4480     020F                     	;# 
  4481     0210                     	;# 
  4482     0210                     	;# 
  4483     0211                     	;# 
  4484     0211                     	;# 
  4485     0212                     	;# 
  4486     0213                     	;# 
  4487     0214                     	;# 
  4488     0214                     	;# 
  4489     0215                     	;# 
  4490     0215                     	;# 
  4491     0216                     	;# 
  4492     0216                     	;# 
  4493     0217                     	;# 
  4494     0217                     	;# 
  4495     0218                     	;# 
  4496     0219                     	;# 
  4497     021A                     	;# 
  4498     021A                     	;# 
  4499     021B                     	;# 
  4500     021B                     	;# 
  4501     021C                     	;# 
  4502     021C                     	;# 
  4503     021D                     	;# 
  4504     021D                     	;# 
  4505     021E                     	;# 
  4506     021F                     	;# 
  4507     028C                     	;# 
  4508     028C                     	;# 
  4509     028D                     	;# 
  4510     028D                     	;# 
  4511     028E                     	;# 
  4512     028F                     	;# 
  4513     0290                     	;# 
  4514     0291                     	;# 
  4515     0292                     	;# 
  4516     0292                     	;# 
  4517     0293                     	;# 
  4518     0293                     	;# 
  4519     0294                     	;# 
  4520     0295                     	;# 
  4521     0296                     	;# 
  4522     0297                     	;# 
  4523     0298                     	;# 
  4524     0298                     	;# 
  4525     0299                     	;# 
  4526     0299                     	;# 
  4527     029A                     	;# 
  4528     029B                     	;# 
  4529     029C                     	;# 
  4530     029D                     	;# 
  4531     029F                     	;# 
  4532     030C                     	;# 
  4533     030C                     	;# 
  4534     030D                     	;# 
  4535     030E                     	;# 
  4536     030F                     	;# 
  4537     0310                     	;# 
  4538     0310                     	;# 
  4539     0311                     	;# 
  4540     0312                     	;# 
  4541     0313                     	;# 
  4542     0314                     	;# 
  4543     0314                     	;# 
  4544     0315                     	;# 
  4545     0316                     	;# 
  4546     0317                     	;# 
  4547     0318                     	;# 
  4548     0318                     	;# 
  4549     0319                     	;# 
  4550     031A                     	;# 
  4551     031B                     	;# 
  4552     038C                     	;# 
  4553     038C                     	;# 
  4554     038D                     	;# 
  4555     038E                     	;# 
  4556     0390                     	;# 
  4557     0390                     	;# 
  4558     0391                     	;# 
  4559     0392                     	;# 
  4560     048C                     	;# 
  4561     048C                     	;# 
  4562     048D                     	;# 
  4563     048E                     	;# 
  4564     048F                     	;# 
  4565     048F                     	;# 
  4566     0490                     	;# 
  4567     0491                     	;# 
  4568     0492                     	;# 
  4569     0492                     	;# 
  4570     0493                     	;# 
  4571     0494                     	;# 
  4572     0495                     	;# 
  4573     0495                     	;# 
  4574     0496                     	;# 
  4575     0497                     	;# 
  4576     0498                     	;# 
  4577     0499                     	;# 
  4578     049A                     	;# 
  4579     049B                     	;# 
  4580     049C                     	;# 
  4581     049D                     	;# 
  4582     058C                     	;# 
  4583     058C                     	;# 
  4584     058D                     	;# 
  4585     058E                     	;# 
  4586     058F                     	;# 
  4587     058F                     	;# 
  4588     0590                     	;# 
  4589     0591                     	;# 
  4590     0592                     	;# 
  4591     0593                     	;# 
  4592     059C                     	;# 
  4593     059C                     	;# 
  4594     059D                     	;# 
  4595     059D                     	;# 
  4596     059E                     	;# 
  4597     059F                     	;# 
  4598     060C                     	;# 
  4599     060C                     	;# 
  4600     060D                     	;# 
  4601     060D                     	;# 
  4602     060E                     	;# 
  4603     060F                     	;# 
  4604     0610                     	;# 
  4605     0611                     	;# 
  4606     0612                     	;# 
  4607     0613                     	;# 
  4608     0614                     	;# 
  4609     0616                     	;# 
  4610     0616                     	;# 
  4611     0617                     	;# 
  4612     0617                     	;# 
  4613     0618                     	;# 
  4614     0619                     	;# 
  4615     061A                     	;# 
  4616     061B                     	;# 
  4617     061C                     	;# 
  4618     061D                     	;# 
  4619     061E                     	;# 
  4620     070C                     	;# 
  4621     070D                     	;# 
  4622     070E                     	;# 
  4623     070F                     	;# 
  4624     0710                     	;# 
  4625     0711                     	;# 
  4626     0712                     	;# 
  4627     0713                     	;# 
  4628     0714                     	;# 
  4629     0716                     	;# 
  4630     0717                     	;# 
  4631     0718                     	;# 
  4632     0719                     	;# 
  4633     071A                     	;# 
  4634     071B                     	;# 
  4635     071C                     	;# 
  4636     071D                     	;# 
  4637     071E                     	;# 
  4638     0796                     	;# 
  4639     0797                     	;# 
  4640     0798                     	;# 
  4641     0799                     	;# 
  4642     079A                     	;# 
  4643     079B                     	;# 
  4644     079C                     	;# 
  4645     079D                     	;# 
  4646     080C                     	;# 
  4647     080D                     	;# 
  4648     080E                     	;# 
  4649     080F                     	;# 
  4650     0810                     	;# 
  4651     0811                     	;# 
  4652     0812                     	;# 
  4653     0813                     	;# 
  4654     0814                     	;# 
  4655     081A                     	;# 
  4656     081A                     	;# 
  4657     081B                     	;# 
  4658     081C                     	;# 
  4659     081C                     	;# 
  4660     081D                     	;# 
  4661     081E                     	;# 
  4662     081F                     	;# 
  4663     088C                     	;# 
  4664     088D                     	;# 
  4665     088E                     	;# 
  4666     088F                     	;# 
  4667     0890                     	;# 
  4668     0891                     	;# 
  4669     0892                     	;# 
  4670     0893                     	;# 
  4671     0895                     	;# 
  4672     0896                     	;# 
  4673     0897                     	;# 
  4674     0898                     	;# 
  4675     0899                     	;# 
  4676     089A                     	;# 
  4677     089B                     	;# 
  4678     090C                     	;# 
  4679     090E                     	;# 
  4680     090F                     	;# 
  4681     091F                     	;# 
  4682     098F                     	;# 
  4683     098F                     	;# 
  4684     0990                     	;# 
  4685     0991                     	;# 
  4686     0992                     	;# 
  4687     0993                     	;# 
  4688     0994                     	;# 
  4689     0995                     	;# 
  4690     0996                     	;# 
  4691     0997                     	;# 
  4692     1E0F                     	;# 
  4693     1E10                     	;# 
  4694     1E11                     	;# 
  4695     1E12                     	;# 
  4696     1E13                     	;# 
  4697     1E14                     	;# 
  4698     1E15                     	;# 
  4699     1E16                     	;# 
  4700     1E17                     	;# 
  4701     1E18                     	;# 
  4702     1E19                     	;# 
  4703     1E1A                     	;# 
  4704     1E1B                     	;# 
  4705     1E1C                     	;# 
  4706     1E1D                     	;# 
  4707     1E1E                     	;# 
  4708     1E1F                     	;# 
  4709     1E20                     	;# 
  4710     1E21                     	;# 
  4711     1E22                     	;# 
  4712     1E23                     	;# 
  4713     1E24                     	;# 
  4714     1E25                     	;# 
  4715     1E26                     	;# 
  4716     1E27                     	;# 
  4717     1E28                     	;# 
  4718     1E29                     	;# 
  4719     1E2A                     	;# 
  4720     1E2B                     	;# 
  4721     1E2C                     	;# 
  4722     1E2D                     	;# 
  4723     1E2E                     	;# 
  4724     1E2F                     	;# 
  4725     1E30                     	;# 
  4726     1E31                     	;# 
  4727     1E32                     	;# 
  4728     1E33                     	;# 
  4729     1E34                     	;# 
  4730     1E35                     	;# 
  4731     1E36                     	;# 
  4732     1E37                     	;# 
  4733     1E8F                     	;# 
  4734     1E90                     	;# 
  4735     1E91                     	;# 
  4736     1E92                     	;# 
  4737     1E93                     	;# 
  4738     1E94                     	;# 
  4739     1E95                     	;# 
  4740     1E96                     	;# 
  4741     1E97                     	;# 
  4742     1E9C                     	;# 
  4743     1E9D                     	;# 
  4744     1E9E                     	;# 
  4745     1EA1                     	;# 
  4746     1EA2                     	;# 
  4747     1EA3                     	;# 
  4748     1EA4                     	;# 
  4749     1EA9                     	;# 
  4750     1EAA                     	;# 
  4751     1EB1                     	;# 
  4752     1EB2                     	;# 
  4753     1EB8                     	;# 
  4754     1EB9                     	;# 
  4755     1EBA                     	;# 
  4756     1EBB                     	;# 
  4757     1EBC                     	;# 
  4758     1EBD                     	;# 
  4759     1EBE                     	;# 
  4760     1EC3                     	;# 
  4761     1EC5                     	;# 
  4762     1EC6                     	;# 
  4763     1EC7                     	;# 
  4764     1ECB                     	;# 
  4765     1ECC                     	;# 
  4766     1F10                     	;# 
  4767     1F11                     	;# 
  4768     1F12                     	;# 
  4769     1F14                     	;# 
  4770     1F15                     	;# 
  4771     1F20                     	;# 
  4772     1F21                     	;# 
  4773     1F22                     	;# 
  4774     1F23                     	;# 
  4775     1F24                     	;# 
  4776     1F25                     	;# 
  4777     1F38                     	;# 
  4778     1F39                     	;# 
  4779     1F3A                     	;# 
  4780     1F3B                     	;# 
  4781     1F3C                     	;# 
  4782     1F3D                     	;# 
  4783     1F3E                     	;# 
  4784     1F3F                     	;# 
  4785     1F4E                     	;# 
  4786     1F4F                     	;# 
  4787     1F50                     	;# 
  4788     1F51                     	;# 
  4789     1F52                     	;# 
  4790     1F53                     	;# 
  4791     1F54                     	;# 
  4792     1F55                     	;# 
  4793     1FE4                     	;# 
  4794     1FE5                     	;# 
  4795     1FE6                     	;# 
  4796     1FE7                     	;# 
  4797     1FE8                     	;# 
  4798     1FE8                     	;# 
  4799     1FE9                     	;# 
  4800     1FEA                     	;# 
  4801     1FEB                     	;# 
  4802     1FED                     	;# 
  4803     1FEE                     	;# 
  4804     1FEF                     	;# 
  4805     0000                     	;# 
  4806     0001                     	;# 
  4807     0002                     	;# 
  4808     0003                     	;# 
  4809     0004                     	;# 
  4810     0005                     	;# 
  4811     0006                     	;# 
  4812     0007                     	;# 
  4813     0008                     	;# 
  4814     0009                     	;# 
  4815     000A                     	;# 
  4816     000B                     	;# 
  4817     000C                     	;# 
  4818     000E                     	;# 
  4819     0012                     	;# 
  4820     0014                     	;# 
  4821     0018                     	;# 
  4822     001A                     	;# 
  4823     008C                     	;# 
  4824     008C                     	;# 
  4825     008D                     	;# 
  4826     008E                     	;# 
  4827     008E                     	;# 
  4828     008F                     	;# 
  4829     0090                     	;# 
  4830     0090                     	;# 
  4831     0091                     	;# 
  4832     0092                     	;# 
  4833     0092                     	;# 
  4834     0093                     	;# 
  4835     0094                     	;# 
  4836     0094                     	;# 
  4837     0095                     	;# 
  4838     0096                     	;# 
  4839     0096                     	;# 
  4840     0097                     	;# 
  4841     0098                     	;# 
  4842     0099                     	;# 
  4843     009A                     	;# 
  4844     009B                     	;# 
  4845     009B                     	;# 
  4846     009C                     	;# 
  4847     009D                     	;# 
  4848     009D                     	;# 
  4849     009E                     	;# 
  4850     009F                     	;# 
  4851     010C                     	;# 
  4852     010C                     	;# 
  4853     010D                     	;# 
  4854     010E                     	;# 
  4855     010F                     	;# 
  4856     010F                     	;# 
  4857     0110                     	;# 
  4858     0111                     	;# 
  4859     0112                     	;# 
  4860     0113                     	;# 
  4861     0114                     	;# 
  4862     0115                     	;# 
  4863     0116                     	;# 
  4864     0117                     	;# 
  4865     0118                     	;# 
  4866     0119                     	;# 
  4867     0119                     	;# 
  4868     0119                     	;# 
  4869     011A                     	;# 
  4870     011A                     	;# 
  4871     011A                     	;# 
  4872     011B                     	;# 
  4873     011B                     	;# 
  4874     011B                     	;# 
  4875     011B                     	;# 
  4876     011B                     	;# 
  4877     011C                     	;# 
  4878     011C                     	;# 
  4879     011C                     	;# 
  4880     011D                     	;# 
  4881     011D                     	;# 
  4882     011D                     	;# 
  4883     011E                     	;# 
  4884     011E                     	;# 
  4885     011E                     	;# 
  4886     011F                     	;# 
  4887     011F                     	;# 
  4888     011F                     	;# 
  4889     011F                     	;# 
  4890     011F                     	;# 
  4891     018C                     	;# 
  4892     018D                     	;# 
  4893     018E                     	;# 
  4894     018F                     	;# 
  4895     0190                     	;# 
  4896     0191                     	;# 
  4897     0192                     	;# 
  4898     020C                     	;# 
  4899     020D                     	;# 
  4900     020E                     	;# 
  4901     020E                     	;# 
  4902     020F                     	;# 
  4903     020F                     	;# 
  4904     0210                     	;# 
  4905     0210                     	;# 
  4906     0211                     	;# 
  4907     0211                     	;# 
  4908     0212                     	;# 
  4909     0213                     	;# 
  4910     0214                     	;# 
  4911     0214                     	;# 
  4912     0215                     	;# 
  4913     0215                     	;# 
  4914     0216                     	;# 
  4915     0216                     	;# 
  4916     0217                     	;# 
  4917     0217                     	;# 
  4918     0218                     	;# 
  4919     0219                     	;# 
  4920     021A                     	;# 
  4921     021A                     	;# 
  4922     021B                     	;# 
  4923     021B                     	;# 
  4924     021C                     	;# 
  4925     021C                     	;# 
  4926     021D                     	;# 
  4927     021D                     	;# 
  4928     021E                     	;# 
  4929     021F                     	;# 
  4930     028C                     	;# 
  4931     028C                     	;# 
  4932     028D                     	;# 
  4933     028D                     	;# 
  4934     028E                     	;# 
  4935     028F                     	;# 
  4936     0290                     	;# 
  4937     0291                     	;# 
  4938     0292                     	;# 
  4939     0292                     	;# 
  4940     0293                     	;# 
  4941     0293                     	;# 
  4942     0294                     	;# 
  4943     0295                     	;# 
  4944     0296                     	;# 
  4945     0297                     	;# 
  4946     0298                     	;# 
  4947     0298                     	;# 
  4948     0299                     	;# 
  4949     0299                     	;# 
  4950     029A                     	;# 
  4951     029B                     	;# 
  4952     029C                     	;# 
  4953     029D                     	;# 
  4954     029F                     	;# 
  4955     030C                     	;# 
  4956     030C                     	;# 
  4957     030D                     	;# 
  4958     030E                     	;# 
  4959     030F                     	;# 
  4960     0310                     	;# 
  4961     0310                     	;# 
  4962     0311                     	;# 
  4963     0312                     	;# 
  4964     0313                     	;# 
  4965     0314                     	;# 
  4966     0314                     	;# 
  4967     0315                     	;# 
  4968     0316                     	;# 
  4969     0317                     	;# 
  4970     0318                     	;# 
  4971     0318                     	;# 
  4972     0319                     	;# 
  4973     031A                     	;# 
  4974     031B                     	;# 
  4975     038C                     	;# 
  4976     038C                     	;# 
  4977     038D                     	;# 
  4978     038E                     	;# 
  4979     0390                     	;# 
  4980     0390                     	;# 
  4981     0391                     	;# 
  4982     0392                     	;# 
  4983     048C                     	;# 
  4984     048C                     	;# 
  4985     048D                     	;# 
  4986     048E                     	;# 
  4987     048F                     	;# 
  4988     048F                     	;# 
  4989     0490                     	;# 
  4990     0491                     	;# 
  4991     0492                     	;# 
  4992     0492                     	;# 
  4993     0493                     	;# 
  4994     0494                     	;# 
  4995     0495                     	;# 
  4996     0495                     	;# 
  4997     0496                     	;# 
  4998     0497                     	;# 
  4999     0498                     	;# 
  5000     0499                     	;# 
  5001     049A                     	;# 
  5002     049B                     	;# 
  5003     049C                     	;# 
  5004     049D                     	;# 
  5005     058C                     	;# 
  5006     058C                     	;# 
  5007     058D                     	;# 
  5008     058E                     	;# 
  5009     058F                     	;# 
  5010     058F                     	;# 
  5011     0590                     	;# 
  5012     0591                     	;# 
  5013     0592                     	;# 
  5014     0593                     	;# 
  5015     059C                     	;# 
  5016     059C                     	;# 
  5017     059D                     	;# 
  5018     059D                     	;# 
  5019     059E                     	;# 
  5020     059F                     	;# 
  5021     060C                     	;# 
  5022     060C                     	;# 
  5023     060D                     	;# 
  5024     060D                     	;# 
  5025     060E                     	;# 
  5026     060F                     	;# 
  5027     0610                     	;# 
  5028     0611                     	;# 
  5029     0612                     	;# 
  5030     0613                     	;# 
  5031     0614                     	;# 
  5032     0616                     	;# 
  5033     0616                     	;# 
  5034     0617                     	;# 
  5035     0617                     	;# 
  5036     0618                     	;# 
  5037     0619                     	;# 
  5038     061A                     	;# 
  5039     061B                     	;# 
  5040     061C                     	;# 
  5041     061D                     	;# 
  5042     061E                     	;# 
  5043     070C                     	;# 
  5044     070D                     	;# 
  5045     070E                     	;# 
  5046     070F                     	;# 
  5047     0710                     	;# 
  5048     0711                     	;# 
  5049     0712                     	;# 
  5050     0713                     	;# 
  5051     0714                     	;# 
  5052     0716                     	;# 
  5053     0717                     	;# 
  5054     0718                     	;# 
  5055     0719                     	;# 
  5056     071A                     	;# 
  5057     071B                     	;# 
  5058     071C                     	;# 
  5059     071D                     	;# 
  5060     071E                     	;# 
  5061     0796                     	;# 
  5062     0797                     	;# 
  5063     0798                     	;# 
  5064     0799                     	;# 
  5065     079A                     	;# 
  5066     079B                     	;# 
  5067     079C                     	;# 
  5068     079D                     	;# 
  5069     080C                     	;# 
  5070     080D                     	;# 
  5071     080E                     	;# 
  5072     080F                     	;# 
  5073     0810                     	;# 
  5074     0811                     	;# 
  5075     0812                     	;# 
  5076     0813                     	;# 
  5077     0814                     	;# 
  5078     081A                     	;# 
  5079     081A                     	;# 
  5080     081B                     	;# 
  5081     081C                     	;# 
  5082     081C                     	;# 
  5083     081D                     	;# 
  5084     081E                     	;# 
  5085     081F                     	;# 
  5086     088C                     	;# 
  5087     088D                     	;# 
  5088     088E                     	;# 
  5089     088F                     	;# 
  5090     0890                     	;# 
  5091     0891                     	;# 
  5092     0892                     	;# 
  5093     0893                     	;# 
  5094     0895                     	;# 
  5095     0896                     	;# 
  5096     0897                     	;# 
  5097     0898                     	;# 
  5098     0899                     	;# 
  5099     089A                     	;# 
  5100     089B                     	;# 
  5101     090C                     	;# 
  5102     090E                     	;# 
  5103     090F                     	;# 
  5104     091F                     	;# 
  5105     098F                     	;# 
  5106     098F                     	;# 
  5107     0990                     	;# 
  5108     0991                     	;# 
  5109     0992                     	;# 
  5110     0993                     	;# 
  5111     0994                     	;# 
  5112     0995                     	;# 
  5113     0996                     	;# 
  5114     0997                     	;# 
  5115     1E0F                     	;# 
  5116     1E10                     	;# 
  5117     1E11                     	;# 
  5118     1E12                     	;# 
  5119     1E13                     	;# 
  5120     1E14                     	;# 
  5121     1E15                     	;# 
  5122     1E16                     	;# 
  5123     1E17                     	;# 
  5124     1E18                     	;# 
  5125     1E19                     	;# 
  5126     1E1A                     	;# 
  5127     1E1B                     	;# 
  5128     1E1C                     	;# 
  5129     1E1D                     	;# 
  5130     1E1E                     	;# 
  5131     1E1F                     	;# 
  5132     1E20                     	;# 
  5133     1E21                     	;# 
  5134     1E22                     	;# 
  5135     1E23                     	;# 
  5136     1E24                     	;# 
  5137     1E25                     	;# 
  5138     1E26                     	;# 
  5139     1E27                     	;# 
  5140     1E28                     	;# 
  5141     1E29                     	;# 
  5142     1E2A                     	;# 
  5143     1E2B                     	;# 
  5144     1E2C                     	;# 
  5145     1E2D                     	;# 
  5146     1E2E                     	;# 
  5147     1E2F                     	;# 
  5148     1E30                     	;# 
  5149     1E31                     	;# 
  5150     1E32                     	;# 
  5151     1E33                     	;# 
  5152     1E34                     	;# 
  5153     1E35                     	;# 
  5154     1E36                     	;# 
  5155     1E37                     	;# 
  5156     1E8F                     	;# 
  5157     1E90                     	;# 
  5158     1E91                     	;# 
  5159     1E92                     	;# 
  5160     1E93                     	;# 
  5161     1E94                     	;# 
  5162     1E95                     	;# 
  5163     1E96                     	;# 
  5164     1E97                     	;# 
  5165     1E9C                     	;# 
  5166     1E9D                     	;# 
  5167     1E9E                     	;# 
  5168     1EA1                     	;# 
  5169     1EA2                     	;# 
  5170     1EA3                     	;# 
  5171     1EA4                     	;# 
  5172     1EA9                     	;# 
  5173     1EAA                     	;# 
  5174     1EB1                     	;# 
  5175     1EB2                     	;# 
  5176     1EB8                     	;# 
  5177     1EB9                     	;# 
  5178     1EBA                     	;# 
  5179     1EBB                     	;# 
  5180     1EBC                     	;# 
  5181     1EBD                     	;# 
  5182     1EBE                     	;# 
  5183     1EC3                     	;# 
  5184     1EC5                     	;# 
  5185     1EC6                     	;# 
  5186     1EC7                     	;# 
  5187     1ECB                     	;# 
  5188     1ECC                     	;# 
  5189     1F10                     	;# 
  5190     1F11                     	;# 
  5191     1F12                     	;# 
  5192     1F14                     	;# 
  5193     1F15                     	;# 
  5194     1F20                     	;# 
  5195     1F21                     	;# 
  5196     1F22                     	;# 
  5197     1F23                     	;# 
  5198     1F24                     	;# 
  5199     1F25                     	;# 
  5200     1F38                     	;# 
  5201     1F39                     	;# 
  5202     1F3A                     	;# 
  5203     1F3B                     	;# 
  5204     1F3C                     	;# 
  5205     1F3D                     	;# 
  5206     1F3E                     	;# 
  5207     1F3F                     	;# 
  5208     1F4E                     	;# 
  5209     1F4F                     	;# 
  5210     1F50                     	;# 
  5211     1F51                     	;# 
  5212     1F52                     	;# 
  5213     1F53                     	;# 
  5214     1F54                     	;# 
  5215     1F55                     	;# 
  5216     1FE4                     	;# 
  5217     1FE5                     	;# 
  5218     1FE6                     	;# 
  5219     1FE7                     	;# 
  5220     1FE8                     	;# 
  5221     1FE8                     	;# 
  5222     1FE9                     	;# 
  5223     1FEA                     	;# 
  5224     1FEB                     	;# 
  5225     1FED                     	;# 
  5226     1FEE                     	;# 
  5227     1FEF                     	;# 
  5228     0000                     	;# 
  5229     0001                     	;# 
  5230     0002                     	;# 
  5231     0003                     	;# 
  5232     0004                     	;# 
  5233     0005                     	;# 
  5234     0006                     	;# 
  5235     0007                     	;# 
  5236     0008                     	;# 
  5237     0009                     	;# 
  5238     000A                     	;# 
  5239     000B                     	;# 
  5240     000C                     	;# 
  5241     000E                     	;# 
  5242     0012                     	;# 
  5243     0014                     	;# 
  5244     0018                     	;# 
  5245     001A                     	;# 
  5246     008C                     	;# 
  5247     008C                     	;# 
  5248     008D                     	;# 
  5249     008E                     	;# 
  5250     008E                     	;# 
  5251     008F                     	;# 
  5252     0090                     	;# 
  5253     0090                     	;# 
  5254     0091                     	;# 
  5255     0092                     	;# 
  5256     0092                     	;# 
  5257     0093                     	;# 
  5258     0094                     	;# 
  5259     0094                     	;# 
  5260     0095                     	;# 
  5261     0096                     	;# 
  5262     0096                     	;# 
  5263     0097                     	;# 
  5264     0098                     	;# 
  5265     0099                     	;# 
  5266     009A                     	;# 
  5267     009B                     	;# 
  5268     009B                     	;# 
  5269     009C                     	;# 
  5270     009D                     	;# 
  5271     009D                     	;# 
  5272     009E                     	;# 
  5273     009F                     	;# 
  5274     010C                     	;# 
  5275     010C                     	;# 
  5276     010D                     	;# 
  5277     010E                     	;# 
  5278     010F                     	;# 
  5279     010F                     	;# 
  5280     0110                     	;# 
  5281     0111                     	;# 
  5282     0112                     	;# 
  5283     0113                     	;# 
  5284     0114                     	;# 
  5285     0115                     	;# 
  5286     0116                     	;# 
  5287     0117                     	;# 
  5288     0118                     	;# 
  5289     0119                     	;# 
  5290     0119                     	;# 
  5291     0119                     	;# 
  5292     011A                     	;# 
  5293     011A                     	;# 
  5294     011A                     	;# 
  5295     011B                     	;# 
  5296     011B                     	;# 
  5297     011B                     	;# 
  5298     011B                     	;# 
  5299     011B                     	;# 
  5300     011C                     	;# 
  5301     011C                     	;# 
  5302     011C                     	;# 
  5303     011D                     	;# 
  5304     011D                     	;# 
  5305     011D                     	;# 
  5306     011E                     	;# 
  5307     011E                     	;# 
  5308     011E                     	;# 
  5309     011F                     	;# 
  5310     011F                     	;# 
  5311     011F                     	;# 
  5312     011F                     	;# 
  5313     011F                     	;# 
  5314     018C                     	;# 
  5315     018D                     	;# 
  5316     018E                     	;# 
  5317     018F                     	;# 
  5318     0190                     	;# 
  5319     0191                     	;# 
  5320     0192                     	;# 
  5321     020C                     	;# 
  5322     020D                     	;# 
  5323     020E                     	;# 
  5324     020E                     	;# 
  5325     020F                     	;# 
  5326     020F                     	;# 
  5327     0210                     	;# 
  5328     0210                     	;# 
  5329     0211                     	;# 
  5330     0211                     	;# 
  5331     0212                     	;# 
  5332     0213                     	;# 
  5333     0214                     	;# 
  5334     0214                     	;# 
  5335     0215                     	;# 
  5336     0215                     	;# 
  5337     0216                     	;# 
  5338     0216                     	;# 
  5339     0217                     	;# 
  5340     0217                     	;# 
  5341     0218                     	;# 
  5342     0219                     	;# 
  5343     021A                     	;# 
  5344     021A                     	;# 
  5345     021B                     	;# 
  5346     021B                     	;# 
  5347     021C                     	;# 
  5348     021C                     	;# 
  5349     021D                     	;# 
  5350     021D                     	;# 
  5351     021E                     	;# 
  5352     021F                     	;# 
  5353     028C                     	;# 
  5354     028C                     	;# 
  5355     028D                     	;# 
  5356     028D                     	;# 
  5357     028E                     	;# 
  5358     028F                     	;# 
  5359     0290                     	;# 
  5360     0291                     	;# 
  5361     0292                     	;# 
  5362     0292                     	;# 
  5363     0293                     	;# 
  5364     0293                     	;# 
  5365     0294                     	;# 
  5366     0295                     	;# 
  5367     0296                     	;# 
  5368     0297                     	;# 
  5369     0298                     	;# 
  5370     0298                     	;# 
  5371     0299                     	;# 
  5372     0299                     	;# 
  5373     029A                     	;# 
  5374     029B                     	;# 
  5375     029C                     	;# 
  5376     029D                     	;# 
  5377     029F                     	;# 
  5378     030C                     	;# 
  5379     030C                     	;# 
  5380     030D                     	;# 
  5381     030E                     	;# 
  5382     030F                     	;# 
  5383     0310                     	;# 
  5384     0310                     	;# 
  5385     0311                     	;# 
  5386     0312                     	;# 
  5387     0313                     	;# 
  5388     0314                     	;# 
  5389     0314                     	;# 
  5390     0315                     	;# 
  5391     0316                     	;# 
  5392     0317                     	;# 
  5393     0318                     	;# 
  5394     0318                     	;# 
  5395     0319                     	;# 
  5396     031A                     	;# 
  5397     031B                     	;# 
  5398     038C                     	;# 
  5399     038C                     	;# 
  5400     038D                     	;# 
  5401     038E                     	;# 
  5402     0390                     	;# 
  5403     0390                     	;# 
  5404     0391                     	;# 
  5405     0392                     	;# 
  5406     048C                     	;# 
  5407     048C                     	;# 
  5408     048D                     	;# 
  5409     048E                     	;# 
  5410     048F                     	;# 
  5411     048F                     	;# 
  5412     0490                     	;# 
  5413     0491                     	;# 
  5414     0492                     	;# 
  5415     0492                     	;# 
  5416     0493                     	;# 
  5417     0494                     	;# 
  5418     0495                     	;# 
  5419     0495                     	;# 
  5420     0496                     	;# 
  5421     0497                     	;# 
  5422     0498                     	;# 
  5423     0499                     	;# 
  5424     049A                     	;# 
  5425     049B                     	;# 
  5426     049C                     	;# 
  5427     049D                     	;# 
  5428     058C                     	;# 
  5429     058C                     	;# 
  5430     058D                     	;# 
  5431     058E                     	;# 
  5432     058F                     	;# 
  5433     058F                     	;# 
  5434     0590                     	;# 
  5435     0591                     	;# 
  5436     0592                     	;# 
  5437     0593                     	;# 
  5438     059C                     	;# 
  5439     059C                     	;# 
  5440     059D                     	;# 
  5441     059D                     	;# 
  5442     059E                     	;# 
  5443     059F                     	;# 
  5444     060C                     	;# 
  5445     060C                     	;# 
  5446     060D                     	;# 
  5447     060D                     	;# 
  5448     060E                     	;# 
  5449     060F                     	;# 
  5450     0610                     	;# 
  5451     0611                     	;# 
  5452     0612                     	;# 
  5453     0613                     	;# 
  5454     0614                     	;# 
  5455     0616                     	;# 
  5456     0616                     	;# 
  5457     0617                     	;# 
  5458     0617                     	;# 
  5459     0618                     	;# 
  5460     0619                     	;# 
  5461     061A                     	;# 
  5462     061B                     	;# 
  5463     061C                     	;# 
  5464     061D                     	;# 
  5465     061E                     	;# 
  5466     070C                     	;# 
  5467     070D                     	;# 
  5468     070E                     	;# 
  5469     070F                     	;# 
  5470     0710                     	;# 
  5471     0711                     	;# 
  5472     0712                     	;# 
  5473     0713                     	;# 
  5474     0714                     	;# 
  5475     0716                     	;# 
  5476     0717                     	;# 
  5477     0718                     	;# 
  5478     0719                     	;# 
  5479     071A                     	;# 
  5480     071B                     	;# 
  5481     071C                     	;# 
  5482     071D                     	;# 
  5483     071E                     	;# 
  5484     0796                     	;# 
  5485     0797                     	;# 
  5486     0798                     	;# 
  5487     0799                     	;# 
  5488     079A                     	;# 
  5489     079B                     	;# 
  5490     079C                     	;# 
  5491     079D                     	;# 
  5492     080C                     	;# 
  5493     080D                     	;# 
  5494     080E                     	;# 
  5495     080F                     	;# 
  5496     0810                     	;# 
  5497     0811                     	;# 
  5498     0812                     	;# 
  5499     0813                     	;# 
  5500     0814                     	;# 
  5501     081A                     	;# 
  5502     081A                     	;# 
  5503     081B                     	;# 
  5504     081C                     	;# 
  5505     081C                     	;# 
  5506     081D                     	;# 
  5507     081E                     	;# 
  5508     081F                     	;# 
  5509     088C                     	;# 
  5510     088D                     	;# 
  5511     088E                     	;# 
  5512     088F                     	;# 
  5513     0890                     	;# 
  5514     0891                     	;# 
  5515     0892                     	;# 
  5516     0893                     	;# 
  5517     0895                     	;# 
  5518     0896                     	;# 
  5519     0897                     	;# 
  5520     0898                     	;# 
  5521     0899                     	;# 
  5522     089A                     	;# 
  5523     089B                     	;# 
  5524     090C                     	;# 
  5525     090E                     	;# 
  5526     090F                     	;# 
  5527     091F                     	;# 
  5528     098F                     	;# 
  5529     098F                     	;# 
  5530     0990                     	;# 
  5531     0991                     	;# 
  5532     0992                     	;# 
  5533     0993                     	;# 
  5534     0994                     	;# 
  5535     0995                     	;# 
  5536     0996                     	;# 
  5537     0997                     	;# 
  5538     1E0F                     	;# 
  5539     1E10                     	;# 
  5540     1E11                     	;# 
  5541     1E12                     	;# 
  5542     1E13                     	;# 
  5543     1E14                     	;# 
  5544     1E15                     	;# 
  5545     1E16                     	;# 
  5546     1E17                     	;# 
  5547     1E18                     	;# 
  5548     1E19                     	;# 
  5549     1E1A                     	;# 
  5550     1E1B                     	;# 
  5551     1E1C                     	;# 
  5552     1E1D                     	;# 
  5553     1E1E                     	;# 
  5554     1E1F                     	;# 
  5555     1E20                     	;# 
  5556     1E21                     	;# 
  5557     1E22                     	;# 
  5558     1E23                     	;# 
  5559     1E24                     	;# 
  5560     1E25                     	;# 
  5561     1E26                     	;# 
  5562     1E27                     	;# 
  5563     1E28                     	;# 
  5564     1E29                     	;# 
  5565     1E2A                     	;# 
  5566     1E2B                     	;# 
  5567     1E2C                     	;# 
  5568     1E2D                     	;# 
  5569     1E2E                     	;# 
  5570     1E2F                     	;# 
  5571     1E30                     	;# 
  5572     1E31                     	;# 
  5573     1E32                     	;# 
  5574     1E33                     	;# 
  5575     1E34                     	;# 
  5576     1E35                     	;# 
  5577     1E36                     	;# 
  5578     1E37                     	;# 
  5579     1E8F                     	;# 
  5580     1E90                     	;# 
  5581     1E91                     	;# 
  5582     1E92                     	;# 
  5583     1E93                     	;# 
  5584     1E94                     	;# 
  5585     1E95                     	;# 
  5586     1E96                     	;# 
  5587     1E97                     	;# 
  5588     1E9C                     	;# 
  5589     1E9D                     	;# 
  5590     1E9E                     	;# 
  5591     1EA1                     	;# 
  5592     1EA2                     	;# 
  5593     1EA3                     	;# 
  5594     1EA4                     	;# 
  5595     1EA9                     	;# 
  5596     1EAA                     	;# 
  5597     1EB1                     	;# 
  5598     1EB2                     	;# 
  5599     1EB8                     	;# 
  5600     1EB9                     	;# 
  5601     1EBA                     	;# 
  5602     1EBB                     	;# 
  5603     1EBC                     	;# 
  5604     1EBD                     	;# 
  5605     1EBE                     	;# 
  5606     1EC3                     	;# 
  5607     1EC5                     	;# 
  5608     1EC6                     	;# 
  5609     1EC7                     	;# 
  5610     1ECB                     	;# 
  5611     1ECC                     	;# 
  5612     1F10                     	;# 
  5613     1F11                     	;# 
  5614     1F12                     	;# 
  5615     1F14                     	;# 
  5616     1F15                     	;# 
  5617     1F20                     	;# 
  5618     1F21                     	;# 
  5619     1F22                     	;# 
  5620     1F23                     	;# 
  5621     1F24                     	;# 
  5622     1F25                     	;# 
  5623     1F38                     	;# 
  5624     1F39                     	;# 
  5625     1F3A                     	;# 
  5626     1F3B                     	;# 
  5627     1F3C                     	;# 
  5628     1F3D                     	;# 
  5629     1F3E                     	;# 
  5630     1F3F                     	;# 
  5631     1F4E                     	;# 
  5632     1F4F                     	;# 
  5633     1F50                     	;# 
  5634     1F51                     	;# 
  5635     1F52                     	;# 
  5636     1F53                     	;# 
  5637     1F54                     	;# 
  5638     1F55                     	;# 
  5639     1FE4                     	;# 
  5640     1FE5                     	;# 
  5641     1FE6                     	;# 
  5642     1FE7                     	;# 
  5643     1FE8                     	;# 
  5644     1FE8                     	;# 
  5645     1FE9                     	;# 
  5646     1FEA                     	;# 
  5647     1FEB                     	;# 
  5648     1FED                     	;# 
  5649     1FEE                     	;# 
  5650     1FEF                     	;# 
  5651     0000                     	;# 
  5652     0001                     	;# 
  5653     0002                     	;# 
  5654     0003                     	;# 
  5655     0004                     	;# 
  5656     0005                     	;# 
  5657     0006                     	;# 
  5658     0007                     	;# 
  5659     0008                     	;# 
  5660     0009                     	;# 
  5661     000A                     	;# 
  5662     000B                     	;# 
  5663     000C                     	;# 
  5664     000E                     	;# 
  5665     0012                     	;# 
  5666     0014                     	;# 
  5667     0018                     	;# 
  5668     001A                     	;# 
  5669     008C                     	;# 
  5670     008C                     	;# 
  5671     008D                     	;# 
  5672     008E                     	;# 
  5673     008E                     	;# 
  5674     008F                     	;# 
  5675     0090                     	;# 
  5676     0090                     	;# 
  5677     0091                     	;# 
  5678     0092                     	;# 
  5679     0092                     	;# 
  5680     0093                     	;# 
  5681     0094                     	;# 
  5682     0094                     	;# 
  5683     0095                     	;# 
  5684     0096                     	;# 
  5685     0096                     	;# 
  5686     0097                     	;# 
  5687     0098                     	;# 
  5688     0099                     	;# 
  5689     009A                     	;# 
  5690     009B                     	;# 
  5691     009B                     	;# 
  5692     009C                     	;# 
  5693     009D                     	;# 
  5694     009D                     	;# 
  5695     009E                     	;# 
  5696     009F                     	;# 
  5697     010C                     	;# 
  5698     010C                     	;# 
  5699     010D                     	;# 
  5700     010E                     	;# 
  5701     010F                     	;# 
  5702     010F                     	;# 
  5703     0110                     	;# 
  5704     0111                     	;# 
  5705     0112                     	;# 
  5706     0113                     	;# 
  5707     0114                     	;# 
  5708     0115                     	;# 
  5709     0116                     	;# 
  5710     0117                     	;# 
  5711     0118                     	;# 
  5712     0119                     	;# 
  5713     0119                     	;# 
  5714     0119                     	;# 
  5715     011A                     	;# 
  5716     011A                     	;# 
  5717     011A                     	;# 
  5718     011B                     	;# 
  5719     011B                     	;# 
  5720     011B                     	;# 
  5721     011B                     	;# 
  5722     011B                     	;# 
  5723     011C                     	;# 
  5724     011C                     	;# 
  5725     011C                     	;# 
  5726     011D                     	;# 
  5727     011D                     	;# 
  5728     011D                     	;# 
  5729     011E                     	;# 
  5730     011E                     	;# 
  5731     011E                     	;# 
  5732     011F                     	;# 
  5733     011F                     	;# 
  5734     011F                     	;# 
  5735     011F                     	;# 
  5736     011F                     	;# 
  5737     018C                     	;# 
  5738     018D                     	;# 
  5739     018E                     	;# 
  5740     018F                     	;# 
  5741     0190                     	;# 
  5742     0191                     	;# 
  5743     0192                     	;# 
  5744     020C                     	;# 
  5745     020D                     	;# 
  5746     020E                     	;# 
  5747     020E                     	;# 
  5748     020F                     	;# 
  5749     020F                     	;# 
  5750     0210                     	;# 
  5751     0210                     	;# 
  5752     0211                     	;# 
  5753     0211                     	;# 
  5754     0212                     	;# 
  5755     0213                     	;# 
  5756     0214                     	;# 
  5757     0214                     	;# 
  5758     0215                     	;# 
  5759     0215                     	;# 
  5760     0216                     	;# 
  5761     0216                     	;# 
  5762     0217                     	;# 
  5763     0217                     	;# 
  5764     0218                     	;# 
  5765     0219                     	;# 
  5766     021A                     	;# 
  5767     021A                     	;# 
  5768     021B                     	;# 
  5769     021B                     	;# 
  5770     021C                     	;# 
  5771     021C                     	;# 
  5772     021D                     	;# 
  5773     021D                     	;# 
  5774     021E                     	;# 
  5775     021F                     	;# 
  5776     028C                     	;# 
  5777     028C                     	;# 
  5778     028D                     	;# 
  5779     028D                     	;# 
  5780     028E                     	;# 
  5781     028F                     	;# 
  5782     0290                     	;# 
  5783     0291                     	;# 
  5784     0292                     	;# 
  5785     0292                     	;# 
  5786     0293                     	;# 
  5787     0293                     	;# 
  5788     0294                     	;# 
  5789     0295                     	;# 
  5790     0296                     	;# 
  5791     0297                     	;# 
  5792     0298                     	;# 
  5793     0298                     	;# 
  5794     0299                     	;# 
  5795     0299                     	;# 
  5796     029A                     	;# 
  5797     029B                     	;# 
  5798     029C                     	;# 
  5799     029D                     	;# 
  5800     029F                     	;# 
  5801     030C                     	;# 
  5802     030C                     	;# 
  5803     030D                     	;# 
  5804     030E                     	;# 
  5805     030F                     	;# 
  5806     0310                     	;# 
  5807     0310                     	;# 
  5808     0311                     	;# 
  5809     0312                     	;# 
  5810     0313                     	;# 
  5811     0314                     	;# 
  5812     0314                     	;# 
  5813     0315                     	;# 
  5814     0316                     	;# 
  5815     0317                     	;# 
  5816     0318                     	;# 
  5817     0318                     	;# 
  5818     0319                     	;# 
  5819     031A                     	;# 
  5820     031B                     	;# 
  5821     038C                     	;# 
  5822     038C                     	;# 
  5823     038D                     	;# 
  5824     038E                     	;# 
  5825     0390                     	;# 
  5826     0390                     	;# 
  5827     0391                     	;# 
  5828     0392                     	;# 
  5829     048C                     	;# 
  5830     048C                     	;# 
  5831     048D                     	;# 
  5832     048E                     	;# 
  5833     048F                     	;# 
  5834     048F                     	;# 
  5835     0490                     	;# 
  5836     0491                     	;# 
  5837     0492                     	;# 
  5838     0492                     	;# 
  5839     0493                     	;# 
  5840     0494                     	;# 
  5841     0495                     	;# 
  5842     0495                     	;# 
  5843     0496                     	;# 
  5844     0497                     	;# 
  5845     0498                     	;# 
  5846     0499                     	;# 
  5847     049A                     	;# 
  5848     049B                     	;# 
  5849     049C                     	;# 
  5850     049D                     	;# 
  5851     058C                     	;# 
  5852     058C                     	;# 
  5853     058D                     	;# 
  5854     058E                     	;# 
  5855     058F                     	;# 
  5856     058F                     	;# 
  5857     0590                     	;# 
  5858     0591                     	;# 
  5859     0592                     	;# 
  5860     0593                     	;# 
  5861     059C                     	;# 
  5862     059C                     	;# 
  5863     059D                     	;# 
  5864     059D                     	;# 
  5865     059E                     	;# 
  5866     059F                     	;# 
  5867     060C                     	;# 
  5868     060C                     	;# 
  5869     060D                     	;# 
  5870     060D                     	;# 
  5871     060E                     	;# 
  5872     060F                     	;# 
  5873     0610                     	;# 
  5874     0611                     	;# 
  5875     0612                     	;# 
  5876     0613                     	;# 
  5877     0614                     	;# 
  5878     0616                     	;# 
  5879     0616                     	;# 
  5880     0617                     	;# 
  5881     0617                     	;# 
  5882     0618                     	;# 
  5883     0619                     	;# 
  5884     061A                     	;# 
  5885     061B                     	;# 
  5886     061C                     	;# 
  5887     061D                     	;# 
  5888     061E                     	;# 
  5889     070C                     	;# 
  5890     070D                     	;# 
  5891     070E                     	;# 
  5892     070F                     	;# 
  5893     0710                     	;# 
  5894     0711                     	;# 
  5895     0712                     	;# 
  5896     0713                     	;# 
  5897     0714                     	;# 
  5898     0716                     	;# 
  5899     0717                     	;# 
  5900     0718                     	;# 
  5901     0719                     	;# 
  5902     071A                     	;# 
  5903     071B                     	;# 
  5904     071C                     	;# 
  5905     071D                     	;# 
  5906     071E                     	;# 
  5907     0796                     	;# 
  5908     0797                     	;# 
  5909     0798                     	;# 
  5910     0799                     	;# 
  5911     079A                     	;# 
  5912     079B                     	;# 
  5913     079C                     	;# 
  5914     079D                     	;# 
  5915     080C                     	;# 
  5916     080D                     	;# 
  5917     080E                     	;# 
  5918     080F                     	;# 
  5919     0810                     	;# 
  5920     0811                     	;# 
  5921     0812                     	;# 
  5922     0813                     	;# 
  5923     0814                     	;# 
  5924     081A                     	;# 
  5925     081A                     	;# 
  5926     081B                     	;# 
  5927     081C                     	;# 
  5928     081C                     	;# 
  5929     081D                     	;# 
  5930     081E                     	;# 
  5931     081F                     	;# 
  5932     088C                     	;# 
  5933     088D                     	;# 
  5934     088E                     	;# 
  5935     088F                     	;# 
  5936     0890                     	;# 
  5937     0891                     	;# 
  5938     0892                     	;# 
  5939     0893                     	;# 
  5940     0895                     	;# 
  5941     0896                     	;# 
  5942     0897                     	;# 
  5943     0898                     	;# 
  5944     0899                     	;# 
  5945     089A                     	;# 
  5946     089B                     	;# 
  5947     090C                     	;# 
  5948     090E                     	;# 
  5949     090F                     	;# 
  5950     091F                     	;# 
  5951     098F                     	;# 
  5952     098F                     	;# 
  5953     0990                     	;# 
  5954     0991                     	;# 
  5955     0992                     	;# 
  5956     0993                     	;# 
  5957     0994                     	;# 
  5958     0995                     	;# 
  5959     0996                     	;# 
  5960     0997                     	;# 
  5961     1E0F                     	;# 
  5962     1E10                     	;# 
  5963     1E11                     	;# 
  5964     1E12                     	;# 
  5965     1E13                     	;# 
  5966     1E14                     	;# 
  5967     1E15                     	;# 
  5968     1E16                     	;# 
  5969     1E17                     	;# 
  5970     1E18                     	;# 
  5971     1E19                     	;# 
  5972     1E1A                     	;# 
  5973     1E1B                     	;# 
  5974     1E1C                     	;# 
  5975     1E1D                     	;# 
  5976     1E1E                     	;# 
  5977     1E1F                     	;# 
  5978     1E20                     	;# 
  5979     1E21                     	;# 
  5980     1E22                     	;# 
  5981     1E23                     	;# 
  5982     1E24                     	;# 
  5983     1E25                     	;# 
  5984     1E26                     	;# 
  5985     1E27                     	;# 
  5986     1E28                     	;# 
  5987     1E29                     	;# 
  5988     1E2A                     	;# 
  5989     1E2B                     	;# 
  5990     1E2C                     	;# 
  5991     1E2D                     	;# 
  5992     1E2E                     	;# 
  5993     1E2F                     	;# 
  5994     1E30                     	;# 
  5995     1E31                     	;# 
  5996     1E32                     	;# 
  5997     1E33                     	;# 
  5998     1E34                     	;# 
  5999     1E35                     	;# 
  6000     1E36                     	;# 
  6001     1E37                     	;# 
  6002     1E8F                     	;# 
  6003     1E90                     	;# 
  6004     1E91                     	;# 
  6005     1E92                     	;# 
  6006     1E93                     	;# 
  6007     1E94                     	;# 
  6008     1E95                     	;# 
  6009     1E96                     	;# 
  6010     1E97                     	;# 
  6011     1E9C                     	;# 
  6012     1E9D                     	;# 
  6013     1E9E                     	;# 
  6014     1EA1                     	;# 
  6015     1EA2                     	;# 
  6016     1EA3                     	;# 
  6017     1EA4                     	;# 
  6018     1EA9                     	;# 
  6019     1EAA                     	;# 
  6020     1EB1                     	;# 
  6021     1EB2                     	;# 
  6022     1EB8                     	;# 
  6023     1EB9                     	;# 
  6024     1EBA                     	;# 
  6025     1EBB                     	;# 
  6026     1EBC                     	;# 
  6027     1EBD                     	;# 
  6028     1EBE                     	;# 
  6029     1EC3                     	;# 
  6030     1EC5                     	;# 
  6031     1EC6                     	;# 
  6032     1EC7                     	;# 
  6033     1ECB                     	;# 
  6034     1ECC                     	;# 
  6035     1F10                     	;# 
  6036     1F11                     	;# 
  6037     1F12                     	;# 
  6038     1F14                     	;# 
  6039     1F15                     	;# 
  6040     1F20                     	;# 
  6041     1F21                     	;# 
  6042     1F22                     	;# 
  6043     1F23                     	;# 
  6044     1F24                     	;# 
  6045     1F25                     	;# 
  6046     1F38                     	;# 
  6047     1F39                     	;# 
  6048     1F3A                     	;# 
  6049     1F3B                     	;# 
  6050     1F3C                     	;# 
  6051     1F3D                     	;# 
  6052     1F3E                     	;# 
  6053     1F3F                     	;# 
  6054     1F4E                     	;# 
  6055     1F4F                     	;# 
  6056     1F50                     	;# 
  6057     1F51                     	;# 
  6058     1F52                     	;# 
  6059     1F53                     	;# 
  6060     1F54                     	;# 
  6061     1F55                     	;# 
  6062     1FE4                     	;# 
  6063     1FE5                     	;# 
  6064     1FE6                     	;# 
  6065     1FE7                     	;# 
  6066     1FE8                     	;# 
  6067     1FE8                     	;# 
  6068     1FE9                     	;# 
  6069     1FEA                     	;# 
  6070     1FEB                     	;# 
  6071     1FED                     	;# 
  6072     1FEE                     	;# 
  6073     1FEF                     	;# 
  6074     0000                     	;# 
  6075     0001                     	;# 
  6076     0002                     	;# 
  6077     0003                     	;# 
  6078     0004                     	;# 
  6079     0005                     	;# 
  6080     0006                     	;# 
  6081     0007                     	;# 
  6082     0008                     	;# 
  6083     0009                     	;# 
  6084     000A                     	;# 
  6085     000B                     	;# 
  6086     000C                     	;# 
  6087     000E                     	;# 
  6088     0012                     	;# 
  6089     0014                     	;# 
  6090     0018                     	;# 
  6091     001A                     	;# 
  6092     008C                     	;# 
  6093     008C                     	;# 
  6094     008D                     	;# 
  6095     008E                     	;# 
  6096     008E                     	;# 
  6097     008F                     	;# 
  6098     0090                     	;# 
  6099     0090                     	;# 
  6100     0091                     	;# 
  6101     0092                     	;# 
  6102     0092                     	;# 
  6103     0093                     	;# 
  6104     0094                     	;# 
  6105     0094                     	;# 
  6106     0095                     	;# 
  6107     0096                     	;# 
  6108     0096                     	;# 
  6109     0097                     	;# 
  6110     0098                     	;# 
  6111     0099                     	;# 
  6112     009A                     	;# 
  6113     009B                     	;# 
  6114     009B                     	;# 
  6115     009C                     	;# 
  6116     009D                     	;# 
  6117     009D                     	;# 
  6118     009E                     	;# 
  6119     009F                     	;# 
  6120     010C                     	;# 
  6121     010C                     	;# 
  6122     010D                     	;# 
  6123     010E                     	;# 
  6124     010F                     	;# 
  6125     010F                     	;# 
  6126     0110                     	;# 
  6127     0111                     	;# 
  6128     0112                     	;# 
  6129     0113                     	;# 
  6130     0114                     	;# 
  6131     0115                     	;# 
  6132     0116                     	;# 
  6133     0117                     	;# 
  6134     0118                     	;# 
  6135     0119                     	;# 
  6136     0119                     	;# 
  6137     0119                     	;# 
  6138     011A                     	;# 
  6139     011A                     	;# 
  6140     011A                     	;# 
  6141     011B                     	;# 
  6142     011B                     	;# 
  6143     011B                     	;# 
  6144     011B                     	;# 
  6145     011B                     	;# 
  6146     011C                     	;# 
  6147     011C                     	;# 
  6148     011C                     	;# 
  6149     011D                     	;# 
  6150     011D                     	;# 
  6151     011D                     	;# 
  6152     011E                     	;# 
  6153     011E                     	;# 
  6154     011E                     	;# 
  6155     011F                     	;# 
  6156     011F                     	;# 
  6157     011F                     	;# 
  6158     011F                     	;# 
  6159     011F                     	;# 
  6160     018C                     	;# 
  6161     018D                     	;# 
  6162     018E                     	;# 
  6163     018F                     	;# 
  6164     0190                     	;# 
  6165     0191                     	;# 
  6166     0192                     	;# 
  6167     020C                     	;# 
  6168     020D                     	;# 
  6169     020E                     	;# 
  6170     020E                     	;# 
  6171     020F                     	;# 
  6172     020F                     	;# 
  6173     0210                     	;# 
  6174     0210                     	;# 
  6175     0211                     	;# 
  6176     0211                     	;# 
  6177     0212                     	;# 
  6178     0213                     	;# 
  6179     0214                     	;# 
  6180     0214                     	;# 
  6181     0215                     	;# 
  6182     0215                     	;# 
  6183     0216                     	;# 
  6184     0216                     	;# 
  6185     0217                     	;# 
  6186     0217                     	;# 
  6187     0218                     	;# 
  6188     0219                     	;# 
  6189     021A                     	;# 
  6190     021A                     	;# 
  6191     021B                     	;# 
  6192     021B                     	;# 
  6193     021C                     	;# 
  6194     021C                     	;# 
  6195     021D                     	;# 
  6196     021D                     	;# 
  6197     021E                     	;# 
  6198     021F                     	;# 
  6199     028C                     	;# 
  6200     028C                     	;# 
  6201     028D                     	;# 
  6202     028D                     	;# 
  6203     028E                     	;# 
  6204     028F                     	;# 
  6205     0290                     	;# 
  6206     0291                     	;# 
  6207     0292                     	;# 
  6208     0292                     	;# 
  6209     0293                     	;# 
  6210     0293                     	;# 
  6211     0294                     	;# 
  6212     0295                     	;# 
  6213     0296                     	;# 
  6214     0297                     	;# 
  6215     0298                     	;# 
  6216     0298                     	;# 
  6217     0299                     	;# 
  6218     0299                     	;# 
  6219     029A                     	;# 
  6220     029B                     	;# 
  6221     029C                     	;# 
  6222     029D                     	;# 
  6223     029F                     	;# 
  6224     030C                     	;# 
  6225     030C                     	;# 
  6226     030D                     	;# 
  6227     030E                     	;# 
  6228     030F                     	;# 
  6229     0310                     	;# 
  6230     0310                     	;# 
  6231     0311                     	;# 
  6232     0312                     	;# 
  6233     0313                     	;# 
  6234     0314                     	;# 
  6235     0314                     	;# 
  6236     0315                     	;# 
  6237     0316                     	;# 
  6238     0317                     	;# 
  6239     0318                     	;# 
  6240     0318                     	;# 
  6241     0319                     	;# 
  6242     031A                     	;# 
  6243     031B                     	;# 
  6244     038C                     	;# 
  6245     038C                     	;# 
  6246     038D                     	;# 
  6247     038E                     	;# 
  6248     0390                     	;# 
  6249     0390                     	;# 
  6250     0391                     	;# 
  6251     0392                     	;# 
  6252     048C                     	;# 
  6253     048C                     	;# 
  6254     048D                     	;# 
  6255     048E                     	;# 
  6256     048F                     	;# 
  6257     048F                     	;# 
  6258     0490                     	;# 
  6259     0491                     	;# 
  6260     0492                     	;# 
  6261     0492                     	;# 
  6262     0493                     	;# 
  6263     0494                     	;# 
  6264     0495                     	;# 
  6265     0495                     	;# 
  6266     0496                     	;# 
  6267     0497                     	;# 
  6268     0498                     	;# 
  6269     0499                     	;# 
  6270     049A                     	;# 
  6271     049B                     	;# 
  6272     049C                     	;# 
  6273     049D                     	;# 
  6274     058C                     	;# 
  6275     058C                     	;# 
  6276     058D                     	;# 
  6277     058E                     	;# 
  6278     058F                     	;# 
  6279     058F                     	;# 
  6280     0590                     	;# 
  6281     0591                     	;# 
  6282     0592                     	;# 
  6283     0593                     	;# 
  6284     059C                     	;# 
  6285     059C                     	;# 
  6286     059D                     	;# 
  6287     059D                     	;# 
  6288     059E                     	;# 
  6289     059F                     	;# 
  6290     060C                     	;# 
  6291     060C                     	;# 
  6292     060D                     	;# 
  6293     060D                     	;# 
  6294     060E                     	;# 
  6295     060F                     	;# 
  6296     0610                     	;# 
  6297     0611                     	;# 
  6298     0612                     	;# 
  6299     0613                     	;# 
  6300     0614                     	;# 
  6301     0616                     	;# 
  6302     0616                     	;# 
  6303     0617                     	;# 
  6304     0617                     	;# 
  6305     0618                     	;# 
  6306     0619                     	;# 
  6307     061A                     	;# 
  6308     061B                     	;# 
  6309     061C                     	;# 
  6310     061D                     	;# 
  6311     061E                     	;# 
  6312     070C                     	;# 
  6313     070D                     	;# 
  6314     070E                     	;# 
  6315     070F                     	;# 
  6316     0710                     	;# 
  6317     0711                     	;# 
  6318     0712                     	;# 
  6319     0713                     	;# 
  6320     0714                     	;# 
  6321     0716                     	;# 
  6322     0717                     	;# 
  6323     0718                     	;# 
  6324     0719                     	;# 
  6325     071A                     	;# 
  6326     071B                     	;# 
  6327     071C                     	;# 
  6328     071D                     	;# 
  6329     071E                     	;# 
  6330     0796                     	;# 
  6331     0797                     	;# 
  6332     0798                     	;# 
  6333     0799                     	;# 
  6334     079A                     	;# 
  6335     079B                     	;# 
  6336     079C                     	;# 
  6337     079D                     	;# 
  6338     080C                     	;# 
  6339     080D                     	;# 
  6340     080E                     	;# 
  6341     080F                     	;# 
  6342     0810                     	;# 
  6343     0811                     	;# 
  6344     0812                     	;# 
  6345     0813                     	;# 
  6346     0814                     	;# 
  6347     081A                     	;# 
  6348     081A                     	;# 
  6349     081B                     	;# 
  6350     081C                     	;# 
  6351     081C                     	;# 
  6352     081D                     	;# 
  6353     081E                     	;# 
  6354     081F                     	;# 
  6355     088C                     	;# 
  6356     088D                     	;# 
  6357     088E                     	;# 
  6358     088F                     	;# 
  6359     0890                     	;# 
  6360     0891                     	;# 
  6361     0892                     	;# 
  6362     0893                     	;# 
  6363     0895                     	;# 
  6364     0896                     	;# 
  6365     0897                     	;# 
  6366     0898                     	;# 
  6367     0899                     	;# 
  6368     089A                     	;# 
  6369     089B                     	;# 
  6370     090C                     	;# 
  6371     090E                     	;# 
  6372     090F                     	;# 
  6373     091F                     	;# 
  6374     098F                     	;# 
  6375     098F                     	;# 
  6376     0990                     	;# 
  6377     0991                     	;# 
  6378     0992                     	;# 
  6379     0993                     	;# 
  6380     0994                     	;# 
  6381     0995                     	;# 
  6382     0996                     	;# 
  6383     0997                     	;# 
  6384     1E0F                     	;# 
  6385     1E10                     	;# 
  6386     1E11                     	;# 
  6387     1E12                     	;# 
  6388     1E13                     	;# 
  6389     1E14                     	;# 
  6390     1E15                     	;# 
  6391     1E16                     	;# 
  6392     1E17                     	;# 
  6393     1E18                     	;# 
  6394     1E19                     	;# 
  6395     1E1A                     	;# 
  6396     1E1B                     	;# 
  6397     1E1C                     	;# 
  6398     1E1D                     	;# 
  6399     1E1E                     	;# 
  6400     1E1F                     	;# 
  6401     1E20                     	;# 
  6402     1E21                     	;# 
  6403     1E22                     	;# 
  6404     1E23                     	;# 
  6405     1E24                     	;# 
  6406     1E25                     	;# 
  6407     1E26                     	;# 
  6408     1E27                     	;# 
  6409     1E28                     	;# 
  6410     1E29                     	;# 
  6411     1E2A                     	;# 
  6412     1E2B                     	;# 
  6413     1E2C                     	;# 
  6414     1E2D                     	;# 
  6415     1E2E                     	;# 
  6416     1E2F                     	;# 
  6417     1E30                     	;# 
  6418     1E31                     	;# 
  6419     1E32                     	;# 
  6420     1E33                     	;# 
  6421     1E34                     	;# 
  6422     1E35                     	;# 
  6423     1E36                     	;# 
  6424     1E37                     	;# 
  6425     1E8F                     	;# 
  6426     1E90                     	;# 
  6427     1E91                     	;# 
  6428     1E92                     	;# 
  6429     1E93                     	;# 
  6430     1E94                     	;# 
  6431     1E95                     	;# 
  6432     1E96                     	;# 
  6433     1E97                     	;# 
  6434     1E9C                     	;# 
  6435     1E9D                     	;# 
  6436     1E9E                     	;# 
  6437     1EA1                     	;# 
  6438     1EA2                     	;# 
  6439     1EA3                     	;# 
  6440     1EA4                     	;# 
  6441     1EA9                     	;# 
  6442     1EAA                     	;# 
  6443     1EB1                     	;# 
  6444     1EB2                     	;# 
  6445     1EB8                     	;# 
  6446     1EB9                     	;# 
  6447     1EBA                     	;# 
  6448     1EBB                     	;# 
  6449     1EBC                     	;# 
  6450     1EBD                     	;# 
  6451     1EBE                     	;# 
  6452     1EC3                     	;# 
  6453     1EC5                     	;# 
  6454     1EC6                     	;# 
  6455     1EC7                     	;# 
  6456     1ECB                     	;# 
  6457     1ECC                     	;# 
  6458     1F10                     	;# 
  6459     1F11                     	;# 
  6460     1F12                     	;# 
  6461     1F14                     	;# 
  6462     1F15                     	;# 
  6463     1F20                     	;# 
  6464     1F21                     	;# 
  6465     1F22                     	;# 
  6466     1F23                     	;# 
  6467     1F24                     	;# 
  6468     1F25                     	;# 
  6469     1F38                     	;# 
  6470     1F39                     	;# 
  6471     1F3A                     	;# 
  6472     1F3B                     	;# 
  6473     1F3C                     	;# 
  6474     1F3D                     	;# 
  6475     1F3E                     	;# 
  6476     1F3F                     	;# 
  6477     1F4E                     	;# 
  6478     1F4F                     	;# 
  6479     1F50                     	;# 
  6480     1F51                     	;# 
  6481     1F52                     	;# 
  6482     1F53                     	;# 
  6483     1F54                     	;# 
  6484     1F55                     	;# 
  6485     1FE4                     	;# 
  6486     1FE5                     	;# 
  6487     1FE6                     	;# 
  6488     1FE7                     	;# 
  6489     1FE8                     	;# 
  6490     1FE8                     	;# 
  6491     1FE9                     	;# 
  6492     1FEA                     	;# 
  6493     1FEB                     	;# 
  6494     1FED                     	;# 
  6495     1FEE                     	;# 
  6496     1FEF                     	;# 
  6497                           
  6498                           	psect	idataBANK2
  6499     0969                     __pidataBANK2:
  6500                           
  6501                           ;initializer for _sensor
  6502     0969  3454               	retlw	84
  6503     096A  3443               	retlw	67
  6504     096B  3430               	retlw	48
  6505     096C  3430               	retlw	48
  6506     096D  3431               	retlw	49
  6507     096E  3400               	retlw	0
  6508     096F  3400               	retlw	0
  6509     0970  3400               	retlw	0
  6510     0971  3478               	retlw	120
  6511     0972  3400               	retlw	0
  6512     0973  3404               	retlw	4
  6513     0974  34AF               	retlw	low _getADCData
  6514     0975  3409               	retlw	high _getADCData
  6515                           
  6516                           	psect	stringtext1
  6517     0803                     __pstringtext1:
  6518     0803                     _NMBS_BROADCAST_ADDRESS@nanomodbus$F1606:
  6519     0803  3400               	retlw	0
  6520     0804                     __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F1606:
  6521                           
  6522                           	psect	stringtext2
  6523     0804                     __pstringtext2:
  6524     0804                     _NMBS_BROADCAST_ADDRESS@nanomodbus$F1380:
  6525     0804  3400               	retlw	0
  6526     0805                     __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F1380:
  6527                           
  6528                           	psect	stringtext3
  6529     0805                     __pstringtext3:
  6530     0805                     _NMBS_BROADCAST_ADDRESS:
  6531     0805  3400               	retlw	0
  6532     0806                     __end_of_NMBS_BROADCAST_ADDRESS:
  6533                           
  6534                           	psect	nvBANK1
  6535     00E6                     __pnvBANK1:
  6536     00E6                     _TMR0_InterruptHandler:
  6537     00E6                     	ds	2
  6538     00E8                     _EUSART1_ErrorHandler:
  6539     00E8                     	ds	2
  6540     00EA                     _EUSART1_OverrunErrorHandler:
  6541     00EA                     	ds	2
  6542     00EC                     _EUSART1_FramingErrorHandler:
  6543     00EC                     	ds	2
  6544     00EE                     _EUSART1_RxDefaultInterruptHandler:
  6545     00EE                     	ds	2
  6546     001A                     _LATCbits	set	26
  6547     000B                     _INTCONbits	set	11
  6548     0014                     _TRISC	set	20
  6549     0012                     _TRISA	set	18
  6550     001A                     _LATC	set	26
  6551     0018                     _LATA	set	24
  6552     009D                     _ADRESL	set	157
  6553     009E                     _ADRESH	set	158
  6554     009F                     _ADPCH	set	159
  6555     009A                     _ADRPT	set	154
  6556     0098                     _ADACCU	set	152
  6557     0093                     _ADSTPTH	set	147
  6558     0092                     _ADSTPTL	set	146
  6559     008F                     _ADUTHH	set	143
  6560     008E                     _ADUTHL	set	142
  6561     008D                     _ADLTHH	set	141
  6562     008C                     _ADLTHL	set	140
  6563     011B                     _SP1BRG	set	283
  6564     0119                     _RC1REG	set	281
  6565     011A                     _TX1REG	set	282
  6566     011E                     _TX1STA	set	286
  6567     011D                     _RC1STA	set	285
  6568     011F                     _BAUD1CON	set	287
  6569     011C                     _SP1BRGH	set	284
  6570     011B                     _SP1BRGL	set	283
  6571     011D                     _RC1STAbits	set	285
  6572     011E                     _TX1STAbits	set	286
  6573     0111                     _ADCON0bits	set	273
  6574     0111                     _ADCON0	set	273
  6575     0118                     _ADCLK	set	280
  6576     0117                     _ADACT	set	279
  6577     0116                     _ADREF	set	278
  6578     0115                     _ADSTAT	set	277
  6579     0114                     _ADCON3	set	276
  6580     0113                     _ADCON2	set	275
  6581     0112                     _ADCON1	set	274
  6582     0110                     _ADPREH	set	272
  6583     010F                     _ADPREL	set	271
  6584     010E                     _ADCAP	set	270
  6585     010D                     _ADACQH	set	269
  6586     010C                     _ADACQL	set	268
  6587     059E                     _T0CON0bits	set	1438
  6588     059E                     _T0CON0	set	1438
  6589     059C                     _TMR0L	set	1436
  6590     059D                     _TMR0H	set	1437
  6591     059F                     _T0CON1	set	1439
  6592     070C                     _PIR0bits	set	1804
  6593     0716                     _PIE0bits	set	1814
  6594     070F                     _PIR3bits	set	1807
  6595     0719                     _PIE3bits	set	1817
  6596     079D                     _PMD7	set	1949
  6597     079C                     _PMD6	set	1948
  6598     079B                     _PMD5	set	1947
  6599     079A                     _PMD4	set	1946
  6600     0799                     _PMD3	set	1945
  6601     0798                     _PMD2	set	1944
  6602     0797                     _PMD1	set	1943
  6603     0796                     _PMD0	set	1942
  6604     081F                     _NVMCON2	set	2079
  6605     081C                     _NVMDATL	set	2076
  6606     081E                     _NVMCON1bits	set	2078
  6607     081B                     _NVMADRH	set	2075
  6608     081A                     _NVMADRL	set	2074
  6609     0892                     _OSCTUNE	set	2194
  6610     0893                     _OSCFRQ	set	2195
  6611     0891                     _OSCEN	set	2193
  6612     088F                     _OSCCON3	set	2191
  6613     088D                     _OSCCON1	set	2189
  6614     090C                     _FVRCONbits	set	2316
  6615     090C                     _FVRCON	set	2316
  6616     1ECB                     _RX1DTPPS	set	7883
  6617     1F24                     _RC4PPS	set	7972
  6618     1F52                     _INLVLC	set	8018
  6619     1F3C                     _INLVLA	set	7996
  6620     1F51                     _SLRCONC	set	8017
  6621     1F3B                     _SLRCONA	set	7995
  6622     1F50                     _ODCONC	set	8016
  6623     1F3A                     _ODCONA	set	7994
  6624     1F4F                     _WPUC	set	8015
  6625     1F39                     _WPUA	set	7993
  6626     1F38                     _ANSELA	set	7992
  6627     1F4E                     _ANSELC	set	8014
  6628                           
  6629                           	psect	stringtext4
  6630     07D9                     __pstringtext4:
  6631     07D9                     STR_1:
  6632     07D9  3445               	retlw	69	;'E'
  6633     07DA  3472               	retlw	114	;'r'
  6634     07DB  3472               	retlw	114	;'r'
  6635     07DC  346F               	retlw	111	;'o'
  6636     07DD  3472               	retlw	114	;'r'
  6637     07DE  3420               	retlw	32	;' '
  6638     07DF  3465               	retlw	101	;'e'
  6639     07E0  346E               	retlw	110	;'n'
  6640     07E1  3420               	retlw	32	;' '
  6641     07E2  346C               	retlw	108	;'l'
  6642     07E3  3461               	retlw	97	;'a'
  6643     07E4  3420               	retlw	32	;' '
  6644     07E5  3463               	retlw	99	;'c'
  6645     07E6  3472               	retlw	114	;'r'
  6646     07E7  3465               	retlw	101	;'e'
  6647     07E8  3461               	retlw	97	;'a'
  6648     07E9  3463               	retlw	99	;'c'
  6649     07EA  3469               	retlw	105	;'i'
  6650     07EB  346F               	retlw	111	;'o'
  6651     07EC  346E               	retlw	110	;'n'
  6652     07ED  3420               	retlw	32	;' '
  6653     07EE  3464               	retlw	100	;'d'
  6654     07EF  3465               	retlw	101	;'e'
  6655     07F0  3420               	retlw	32	;' '
  6656     07F1  346C               	retlw	108	;'l'
  6657     07F2  3461               	retlw	97	;'a'
  6658     07F3  3420               	retlw	32	;' '
  6659     07F4  3469               	retlw	105	;'i'
  6660     07F5  346E               	retlw	110	;'n'
  6661     07F6  3473               	retlw	115	;'s'
  6662     07F7  3474               	retlw	116	;'t'
  6663     07F8  3461               	retlw	97	;'a'
  6664     07F9  346E               	retlw	110	;'n'
  6665     07FA  3463               	retlw	99	;'c'
  6666     07FB  3469               	retlw	105	;'i'
  6667     07FC  3461               	retlw	97	;'a'
  6668     07FD  340A               	retlw	10
  6669     07FE  3400               	retlw	0
  6670                           
  6671                           	psect	stringtext5
  6672     07FF                     __pstringtext5:
  6673     07FF                     STR_2:
  6674     07FF  3430               	retlw	48	;'0'
  6675     0800  3430               	retlw	48	;'0'
  6676     0801  3431               	retlw	49	;'1'
  6677     0802  3400               	retlw	0
  6678                           
  6679                           	psect	stringtext6
  6680     0000                     __pstringtext6:
  6681     07FF                     
  6682                           	psect	cinit
  6683     001D                     start_initialization:	
  6684                           ; #config settings
  6685                           
  6686     001D                     __initialization:
  6687                           
  6688                           ; Initialize objects allocated to BANK2
  6689     001D  3069               	movlw	low __pidataBANK2
  6690     001E  0084               	movwf	4
  6691     001F  3089               	movlw	(high __pidataBANK2)| (0+128)
  6692     0020  0085               	movwf	5
  6693     0021  305B               	movlw	low __pdataBANK2
  6694     0022  0086               	movwf	6
  6695     0023  3001               	movlw	high __pdataBANK2
  6696     0024  0087               	movwf	7
  6697     0025  300D               	movlw	13
  6698     0026  3188  20C3  3180   	fcall	init_ram
  6699                           
  6700                           ; Clear objects allocated to COMMON
  6701     0029  01F0               	clrf	__pbssCOMMON& (0+127)
  6702     002A  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  6703     002B  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  6704     002C  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  6705     002D  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  6706                           
  6707                           ; Clear objects allocated to BANK0
  6708     002E  01EB               	clrf	__pbssBANK0& (0+127)
  6709     002F  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  6710     0030  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  6711                           
  6712                           ; Clear objects allocated to BANK1
  6713     0031  30D1               	movlw	low __pbssBANK1
  6714     0032  0084               	movwf	4
  6715     0033  3000               	movlw	high __pbssBANK1
  6716     0034  0085               	movwf	5
  6717     0035  3015               	movlw	21
  6718     0036  3188  20BD  3180   	fcall	clear_ram0
  6719                           
  6720                           ; Clear objects allocated to BANK3
  6721     0039  30A0               	movlw	low __pbssBANK3
  6722     003A  0084               	movwf	4
  6723     003B  3001               	movlw	high __pbssBANK3
  6724     003C  0085               	movwf	5
  6725     003D  302A               	movlw	42
  6726     003E  3188  20BD  3180   	fcall	clear_ram0
  6727                           
  6728                           ; Clear objects allocated to BANK4
  6729     0041  3020               	movlw	low __pbssBANK4
  6730     0042  0084               	movwf	4
  6731     0043  3002               	movlw	high __pbssBANK4
  6732     0044  0085               	movwf	5
  6733     0045  3040               	movlw	64
  6734     0046  3188  20BD         	fcall	clear_ram0
  6735     0048                     end_of_initialization:	
  6736                           ;End of C runtime variable initialization code
  6737                           
  6738     0048                     __end_of__initialization:
  6739     0048  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6740     0049  0140               	movlb	0
  6741     004A  3181  2978         	ljmp	_main	;jump to C main() function
  6742                           
  6743                           	psect	bssCOMMON
  6744     0070                     __pbssCOMMON:
  6745     0070                     _count:
  6746     0070                     	ds	1
  6747     0071                     _eusart1RxCount:
  6748     0071                     	ds	1
  6749     0072                     _eusart1RxTail:
  6750     0072                     	ds	1
  6751     0073                     _eusart1RxHead:
  6752     0073                     	ds	1
  6753     0074                     _uart_expire_time:
  6754     0074                     	ds	1
  6755                           
  6756                           	psect	bssBANK0
  6757     006B                     __pbssBANK0:
  6758     006B                     _flags:
  6759     006B                     	ds	1
  6760     006C                     _eusart1RxLastError:
  6761     006C                     	ds	1
  6762     006D                     _flag_Rx:
  6763     006D                     	ds	1
  6764                           
  6765                           	psect	bssBANK1
  6766     00D1                     __pbssBANK1:
  6767     00D1                     _eusart1RxStatusBuffer:
  6768     00D1                     	ds	8
  6769     00D9                     _eusart1RxBuffer:
  6770     00D9                     	ds	8
  6771     00E1                     _width:
  6772     00E1                     	ds	2
  6773     00E3                     _prec:
  6774     00E3                     	ds	2
  6775     00E5                     _eusart1PacketFinish:
  6776     00E5                     	ds	1
  6777                           
  6778                           	psect	dataBANK2
  6779     015B                     __pdataBANK2:
  6780     015B                     _sensor:
  6781     015B                     	ds	13
  6782                           
  6783                           	psect	bssBANK3
  6784     01A0                     __pbssBANK3:
  6785     01A0                     _dbuf:
  6786     01A0                     	ds	32
  6787     01C0                     handle_read_registers@F10771:
  6788     01C0                     	ds	10
  6789                           
  6790                           	psect	bssBANK4
  6791     0220                     __pbssBANK4:
  6792     0220                     _funcs:
  6793     0220                     	ds	64
  6794                           
  6795                           	psect	inittext
  6796     08C3                     init_ram:
  6797     08C3  00FE               	movwf	126
  6798     08C4                     initloop:
  6799     08C4  0012               	moviw fsr0++
  6800     08C5  001E               	movwi fsr1++
  6801     08C6  0BFE               	decfsz	126,f
  6802     08C7  28C4               	goto	initloop
  6803     08C8  3400               	retlw	0
  6804                           
  6805                           	psect	clrtext
  6806     08BD                     clear_ram0:	
  6807                           ;	Called with FSR0 containing the base address, and
  6808                           ;	WREG with the size to clear
  6809                           
  6810     08BD  0064               	clrwdt	;clear the watchdog before getting into this loop
  6811     08BE                     clrloop0:
  6812     08BE  0180               	clrf	0	;clear RAM location pointed to by FSR
  6813     08BF  3101               	addfsr 0,1
  6814     08C0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6815     08C1  28BE               	goto	clrloop0	;have we reached the end yet?
  6816     08C2  3400               	retlw	0	;all done for this memory range, return
  6817                           
  6818                           	psect	cstackBANK2
  6819     0120                     __pcstackBANK2:
  6820     0120                     main@nmbs:
  6821                           
  6822                           ; 59 bytes @ 0x0
  6823     0120                     	ds	59
  6824                           
  6825                           	psect	cstackBANK1
  6826     00A0                     __pcstackBANK1:
  6827     00A0                     handle_read_registers@regs:
  6828                           
  6829                           ; 10 bytes @ 0x0
  6830     00A0                     	ds	10
  6831     00AA                     handle_read_registers@address:
  6832                           
  6833                           ; 2 bytes @ 0xA
  6834     00AA                     	ds	2
  6835     00AC                     handle_read_registers@regs_bytes:
  6836                           
  6837                           ; 1 bytes @ 0xC
  6838     00AC                     	ds	1
  6839     00AD                     handle_read_registers@i:
  6840                           
  6841                           ; 2 bytes @ 0xD
  6842     00AD                     	ds	2
  6843     00AF                     handle_read_registers@quantity:
  6844                           
  6845                           ; 2 bytes @ 0xF
  6846     00AF                     	ds	2
  6847     00B1                     handle_read_registers@err:
  6848                           
  6849                           ; 1 bytes @ 0x11
  6850     00B1                     	ds	1
  6851     00B2                     handle_read_registers@nmbs:
  6852                           
  6853                           ; 1 bytes @ 0x12
  6854     00B2                     	ds	1
  6855     00B3                     main@actual_regs:
  6856                           
  6857                           ; 4 bytes @ 0x13
  6858     00B3                     	ds	4
  6859     00B7                     main@callbacks:
  6860                           
  6861                           ; 9 bytes @ 0x17
  6862     00B7                     	ds	9
  6863     00C0                     main@platform_conf:
  6864                           
  6865                           ; 6 bytes @ 0x20
  6866     00C0                     	ds	6
  6867     00C6                     main@registers:
  6868                           
  6869                           ; 11 bytes @ 0x26
  6870     00C6                     	ds	11
  6871                           
  6872                           	psect	cstackCOMMON
  6873     0075                     __pcstackCOMMON:
  6874     0075                     ?_EUSART1_Receive_ISR:
  6875     0075                     ?_EUSART1_DefaultFramingErrorHandler:	
  6876                           ; 1 bytes @ 0x0
  6877                           
  6878     0075                     ??_EUSART1_DefaultFramingErrorHandler:	
  6879                           ; 1 bytes @ 0x0
  6880                           
  6881     0075                     ?_EUSART1_DefaultOverrunErrorHandler:	
  6882                           ; 1 bytes @ 0x0
  6883                           
  6884     0075                     ??_EUSART1_DefaultOverrunErrorHandler:	
  6885                           ; 1 bytes @ 0x0
  6886                           
  6887     0075                     ?_EUSART1_DefaultErrorHandler:	
  6888                           ; 1 bytes @ 0x0
  6889                           
  6890     0075                     ?_EUSART1_RxDataHandler:	
  6891                           ; 1 bytes @ 0x0
  6892                           
  6893     0075                     ?_TMR0_WriteTimer:	
  6894                           ; 1 bytes @ 0x0
  6895                           
  6896     0075                     ??_TMR0_WriteTimer:	
  6897                           ; 1 bytes @ 0x0
  6898                           
  6899     0075                     ?_TMR0_StartTimer:	
  6900                           ; 1 bytes @ 0x0
  6901                           
  6902     0075                     ??_TMR0_StartTimer:	
  6903                           ; 1 bytes @ 0x0
  6904                           
  6905     0075                     ?_PMD_Initialize:	
  6906                           ; 1 bytes @ 0x0
  6907                           
  6908     0075                     ?_PIN_MANAGER_Initialize:	
  6909                           ; 1 bytes @ 0x0
  6910                           
  6911     0075                     ?_OSCILLATOR_Initialize:	
  6912                           ; 1 bytes @ 0x0
  6913                           
  6914     0075                     ?_FVR_Initialize:	
  6915                           ; 1 bytes @ 0x0
  6916                           
  6917     0075                     ?_TMR0_Initialize:	
  6918                           ; 1 bytes @ 0x0
  6919                           
  6920     0075                     ?_TMR0_ISR:	
  6921                           ; 1 bytes @ 0x0
  6922                           
  6923     0075                     ??_TMR0_ISR:	
  6924                           ; 1 bytes @ 0x0
  6925                           
  6926     0075                     ?_TxDeviceDisable:	
  6927                           ; 1 bytes @ 0x0
  6928                           
  6929     0075                     ?_default_values_register:	
  6930                           ; 1 bytes @ 0x0
  6931                           
  6932     0075                     ?_nmbs_server_poll:	
  6933                           ; 1 bytes @ 0x0
  6934                           
  6935     0075                     ?_check_error_modbus:	
  6936                           ; 1 bytes @ 0x0
  6937                           
  6938     0075                     ?_TMR0_DefaultInterruptHandler:	
  6939                           ; 1 bytes @ 0x0
  6940                           
  6941     0075                     ??_TMR0_DefaultInterruptHandler:	
  6942                           ; 1 bytes @ 0x0
  6943                           
  6944     0075                     ?_TMR0_StopTimer:	
  6945                           ; 1 bytes @ 0x0
  6946                           
  6947     0075                     ?___funcs_on_exit:	
  6948                           ; 1 bytes @ 0x0
  6949                           
  6950     0075                     ?_putch:	
  6951                           ; 1 bytes @ 0x0
  6952                           
  6953     0075                     ?_ADCC_Initialize:	
  6954                           ; 1 bytes @ 0x0
  6955                           
  6956     0075                     ?_EUSART1_Initialize:	
  6957                           ; 1 bytes @ 0x0
  6958                           
  6959     0075                     ?_EUSART1_is_tx_ready:	
  6960                           ; 1 bytes @ 0x0
  6961                           
  6962     0075                     ?_EUSART1_is_tx_done:	
  6963                           ; 1 bytes @ 0x0
  6964                           
  6965     0075                     ?_EUSART1_Read:	
  6966                           ; 1 bytes @ 0x0
  6967                           
  6968     0075                     ?_EUSART1_Write:	
  6969                           ; 1 bytes @ 0x0
  6970                           
  6971     0075                     ?_UART_ClearBuffer:	
  6972                           ; 1 bytes @ 0x0
  6973                           
  6974     0075                     ?_SYSTEM_Initialize:	
  6975                           ; 1 bytes @ 0x0
  6976                           
  6977     0075                     ?_FVR_IsOutputReady:	
  6978                           ; 1 bytes @ 0x0
  6979                           
  6980     0075                     ?_INTERRUPT_InterruptManager:	
  6981                           ; 1 bytes @ 0x0
  6982                           
  6983     0075                     ?_main:	
  6984                           ; 1 bytes @ 0x0
  6985                           
  6986     0075                     ?_TxDeviceEnable:	
  6987                           ; 1 bytes @ 0x0
  6988                           
  6989     0075                     ?_get_1:	
  6990                           ; 1 bytes @ 0x0
  6991                           
  6992     0075                     ?_msg_buf_reset:	
  6993                           ; 1 bytes @ 0x0
  6994                           
  6995     0075                     ?_msg_state_reset:	
  6996                           ; 1 bytes @ 0x0
  6997                           
  6998     0075                     ?_recv_msg_footer:	
  6999                           ; 1 bytes @ 0x0
  7000                           
  7001     0075                     ?_send_msg:	
  7002                           ; 1 bytes @ 0x0
  7003                           
  7004     0075                     ?_recv_res_header:	
  7005                           ; 1 bytes @ 0x0
  7006                           
  7007     0075                     ?_handle_read_holding_registers:	
  7008                           ; 1 bytes @ 0x0
  7009                           
  7010     0075                     ?_handle_read_input_registers:	
  7011                           ; 1 bytes @ 0x0
  7012                           
  7013     0075                     ?_handle_write_single_coil@nanomodbus$F2242:	
  7014                           ; 1 bytes @ 0x0
  7015                           
  7016     0075                     ?_handle_write_single_register@nanomodbus$F2271:	
  7017                           ; 1 bytes @ 0x0
  7018                           
  7019     0075                     ?_handle_req_fc:	
  7020                           ; 1 bytes @ 0x0
  7021                           
  7022     0075                     ?i1_UART_ClearBuffer:	
  7023                           ; 1 bytes @ 0x0
  7024                           
  7025     0075                     ??i1_UART_ClearBuffer:	
  7026                           ; 1 bytes @ 0x0
  7027                           
  7028     0075                     ?i1_TMR0_StopTimer:	
  7029                           ; 1 bytes @ 0x0
  7030                           
  7031     0075                     ??i1_TMR0_StopTimer:	
  7032                           ; 1 bytes @ 0x0
  7033                           
  7034     0075                     check_error_modbus@err:	
  7035                           ; 1 bytes @ 0x0
  7036                           
  7037     0075                     TMR0_WriteTimer@timerVal:	
  7038                           ; 1 bytes @ 0x0
  7039                           
  7040     0075                     putch@c:	
  7041                           ; 1 bytes @ 0x0
  7042                           
  7043                           
  7044                           ; 1 bytes @ 0x0
  7045     0075                     	ds	1
  7046     0076                     ??_EUSART1_RxDataHandler:
  7047                           
  7048                           ; 1 bytes @ 0x1
  7049     0076                     	ds	2
  7050     0078                     EUSART1_RxDataHandler@t:
  7051                           
  7052                           ; 2 bytes @ 0x3
  7053     0078                     	ds	2
  7054     007A                     ??_EUSART1_Receive_ISR:
  7055     007A                     ??_EUSART1_DefaultErrorHandler:	
  7056                           ; 1 bytes @ 0x5
  7057                           
  7058     007A                     ??_INTERRUPT_InterruptManager:	
  7059                           ; 1 bytes @ 0x5
  7060                           
  7061                           
  7062                           	psect	cstackBANK0
  7063     0020                     __pcstackBANK0:	
  7064                           ; 1 bytes @ 0x5
  7065                           
  7066     0020                     ?_EUSART1_SetRxInterruptHandler:
  7067     0020                     ?_EUSART1_SetFramingErrorHandler:	
  7068                           ; 1 bytes @ 0x0
  7069                           
  7070     0020                     ?_EUSART1_SetOverrunErrorHandler:	
  7071                           ; 1 bytes @ 0x0
  7072                           
  7073     0020                     ?_EUSART1_SetErrorHandler:	
  7074                           ; 1 bytes @ 0x0
  7075                           
  7076     0020                     ??_PMD_Initialize:	
  7077                           ; 1 bytes @ 0x0
  7078                           
  7079     0020                     ??_PIN_MANAGER_Initialize:	
  7080                           ; 1 bytes @ 0x0
  7081                           
  7082     0020                     ??_OSCILLATOR_Initialize:	
  7083                           ; 1 bytes @ 0x0
  7084                           
  7085     0020                     ??_FVR_Initialize:	
  7086                           ; 1 bytes @ 0x0
  7087                           
  7088     0020                     ?_DATAEE_ReadByte:	
  7089                           ; 1 bytes @ 0x0
  7090                           
  7091     0020                     ??_TxDeviceDisable:	
  7092                           ; 1 bytes @ 0x0
  7093                           
  7094     0020                     ?_handler_read_holding_registers:	
  7095                           ; 1 bytes @ 0x0
  7096                           
  7097     0020                     ?_handler_read_input_registers:	
  7098                           ; 1 bytes @ 0x0
  7099                           
  7100     0020                     ?_handle_write_single_coil:	
  7101                           ; 1 bytes @ 0x0
  7102                           
  7103     0020                     ?_handle_write_single_register:	
  7104                           ; 1 bytes @ 0x0
  7105                           
  7106     0020                     ??_check_error_modbus:	
  7107                           ; 1 bytes @ 0x0
  7108                           
  7109     0020                     ?_m_memset:	
  7110                           ; 1 bytes @ 0x0
  7111                           
  7112     0020                     ?_TMR0_SetInterruptHandler:	
  7113                           ; 1 bytes @ 0x0
  7114                           
  7115     0020                     ??_TMR0_StopTimer:	
  7116                           ; 1 bytes @ 0x0
  7117                           
  7118     0020                     ??___funcs_on_exit:	
  7119                           ; 1 bytes @ 0x0
  7120                           
  7121     0020                     ?__Exit:	
  7122                           ; 1 bytes @ 0x0
  7123                           
  7124     0020                     ??_putch:	
  7125                           ; 1 bytes @ 0x0
  7126                           
  7127     0020                     ??_ADCC_Initialize:	
  7128                           ; 1 bytes @ 0x0
  7129                           
  7130     0020                     ?_setBaudRateEUSART1:	
  7131                           ; 1 bytes @ 0x0
  7132                           
  7133     0020                     ??_EUSART1_is_tx_ready:	
  7134                           ; 1 bytes @ 0x0
  7135                           
  7136     0020                     ??_EUSART1_is_tx_done:	
  7137                           ; 1 bytes @ 0x0
  7138                           
  7139     0020                     ??_EUSART1_Read:	
  7140                           ; 1 bytes @ 0x0
  7141                           
  7142     0020                     ??_EUSART1_Write:	
  7143                           ; 1 bytes @ 0x0
  7144                           
  7145     0020                     ??_UART_ClearBuffer:	
  7146                           ; 1 bytes @ 0x0
  7147                           
  7148     0020                     ??_FVR_IsOutputReady:	
  7149                           ; 1 bytes @ 0x0
  7150                           
  7151     0020                     ?_DATAEE_WriteByte:	
  7152                           ; 1 bytes @ 0x0
  7153                           
  7154     0020                     ??_TxDeviceEnable:	
  7155                           ; 1 bytes @ 0x0
  7156                           
  7157     0020                     ??_get_1:	
  7158                           ; 1 bytes @ 0x0
  7159                           
  7160     0020                     ?_put_1:	
  7161                           ; 1 bytes @ 0x0
  7162                           
  7163     0020                     ?_put_2:	
  7164                           ; 1 bytes @ 0x0
  7165                           
  7166     0020                     ??_msg_buf_reset:	
  7167                           ; 1 bytes @ 0x0
  7168                           
  7169     0020                     ?_fputc:	
  7170                           ; 1 bytes @ 0x0
  7171                           
  7172     0020                     ?_ADCC_GetSingleConversion:	
  7173                           ; 2 bytes @ 0x0
  7174                           
  7175     0020                     ?_get_2:	
  7176                           ; 2 bytes @ 0x0
  7177                           
  7178     0020                     ?_nmbs_crc_calc:	
  7179                           ; 2 bytes @ 0x0
  7180                           
  7181     0020                     _EUSART1_is_tx_ready$619:	
  7182                           ; 2 bytes @ 0x0
  7183                           
  7184     0020                     EUSART1_Read@readValue:	
  7185                           ; 1 bytes @ 0x0
  7186                           
  7187     0020                     EUSART1_Write@txData:	
  7188                           ; 1 bytes @ 0x0
  7189                           
  7190     0020                     put_1@data:	
  7191                           ; 1 bytes @ 0x0
  7192                           
  7193     0020                     msg_buf_reset@nmbs:	
  7194                           ; 1 bytes @ 0x0
  7195                           
  7196     0020                     EUSART1_SetFramingErrorHandler@interruptHandler:	
  7197                           ; 1 bytes @ 0x0
  7198                           
  7199     0020                     EUSART1_SetOverrunErrorHandler@interruptHandler:	
  7200                           ; 2 bytes @ 0x0
  7201                           
  7202     0020                     EUSART1_SetErrorHandler@interruptHandler:	
  7203                           ; 2 bytes @ 0x0
  7204                           
  7205     0020                     EUSART1_SetRxInterruptHandler@interruptHandler:	
  7206                           ; 2 bytes @ 0x0
  7207                           
  7208     0020                     DATAEE_WriteByte@bAdd:	
  7209                           ; 2 bytes @ 0x0
  7210                           
  7211     0020                     DATAEE_ReadByte@bAdd:	
  7212                           ; 2 bytes @ 0x0
  7213                           
  7214     0020                     handle_write_single_coil@address:	
  7215                           ; 2 bytes @ 0x0
  7216                           
  7217     0020                     handler_read_input_registers@address:	
  7218                           ; 2 bytes @ 0x0
  7219                           
  7220     0020                     handler_read_holding_registers@address:	
  7221                           ; 2 bytes @ 0x0
  7222                           
  7223     0020                     handle_write_single_register@address:	
  7224                           ; 2 bytes @ 0x0
  7225                           
  7226     0020                     put_2@data:	
  7227                           ; 2 bytes @ 0x0
  7228                           
  7229     0020                     m_memset@s:	
  7230                           ; 2 bytes @ 0x0
  7231                           
  7232     0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  7233                           ; 2 bytes @ 0x0
  7234                           
  7235     0020                     __Exit@ec:	
  7236                           ; 2 bytes @ 0x0
  7237                           
  7238     0020                     fputc@c:	
  7239                           ; 2 bytes @ 0x0
  7240                           
  7241     0020                     setBaudRateEUSART1@baudRate:	
  7242                           ; 2 bytes @ 0x0
  7243                           
  7244     0020                     nmbs_crc_calc@length:	
  7245                           ; 4 bytes @ 0x0
  7246                           
  7247                           
  7248                           ; 4 bytes @ 0x0
  7249     0020                     	ds	1
  7250     0021                     ??_put_1:
  7251     0021                     ??_msg_state_reset:	
  7252                           ; 1 bytes @ 0x1
  7253                           
  7254     0021                     ?_read_serial:	
  7255                           ; 1 bytes @ 0x1
  7256                           
  7257     0021                     ?_write_serial:	
  7258                           ; 4 bytes @ 0x1
  7259                           
  7260     0021                     read_serial@buf:	
  7261                           ; 4 bytes @ 0x1
  7262                           
  7263     0021                     write_serial@buf:	
  7264                           ; 1 bytes @ 0x1
  7265                           
  7266     0021                     get_1@result:	
  7267                           ; 1 bytes @ 0x1
  7268                           
  7269     0021                     msg_state_reset@nmbs:	
  7270                           ; 1 bytes @ 0x1
  7271                           
  7272                           
  7273                           ; 1 bytes @ 0x1
  7274     0021                     	ds	1
  7275     0022                     ??_EUSART1_SetRxInterruptHandler:
  7276     0022                     ??_EUSART1_SetFramingErrorHandler:	
  7277                           ; 1 bytes @ 0x2
  7278                           
  7279     0022                     ??_EUSART1_SetOverrunErrorHandler:	
  7280                           ; 1 bytes @ 0x2
  7281                           
  7282     0022                     ??_EUSART1_SetErrorHandler:	
  7283                           ; 1 bytes @ 0x2
  7284                           
  7285     0022                     ??_TMR0_Initialize:	
  7286                           ; 1 bytes @ 0x2
  7287                           
  7288     0022                     ??_DATAEE_ReadByte:	
  7289                           ; 1 bytes @ 0x2
  7290                           
  7291     0022                     ?_exit:	
  7292                           ; 1 bytes @ 0x2
  7293                           
  7294     0022                     ??_TMR0_SetInterruptHandler:	
  7295                           ; 1 bytes @ 0x2
  7296                           
  7297     0022                     ??__Exit:	
  7298                           ; 1 bytes @ 0x2
  7299                           
  7300     0022                     ??_ADCC_GetSingleConversion:	
  7301                           ; 1 bytes @ 0x2
  7302                           
  7303     0022                     ??_EUSART1_Initialize:	
  7304                           ; 1 bytes @ 0x2
  7305                           
  7306     0022                     ??_SYSTEM_Initialize:	
  7307                           ; 1 bytes @ 0x2
  7308                           
  7309     0022                     ??_get_2:	
  7310                           ; 1 bytes @ 0x2
  7311                           
  7312     0022                     ??_put_2:	
  7313                           ; 1 bytes @ 0x2
  7314                           
  7315     0022                     ?_DATAEE_ReadWord:	
  7316                           ; 1 bytes @ 0x2
  7317                           
  7318     0022                     ADCC_GetSingleConversion@channel:	
  7319                           ; 2 bytes @ 0x2
  7320                           
  7321     0022                     DATAEE_WriteByte@bData:	
  7322                           ; 1 bytes @ 0x2
  7323                           
  7324     0022                     handle_write_single_coil@coils:	
  7325                           ; 1 bytes @ 0x2
  7326                           
  7327     0022                     get_1@nmbs:	
  7328                           ; 1 bytes @ 0x2
  7329                           
  7330     0022                     put_1@nmbs:	
  7331                           ; 1 bytes @ 0x2
  7332                           
  7333     0022                     DATAEE_ReadWord@bAdd:	
  7334                           ; 1 bytes @ 0x2
  7335                           
  7336     0022                     read_serial@count:	
  7337                           ; 2 bytes @ 0x2
  7338                           
  7339     0022                     write_serial@count:	
  7340                           ; 2 bytes @ 0x2
  7341                           
  7342     0022                     handler_read_input_registers@quantity:	
  7343                           ; 2 bytes @ 0x2
  7344                           
  7345     0022                     handler_read_holding_registers@quantity:	
  7346                           ; 2 bytes @ 0x2
  7347                           
  7348     0022                     handle_write_single_register@registers:	
  7349                           ; 2 bytes @ 0x2
  7350                           
  7351     0022                     m_memset@c:	
  7352                           ; 2 bytes @ 0x2
  7353                           
  7354     0022                     exit@code:	
  7355                           ; 2 bytes @ 0x2
  7356                           
  7357     0022                     fputc@fp:	
  7358                           ; 2 bytes @ 0x2
  7359                           
  7360                           
  7361                           ; 2 bytes @ 0x2
  7362     0022                     	ds	1
  7363     0023                     ??_DATAEE_WriteByte:
  7364     0023                     ?_getADCData:	
  7365                           ; 1 bytes @ 0x3
  7366                           
  7367     0023                     DATAEE_WriteByte@GIEBitValue:	
  7368                           ; 2 bytes @ 0x3
  7369                           
  7370     0023                     getADCData@sensorSelection:	
  7371                           ; 1 bytes @ 0x3
  7372                           
  7373     0023                     handle_write_single_coil@unit_id:	
  7374                           ; 1 bytes @ 0x3
  7375                           
  7376     0023                     put_2@nmbs:	
  7377                           ; 1 bytes @ 0x3
  7378                           
  7379                           
  7380                           ; 1 bytes @ 0x3
  7381     0023                     	ds	1
  7382     0024                     ??_exit:
  7383     0024                     ??_fputc:	
  7384                           ; 1 bytes @ 0x4
  7385                           
  7386     0024                     ??_setBaudRateEUSART1:	
  7387                           ; 1 bytes @ 0x4
  7388                           
  7389     0024                     ?_DATAEE_WriteWord:	
  7390                           ; 1 bytes @ 0x4
  7391                           
  7392     0024                     ??_DATAEE_ReadWord:	
  7393                           ; 1 bytes @ 0x4
  7394                           
  7395     0024                     ??_nmbs_crc_calc:	
  7396                           ; 1 bytes @ 0x4
  7397                           
  7398     0024                     ?_put_msg_header:	
  7399                           ; 1 bytes @ 0x4
  7400                           
  7401     0024                     handle_write_single_coil@arg:	
  7402                           ; 1 bytes @ 0x4
  7403                           
  7404     0024                     handler_read_input_registers@registers_out:	
  7405                           ; 1 bytes @ 0x4
  7406                           
  7407     0024                     handler_read_holding_registers@registers_out:	
  7408                           ; 1 bytes @ 0x4
  7409                           
  7410     0024                     handle_write_single_register@unit_id:	
  7411                           ; 1 bytes @ 0x4
  7412                           
  7413     0024                     DATAEE_WriteWord@bAdd:	
  7414                           ; 1 bytes @ 0x4
  7415                           
  7416     0024                     m_memset@len:	
  7417                           ; 2 bytes @ 0x4
  7418                           
  7419     0024                     put_msg_header@data_length:	
  7420                           ; 2 bytes @ 0x4
  7421                           
  7422     0024                     read_serial@byte_timeout_ms:	
  7423                           ; 2 bytes @ 0x4
  7424                           
  7425     0024                     write_serial@byte_timeout_ms:	
  7426                           ; 4 bytes @ 0x4
  7427                           
  7428                           
  7429                           ; 4 bytes @ 0x4
  7430     0024                     	ds	1
  7431     0025                     ??_getADCData:
  7432     0025                     ??_handle_write_single_coil:	
  7433                           ; 1 bytes @ 0x5
  7434                           
  7435     0025                     handler_read_input_registers@unit_id:	
  7436                           ; 1 bytes @ 0x5
  7437                           
  7438     0025                     handler_read_holding_registers@unit_id:	
  7439                           ; 1 bytes @ 0x5
  7440                           
  7441     0025                     handle_write_single_register@arg:	
  7442                           ; 1 bytes @ 0x5
  7443                           
  7444     0025                     getADCData@result:	
  7445                           ; 1 bytes @ 0x5
  7446                           
  7447                           
  7448                           ; 2 bytes @ 0x5
  7449     0025                     	ds	1
  7450     0026                     ??_handle_write_single_register:
  7451     0026                     ??_m_memset:	
  7452                           ; 1 bytes @ 0x6
  7453                           
  7454     0026                     ??_put_msg_header:	
  7455                           ; 1 bytes @ 0x6
  7456                           
  7457     0026                     handler_read_input_registers@arg:	
  7458                           ; 1 bytes @ 0x6
  7459                           
  7460     0026                     handler_read_holding_registers@arg:	
  7461                           ; 1 bytes @ 0x6
  7462                           
  7463     0026                     put_msg_header@nmbs:	
  7464                           ; 1 bytes @ 0x6
  7465                           
  7466     0026                     DATAEE_WriteWord@bData:	
  7467                           ; 1 bytes @ 0x6
  7468                           
  7469     0026                     m_memset@p:	
  7470                           ; 2 bytes @ 0x6
  7471                           
  7472                           
  7473                           ; 2 bytes @ 0x6
  7474     0026                     	ds	1
  7475     0027                     ??_handler_read_holding_registers:
  7476     0027                     ??_handler_read_input_registers:	
  7477                           ; 1 bytes @ 0x7
  7478                           
  7479     0027                     ?_put_res_header:	
  7480                           ; 1 bytes @ 0x7
  7481                           
  7482     0027                     getADCData@channel:	
  7483                           ; 1 bytes @ 0x7
  7484                           
  7485     0027                     handle_write_single_register@server_registers:	
  7486                           ; 1 bytes @ 0x7
  7487                           
  7488     0027                     put_res_header@data_length:	
  7489                           ; 1 bytes @ 0x7
  7490                           
  7491                           
  7492                           ; 2 bytes @ 0x7
  7493     0027                     	ds	1
  7494     0028                     ??_default_values_register:
  7495     0028                     ?_is_a_new_value:	
  7496                           ; 1 bytes @ 0x8
  7497                           
  7498     0028                     ??_DATAEE_WriteWord:	
  7499                           ; 1 bytes @ 0x8
  7500                           
  7501     0028                     ?_nmbs_create:	
  7502                           ; 1 bytes @ 0x8
  7503                           
  7504     0028                     is_a_new_value@actual_regs:	
  7505                           ; 1 bytes @ 0x8
  7506                           
  7507     0028                     read_serial@arg:	
  7508                           ; 1 bytes @ 0x8
  7509                           
  7510     0028                     write_serial@arg:	
  7511                           ; 1 bytes @ 0x8
  7512                           
  7513     0028                     default_values_register@registers:	
  7514                           ; 1 bytes @ 0x8
  7515                           
  7516     0028                     nmbs_create@platform_conf:	
  7517                           ; 1 bytes @ 0x8
  7518                           
  7519     0028                     nmbs_crc_calc@data:	
  7520                           ; 1 bytes @ 0x8
  7521                           
  7522                           
  7523                           ; 1 bytes @ 0x8
  7524     0028                     	ds	1
  7525     0029                     ??_read_serial:
  7526     0029                     ??_write_serial:	
  7527                           ; 1 bytes @ 0x9
  7528                           
  7529     0029                     ??_nmbs_create:	
  7530                           ; 1 bytes @ 0x9
  7531                           
  7532     0029                     ??_put_res_header:	
  7533                           ; 1 bytes @ 0x9
  7534                           
  7535     0029                     ?_vfpfcnvrt:	
  7536                           ; 1 bytes @ 0x9
  7537                           
  7538     0029                     DATAEE_ReadWord@low_byte:	
  7539                           ; 1 bytes @ 0x9
  7540                           
  7541     0029                     is_a_new_value@nmbs:	
  7542                           ; 1 bytes @ 0x9
  7543                           
  7544     0029                     put_res_header@nmbs:	
  7545                           ; 1 bytes @ 0x9
  7546                           
  7547     0029                     get_2@result:	
  7548                           ; 1 bytes @ 0x9
  7549                           
  7550     0029                     vfpfcnvrt@fp:	
  7551                           ; 2 bytes @ 0x9
  7552                           
  7553     0029                     nmbs_crc_calc@i:	
  7554                           ; 2 bytes @ 0x9
  7555                           
  7556                           
  7557                           ; 4 bytes @ 0x9
  7558     0029                     	ds	1
  7559     002A                     ??_is_a_new_value:
  7560     002A                     DATAEE_ReadWord@high_byte:	
  7561                           ; 1 bytes @ 0xA
  7562                           
  7563     002A                     handler_read_input_registers@server_registers:	
  7564                           ; 1 bytes @ 0xA
  7565                           
  7566     002A                     handler_read_holding_registers@server_registers:	
  7567                           ; 1 bytes @ 0xA
  7568                           
  7569     002A                     write_serial@number_of_byte_send:	
  7570                           ; 1 bytes @ 0xA
  7571                           
  7572                           
  7573                           ; 4 bytes @ 0xA
  7574     002A                     	ds	1
  7575     002B                     get_2@nmbs:
  7576     002B                     nmbs_create@nmbs:	
  7577                           ; 1 bytes @ 0xB
  7578                           
  7579     002B                     vfpfcnvrt@fmt:	
  7580                           ; 1 bytes @ 0xB
  7581                           
  7582     002B                     _handle_write_single_coil$1436:	
  7583                           ; 1 bytes @ 0xB
  7584                           
  7585     002B                     handler_read_input_registers@i:	
  7586                           ; 2 bytes @ 0xB
  7587                           
  7588     002B                     handler_read_holding_registers@i:	
  7589                           ; 2 bytes @ 0xB
  7590                           
  7591                           
  7592                           ; 2 bytes @ 0xB
  7593     002B                     	ds	1
  7594     002C                     ?_nmbs_server_create:
  7595     002C                     nmbs_server_create@address_rtu:	
  7596                           ; 1 bytes @ 0xC
  7597                           
  7598     002C                     vfpfcnvrt@ap:	
  7599                           ; 1 bytes @ 0xC
  7600                           
  7601                           
  7602                           ; 1 bytes @ 0xC
  7603     002C                     	ds	1
  7604     002D                     ??_vfpfcnvrt:
  7605     002D                     read_serial@c:	
  7606                           ; 1 bytes @ 0xD
  7607                           
  7608     002D                     handle_write_single_coil@server_coils:	
  7609                           ; 1 bytes @ 0xD
  7610                           
  7611     002D                     nmbs_server_create@platform_conf:	
  7612                           ; 1 bytes @ 0xD
  7613                           
  7614     002D                     nmbs_crc_calc@j:	
  7615                           ; 1 bytes @ 0xD
  7616                           
  7617                           
  7618                           ; 2 bytes @ 0xD
  7619     002D                     	ds	1
  7620     002E                     is_a_new_value@registers:
  7621     002E                     nmbs_server_create@callbacks:	
  7622                           ; 1 bytes @ 0xE
  7623                           
  7624     002E                     write_serial@i:	
  7625                           ; 1 bytes @ 0xE
  7626                           
  7627     002E                     read_serial@charCount:	
  7628                           ; 2 bytes @ 0xE
  7629                           
  7630                           
  7631                           ; 4 bytes @ 0xE
  7632     002E                     	ds	1
  7633     002F                     ??_nmbs_server_create:
  7634     002F                     nmbs_crc_calc@crc:	
  7635                           ; 1 bytes @ 0xF
  7636                           
  7637                           
  7638                           ; 2 bytes @ 0xF
  7639     002F                     	ds	1
  7640     0030                     ?_send:
  7641     0030                     nmbs_server_create@ret:	
  7642                           ; 1 bytes @ 0x10
  7643                           
  7644     0030                     send@count:	
  7645                           ; 1 bytes @ 0x10
  7646                           
  7647                           
  7648                           ; 2 bytes @ 0x10
  7649     0030                     	ds	1
  7650     0031                     ?_vfprintf:
  7651     0031                     nmbs_server_create@nmbs:	
  7652                           ; 2 bytes @ 0x11
  7653                           
  7654     0031                     vfprintf@fp:	
  7655                           ; 1 bytes @ 0x11
  7656                           
  7657                           
  7658                           ; 2 bytes @ 0x11
  7659     0031                     	ds	1
  7660     0032                     ?_recv:
  7661     0032                     ??_send:	
  7662                           ; 1 bytes @ 0x12
  7663                           
  7664     0032                     recv@count:	
  7665                           ; 1 bytes @ 0x12
  7666                           
  7667                           
  7668                           ; 2 bytes @ 0x12
  7669     0032                     	ds	1
  7670     0033                     vfprintf@fmt:
  7671                           
  7672                           ; 2 bytes @ 0x13
  7673     0033                     	ds	1
  7674     0034                     ??_recv:
  7675     0034                     recv@ret:	
  7676                           ; 1 bytes @ 0x14
  7677                           
  7678                           
  7679                           ; 1 bytes @ 0x14
  7680     0034                     	ds	1
  7681     0035                     recv@nmbs:
  7682     0035                     vfprintf@ap:	
  7683                           ; 1 bytes @ 0x15
  7684                           
  7685                           
  7686                           ; 1 bytes @ 0x15
  7687     0035                     	ds	1
  7688     0036                     ??_vfprintf:
  7689     0036                     ??_recv_msg_footer:	
  7690                           ; 1 bytes @ 0x16
  7691                           
  7692     0036                     ?_recv_msg_header:	
  7693                           ; 1 bytes @ 0x16
  7694                           
  7695     0036                     recv_msg_header@first_byte_received:	
  7696                           ; 1 bytes @ 0x16
  7697                           
  7698                           
  7699                           ; 1 bytes @ 0x16
  7700     0036                     	ds	1
  7701     0037                     ??_recv_msg_header:
  7702     0037                     vfprintf@cfmt:	
  7703                           ; 1 bytes @ 0x17
  7704                           
  7705     0037                     send@ret:	
  7706                           ; 2 bytes @ 0x17
  7707                           
  7708                           
  7709                           ; 4 bytes @ 0x17
  7710     0037                     	ds	1
  7711     0038                     recv_msg_header@err:
  7712     0038                     recv_msg_footer@crc:	
  7713                           ; 1 bytes @ 0x18
  7714                           
  7715                           
  7716                           ; 2 bytes @ 0x18
  7717     0038                     	ds	1
  7718     0039                     ?_printf:
  7719     0039                     recv_msg_header@nmbs:	
  7720                           ; 2 bytes @ 0x19
  7721                           
  7722     0039                     printf@fmt:	
  7723                           ; 1 bytes @ 0x19
  7724                           
  7725                           
  7726                           ; 2 bytes @ 0x19
  7727     0039                     	ds	1
  7728     003A                     ?_recv_req_header:
  7729     003A                     recv_req_header@first_byte_received:	
  7730                           ; 1 bytes @ 0x1A
  7731                           
  7732     003A                     recv_msg_footer@recv_crc:	
  7733                           ; 1 bytes @ 0x1A
  7734                           
  7735                           
  7736                           ; 2 bytes @ 0x1A
  7737     003A                     	ds	1
  7738     003B                     ??_printf:
  7739     003B                     ??_recv_req_header:	
  7740                           ; 1 bytes @ 0x1B
  7741                           
  7742     003B                     send@nmbs:	
  7743                           ; 1 bytes @ 0x1B
  7744                           
  7745     003B                     recv_req_header@err:	
  7746                           ; 1 bytes @ 0x1B
  7747                           
  7748     003B                     printf@ap:	
  7749                           ; 1 bytes @ 0x1B
  7750                           
  7751                           
  7752                           ; 1 bytes @ 0x1B
  7753     003B                     	ds	1
  7754     003C                     ??_send_msg:
  7755     003C                     recv_msg_footer@err:	
  7756                           ; 1 bytes @ 0x1C
  7757                           
  7758     003C                     recv_req_header@nmbs:	
  7759                           ; 1 bytes @ 0x1C
  7760                           
  7761                           
  7762                           ; 1 bytes @ 0x1C
  7763     003C                     	ds	1
  7764     003D                     recv_msg_footer@nmbs:
  7765                           
  7766                           ; 1 bytes @ 0x1D
  7767     003D                     	ds	1
  7768     003E                     ??_recv_res_header:
  7769     003E                     send_msg@crc:	
  7770                           ; 1 bytes @ 0x1E
  7771                           
  7772                           
  7773                           ; 2 bytes @ 0x1E
  7774     003E                     	ds	2
  7775     0040                     send_msg@err:
  7776     0040                     recv_res_header@req_transaction_id:	
  7777                           ; 1 bytes @ 0x20
  7778                           
  7779                           
  7780                           ; 2 bytes @ 0x20
  7781     0040                     	ds	1
  7782     0041                     send_msg@nmbs:
  7783                           
  7784                           ; 1 bytes @ 0x21
  7785     0041                     	ds	1
  7786     0042                     ?_send_exception_msg:
  7787     0042                     send_exception_msg@exception:	
  7788                           ; 1 bytes @ 0x22
  7789                           
  7790     0042                     recv_res_header@req_unit_id:	
  7791                           ; 1 bytes @ 0x22
  7792                           
  7793                           
  7794                           ; 1 bytes @ 0x22
  7795     0042                     	ds	1
  7796     0043                     ??_send_exception_msg:
  7797     0043                     recv_res_header@first_byte_received:	
  7798                           ; 1 bytes @ 0x23
  7799                           
  7800                           
  7801                           ; 1 bytes @ 0x23
  7802     0043                     	ds	1
  7803     0044                     send_exception_msg@nmbs:
  7804     0044                     recv_res_header@req_fc:	
  7805                           ; 1 bytes @ 0x24
  7806                           
  7807                           
  7808                           ; 1 bytes @ 0x24
  7809     0044                     	ds	1
  7810     0045                     recv_res_header@exception:
  7811                           
  7812                           ; 1 bytes @ 0x25
  7813     0045                     	ds	1
  7814     0046                     recv_res_header@err:
  7815                           
  7816                           ; 1 bytes @ 0x26
  7817     0046                     	ds	1
  7818     0047                     recv_res_header@nmbs:
  7819                           
  7820                           ; 1 bytes @ 0x27
  7821     0047                     	ds	1
  7822     0048                     ?_recv_read_registers_res:
  7823     0048                     ?_recv_write_single_coil_res:	
  7824                           ; 1 bytes @ 0x28
  7825                           
  7826     0048                     ?_recv_write_single_register_res:	
  7827                           ; 1 bytes @ 0x28
  7828                           
  7829     0048                     recv_read_registers_res@quantity:	
  7830                           ; 1 bytes @ 0x28
  7831                           
  7832     0048                     recv_write_single_coil_res@address:	
  7833                           ; 2 bytes @ 0x28
  7834                           
  7835     0048                     recv_write_single_register_res@address:	
  7836                           ; 2 bytes @ 0x28
  7837                           
  7838                           
  7839                           ; 2 bytes @ 0x28
  7840     0048                     	ds	2
  7841     004A                     recv_read_registers_res@registers:
  7842     004A                     recv_write_single_coil_res@value_req:	
  7843                           ; 2 bytes @ 0x2A
  7844                           
  7845     004A                     recv_write_single_register_res@value_req:	
  7846                           ; 2 bytes @ 0x2A
  7847                           
  7848                           
  7849                           ; 2 bytes @ 0x2A
  7850     004A                     	ds	2
  7851     004C                     ??_recv_read_registers_res:
  7852     004C                     ??_recv_write_single_coil_res:	
  7853                           ; 1 bytes @ 0x2C
  7854                           
  7855     004C                     ??_recv_write_single_register_res:	
  7856                           ; 1 bytes @ 0x2C
  7857                           
  7858     004C                     recv_write_single_register_res@err:	
  7859                           ; 1 bytes @ 0x2C
  7860                           
  7861     004C                     recv_write_single_coil_res@address_res:	
  7862                           ; 1 bytes @ 0x2C
  7863                           
  7864                           
  7865                           ; 2 bytes @ 0x2C
  7866     004C                     	ds	1
  7867     004D                     recv_write_single_register_res@nmbs:
  7868                           
  7869                           ; 1 bytes @ 0x2D
  7870     004D                     	ds	1
  7871     004E                     ??_handle_write_single_register@nanomodbus$F2271:
  7872     004E                     recv_write_single_coil_res@value_res:	
  7873                           ; 1 bytes @ 0x2E
  7874                           
  7875                           
  7876                           ; 2 bytes @ 0x2E
  7877     004E                     	ds	2
  7878     0050                     recv_write_single_coil_res@nmbs:
  7879     0050                     handle_write_single_register@nanomodbus$F2271@err:	
  7880                           ; 1 bytes @ 0x30
  7881                           
  7882     0050                     recv_read_registers_res@reg:	
  7883                           ; 1 bytes @ 0x30
  7884                           
  7885                           
  7886                           ; 2 bytes @ 0x30
  7887     0050                     	ds	1
  7888     0051                     recv_write_single_coil_res@err:
  7889     0051                     handle_write_single_register@nanomodbus$F2271@address:	
  7890                           ; 1 bytes @ 0x31
  7891                           
  7892                           
  7893                           ; 2 bytes @ 0x31
  7894     0051                     	ds	1
  7895     0052                     ??_handle_write_single_coil@nanomodbus$F2242:
  7896     0052                     recv_read_registers_res@i:	
  7897                           ; 1 bytes @ 0x32
  7898                           
  7899                           
  7900                           ; 2 bytes @ 0x32
  7901     0052                     	ds	1
  7902     0053                     handle_write_single_register@nanomodbus$F2271@value:
  7903                           
  7904                           ; 2 bytes @ 0x33
  7905     0053                     	ds	1
  7906     0054                     recv_read_registers_res@registers_bytes:
  7907     0054                     handle_write_single_coil@nanomodbus$F2242@address:	
  7908                           ; 1 bytes @ 0x34
  7909                           
  7910                           
  7911                           ; 2 bytes @ 0x34
  7912     0054                     	ds	1
  7913     0055                     recv_read_registers_res@nmbs:
  7914     0055                     handle_write_single_register@nanomodbus$F2271@nmbs:	
  7915                           ; 1 bytes @ 0x35
  7916                           
  7917                           
  7918                           ; 1 bytes @ 0x35
  7919     0055                     	ds	1
  7920     0056                     recv_read_registers_res@err:
  7921     0056                     handle_write_single_coil@nanomodbus$F2242@value:	
  7922                           ; 1 bytes @ 0x36
  7923                           
  7924                           
  7925                           ; 2 bytes @ 0x36
  7926     0056                     	ds	1
  7927     0057                     ?_handle_read_registers:
  7928     0057                     handle_read_registers@callback:	
  7929                           ; 1 bytes @ 0x37
  7930                           
  7931                           
  7932                           ; 2 bytes @ 0x37
  7933     0057                     	ds	1
  7934     0058                     handle_write_single_coil@nanomodbus$F2242@err:
  7935                           
  7936                           ; 1 bytes @ 0x38
  7937     0058                     	ds	1
  7938     0059                     ??_handle_read_registers:
  7939     0059                     handle_write_single_coil@nanomodbus$F2242@nmbs:	
  7940                           ; 1 bytes @ 0x39
  7941                           
  7942                           
  7943                           ; 1 bytes @ 0x39
  7944     0059                     	ds	8
  7945     0061                     ??_handle_read_holding_registers:
  7946     0061                     ??_handle_read_input_registers:	
  7947                           ; 1 bytes @ 0x41
  7948                           
  7949     0061                     handle_read_holding_registers@nmbs:	
  7950                           ; 1 bytes @ 0x41
  7951                           
  7952     0061                     handle_read_input_registers@nmbs:	
  7953                           ; 1 bytes @ 0x41
  7954                           
  7955                           
  7956                           ; 1 bytes @ 0x41
  7957     0061                     	ds	1
  7958     0062                     ??_handle_req_fc:
  7959                           
  7960                           ; 1 bytes @ 0x42
  7961     0062                     	ds	2
  7962     0064                     handle_req_fc@err:
  7963                           
  7964                           ; 1 bytes @ 0x44
  7965     0064                     	ds	1
  7966     0065                     handle_req_fc@nmbs:
  7967                           
  7968                           ; 1 bytes @ 0x45
  7969     0065                     	ds	1
  7970     0066                     ??_nmbs_server_poll:
  7971     0066                     nmbs_server_poll@first_byte_received:	
  7972                           ; 1 bytes @ 0x46
  7973                           
  7974                           
  7975                           ; 1 bytes @ 0x46
  7976     0066                     	ds	1
  7977     0067                     nmbs_server_poll@nmbs:
  7978                           
  7979                           ; 1 bytes @ 0x47
  7980     0067                     	ds	1
  7981     0068                     nmbs_server_poll@err:
  7982                           
  7983                           ; 1 bytes @ 0x48
  7984     0068                     	ds	1
  7985     0069                     ??_main:
  7986     0069                     main@is_in_memory:	
  7987                           ; 1 bytes @ 0x49
  7988                           
  7989                           
  7990                           ; 1 bytes @ 0x49
  7991     0069                     	ds	1
  7992     006A                     main@err:
  7993                           
  7994                           ; 1 bytes @ 0x4A
  7995     006A                     	ds	1
  7996                           
  7997                           	psect	maintext
  7998     0178                     __pmaintext:	
  7999 ;;
  8000 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  8001 ;;
  8002 ;; *************** function _main *****************
  8003 ;; Defined at:
  8004 ;;		line 64 in file "main.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;  nmbs           59    0[BANK2 ] struct nmbs_t
  8009 ;;  registers      11   38[BANK1 ] struct .
  8010 ;;  callbacks       9   23[BANK1 ] struct nmbs_callbacks
  8011 ;;  platform_con    6   32[BANK1 ] struct nmbs_platform_con
  8012 ;;  actual_regs     4   19[BANK1 ] struct .
  8013 ;;  err             1   74[BANK0 ] enum E10517
  8014 ;;  is_in_memory    1   73[BANK0 ] unsigned char 
  8015 ;; Return value:  Size  Location     Type
  8016 ;;                  1    wreg      void 
  8017 ;; Registers used:
  8018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8019 ;; Tracked objects:
  8020 ;;		On entry : B3F/0
  8021 ;;		On exit  : 3F/0
  8022 ;;		Unchanged: 0/0
  8023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8024 ;;      Params:         0       0       0       0       0       0       0       0
  8025 ;;      Locals:         0       2      30      59       0       0       0       0
  8026 ;;      Temps:          0       0       0       0       0       0       0       0
  8027 ;;      Totals:         0       2      30      59       0       0       0       0
  8028 ;;Total ram usage:       91 bytes
  8029 ;; Hardware stack levels required when called: 15
  8030 ;; This function calls:
  8031 ;;		_DATAEE_ReadByte
  8032 ;;		_DATAEE_ReadWord
  8033 ;;		_DATAEE_WriteWord
  8034 ;;		_FVR_IsOutputReady
  8035 ;;		_SYSTEM_Initialize
  8036 ;;		_TxDeviceDisable
  8037 ;;		_UART_ClearBuffer
  8038 ;;		_check_error_modbus
  8039 ;;		_default_values_register
  8040 ;;		_exit
  8041 ;;		_getADCData
  8042 ;;		_is_a_new_value
  8043 ;;		_m_memset
  8044 ;;		_nmbs_server_create
  8045 ;;		_nmbs_server_poll
  8046 ;;		_printf
  8047 ;;		_setBaudRateEUSART1
  8048 ;; This function is called by:
  8049 ;;		Startup code after reset
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053     0178                     _main:	
  8054                           ;psect for function _main
  8055                           
  8056                           
  8057                           ;main.c: 68:     SYSTEM_Initialize();
  8058                           
  8059                           ;incstack = 0
  8060                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8061     0178  3189  21E8  3181   	fcall	_SYSTEM_Initialize
  8062                           
  8063                           ;main.c: 69:     TxDeviceDisable();
  8064     017B  3188  209B  3181   	fcall	_TxDeviceDisable
  8065                           
  8066                           ;main.c: 70:     (INTCONbits.GIE = 1);
  8067     017E  178B               	bsf	11,7	;volatile
  8068                           
  8069                           ;main.c: 71:     (INTCONbits.PEIE = 1);
  8070     017F  170B               	bsf	11,6	;volatile
  8071     0180                     l5802:	
  8072                           ;main.c: 74:     while(!FVR_IsOutputReady());
  8073                           
  8074     0180  3188  20B7  3181   	fcall	_FVR_IsOutputReady
  8075     0183  3A00               	xorlw	0
  8076     0184  1903               	skipnz
  8077     0185  2980               	goto	l5802
  8078                           
  8079                           ;main.c: 78:     mod_bus_registers registers;;main.c: 79:     default_values_register(&r
      +                          egisters);
  8080     0186  30C6               	movlw	(low (main@registers| 0))& (0+255)
  8081     0187  318D  25A6  3181   	fcall	_default_values_register
  8082                           
  8083                           ;main.c: 80:     uint8_t is_in_memory = DATAEE_ReadByte(0x7001);
  8084     018A  3001               	movlw	1
  8085     018B  00A0               	movwf	DATAEE_ReadByte@bAdd
  8086     018C  3070               	movlw	112
  8087     018D  00A1               	movwf	DATAEE_ReadByte@bAdd+1
  8088     018E  3189  2176  3181   	fcall	_DATAEE_ReadByte
  8089     0191  0140               	movlb	0	; select bank0
  8090     0192  00E9               	movwf	main@is_in_memory
  8091                           
  8092                           ;main.c: 83:     if (is_in_memory == 0x00)
  8093     0193  0869               	movf	main@is_in_memory,w
  8094     0194  1D03               	btfss	3,2
  8095     0195  29B4               	goto	l5812
  8096                           
  8097                           ;main.c: 84:     {;main.c: 85:         registers.server_holding_register.addr_slave = DA
      +                          TAEE_ReadWord(0x7002);
  8098     0196  3002               	movlw	2
  8099     0197  00A2               	movwf	DATAEE_ReadWord@bAdd
  8100     0198  3070               	movlw	112
  8101     0199  00A3               	movwf	DATAEE_ReadWord@bAdd+1
  8102     019A  318B  2328  3181   	fcall	_DATAEE_ReadWord
  8103     019D  0823               	movf	?_DATAEE_ReadWord+1,w
  8104     019E  0141               	movlb	1	; select bank1
  8105     019F  00CE               	movwf	((main@registers+1)^(0+128)+7)
  8106     01A0  0140               	movlb	0	; select bank0
  8107     01A1  0822               	movf	?_DATAEE_ReadWord,w
  8108     01A2  0141               	movlb	1	; select bank1
  8109     01A3  00CD               	movwf	(main@registers^(0+128)+7)
  8110                           
  8111                           ;main.c: 86:         registers.server_holding_register.baudrate = DATAEE_ReadWord(0x7004
      +                          );
  8112     01A4  3004               	movlw	4
  8113     01A5  0140               	movlb	0	; select bank0
  8114     01A6  00A2               	movwf	DATAEE_ReadWord@bAdd
  8115     01A7  3070               	movlw	112
  8116     01A8  00A3               	movwf	DATAEE_ReadWord@bAdd+1
  8117     01A9  318B  2328  3181   	fcall	_DATAEE_ReadWord
  8118     01AC  0823               	movf	?_DATAEE_ReadWord+1,w
  8119     01AD  0141               	movlb	1	; select bank1
  8120     01AE  00D0               	movwf	((main@registers+1)^(0+128)+9)
  8121     01AF  0140               	movlb	0	; select bank0
  8122     01B0  0822               	movf	?_DATAEE_ReadWord,w
  8123     01B1  0141               	movlb	1	; select bank1
  8124     01B2  00CF               	movwf	(main@registers^(0+128)+9)
  8125                           
  8126                           ;main.c: 87:     }
  8127     01B3  29D2               	goto	l5814
  8128     01B4                     l5812:
  8129                           
  8130                           ;main.c: 89:     {;main.c: 90:         DATAEE_WriteWord(0x7002,registers.server_holding_
      +                          register.addr_slave);
  8131     01B4  3002               	movlw	2
  8132     01B5  00A4               	movwf	DATAEE_WriteWord@bAdd
  8133     01B6  3070               	movlw	112
  8134     01B7  00A5               	movwf	DATAEE_WriteWord@bAdd+1
  8135     01B8  0141               	movlb	1	; select bank1
  8136     01B9  084E               	movf	((main@registers+1)^(0+128)+7),w
  8137     01BA  0140               	movlb	0	; select bank0
  8138     01BB  00A7               	movwf	DATAEE_WriteWord@bData+1
  8139     01BC  0141               	movlb	1	; select bank1
  8140     01BD  084D               	movf	(main@registers^(0+128)+7),w
  8141     01BE  0140               	movlb	0	; select bank0
  8142     01BF  00A6               	movwf	DATAEE_WriteWord@bData
  8143     01C0  3189  21D4  3181   	fcall	_DATAEE_WriteWord
  8144                           
  8145                           ;main.c: 91:         DATAEE_WriteWord(0x7004,registers.server_holding_register.baudrate)
      +                          ;
  8146     01C3  3004               	movlw	4
  8147     01C4  00A4               	movwf	DATAEE_WriteWord@bAdd
  8148     01C5  3070               	movlw	112
  8149     01C6  00A5               	movwf	DATAEE_WriteWord@bAdd+1
  8150     01C7  0141               	movlb	1	; select bank1
  8151     01C8  0850               	movf	((main@registers+1)^(0+128)+9),w
  8152     01C9  0140               	movlb	0	; select bank0
  8153     01CA  00A7               	movwf	DATAEE_WriteWord@bData+1
  8154     01CB  0141               	movlb	1	; select bank1
  8155     01CC  084F               	movf	(main@registers^(0+128)+9),w
  8156     01CD  0140               	movlb	0	; select bank0
  8157     01CE  00A6               	movwf	DATAEE_WriteWord@bData
  8158     01CF  3189  21D4  3181   	fcall	_DATAEE_WriteWord
  8159     01D2                     l5814:
  8160                           
  8161                           ;main.c: 93:     setBaudRateEUSART1(registers.server_holding_register.baudrate);
  8162     01D2  0141               	movlb	1	; select bank1
  8163     01D3  084F               	movf	(main@registers^(0+128)+9),w
  8164     01D4  0140               	movlb	0	; select bank0
  8165     01D5  00A0               	movwf	setBaudRateEUSART1@baudRate
  8166     01D6  0141               	movlb	1	; select bank1
  8167     01D7  0850               	movf	((main@registers+1)^(0+128)+9),w
  8168     01D8  0140               	movlb	0	; select bank0
  8169     01D9  00A1               	movwf	setBaudRateEUSART1@baudRate+1
  8170     01DA  01A2               	clrf	setBaudRateEUSART1@baudRate+2
  8171     01DB  01A3               	clrf	setBaudRateEUSART1@baudRate+3
  8172     01DC  3186  261B  3181   	fcall	_setBaudRateEUSART1
  8173                           
  8174                           ;main.c: 95:     nmbs_t nmbs;;main.c: 97:     nmbs_platform_conf platform_conf;;main.c: 
      +                          98:     platform_conf.transport = NMBS_TRANSPORT_RTU;
  8175     01DF  0141               	movlb	1	; select bank1
  8176     01E0  01C0               	clrf	main@platform_conf^(0+128)
  8177     01E1  0AC0               	incf	main@platform_conf^(0+128),f
  8178                           
  8179                           ;main.c: 99:     platform_conf.read = read_serial;
  8180     01E2  30E2               	movlw	low _read_serial
  8181     01E3  00C1               	movwf	(low ((main@platform_conf| 0+1)))^(0+128)
  8182     01E4  300D               	movlw	high _read_serial
  8183     01E5  00C2               	movwf	((low ((main@platform_conf| 0+1)))^(0+128)+1)
  8184                           
  8185                           ;main.c: 100:     platform_conf.write = write_serial;
  8186     01E6  3028               	movlw	low _write_serial
  8187     01E7  00C3               	movwf	(low ((main@platform_conf| 0+3)))^(0+128)
  8188     01E8  300F               	movlw	high _write_serial
  8189     01E9  00C4               	movwf	((low ((main@platform_conf| 0+3)))^(0+128)+1)
  8190                           
  8191                           ;main.c: 101:     platform_conf.arg = &(registers);
  8192     01EA  30C6               	movlw	(low (main@registers| 0))& (0+255)
  8193     01EB  00C5               	movwf	(low ((main@platform_conf| 0+5)))^(0+128)
  8194                           
  8195                           ;main.c: 103:     nmbs_callbacks callbacks;;main.c: 104:     callbacks.read_holding_regi
      +                          sters = handler_read_holding_registers;
  8196     01EC  30C8               	movlw	low _handler_read_holding_registers
  8197     01ED  00B7               	movwf	main@callbacks^(0+128)
  8198     01EE  300C               	movlw	high _handler_read_holding_registers
  8199     01EF  00B8               	movwf	(main@callbacks^(0+128)+1)
  8200                           
  8201                           ;main.c: 105:     callbacks.read_input_registers = handler_read_input_registers;
  8202     01F0  3092               	movlw	low _handler_read_input_registers
  8203     01F1  00B9               	movwf	(low ((main@callbacks| 0+2)))^(0+128)
  8204     01F2  300C               	movlw	high _handler_read_input_registers
  8205     01F3  00BA               	movwf	((low ((main@callbacks| 0+2)))^(0+128)+1)
  8206                           
  8207                           ;main.c: 107:     callbacks.write_single_coil = handle_write_single_coil;
  8208     01F4  3054               	movlw	low _handle_write_single_coil
  8209     01F5  00BB               	movwf	(low ((main@callbacks| 0+4)))^(0+128)
  8210     01F6  3005               	movlw	high _handle_write_single_coil
  8211     01F7  00BC               	movwf	((low ((main@callbacks| 0+4)))^(0+128)+1)
  8212                           
  8213                           ;main.c: 108:     callbacks.write_single_register = handle_write_single_register;
  8214     01F8  302C               	movlw	low _handle_write_single_register
  8215     01F9  00BD               	movwf	(low ((main@callbacks| 0+6)))^(0+128)
  8216     01FA  300A               	movlw	high _handle_write_single_register
  8217     01FB  00BE               	movwf	((low ((main@callbacks| 0+6)))^(0+128)+1)
  8218                           
  8219                           ;main.c: 110:     nmbs_error err = nmbs_server_create(&nmbs, registers.server_holding_re
      +                          gister.addr_slave, &platform_conf, &callbacks);
  8220     01FC  084D               	movf	(main@registers^(0+128)+7),w
  8221     01FD  0140               	movlb	0	; select bank0
  8222     01FE  00AC               	movwf	nmbs_server_create@address_rtu
  8223     01FF  30C0               	movlw	(low (main@platform_conf| 0))& (0+255)
  8224     0200  00AD               	movwf	nmbs_server_create@platform_conf
  8225     0201  30B7               	movlw	(low (main@callbacks| 0))& (0+255)
  8226     0202  00AE               	movwf	nmbs_server_create@callbacks
  8227     0203  3020               	movlw	(low (main@nmbs| (0+256)))& (0+255)
  8228     0204  318B  2399  3181   	fcall	_nmbs_server_create
  8229     0207  00EA               	movwf	main@err
  8230                           
  8231                           ;main.c: 111:     if (err != NMBS_ERROR_NONE) {
  8232     0208  086A               	movf	main@err,w
  8233     0209  1D03               	btfss	3,2
  8234     020A                     l561:	
  8235                           ;main.c: 112:       while(1){};
  8236                           
  8237     020A  2A0A               	goto	l561
  8238     020B                     l5838:
  8239                           
  8240                           ;main.c: 119:     {;main.c: 120:         actual_regs= registers.server_holding_register;
  8241     020B  3007               	movlw	7
  8242     020C  3EC6               	addlw	(low (main@registers| 0))& (0+255)
  8243     020D  0086               	movwf	6
  8244     020E  0187               	clrf	7
  8245     020F  3F40               	moviw [0]fsr1
  8246     0210  0141               	movlb	1	; select bank1
  8247     0211  00B3               	movwf	main@actual_regs^(0+128)
  8248     0212  3F41               	moviw [1]fsr1
  8249     0213  00B4               	movwf	(main@actual_regs+1)^(0+128)
  8250     0214  3F42               	moviw [2]fsr1
  8251     0215  00B5               	movwf	(main@actual_regs+2)^(0+128)
  8252     0216  3F43               	moviw [3]fsr1
  8253     0217  00B6               	movwf	(main@actual_regs+3)^(0+128)
  8254                           
  8255                           ;main.c: 121:         if(eusart1PacketFinish)
  8256     0218  0865               	movf	_eusart1PacketFinish^(0+128),w	;volatile
  8257     0219  1903               	btfsc	3,2
  8258     021A  2A31               	goto	l5852
  8259                           
  8260                           ;main.c: 122:         {;main.c: 123:             eusart1PacketFinish--;
  8261     021B  3001               	movlw	1
  8262     021C  02E5               	subwf	_eusart1PacketFinish^(0+128),f	;volatile
  8263                           
  8264                           ;main.c: 125:             err = nmbs_server_poll(&nmbs);
  8265     021D  3020               	movlw	(low (main@nmbs| (0+256)))& (0+255)
  8266     021E  3185  25B9  3181   	fcall	_nmbs_server_poll
  8267     0221  00EA               	movwf	main@err
  8268                           
  8269                           ;main.c: 127:             check_error_modbus(err);
  8270     0222  086A               	movf	main@err,w
  8271     0223  3188  208D  3181   	fcall	_check_error_modbus
  8272                           
  8273                           ;main.c: 128:             UART_ClearBuffer();
  8274     0226  3188  20AA  3181   	fcall	_UART_ClearBuffer
  8275                           
  8276                           ;main.c: 129:             is_a_new_value(&registers,&actual_regs,&nmbs);
  8277     0229  30B3               	movlw	(low (main@actual_regs| 0))& (0+255)
  8278     022A  00A8               	movwf	is_a_new_value@actual_regs
  8279     022B  3020               	movlw	(low (main@nmbs| (0+256)))& (0+255)
  8280     022C  00A9               	movwf	is_a_new_value@nmbs
  8281     022D  30C6               	movlw	(low (main@registers| 0))& (0+255)
  8282     022E  3183  231B  3181   	fcall	_is_a_new_value
  8283     0231                     l5852:
  8284                           
  8285                           ;main.c: 131:         if(((_Bool) ((registers.server_coils.coils)[(0) / 8] & (0x1 << ((0
      +                          ) % 8)))) || ((_Bool) ((registers.server_coils.coils)[(1) / 8] & (0x1 << ((1) % 8)))))
  8286     0231  0141               	movlb	1	; select bank1
  8287     0232  1846               	btfsc	main@registers^(0+128),0
  8288     0233  2A36               	goto	l5856
  8289     0234  1CC6               	btfss	main@registers^(0+128),1
  8290     0235  2A4A               	goto	l565
  8291     0236                     l5856:
  8292                           
  8293                           ;main.c: 132:         {;main.c: 133:             registers.server_input_register.sensor_
      +                          value = sensor.sense(&sensor.sensor_info.ADCChannel);
  8294     0236  3065               	movlw	(low ((_sensor| (0+256)+10)))& (0+255)
  8295     0237  0140               	movlb	0	; select bank0
  8296     0238  00A3               	movwf	getADCData@sensorSelection
  8297     0239  300B               	movlw	11
  8298     023A  3E5B               	addlw	(low (_sensor| (0+256)))& (0+255)
  8299     023B  0086               	movwf	6
  8300     023C  3001               	movlw	1	; select bank2/3
  8301     023D  0087               	movwf	7
  8302     023E  3F41               	moviw [1]fsr1
  8303     023F  008A               	movwf	10
  8304     0240  3F40               	moviw [0]fsr1
  8305     0241  000A               	callw
  8306     0242  3181               	pagesel	$
  8307     0243  0824               	movf	?_getADCData+1,w
  8308     0244  0141               	movlb	1	; select bank1
  8309     0245  00CC               	movwf	((main@registers+1)^(0+128)+5)
  8310     0246  0140               	movlb	0	; select bank0
  8311     0247  0823               	movf	?_getADCData,w
  8312     0248  0141               	movlb	1	; select bank1
  8313     0249  00CB               	movwf	(main@registers^(0+128)+5)
  8314     024A                     l565:	
  8315                           ;main.c: 134:         }
  8316                           
  8317                           
  8318                           ;main.c: 135:         m_memset(registers.server_coils.coils, 0, sizeof(registers.server_
      +                          coils.coils));
  8319     024A  30C6               	movlw	low main@registers
  8320     024B  0140               	movlb	0	; select bank0
  8321     024C  00A0               	movwf	m_memset@s
  8322     024D  3000               	movlw	high main@registers
  8323     024E  00A1               	movwf	m_memset@s+1
  8324     024F  3000               	movlw	0
  8325     0250  00A2               	movwf	m_memset@c
  8326     0251  00A3               	movwf	m_memset@c+1
  8327     0252  3001               	movlw	1
  8328     0253  00A4               	movwf	m_memset@len
  8329     0254  3000               	movlw	0
  8330     0255  00A5               	movwf	m_memset@len+1
  8331     0256  318A  2214  3181   	fcall	_m_memset
  8332     0259  2A0B               	goto	l5838
  8333     025A                     __end_of_main:
  8334                           
  8335                           	psect	text1
  8336     09A0                     __ptext1:	
  8337 ;; *************** function _printf *****************
  8338 ;; Defined at:
  8339 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\printf.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;  fmt             2   25[BANK0 ] PTR const unsigned char 
  8342 ;;		 -> STR_1(38), 
  8343 ;; Auto vars:     Size  Location     Type
  8344 ;;  ret             2    0        int 
  8345 ;;  ap              1   27[BANK0 ] PTR void [1]
  8346 ;;		 -> ?_printf(2), 
  8347 ;; Return value:  Size  Location     Type
  8348 ;;                  2   25[BANK0 ] int 
  8349 ;; Registers used:
  8350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8351 ;; Tracked objects:
  8352 ;;		On entry : 0/0
  8353 ;;		On exit  : 3F/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8356 ;;      Params:         0       2       0       0       0       0       0       0
  8357 ;;      Locals:         0       1       0       0       0       0       0       0
  8358 ;;      Temps:          0       0       0       0       0       0       0       0
  8359 ;;      Totals:         0       3       0       0       0       0       0       0
  8360 ;;Total ram usage:        3 bytes
  8361 ;; Hardware stack levels used: 1
  8362 ;; Hardware stack levels required when called: 9
  8363 ;; This function calls:
  8364 ;;		_vfprintf
  8365 ;; This function is called by:
  8366 ;;		_main
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370     09A0                     _printf:	
  8371                           ;psect for function _printf
  8372                           
  8373                           
  8374                           ;incstack = 0
  8375                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8376     09A0  303B               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8377     09A1  0140               	movlb	0	; select bank0
  8378     09A2  00BB               	movwf	printf@ap
  8379     09A3  3000               	movlw	0
  8380     09A4  00B1               	movwf	vfprintf@fp
  8381     09A5  00B2               	movwf	vfprintf@fp+1
  8382     09A6  083A               	movf	printf@fmt+1,w
  8383     09A7  00B4               	movwf	vfprintf@fmt+1
  8384     09A8  0839               	movf	printf@fmt,w
  8385     09A9  00B3               	movwf	vfprintf@fmt
  8386     09AA  303B               	movlw	(low (printf@ap| 0))& (0+255)
  8387     09AB  00B5               	movwf	vfprintf@ap
  8388     09AC  318A  2244         	fcall	_vfprintf
  8389     09AE  0008               	return
  8390     09AF                     __end_of_printf:
  8391                           
  8392                           	psect	text2
  8393     0A44                     __ptext2:	
  8394 ;; *************** function _vfprintf *****************
  8395 ;; Defined at:
  8396 ;;		line 1546 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  fp              2   17[BANK0 ] PTR struct _IO_FILE
  8399 ;;		 -> NULL(0), 
  8400 ;;  fmt             2   19[BANK0 ] PTR const unsigned char 
  8401 ;;		 -> STR_1(38), 
  8402 ;;  ap              1   21[BANK0 ] PTR PTR void 
  8403 ;;		 -> printf@ap(1), 
  8404 ;; Auto vars:     Size  Location     Type
  8405 ;;  cfmt            2   23[BANK0 ] PTR unsigned char 
  8406 ;;		 -> STR_1(38), 
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  2   17[BANK0 ] int 
  8409 ;; Registers used:
  8410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8411 ;; Tracked objects:
  8412 ;;		On entry : 3F/0
  8413 ;;		On exit  : 3F/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8416 ;;      Params:         0       5       0       0       0       0       0       0
  8417 ;;      Locals:         0       2       0       0       0       0       0       0
  8418 ;;      Temps:          0       1       0       0       0       0       0       0
  8419 ;;      Totals:         0       8       0       0       0       0       0       0
  8420 ;;Total ram usage:        8 bytes
  8421 ;; Hardware stack levels used: 1
  8422 ;; Hardware stack levels required when called: 8
  8423 ;; This function calls:
  8424 ;;		_vfpfcnvrt
  8425 ;; This function is called by:
  8426 ;;		_printf
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430     0A44                     _vfprintf:	
  8431                           ;psect for function _vfprintf
  8432                           
  8433                           
  8434                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1546: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.41\pic\source
      +                          s\c99\common\doprnt.c: 1547: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\comm
      +                          on\doprnt.c: 1549:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\
      +                          common\doprnt.c: 1551:     cfmt = (char *)fmt;
  8435                           
  8436                           ;incstack = 0
  8437                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8438     0A44  0834               	movf	vfprintf@fmt+1,w
  8439     0A45  00B8               	movwf	vfprintf@cfmt+1
  8440     0A46  0833               	movf	vfprintf@fmt,w
  8441     0A47  00B7               	movwf	vfprintf@cfmt
  8442     0A48                     l5646:	
  8443                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1555:     while (
      +                          *cfmt) {
  8444                           
  8445                           
  8446                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1555:     while (
      +                          *cfmt) {
  8447     0A48  0837               	movf	vfprintf@cfmt,w
  8448     0A49  0084               	movwf	4
  8449     0A4A  0838               	movf	vfprintf@cfmt+1,w
  8450     0A4B  0085               	movwf	5
  8451     0A4C  0012               	moviw fsr0++
  8452     0A4D  1903               	btfsc	3,2
  8453     0A4E  2A5B               	goto	l5648
  8454                           
  8455                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1559:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  8456     0A4F  0832               	movf	vfprintf@fp+1,w
  8457     0A50  00AA               	movwf	vfpfcnvrt@fp+1
  8458     0A51  0831               	movf	vfprintf@fp,w
  8459     0A52  00A9               	movwf	vfpfcnvrt@fp
  8460     0A53  3037               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  8461     0A54  00AB               	movwf	vfpfcnvrt@fmt
  8462     0A55  0835               	movf	vfprintf@ap,w
  8463     0A56  00AC               	movwf	vfpfcnvrt@ap
  8464     0A57  318F  27B7  318A   	fcall	_vfpfcnvrt
  8465     0A5A  2A48               	goto	l5646
  8466     0A5B                     l5648:
  8467                           
  8468                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1564:  return 0;
  8469     0A5B  01B1               	clrf	?_vfprintf
  8470     0A5C  01B2               	clrf	?_vfprintf+1
  8471     0A5D  0008               	return
  8472     0A5E                     __end_of_vfprintf:
  8473                           
  8474                           	psect	text3
  8475     0FB7                     __ptext3:	
  8476 ;; *************** function _vfpfcnvrt *****************
  8477 ;; Defined at:
  8478 ;;		line 1048 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  8479 ;; Parameters:    Size  Location     Type
  8480 ;;  fp              2    9[BANK0 ] PTR struct _IO_FILE
  8481 ;;		 -> NULL(0), 
  8482 ;;  fmt             1   11[BANK0 ] PTR PTR unsigned char 
  8483 ;;		 -> vfprintf@cfmt(2), 
  8484 ;;  ap              1   12[BANK0 ] PTR PTR void 
  8485 ;;		 -> printf@ap(1), 
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;  convarg         4    0        struct .
  8488 ;;  i               2    0        int 
  8489 ;;  done            2    0        int 
  8490 ;;  cp              2    0        PTR unsigned char 
  8491 ;;  c               1    0        unsigned char 
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  1    wreg      void 
  8494 ;; Registers used:
  8495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8496 ;; Tracked objects:
  8497 ;;		On entry : 3F/0
  8498 ;;		On exit  : 3F/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8501 ;;      Params:         0       4       0       0       0       0       0       0
  8502 ;;      Locals:         0       0       0       0       0       0       0       0
  8503 ;;      Temps:          0       4       0       0       0       0       0       0
  8504 ;;      Totals:         0       8       0       0       0       0       0       0
  8505 ;;Total ram usage:        8 bytes
  8506 ;; Hardware stack levels used: 1
  8507 ;; Hardware stack levels required when called: 7
  8508 ;; This function calls:
  8509 ;;		_fputc
  8510 ;; This function is called by:
  8511 ;;		_vfprintf
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515     0FB7                     _vfpfcnvrt:	
  8516                           ;psect for function _vfpfcnvrt
  8517                           
  8518                           
  8519                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1048: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1049: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\dopr
      +                          nt.c: 1050:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common
      +                          \doprnt.c: 1051:     int done, i;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1059:  } convarg;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1062:     if ((*fmt)[0] == '%') {
  8520                           
  8521                           ;incstack = 0
  8522                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8523     0FB7  082B               	movf	vfpfcnvrt@fmt,w
  8524     0FB8  0086               	movwf	6
  8525     0FB9  0187               	clrf	7
  8526     0FBA  3F40               	moviw [0]fsr1
  8527     0FBB  00AD               	movwf	??_vfpfcnvrt
  8528     0FBC  3F41               	moviw [1]fsr1
  8529     0FBD  00AE               	movwf	??_vfpfcnvrt+1
  8530     0FBE  082D               	movf	??_vfpfcnvrt,w
  8531     0FBF  0084               	movwf	4
  8532     0FC0  082E               	movf	??_vfpfcnvrt+1,w
  8533     0FC1  0085               	movwf	5
  8534     0FC2  0012               	moviw fsr0++
  8535     0FC3  3A25               	xorlw	37
  8536     0FC4  1D03               	btfss	3,2
  8537     0FC5  2FE6               	goto	l5376
  8538                           
  8539                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1063:         ++*
      +                          fmt;
  8540     0FC6  082B               	movf	vfpfcnvrt@fmt,w
  8541     0FC7  0086               	movwf	6
  8542     0FC8  0187               	clrf	7
  8543     0FC9  3001               	movlw	1
  8544     0FCA  0781               	addwf	1,f
  8545     0FCB  3141               	addfsr 1,1
  8546     0FCC  1803               	skipnc
  8547     0FCD  0A81               	incf	1,f
  8548                           
  8549                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1065:         fla
      +                          gs = width = 0;
  8550     0FCE  0141               	movlb	1	; select bank1
  8551     0FCF  01E1               	clrf	_width^(0+128)
  8552     0FD0  01E2               	clrf	(_width+1)^(0+128)
  8553     0FD1  1003               	clrc
  8554     0FD2  3000               	movlw	0
  8555     0FD3  1803               	btfsc	3,0
  8556     0FD4  3001               	movlw	1
  8557     0FD5  0140               	movlb	0	; select bank0
  8558     0FD6  00EB               	movwf	_flags
  8559                           
  8560                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1066:         pre
      +                          c = -1;
  8561     0FD7  30FF               	movlw	255
  8562     0FD8  0141               	movlb	1	; select bank1
  8563     0FD9  00E3               	movwf	_prec^(0+128)
  8564     0FDA  30FF               	movlw	255
  8565     0FDB  00E4               	movwf	(_prec^(0+128)+1)
  8566     0FDC                     l5372:
  8567                           
  8568                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1535:         ++*
      +                          fmt;
  8569     0FDC  0140               	movlb	0	; select bank0
  8570     0FDD  082B               	movf	vfpfcnvrt@fmt,w
  8571     0FDE  0086               	movwf	6
  8572     0FDF  0187               	clrf	7
  8573     0FE0  3001               	movlw	1
  8574     0FE1  0781               	addwf	1,f
  8575     0FE2  3141               	addfsr 1,1
  8576     0FE3  1803               	skipnc
  8577     0FE4  0A81               	incf	1,f
  8578     0FE5  0008               	return
  8579     0FE6                     l5376:
  8580                           
  8581                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1540:     fputc((
      +                          int)(*fmt)[0], fp);
  8582     0FE6  082B               	movf	vfpfcnvrt@fmt,w
  8583     0FE7  0086               	movwf	6
  8584     0FE8  0187               	clrf	7
  8585     0FE9  3F40               	moviw [0]fsr1
  8586     0FEA  00AD               	movwf	??_vfpfcnvrt
  8587     0FEB  3F41               	moviw [1]fsr1
  8588     0FEC  00AE               	movwf	??_vfpfcnvrt+1
  8589     0FED  082D               	movf	??_vfpfcnvrt,w
  8590     0FEE  0084               	movwf	4
  8591     0FEF  082E               	movf	??_vfpfcnvrt+1,w
  8592     0FF0  0085               	movwf	5
  8593     0FF1  0800               	movf	0,w	;code access
  8594     0FF2  00AF               	movwf	??_vfpfcnvrt+2
  8595     0FF3  01B0               	clrf	??_vfpfcnvrt+3
  8596     0FF4  082F               	movf	??_vfpfcnvrt+2,w
  8597     0FF5  00A0               	movwf	fputc@c
  8598     0FF6  0830               	movf	??_vfpfcnvrt+3,w
  8599     0FF7  00A1               	movwf	fputc@c+1
  8600     0FF8  082A               	movf	vfpfcnvrt@fp+1,w
  8601     0FF9  00A3               	movwf	fputc@fp+1
  8602     0FFA  0829               	movf	vfpfcnvrt@fp,w
  8603     0FFB  00A2               	movwf	fputc@fp
  8604     0FFC  3187  273A  318F   	fcall	_fputc
  8605     0FFF  2FDC               	goto	l5372
  8606     1000                     __end_of_vfpfcnvrt:
  8607                           
  8608                           	psect	text4
  8609     073A                     __ptext4:	
  8610 ;; *************** function _fputc *****************
  8611 ;; Defined at:
  8612 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\nf_fputc.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  c               2    0[BANK0 ] int 
  8615 ;;  fp              2    2[BANK0 ] PTR struct _IO_FILE
  8616 ;;		 -> NULL(0), 
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;		None
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  2    0[BANK0 ] int 
  8621 ;; Registers used:
  8622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8623 ;; Tracked objects:
  8624 ;;		On entry : 3F/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8628 ;;      Params:         0       4       0       0       0       0       0       0
  8629 ;;      Locals:         0       0       0       0       0       0       0       0
  8630 ;;      Temps:          0       5       0       0       0       0       0       0
  8631 ;;      Totals:         0       9       0       0       0       0       0       0
  8632 ;;Total ram usage:        9 bytes
  8633 ;; Hardware stack levels used: 1
  8634 ;; Hardware stack levels required when called: 6
  8635 ;; This function calls:
  8636 ;;		_putch
  8637 ;; This function is called by:
  8638 ;;		_vfpfcnvrt
  8639 ;; This function uses a non-reentrant model
  8640 ;;
  8641                           
  8642     073A                     _fputc:	
  8643                           ;psect for function _fputc
  8644                           
  8645                           
  8646                           ;incstack = 0
  8647                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8648     073A  0822               	movf	fputc@fp,w
  8649     073B  0423               	iorwf	fputc@fp+1,w
  8650     073C  1903               	btfsc	3,2
  8651     073D  2F42               	goto	l5214
  8652     073E  0822               	movf	fputc@fp,w
  8653     073F  0423               	iorwf	fputc@fp+1,w
  8654     0740  1D03               	btfss	3,2
  8655     0741  2F46               	goto	l5216
  8656     0742                     l5214:
  8657     0742  0820               	movf	fputc@c,w
  8658     0743  3180  2003         	fcall	_putch
  8659     0745  0008               	return
  8660     0746                     l5216:
  8661     0746  0822               	movf	fputc@fp,w
  8662     0747  0086               	movwf	6
  8663     0748  0823               	movf	fputc@fp+1,w
  8664     0749  0087               	movwf	7
  8665     074A  3149               	addfsr 1,9
  8666     074B  0016               	moviw fsr1++
  8667     074C  0401               	iorwf	1,w
  8668     074D  1903               	btfsc	3,2
  8669     074E  2F6D               	goto	l5220
  8670     074F  0822               	movf	fputc@fp,w
  8671     0750  0086               	movwf	6
  8672     0751  0823               	movf	fputc@fp+1,w
  8673     0752  0087               	movwf	7
  8674     0753  3149               	addfsr 1,9
  8675     0754  3F40               	moviw [0]fsr1
  8676     0755  00A4               	movwf	??_fputc
  8677     0756  3F41               	moviw [1]fsr1
  8678     0757  00A5               	movwf	??_fputc+1
  8679     0758  0822               	movf	fputc@fp,w
  8680     0759  0086               	movwf	6
  8681     075A  0823               	movf	fputc@fp+1,w
  8682     075B  0087               	movwf	7
  8683     075C  3142               	addfsr 1,2
  8684     075D  3F40               	moviw [0]fsr1
  8685     075E  00A6               	movwf	??_fputc+2
  8686     075F  3F41               	moviw [1]fsr1
  8687     0760  00A7               	movwf	??_fputc+3
  8688     0761  0827               	movf	??_fputc+3,w
  8689     0762  3A80               	xorlw	128
  8690     0763  00A8               	movwf	??_fputc+4
  8691     0764  0825               	movf	??_fputc+1,w
  8692     0765  3A80               	xorlw	128
  8693     0766  0228               	subwf	??_fputc+4,w
  8694     0767  1D03               	skipz
  8695     0768  2F6B               	goto	u3675
  8696     0769  0824               	movf	??_fputc,w
  8697     076A  0226               	subwf	??_fputc+2,w
  8698     076B                     u3675:
  8699     076B  1803               	skipnc
  8700     076C  0008               	return
  8701     076D                     l5220:
  8702     076D  0140               	movlb	0	; select bank0
  8703     076E  0822               	movf	fputc@fp,w
  8704     076F  0086               	movwf	6
  8705     0770  0823               	movf	fputc@fp+1,w
  8706     0771  0087               	movwf	7
  8707     0772  3142               	addfsr 1,2
  8708     0773  0822               	movf	fputc@fp,w
  8709     0774  0084               	movwf	4
  8710     0775  0823               	movf	fputc@fp+1,w
  8711     0776  0085               	movwf	5
  8712     0777  3F40               	moviw [0]fsr1
  8713     0778  0700               	addwf	0,w
  8714     0779  00A4               	movwf	??_fputc
  8715     077A  3101               	addfsr 0,1
  8716     077B  3F41               	moviw [1]fsr1
  8717     077C  3D00               	addwfc	0,w
  8718     077D  00A5               	movwf	??_fputc+1
  8719     077E  0824               	movf	??_fputc,w
  8720     077F  0086               	movwf	6
  8721     0780  0825               	movf	??_fputc+1,w
  8722     0781  0087               	movwf	7
  8723     0782  0820               	movf	fputc@c,w
  8724     0783  0081               	movwf	1
  8725     0784  0822               	movf	fputc@fp,w
  8726     0785  0086               	movwf	6
  8727     0786  0823               	movf	fputc@fp+1,w
  8728     0787  0087               	movwf	7
  8729     0788  3142               	addfsr 1,2
  8730     0789  3001               	movlw	1
  8731     078A  0781               	addwf	1,f
  8732     078B  3141               	addfsr 1,1
  8733     078C  1803               	skipnc
  8734     078D  0A81               	incf	1,f
  8735     078E  0008               	return
  8736     078F                     __end_of_fputc:
  8737                           
  8738                           	psect	text5
  8739     0003                     __ptext5:	
  8740 ;; *************** function _putch *****************
  8741 ;; Defined at:
  8742 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\putch.c"
  8743 ;; Parameters:    Size  Location     Type
  8744 ;;  c               1    wreg     unsigned char 
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;  c               1    0[COMMON] unsigned char 
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  1    wreg      void 
  8749 ;; Registers used:
  8750 ;;		wreg
  8751 ;; Tracked objects:
  8752 ;;		On entry : 3F/0
  8753 ;;		On exit  : 3F/0
  8754 ;;		Unchanged: 3F/0
  8755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8756 ;;      Params:         0       0       0       0       0       0       0       0
  8757 ;;      Locals:         0       0       0       0       0       0       0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0       0
  8759 ;;      Totals:         0       0       0       0       0       0       0       0
  8760 ;;Total ram usage:        0 bytes
  8761 ;; Hardware stack levels used: 1
  8762 ;; Hardware stack levels required when called: 5
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_fputc
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770     0003                     _putch:	
  8771                           ;psect for function _putch
  8772                           
  8773                           
  8774                           ;incstack = 0
  8775                           ; Regs used in _putch: [wreg]
  8776     0003  0008               	return
  8777     0004                     __end_of_putch:
  8778                           
  8779                           	psect	text6
  8780     05B9                     __ptext6:	
  8781 ;; *************** function _nmbs_server_poll *****************
  8782 ;; Defined at:
  8783 ;;		line 1376 in file "nanomodbus.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;  nmbs            1    wreg     PTR struct nmbs_t
  8786 ;;		 -> main@nmbs(59), 
  8787 ;; Auto vars:     Size  Location     Type
  8788 ;;  nmbs            1   71[BANK0 ] PTR struct nmbs_t
  8789 ;;		 -> main@nmbs(59), 
  8790 ;;  err             1   72[BANK0 ] enum E10483
  8791 ;;  first_byte_r    1   70[BANK0 ] _Bool 
  8792 ;; Return value:  Size  Location     Type
  8793 ;;                  1    wreg      enum E10517
  8794 ;; Registers used:
  8795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8796 ;; Tracked objects:
  8797 ;;		On entry : 3F/1
  8798 ;;		On exit  : 3F/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8801 ;;      Params:         0       0       0       0       0       0       0       0
  8802 ;;      Locals:         0       3       0       0       0       0       0       0
  8803 ;;      Temps:          0       0       0       0       0       0       0       0
  8804 ;;      Totals:         0       3       0       0       0       0       0       0
  8805 ;;Total ram usage:        3 bytes
  8806 ;; Hardware stack levels used: 1
  8807 ;; Hardware stack levels required when called: 14
  8808 ;; This function calls:
  8809 ;;		_handle_req_fc
  8810 ;;		_msg_state_reset
  8811 ;;		_read_serial
  8812 ;;		_recv_req_header
  8813 ;; This function is called by:
  8814 ;;		_main
  8815 ;; This function uses a non-reentrant model
  8816 ;;
  8817                           
  8818     05B9                     _nmbs_server_poll:	
  8819                           ;psect for function _nmbs_server_poll
  8820                           
  8821                           
  8822                           ;incstack = 0
  8823                           ; Regs used in _nmbs_server_poll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8824                           ;nmbs_server_poll@nmbs stored from wreg
  8825     05B9  0140               	movlb	0	; select bank0
  8826     05BA  00E7               	movwf	nmbs_server_poll@nmbs
  8827                           
  8828                           ;nanomodbus.c: 1377:     msg_state_reset(nmbs);
  8829     05BB  0867               	movf	nmbs_server_poll@nmbs,w
  8830     05BC  318B  234B  3185   	fcall	_msg_state_reset
  8831                           
  8832                           ;nanomodbus.c: 1379:     _Bool first_byte_received = 0;
  8833     05BF  01E6               	clrf	nmbs_server_poll@first_byte_received
  8834                           
  8835                           ;nanomodbus.c: 1380:     nmbs_error err = recv_req_header(nmbs, &first_byte_received);
  8836     05C0  3066               	movlw	(low (nmbs_server_poll@first_byte_received| 0))& (0+255)
  8837     05C1  00BA               	movwf	recv_req_header@first_byte_received
  8838     05C2  0867               	movf	nmbs_server_poll@nmbs,w
  8839     05C3  318E  261F  3185   	fcall	_recv_req_header
  8840     05C6  00E8               	movwf	nmbs_server_poll@err
  8841                           
  8842                           ;nanomodbus.c: 1381:     if (err != NMBS_ERROR_NONE) {
  8843     05C7  0868               	movf	nmbs_server_poll@err,w
  8844     05C8  1903               	btfsc	3,2
  8845     05C9  2DD5               	goto	l5736
  8846                           
  8847                           ;nanomodbus.c: 1382:         if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
  8848     05CA  0866               	movf	nmbs_server_poll@first_byte_received,w
  8849     05CB  1D03               	btfss	3,2
  8850     05CC  2DD3               	goto	l5732
  8851     05CD  30FD               	movlw	253
  8852     05CE  0668               	xorwf	nmbs_server_poll@err,w
  8853     05CF  1D03               	btfss	3,2
  8854     05D0  2DD3               	goto	l5732
  8855     05D1                     l5728:
  8856                           
  8857                           ;nanomodbus.c: 1383:             return NMBS_ERROR_NONE;
  8858     05D1  3000               	movlw	0
  8859     05D2  0008               	return
  8860     05D3                     l5732:
  8861                           
  8862                           ;nanomodbus.c: 1385:         return err;
  8863     05D3  0868               	movf	nmbs_server_poll@err,w
  8864     05D4  0008               	return
  8865     05D5                     l5736:
  8866                           
  8867                           ;nanomodbus.c: 1399:     err = handle_req_fc(nmbs);
  8868     05D5  0867               	movf	nmbs_server_poll@nmbs,w
  8869     05D6  318D  256E  3185   	fcall	_handle_req_fc
  8870     05D9  00E8               	movwf	nmbs_server_poll@err
  8871                           
  8872                           ;nanomodbus.c: 1400:     if (err != NMBS_ERROR_NONE && !((err) > 0 && (err) < 5)) {
  8873     05DA  0868               	movf	nmbs_server_poll@err,w
  8874     05DB  1903               	btfsc	3,2
  8875     05DC  2DD1               	goto	l5728
  8876     05DD  0868               	movf	nmbs_server_poll@err,w
  8877     05DE  3A80               	xorlw	128
  8878     05DF  3E7F               	addlw	-129
  8879     05E0  1C03               	skipc
  8880     05E1  2DE7               	goto	l5744
  8881     05E2  0868               	movf	nmbs_server_poll@err,w
  8882     05E3  3A80               	xorlw	128
  8883     05E4  3E7B               	addlw	-133
  8884     05E5  1C03               	skipc
  8885     05E6  2DD1               	goto	l5728
  8886     05E7                     l5744:
  8887                           
  8888                           ;nanomodbus.c: 1401:         if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && err !
      +                          = NMBS_ERROR_TIMEOUT && nmbs->msg.ignored) {
  8889     05E7  0867               	movf	nmbs_server_poll@nmbs,w
  8890     05E8  3E31               	addlw	49
  8891     05E9  0086               	movwf	6
  8892     05EA  3001               	movlw	1	; select bank2/3
  8893     05EB  0087               	movwf	7
  8894     05EC  0301               	decf	1,w
  8895     05ED  1D03               	btfss	3,2
  8896     05EE  2DD3               	goto	l5732
  8897     05EF  30FD               	movlw	253
  8898     05F0  0668               	xorwf	nmbs_server_poll@err,w
  8899     05F1  1903               	btfsc	3,2
  8900     05F2  2DD3               	goto	l5732
  8901     05F3  0867               	movf	nmbs_server_poll@nmbs,w
  8902     05F4  3E27               	addlw	39
  8903     05F5  0086               	movwf	6
  8904     05F6  3001               	movlw	1	; select bank2/3
  8905     05F7  0087               	movwf	7
  8906     05F8  0801               	movf	1,w
  8907     05F9  1903               	btfsc	3,2
  8908     05FA  2DD3               	goto	l5732
  8909                           
  8910                           ;nanomodbus.c: 1403:             nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf
      +                          ), 0, nmbs->platform.arg);
  8911     05FB  0867               	movf	nmbs_server_poll@nmbs,w
  8912     05FC  00A1               	movwf	read_serial@buf
  8913     05FD  3020               	movlw	32
  8914     05FE  00A2               	movwf	read_serial@count
  8915     05FF  3000               	movlw	0
  8916     0600  00A3               	movwf	read_serial@count+1
  8917     0601  3000               	movlw	0
  8918     0602  00A7               	movwf	read_serial@byte_timeout_ms+3
  8919     0603  3000               	movlw	0
  8920     0604  00A6               	movwf	read_serial@byte_timeout_ms+2
  8921     0605  3000               	movlw	0
  8922     0606  00A5               	movwf	read_serial@byte_timeout_ms+1
  8923     0607  3000               	movlw	0
  8924     0608  00A4               	movwf	read_serial@byte_timeout_ms
  8925     0609  0867               	movf	nmbs_server_poll@nmbs,w
  8926     060A  3E36               	addlw	54
  8927     060B  0086               	movwf	6
  8928     060C  3001               	movlw	1	; select bank2/3
  8929     060D  0087               	movwf	7
  8930     060E  0801               	movf	1,w
  8931     060F  00A8               	movwf	read_serial@arg
  8932     0610  0867               	movf	nmbs_server_poll@nmbs,w
  8933     0611  3E32               	addlw	50
  8934     0612  0086               	movwf	6
  8935     0613  3001               	movlw	1	; select bank2/3
  8936     0614  0087               	movwf	7
  8937     0615  3F41               	moviw [1]fsr1
  8938     0616  008A               	movwf	10
  8939     0617  3F40               	moviw [0]fsr1
  8940     0618  000A               	callw
  8941     0619  3185               	pagesel	$
  8942     061A  2DD3               	goto	l5732
  8943     061B                     __end_of_nmbs_server_poll:
  8944                           
  8945                           	psect	text7
  8946     0E1F                     __ptext7:	
  8947 ;; *************** function _recv_req_header *****************
  8948 ;; Defined at:
  8949 ;;		line 281 in file "nanomodbus.c"
  8950 ;; Parameters:    Size  Location     Type
  8951 ;;  nmbs            1    wreg     PTR struct nmbs_t
  8952 ;;		 -> main@nmbs(59), 
  8953 ;;  first_byte_r    1   26[BANK0 ] PTR _Bool 
  8954 ;;		 -> nmbs_server_poll@first_byte_received(1), 
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;  nmbs            1   28[BANK0 ] PTR struct nmbs_t
  8957 ;;		 -> main@nmbs(59), 
  8958 ;;  err             1   27[BANK0 ] enum E10483
  8959 ;; Return value:  Size  Location     Type
  8960 ;;                  1    wreg      enum E10483
  8961 ;; Registers used:
  8962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8963 ;; Tracked objects:
  8964 ;;		On entry : 3F/0
  8965 ;;		On exit  : 3F/0
  8966 ;;		Unchanged: 0/0
  8967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8968 ;;      Params:         0       1       0       0       0       0       0       0
  8969 ;;      Locals:         0       2       0       0       0       0       0       0
  8970 ;;      Temps:          0       0       0       0       0       0       0       0
  8971 ;;      Totals:         0       3       0       0       0       0       0       0
  8972 ;;Total ram usage:        3 bytes
  8973 ;; Hardware stack levels used: 1
  8974 ;; Hardware stack levels required when called: 9
  8975 ;; This function calls:
  8976 ;;		_recv_msg_header
  8977 ;; This function is called by:
  8978 ;;		_nmbs_server_poll
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982     0E1F                     _recv_req_header:	
  8983                           ;psect for function _recv_req_header
  8984                           
  8985                           
  8986                           ;incstack = 0
  8987                           ; Regs used in _recv_req_header: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8988                           ;recv_req_header@nmbs stored from wreg
  8989     0E1F  00BC               	movwf	recv_req_header@nmbs
  8990                           
  8991                           ;nanomodbus.c: 282:     nmbs_error err = recv_msg_header(nmbs, first_byte_received);
  8992     0E20  083A               	movf	recv_req_header@first_byte_received,w
  8993     0E21  00B6               	movwf	recv_msg_header@first_byte_received
  8994     0E22  083C               	movf	recv_req_header@nmbs,w
  8995     0E23  318F  276E  318E   	fcall	_recv_msg_header
  8996     0E26  00BB               	movwf	recv_req_header@err
  8997                           
  8998                           ;nanomodbus.c: 283:     if (err != NMBS_ERROR_NONE)
  8999     0E27  083B               	movf	recv_req_header@err,w
  9000     0E28  1903               	btfsc	3,2
  9001     0E29  2E2C               	goto	l5600
  9002                           
  9003                           ;nanomodbus.c: 284:         return err;
  9004     0E2A  083B               	movf	recv_req_header@err,w
  9005     0E2B  0008               	return
  9006     0E2C                     l5600:
  9007                           
  9008                           ;nanomodbus.c: 286:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
  9009     0E2C  083C               	movf	recv_req_header@nmbs,w
  9010     0E2D  3E31               	addlw	49
  9011     0E2E  0086               	movwf	6
  9012     0E2F  3001               	movlw	1	; select bank2/3
  9013     0E30  0087               	movwf	7
  9014     0E31  0301               	decf	1,w
  9015     0E32  1D03               	btfss	3,2
  9016     0E33  2E5B               	goto	l5612
  9017     0E34  083C               	movf	recv_req_header@nmbs,w
  9018     0E35  3E22               	addlw	34
  9019     0E36  0086               	movwf	6
  9020     0E37  3001               	movlw	1	; select bank2/3
  9021     0E38  0087               	movwf	7
  9022     0E39  0801               	movf	1,w
  9023     0E3A  1D03               	btfss	3,2
  9024     0E3B  2E3F               	goto	l5606
  9025                           
  9026                           ;nanomodbus.c: 289:             nmbs->msg.broadcast = 1;
  9027     0E3C  083C               	movf	recv_req_header@nmbs,w
  9028     0E3D  3E26               	addlw	38
  9029     0E3E  2E4F               	goto	L1
  9030     0E3F                     l5606:
  9031     0E3F  083C               	movf	recv_req_header@nmbs,w
  9032     0E40  3E37               	addlw	55
  9033     0E41  0086               	movwf	6
  9034     0E42  3001               	movlw	1	; select bank2/3
  9035     0E43  0087               	movwf	7
  9036     0E44  083C               	movf	recv_req_header@nmbs,w
  9037     0E45  3E22               	addlw	34
  9038     0E46  0084               	movwf	4
  9039     0E47  3001               	movlw	1	; select bank2/3
  9040     0E48  0085               	movwf	5
  9041     0E49  0800               	movf	0,w
  9042     0E4A  0601               	xorwf	1,w
  9043     0E4B  1903               	skipnz
  9044     0E4C  2E55               	goto	l5610
  9045                           
  9046                           ;nanomodbus.c: 291:             nmbs->msg.ignored = 1;
  9047     0E4D  083C               	movf	recv_req_header@nmbs,w
  9048     0E4E  3E27               	addlw	39
  9049     0E4F                     L1:
  9050     0E4F  0086               	movwf	6
  9051     0E50  3001               	movlw	1	; select bank2/3
  9052     0E51  0087               	movwf	7
  9053     0E52  0181               	clrf	1
  9054     0E53  0A81               	incf	1,f
  9055     0E54  2E5B               	goto	l5612
  9056     0E55                     l5610:
  9057                           
  9058                           ;nanomodbus.c: 293:             nmbs->msg.ignored = 0;
  9059     0E55  083C               	movf	recv_req_header@nmbs,w
  9060     0E56  3E27               	addlw	39
  9061     0E57  0086               	movwf	6
  9062     0E58  3001               	movlw	1	; select bank2/3
  9063     0E59  0087               	movwf	7
  9064     0E5A  0181               	clrf	1
  9065     0E5B                     l5612:
  9066                           
  9067                           ;nanomodbus.c: 296:     return NMBS_ERROR_NONE;
  9068     0E5B  3000               	movlw	0
  9069     0E5C  0008               	return
  9070     0E5D                     __end_of_recv_req_header:
  9071                           
  9072                           	psect	text8
  9073     0D6E                     __ptext8:	
  9074 ;; *************** function _handle_req_fc *****************
  9075 ;; Defined at:
  9076 ;;		line 1282 in file "nanomodbus.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;  nmbs            1    wreg     PTR struct nmbs_t
  9079 ;;		 -> main@nmbs(59), 
  9080 ;; Auto vars:     Size  Location     Type
  9081 ;;  nmbs            1   69[BANK0 ] PTR struct nmbs_t
  9082 ;;		 -> main@nmbs(59), 
  9083 ;;  err             1   68[BANK0 ] enum E10483
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  1    wreg      enum E10483
  9086 ;; Registers used:
  9087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9088 ;; Tracked objects:
  9089 ;;		On entry : 3F/0
  9090 ;;		On exit  : 3F/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9093 ;;      Params:         0       0       0       0       0       0       0       0
  9094 ;;      Locals:         0       2       0       0       0       0       0       0
  9095 ;;      Temps:          0       2       0       0       0       0       0       0
  9096 ;;      Totals:         0       4       0       0       0       0       0       0
  9097 ;;Total ram usage:        4 bytes
  9098 ;; Hardware stack levels used: 1
  9099 ;; Hardware stack levels required when called: 13
  9100 ;; This function calls:
  9101 ;;		_handle_read_holding_registers
  9102 ;;		_handle_read_input_registers
  9103 ;;		_handle_write_single_coil@nanomodbus$F2242
  9104 ;;		_handle_write_single_register@nanomodbus$F2271
  9105 ;; This function is called by:
  9106 ;;		_nmbs_server_poll
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110     0D6E                     _handle_req_fc:	
  9111                           ;psect for function _handle_req_fc
  9112                           
  9113                           
  9114                           ;incstack = 0
  9115                           ; Regs used in _handle_req_fc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9116                           ;handle_req_fc@nmbs stored from wreg
  9117     0D6E  00E5               	movwf	handle_req_fc@nmbs
  9118                           
  9119                           ;nanomodbus.c: 1285:     nmbs_error err;;nanomodbus.c: 1286:     switch (nmbs->msg.fc) {
  9120     0D6F  2D89               	goto	l5626
  9121     0D70                     l5618:
  9122                           
  9123                           ;nanomodbus.c: 1301:             err = handle_read_holding_registers(nmbs);
  9124     0D70  0865               	movf	handle_req_fc@nmbs,w
  9125     0D71  3189  2184  318D   	fcall	_handle_read_holding_registers
  9126     0D74  2D79               	goto	L2
  9127     0D75                     l5620:	
  9128                           ;nanomodbus.c: 1302:             break;
  9129                           
  9130                           
  9131                           ;nanomodbus.c: 1307:             err = handle_read_input_registers(nmbs);
  9132     0D75  0865               	movf	handle_req_fc@nmbs,w
  9133     0D76  3189  2192  318D   	fcall	_handle_read_input_registers
  9134     0D79                     L2:
  9135     0D79  0140               	movlb	0	; select bank0
  9136     0D7A  2D84               	goto	L4
  9137     0D7B                     l5622:	
  9138                           ;nanomodbus.c: 1308:             break;
  9139                           
  9140                           
  9141                           ;nanomodbus.c: 1313:             err = handle_write_single_coil(nmbs);
  9142     0D7B  0865               	movf	handle_req_fc@nmbs,w
  9143     0D7C  3182  225A  318D   	fcall	_handle_write_single_coil@nanomodbus$F2242
  9144     0D7F  2D84               	goto	L4
  9145     0D80                     l5624:	
  9146                           ;nanomodbus.c: 1314:             break;
  9147                           
  9148                           
  9149                           ;nanomodbus.c: 1319:             err = handle_write_single_register(nmbs);
  9150     0D80  0865               	movf	handle_req_fc@nmbs,w
  9151     0D81  3184  2452  318D   	fcall	_handle_write_single_register@nanomodbus$F2271
  9152     0D84                     L4:
  9153     0D84  00E4               	movwf	handle_req_fc@err
  9154                           
  9155                           ;nanomodbus.c: 1320:             break;
  9156     0D85  2DA4               	goto	l5628
  9157     0D86                     l890:	
  9158                           ;nanomodbus.c: 1352:         default:
  9159                           
  9160                           
  9161                           ;nanomodbus.c: 1353:             err = NMBS_EXCEPTION_ILLEGAL_FUNCTION;
  9162     0D86  01E4               	clrf	handle_req_fc@err
  9163     0D87  0AE4               	incf	handle_req_fc@err,f
  9164                           
  9165                           ;nanomodbus.c: 1354:     }
  9166     0D88  2DA4               	goto	l5628
  9167     0D89                     l5626:
  9168     0D89  0865               	movf	handle_req_fc@nmbs,w
  9169     0D8A  3E23               	addlw	35
  9170     0D8B  0086               	movwf	6
  9171     0D8C  3001               	movlw	1	; select bank2/3
  9172     0D8D  0087               	movwf	7
  9173     0D8E  0801               	movf	1,w
  9174     0D8F  00E2               	movwf	??_handle_req_fc
  9175     0D90  01E3               	clrf	??_handle_req_fc+1
  9176                           
  9177                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9178                           ; Switch size 1, requested type "simple"
  9179                           ; Number of cases is 1, Range of values is 0 to 0
  9180                           ; switch strategies available:
  9181                           ; Name         Instructions Cycles
  9182                           ; simple_byte            4     3 (average)
  9183                           ; direct_byte            8     6 (fixed)
  9184                           ; jumptable            260     6 (fixed)
  9185                           ;	Chosen strategy is simple_byte
  9186     0D91  0863               	movf	??_handle_req_fc+1,w
  9187     0D92  3A00               	xorlw	0	; case 0
  9188     0D93  1903               	skipnz
  9189     0D94  2D96               	goto	l6040
  9190     0D95  2D86               	goto	l890
  9191     0D96                     l6040:
  9192                           
  9193                           ; Switch size 1, requested type "simple"
  9194                           ; Number of cases is 4, Range of values is 3 to 6
  9195                           ; switch strategies available:
  9196                           ; Name         Instructions Cycles
  9197                           ; simple_byte           13     7 (average)
  9198                           ; direct_byte           17     9 (fixed)
  9199                           ; jumptable            263     9 (fixed)
  9200                           ;	Chosen strategy is simple_byte
  9201     0D96  0862               	movf	??_handle_req_fc,w
  9202     0D97  3A03               	xorlw	3	; case 3
  9203     0D98  1903               	skipnz
  9204     0D99  2D70               	goto	l5618
  9205     0D9A  3A07               	xorlw	7	; case 4
  9206     0D9B  1903               	skipnz
  9207     0D9C  2D75               	goto	l5620
  9208     0D9D  3A01               	xorlw	1	; case 5
  9209     0D9E  1903               	skipnz
  9210     0D9F  2D7B               	goto	l5622
  9211     0DA0  3A03               	xorlw	3	; case 6
  9212     0DA1  1903               	skipnz
  9213     0DA2  2D80               	goto	l5624
  9214     0DA3  2D86               	goto	l890
  9215     0DA4                     l5628:
  9216                           
  9217                           ;nanomodbus.c: 1356:     return err;
  9218     0DA4  0864               	movf	handle_req_fc@err,w
  9219     0DA5  0008               	return
  9220     0DA6                     __end_of_handle_req_fc:
  9221                           
  9222                           	psect	text9
  9223     0452                     __ptext9:	
  9224 ;; *************** function _handle_write_single_register@nanomodbus$F2271 *****************
  9225 ;; Defined at:
  9226 ;;		line 769 in file "nanomodbus.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;  nmbs            1    wreg     PTR struct nmbs_t
  9229 ;;		 -> main@nmbs(59), 
  9230 ;; Auto vars:     Size  Location     Type
  9231 ;;  nmbs            1   53[BANK0 ] PTR struct nmbs_t
  9232 ;;		 -> main@nmbs(59), 
  9233 ;;  value           2   51[BANK0 ] unsigned short 
  9234 ;;  address         2   49[BANK0 ] unsigned short 
  9235 ;;  err             1   48[BANK0 ] enum E10483
  9236 ;; Return value:  Size  Location     Type
  9237 ;;                  1    wreg      enum E10483
  9238 ;; Registers used:
  9239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 3F/0
  9242 ;;		On exit  : 3F/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9245 ;;      Params:         0       0       0       0       0       0       0       0
  9246 ;;      Locals:         0       6       0       0       0       0       0       0
  9247 ;;      Temps:          0       2       0       0       0       0       0       0
  9248 ;;      Totals:         0       8       0       0       0       0       0       0
  9249 ;;Total ram usage:        8 bytes
  9250 ;; Hardware stack levels used: 1
  9251 ;; Hardware stack levels required when called: 11
  9252 ;; This function calls:
  9253 ;;		_get_2
  9254 ;;		_handle_write_single_register
  9255 ;;		_put_2
  9256 ;;		_put_res_header
  9257 ;;		_recv
  9258 ;;		_recv_msg_footer
  9259 ;;		_recv_write_single_register_res
  9260 ;;		_send_msg
  9261 ;; This function is called by:
  9262 ;;		_handle_req_fc
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266     0452                     _handle_write_single_register@nanomodbus$F2271:	
  9267                           ;psect for function _handle_write_single_register@nanomodbus$F2271
  9268                           
  9269                           
  9270                           ;incstack = 0
  9271                           ; Regs used in _handle_write_single_register@nanomodbus$F2271: [wreg+fsr1l+fsr1h+status,
      +                          2+status,0+pclath+cstack]
  9272                           ;handle_write_single_register@nanomodbus$F2271@nmbs stored from wreg
  9273     0452  00D5               	movwf	handle_write_single_register@nanomodbus$F2271@nmbs
  9274                           
  9275                           ;nanomodbus.c: 770:     nmbs_error err = recv(nmbs, 4);
  9276     0453  3004               	movlw	4
  9277     0454  00B2               	movwf	recv@count
  9278     0455  3000               	movlw	0
  9279     0456  00B3               	movwf	recv@count+1
  9280     0457  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9281     0458  318B  23C8  3184   	fcall	_recv
  9282     045B  00D0               	movwf	handle_write_single_register@nanomodbus$F2271@err
  9283                           
  9284                           ;nanomodbus.c: 774:     uint16_t address = get_2(nmbs);
  9285     045C  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9286     045D  318C  24FE  3184   	fcall	_get_2
  9287     0460  0821               	movf	?_get_2+1,w
  9288     0461  00D2               	movwf	handle_write_single_register@nanomodbus$F2271@address+1
  9289     0462  0820               	movf	?_get_2,w
  9290     0463  00D1               	movwf	handle_write_single_register@nanomodbus$F2271@address
  9291                           
  9292                           ;nanomodbus.c: 775:     uint16_t value = get_2(nmbs);
  9293     0464  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9294     0465  318C  24FE  3184   	fcall	_get_2
  9295     0468  0821               	movf	?_get_2+1,w
  9296     0469  00D4               	movwf	handle_write_single_register@nanomodbus$F2271@value+1
  9297     046A  0820               	movf	?_get_2,w
  9298     046B  00D3               	movwf	handle_write_single_register@nanomodbus$F2271@value
  9299                           
  9300                           ;nanomodbus.c: 779:     err = recv_msg_footer(nmbs);
  9301     046C  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9302     046D  318E  265D  3184   	fcall	_recv_msg_footer
  9303     0470  00D0               	movwf	handle_write_single_register@nanomodbus$F2271@err
  9304                           
  9305                           ;nanomodbus.c: 783:     if (!nmbs->msg.ignored) {
  9306     0471  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9307     0472  3E27               	addlw	39
  9308     0473  0086               	movwf	6
  9309     0474  3001               	movlw	1	; select bank2/3
  9310     0475  0087               	movwf	7
  9311     0476  0801               	movf	1,w
  9312     0477  1D03               	btfss	3,2
  9313     0478  2CC7               	goto	l5352
  9314                           
  9315                           ;nanomodbus.c: 784:         if (nmbs->callbacks.write_single_register) {
  9316     0479  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9317     047A  3E2E               	addlw	46
  9318     047B  0086               	movwf	6
  9319     047C  3001               	movlw	1	; select bank2/3
  9320     047D  0087               	movwf	7
  9321     047E  0016               	moviw fsr1++
  9322     047F  0401               	iorwf	1,w
  9323     0480  1903               	btfsc	3,2
  9324     0481  2CD3               	goto	l5356
  9325     0482  0852               	movf	handle_write_single_register@nanomodbus$F2271@address+1,w
  9326     0483  00A1               	movwf	handle_write_single_register@address+1
  9327     0484  0851               	movf	handle_write_single_register@nanomodbus$F2271@address,w
  9328     0485  00A0               	movwf	handle_write_single_register@address
  9329     0486  0854               	movf	handle_write_single_register@nanomodbus$F2271@value+1,w
  9330     0487  00A3               	movwf	handle_write_single_register@registers+1
  9331     0488  0853               	movf	handle_write_single_register@nanomodbus$F2271@value,w
  9332     0489  00A2               	movwf	handle_write_single_register@registers
  9333     048A  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9334     048B  3E22               	addlw	34
  9335     048C  0086               	movwf	6
  9336     048D  3001               	movlw	1	; select bank2/3
  9337     048E  0087               	movwf	7
  9338     048F  0801               	movf	1,w
  9339     0490  00A4               	movwf	handle_write_single_register@unit_id
  9340     0491  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9341     0492  3E36               	addlw	54
  9342     0493  0086               	movwf	6
  9343     0494  3001               	movlw	1	; select bank2/3
  9344     0495  0087               	movwf	7
  9345     0496  0801               	movf	1,w
  9346     0497  00A5               	movwf	handle_write_single_register@arg
  9347     0498  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9348     0499  3E2E               	addlw	46
  9349     049A  0086               	movwf	6
  9350     049B  3001               	movlw	1	; select bank2/3
  9351     049C  0087               	movwf	7
  9352     049D  3F41               	moviw [1]fsr1
  9353     049E  008A               	movwf	10
  9354     049F  3F40               	moviw [0]fsr1
  9355     04A0  000A               	callw
  9356     04A1  3184               	pagesel	$
  9357                           
  9358                           ;nanomodbus.c: 794:             if (!nmbs->msg.broadcast) {
  9359     04A2  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9360     04A3  3E26               	addlw	38
  9361     04A4  0086               	movwf	6
  9362     04A5  3001               	movlw	1	; select bank2/3
  9363     04A6  0087               	movwf	7
  9364     04A7  0801               	movf	1,w
  9365     04A8  1D03               	btfss	3,2
  9366     04A9  2CD3               	goto	l5356
  9367                           
  9368                           ;nanomodbus.c: 795:                 put_res_header(nmbs, 4);
  9369     04AA  3004               	movlw	4
  9370     04AB  00A7               	movwf	put_res_header@data_length
  9371     04AC  3000               	movlw	0
  9372     04AD  00A8               	movwf	put_res_header@data_length+1
  9373     04AE  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9374     04AF  3189  2117  3184   	fcall	_put_res_header
  9375                           
  9376                           ;nanomodbus.c: 797:                 put_2(nmbs, address);
  9377     04B2  0852               	movf	handle_write_single_register@nanomodbus$F2271@address+1,w
  9378     04B3  00A1               	movwf	put_2@data+1
  9379     04B4  0851               	movf	handle_write_single_register@nanomodbus$F2271@address,w
  9380     04B5  00A0               	movwf	put_2@data
  9381     04B6  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9382     04B7  318B  2370  3184   	fcall	_put_2
  9383                           
  9384                           ;nanomodbus.c: 798:                 put_2(nmbs, value);
  9385     04BA  0854               	movf	handle_write_single_register@nanomodbus$F2271@value+1,w
  9386     04BB  00A1               	movwf	put_2@data+1
  9387     04BC  0853               	movf	handle_write_single_register@nanomodbus$F2271@value,w
  9388     04BD  00A0               	movwf	put_2@data
  9389     04BE  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9390     04BF  318B  2370  3184   	fcall	_put_2
  9391     04C2  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9392     04C3  318D  2536  3184   	fcall	_send_msg
  9393     04C6  2CD3               	goto	l5356
  9394     04C7                     l5352:
  9395                           
  9396                           ;nanomodbus.c: 811:         return recv_write_single_register_res(nmbs, address, value);
  9397     04C7  0852               	movf	handle_write_single_register@nanomodbus$F2271@address+1,w
  9398     04C8  00C9               	movwf	recv_write_single_register_res@address+1
  9399     04C9  0851               	movf	handle_write_single_register@nanomodbus$F2271@address,w
  9400     04CA  00C8               	movwf	recv_write_single_register_res@address
  9401     04CB  0854               	movf	handle_write_single_register@nanomodbus$F2271@value+1,w
  9402     04CC  00CB               	movwf	recv_write_single_register_res@value_req+1
  9403     04CD  0853               	movf	handle_write_single_register@nanomodbus$F2271@value,w
  9404     04CE  00CA               	movwf	recv_write_single_register_res@value_req
  9405     04CF  0855               	movf	handle_write_single_register@nanomodbus$F2271@nmbs,w
  9406     04D0  318A  22CC         	fcall	_recv_write_single_register_res
  9407     04D2  0008               	return
  9408     04D3                     l5356:
  9409                           
  9410                           ;nanomodbus.c: 814:     return NMBS_ERROR_NONE;
  9411     04D3  3000               	movlw	0
  9412     04D4  0008               	return
  9413     04D5                     __end_of_handle_write_single_register@nanomodbus$F2271:
  9414                           
  9415                           	psect	text10
  9416     0ACC                     __ptext10:	
  9417 ;; *************** function _recv_write_single_register_res *****************
  9418 ;; Defined at:
  9419 ;;		line 478 in file "nanomodbus.c"
  9420 ;; Parameters:    Size  Location     Type
  9421 ;;  nmbs            1    wreg     PTR struct nmbs_t
  9422 ;;		 -> main@nmbs(59), 
  9423 ;;  address         2   40[BANK0 ] unsigned short 
  9424 ;;  value_req       2   42[BANK0 ] unsigned short 
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;  nmbs            1   45[BANK0 ] PTR struct nmbs_t
  9427 ;;		 -> main@nmbs(59), 
  9428 ;;  value_res       2    0        unsigned short 
  9429 ;;  address_res     2    0        unsigned short 
  9430 ;;  err             1   44[BANK0 ] enum E10483
  9431 ;; Return value:  Size  Location     Type
  9432 ;;                  1    wreg      enum E10483
  9433 ;; Registers used:
  9434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9435 ;; Tracked objects:
  9436 ;;		On entry : 3F/0
  9437 ;;		On exit  : 3F/0
  9438 ;;		Unchanged: 0/0
  9439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9440 ;;      Params:         0       4       0       0       0       0       0       0
  9441 ;;      Locals:         0       2       0       0       0       0       0       0
  9442 ;;      Temps:          0       0       0       0       0       0       0       0
  9443 ;;      Totals:         0       6       0       0       0       0       0       0
  9444 ;;Total ram usage:        6 bytes
  9445 ;; Hardware stack levels used: 1
  9446 ;; Hardware stack levels required when called: 10
  9447 ;; This function calls:
  9448 ;;		_get_2
  9449 ;;		_recv
  9450 ;;		_recv_msg_footer
  9451 ;;		_recv_res_header
  9452 ;; This function is called by:
  9453 ;;		_handle_write_single_register@nanomodbus$F2271
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457     0ACC                     _recv_write_single_register_res:	
  9458                           ;psect for function _recv_write_single_register_res
  9459                           
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in _recv_write_single_register_res: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  9463                           ;recv_write_single_register_res@nmbs stored from wreg
  9464     0ACC  00CD               	movwf	recv_write_single_register_res@nmbs
  9465                           
  9466                           ;nanomodbus.c: 479:     nmbs_error err = recv_res_header(nmbs);
  9467     0ACD  084D               	movf	recv_write_single_register_res@nmbs,w
  9468     0ACE  3183  23BF  318A   	fcall	_recv_res_header
  9469     0AD1  00CC               	movwf	recv_write_single_register_res@err
  9470                           
  9471                           ;nanomodbus.c: 483:     err = recv(nmbs, 4);
  9472     0AD2  3004               	movlw	4
  9473     0AD3  00B2               	movwf	recv@count
  9474     0AD4  3000               	movlw	0
  9475     0AD5  00B3               	movwf	recv@count+1
  9476     0AD6  084D               	movf	recv_write_single_register_res@nmbs,w
  9477     0AD7  318B  23C8  318A   	fcall	_recv
  9478     0ADA  00CC               	movwf	recv_write_single_register_res@err
  9479     0ADB  084D               	movf	recv_write_single_register_res@nmbs,w
  9480     0ADC  318C  24FE  318A   	fcall	_get_2
  9481     0ADF  084D               	movf	recv_write_single_register_res@nmbs,w
  9482     0AE0  318C  24FE  318A   	fcall	_get_2
  9483                           
  9484                           ;nanomodbus.c: 491:     err = recv_msg_footer(nmbs);
  9485     0AE3  084D               	movf	recv_write_single_register_res@nmbs,w
  9486     0AE4  318E  265D         	fcall	_recv_msg_footer
  9487     0AE6  00CC               	movwf	recv_write_single_register_res@err
  9488                           
  9489                           ;nanomodbus.c: 501:     return NMBS_ERROR_NONE;
  9490     0AE7  3000               	movlw	0
  9491     0AE8  0008               	return
  9492     0AE9                     __end_of_recv_write_single_register_res:
  9493                           
  9494                           	psect	text11
  9495     0A2C                     __ptext11:	
  9496 ;; *************** function _handle_write_single_register *****************
  9497 ;; Defined at:
  9498 ;;		line 111 in file "modbus_imp.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;  address         2    0[BANK0 ] unsigned short 
  9501 ;;  registers       2    2[BANK0 ] PTR const unsigned short
  9502 ;;  unit_id         1    4[BANK0 ] unsigned char 
  9503 ;;  arg             1    5[BANK0 ] PTR void 
  9504 ;;		 -> main@registers(11), 
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  server_regis    1    7[BANK0 ] PTR unsigned short 
  9507 ;;		 -> registers.server_holding_register(4), main@registers(11), 
  9508 ;; Return value:  Size  Location     Type
  9509 ;;                  1    wreg      enum E10517
  9510 ;; Registers used:
  9511 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9512 ;; Tracked objects:
  9513 ;;		On entry : 3F/0
  9514 ;;		On exit  : 3F/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9517 ;;      Params:         0       6       0       0       0       0       0       0
  9518 ;;      Locals:         0       1       0       0       0       0       0       0
  9519 ;;      Temps:          0       1       0       0       0       0       0       0
  9520 ;;      Totals:         0       8       0       0       0       0       0       0
  9521 ;;Total ram usage:        8 bytes
  9522 ;; Hardware stack levels used: 1
  9523 ;; Hardware stack levels required when called: 5
  9524 ;; This function calls:
  9525 ;;		Nothing
  9526 ;; This function is called by:
  9527 ;;		_main
  9528 ;;		_handle_write_single_register@nanomodbus$F2271
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532     0A2C                     _handle_write_single_register:	
  9533                           ;psect for function _handle_write_single_register
  9534                           
  9535                           
  9536                           ;modbus_imp.c: 112:   if (address > 2)
  9537                           
  9538                           ;incstack = 0
  9539                           ; Regs used in _handle_write_single_register: [wreg+fsr1l+fsr1h+status,2+status,0]
  9540     0A2C  3000               	movlw	0
  9541     0A2D  0221               	subwf	handle_write_single_register@address+1,w
  9542     0A2E  3003               	movlw	3
  9543     0A2F  1903               	skipnz
  9544     0A30  0220               	subwf	handle_write_single_register@address,w
  9545     0A31  1C03               	skipc
  9546     0A32  2A35               	goto	l5072
  9547                           
  9548                           ;modbus_imp.c: 113:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
  9549     0A33  3002               	movlw	2
  9550     0A34  0008               	return
  9551     0A35                     l5072:
  9552                           
  9553                           ;modbus_imp.c: 116:   uint16_t* server_registers = (uint16_t *)(&(((mod_bus_registers*) 
      +                          arg)->server_holding_register));
  9554     0A35  0825               	movf	handle_write_single_register@arg,w
  9555     0A36  3E07               	addlw	7
  9556     0A37  00A7               	movwf	handle_write_single_register@server_registers
  9557                           
  9558                           ;modbus_imp.c: 118:   server_registers[address] = registers;
  9559     0A38  3520               	lslf	handle_write_single_register@address,w
  9560     0A39  0727               	addwf	handle_write_single_register@server_registers,w
  9561     0A3A  00A6               	movwf	??_handle_write_single_register
  9562     0A3B  0826               	movf	??_handle_write_single_register,w
  9563     0A3C  0086               	movwf	6
  9564     0A3D  0187               	clrf	7
  9565     0A3E  0822               	movf	handle_write_single_register@registers,w
  9566     0A3F  3FC0               	movwi [0]fsr1
  9567     0A40  0823               	movf	handle_write_single_register@registers+1,w
  9568     0A41  3FC1               	movwi [1]fsr1
  9569                           
  9570                           ;modbus_imp.c: 120:   return NMBS_ERROR_NONE;
  9571     0A42  3000               	movlw	0
  9572     0A43  0008               	return
  9573     0A44                     __end_of_handle_write_single_register:
  9574                           
  9575                           	psect	text12
  9576     025A                     __ptext12:	
  9577 ;; *************** function _handle_write_single_coil@nanomodbus$F2242 *****************
  9578 ;; Defined at:
  9579 ;;		line 716 in file "nanomodbus.c"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;  nmbs            1    wreg     PTR struct nmbs_t
  9582 ;;		 -> main@nmbs(59), 
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;  nmbs            1   57[BANK0 ] PTR struct nmbs_t
  9585 ;;		 -> main@nmbs(59), 
  9586 ;;  val             1    0        _Bool 
  9587 ;;  value           2   54[BANK0 ] unsigned short 
  9588 ;;  address         2   52[BANK0 ] unsigned short 
  9589 ;;  err             1   56[BANK0 ] enum E10483
  9590 ;; Return value:  Size  Location     Type
  9591 ;;                  1    wreg      enum E10483
  9592 ;; Registers used:
  9593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9594 ;; Tracked objects:
  9595 ;;		On entry : 3F/0
  9596 ;;		On exit  : 3F/0
  9597 ;;		Unchanged: 0/0
  9598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9599 ;;      Params:         0       0       0       0       0       0       0       0
  9600 ;;      Locals:         0       6       0       0       0       0       0       0
  9601 ;;      Temps:          0       2       0       0       0       0       0       0
  9602 ;;      Totals:         0       8       0       0       0       0       0       0
  9603 ;;Total ram usage:        8 bytes
  9604 ;; Hardware stack levels used: 1
  9605 ;; Hardware stack levels required when called: 11
  9606 ;; This function calls:
  9607 ;;		_get_2
  9608 ;;		_handle_write_single_coil
  9609 ;;		_put_2
  9610 ;;		_put_res_header
  9611 ;;		_recv
  9612 ;;		_recv_msg_footer
  9613 ;;		_recv_write_single_coil_res
  9614 ;;		_send_exception_msg
  9615 ;;		_send_msg
  9616 ;; This function is called by:
  9617 ;;		_handle_req_fc
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621     025A                     _handle_write_single_coil@nanomodbus$F2242:	
  9622                           ;psect for function _handle_write_single_coil@nanomodbus$F2242
  9623                           
  9624                           
  9625                           ;incstack = 0
  9626                           ; Regs used in _handle_write_single_coil@nanomodbus$F2242: [wreg+fsr1l+fsr1h+status,2+st
      +                          atus,0+pclath+cstack]
  9627                           ;handle_write_single_coil@nanomodbus$F2242@nmbs stored from wreg
  9628     025A  00D9               	movwf	handle_write_single_coil@nanomodbus$F2242@nmbs
  9629                           
  9630                           ;nanomodbus.c: 717:     nmbs_error err = recv(nmbs, 4);
  9631     025B  3004               	movlw	4
  9632     025C  00B2               	movwf	recv@count
  9633     025D  3000               	movlw	0
  9634     025E  00B3               	movwf	recv@count+1
  9635     025F  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9636     0260  318B  23C8  3182   	fcall	_recv
  9637     0263  00D8               	movwf	handle_write_single_coil@nanomodbus$F2242@err
  9638                           
  9639                           ;nanomodbus.c: 718:     if (err != NMBS_ERROR_NONE)
  9640     0264  0858               	movf	handle_write_single_coil@nanomodbus$F2242@err,w
  9641     0265  1903               	btfsc	3,2
  9642     0266  2A69               	goto	l5280
  9643     0267                     l5276:
  9644                           
  9645                           ;nanomodbus.c: 719:         return err;
  9646     0267  0858               	movf	handle_write_single_coil@nanomodbus$F2242@err,w
  9647     0268  0008               	return
  9648     0269                     l5280:
  9649                           
  9650                           ;nanomodbus.c: 721:     uint16_t address = get_2(nmbs);
  9651     0269  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9652     026A  318C  24FE  3182   	fcall	_get_2
  9653     026D  0821               	movf	?_get_2+1,w
  9654     026E  00D5               	movwf	handle_write_single_coil@nanomodbus$F2242@address+1
  9655     026F  0820               	movf	?_get_2,w
  9656     0270  00D4               	movwf	handle_write_single_coil@nanomodbus$F2242@address
  9657                           
  9658                           ;nanomodbus.c: 722:     uint16_t value = get_2(nmbs);
  9659     0271  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9660     0272  318C  24FE  3182   	fcall	_get_2
  9661     0275  0821               	movf	?_get_2+1,w
  9662     0276  00D7               	movwf	handle_write_single_coil@nanomodbus$F2242@value+1
  9663     0277  0820               	movf	?_get_2,w
  9664     0278  00D6               	movwf	handle_write_single_coil@nanomodbus$F2242@value
  9665                           
  9666                           ;nanomodbus.c: 726:     err = recv_msg_footer(nmbs);
  9667     0279  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9668     027A  318E  265D  3182   	fcall	_recv_msg_footer
  9669     027D  00D8               	movwf	handle_write_single_coil@nanomodbus$F2242@err
  9670                           
  9671                           ;nanomodbus.c: 727:     if (err != NMBS_ERROR_NONE)
  9672     027E  0858               	movf	handle_write_single_coil@nanomodbus$F2242@err,w
  9673     027F  1D03               	btfss	3,2
  9674     0280  2A67               	goto	l5276
  9675                           
  9676                           ;nanomodbus.c: 730:     if (!nmbs->msg.ignored) {
  9677     0281  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9678     0282  3E27               	addlw	39
  9679     0283  0086               	movwf	6
  9680     0284  3001               	movlw	1	; select bank2/3
  9681     0285  0087               	movwf	7
  9682     0286  0801               	movf	1,w
  9683     0287  1D03               	btfss	3,2
  9684     0288  2B0D               	goto	l5332
  9685                           
  9686                           ;nanomodbus.c: 731:         if (nmbs->callbacks.write_single_coil) {
  9687     0289  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9688     028A  3E2C               	addlw	44
  9689     028B  0086               	movwf	6
  9690     028C  3001               	movlw	1	; select bank2/3
  9691     028D  0087               	movwf	7
  9692     028E  0016               	moviw fsr1++
  9693     028F  0401               	iorwf	1,w
  9694     0290  1903               	btfsc	3,2
  9695     0291  2B07               	goto	l5328
  9696                           
  9697                           ;nanomodbus.c: 732:             if (value != 0 && value != 0xFF00)
  9698     0292  0856               	movf	handle_write_single_coil@nanomodbus$F2242@value,w
  9699     0293  0457               	iorwf	handle_write_single_coil@nanomodbus$F2242@value+1,w
  9700     0294  1903               	btfsc	3,2
  9701     0295  2AA0               	goto	l5302
  9702     0296  0A57               	incf	handle_write_single_coil@nanomodbus$F2242@value+1,w
  9703     0297  0456               	iorwf	handle_write_single_coil@nanomodbus$F2242@value,w
  9704     0298  1903               	btfsc	3,2
  9705     0299  2AA0               	goto	l5302
  9706                           
  9707                           ;nanomodbus.c: 733:                 return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEG
      +                          AL_DATA_VALUE);
  9708     029A  3003               	movlw	3
  9709     029B  00C2               	movwf	send_exception_msg@exception
  9710     029C  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9711     029D  318A  22AF         	fcall	_send_exception_msg
  9712     029F  0008               	return
  9713     02A0                     l5302:
  9714                           
  9715                           ;nanomodbus.c: 735:             err = nmbs->callbacks.write_single_coil(address,value, n
      +                          mbs->msg.unit_id, nmbs->platform.arg);
  9716     02A0  0855               	movf	handle_write_single_coil@nanomodbus$F2242@address+1,w
  9717     02A1  00A1               	movwf	handle_write_single_coil@address+1
  9718     02A2  0854               	movf	handle_write_single_coil@nanomodbus$F2242@address,w
  9719     02A3  00A0               	movwf	handle_write_single_coil@address
  9720     02A4  0856               	movf	handle_write_single_coil@nanomodbus$F2242@value,w
  9721     02A5  0457               	iorwf	handle_write_single_coil@nanomodbus$F2242@value+1,w
  9722     02A6  1903               	btfsc	3,2
  9723     02A7  2AAA               	goto	u3760
  9724     02A8  3001               	movlw	1
  9725     02A9  2AAB               	goto	u3770
  9726     02AA                     u3760:
  9727     02AA  3000               	movlw	0
  9728     02AB                     u3770:
  9729     02AB  00A2               	movwf	handle_write_single_coil@coils
  9730     02AC  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9731     02AD  3E22               	addlw	34
  9732     02AE  0086               	movwf	6
  9733     02AF  3001               	movlw	1	; select bank2/3
  9734     02B0  0087               	movwf	7
  9735     02B1  0801               	movf	1,w
  9736     02B2  00A3               	movwf	handle_write_single_coil@unit_id
  9737     02B3  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9738     02B4  3E36               	addlw	54
  9739     02B5  0086               	movwf	6
  9740     02B6  3001               	movlw	1	; select bank2/3
  9741     02B7  0087               	movwf	7
  9742     02B8  0801               	movf	1,w
  9743     02B9  00A4               	movwf	handle_write_single_coil@arg
  9744     02BA  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9745     02BB  3E2C               	addlw	44
  9746     02BC  0086               	movwf	6
  9747     02BD  3001               	movlw	1	; select bank2/3
  9748     02BE  0087               	movwf	7
  9749     02BF  3F41               	moviw [1]fsr1
  9750     02C0  008A               	movwf	10
  9751     02C1  3F40               	moviw [0]fsr1
  9752     02C2  000A               	callw
  9753     02C3  3182               	pagesel	$
  9754     02C4  00D8               	movwf	handle_write_single_coil@nanomodbus$F2242@err
  9755                           
  9756                           ;nanomodbus.c: 736:             if (err != NMBS_ERROR_NONE) {
  9757     02C5  0858               	movf	handle_write_single_coil@nanomodbus$F2242@err,w
  9758     02C6  1903               	btfsc	3,2
  9759     02C7  2ADE               	goto	l5318
  9760                           
  9761                           ;nanomodbus.c: 737:                 if (((err) > 0 && (err) < 5))
  9762     02C8  0858               	movf	handle_write_single_coil@nanomodbus$F2242@err,w
  9763     02C9  3A80               	xorlw	128
  9764     02CA  3E7F               	addlw	-129
  9765     02CB  1C03               	skipc
  9766     02CC  2AD8               	goto	l5314
  9767     02CD  0858               	movf	handle_write_single_coil@nanomodbus$F2242@err,w
  9768     02CE  3A80               	xorlw	128
  9769     02CF  3E7B               	addlw	-133
  9770     02D0  1803               	skipnc
  9771     02D1  2AD8               	goto	l5314
  9772                           
  9773                           ;nanomodbus.c: 738:                     return send_exception_msg(nmbs, err);
  9774     02D2  0858               	movf	handle_write_single_coil@nanomodbus$F2242@err,w
  9775     02D3  00C2               	movwf	send_exception_msg@exception
  9776     02D4  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9777     02D5  318A  22AF         	fcall	_send_exception_msg
  9778     02D7  0008               	return
  9779     02D8                     l5314:
  9780                           
  9781                           ;nanomodbus.c: 740:                 return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVE
      +                          R_DEVICE_FAILURE);
  9782     02D8  3004               	movlw	4
  9783     02D9  00C2               	movwf	send_exception_msg@exception
  9784     02DA  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9785     02DB  318A  22AF         	fcall	_send_exception_msg
  9786     02DD  0008               	return
  9787     02DE                     l5318:
  9788                           
  9789                           ;nanomodbus.c: 743:             if (!nmbs->msg.broadcast) {
  9790     02DE  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9791     02DF  3E26               	addlw	38
  9792     02E0  0086               	movwf	6
  9793     02E1  3001               	movlw	1	; select bank2/3
  9794     02E2  0087               	movwf	7
  9795     02E3  0801               	movf	1,w
  9796     02E4  1D03               	btfss	3,2
  9797     02E5  2B19               	goto	l5336
  9798                           
  9799                           ;nanomodbus.c: 744:                 put_res_header(nmbs, 4);
  9800     02E6  3004               	movlw	4
  9801     02E7  00A7               	movwf	put_res_header@data_length
  9802     02E8  3000               	movlw	0
  9803     02E9  00A8               	movwf	put_res_header@data_length+1
  9804     02EA  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9805     02EB  3189  2117  3182   	fcall	_put_res_header
  9806                           
  9807                           ;nanomodbus.c: 746:                 put_2(nmbs, address);
  9808     02EE  0855               	movf	handle_write_single_coil@nanomodbus$F2242@address+1,w
  9809     02EF  00A1               	movwf	put_2@data+1
  9810     02F0  0854               	movf	handle_write_single_coil@nanomodbus$F2242@address,w
  9811     02F1  00A0               	movwf	put_2@data
  9812     02F2  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9813     02F3  318B  2370  3182   	fcall	_put_2
  9814                           
  9815                           ;nanomodbus.c: 747:                 put_2(nmbs, value);
  9816     02F6  0857               	movf	handle_write_single_coil@nanomodbus$F2242@value+1,w
  9817     02F7  00A1               	movwf	put_2@data+1
  9818     02F8  0856               	movf	handle_write_single_coil@nanomodbus$F2242@value,w
  9819     02F9  00A0               	movwf	put_2@data
  9820     02FA  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9821     02FB  318B  2370  3182   	fcall	_put_2
  9822                           
  9823                           ;nanomodbus.c: 750:                 err = send_msg(nmbs);
  9824     02FE  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9825     02FF  318D  2536  3182   	fcall	_send_msg
  9826     0302  00D8               	movwf	handle_write_single_coil@nanomodbus$F2242@err
  9827                           
  9828                           ;nanomodbus.c: 751:                 if (err != NMBS_ERROR_NONE)
  9829     0303  0858               	movf	handle_write_single_coil@nanomodbus$F2242@err,w
  9830     0304  1D03               	btfss	3,2
  9831     0305  2A67               	goto	l5276
  9832     0306  2B19               	goto	l5336
  9833     0307                     l5328:
  9834                           
  9835                           ;nanomodbus.c: 756:             return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_F
      +                          UNCTION);
  9836     0307  01C2               	clrf	send_exception_msg@exception
  9837     0308  0AC2               	incf	send_exception_msg@exception,f
  9838     0309  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9839     030A  318A  22AF         	fcall	_send_exception_msg
  9840     030C  0008               	return
  9841     030D                     l5332:	
  9842                           ;nanomodbus.c: 758:     }
  9843                           
  9844                           ;nanomodbus.c: 757:         }
  9845                           
  9846                           
  9847                           ;nanomodbus.c: 760:         return recv_write_single_coil_res(nmbs, address, value);
  9848     030D  0855               	movf	handle_write_single_coil@nanomodbus$F2242@address+1,w
  9849     030E  00C9               	movwf	recv_write_single_coil_res@address+1
  9850     030F  0854               	movf	handle_write_single_coil@nanomodbus$F2242@address,w
  9851     0310  00C8               	movwf	recv_write_single_coil_res@address
  9852     0311  0857               	movf	handle_write_single_coil@nanomodbus$F2242@value+1,w
  9853     0312  00CB               	movwf	recv_write_single_coil_res@value_req+1
  9854     0313  0856               	movf	handle_write_single_coil@nanomodbus$F2242@value,w
  9855     0314  00CA               	movwf	recv_write_single_coil_res@value_req
  9856     0315  0859               	movf	handle_write_single_coil@nanomodbus$F2242@nmbs,w
  9857     0316  318E  26A0         	fcall	_recv_write_single_coil_res
  9858     0318  0008               	return
  9859     0319                     l5336:
  9860                           
  9861                           ;nanomodbus.c: 763:     return NMBS_ERROR_NONE;
  9862     0319  3000               	movlw	0
  9863     031A  0008               	return
  9864     031B                     __end_of_handle_write_single_coil@nanomodbus$F2242:
  9865                           
  9866                           	psect	text13
  9867     0EA0                     __ptext13:	
  9868 ;; *************** function _recv_write_single_coil_res *****************
  9869 ;; Defined at:
  9870 ;;		line 450 in file "nanomodbus.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;  nmbs            1    wreg     PTR struct nmbs_t
  9873 ;;		 -> main@nmbs(59), 
  9874 ;;  address         2   40[BANK0 ] unsigned short 
  9875 ;;  value_req       2   42[BANK0 ] unsigned short 
  9876 ;; Auto vars:     Size  Location     Type
  9877 ;;  nmbs            1   48[BANK0 ] PTR struct nmbs_t
  9878 ;;		 -> main@nmbs(59), 
  9879 ;;  value_res       2   46[BANK0 ] unsigned short 
  9880 ;;  address_res     2   44[BANK0 ] unsigned short 
  9881 ;;  err             1   49[BANK0 ] enum E10483
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  1    wreg      enum E10483
  9884 ;; Registers used:
  9885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9886 ;; Tracked objects:
  9887 ;;		On entry : 3F/0
  9888 ;;		On exit  : 3F/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9891 ;;      Params:         0       4       0       0       0       0       0       0
  9892 ;;      Locals:         0       6       0       0       0       0       0       0
  9893 ;;      Temps:          0       0       0       0       0       0       0       0
  9894 ;;      Totals:         0      10       0       0       0       0       0       0
  9895 ;;Total ram usage:       10 bytes
  9896 ;; Hardware stack levels used: 1
  9897 ;; Hardware stack levels required when called: 10
  9898 ;; This function calls:
  9899 ;;		_get_2
  9900 ;;		_recv
  9901 ;;		_recv_msg_footer
  9902 ;;		_recv_res_header
  9903 ;; This function is called by:
  9904 ;;		_handle_write_single_coil@nanomodbus$F2242
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908     0EA0                     _recv_write_single_coil_res:	
  9909                           ;psect for function _recv_write_single_coil_res
  9910                           
  9911                           
  9912                           ;incstack = 0
  9913                           ; Regs used in _recv_write_single_coil_res: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9914                           ;recv_write_single_coil_res@nmbs stored from wreg
  9915     0EA0  00D0               	movwf	recv_write_single_coil_res@nmbs
  9916                           
  9917                           ;nanomodbus.c: 451:     nmbs_error err = recv_res_header(nmbs);
  9918     0EA1  0850               	movf	recv_write_single_coil_res@nmbs,w
  9919     0EA2  3183  23BF  318E   	fcall	_recv_res_header
  9920     0EA5  00D1               	movwf	recv_write_single_coil_res@err
  9921                           
  9922                           ;nanomodbus.c: 452:     if (err != NMBS_ERROR_NONE)
  9923     0EA6  0851               	movf	recv_write_single_coil_res@err,w
  9924     0EA7  1903               	btfsc	3,2
  9925     0EA8  2EAB               	goto	l5088
  9926     0EA9                     l5084:
  9927                           
  9928                           ;nanomodbus.c: 453:         return err;
  9929     0EA9  0851               	movf	recv_write_single_coil_res@err,w
  9930     0EAA  0008               	return
  9931     0EAB                     l5088:
  9932                           
  9933                           ;nanomodbus.c: 455:     err = recv(nmbs, 4);
  9934     0EAB  3004               	movlw	4
  9935     0EAC  00B2               	movwf	recv@count
  9936     0EAD  3000               	movlw	0
  9937     0EAE  00B3               	movwf	recv@count+1
  9938     0EAF  0850               	movf	recv_write_single_coil_res@nmbs,w
  9939     0EB0  318B  23C8  318E   	fcall	_recv
  9940     0EB3  00D1               	movwf	recv_write_single_coil_res@err
  9941                           
  9942                           ;nanomodbus.c: 456:     if (err != NMBS_ERROR_NONE)
  9943     0EB4  0851               	movf	recv_write_single_coil_res@err,w
  9944     0EB5  1D03               	btfss	3,2
  9945     0EB6  2EA9               	goto	l5084
  9946                           
  9947                           ;nanomodbus.c: 459:     uint16_t address_res = get_2(nmbs);
  9948     0EB7  0850               	movf	recv_write_single_coil_res@nmbs,w
  9949     0EB8  318C  24FE  318E   	fcall	_get_2
  9950     0EBB  0821               	movf	?_get_2+1,w
  9951     0EBC  00CD               	movwf	recv_write_single_coil_res@address_res+1
  9952     0EBD  0820               	movf	?_get_2,w
  9953     0EBE  00CC               	movwf	recv_write_single_coil_res@address_res
  9954                           
  9955                           ;nanomodbus.c: 460:     uint16_t value_res = get_2(nmbs);
  9956     0EBF  0850               	movf	recv_write_single_coil_res@nmbs,w
  9957     0EC0  318C  24FE  318E   	fcall	_get_2
  9958     0EC3  0821               	movf	?_get_2+1,w
  9959     0EC4  00CF               	movwf	recv_write_single_coil_res@value_res+1
  9960     0EC5  0820               	movf	?_get_2,w
  9961     0EC6  00CE               	movwf	recv_write_single_coil_res@value_res
  9962                           
  9963                           ;nanomodbus.c: 464:     err = recv_msg_footer(nmbs);
  9964     0EC7  0850               	movf	recv_write_single_coil_res@nmbs,w
  9965     0EC8  318E  265D  318E   	fcall	_recv_msg_footer
  9966     0ECB  00D1               	movwf	recv_write_single_coil_res@err
  9967                           
  9968                           ;nanomodbus.c: 465:     if (err != NMBS_ERROR_NONE)
  9969     0ECC  0851               	movf	recv_write_single_coil_res@err,w
  9970     0ECD  1D03               	btfss	3,2
  9971     0ECE  2EA9               	goto	l5084
  9972                           
  9973                           ;nanomodbus.c: 468:     if (address_res != address)
  9974     0ECF  0849               	movf	recv_write_single_coil_res@address+1,w
  9975     0ED0  064D               	xorwf	recv_write_single_coil_res@address_res+1,w
  9976     0ED1  1D03               	skipz
  9977     0ED2  2ED5               	goto	u3485
  9978     0ED3  0848               	movf	recv_write_single_coil_res@address,w
  9979     0ED4  064C               	xorwf	recv_write_single_coil_res@address_res,w
  9980     0ED5                     u3485:
  9981     0ED5  1903               	skipnz
  9982     0ED6  2ED9               	goto	l5110
  9983     0ED7                     l5106:
  9984                           
  9985                           ;nanomodbus.c: 469:         return NMBS_ERROR_INVALID_RESPONSE;
  9986     0ED7  30FE               	movlw	254
  9987     0ED8  0008               	return
  9988     0ED9                     l5110:
  9989                           
  9990                           ;nanomodbus.c: 471:     if (value_res != value_req)
  9991     0ED9  084B               	movf	recv_write_single_coil_res@value_req+1,w
  9992     0EDA  064F               	xorwf	recv_write_single_coil_res@value_res+1,w
  9993     0EDB  1D03               	skipz
  9994     0EDC  2EDF               	goto	u3495
  9995     0EDD  084A               	movf	recv_write_single_coil_res@value_req,w
  9996     0EDE  064E               	xorwf	recv_write_single_coil_res@value_res,w
  9997     0EDF                     u3495:
  9998     0EDF  1D03               	btfss	3,2
  9999     0EE0  2ED7               	goto	l5106
 10000                           
 10001                           ;nanomodbus.c: 474:     return NMBS_ERROR_NONE;
 10002     0EE1  3000               	movlw	0
 10003     0EE2  0008               	return
 10004     0EE3                     __end_of_recv_write_single_coil_res:
 10005                           
 10006                           	psect	text14
 10007     0554                     __ptext14:	
 10008 ;; *************** function _handle_write_single_coil *****************
 10009 ;; Defined at:
 10010 ;;		line 75 in file "modbus_imp.c"
 10011 ;; Parameters:    Size  Location     Type
 10012 ;;  address         2    0[BANK0 ] unsigned short 
 10013 ;;  coils           1    2[BANK0 ] _Bool 
 10014 ;;  unit_id         1    3[BANK0 ] unsigned char 
 10015 ;;  arg             1    4[BANK0 ] PTR void 
 10016 ;;		 -> main@registers(11), 
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;  server_coils    1   13[BANK0 ] PTR unsigned char [1]
 10019 ;;		 -> registers.server_coils.coils(1), 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  1    wreg      enum E10517
 10022 ;; Registers used:
 10023 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10024 ;; Tracked objects:
 10025 ;;		On entry : 3F/0
 10026 ;;		On exit  : 3F/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10029 ;;      Params:         0       5       0       0       0       0       0       0
 10030 ;;      Locals:         0       3       0       0       0       0       0       0
 10031 ;;      Temps:          0       6       0       0       0       0       0       0
 10032 ;;      Totals:         0      14       0       0       0       0       0       0
 10033 ;;Total ram usage:       14 bytes
 10034 ;; Hardware stack levels used: 1
 10035 ;; Hardware stack levels required when called: 5
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		_main
 10040 ;;		_handle_write_single_coil@nanomodbus$F2242
 10041 ;; This function uses a non-reentrant model
 10042 ;;
 10043                           
 10044     0554                     _handle_write_single_coil:	
 10045                           ;psect for function _handle_write_single_coil
 10046                           
 10047                           
 10048                           ;modbus_imp.c: 76:   if (address > 2)
 10049                           
 10050                           ;incstack = 0
 10051                           ; Regs used in _handle_write_single_coil: [wreg+fsr1l+fsr1h+status,2+status,0]
 10052     0554  3000               	movlw	0
 10053     0555  0221               	subwf	handle_write_single_coil@address+1,w
 10054     0556  3003               	movlw	3
 10055     0557  1903               	skipnz
 10056     0558  0220               	subwf	handle_write_single_coil@address,w
 10057     0559  1C03               	skipc
 10058     055A  2D5D               	goto	l5054
 10059                           
 10060                           ;modbus_imp.c: 77:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 10061     055B  3002               	movlw	2
 10062     055C  0008               	return
 10063     055D                     l5054:
 10064                           
 10065                           ;modbus_imp.c: 80:   nmbs_bitfield *server_coils = &((mod_bus_registers*) arg)->server_c
      +                          oils.coils;
 10066     055D  0824               	movf	handle_write_single_coil@arg,w
 10067     055E  00AD               	movwf	handle_write_single_coil@server_coils
 10068                           
 10069                           ;modbus_imp.c: 81:   (((*server_coils)[(address) / 8]) = ((coils) ? (((*server_coils)[(a
      +                          ddress) / 8]) | (0x1 << ((address) % 8))) : (((*server_coils)[(address) / 8]) & ~(0x1 <<
      +                           ((address) % 8)))));
 10070     055F  0822               	movf	handle_write_single_coil@coils,w
 10071     0560  1D03               	btfss	3,2
 10072     0561  2D84               	goto	l5060
 10073     0562  0821               	movf	handle_write_single_coil@address+1,w
 10074     0563  00A6               	movwf	??_handle_write_single_coil+1
 10075     0564  0820               	movf	handle_write_single_coil@address,w
 10076     0565  00A5               	movwf	??_handle_write_single_coil
 10077     0566  36A6               	lsrf	??_handle_write_single_coil+1,f
 10078     0567  0CA5               	rrf	??_handle_write_single_coil,f
 10079     0568  36A6               	lsrf	??_handle_write_single_coil+1,f
 10080     0569  0CA5               	rrf	??_handle_write_single_coil,f
 10081     056A  36A6               	lsrf	??_handle_write_single_coil+1,f
 10082     056B  0CA5               	rrf	??_handle_write_single_coil,f
 10083     056C  0825               	movf	??_handle_write_single_coil,w
 10084     056D  072D               	addwf	handle_write_single_coil@server_coils,w
 10085     056E  00A7               	movwf	??_handle_write_single_coil+2
 10086     056F  0827               	movf	??_handle_write_single_coil+2,w
 10087     0570  0086               	movwf	6
 10088     0571  0187               	clrf	7
 10089     0572  3001               	movlw	1
 10090     0573  00A8               	movwf	??_handle_write_single_coil+3
 10091     0574  0820               	movf	handle_write_single_coil@address,w
 10092     0575  3907               	andlw	7
 10093     0576  0A89               	incf	9,f
 10094     0577  2D79               	goto	u3424
 10095     0578                     u3425:
 10096     0578  35A8               	lslf	??_handle_write_single_coil+3,f
 10097     0579                     u3424:
 10098     0579  0B89               	decfsz	9,f
 10099     057A  2D78               	goto	u3425
 10100     057B  0828               	movf	??_handle_write_single_coil+3,w
 10101     057C  3AFF               	xorlw	255
 10102     057D  0501               	andwf	1,w
 10103     057E  00A9               	movwf	??_handle_write_single_coil+4
 10104     057F  01AA               	clrf	??_handle_write_single_coil+5
 10105     0580  0829               	movf	??_handle_write_single_coil+4,w
 10106     0581  00AB               	movwf	_handle_write_single_coil$1436
 10107     0582  082A               	movf	??_handle_write_single_coil+5,w
 10108     0583  2DA4               	goto	L5
 10109     0584                     l5060:
 10110     0584  3001               	movlw	1
 10111     0585  00A5               	movwf	??_handle_write_single_coil
 10112     0586  3000               	movlw	0
 10113     0587  00A6               	movwf	??_handle_write_single_coil+1
 10114     0588  0820               	movf	handle_write_single_coil@address,w
 10115     0589  3907               	andlw	7
 10116     058A  0A89               	incf	9,f
 10117     058B  2D8E               	goto	u3434
 10118     058C                     u3435:
 10119     058C  35A5               	lslf	??_handle_write_single_coil,f
 10120     058D  0DA6               	rlf	??_handle_write_single_coil+1,f
 10121     058E                     u3434:
 10122     058E  0B89               	decfsz	9,f
 10123     058F  2D8C               	goto	u3435
 10124     0590  0821               	movf	handle_write_single_coil@address+1,w
 10125     0591  00A8               	movwf	??_handle_write_single_coil+3
 10126     0592  0820               	movf	handle_write_single_coil@address,w
 10127     0593  00A7               	movwf	??_handle_write_single_coil+2
 10128     0594  36A8               	lsrf	??_handle_write_single_coil+3,f
 10129     0595  0CA7               	rrf	??_handle_write_single_coil+2,f
 10130     0596  36A8               	lsrf	??_handle_write_single_coil+3,f
 10131     0597  0CA7               	rrf	??_handle_write_single_coil+2,f
 10132     0598  36A8               	lsrf	??_handle_write_single_coil+3,f
 10133     0599  0CA7               	rrf	??_handle_write_single_coil+2,f
 10134     059A  0827               	movf	??_handle_write_single_coil+2,w
 10135     059B  072D               	addwf	handle_write_single_coil@server_coils,w
 10136     059C  00A9               	movwf	??_handle_write_single_coil+4
 10137     059D  0829               	movf	??_handle_write_single_coil+4,w
 10138     059E  0086               	movwf	6
 10139     059F  0187               	clrf	7
 10140     05A0  0825               	movf	??_handle_write_single_coil,w
 10141     05A1  0401               	iorwf	1,w
 10142     05A2  00AB               	movwf	_handle_write_single_coil$1436
 10143     05A3  0826               	movf	??_handle_write_single_coil+1,w
 10144     05A4                     L5:
 10145     05A4  00AC               	movwf	_handle_write_single_coil$1436+1
 10146     05A5  0821               	movf	handle_write_single_coil@address+1,w
 10147     05A6  00A6               	movwf	??_handle_write_single_coil+1
 10148     05A7  0820               	movf	handle_write_single_coil@address,w
 10149     05A8  00A5               	movwf	??_handle_write_single_coil
 10150     05A9  36A6               	lsrf	??_handle_write_single_coil+1,f
 10151     05AA  0CA5               	rrf	??_handle_write_single_coil,f
 10152     05AB  36A6               	lsrf	??_handle_write_single_coil+1,f
 10153     05AC  0CA5               	rrf	??_handle_write_single_coil,f
 10154     05AD  36A6               	lsrf	??_handle_write_single_coil+1,f
 10155     05AE  0CA5               	rrf	??_handle_write_single_coil,f
 10156     05AF  0825               	movf	??_handle_write_single_coil,w
 10157     05B0  072D               	addwf	handle_write_single_coil@server_coils,w
 10158     05B1  00A7               	movwf	??_handle_write_single_coil+2
 10159     05B2  0827               	movf	??_handle_write_single_coil+2,w
 10160     05B3  0086               	movwf	6
 10161     05B4  0187               	clrf	7
 10162     05B5  082B               	movf	_handle_write_single_coil$1436,w
 10163     05B6  0081               	movwf	1
 10164                           
 10165                           ;modbus_imp.c: 83:   return NMBS_ERROR_NONE;
 10166     05B7  3000               	movlw	0
 10167     05B8  0008               	return
 10168     05B9                     __end_of_handle_write_single_coil:
 10169                           
 10170                           	psect	text15
 10171     0992                     __ptext15:	
 10172 ;; *************** function _handle_read_input_registers *****************
 10173 ;; Defined at:
 10174 ;;		line 709 in file "nanomodbus.c"
 10175 ;; Parameters:    Size  Location     Type
 10176 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10177 ;;		 -> main@nmbs(59), 
 10178 ;; Auto vars:     Size  Location     Type
 10179 ;;  nmbs            1   65[BANK0 ] PTR struct nmbs_t
 10180 ;;		 -> main@nmbs(59), 
 10181 ;; Return value:  Size  Location     Type
 10182 ;;                  1    wreg      enum E10483
 10183 ;; Registers used:
 10184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10185 ;; Tracked objects:
 10186 ;;		On entry : 3F/0
 10187 ;;		On exit  : 3E/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10190 ;;      Params:         0       0       0       0       0       0       0       0
 10191 ;;      Locals:         0       1       0       0       0       0       0       0
 10192 ;;      Temps:          0       0       0       0       0       0       0       0
 10193 ;;      Totals:         0       1       0       0       0       0       0       0
 10194 ;;Total ram usage:        1 bytes
 10195 ;; Hardware stack levels used: 1
 10196 ;; Hardware stack levels required when called: 12
 10197 ;; This function calls:
 10198 ;;		_handle_read_registers
 10199 ;; This function is called by:
 10200 ;;		_handle_req_fc
 10201 ;; This function uses a non-reentrant model
 10202 ;;
 10203                           
 10204     0992                     _handle_read_input_registers:	
 10205                           ;psect for function _handle_read_input_registers
 10206                           
 10207                           
 10208                           ;incstack = 0
 10209                           ; Regs used in _handle_read_input_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10210                           ;handle_read_input_registers@nmbs stored from wreg
 10211     0992  00E1               	movwf	handle_read_input_registers@nmbs
 10212                           
 10213                           ;nanomodbus.c: 710:     return handle_read_registers(nmbs, nmbs->callbacks.read_input_re
      +                          gisters);
 10214     0993  0861               	movf	handle_read_input_registers@nmbs,w
 10215     0994  3E2A               	addlw	42
 10216     0995  0086               	movwf	6
 10217     0996  3001               	movlw	1	; select bank2/3
 10218     0997  0087               	movwf	7
 10219     0998  3F40               	moviw [0]fsr1
 10220     0999  00D7               	movwf	handle_read_registers@callback
 10221     099A  3F41               	moviw [1]fsr1
 10222     099B  00D8               	movwf	handle_read_registers@callback+1
 10223     099C  0861               	movf	handle_read_input_registers@nmbs,w
 10224     099D  3180  204C         	fcall	_handle_read_registers
 10225     099F  0008               	return
 10226     09A0                     __end_of_handle_read_input_registers:
 10227                           
 10228                           	psect	text16
 10229     0984                     __ptext16:	
 10230 ;; *************** function _handle_read_holding_registers *****************
 10231 ;; Defined at:
 10232 ;;		line 702 in file "nanomodbus.c"
 10233 ;; Parameters:    Size  Location     Type
 10234 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10235 ;;		 -> main@nmbs(59), 
 10236 ;; Auto vars:     Size  Location     Type
 10237 ;;  nmbs            1   65[BANK0 ] PTR struct nmbs_t
 10238 ;;		 -> main@nmbs(59), 
 10239 ;; Return value:  Size  Location     Type
 10240 ;;                  1    wreg      enum E10483
 10241 ;; Registers used:
 10242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10243 ;; Tracked objects:
 10244 ;;		On entry : 3F/0
 10245 ;;		On exit  : 3E/0
 10246 ;;		Unchanged: 0/0
 10247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10248 ;;      Params:         0       0       0       0       0       0       0       0
 10249 ;;      Locals:         0       1       0       0       0       0       0       0
 10250 ;;      Temps:          0       0       0       0       0       0       0       0
 10251 ;;      Totals:         0       1       0       0       0       0       0       0
 10252 ;;Total ram usage:        1 bytes
 10253 ;; Hardware stack levels used: 1
 10254 ;; Hardware stack levels required when called: 12
 10255 ;; This function calls:
 10256 ;;		_handle_read_registers
 10257 ;; This function is called by:
 10258 ;;		_handle_req_fc
 10259 ;; This function uses a non-reentrant model
 10260 ;;
 10261                           
 10262     0984                     _handle_read_holding_registers:	
 10263                           ;psect for function _handle_read_holding_registers
 10264                           
 10265                           
 10266                           ;incstack = 0
 10267                           ; Regs used in _handle_read_holding_registers: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10268                           ;handle_read_holding_registers@nmbs stored from wreg
 10269     0984  00E1               	movwf	handle_read_holding_registers@nmbs
 10270                           
 10271                           ;nanomodbus.c: 703:     return handle_read_registers(nmbs, nmbs->callbacks.read_holding_
      +                          registers);
 10272     0985  0861               	movf	handle_read_holding_registers@nmbs,w
 10273     0986  3E28               	addlw	40
 10274     0987  0086               	movwf	6
 10275     0988  3001               	movlw	1	; select bank2/3
 10276     0989  0087               	movwf	7
 10277     098A  3F40               	moviw [0]fsr1
 10278     098B  00D7               	movwf	handle_read_registers@callback
 10279     098C  3F41               	moviw [1]fsr1
 10280     098D  00D8               	movwf	handle_read_registers@callback+1
 10281     098E  0861               	movf	handle_read_holding_registers@nmbs,w
 10282     098F  3180  204C         	fcall	_handle_read_registers
 10283     0991  0008               	return
 10284     0992                     __end_of_handle_read_holding_registers:
 10285                           
 10286                           	psect	text17
 10287     004C                     __ptext17:	
 10288 ;; *************** function _handle_read_registers *****************
 10289 ;; Defined at:
 10290 ;;		line 626 in file "nanomodbus.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10293 ;;		 -> main@nmbs(59), 
 10294 ;;  callback        2   55[BANK0 ] PTR FTN(unsigned short ,
 10295 ;;		 -> handler_read_input_registers(1), handler_read_holding_registers(1), 
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;  nmbs            1   18[BANK1 ] PTR struct nmbs_t
 10298 ;;		 -> main@nmbs(59), 
 10299 ;;  i               2   13[BANK1 ] int 
 10300 ;;  regs_bytes      1   12[BANK1 ] unsigned char 
 10301 ;;  regs           10    0[BANK1 ] unsigned short [5]
 10302 ;;  quantity        2   15[BANK1 ] unsigned short 
 10303 ;;  address         2   10[BANK1 ] unsigned short 
 10304 ;;  err             1   17[BANK1 ] enum E10483
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  1    wreg      enum E10483
 10307 ;; Registers used:
 10308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10309 ;; Tracked objects:
 10310 ;;		On entry : 3F/0
 10311 ;;		On exit  : 3E/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10314 ;;      Params:         0       2       0       0       0       0       0       0
 10315 ;;      Locals:         0       0      19       0       0       0       0       0
 10316 ;;      Temps:          0       8       0       0       0       0       0       0
 10317 ;;      Totals:         0      10      19       0       0       0       0       0
 10318 ;;Total ram usage:       29 bytes
 10319 ;; Hardware stack levels used: 1
 10320 ;; Hardware stack levels required when called: 11
 10321 ;; This function calls:
 10322 ;;		_get_2
 10323 ;;		_handler_read_holding_registers
 10324 ;;		_handler_read_input_registers
 10325 ;;		_put_1
 10326 ;;		_put_2
 10327 ;;		_put_res_header
 10328 ;;		_recv
 10329 ;;		_recv_msg_footer
 10330 ;;		_recv_read_registers_res
 10331 ;;		_send_exception_msg
 10332 ;;		_send_msg
 10333 ;; This function is called by:
 10334 ;;		_handle_read_holding_registers
 10335 ;;		_handle_read_input_registers
 10336 ;; This function uses a non-reentrant model
 10337 ;;
 10338                           
 10339     004C                     _handle_read_registers:	
 10340                           ;psect for function _handle_read_registers
 10341                           
 10342                           
 10343                           ;incstack = 0
 10344                           ; Regs used in _handle_read_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10345                           ;handle_read_registers@nmbs stored from wreg
 10346     004C  0141               	movlb	1	; select bank1
 10347     004D  00B2               	movwf	handle_read_registers@nmbs^(0+128)
 10348                           
 10349                           ;nanomodbus.c: 626: static nmbs_error handle_read_registers(nmbs_t* nmbs,;nanomodbus.c: 
      +                          627:                                         nmbs_error (*callback)(uint16_t, uint16_t, 
      +                          uint16_t*, uint8_t, void*)) {;nanomodbus.c: 628:     nmbs_error err = recv(nmbs, 4);
 10350     004E  3004               	movlw	4
 10351     004F  0140               	movlb	0	; select bank0
 10352     0050  00B2               	movwf	recv@count
 10353     0051  3000               	movlw	0
 10354     0052  00B3               	movwf	recv@count+1
 10355     0053  0141               	movlb	1	; select bank1
 10356     0054  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10357     0055  318B  23C8  3180   	fcall	_recv
 10358     0058  0141               	movlb	1	; select bank1
 10359     0059  00B1               	movwf	handle_read_registers@err^(0+128)
 10360                           
 10361                           ;nanomodbus.c: 629:     if (err != NMBS_ERROR_NONE)
 10362     005A  0831               	movf	handle_read_registers@err^(0+128),w
 10363     005B  1903               	btfsc	3,2
 10364     005C  285F               	goto	l5134
 10365     005D                     l5130:
 10366                           
 10367                           ;nanomodbus.c: 630:         return err;
 10368     005D  0831               	movf	handle_read_registers@err^(0+128),w
 10369     005E  0008               	return
 10370     005F                     l5134:
 10371                           
 10372                           ;nanomodbus.c: 632:     uint16_t address = get_2(nmbs);
 10373     005F  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10374     0060  318C  24FE  3180   	fcall	_get_2
 10375     0063  0821               	movf	?_get_2+1,w
 10376     0064  0141               	movlb	1	; select bank1
 10377     0065  00AB               	movwf	(handle_read_registers@address+1)^(0+128)
 10378     0066  0140               	movlb	0	; select bank0
 10379     0067  0820               	movf	?_get_2,w
 10380     0068  0141               	movlb	1	; select bank1
 10381     0069  00AA               	movwf	handle_read_registers@address^(0+128)
 10382                           
 10383                           ;nanomodbus.c: 633:     uint16_t quantity = get_2(nmbs);
 10384     006A  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10385     006B  318C  24FE  3180   	fcall	_get_2
 10386     006E  0821               	movf	?_get_2+1,w
 10387     006F  0141               	movlb	1	; select bank1
 10388     0070  00B0               	movwf	(handle_read_registers@quantity+1)^(0+128)
 10389     0071  0140               	movlb	0	; select bank0
 10390     0072  0820               	movf	?_get_2,w
 10391     0073  0141               	movlb	1	; select bank1
 10392     0074  00AF               	movwf	handle_read_registers@quantity^(0+128)
 10393                           
 10394                           ;nanomodbus.c: 637:     err = recv_msg_footer(nmbs);
 10395     0075  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10396     0076  318E  265D  3180   	fcall	_recv_msg_footer
 10397     0079  0141               	movlb	1	; select bank1
 10398     007A  00B1               	movwf	handle_read_registers@err^(0+128)
 10399                           
 10400                           ;nanomodbus.c: 638:     if (err != NMBS_ERROR_NONE)
 10401     007B  0831               	movf	handle_read_registers@err^(0+128),w
 10402     007C  1D03               	btfss	3,2
 10403     007D  285D               	goto	l5130
 10404                           
 10405                           ;nanomodbus.c: 641:     if (!nmbs->msg.ignored) {
 10406     007E  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10407     007F  3E27               	addlw	39
 10408     0080  0086               	movwf	6
 10409     0081  3001               	movlw	1	; select bank2/3
 10410     0082  0087               	movwf	7
 10411     0083  0801               	movf	1,w
 10412     0084  1D03               	btfss	3,2
 10413     0085  2967               	goto	l5202
 10414                           
 10415                           ;nanomodbus.c: 642:         if (quantity < 1 || quantity > 125)
 10416     0086  082F               	movf	handle_read_registers@quantity^(0+128),w
 10417     0087  0430               	iorwf	(handle_read_registers@quantity+1)^(0+128),w
 10418     0088  1903               	btfsc	3,2
 10419     0089  2891               	goto	l5148
 10420     008A  3000               	movlw	0
 10421     008B  0230               	subwf	(handle_read_registers@quantity+1)^(0+128),w
 10422     008C  307E               	movlw	126
 10423     008D  1903               	skipnz
 10424     008E  022F               	subwf	handle_read_registers@quantity^(0+128),w
 10425     008F  1C03               	skipc
 10426     0090  2899               	goto	l5152
 10427     0091                     l5148:
 10428                           
 10429                           ;nanomodbus.c: 643:             return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_D
      +                          ATA_VALUE);
 10430     0091  3003               	movlw	3
 10431     0092  0140               	movlb	0	; select bank0
 10432     0093  00C2               	movwf	send_exception_msg@exception
 10433     0094  0141               	movlb	1	; select bank1
 10434     0095  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10435     0096  318A  22AF         	fcall	_send_exception_msg
 10436     0098  0008               	return
 10437     0099                     l5152:
 10438                           
 10439                           ;nanomodbus.c: 645:         if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0
      +                          xFFFF) + 1)
 10440     0099  082F               	movf	handle_read_registers@quantity^(0+128),w
 10441     009A  0140               	movlb	0	; select bank0
 10442     009B  00D9               	movwf	??_handle_read_registers
 10443     009C  0141               	movlb	1	; select bank1
 10444     009D  0830               	movf	(handle_read_registers@quantity+1)^(0+128),w
 10445     009E  0140               	movlb	0	; select bank0
 10446     009F  00DA               	movwf	??_handle_read_registers+1
 10447     00A0  01DB               	clrf	??_handle_read_registers+2
 10448     00A1  01DC               	clrf	??_handle_read_registers+3
 10449     00A2  0141               	movlb	1	; select bank1
 10450     00A3  082A               	movf	handle_read_registers@address^(0+128),w
 10451     00A4  0140               	movlb	0	; select bank0
 10452     00A5  00DD               	movwf	??_handle_read_registers+4
 10453     00A6  0141               	movlb	1	; select bank1
 10454     00A7  082B               	movf	(handle_read_registers@address+1)^(0+128),w
 10455     00A8  0140               	movlb	0	; select bank0
 10456     00A9  00DE               	movwf	??_handle_read_registers+5
 10457     00AA  01DF               	clrf	??_handle_read_registers+6
 10458     00AB  01E0               	clrf	??_handle_read_registers+7
 10459     00AC  085D               	movf	??_handle_read_registers+4,w
 10460     00AD  07D9               	addwf	??_handle_read_registers,f
 10461     00AE  085E               	movf	??_handle_read_registers+5,w
 10462     00AF  3DDA               	addwfc	??_handle_read_registers+1,f
 10463     00B0  085F               	movf	??_handle_read_registers+6,w
 10464     00B1  3DDB               	addwfc	??_handle_read_registers+2,f
 10465     00B2  0860               	movf	??_handle_read_registers+7,w
 10466     00B3  3DDC               	addwfc	??_handle_read_registers+3,f
 10467     00B4  085C               	movf	??_handle_read_registers+3,w
 10468     00B5  1D03               	btfss	3,2
 10469     00B6  28BF               	goto	l5154
 10470     00B7  3001               	movlw	1
 10471     00B8  0259               	subwf	??_handle_read_registers,w
 10472     00B9  3000               	movlw	0
 10473     00BA  3B5A               	subwfb	??_handle_read_registers+1,w
 10474     00BB  3001               	movlw	1
 10475     00BC  3B5B               	subwfb	??_handle_read_registers+2,w
 10476     00BD  1C03               	btfss	3,0
 10477     00BE  28C7               	goto	l5158
 10478     00BF                     l5154:
 10479                           
 10480                           ;nanomodbus.c: 646:             return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_D
      +                          ATA_ADDRESS);
 10481     00BF  3002               	movlw	2
 10482     00C0  0140               	movlb	0	; select bank0
 10483     00C1  00C2               	movwf	send_exception_msg@exception
 10484     00C2  0141               	movlb	1	; select bank1
 10485     00C3  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10486     00C4  318A  22AF         	fcall	_send_exception_msg
 10487     00C6  0008               	return
 10488     00C7                     l5158:
 10489                           
 10490                           ;nanomodbus.c: 648:         if (callback) {
 10491     00C7  0140               	movlb	0	; select bank0
 10492     00C8  0857               	movf	handle_read_registers@callback,w
 10493     00C9  0458               	iorwf	handle_read_registers@callback+1,w
 10494     00CA  1903               	btfsc	3,2
 10495     00CB  2976               	goto	l5206
 10496                           
 10497                           ;nanomodbus.c: 649:             uint16_t regs[5] = {0};
 10498     00CC  30A0               	movlw	low handle_read_registers@regs
 10499     00CD  0086               	movwf	6
 10500     00CE  3000               	movlw	high handle_read_registers@regs
 10501     00CF  0087               	movwf	7
 10502     00D0  300A               	movlw	10
 10503     00D1  00D9               	movwf	??_handle_read_registers
 10504     00D2  3000               	movlw	0
 10505     00D3                     u3570:
 10506     00D3  001E               	movwi fsr1++
 10507     00D4  0BD9               	decfsz	??_handle_read_registers,f
 10508     00D5  28D3               	goto	u3570
 10509                           
 10510                           ;nanomodbus.c: 650:             err = callback(address, quantity, regs, nmbs->msg.unit_i
      +                          d, nmbs->platform.arg);
 10511     00D6  0141               	movlb	1	; select bank1
 10512     00D7  082B               	movf	(handle_read_registers@address+1)^(0+128),w
 10513     00D8  0140               	movlb	0	; select bank0
 10514     00D9  00A1               	movwf	handler_read_input_registers@address+1
 10515     00DA  0141               	movlb	1	; select bank1
 10516     00DB  082A               	movf	handle_read_registers@address^(0+128),w
 10517     00DC  0140               	movlb	0	; select bank0
 10518     00DD  00A0               	movwf	handler_read_input_registers@address
 10519     00DE  0141               	movlb	1	; select bank1
 10520     00DF  0830               	movf	(handle_read_registers@quantity+1)^(0+128),w
 10521     00E0  0140               	movlb	0	; select bank0
 10522     00E1  00A3               	movwf	handler_read_input_registers@quantity+1
 10523     00E2  0141               	movlb	1	; select bank1
 10524     00E3  082F               	movf	handle_read_registers@quantity^(0+128),w
 10525     00E4  0140               	movlb	0	; select bank0
 10526     00E5  00A2               	movwf	handler_read_input_registers@quantity
 10527     00E6  30A0               	movlw	(low (handle_read_registers@regs| 0))& (0+255)
 10528     00E7  00A4               	movwf	handler_read_input_registers@registers_out
 10529     00E8  0141               	movlb	1	; select bank1
 10530     00E9  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10531     00EA  3E22               	addlw	34
 10532     00EB  0086               	movwf	6
 10533     00EC  3001               	movlw	1	; select bank2/3
 10534     00ED  0087               	movwf	7
 10535     00EE  0801               	movf	1,w
 10536     00EF  0140               	movlb	0	; select bank0
 10537     00F0  00A5               	movwf	handler_read_input_registers@unit_id
 10538     00F1  0141               	movlb	1	; select bank1
 10539     00F2  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10540     00F3  3E36               	addlw	54
 10541     00F4  0086               	movwf	6
 10542     00F5  3001               	movlw	1	; select bank2/3
 10543     00F6  0087               	movwf	7
 10544     00F7  0801               	movf	1,w
 10545     00F8  0140               	movlb	0	; select bank0
 10546     00F9  00A6               	movwf	handler_read_input_registers@arg
 10547     00FA  0858               	movf	handle_read_registers@callback+1,w
 10548     00FB  008A               	movwf	10
 10549     00FC  0857               	movf	handle_read_registers@callback,w
 10550     00FD  000A               	callw
 10551     00FE  3180               	pagesel	$
 10552     00FF  0141               	movlb	1	; select bank1
 10553     0100  00B1               	movwf	handle_read_registers@err^(0+128)
 10554                           
 10555                           ;nanomodbus.c: 651:             if (err != NMBS_ERROR_NONE) {
 10556     0101  0831               	movf	handle_read_registers@err^(0+128),w
 10557     0102  1903               	btfsc	3,2
 10558     0103  291E               	goto	l5178
 10559                           
 10560                           ;nanomodbus.c: 652:                 if (((err) > 0 && (err) < 5))
 10561     0104  0831               	movf	handle_read_registers@err^(0+128),w
 10562     0105  3A80               	xorlw	128
 10563     0106  3E7F               	addlw	-129
 10564     0107  1C03               	skipc
 10565     0108  2916               	goto	l5174
 10566     0109  0831               	movf	handle_read_registers@err^(0+128),w
 10567     010A  3A80               	xorlw	128
 10568     010B  3E7B               	addlw	-133
 10569     010C  1803               	skipnc
 10570     010D  2916               	goto	l5174
 10571                           
 10572                           ;nanomodbus.c: 653:                     return send_exception_msg(nmbs, err);
 10573     010E  0831               	movf	handle_read_registers@err^(0+128),w
 10574     010F  0140               	movlb	0	; select bank0
 10575     0110  00C2               	movwf	send_exception_msg@exception
 10576     0111  0141               	movlb	1	; select bank1
 10577     0112  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10578     0113  318A  22AF         	fcall	_send_exception_msg
 10579     0115  0008               	return
 10580     0116                     l5174:
 10581                           
 10582                           ;nanomodbus.c: 655:                 return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVE
      +                          R_DEVICE_FAILURE);
 10583     0116  3004               	movlw	4
 10584     0117  0140               	movlb	0	; select bank0
 10585     0118  00C2               	movwf	send_exception_msg@exception
 10586     0119  0141               	movlb	1	; select bank1
 10587     011A  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10588     011B  318A  22AF         	fcall	_send_exception_msg
 10589     011D  0008               	return
 10590     011E                     l5178:
 10591                           
 10592                           ;nanomodbus.c: 658:             if (!nmbs->msg.broadcast) {
 10593     011E  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10594     011F  3E26               	addlw	38
 10595     0120  0086               	movwf	6
 10596     0121  3001               	movlw	1	; select bank2/3
 10597     0122  0087               	movwf	7
 10598     0123  0801               	movf	1,w
 10599     0124  1D03               	btfss	3,2
 10600     0125  2976               	goto	l5206
 10601                           
 10602                           ;nanomodbus.c: 659:                 uint8_t regs_bytes = quantity * 2;
 10603     0126  352F               	lslf	handle_read_registers@quantity^(0+128),w
 10604     0127  00AC               	movwf	handle_read_registers@regs_bytes^(0+128)
 10605                           
 10606                           ;nanomodbus.c: 660:                 put_res_header(nmbs, 1 + regs_bytes);
 10607     0128  082C               	movf	handle_read_registers@regs_bytes^(0+128),w
 10608     0129  3E01               	addlw	1
 10609     012A  0140               	movlb	0	; select bank0
 10610     012B  00A7               	movwf	put_res_header@data_length
 10611     012C  3000               	movlw	0
 10612     012D  1803               	skipnc
 10613     012E  3001               	movlw	1
 10614     012F  00A8               	movwf	put_res_header@data_length+1
 10615     0130  0141               	movlb	1	; select bank1
 10616     0131  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10617     0132  3189  2117  3180   	fcall	_put_res_header
 10618                           
 10619                           ;nanomodbus.c: 662:                 put_1(nmbs, regs_bytes);
 10620     0135  0141               	movlb	1	; select bank1
 10621     0136  082C               	movf	handle_read_registers@regs_bytes^(0+128),w
 10622     0137  0140               	movlb	0	; select bank0
 10623     0138  00A0               	movwf	put_1@data
 10624     0139  0141               	movlb	1	; select bank1
 10625     013A  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10626     013B  318A  2279  3180   	fcall	_put_1
 10627                           
 10628                           ;nanomodbus.c: 667:                 for (int i = 0; i < quantity; i++) {
 10629     013E  0141               	movlb	1	; select bank1
 10630     013F  01AD               	clrf	handle_read_registers@i^(0+128)
 10631     0140  01AE               	clrf	(handle_read_registers@i+1)^(0+128)
 10632     0141                     l5192:
 10633     0141  0830               	movf	(handle_read_registers@quantity+1)^(0+128),w
 10634     0142  022E               	subwf	(handle_read_registers@i+1)^(0+128),w
 10635     0143  1D03               	skipz
 10636     0144  2947               	goto	u3625
 10637     0145  082F               	movf	handle_read_registers@quantity^(0+128),w
 10638     0146  022D               	subwf	handle_read_registers@i^(0+128),w
 10639     0147                     u3625:
 10640     0147  1803               	btfsc	3,0
 10641     0148  295D               	goto	l5194
 10642                           
 10643                           ;nanomodbus.c: 668:                     put_2(nmbs, regs[i]);
 10644     0149  352D               	lslf	handle_read_registers@i^(0+128),w
 10645     014A  3EA0               	addlw	(low (handle_read_registers@regs| 0))& (0+255)
 10646     014B  0086               	movwf	6
 10647     014C  0187               	clrf	7
 10648     014D  3F40               	moviw [0]fsr1
 10649     014E  0140               	movlb	0	; select bank0
 10650     014F  00A0               	movwf	put_2@data
 10651     0150  3F41               	moviw [1]fsr1
 10652     0151  00A1               	movwf	put_2@data+1
 10653     0152  0141               	movlb	1	; select bank1
 10654     0153  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10655     0154  318B  2370  3180   	fcall	_put_2
 10656                           
 10657                           ;nanomodbus.c: 670:                 }
 10658     0157  3001               	movlw	1
 10659     0158  0141               	movlb	1	; select bank1
 10660     0159  07AD               	addwf	handle_read_registers@i^(0+128),f
 10661     015A  3000               	movlw	0
 10662     015B  3DAE               	addwfc	(handle_read_registers@i+1)^(0+128),f
 10663     015C  2941               	goto	l5192
 10664     015D                     l5194:
 10665                           
 10666                           ;nanomodbus.c: 672:                 err = send_msg(nmbs);
 10667     015D  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10668     015E  318D  2536  3180   	fcall	_send_msg
 10669     0161  0141               	movlb	1	; select bank1
 10670     0162  00B1               	movwf	handle_read_registers@err^(0+128)
 10671                           
 10672                           ;nanomodbus.c: 673:                 if (err != NMBS_ERROR_NONE)
 10673     0163  0831               	movf	handle_read_registers@err^(0+128),w
 10674     0164  1D03               	btfss	3,2
 10675     0165  285D               	goto	l5130
 10676     0166  2976               	goto	l5206
 10677     0167                     l5202:	
 10678                           ;nanomodbus.c: 677:     }
 10679                           
 10680                           ;nanomodbus.c: 676:         }
 10681                           
 10682                           
 10683                           ;nanomodbus.c: 679:         return recv_read_registers_res(nmbs, quantity, ((void*)0));
 10684     0167  0830               	movf	(handle_read_registers@quantity+1)^(0+128),w
 10685     0168  0140               	movlb	0	; select bank0
 10686     0169  00C9               	movwf	recv_read_registers_res@quantity+1
 10687     016A  0141               	movlb	1	; select bank1
 10688     016B  082F               	movf	handle_read_registers@quantity^(0+128),w
 10689     016C  0140               	movlb	0	; select bank0
 10690     016D  00C8               	movwf	recv_read_registers_res@quantity
 10691     016E  3000               	movlw	0
 10692     016F  00CA               	movwf	recv_read_registers_res@registers
 10693     0170  00CB               	movwf	recv_read_registers_res@registers+1
 10694     0171  0141               	movlb	1	; select bank1
 10695     0172  0832               	movf	handle_read_registers@nmbs^(0+128),w
 10696     0173  3184  24D5         	fcall	_recv_read_registers_res
 10697     0175  0008               	return
 10698     0176                     l5206:
 10699                           
 10700                           ;nanomodbus.c: 682:     return NMBS_ERROR_NONE;
 10701     0176  3000               	movlw	0
 10702     0177  0008               	return
 10703     0178                     __end_of_handle_read_registers:
 10704                           
 10705                           	psect	text18
 10706     0AAF                     __ptext18:	
 10707 ;; *************** function _send_exception_msg *****************
 10708 ;; Defined at:
 10709 ;;		line 306 in file "nanomodbus.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10712 ;;		 -> main@nmbs(59), 
 10713 ;;  exception       1   34[BANK0 ] unsigned char 
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;  nmbs            1   36[BANK0 ] PTR struct nmbs_t
 10716 ;;		 -> main@nmbs(59), 
 10717 ;; Return value:  Size  Location     Type
 10718 ;;                  1    wreg      enum E10483
 10719 ;; Registers used:
 10720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10721 ;; Tracked objects:
 10722 ;;		On entry : 3E/0
 10723 ;;		On exit  : 3F/0
 10724 ;;		Unchanged: 0/0
 10725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10726 ;;      Params:         0       1       0       0       0       0       0       0
 10727 ;;      Locals:         0       1       0       0       0       0       0       0
 10728 ;;      Temps:          0       1       0       0       0       0       0       0
 10729 ;;      Totals:         0       3       0       0       0       0       0       0
 10730 ;;Total ram usage:        3 bytes
 10731 ;; Hardware stack levels used: 1
 10732 ;; Hardware stack levels required when called: 9
 10733 ;; This function calls:
 10734 ;;		_put_1
 10735 ;;		_put_msg_header
 10736 ;;		_send_msg
 10737 ;; This function is called by:
 10738 ;;		_handle_read_registers
 10739 ;;		_handle_write_single_coil@nanomodbus$F2242
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743     0AAF                     _send_exception_msg:	
 10744                           ;psect for function _send_exception_msg
 10745                           
 10746                           
 10747                           ;incstack = 0
 10748                           ; Regs used in _send_exception_msg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10749                           ;send_exception_msg@nmbs stored from wreg
 10750     0AAF  0140               	movlb	0	; select bank0
 10751     0AB0  00C4               	movwf	send_exception_msg@nmbs
 10752                           
 10753                           ;nanomodbus.c: 307:     nmbs->msg.fc += 0x80;
 10754     0AB1  3080               	movlw	128
 10755     0AB2  00C3               	movwf	??_send_exception_msg
 10756     0AB3  0844               	movf	send_exception_msg@nmbs,w
 10757     0AB4  3E23               	addlw	35
 10758     0AB5  0086               	movwf	6
 10759     0AB6  3001               	movlw	1	; select bank2/3
 10760     0AB7  0087               	movwf	7
 10761     0AB8  0843               	movf	??_send_exception_msg,w
 10762     0AB9  0781               	addwf	1,f
 10763                           
 10764                           ;nanomodbus.c: 308:     put_msg_header(nmbs, 1);
 10765     0ABA  3001               	movlw	1
 10766     0ABB  00A4               	movwf	put_msg_header@data_length
 10767     0ABC  3000               	movlw	0
 10768     0ABD  00A5               	movwf	put_msg_header@data_length+1
 10769     0ABE  0844               	movf	send_exception_msg@nmbs,w
 10770     0ABF  3187  278F  318A   	fcall	_put_msg_header
 10771                           
 10772                           ;nanomodbus.c: 309:     put_1(nmbs, exception);
 10773     0AC2  0842               	movf	send_exception_msg@exception,w
 10774     0AC3  00A0               	movwf	put_1@data
 10775     0AC4  0844               	movf	send_exception_msg@nmbs,w
 10776     0AC5  318A  2279  318A   	fcall	_put_1
 10777                           
 10778                           ;nanomodbus.c: 313:     return send_msg(nmbs);
 10779     0AC8  0844               	movf	send_exception_msg@nmbs,w
 10780     0AC9  318D  2536         	fcall	_send_msg
 10781     0ACB  0008               	return
 10782     0ACC                     __end_of_send_exception_msg:
 10783                           
 10784                           	psect	text19
 10785     0D36                     __ptext19:	
 10786 ;; *************** function _send_msg *****************
 10787 ;; Defined at:
 10788 ;;		line 266 in file "nanomodbus.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10791 ;;		 -> main@nmbs(59), 
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;  nmbs            1   33[BANK0 ] PTR struct nmbs_t
 10794 ;;		 -> main@nmbs(59), 
 10795 ;;  crc             2   30[BANK0 ] unsigned short 
 10796 ;;  err             1   32[BANK0 ] enum E10483
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  1    wreg      enum E10483
 10799 ;; Registers used:
 10800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10801 ;; Tracked objects:
 10802 ;;		On entry : 3E/0
 10803 ;;		On exit  : 3F/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10806 ;;      Params:         0       0       0       0       0       0       0       0
 10807 ;;      Locals:         0       4       0       0       0       0       0       0
 10808 ;;      Temps:          0       2       0       0       0       0       0       0
 10809 ;;      Totals:         0       6       0       0       0       0       0       0
 10810 ;;Total ram usage:        6 bytes
 10811 ;; Hardware stack levels used: 1
 10812 ;; Hardware stack levels required when called: 8
 10813 ;; This function calls:
 10814 ;;		_nmbs_crc_calc
 10815 ;;		_put_2
 10816 ;;		_send
 10817 ;; This function is called by:
 10818 ;;		_send_exception_msg
 10819 ;;		_handle_read_registers
 10820 ;;		_handle_write_single_coil@nanomodbus$F2242
 10821 ;;		_handle_write_single_register@nanomodbus$F2271
 10822 ;; This function uses a non-reentrant model
 10823 ;;
 10824                           
 10825     0D36                     _send_msg:	
 10826                           ;psect for function _send_msg
 10827                           
 10828                           
 10829                           ;incstack = 0
 10830                           ; Regs used in _send_msg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10831                           ;send_msg@nmbs stored from wreg
 10832     0D36  0140               	movlb	0	; select bank0
 10833     0D37  00C1               	movwf	send_msg@nmbs
 10834                           
 10835                           ;nanomodbus.c: 269:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 10836     0D38  0841               	movf	send_msg@nmbs,w
 10837     0D39  3E31               	addlw	49
 10838     0D3A  0086               	movwf	6
 10839     0D3B  3001               	movlw	1	; select bank2/3
 10840     0D3C  0087               	movwf	7
 10841     0D3D  0301               	decf	1,w
 10842     0D3E  1D03               	btfss	3,2
 10843     0D3F  2D5F               	goto	l763
 10844                           
 10845                           ;nanomodbus.c: 270:         uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_id
      +                          x);
 10846     0D40  0841               	movf	send_msg@nmbs,w
 10847     0D41  3E20               	addlw	32
 10848     0D42  0086               	movwf	6
 10849     0D43  3001               	movlw	1	; select bank2/3
 10850     0D44  0087               	movwf	7
 10851     0D45  3F40               	moviw [0]fsr1
 10852     0D46  00BC               	movwf	??_send_msg
 10853     0D47  3F41               	moviw [1]fsr1
 10854     0D48  00BD               	movwf	??_send_msg+1
 10855     0D49  083C               	movf	??_send_msg,w
 10856     0D4A  00A0               	movwf	nmbs_crc_calc@length
 10857     0D4B  083D               	movf	??_send_msg+1,w
 10858     0D4C  00A1               	movwf	nmbs_crc_calc@length+1
 10859     0D4D  01A2               	clrf	nmbs_crc_calc@length+2
 10860     0D4E  01A3               	clrf	nmbs_crc_calc@length+3
 10861     0D4F  0841               	movf	send_msg@nmbs,w
 10862     0D50  3186  26DC  318D   	fcall	_nmbs_crc_calc
 10863     0D53  0821               	movf	?_nmbs_crc_calc+1,w
 10864     0D54  00BF               	movwf	send_msg@crc+1
 10865     0D55  0820               	movf	?_nmbs_crc_calc,w
 10866     0D56  00BE               	movwf	send_msg@crc
 10867                           
 10868                           ;nanomodbus.c: 271:         put_2(nmbs, crc);
 10869     0D57  083F               	movf	send_msg@crc+1,w
 10870     0D58  00A1               	movwf	put_2@data+1
 10871     0D59  083E               	movf	send_msg@crc,w
 10872     0D5A  00A0               	movwf	put_2@data
 10873     0D5B  0841               	movf	send_msg@nmbs,w
 10874     0D5C  318B  2370  318D   	fcall	_put_2
 10875     0D5F                     l763:	
 10876                           ;nanomodbus.c: 272:     }
 10877                           
 10878                           
 10879                           ;nanomodbus.c: 274:     nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 10880     0D5F  0841               	movf	send_msg@nmbs,w
 10881     0D60  3E20               	addlw	32
 10882     0D61  0086               	movwf	6
 10883     0D62  3001               	movlw	1	; select bank2/3
 10884     0D63  0087               	movwf	7
 10885     0D64  3F40               	moviw [0]fsr1
 10886     0D65  00B0               	movwf	send@count
 10887     0D66  3F41               	moviw [1]fsr1
 10888     0D67  00B1               	movwf	send@count+1
 10889     0D68  0841               	movf	send_msg@nmbs,w
 10890     0D69  3186  267C         	fcall	_send
 10891     0D6B  00C0               	movwf	send_msg@err
 10892                           
 10893                           ;nanomodbus.c: 276:     return err;
 10894     0D6C  0840               	movf	send_msg@err,w
 10895     0D6D  0008               	return
 10896     0D6E                     __end_of_send_msg:
 10897                           
 10898                           	psect	text20
 10899     067C                     __ptext20:	
 10900 ;; *************** function _send *****************
 10901 ;; Defined at:
 10902 ;;		line 184 in file "nanomodbus.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10905 ;;		 -> main@nmbs(59), 
 10906 ;;  count           2   16[BANK0 ] unsigned short 
 10907 ;; Auto vars:     Size  Location     Type
 10908 ;;  nmbs            1   27[BANK0 ] PTR struct nmbs_t
 10909 ;;		 -> main@nmbs(59), 
 10910 ;;  ret             4   23[BANK0 ] long 
 10911 ;; Return value:  Size  Location     Type
 10912 ;;                  1    wreg      enum E10483
 10913 ;; Registers used:
 10914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10915 ;; Tracked objects:
 10916 ;;		On entry : 3F/0
 10917 ;;		On exit  : 3F/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10920 ;;      Params:         0       2       0       0       0       0       0       0
 10921 ;;      Locals:         0       5       0       0       0       0       0       0
 10922 ;;      Temps:          0       5       0       0       0       0       0       0
 10923 ;;      Totals:         0      12       0       0       0       0       0       0
 10924 ;;Total ram usage:       12 bytes
 10925 ;; Hardware stack levels used: 1
 10926 ;; Hardware stack levels required when called: 7
 10927 ;; This function calls:
 10928 ;;		_write_serial
 10929 ;; This function is called by:
 10930 ;;		_send_msg
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934     067C                     _send:	
 10935                           ;psect for function _send
 10936                           
 10937                           
 10938                           ;incstack = 0
 10939                           ; Regs used in _send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10940                           ;send@nmbs stored from wreg
 10941     067C  00BB               	movwf	send@nmbs
 10942                           
 10943                           ;nanomodbus.c: 185:     int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, 1000, n
      +                          mbs->platform.arg);
 10944     067D  083B               	movf	send@nmbs,w
 10945     067E  00A1               	movwf	write_serial@buf
 10946     067F  0831               	movf	send@count+1,w
 10947     0680  00A3               	movwf	write_serial@count+1
 10948     0681  0830               	movf	send@count,w
 10949     0682  00A2               	movwf	write_serial@count
 10950     0683  3000               	movlw	0
 10951     0684  00A7               	movwf	write_serial@byte_timeout_ms+3
 10952     0685  3000               	movlw	0
 10953     0686  00A6               	movwf	write_serial@byte_timeout_ms+2
 10954     0687  3003               	movlw	3
 10955     0688  00A5               	movwf	write_serial@byte_timeout_ms+1
 10956     0689  30E8               	movlw	232
 10957     068A  00A4               	movwf	write_serial@byte_timeout_ms
 10958     068B  083B               	movf	send@nmbs,w
 10959     068C  3E36               	addlw	54
 10960     068D  0086               	movwf	6
 10961     068E  3001               	movlw	1	; select bank2/3
 10962     068F  0087               	movwf	7
 10963     0690  0801               	movf	1,w
 10964     0691  00A8               	movwf	write_serial@arg
 10965     0692  083B               	movf	send@nmbs,w
 10966     0693  3E34               	addlw	52
 10967     0694  0086               	movwf	6
 10968     0695  3001               	movlw	1	; select bank2/3
 10969     0696  0087               	movwf	7
 10970     0697  3F41               	moviw [1]fsr1
 10971     0698  008A               	movwf	10
 10972     0699  3F40               	moviw [0]fsr1
 10973     069A  000A               	callw
 10974     069B  3186               	pagesel	$
 10975     069C  0824               	movf	?_write_serial+3,w
 10976     069D  00BA               	movwf	send@ret+3
 10977     069E  0823               	movf	?_write_serial+2,w
 10978     069F  00B9               	movwf	send@ret+2
 10979     06A0  0822               	movf	?_write_serial+1,w
 10980     06A1  00B8               	movwf	send@ret+1
 10981     06A2  0821               	movf	?_write_serial,w
 10982     06A3  00B7               	movwf	send@ret
 10983                           
 10984                           ;nanomodbus.c: 187:     if (ret == count)
 10985     06A4  0830               	movf	send@count,w
 10986     06A5  00B2               	movwf	??_send
 10987     06A6  0831               	movf	send@count+1,w
 10988     06A7  00B3               	movwf	??_send+1
 10989     06A8  01B4               	clrf	??_send+2
 10990     06A9  01B5               	clrf	??_send+3
 10991     06AA  083A               	movf	send@ret+3,w
 10992     06AB  0635               	xorwf	??_send+3,w
 10993     06AC  1D03               	skipz
 10994     06AD  2EB8               	goto	u3055
 10995     06AE  0839               	movf	send@ret+2,w
 10996     06AF  0634               	xorwf	??_send+2,w
 10997     06B0  1D03               	skipz
 10998     06B1  2EB8               	goto	u3055
 10999     06B2  0838               	movf	send@ret+1,w
 11000     06B3  0633               	xorwf	??_send+1,w
 11001     06B4  1D03               	skipz
 11002     06B5  2EB8               	goto	u3055
 11003     06B6  0837               	movf	send@ret,w
 11004     06B7  0632               	xorwf	??_send,w
 11005     06B8                     u3055:
 11006     06B8  1D03               	skipz
 11007     06B9  2EBC               	goto	l4788
 11008                           
 11009                           ;nanomodbus.c: 188:         return NMBS_ERROR_NONE;
 11010     06BA  3000               	movlw	0
 11011     06BB  0008               	return
 11012     06BC                     l4788:
 11013                           
 11014                           ;nanomodbus.c: 190:     if (ret < count) {
 11015     06BC  0830               	movf	send@count,w
 11016     06BD  00B2               	movwf	??_send
 11017     06BE  0831               	movf	send@count+1,w
 11018     06BF  00B3               	movwf	??_send+1
 11019     06C0  01B4               	clrf	??_send+2
 11020     06C1  01B5               	clrf	??_send+3
 11021     06C2  083A               	movf	send@ret+3,w
 11022     06C3  3A80               	xorlw	128
 11023     06C4  00B6               	movwf	??_send+4
 11024     06C5  0835               	movf	??_send+3,w
 11025     06C6  3A80               	xorlw	128
 11026     06C7  0236               	subwf	??_send+4,w
 11027     06C8  1D03               	skipz
 11028     06C9  2ED4               	goto	u3063
 11029     06CA  0834               	movf	??_send+2,w
 11030     06CB  0239               	subwf	send@ret+2,w
 11031     06CC  1D03               	skipz
 11032     06CD  2ED4               	goto	u3063
 11033     06CE  0833               	movf	??_send+1,w
 11034     06CF  0238               	subwf	send@ret+1,w
 11035     06D0  1D03               	skipz
 11036     06D1  2ED4               	goto	u3063
 11037     06D2  0832               	movf	??_send,w
 11038     06D3  0237               	subwf	send@ret,w
 11039     06D4                     u3063:
 11040     06D4  1803               	skipnc
 11041     06D5  2ED8               	goto	l4792
 11042                           
 11043                           ;nanomodbus.c: 191:         if (ret < 0)
 11044     06D6  1FBA               	btfss	send@ret+3,7
 11045     06D7  2EDA               	goto	l4796
 11046     06D8                     l4792:
 11047                           
 11048                           ;nanomodbus.c: 192:             return NMBS_ERROR_TRANSPORT;
 11049     06D8  30FC               	movlw	252
 11050     06D9  0008               	return
 11051     06DA                     l4796:
 11052                           
 11053                           ;nanomodbus.c: 194:         return NMBS_ERROR_TIMEOUT;
 11054     06DA  30FD               	movlw	253
 11055     06DB  0008               	return
 11056     06DC                     __end_of_send:
 11057                           
 11058                           	psect	text21
 11059     0F28                     __ptext21:	
 11060 ;; *************** function _write_serial *****************
 11061 ;; Defined at:
 11062 ;;		line 39 in file "modbus_imp.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;  buf             1    1[BANK0 ] PTR const unsigned char 
 11065 ;;		 -> nmbs.msg.buf(32), 
 11066 ;;  count           2    2[BANK0 ] unsigned short 
 11067 ;;  byte_timeout    4    4[BANK0 ] long 
 11068 ;;  arg             1    8[BANK0 ] PTR void 
 11069 ;;		 -> main@registers(11), 
 11070 ;; Auto vars:     Size  Location     Type
 11071 ;;  i               2   14[BANK0 ] int 
 11072 ;;  number_of_by    4   10[BANK0 ] long 
 11073 ;; Return value:  Size  Location     Type
 11074 ;;                  4    1[BANK0 ] long 
 11075 ;; Registers used:
 11076 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11077 ;; Tracked objects:
 11078 ;;		On entry : 3F/0
 11079 ;;		On exit  : 3F/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11082 ;;      Params:         0       8       0       0       0       0       0       0
 11083 ;;      Locals:         0       6       0       0       0       0       0       0
 11084 ;;      Temps:          0       1       0       0       0       0       0       0
 11085 ;;      Totals:         0      15       0       0       0       0       0       0
 11086 ;;Total ram usage:       15 bytes
 11087 ;; Hardware stack levels used: 1
 11088 ;; Hardware stack levels required when called: 6
 11089 ;; This function calls:
 11090 ;;		_EUSART1_Write
 11091 ;;		_EUSART1_is_tx_done
 11092 ;;		_EUSART1_is_tx_ready
 11093 ;;		_TxDeviceDisable
 11094 ;;		_TxDeviceEnable
 11095 ;; This function is called by:
 11096 ;;		_main
 11097 ;;		_send
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101     0F28                     _write_serial:	
 11102                           ;psect for function _write_serial
 11103                           
 11104                           
 11105                           ;modbus_imp.c: 39: int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte
      +                          _timeout_ms, void* arg);modbus_imp.c: 40: {;modbus_imp.c: 41:     TxDeviceEnable();
 11106                           
 11107                           ;incstack = 0
 11108                           ; Regs used in _write_serial: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11109     0F28  3188  2093  318F   	fcall	_TxDeviceEnable
 11110                           
 11111                           ;modbus_imp.c: 42:     int32_t number_of_byte_send = 0;
 11112     0F2B  3000               	movlw	0
 11113     0F2C  00AD               	movwf	write_serial@number_of_byte_send+3
 11114     0F2D  3000               	movlw	0
 11115     0F2E  00AC               	movwf	write_serial@number_of_byte_send+2
 11116     0F2F  3000               	movlw	0
 11117     0F30  00AB               	movwf	write_serial@number_of_byte_send+1
 11118     0F31  3000               	movlw	0
 11119     0F32  00AA               	movwf	write_serial@number_of_byte_send
 11120                           
 11121                           ;modbus_imp.c: 44:     for(int i=0; i<count; i++)
 11122     0F33  01AE               	clrf	write_serial@i
 11123     0F34  01AF               	clrf	write_serial@i+1
 11124     0F35                     l4704:
 11125     0F35  0823               	movf	write_serial@count+1,w
 11126     0F36  022F               	subwf	write_serial@i+1,w
 11127     0F37  1D03               	skipz
 11128     0F38  2F3B               	goto	u2985
 11129     0F39  0822               	movf	write_serial@count,w
 11130     0F3A  022E               	subwf	write_serial@i,w
 11131     0F3B                     u2985:
 11132     0F3B  1803               	btfsc	3,0
 11133     0F3C  2F63               	goto	l4706
 11134                           
 11135                           ;modbus_imp.c: 45:     {;modbus_imp.c: 46:         if(EUSART1_is_tx_ready())
 11136     0F3D  3189  215C  318F   	fcall	_EUSART1_is_tx_ready
 11137     0F40  3A00               	xorlw	0
 11138     0F41  1903               	skipnz
 11139     0F42  2F5E               	goto	l4702
 11140                           
 11141                           ;modbus_imp.c: 47:         {;modbus_imp.c: 48:             EUSART1_Write(*buf);
 11142     0F43  0821               	movf	write_serial@buf,w
 11143     0F44  0086               	movwf	6
 11144     0F45  3001               	movlw	1	; select bank2/3
 11145     0F46  0087               	movwf	7
 11146     0F47  0801               	movf	1,w
 11147     0F48  3188  20FA  318F   	fcall	_EUSART1_Write
 11148     0F4B                     l4696:	
 11149                           ;modbus_imp.c: 49:             while(!EUSART1_is_tx_done());
 11150                           
 11151     0F4B  3188  20AE  318F   	fcall	_EUSART1_is_tx_done
 11152     0F4E  3A00               	xorlw	0
 11153     0F4F  1903               	skipnz
 11154     0F50  2F4B               	goto	l4696
 11155                           
 11156                           ;modbus_imp.c: 50:             buf++;
 11157     0F51  3001               	movlw	1
 11158     0F52  0140               	movlb	0	; select bank0
 11159     0F53  00A9               	movwf	??_write_serial
 11160     0F54  0829               	movf	??_write_serial,w
 11161     0F55  07A1               	addwf	write_serial@buf,f
 11162                           
 11163                           ;modbus_imp.c: 51:             number_of_byte_send++;
 11164     0F56  3001               	movlw	1
 11165     0F57  07AA               	addwf	write_serial@number_of_byte_send,f
 11166     0F58  3000               	movlw	0
 11167     0F59  3DAB               	addwfc	write_serial@number_of_byte_send+1,f
 11168     0F5A  3000               	movlw	0
 11169     0F5B  3DAC               	addwfc	write_serial@number_of_byte_send+2,f
 11170     0F5C  3000               	movlw	0
 11171     0F5D  3DAD               	addwfc	write_serial@number_of_byte_send+3,f
 11172     0F5E                     l4702:
 11173                           
 11174                           ;modbus_imp.c: 53:     }
 11175     0F5E  3001               	movlw	1
 11176     0F5F  07AE               	addwf	write_serial@i,f
 11177     0F60  3000               	movlw	0
 11178     0F61  3DAF               	addwfc	write_serial@i+1,f
 11179     0F62  2F35               	goto	l4704
 11180     0F63                     l4706:
 11181                           
 11182                           ;modbus_imp.c: 54:     TxDeviceDisable();
 11183     0F63  3188  209B         	fcall	_TxDeviceDisable
 11184                           
 11185                           ;modbus_imp.c: 56:     return number_of_byte_send;
 11186     0F65  082D               	movf	write_serial@number_of_byte_send+3,w
 11187     0F66  00A4               	movwf	?_write_serial+3
 11188     0F67  082C               	movf	write_serial@number_of_byte_send+2,w
 11189     0F68  00A3               	movwf	?_write_serial+2
 11190     0F69  082B               	movf	write_serial@number_of_byte_send+1,w
 11191     0F6A  00A2               	movwf	?_write_serial+1
 11192     0F6B  082A               	movf	write_serial@number_of_byte_send,w
 11193     0F6C  00A1               	movwf	?_write_serial
 11194     0F6D  0008               	return
 11195     0F6E                     __end_of_write_serial:
 11196                           
 11197                           	psect	text22
 11198     0893                     __ptext22:	
 11199 ;; *************** function _TxDeviceEnable *****************
 11200 ;; Defined at:
 11201 ;;		line 60 in file "communication.c"
 11202 ;; Parameters:    Size  Location     Type
 11203 ;;		None
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;		None
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  1    wreg      void 
 11208 ;; Registers used:
 11209 ;;		None
 11210 ;; Tracked objects:
 11211 ;;		On entry : 3F/0
 11212 ;;		On exit  : 3F/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11215 ;;      Params:         0       0       0       0       0       0       0       0
 11216 ;;      Locals:         0       0       0       0       0       0       0       0
 11217 ;;      Temps:          0       0       0       0       0       0       0       0
 11218 ;;      Totals:         0       0       0       0       0       0       0       0
 11219 ;;Total ram usage:        0 bytes
 11220 ;; Hardware stack levels used: 1
 11221 ;; Hardware stack levels required when called: 5
 11222 ;; This function calls:
 11223 ;;		Nothing
 11224 ;; This function is called by:
 11225 ;;		_write_serial
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229     0893                     _TxDeviceEnable:	
 11230                           ;psect for function _TxDeviceEnable
 11231                           
 11232                           
 11233                           ;communication.c: 62:     LATCbits.LATC3 = 1;
 11234                           
 11235                           ;incstack = 0
 11236                           ; Regs used in _TxDeviceEnable: []
 11237     0893  159A               	bsf	26,3	;volatile
 11238     0894  0008               	return
 11239     0895                     __end_of_TxDeviceEnable:
 11240                           
 11241                           	psect	text23
 11242     089B                     __ptext23:	
 11243 ;; *************** function _TxDeviceDisable *****************
 11244 ;; Defined at:
 11245 ;;		line 65 in file "communication.c"
 11246 ;; Parameters:    Size  Location     Type
 11247 ;;		None
 11248 ;; Auto vars:     Size  Location     Type
 11249 ;;		None
 11250 ;; Return value:  Size  Location     Type
 11251 ;;                  1    wreg      void 
 11252 ;; Registers used:
 11253 ;;		None
 11254 ;; Tracked objects:
 11255 ;;		On entry : 31/E
 11256 ;;		On exit  : 3F/0
 11257 ;;		Unchanged: 0/0
 11258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11259 ;;      Params:         0       0       0       0       0       0       0       0
 11260 ;;      Locals:         0       0       0       0       0       0       0       0
 11261 ;;      Temps:          0       0       0       0       0       0       0       0
 11262 ;;      Totals:         0       0       0       0       0       0       0       0
 11263 ;;Total ram usage:        0 bytes
 11264 ;; Hardware stack levels used: 1
 11265 ;; Hardware stack levels required when called: 5
 11266 ;; This function calls:
 11267 ;;		Nothing
 11268 ;; This function is called by:
 11269 ;;		_main
 11270 ;;		_write_serial
 11271 ;; This function uses a non-reentrant model
 11272 ;;
 11273                           
 11274     089B                     _TxDeviceDisable:	
 11275                           ;psect for function _TxDeviceDisable
 11276                           
 11277                           
 11278                           ;communication.c: 67:     LATCbits.LATC3 = 0;
 11279                           
 11280                           ;incstack = 0
 11281                           ; Regs used in _TxDeviceDisable: []
 11282     089B  0140               	movlb	0	; select bank0
 11283     089C  119A               	bcf	26,3	;volatile
 11284     089D  0008               	return
 11285     089E                     __end_of_TxDeviceDisable:
 11286                           
 11287                           	psect	text24
 11288     095C                     __ptext24:	
 11289 ;; *************** function _EUSART1_is_tx_ready *****************
 11290 ;; Defined at:
 11291 ;;		line 182 in file "mcc_generated_files/eusart1.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;		None
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;		None
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      _Bool 
 11298 ;; Registers used:
 11299 ;;		wreg, status,2
 11300 ;; Tracked objects:
 11301 ;;		On entry : 3F/0
 11302 ;;		On exit  : 3F/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11305 ;;      Params:         0       0       0       0       0       0       0       0
 11306 ;;      Locals:         0       1       0       0       0       0       0       0
 11307 ;;      Temps:          0       0       0       0       0       0       0       0
 11308 ;;      Totals:         0       1       0       0       0       0       0       0
 11309 ;;Total ram usage:        1 bytes
 11310 ;; Hardware stack levels used: 1
 11311 ;; Hardware stack levels required when called: 5
 11312 ;; This function calls:
 11313 ;;		Nothing
 11314 ;; This function is called by:
 11315 ;;		_write_serial
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319     095C                     _EUSART1_is_tx_ready:	
 11320                           ;psect for function _EUSART1_is_tx_ready
 11321                           
 11322                           
 11323                           ;mcc_generated_files/eusart1.c: 184:     return (_Bool)(PIR3bits.TX1IF && TX1STAbits.TXE
      +                          N);
 11324                           
 11325                           ;incstack = 0
 11326                           ; Regs used in _EUSART1_is_tx_ready: [wreg+status,2]
 11327     095C  01A0               	clrf	_EUSART1_is_tx_ready$619
 11328     095D  014E               	movlb	14	; select bank14
 11329     095E  1E0F               	btfss	15,4	;volatile
 11330     095F  2966               	goto	l4654
 11331     0960  0142               	movlb	2	; select bank2
 11332     0961  1E9E               	btfss	30,5	;volatile
 11333     0962  2966               	goto	l4654
 11334     0963  0140               	movlb	0	; select bank0
 11335     0964  01A0               	clrf	_EUSART1_is_tx_ready$619
 11336     0965  0AA0               	incf	_EUSART1_is_tx_ready$619,f
 11337     0966                     l4654:
 11338     0966  0140               	movlb	0	; select bank0
 11339     0967  0820               	movf	_EUSART1_is_tx_ready$619,w
 11340     0968  0008               	return
 11341     0969                     __end_of_EUSART1_is_tx_ready:
 11342                           
 11343                           	psect	text25
 11344     08AE                     __ptext25:	
 11345 ;; *************** function _EUSART1_is_tx_done *****************
 11346 ;; Defined at:
 11347 ;;		line 192 in file "mcc_generated_files/eusart1.c"
 11348 ;; Parameters:    Size  Location     Type
 11349 ;;		None
 11350 ;; Auto vars:     Size  Location     Type
 11351 ;;		None
 11352 ;; Return value:  Size  Location     Type
 11353 ;;                  1    wreg      _Bool 
 11354 ;; Registers used:
 11355 ;;		wreg, status,2, status,0
 11356 ;; Tracked objects:
 11357 ;;		On entry : 3D/2
 11358 ;;		On exit  : 3F/2
 11359 ;;		Unchanged: 0/0
 11360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11361 ;;      Params:         0       0       0       0       0       0       0       0
 11362 ;;      Locals:         0       0       0       0       0       0       0       0
 11363 ;;      Temps:          0       0       0       0       0       0       0       0
 11364 ;;      Totals:         0       0       0       0       0       0       0       0
 11365 ;;Total ram usage:        0 bytes
 11366 ;; Hardware stack levels used: 1
 11367 ;; Hardware stack levels required when called: 5
 11368 ;; This function calls:
 11369 ;;		Nothing
 11370 ;; This function is called by:
 11371 ;;		_write_serial
 11372 ;; This function uses a non-reentrant model
 11373 ;;
 11374                           
 11375     08AE                     _EUSART1_is_tx_done:	
 11376                           ;psect for function _EUSART1_is_tx_done
 11377                           
 11378                           
 11379                           ;mcc_generated_files/eusart1.c: 194:     return TX1STAbits.TRMT;
 11380                           
 11381                           ;incstack = 0
 11382                           ; Regs used in _EUSART1_is_tx_done: [wreg+status,2+status,0]
 11383     08AE  0142               	movlb	2	; select bank2
 11384     08AF  0C1E               	rrf	30,w	;volatile
 11385     08B0  3901               	andlw	1
 11386     08B1  0008               	return
 11387     08B2                     __end_of_EUSART1_is_tx_done:
 11388                           
 11389                           	psect	text26
 11390     08FA                     __ptext26:	
 11391 ;; *************** function _EUSART1_Write *****************
 11392 ;; Defined at:
 11393 ;;		line 223 in file "mcc_generated_files/eusart1.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;  txData          1    wreg     unsigned char 
 11396 ;; Auto vars:     Size  Location     Type
 11397 ;;  txData          1    0[BANK0 ] unsigned char 
 11398 ;; Return value:  Size  Location     Type
 11399 ;;                  1    wreg      void 
 11400 ;; Registers used:
 11401 ;;		wreg
 11402 ;; Tracked objects:
 11403 ;;		On entry : 3F/0
 11404 ;;		On exit  : 3F/2
 11405 ;;		Unchanged: 0/0
 11406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11407 ;;      Params:         0       0       0       0       0       0       0       0
 11408 ;;      Locals:         0       1       0       0       0       0       0       0
 11409 ;;      Temps:          0       0       0       0       0       0       0       0
 11410 ;;      Totals:         0       1       0       0       0       0       0       0
 11411 ;;Total ram usage:        1 bytes
 11412 ;; Hardware stack levels used: 1
 11413 ;; Hardware stack levels required when called: 5
 11414 ;; This function calls:
 11415 ;;		Nothing
 11416 ;; This function is called by:
 11417 ;;		_write_serial
 11418 ;; This function uses a non-reentrant model
 11419 ;;
 11420                           
 11421     08FA                     _EUSART1_Write:	
 11422                           ;psect for function _EUSART1_Write
 11423                           
 11424                           
 11425                           ;incstack = 0
 11426                           ; Regs used in _EUSART1_Write: [wreg]
 11427                           ;EUSART1_Write@txData stored from wreg
 11428     08FA  00A0               	movwf	EUSART1_Write@txData
 11429     08FB                     l269:	
 11430                           ;mcc_generated_files/eusart1.c: 226:     {;mcc_generated_files/eusart1.c: 227:     }
 11431                           
 11432                           
 11433                           ;mcc_generated_files/eusart1.c: 225:     while(0 == PIR3bits.TX1IF)
 11434     08FB  014E               	movlb	14	; select bank14
 11435     08FC  1E0F               	btfss	15,4	;volatile
 11436     08FD  28FB               	goto	l269
 11437                           
 11438                           ;mcc_generated_files/eusart1.c: 229:     TX1REG = txData;
 11439     08FE  0140               	movlb	0	; select bank0
 11440     08FF  0820               	movf	EUSART1_Write@txData,w
 11441     0900  0142               	movlb	2	; select bank2
 11442     0901  009A               	movwf	26	;volatile
 11443     0902  0008               	return
 11444     0903                     __end_of_EUSART1_Write:
 11445                           
 11446                           	psect	text27
 11447     04D5                     __ptext27:	
 11448 ;; *************** function _recv_read_registers_res *****************
 11449 ;; Defined at:
 11450 ;;		line 415 in file "nanomodbus.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;  nmbs            1    wreg     PTR struct nmbs_t
 11453 ;;		 -> main@nmbs(59), 
 11454 ;;  quantity        2   40[BANK0 ] unsigned short 
 11455 ;;  registers       2   42[BANK0 ] PTR unsigned short 
 11456 ;;		 -> NULL(0), 
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  nmbs            1   53[BANK0 ] PTR struct nmbs_t
 11459 ;;		 -> main@nmbs(59), 
 11460 ;;  reg             2   48[BANK0 ] unsigned short 
 11461 ;;  i               2   50[BANK0 ] int 
 11462 ;;  err             1   54[BANK0 ] enum E10483
 11463 ;;  registers_by    1   52[BANK0 ] unsigned char 
 11464 ;; Return value:  Size  Location     Type
 11465 ;;                  1    wreg      enum E10483
 11466 ;; Registers used:
 11467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11468 ;; Tracked objects:
 11469 ;;		On entry : 3F/1
 11470 ;;		On exit  : 3F/0
 11471 ;;		Unchanged: 0/0
 11472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11473 ;;      Params:         0       4       0       0       0       0       0       0
 11474 ;;      Locals:         0       7       0       0       0       0       0       0
 11475 ;;      Temps:          0       4       0       0       0       0       0       0
 11476 ;;      Totals:         0      15       0       0       0       0       0       0
 11477 ;;Total ram usage:       15 bytes
 11478 ;; Hardware stack levels used: 1
 11479 ;; Hardware stack levels required when called: 10
 11480 ;; This function calls:
 11481 ;;		_get_1
 11482 ;;		_get_2
 11483 ;;		_recv
 11484 ;;		_recv_msg_footer
 11485 ;;		_recv_res_header
 11486 ;; This function is called by:
 11487 ;;		_handle_read_registers
 11488 ;; This function uses a non-reentrant model
 11489 ;;
 11490                           
 11491     04D5                     _recv_read_registers_res:	
 11492                           ;psect for function _recv_read_registers_res
 11493                           
 11494                           
 11495                           ;incstack = 0
 11496                           ; Regs used in _recv_read_registers_res: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11497                           ;recv_read_registers_res@nmbs stored from wreg
 11498     04D5  0140               	movlb	0	; select bank0
 11499     04D6  00D5               	movwf	recv_read_registers_res@nmbs
 11500                           
 11501                           ;nanomodbus.c: 416:     nmbs_error err = recv_res_header(nmbs);
 11502     04D7  0855               	movf	recv_read_registers_res@nmbs,w
 11503     04D8  3183  23BF  3184   	fcall	_recv_res_header
 11504     04DB  00D6               	movwf	recv_read_registers_res@err
 11505                           
 11506                           ;nanomodbus.c: 417:     if (err != NMBS_ERROR_NONE)
 11507     04DC  0856               	movf	recv_read_registers_res@err,w
 11508     04DD  1903               	btfsc	3,2
 11509     04DE  2CE1               	goto	l5002
 11510     04DF                     l4998:
 11511                           
 11512                           ;nanomodbus.c: 418:         return err;
 11513     04DF  0856               	movf	recv_read_registers_res@err,w
 11514     04E0  0008               	return
 11515     04E1                     l5002:
 11516                           
 11517                           ;nanomodbus.c: 420:     err = recv(nmbs, 1);
 11518     04E1  3001               	movlw	1
 11519     04E2  00B2               	movwf	recv@count
 11520     04E3  3000               	movlw	0
 11521     04E4  00B3               	movwf	recv@count+1
 11522     04E5  0855               	movf	recv_read_registers_res@nmbs,w
 11523     04E6  318B  23C8  3184   	fcall	_recv
 11524     04E9  00D6               	movwf	recv_read_registers_res@err
 11525                           
 11526                           ;nanomodbus.c: 421:     if (err != NMBS_ERROR_NONE)
 11527     04EA  0856               	movf	recv_read_registers_res@err,w
 11528     04EB  1D03               	btfss	3,2
 11529     04EC  2CDF               	goto	l4998
 11530                           
 11531                           ;nanomodbus.c: 424:     uint8_t registers_bytes = get_1(nmbs);
 11532     04ED  0855               	movf	recv_read_registers_res@nmbs,w
 11533     04EE  318A  2294  3184   	fcall	_get_1
 11534     04F1  00D4               	movwf	recv_read_registers_res@registers_bytes
 11535                           
 11536                           ;nanomodbus.c: 427:     err = recv(nmbs, registers_bytes);
 11537     04F2  0854               	movf	recv_read_registers_res@registers_bytes,w
 11538     04F3  00CC               	movwf	??_recv_read_registers_res
 11539     04F4  01CD               	clrf	??_recv_read_registers_res+1
 11540     04F5  084C               	movf	??_recv_read_registers_res,w
 11541     04F6  00B2               	movwf	recv@count
 11542     04F7  084D               	movf	??_recv_read_registers_res+1,w
 11543     04F8  00B3               	movwf	recv@count+1
 11544     04F9  0855               	movf	recv_read_registers_res@nmbs,w
 11545     04FA  318B  23C8  3184   	fcall	_recv
 11546     04FD  00D6               	movwf	recv_read_registers_res@err
 11547                           
 11548                           ;nanomodbus.c: 428:     if (err != NMBS_ERROR_NONE)
 11549     04FE  0856               	movf	recv_read_registers_res@err,w
 11550     04FF  1D03               	btfss	3,2
 11551     0500  2CDF               	goto	l4998
 11552                           
 11553                           ;nanomodbus.c: 432:     for (int i = 0; i < registers_bytes / 2; i++) {
 11554     0501  01D2               	clrf	recv_read_registers_res@i
 11555     0502  01D3               	clrf	recv_read_registers_res@i+1
 11556     0503                     l5028:
 11557     0503  0854               	movf	recv_read_registers_res@registers_bytes,w
 11558     0504  00CC               	movwf	??_recv_read_registers_res
 11559     0505  3001               	movlw	1
 11560     0506                     u3365:
 11561     0506  36CC               	lsrf	??_recv_read_registers_res,f
 11562     0507  0B89               	decfsz	9,f
 11563     0508  2D06               	goto	u3365
 11564     0509  0853               	movf	recv_read_registers_res@i+1,w
 11565     050A  3A80               	xorlw	128
 11566     050B  00CD               	movwf	??_recv_read_registers_res+1
 11567     050C  3080               	movlw	128
 11568     050D  024D               	subwf	??_recv_read_registers_res+1,w
 11569     050E  1D03               	skipz
 11570     050F  2D12               	goto	u3375
 11571     0510  084C               	movf	??_recv_read_registers_res,w
 11572     0511  0252               	subwf	recv_read_registers_res@i,w
 11573     0512                     u3375:
 11574     0512  1803               	btfsc	3,0
 11575     0513  2D36               	goto	l5030
 11576                           
 11577                           ;nanomodbus.c: 433:         uint16_t reg = get_2(nmbs);
 11578     0514  0140               	movlb	0	; select bank0
 11579     0515  0855               	movf	recv_read_registers_res@nmbs,w
 11580     0516  318C  24FE  3184   	fcall	_get_2
 11581     0519  0821               	movf	?_get_2+1,w
 11582     051A  00D1               	movwf	recv_read_registers_res@reg+1
 11583     051B  0820               	movf	?_get_2,w
 11584     051C  00D0               	movwf	recv_read_registers_res@reg
 11585                           
 11586                           ;nanomodbus.c: 434:         if (registers)
 11587     051D  084A               	movf	recv_read_registers_res@registers,w
 11588     051E  044B               	iorwf	recv_read_registers_res@registers+1,w
 11589     051F  1903               	btfsc	3,2
 11590     0520  2D31               	goto	l5026
 11591                           
 11592                           ;nanomodbus.c: 435:             registers[i] = reg;
 11593     0521  0853               	movf	recv_read_registers_res@i+1,w
 11594     0522  00CD               	movwf	??_recv_read_registers_res+1
 11595     0523  0852               	movf	recv_read_registers_res@i,w
 11596     0524  00CC               	movwf	??_recv_read_registers_res
 11597     0525  35CC               	lslf	??_recv_read_registers_res,f
 11598     0526  0DCD               	rlf	??_recv_read_registers_res+1,f
 11599     0527  084C               	movf	??_recv_read_registers_res,w
 11600     0528  074A               	addwf	recv_read_registers_res@registers,w
 11601     0529  0086               	movwf	6
 11602     052A  084D               	movf	??_recv_read_registers_res+1,w
 11603     052B  3D4B               	addwfc	recv_read_registers_res@registers+1,w
 11604     052C  0087               	movwf	7
 11605     052D  0850               	movf	recv_read_registers_res@reg,w
 11606     052E  3FC0               	movwi [0]fsr1
 11607     052F  0851               	movf	recv_read_registers_res@reg+1,w
 11608     0530  3FC1               	movwi [1]fsr1
 11609     0531                     l5026:
 11610                           
 11611                           ;nanomodbus.c: 437:     }
 11612     0531  3001               	movlw	1
 11613     0532  07D2               	addwf	recv_read_registers_res@i,f
 11614     0533  3000               	movlw	0
 11615     0534  3DD3               	addwfc	recv_read_registers_res@i+1,f
 11616     0535  2D03               	goto	l5028
 11617     0536                     l5030:
 11618                           
 11619                           ;nanomodbus.c: 439:     err = recv_msg_footer(nmbs);
 11620     0536  0140               	movlb	0	; select bank0
 11621     0537  0855               	movf	recv_read_registers_res@nmbs,w
 11622     0538  318E  265D  3184   	fcall	_recv_msg_footer
 11623     053B  00D6               	movwf	recv_read_registers_res@err
 11624                           
 11625                           ;nanomodbus.c: 440:     if (err != NMBS_ERROR_NONE)
 11626     053C  0856               	movf	recv_read_registers_res@err,w
 11627     053D  1D03               	btfss	3,2
 11628     053E  2CDF               	goto	l4998
 11629                           
 11630                           ;nanomodbus.c: 443:     if (registers_bytes != quantity * 2)
 11631     053F  0849               	movf	recv_read_registers_res@quantity+1,w
 11632     0540  00CD               	movwf	??_recv_read_registers_res+1
 11633     0541  0848               	movf	recv_read_registers_res@quantity,w
 11634     0542  00CC               	movwf	??_recv_read_registers_res
 11635     0543  35CC               	lslf	??_recv_read_registers_res,f
 11636     0544  0DCD               	rlf	??_recv_read_registers_res+1,f
 11637     0545  0854               	movf	recv_read_registers_res@registers_bytes,w
 11638     0546  00CE               	movwf	??_recv_read_registers_res+2
 11639     0547  01CF               	clrf	??_recv_read_registers_res+3
 11640     0548  084D               	movf	??_recv_read_registers_res+1,w
 11641     0549  064F               	xorwf	??_recv_read_registers_res+3,w
 11642     054A  1D03               	skipz
 11643     054B  2D4E               	goto	u3395
 11644     054C  084C               	movf	??_recv_read_registers_res,w
 11645     054D  064E               	xorwf	??_recv_read_registers_res+2,w
 11646     054E                     u3395:
 11647     054E  1903               	skipnz
 11648     054F  2D52               	goto	l5044
 11649                           
 11650                           ;nanomodbus.c: 444:         return NMBS_ERROR_INVALID_RESPONSE;
 11651     0550  30FE               	movlw	254
 11652     0551  0008               	return
 11653     0552                     l5044:
 11654                           
 11655                           ;nanomodbus.c: 446:     return NMBS_ERROR_NONE;
 11656     0552  3000               	movlw	0
 11657     0553  0008               	return
 11658     0554                     __end_of_recv_read_registers_res:
 11659                           
 11660                           	psect	text28
 11661     03BF                     __ptext28:	
 11662 ;; *************** function _recv_res_header *****************
 11663 ;; Defined at:
 11664 ;;		line 318 in file "nanomodbus.c"
 11665 ;; Parameters:    Size  Location     Type
 11666 ;;  nmbs            1    wreg     PTR struct nmbs_t
 11667 ;;		 -> main@nmbs(59), 
 11668 ;; Auto vars:     Size  Location     Type
 11669 ;;  nmbs            1   39[BANK0 ] PTR struct nmbs_t
 11670 ;;		 -> main@nmbs(59), 
 11671 ;;  exception       1   37[BANK0 ] unsigned char 
 11672 ;;  req_transact    2   32[BANK0 ] unsigned short 
 11673 ;;  err             1   38[BANK0 ] enum E10483
 11674 ;;  req_fc          1   36[BANK0 ] unsigned char 
 11675 ;;  first_byte_r    1   35[BANK0 ] _Bool 
 11676 ;;  req_unit_id     1   34[BANK0 ] unsigned char 
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  1    wreg      enum E10483
 11679 ;; Registers used:
 11680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11681 ;; Tracked objects:
 11682 ;;		On entry : 3F/0
 11683 ;;		On exit  : 3F/0
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11686 ;;      Params:         0       0       0       0       0       0       0       0
 11687 ;;      Locals:         0       8       0       0       0       0       0       0
 11688 ;;      Temps:          0       2       0       0       0       0       0       0
 11689 ;;      Totals:         0      10       0       0       0       0       0       0
 11690 ;;Total ram usage:       10 bytes
 11691 ;; Hardware stack levels used: 1
 11692 ;; Hardware stack levels required when called: 9
 11693 ;; This function calls:
 11694 ;;		_get_1
 11695 ;;		_recv
 11696 ;;		_recv_msg_footer
 11697 ;;		_recv_msg_header
 11698 ;; This function is called by:
 11699 ;;		_recv_read_registers_res
 11700 ;;		_recv_write_single_coil_res
 11701 ;;		_recv_write_single_register_res
 11702 ;; This function uses a non-reentrant model
 11703 ;;
 11704                           
 11705     03BF                     _recv_res_header:	
 11706                           ;psect for function _recv_res_header
 11707                           
 11708                           
 11709                           ;incstack = 0
 11710                           ; Regs used in _recv_res_header: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11711                           ;recv_res_header@nmbs stored from wreg
 11712     03BF  00C7               	movwf	recv_res_header@nmbs
 11713                           
 11714                           ;nanomodbus.c: 319:     uint16_t req_transaction_id = nmbs->msg.transaction_id;
 11715     03C0  0847               	movf	recv_res_header@nmbs,w
 11716     03C1  3E24               	addlw	36
 11717     03C2  0086               	movwf	6
 11718     03C3  3001               	movlw	1	; select bank2/3
 11719     03C4  0087               	movwf	7
 11720     03C5  3F40               	moviw [0]fsr1
 11721     03C6  00C0               	movwf	recv_res_header@req_transaction_id
 11722     03C7  3F41               	moviw [1]fsr1
 11723     03C8  00C1               	movwf	recv_res_header@req_transaction_id+1
 11724                           
 11725                           ;nanomodbus.c: 320:     uint8_t req_unit_id = nmbs->msg.unit_id;
 11726     03C9  0847               	movf	recv_res_header@nmbs,w
 11727     03CA  3E22               	addlw	34
 11728     03CB  0086               	movwf	6
 11729     03CC  3001               	movlw	1	; select bank2/3
 11730     03CD  0087               	movwf	7
 11731     03CE  0801               	movf	1,w
 11732     03CF  00C2               	movwf	recv_res_header@req_unit_id
 11733                           
 11734                           ;nanomodbus.c: 321:     uint8_t req_fc = nmbs->msg.fc;
 11735     03D0  0847               	movf	recv_res_header@nmbs,w
 11736     03D1  3E23               	addlw	35
 11737     03D2  0086               	movwf	6
 11738     03D3  3001               	movlw	1	; select bank2/3
 11739     03D4  0087               	movwf	7
 11740     03D5  0801               	movf	1,w
 11741     03D6  00C4               	movwf	recv_res_header@req_fc
 11742                           
 11743                           ;nanomodbus.c: 323:     _Bool first_byte_received;;nanomodbus.c: 324:     nmbs_error err
      +                           = recv_msg_header(nmbs, &first_byte_received);
 11744     03D7  3043               	movlw	(low (recv_res_header@first_byte_received| 0))& (0+255)
 11745     03D8  00B6               	movwf	recv_msg_header@first_byte_received
 11746     03D9  0847               	movf	recv_res_header@nmbs,w
 11747     03DA  318F  276E  3183   	fcall	_recv_msg_header
 11748     03DD  00C6               	movwf	recv_res_header@err
 11749                           
 11750                           ;nanomodbus.c: 325:     if (err != NMBS_ERROR_NONE)
 11751     03DE  0846               	movf	recv_res_header@err,w
 11752     03DF  1903               	btfsc	3,2
 11753     03E0  2BE3               	goto	l4886
 11754     03E1                     l4882:
 11755                           
 11756                           ;nanomodbus.c: 326:         return err;
 11757     03E1  0846               	movf	recv_res_header@err,w
 11758     03E2  0008               	return
 11759     03E3                     l4886:
 11760                           
 11761                           ;nanomodbus.c: 328:     if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 11762     03E3  0847               	movf	recv_res_header@nmbs,w
 11763     03E4  3E31               	addlw	49
 11764     03E5  0086               	movwf	6
 11765     03E6  3001               	movlw	1	; select bank2/3
 11766     03E7  0087               	movwf	7
 11767     03E8  3002               	movlw	2
 11768     03E9  0601               	xorwf	1,w
 11769     03EA  1D03               	btfss	3,2
 11770     03EB  2BFF               	goto	l4894
 11771                           
 11772                           ;nanomodbus.c: 329:         if (nmbs->msg.transaction_id != req_transaction_id)
 11773     03EC  0847               	movf	recv_res_header@nmbs,w
 11774     03ED  3E24               	addlw	36
 11775     03EE  0086               	movwf	6
 11776     03EF  3001               	movlw	1	; select bank2/3
 11777     03F0  0087               	movwf	7
 11778     03F1  3F40               	moviw [0]fsr1
 11779     03F2  00BE               	movwf	??_recv_res_header
 11780     03F3  3F41               	moviw [1]fsr1
 11781     03F4  00BF               	movwf	??_recv_res_header+1
 11782     03F5  0841               	movf	recv_res_header@req_transaction_id+1,w
 11783     03F6  063F               	xorwf	??_recv_res_header+1,w
 11784     03F7  1D03               	skipz
 11785     03F8  2BFB               	goto	u3195
 11786     03F9  0840               	movf	recv_res_header@req_transaction_id,w
 11787     03FA  063E               	xorwf	??_recv_res_header,w
 11788     03FB                     u3195:
 11789     03FB  1903               	skipnz
 11790     03FC  2BFF               	goto	l4894
 11791                           
 11792                           ;nanomodbus.c: 330:             return NMBS_ERROR_INVALID_TCP_MBAP;
 11793     03FD  30FA               	movlw	250
 11794     03FE  0008               	return
 11795     03FF                     l4894:
 11796                           
 11797                           ;nanomodbus.c: 333:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.
      +                          unit_id != req_unit_id)
 11798     03FF  0847               	movf	recv_res_header@nmbs,w
 11799     0400  3E31               	addlw	49
 11800     0401  0086               	movwf	6
 11801     0402  3001               	movlw	1	; select bank2/3
 11802     0403  0087               	movwf	7
 11803     0404  0301               	decf	1,w
 11804     0405  1D03               	btfss	3,2
 11805     0406  2C12               	goto	l4902
 11806     0407  0847               	movf	recv_res_header@nmbs,w
 11807     0408  3E22               	addlw	34
 11808     0409  0086               	movwf	6
 11809     040A  3001               	movlw	1	; select bank2/3
 11810     040B  0087               	movwf	7
 11811     040C  0801               	movf	1,w
 11812     040D  0642               	xorwf	recv_res_header@req_unit_id,w
 11813     040E  1903               	skipnz
 11814     040F  2C12               	goto	l4902
 11815                           
 11816                           ;nanomodbus.c: 334:         return NMBS_ERROR_INVALID_UNIT_ID;
 11817     0410  30F9               	movlw	249
 11818     0411  0008               	return
 11819     0412                     l4902:
 11820                           
 11821                           ;nanomodbus.c: 336:     if (nmbs->msg.fc != req_fc) {
 11822     0412  0847               	movf	recv_res_header@nmbs,w
 11823     0413  3E23               	addlw	35
 11824     0414  0086               	movwf	6
 11825     0415  3001               	movlw	1	; select bank2/3
 11826     0416  0087               	movwf	7
 11827     0417  0801               	movf	1,w
 11828     0418  0644               	xorwf	recv_res_header@req_fc,w
 11829     0419  1903               	skipnz
 11830     041A  2C50               	goto	l4938
 11831                           
 11832                           ;nanomodbus.c: 337:         if (nmbs->msg.fc - 0x80 == req_fc) {
 11833     041B  0847               	movf	recv_res_header@nmbs,w
 11834     041C  3E23               	addlw	35
 11835     041D  0086               	movwf	6
 11836     041E  3001               	movlw	1	; select bank2/3
 11837     041F  0087               	movwf	7
 11838     0420  0801               	movf	1,w
 11839     0421  3E80               	addlw	128
 11840     0422  00BE               	movwf	??_recv_res_header
 11841     0423  30FF               	movlw	255
 11842     0424  1803               	skipnc
 11843     0425  3000               	movlw	0
 11844     0426  00BF               	movwf	??_recv_res_header+1
 11845     0427  0844               	movf	recv_res_header@req_fc,w
 11846     0428  063E               	xorwf	??_recv_res_header,w
 11847     0429  043F               	iorwf	??_recv_res_header+1,w
 11848     042A  1D03               	skipz
 11849     042B  2C4C               	goto	l4926
 11850                           
 11851                           ;nanomodbus.c: 338:             err = recv(nmbs, 1);
 11852     042C  3001               	movlw	1
 11853     042D  00B2               	movwf	recv@count
 11854     042E  3000               	movlw	0
 11855     042F  00B3               	movwf	recv@count+1
 11856     0430  0847               	movf	recv_res_header@nmbs,w
 11857     0431  318B  23C8  3183   	fcall	_recv
 11858     0434  00C6               	movwf	recv_res_header@err
 11859                           
 11860                           ;nanomodbus.c: 339:             if (err != NMBS_ERROR_NONE)
 11861     0435  0846               	movf	recv_res_header@err,w
 11862     0436  1D03               	btfss	3,2
 11863     0437  2BE1               	goto	l4882
 11864                           
 11865                           ;nanomodbus.c: 342:             uint8_t exception = get_1(nmbs);
 11866     0438  0847               	movf	recv_res_header@nmbs,w
 11867     0439  318A  2294  3183   	fcall	_get_1
 11868     043C  00C5               	movwf	recv_res_header@exception
 11869                           
 11870                           ;nanomodbus.c: 343:             err = recv_msg_footer(nmbs);
 11871     043D  0847               	movf	recv_res_header@nmbs,w
 11872     043E  318E  265D  3183   	fcall	_recv_msg_footer
 11873     0441  00C6               	movwf	recv_res_header@err
 11874                           
 11875                           ;nanomodbus.c: 344:             if (err != NMBS_ERROR_NONE)
 11876     0442  0846               	movf	recv_res_header@err,w
 11877     0443  1D03               	btfss	3,2
 11878     0444  2BE1               	goto	l4882
 11879                           
 11880                           ;nanomodbus.c: 347:             if (exception < 1 || exception > 4)
 11881     0445  0845               	movf	recv_res_header@exception,w
 11882     0446  1903               	btfsc	3,2
 11883     0447  2C4C               	goto	l4926
 11884     0448  3005               	movlw	5
 11885     0449  0245               	subwf	recv_res_header@exception,w
 11886     044A  1C03               	skipc
 11887     044B  2C4E               	goto	l4930
 11888     044C                     l4926:
 11889                           
 11890                           ;nanomodbus.c: 348:                 return NMBS_ERROR_INVALID_RESPONSE;
 11891     044C  30FE               	movlw	254
 11892     044D  0008               	return
 11893     044E                     l4930:
 11894                           
 11895                           ;nanomodbus.c: 352:             return (nmbs_error) exception;
 11896     044E  0845               	movf	recv_res_header@exception,w
 11897     044F  0008               	return
 11898     0450                     l4938:
 11899                           
 11900                           ;nanomodbus.c: 360:     return NMBS_ERROR_NONE;
 11901     0450  3000               	movlw	0
 11902     0451  0008               	return
 11903     0452                     __end_of_recv_res_header:
 11904                           
 11905                           	psect	text29
 11906     0F6E                     __ptext29:	
 11907 ;; *************** function _recv_msg_header *****************
 11908 ;; Defined at:
 11909 ;;		line 221 in file "nanomodbus.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;  nmbs            1    wreg     PTR struct nmbs_t
 11912 ;;		 -> main@nmbs(59), 
 11913 ;;  first_byte_r    1   22[BANK0 ] PTR _Bool 
 11914 ;;		 -> nmbs_server_poll@first_byte_received(1), recv_res_header@first_byte_received(1), 
 11915 ;; Auto vars:     Size  Location     Type
 11916 ;;  nmbs            1   25[BANK0 ] PTR struct nmbs_t
 11917 ;;		 -> main@nmbs(59), 
 11918 ;;  err             1   24[BANK0 ] enum E10483
 11919 ;; Return value:  Size  Location     Type
 11920 ;;                  1    wreg      enum E10483
 11921 ;; Registers used:
 11922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11923 ;; Tracked objects:
 11924 ;;		On entry : 3F/0
 11925 ;;		On exit  : 3F/0
 11926 ;;		Unchanged: 0/0
 11927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11928 ;;      Params:         0       1       0       0       0       0       0       0
 11929 ;;      Locals:         0       2       0       0       0       0       0       0
 11930 ;;      Temps:          0       1       0       0       0       0       0       0
 11931 ;;      Totals:         0       4       0       0       0       0       0       0
 11932 ;;Total ram usage:        4 bytes
 11933 ;; Hardware stack levels used: 1
 11934 ;; Hardware stack levels required when called: 8
 11935 ;; This function calls:
 11936 ;;		_get_1
 11937 ;;		_msg_state_reset
 11938 ;;		_recv
 11939 ;; This function is called by:
 11940 ;;		_recv_req_header
 11941 ;;		_recv_res_header
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945     0F6E                     _recv_msg_header:	
 11946                           ;psect for function _recv_msg_header
 11947                           
 11948                           
 11949                           ;incstack = 0
 11950                           ; Regs used in _recv_msg_header: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11951                           ;recv_msg_header@nmbs stored from wreg
 11952     0F6E  00B9               	movwf	recv_msg_header@nmbs
 11953                           
 11954                           ;nanomodbus.c: 224:     msg_state_reset(nmbs);
 11955     0F6F  0839               	movf	recv_msg_header@nmbs,w
 11956     0F70  318B  234B  318F   	fcall	_msg_state_reset
 11957                           
 11958                           ;nanomodbus.c: 226:     *first_byte_received = 0;
 11959     0F73  0836               	movf	recv_msg_header@first_byte_received,w
 11960     0F74  0086               	movwf	6
 11961     0F75  0187               	clrf	7
 11962     0F76  0181               	clrf	1
 11963                           
 11964                           ;nanomodbus.c: 228:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 11965     0F77  0839               	movf	recv_msg_header@nmbs,w
 11966     0F78  3E31               	addlw	49
 11967     0F79  0086               	movwf	6
 11968     0F7A  3001               	movlw	1	; select bank2/3
 11969     0F7B  0087               	movwf	7
 11970     0F7C  0301               	decf	1,w
 11971     0F7D  1D03               	btfss	3,2
 11972     0F7E  2FB5               	goto	l4854
 11973                           
 11974                           ;nanomodbus.c: 229:         nmbs_error err = recv(nmbs, 1);
 11975     0F7F  3001               	movlw	1
 11976     0F80  00B2               	movwf	recv@count
 11977     0F81  3000               	movlw	0
 11978     0F82  00B3               	movwf	recv@count+1
 11979     0F83  0839               	movf	recv_msg_header@nmbs,w
 11980     0F84  318B  23C8  318F   	fcall	_recv
 11981     0F87  00B8               	movwf	recv_msg_header@err
 11982                           
 11983                           ;nanomodbus.c: 231:         if (err != NMBS_ERROR_NONE)
 11984     0F88  0838               	movf	recv_msg_header@err,w
 11985     0F89  1903               	btfsc	3,2
 11986     0F8A  2F8D               	goto	l4840
 11987     0F8B                     l4836:
 11988                           
 11989                           ;nanomodbus.c: 232:             return err;
 11990     0F8B  0838               	movf	recv_msg_header@err,w
 11991     0F8C  0008               	return
 11992     0F8D                     l4840:
 11993                           
 11994                           ;nanomodbus.c: 234:         *first_byte_received = 1;
 11995     0F8D  0836               	movf	recv_msg_header@first_byte_received,w
 11996     0F8E  0086               	movwf	6
 11997     0F8F  0187               	clrf	7
 11998     0F90  0181               	clrf	1
 11999     0F91  0A81               	incf	1,f
 12000                           
 12001                           ;nanomodbus.c: 236:         nmbs->msg.unit_id = get_1(nmbs);
 12002     0F92  0839               	movf	recv_msg_header@nmbs,w
 12003     0F93  318A  2294  318F   	fcall	_get_1
 12004     0F96  00B7               	movwf	??_recv_msg_header
 12005     0F97  0839               	movf	recv_msg_header@nmbs,w
 12006     0F98  3E22               	addlw	34
 12007     0F99  0086               	movwf	6
 12008     0F9A  3001               	movlw	1	; select bank2/3
 12009     0F9B  0087               	movwf	7
 12010     0F9C  0837               	movf	??_recv_msg_header,w
 12011     0F9D  0081               	movwf	1
 12012                           
 12013                           ;nanomodbus.c: 238:         err = recv(nmbs, 1);
 12014     0F9E  3001               	movlw	1
 12015     0F9F  00B2               	movwf	recv@count
 12016     0FA0  3000               	movlw	0
 12017     0FA1  00B3               	movwf	recv@count+1
 12018     0FA2  0839               	movf	recv_msg_header@nmbs,w
 12019     0FA3  318B  23C8  318F   	fcall	_recv
 12020     0FA6  00B8               	movwf	recv_msg_header@err
 12021                           
 12022                           ;nanomodbus.c: 239:         if (err != NMBS_ERROR_NONE)
 12023     0FA7  0838               	movf	recv_msg_header@err,w
 12024     0FA8  1D03               	btfss	3,2
 12025     0FA9  2F8B               	goto	l4836
 12026                           
 12027                           ;nanomodbus.c: 242:         nmbs->msg.fc = get_1(nmbs);
 12028     0FAA  0839               	movf	recv_msg_header@nmbs,w
 12029     0FAB  318A  2294         	fcall	_get_1
 12030     0FAD  00B7               	movwf	??_recv_msg_header
 12031     0FAE  0839               	movf	recv_msg_header@nmbs,w
 12032     0FAF  3E23               	addlw	35
 12033     0FB0  0086               	movwf	6
 12034     0FB1  3001               	movlw	1	; select bank2/3
 12035     0FB2  0087               	movwf	7
 12036     0FB3  0837               	movf	??_recv_msg_header,w
 12037     0FB4  0081               	movwf	1
 12038     0FB5                     l4854:
 12039                           
 12040                           ;nanomodbus.c: 245:     return NMBS_ERROR_NONE;
 12041     0FB5  3000               	movlw	0
 12042     0FB6  0008               	return
 12043     0FB7                     __end_of_recv_msg_header:
 12044                           
 12045                           	psect	text30
 12046     0B4B                     __ptext30:	
 12047 ;; *************** function _msg_state_reset *****************
 12048 ;; Defined at:
 12049 ;;		line 75 in file "nanomodbus.c"
 12050 ;; Parameters:    Size  Location     Type
 12051 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12052 ;;		 -> main@nmbs(59), 
 12053 ;; Auto vars:     Size  Location     Type
 12054 ;;  nmbs            1    1[BANK0 ] PTR struct nmbs_t
 12055 ;;		 -> main@nmbs(59), 
 12056 ;; Return value:  Size  Location     Type
 12057 ;;                  1    wreg      void 
 12058 ;; Registers used:
 12059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12060 ;; Tracked objects:
 12061 ;;		On entry : 3F/0
 12062 ;;		On exit  : 3F/0
 12063 ;;		Unchanged: 0/0
 12064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12065 ;;      Params:         0       0       0       0       0       0       0       0
 12066 ;;      Locals:         0       1       0       0       0       0       0       0
 12067 ;;      Temps:          0       0       0       0       0       0       0       0
 12068 ;;      Totals:         0       1       0       0       0       0       0       0
 12069 ;;Total ram usage:        1 bytes
 12070 ;; Hardware stack levels used: 1
 12071 ;; Hardware stack levels required when called: 6
 12072 ;; This function calls:
 12073 ;;		_msg_buf_reset
 12074 ;; This function is called by:
 12075 ;;		_recv_msg_header
 12076 ;;		_nmbs_server_poll
 12077 ;; This function uses a non-reentrant model
 12078 ;;
 12079                           
 12080     0B4B                     _msg_state_reset:	
 12081                           ;psect for function _msg_state_reset
 12082                           
 12083                           
 12084                           ;incstack = 0
 12085                           ; Regs used in _msg_state_reset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12086                           ;msg_state_reset@nmbs stored from wreg
 12087     0B4B  00A1               	movwf	msg_state_reset@nmbs
 12088                           
 12089                           ;nanomodbus.c: 76:     msg_buf_reset(nmbs);
 12090     0B4C  0821               	movf	msg_state_reset@nmbs,w
 12091     0B4D  3189  210D         	fcall	_msg_buf_reset
 12092                           
 12093                           ;nanomodbus.c: 77:     nmbs->msg.unit_id = 0;
 12094     0B4F  0821               	movf	msg_state_reset@nmbs,w
 12095     0B50  3E22               	addlw	34
 12096     0B51  0086               	movwf	6
 12097     0B52  3001               	movlw	1	; select bank2/3
 12098     0B53  0087               	movwf	7
 12099     0B54  0181               	clrf	1
 12100                           
 12101                           ;nanomodbus.c: 78:     nmbs->msg.fc = 0;
 12102     0B55  0821               	movf	msg_state_reset@nmbs,w
 12103     0B56  3E23               	addlw	35
 12104     0B57  0086               	movwf	6
 12105     0B58  3001               	movlw	1	; select bank2/3
 12106     0B59  0087               	movwf	7
 12107     0B5A  0181               	clrf	1
 12108                           
 12109                           ;nanomodbus.c: 79:     nmbs->msg.transaction_id = 0;
 12110     0B5B  0821               	movf	msg_state_reset@nmbs,w
 12111     0B5C  3E24               	addlw	36
 12112     0B5D  0086               	movwf	6
 12113     0B5E  3001               	movlw	1	; select bank2/3
 12114     0B5F  0087               	movwf	7
 12115     0B60  3000               	movlw	0
 12116     0B61  3FC0               	movwi [0]fsr1
 12117     0B62  3FC1               	movwi [1]fsr1
 12118                           
 12119                           ;nanomodbus.c: 80:     nmbs->msg.broadcast = 0;
 12120     0B63  0821               	movf	msg_state_reset@nmbs,w
 12121     0B64  3E26               	addlw	38
 12122     0B65  0086               	movwf	6
 12123     0B66  3001               	movlw	1	; select bank2/3
 12124     0B67  0087               	movwf	7
 12125     0B68  0181               	clrf	1
 12126                           
 12127                           ;nanomodbus.c: 81:     nmbs->msg.ignored = 0;
 12128     0B69  0821               	movf	msg_state_reset@nmbs,w
 12129     0B6A  3E27               	addlw	39
 12130     0B6B  0086               	movwf	6
 12131     0B6C  3001               	movlw	1	; select bank2/3
 12132     0B6D  0087               	movwf	7
 12133     0B6E  0181               	clrf	1
 12134     0B6F  0008               	return
 12135     0B70                     __end_of_msg_state_reset:
 12136                           
 12137                           	psect	text31
 12138     0A94                     __ptext31:	
 12139 ;; *************** function _get_1 *****************
 12140 ;; Defined at:
 12141 ;;		line 39 in file "nanomodbus.c"
 12142 ;; Parameters:    Size  Location     Type
 12143 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12144 ;;		 -> main@nmbs(59), 
 12145 ;; Auto vars:     Size  Location     Type
 12146 ;;  nmbs            1    2[BANK0 ] PTR struct nmbs_t
 12147 ;;		 -> main@nmbs(59), 
 12148 ;;  result          1    1[BANK0 ] unsigned char 
 12149 ;; Return value:  Size  Location     Type
 12150 ;;                  1    wreg      unsigned char 
 12151 ;; Registers used:
 12152 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12153 ;; Tracked objects:
 12154 ;;		On entry : 3F/0
 12155 ;;		On exit  : 3F/0
 12156 ;;		Unchanged: 0/0
 12157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12158 ;;      Params:         0       0       0       0       0       0       0       0
 12159 ;;      Locals:         0       2       0       0       0       0       0       0
 12160 ;;      Temps:          0       1       0       0       0       0       0       0
 12161 ;;      Totals:         0       3       0       0       0       0       0       0
 12162 ;;Total ram usage:        3 bytes
 12163 ;; Hardware stack levels used: 1
 12164 ;; Hardware stack levels required when called: 5
 12165 ;; This function calls:
 12166 ;;		Nothing
 12167 ;; This function is called by:
 12168 ;;		_recv_msg_header
 12169 ;;		_recv_res_header
 12170 ;;		_recv_read_registers_res
 12171 ;; This function uses a non-reentrant model
 12172 ;;
 12173                           
 12174     0A94                     _get_1:	
 12175                           ;psect for function _get_1
 12176                           
 12177                           
 12178                           ;incstack = 0
 12179                           ; Regs used in _get_1: [wreg+fsr1l+fsr1h+status,2+status,0]
 12180                           ;get_1@nmbs stored from wreg
 12181     0A94  00A2               	movwf	get_1@nmbs
 12182                           
 12183                           ;nanomodbus.c: 40:     uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 12184     0A95  0822               	movf	get_1@nmbs,w
 12185     0A96  3E20               	addlw	32
 12186     0A97  0086               	movwf	6
 12187     0A98  3001               	movlw	1	; select bank2/3
 12188     0A99  0087               	movwf	7
 12189     0A9A  0801               	movf	1,w
 12190     0A9B  0722               	addwf	get_1@nmbs,w
 12191     0A9C  00A0               	movwf	??_get_1
 12192     0A9D  0820               	movf	??_get_1,w
 12193     0A9E  0086               	movwf	6
 12194     0A9F  3001               	movlw	1	; select bank2/3
 12195     0AA0  0087               	movwf	7
 12196     0AA1  0801               	movf	1,w
 12197     0AA2  00A1               	movwf	get_1@result
 12198                           
 12199                           ;nanomodbus.c: 41:     nmbs->msg.buf_idx++;
 12200     0AA3  0822               	movf	get_1@nmbs,w
 12201     0AA4  3E20               	addlw	32
 12202     0AA5  0086               	movwf	6
 12203     0AA6  3001               	movlw	1	; select bank2/3
 12204     0AA7  0087               	movwf	7
 12205     0AA8  3001               	movlw	1
 12206     0AA9  0781               	addwf	1,f
 12207     0AAA  3141               	addfsr 1,1
 12208     0AAB  1803               	skipnc
 12209     0AAC  0A81               	incf	1,f
 12210                           
 12211                           ;nanomodbus.c: 42:     return result;
 12212     0AAD  0821               	movf	get_1@result,w
 12213     0AAE  0008               	return
 12214     0AAF                     __end_of_get_1:
 12215                           
 12216                           	psect	text32
 12217     0E5D                     __ptext32:	
 12218 ;; *************** function _recv_msg_footer *****************
 12219 ;; Defined at:
 12220 ;;		line 201 in file "nanomodbus.c"
 12221 ;; Parameters:    Size  Location     Type
 12222 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12223 ;;		 -> main@nmbs(59), 
 12224 ;; Auto vars:     Size  Location     Type
 12225 ;;  nmbs            1   29[BANK0 ] PTR struct nmbs_t
 12226 ;;		 -> main@nmbs(59), 
 12227 ;;  recv_crc        2   26[BANK0 ] unsigned short 
 12228 ;;  crc             2   24[BANK0 ] unsigned short 
 12229 ;;  err             1   28[BANK0 ] enum E10483
 12230 ;; Return value:  Size  Location     Type
 12231 ;;                  1    wreg      enum E10483
 12232 ;; Registers used:
 12233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12234 ;; Tracked objects:
 12235 ;;		On entry : 3E/0
 12236 ;;		On exit  : 3F/0
 12237 ;;		Unchanged: 0/0
 12238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12239 ;;      Params:         0       0       0       0       0       0       0       0
 12240 ;;      Locals:         0       6       0       0       0       0       0       0
 12241 ;;      Temps:          0       2       0       0       0       0       0       0
 12242 ;;      Totals:         0       8       0       0       0       0       0       0
 12243 ;;Total ram usage:        8 bytes
 12244 ;; Hardware stack levels used: 1
 12245 ;; Hardware stack levels required when called: 8
 12246 ;; This function calls:
 12247 ;;		_get_2
 12248 ;;		_nmbs_crc_calc
 12249 ;;		_recv
 12250 ;; This function is called by:
 12251 ;;		_recv_res_header
 12252 ;;		_recv_read_registers_res
 12253 ;;		_recv_write_single_coil_res
 12254 ;;		_recv_write_single_register_res
 12255 ;;		_handle_read_registers
 12256 ;;		_handle_write_single_coil@nanomodbus$F2242
 12257 ;;		_handle_write_single_register@nanomodbus$F2271
 12258 ;; This function uses a non-reentrant model
 12259 ;;
 12260                           
 12261     0E5D                     _recv_msg_footer:	
 12262                           ;psect for function _recv_msg_footer
 12263                           
 12264                           
 12265                           ;incstack = 0
 12266                           ; Regs used in _recv_msg_footer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12267                           ;recv_msg_footer@nmbs stored from wreg
 12268     0E5D  0140               	movlb	0	; select bank0
 12269     0E5E  00BD               	movwf	recv_msg_footer@nmbs
 12270                           
 12271                           ;nanomodbus.c: 204:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 12272     0E5F  083D               	movf	recv_msg_footer@nmbs,w
 12273     0E60  3E31               	addlw	49
 12274     0E61  0086               	movwf	6
 12275     0E62  3001               	movlw	1	; select bank2/3
 12276     0E63  0087               	movwf	7
 12277     0E64  0301               	decf	1,w
 12278     0E65  1D03               	btfss	3,2
 12279     0E66  2E9E               	goto	l4822
 12280                           
 12281                           ;nanomodbus.c: 205:         uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_id
      +                          x);
 12282     0E67  083D               	movf	recv_msg_footer@nmbs,w
 12283     0E68  3E20               	addlw	32
 12284     0E69  0086               	movwf	6
 12285     0E6A  3001               	movlw	1	; select bank2/3
 12286     0E6B  0087               	movwf	7
 12287     0E6C  3F40               	moviw [0]fsr1
 12288     0E6D  00B6               	movwf	??_recv_msg_footer
 12289     0E6E  3F41               	moviw [1]fsr1
 12290     0E6F  00B7               	movwf	??_recv_msg_footer+1
 12291     0E70  0836               	movf	??_recv_msg_footer,w
 12292     0E71  00A0               	movwf	nmbs_crc_calc@length
 12293     0E72  0837               	movf	??_recv_msg_footer+1,w
 12294     0E73  00A1               	movwf	nmbs_crc_calc@length+1
 12295     0E74  01A2               	clrf	nmbs_crc_calc@length+2
 12296     0E75  01A3               	clrf	nmbs_crc_calc@length+3
 12297     0E76  083D               	movf	recv_msg_footer@nmbs,w
 12298     0E77  3186  26DC  318E   	fcall	_nmbs_crc_calc
 12299     0E7A  0821               	movf	?_nmbs_crc_calc+1,w
 12300     0E7B  00B9               	movwf	recv_msg_footer@crc+1
 12301     0E7C  0820               	movf	?_nmbs_crc_calc,w
 12302     0E7D  00B8               	movwf	recv_msg_footer@crc
 12303                           
 12304                           ;nanomodbus.c: 207:         nmbs_error err = recv(nmbs, 2);
 12305     0E7E  3002               	movlw	2
 12306     0E7F  00B2               	movwf	recv@count
 12307     0E80  3000               	movlw	0
 12308     0E81  00B3               	movwf	recv@count+1
 12309     0E82  083D               	movf	recv_msg_footer@nmbs,w
 12310     0E83  318B  23C8  318E   	fcall	_recv
 12311     0E86  00BC               	movwf	recv_msg_footer@err
 12312                           
 12313                           ;nanomodbus.c: 208:         if (err != NMBS_ERROR_NONE)
 12314     0E87  083C               	movf	recv_msg_footer@err,w
 12315     0E88  1903               	btfsc	3,2
 12316     0E89  2E8C               	goto	l4814
 12317                           
 12318                           ;nanomodbus.c: 209:             return err;
 12319     0E8A  083C               	movf	recv_msg_footer@err,w
 12320     0E8B  0008               	return
 12321     0E8C                     l4814:
 12322                           
 12323                           ;nanomodbus.c: 211:         uint16_t recv_crc = get_2(nmbs);
 12324     0E8C  083D               	movf	recv_msg_footer@nmbs,w
 12325     0E8D  318C  24FE  318E   	fcall	_get_2
 12326     0E90  0821               	movf	?_get_2+1,w
 12327     0E91  00BB               	movwf	recv_msg_footer@recv_crc+1
 12328     0E92  0820               	movf	?_get_2,w
 12329     0E93  00BA               	movwf	recv_msg_footer@recv_crc
 12330                           
 12331                           ;nanomodbus.c: 213:         if (recv_crc != crc)
 12332     0E94  0839               	movf	recv_msg_footer@crc+1,w
 12333     0E95  063B               	xorwf	recv_msg_footer@recv_crc+1,w
 12334     0E96  1D03               	skipz
 12335     0E97  2E9A               	goto	u3105
 12336     0E98  0838               	movf	recv_msg_footer@crc,w
 12337     0E99  063A               	xorwf	recv_msg_footer@recv_crc,w
 12338     0E9A                     u3105:
 12339     0E9A  1903               	skipnz
 12340     0E9B  2E9E               	goto	l4822
 12341                           
 12342                           ;nanomodbus.c: 214:             return NMBS_ERROR_CRC;
 12343     0E9C  30FB               	movlw	251
 12344     0E9D  0008               	return
 12345     0E9E                     l4822:
 12346                           
 12347                           ;nanomodbus.c: 217:     return NMBS_ERROR_NONE;
 12348     0E9E  3000               	movlw	0
 12349     0E9F  0008               	return
 12350     0EA0                     __end_of_recv_msg_footer:
 12351                           
 12352                           	psect	text33
 12353     0BC8                     __ptext33:	
 12354 ;; *************** function _recv *****************
 12355 ;; Defined at:
 12356 ;;		line 166 in file "nanomodbus.c"
 12357 ;; Parameters:    Size  Location     Type
 12358 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12359 ;;		 -> main@nmbs(59), 
 12360 ;;  count           2   18[BANK0 ] unsigned short 
 12361 ;; Auto vars:     Size  Location     Type
 12362 ;;  nmbs            1   21[BANK0 ] PTR struct nmbs_t
 12363 ;;		 -> main@nmbs(59), 
 12364 ;;  ret             1   20[BANK0 ] char 
 12365 ;; Return value:  Size  Location     Type
 12366 ;;                  1    wreg      enum E10483
 12367 ;; Registers used:
 12368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12369 ;; Tracked objects:
 12370 ;;		On entry : 3E/0
 12371 ;;		On exit  : 3F/0
 12372 ;;		Unchanged: 0/0
 12373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12374 ;;      Params:         0       2       0       0       0       0       0       0
 12375 ;;      Locals:         0       2       0       0       0       0       0       0
 12376 ;;      Temps:          0       0       0       0       0       0       0       0
 12377 ;;      Totals:         0       4       0       0       0       0       0       0
 12378 ;;Total ram usage:        4 bytes
 12379 ;; Hardware stack levels used: 1
 12380 ;; Hardware stack levels required when called: 7
 12381 ;; This function calls:
 12382 ;;		_read_serial
 12383 ;; This function is called by:
 12384 ;;		_recv_msg_footer
 12385 ;;		_recv_msg_header
 12386 ;;		_recv_res_header
 12387 ;;		_recv_read_registers_res
 12388 ;;		_recv_write_single_coil_res
 12389 ;;		_recv_write_single_register_res
 12390 ;;		_handle_read_registers
 12391 ;;		_handle_write_single_coil@nanomodbus$F2242
 12392 ;;		_handle_write_single_register@nanomodbus$F2271
 12393 ;; This function uses a non-reentrant model
 12394 ;;
 12395                           
 12396     0BC8                     _recv:	
 12397                           ;psect for function _recv
 12398                           
 12399                           
 12400                           ;incstack = 0
 12401                           ; Regs used in _recv: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12402                           ;recv@nmbs stored from wreg
 12403     0BC8  0140               	movlb	0	; select bank0
 12404     0BC9  00B5               	movwf	recv@nmbs
 12405                           
 12406                           ;nanomodbus.c: 167:     int8_t ret =
 12407     0BCA  0835               	movf	recv@nmbs,w
 12408     0BCB  3E20               	addlw	32
 12409     0BCC  0086               	movwf	6
 12410     0BCD  3001               	movlw	1	; select bank2/3
 12411     0BCE  0087               	movwf	7
 12412     0BCF  0835               	movf	recv@nmbs,w
 12413     0BD0  0701               	addwf	1,w
 12414     0BD1  00A1               	movwf	read_serial@buf
 12415     0BD2  0833               	movf	recv@count+1,w
 12416     0BD3  00A3               	movwf	read_serial@count+1
 12417     0BD4  0832               	movf	recv@count,w
 12418     0BD5  00A2               	movwf	read_serial@count
 12419     0BD6  3000               	movlw	0
 12420     0BD7  00A7               	movwf	read_serial@byte_timeout_ms+3
 12421     0BD8  3000               	movlw	0
 12422     0BD9  00A6               	movwf	read_serial@byte_timeout_ms+2
 12423     0BDA  3027               	movlw	39
 12424     0BDB  00A5               	movwf	read_serial@byte_timeout_ms+1
 12425     0BDC  300F               	movlw	15
 12426     0BDD  00A4               	movwf	read_serial@byte_timeout_ms
 12427     0BDE  0835               	movf	recv@nmbs,w
 12428     0BDF  3E36               	addlw	54
 12429     0BE0  0086               	movwf	6
 12430     0BE1  3001               	movlw	1	; select bank2/3
 12431     0BE2  0087               	movwf	7
 12432     0BE3  0801               	movf	1,w
 12433     0BE4  00A8               	movwf	read_serial@arg
 12434     0BE5  0835               	movf	recv@nmbs,w
 12435     0BE6  3E32               	addlw	50
 12436     0BE7  0086               	movwf	6
 12437     0BE8  3001               	movlw	1	; select bank2/3
 12438     0BE9  0087               	movwf	7
 12439     0BEA  3F41               	moviw [1]fsr1
 12440     0BEB  008A               	movwf	10
 12441     0BEC  3F40               	moviw [0]fsr1
 12442     0BED  000A               	callw
 12443     0BEE  318B               	pagesel	$
 12444     0BEF  0821               	movf	?_read_serial,w
 12445     0BF0  00B4               	movwf	recv@ret
 12446                           
 12447                           ;nanomodbus.c: 170:     if (ret == (int8_t)count)
 12448     0BF1  0832               	movf	recv@count,w
 12449     0BF2  0634               	xorwf	recv@ret,w
 12450     0BF3  1D03               	skipz
 12451     0BF4  2BF7               	goto	l4772
 12452                           
 12453                           ;nanomodbus.c: 171:         return NMBS_ERROR_NONE;
 12454     0BF5  3000               	movlw	0
 12455     0BF6  0008               	return
 12456     0BF7                     l4772:
 12457                           
 12458                           ;nanomodbus.c: 180:     return NMBS_ERROR_TRANSPORT;
 12459     0BF7  30FC               	movlw	252
 12460     0BF8  0008               	return
 12461     0BF9                     __end_of_recv:
 12462                           
 12463                           	psect	text34
 12464     0DE2                     __ptext34:	
 12465 ;; *************** function _read_serial *****************
 12466 ;; Defined at:
 12467 ;;		line 22 in file "modbus_imp.c"
 12468 ;; Parameters:    Size  Location     Type
 12469 ;;  buf             1    1[BANK0 ] PTR unsigned char 
 12470 ;;		 -> nmbs.msg.buf(32), nmbs.msg(40), main@nmbs(59), 
 12471 ;;  count           2    2[BANK0 ] unsigned short 
 12472 ;;  byte_timeout    4    4[BANK0 ] long 
 12473 ;;  arg             1    8[BANK0 ] PTR void 
 12474 ;;		 -> main@registers(11), 
 12475 ;; Auto vars:     Size  Location     Type
 12476 ;;  charCount       4   14[BANK0 ] long 
 12477 ;;  c               1   13[BANK0 ] unsigned char 
 12478 ;; Return value:  Size  Location     Type
 12479 ;;                  4    1[BANK0 ] long 
 12480 ;; Registers used:
 12481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12482 ;; Tracked objects:
 12483 ;;		On entry : 3F/0
 12484 ;;		On exit  : 3F/0
 12485 ;;		Unchanged: 0/0
 12486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12487 ;;      Params:         0       8       0       0       0       0       0       0
 12488 ;;      Locals:         0       5       0       0       0       0       0       0
 12489 ;;      Temps:          0       4       0       0       0       0       0       0
 12490 ;;      Totals:         0      17       0       0       0       0       0       0
 12491 ;;Total ram usage:       17 bytes
 12492 ;; Hardware stack levels used: 1
 12493 ;; Hardware stack levels required when called: 6
 12494 ;; This function calls:
 12495 ;;		_EUSART1_Read
 12496 ;; This function is called by:
 12497 ;;		_main
 12498 ;;		_recv
 12499 ;;		_nmbs_server_poll
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503     0DE2                     _read_serial:	
 12504                           ;psect for function _read_serial
 12505                           
 12506                           
 12507                           ;modbus_imp.c: 24:     int32_t charCount = 0;
 12508                           
 12509                           ;incstack = 0
 12510                           ; Regs used in _read_serial: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12511     0DE2  3000               	movlw	0
 12512     0DE3  00B1               	movwf	read_serial@charCount+3
 12513     0DE4  3000               	movlw	0
 12514     0DE5  00B0               	movwf	read_serial@charCount+2
 12515     0DE6  3000               	movlw	0
 12516     0DE7  00AF               	movwf	read_serial@charCount+1
 12517     0DE8  3000               	movlw	0
 12518     0DE9  00AE               	movwf	read_serial@charCount
 12519     0DEA                     l4678:	
 12520                           ;modbus_imp.c: 25:     uint8_t c;;modbus_imp.c: 27:     while(charCount != count)
 12521                           
 12522                           
 12523                           ;modbus_imp.c: 27:     while(charCount != count)
 12524     0DEA  0822               	movf	read_serial@count,w
 12525     0DEB  00A9               	movwf	??_read_serial
 12526     0DEC  0823               	movf	read_serial@count+1,w
 12527     0DED  00AA               	movwf	??_read_serial+1
 12528     0DEE  01AB               	clrf	??_read_serial+2
 12529     0DEF  01AC               	clrf	??_read_serial+3
 12530     0DF0  0831               	movf	read_serial@charCount+3,w
 12531     0DF1  062C               	xorwf	??_read_serial+3,w
 12532     0DF2  1D03               	skipz
 12533     0DF3  2DFE               	goto	u2955
 12534     0DF4  0830               	movf	read_serial@charCount+2,w
 12535     0DF5  062B               	xorwf	??_read_serial+2,w
 12536     0DF6  1D03               	skipz
 12537     0DF7  2DFE               	goto	u2955
 12538     0DF8  082F               	movf	read_serial@charCount+1,w
 12539     0DF9  062A               	xorwf	??_read_serial+1,w
 12540     0DFA  1D03               	skipz
 12541     0DFB  2DFE               	goto	u2955
 12542     0DFC  082E               	movf	read_serial@charCount,w
 12543     0DFD  0629               	xorwf	??_read_serial,w
 12544     0DFE                     u2955:
 12545     0DFE  1903               	btfsc	3,2
 12546     0DFF  2E16               	goto	l4680
 12547                           
 12548                           ;modbus_imp.c: 28:     {;modbus_imp.c: 29:             c = EUSART1_Read();
 12549     0E00  3189  2143  318D   	fcall	_EUSART1_Read
 12550     0E03  00AD               	movwf	read_serial@c
 12551                           
 12552                           ;modbus_imp.c: 30:             buf[charCount++] = c;
 12553     0E04  082E               	movf	read_serial@charCount,w
 12554     0E05  0721               	addwf	read_serial@buf,w
 12555     0E06  00A9               	movwf	??_read_serial
 12556     0E07  0829               	movf	??_read_serial,w
 12557     0E08  0086               	movwf	6
 12558     0E09  3001               	movlw	1	; select bank2/3
 12559     0E0A  0087               	movwf	7
 12560     0E0B  082D               	movf	read_serial@c,w
 12561     0E0C  0081               	movwf	1
 12562     0E0D  3001               	movlw	1
 12563     0E0E  07AE               	addwf	read_serial@charCount,f
 12564     0E0F  3000               	movlw	0
 12565     0E10  3DAF               	addwfc	read_serial@charCount+1,f
 12566     0E11  3000               	movlw	0
 12567     0E12  3DB0               	addwfc	read_serial@charCount+2,f
 12568     0E13  3000               	movlw	0
 12569     0E14  3DB1               	addwfc	read_serial@charCount+3,f
 12570     0E15  2DEA               	goto	l4678
 12571     0E16                     l4680:
 12572                           
 12573                           ;modbus_imp.c: 34:     return charCount;
 12574     0E16  0831               	movf	read_serial@charCount+3,w
 12575     0E17  00A4               	movwf	?_read_serial+3
 12576     0E18  0830               	movf	read_serial@charCount+2,w
 12577     0E19  00A3               	movwf	?_read_serial+2
 12578     0E1A  082F               	movf	read_serial@charCount+1,w
 12579     0E1B  00A2               	movwf	?_read_serial+1
 12580     0E1C  082E               	movf	read_serial@charCount,w
 12581     0E1D  00A1               	movwf	?_read_serial
 12582     0E1E  0008               	return
 12583     0E1F                     __end_of_read_serial:
 12584                           
 12585                           	psect	text35
 12586     0943                     __ptext35:	
 12587 ;; *************** function _EUSART1_Read *****************
 12588 ;; Defined at:
 12589 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 12590 ;; Parameters:    Size  Location     Type
 12591 ;;		None
 12592 ;; Auto vars:     Size  Location     Type
 12593 ;;  readValue       1    0[BANK0 ] unsigned char 
 12594 ;; Return value:  Size  Location     Type
 12595 ;;                  1    wreg      unsigned char 
 12596 ;; Registers used:
 12597 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12598 ;; Tracked objects:
 12599 ;;		On entry : 3F/0
 12600 ;;		On exit  : 3F/0
 12601 ;;		Unchanged: 0/0
 12602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12603 ;;      Params:         0       0       0       0       0       0       0       0
 12604 ;;      Locals:         0       1       0       0       0       0       0       0
 12605 ;;      Temps:          0       0       0       0       0       0       0       0
 12606 ;;      Totals:         0       1       0       0       0       0       0       0
 12607 ;;Total ram usage:        1 bytes
 12608 ;; Hardware stack levels used: 1
 12609 ;; Hardware stack levels required when called: 5
 12610 ;; This function calls:
 12611 ;;		Nothing
 12612 ;; This function is called by:
 12613 ;;		_read_serial
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617     0943                     _EUSART1_Read:	
 12618                           ;psect for function _EUSART1_Read
 12619                           
 12620                           
 12621                           ;mcc_generated_files/eusart1.c: 213:     readValue = eusart1RxBuffer[eusart1RxTail];
 12622                           
 12623                           ;incstack = 0
 12624                           ; Regs used in _EUSART1_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 12625     0943  0872               	movf	_eusart1RxTail,w
 12626     0944  3ED9               	addlw	(low (_eusart1RxBuffer| 0))& (0+255)
 12627     0945  0086               	movwf	6
 12628     0946  0187               	clrf	7
 12629     0947  0801               	movf	1,w
 12630     0948  00A0               	movwf	EUSART1_Read@readValue
 12631                           
 12632                           ;mcc_generated_files/eusart1.c: 214:     eusart1RxTail = (eusart1RxTail + 1) % 8;
 12633     0949  0872               	movf	_eusart1RxTail,w	;volatile
 12634     094A  3E01               	addlw	1
 12635     094B  3907               	andlw	7
 12636     094C  00F2               	movwf	_eusart1RxTail	;volatile
 12637                           
 12638                           ;mcc_generated_files/eusart1.c: 219:     return readValue;
 12639     094D  0820               	movf	EUSART1_Read@readValue,w
 12640     094E  0008               	return
 12641     094F                     __end_of_EUSART1_Read:
 12642                           
 12643                           	psect	text36
 12644     06DC                     __ptext36:	
 12645 ;; *************** function _nmbs_crc_calc *****************
 12646 ;; Defined at:
 12647 ;;		line 148 in file "nanomodbus.c"
 12648 ;; Parameters:    Size  Location     Type
 12649 ;;  data            1    wreg     PTR const unsigned char 
 12650 ;;		 -> nmbs.msg.buf(32), 
 12651 ;;  length          4    0[BANK0 ] unsigned long 
 12652 ;; Auto vars:     Size  Location     Type
 12653 ;;  data            1    8[BANK0 ] PTR const unsigned char 
 12654 ;;		 -> nmbs.msg.buf(32), 
 12655 ;;  j               2   13[BANK0 ] int 
 12656 ;;  i               4    9[BANK0 ] unsigned long 
 12657 ;;  crc             2   15[BANK0 ] unsigned short 
 12658 ;; Return value:  Size  Location     Type
 12659 ;;                  2    0[BANK0 ] unsigned short 
 12660 ;; Registers used:
 12661 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12662 ;; Tracked objects:
 12663 ;;		On entry : 3F/0
 12664 ;;		On exit  : 3F/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12667 ;;      Params:         0       4       0       0       0       0       0       0
 12668 ;;      Locals:         0       9       0       0       0       0       0       0
 12669 ;;      Temps:          0       4       0       0       0       0       0       0
 12670 ;;      Totals:         0      17       0       0       0       0       0       0
 12671 ;;Total ram usage:       17 bytes
 12672 ;; Hardware stack levels used: 1
 12673 ;; Hardware stack levels required when called: 5
 12674 ;; This function calls:
 12675 ;;		Nothing
 12676 ;; This function is called by:
 12677 ;;		_recv_msg_footer
 12678 ;;		_send_msg
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682     06DC                     _nmbs_crc_calc:	
 12683                           ;psect for function _nmbs_crc_calc
 12684                           
 12685                           
 12686                           ;incstack = 0
 12687                           ; Regs used in _nmbs_crc_calc: [wreg+fsr1l+fsr1h+status,2+status,0]
 12688                           ;nmbs_crc_calc@data stored from wreg
 12689     06DC  00A8               	movwf	nmbs_crc_calc@data
 12690                           
 12691                           ;nanomodbus.c: 149:     uint16_t crc = 0xFFFF;
 12692     06DD  30FF               	movlw	255
 12693     06DE  00AF               	movwf	nmbs_crc_calc@crc
 12694     06DF  30FF               	movlw	255
 12695     06E0  00B0               	movwf	nmbs_crc_calc@crc+1
 12696                           
 12697                           ;nanomodbus.c: 150:     for (uint32_t i = 0; i < length; i++) {
 12698     06E1  3000               	movlw	0
 12699     06E2  00AC               	movwf	nmbs_crc_calc@i+3
 12700     06E3  3000               	movlw	0
 12701     06E4  00AB               	movwf	nmbs_crc_calc@i+2
 12702     06E5  3000               	movlw	0
 12703     06E6  00AA               	movwf	nmbs_crc_calc@i+1
 12704     06E7  3000               	movlw	0
 12705     06E8  00A9               	movwf	nmbs_crc_calc@i
 12706     06E9                     l725:
 12707     06E9  0823               	movf	nmbs_crc_calc@length+3,w
 12708     06EA  022C               	subwf	nmbs_crc_calc@i+3,w
 12709     06EB  1D03               	skipz
 12710     06EC  2EF7               	goto	u3035
 12711     06ED  0822               	movf	nmbs_crc_calc@length+2,w
 12712     06EE  022B               	subwf	nmbs_crc_calc@i+2,w
 12713     06EF  1D03               	skipz
 12714     06F0  2EF7               	goto	u3035
 12715     06F1  0821               	movf	nmbs_crc_calc@length+1,w
 12716     06F2  022A               	subwf	nmbs_crc_calc@i+1,w
 12717     06F3  1D03               	skipz
 12718     06F4  2EF7               	goto	u3035
 12719     06F5  0820               	movf	nmbs_crc_calc@length,w
 12720     06F6  0229               	subwf	nmbs_crc_calc@i,w
 12721     06F7                     u3035:
 12722     06F7  1803               	btfsc	3,0
 12723     06F8  2F2D               	goto	l4760
 12724                           
 12725                           ;nanomodbus.c: 151:         crc ^= (uint16_t) data[i];
 12726     06F9  0829               	movf	nmbs_crc_calc@i,w
 12727     06FA  0728               	addwf	nmbs_crc_calc@data,w
 12728     06FB  00A4               	movwf	??_nmbs_crc_calc
 12729     06FC  0824               	movf	??_nmbs_crc_calc,w
 12730     06FD  0086               	movwf	6
 12731     06FE  3001               	movlw	1	; select bank2/3
 12732     06FF  0087               	movwf	7
 12733     0700  0801               	movf	1,w
 12734     0701  00A5               	movwf	??_nmbs_crc_calc+1
 12735     0702  01A6               	clrf	??_nmbs_crc_calc+2
 12736     0703  0825               	movf	??_nmbs_crc_calc+1,w
 12737     0704  06AF               	xorwf	nmbs_crc_calc@crc,f
 12738     0705  0826               	movf	??_nmbs_crc_calc+2,w
 12739     0706  06B0               	xorwf	nmbs_crc_calc@crc+1,f
 12740                           
 12741                           ;nanomodbus.c: 152:         for (int j = 8; j != 0; j--) {
 12742     0707  3008               	movlw	8
 12743     0708  00AD               	movwf	nmbs_crc_calc@j
 12744     0709  3000               	movlw	0
 12745     070A  00AE               	movwf	nmbs_crc_calc@j+1
 12746     070B                     l727:
 12747                           
 12748                           ;nanomodbus.c: 153:             if ((crc & 0x0001) != 0) {
 12749     070B  1C2F               	btfss	nmbs_crc_calc@crc,0
 12750     070C  2F17               	goto	l4752
 12751                           
 12752                           ;nanomodbus.c: 154:                 crc >>= 1;
 12753     070D  3001               	movlw	1
 12754     070E                     u3005:
 12755     070E  36B0               	lsrf	nmbs_crc_calc@crc+1,f
 12756     070F  0CAF               	rrf	nmbs_crc_calc@crc,f
 12757     0710  0B89               	decfsz	9,f
 12758     0711  2F0E               	goto	u3005
 12759                           
 12760                           ;nanomodbus.c: 155:                 crc ^= 0xA001;
 12761     0712  3001               	movlw	1
 12762     0713  06AF               	xorwf	nmbs_crc_calc@crc,f
 12763     0714  30A0               	movlw	160
 12764     0715  06B0               	xorwf	nmbs_crc_calc@crc+1,f
 12765                           
 12766                           ;nanomodbus.c: 156:             }
 12767     0716  2F1C               	goto	l4754
 12768     0717                     l4752:
 12769                           
 12770                           ;nanomodbus.c: 158:                 crc >>= 1;
 12771     0717  3001               	movlw	1
 12772     0718                     u3015:
 12773     0718  36B0               	lsrf	nmbs_crc_calc@crc+1,f
 12774     0719  0CAF               	rrf	nmbs_crc_calc@crc,f
 12775     071A  0B89               	decfsz	9,f
 12776     071B  2F18               	goto	u3015
 12777     071C                     l4754:
 12778                           
 12779                           ;nanomodbus.c: 159:         }
 12780     071C  30FF               	movlw	255
 12781     071D  07AD               	addwf	nmbs_crc_calc@j,f
 12782     071E  30FF               	movlw	255
 12783     071F  3DAE               	addwfc	nmbs_crc_calc@j+1,f
 12784     0720  082D               	movf	nmbs_crc_calc@j,w
 12785     0721  042E               	iorwf	nmbs_crc_calc@j+1,w
 12786     0722  1D03               	btfss	3,2
 12787     0723  2F0B               	goto	l727
 12788                           
 12789                           ;nanomodbus.c: 160:     }
 12790     0724  3001               	movlw	1
 12791     0725  07A9               	addwf	nmbs_crc_calc@i,f
 12792     0726  3000               	movlw	0
 12793     0727  3DAA               	addwfc	nmbs_crc_calc@i+1,f
 12794     0728  3000               	movlw	0
 12795     0729  3DAB               	addwfc	nmbs_crc_calc@i+2,f
 12796     072A  3000               	movlw	0
 12797     072B  3DAC               	addwfc	nmbs_crc_calc@i+3,f
 12798     072C  2EE9               	goto	l725
 12799     072D                     l4760:
 12800                           
 12801                           ;nanomodbus.c: 162:     return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 12802     072D  0830               	movf	nmbs_crc_calc@crc+1,w
 12803     072E  00A4               	movwf	??_nmbs_crc_calc
 12804     072F  01A5               	clrf	??_nmbs_crc_calc+1
 12805     0730  082F               	movf	nmbs_crc_calc@crc,w
 12806     0731  00A7               	movwf	??_nmbs_crc_calc+3
 12807     0732  01A6               	clrf	??_nmbs_crc_calc+2
 12808     0733  0824               	movf	??_nmbs_crc_calc,w
 12809     0734  0426               	iorwf	??_nmbs_crc_calc+2,w
 12810     0735  00A0               	movwf	?_nmbs_crc_calc
 12811     0736  0825               	movf	??_nmbs_crc_calc+1,w
 12812     0737  0427               	iorwf	??_nmbs_crc_calc+3,w
 12813     0738  00A1               	movwf	?_nmbs_crc_calc+1
 12814     0739  0008               	return
 12815     073A                     __end_of_nmbs_crc_calc:
 12816                           
 12817                           	psect	text37
 12818     0CFE                     __ptext37:	
 12819 ;; *************** function _get_2 *****************
 12820 ;; Defined at:
 12821 ;;		line 56 in file "nanomodbus.c"
 12822 ;; Parameters:    Size  Location     Type
 12823 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12824 ;;		 -> main@nmbs(59), 
 12825 ;; Auto vars:     Size  Location     Type
 12826 ;;  nmbs            1   11[BANK0 ] PTR struct nmbs_t
 12827 ;;		 -> main@nmbs(59), 
 12828 ;;  result          2    9[BANK0 ] unsigned short 
 12829 ;; Return value:  Size  Location     Type
 12830 ;;                  2    0[BANK0 ] unsigned short 
 12831 ;; Registers used:
 12832 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12833 ;; Tracked objects:
 12834 ;;		On entry : 3E/0
 12835 ;;		On exit  : 3F/0
 12836 ;;		Unchanged: 0/0
 12837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12838 ;;      Params:         0       2       0       0       0       0       0       0
 12839 ;;      Locals:         0       3       0       0       0       0       0       0
 12840 ;;      Temps:          0       7       0       0       0       0       0       0
 12841 ;;      Totals:         0      12       0       0       0       0       0       0
 12842 ;;Total ram usage:       12 bytes
 12843 ;; Hardware stack levels used: 1
 12844 ;; Hardware stack levels required when called: 5
 12845 ;; This function calls:
 12846 ;;		Nothing
 12847 ;; This function is called by:
 12848 ;;		_recv_msg_footer
 12849 ;;		_recv_read_registers_res
 12850 ;;		_recv_write_single_coil_res
 12851 ;;		_recv_write_single_register_res
 12852 ;;		_handle_read_registers
 12853 ;;		_handle_write_single_coil@nanomodbus$F2242
 12854 ;;		_handle_write_single_register@nanomodbus$F2271
 12855 ;; This function uses a non-reentrant model
 12856 ;;
 12857                           
 12858     0CFE                     _get_2:	
 12859                           ;psect for function _get_2
 12860                           
 12861                           
 12862                           ;incstack = 0
 12863                           ; Regs used in _get_2: [wreg+fsr1l+fsr1h+status,2+status,0]
 12864                           ;get_2@nmbs stored from wreg
 12865     0CFE  0140               	movlb	0	; select bank0
 12866     0CFF  00AB               	movwf	get_2@nmbs
 12867                           
 12868                           ;nanomodbus.c: 57:     uint16_t result =
 12869     0D00  082B               	movf	get_2@nmbs,w
 12870     0D01  3E20               	addlw	32
 12871     0D02  0086               	movwf	6
 12872     0D03  3001               	movlw	1	; select bank2/3
 12873     0D04  0087               	movwf	7
 12874     0D05  0801               	movf	1,w
 12875     0D06  072B               	addwf	get_2@nmbs,w
 12876     0D07  00A2               	movwf	??_get_2
 12877     0D08  0A22               	incf	??_get_2,w
 12878     0D09  0086               	movwf	6
 12879     0D0A  3001               	movlw	1	; select bank2/3
 12880     0D0B  0087               	movwf	7
 12881     0D0C  0801               	movf	1,w
 12882     0D0D  00A3               	movwf	??_get_2+1
 12883     0D0E  01A4               	clrf	??_get_2+2
 12884     0D0F  082B               	movf	get_2@nmbs,w
 12885     0D10  3E20               	addlw	32
 12886     0D11  0086               	movwf	6
 12887     0D12  3001               	movlw	1	; select bank2/3
 12888     0D13  0087               	movwf	7
 12889     0D14  0801               	movf	1,w
 12890     0D15  072B               	addwf	get_2@nmbs,w
 12891     0D16  00A5               	movwf	??_get_2+3
 12892     0D17  0825               	movf	??_get_2+3,w
 12893     0D18  0086               	movwf	6
 12894     0D19  3001               	movlw	1	; select bank2/3
 12895     0D1A  0087               	movwf	7
 12896     0D1B  0801               	movf	1,w
 12897     0D1C  00A6               	movwf	??_get_2+4
 12898     0D1D  01A7               	clrf	??_get_2+5
 12899     0D1E  0826               	movf	??_get_2+4,w
 12900     0D1F  00A7               	movwf	??_get_2+5
 12901     0D20  01A6               	clrf	??_get_2+4
 12902     0D21  0823               	movf	??_get_2+1,w
 12903     0D22  0426               	iorwf	??_get_2+4,w
 12904     0D23  00A9               	movwf	get_2@result
 12905     0D24  0824               	movf	??_get_2+2,w
 12906     0D25  0427               	iorwf	??_get_2+5,w
 12907     0D26  00AA               	movwf	get_2@result+1
 12908                           
 12909                           ;nanomodbus.c: 59:     nmbs->msg.buf_idx += 2;
 12910     0D27  082B               	movf	get_2@nmbs,w
 12911     0D28  3E20               	addlw	32
 12912     0D29  0086               	movwf	6
 12913     0D2A  3001               	movlw	1	; select bank2/3
 12914     0D2B  0087               	movwf	7
 12915     0D2C  3002               	movlw	2
 12916     0D2D  0781               	addwf	1,f
 12917     0D2E  3141               	addfsr 1,1
 12918     0D2F  1803               	skipnc
 12919     0D30  0A81               	incf	1,f
 12920                           
 12921                           ;nanomodbus.c: 60:     return result;
 12922     0D31  082A               	movf	get_2@result+1,w
 12923     0D32  00A1               	movwf	?_get_2+1
 12924     0D33  0829               	movf	get_2@result,w
 12925     0D34  00A0               	movwf	?_get_2
 12926     0D35  0008               	return
 12927     0D36                     __end_of_get_2:
 12928                           
 12929                           	psect	text38
 12930     0917                     __ptext38:	
 12931 ;; *************** function _put_res_header *****************
 12932 ;; Defined at:
 12933 ;;		line 300 in file "nanomodbus.c"
 12934 ;; Parameters:    Size  Location     Type
 12935 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12936 ;;		 -> main@nmbs(59), 
 12937 ;;  data_length     2    7[BANK0 ] unsigned short 
 12938 ;; Auto vars:     Size  Location     Type
 12939 ;;  nmbs            1    9[BANK0 ] PTR struct nmbs_t
 12940 ;;		 -> main@nmbs(59), 
 12941 ;; Return value:  Size  Location     Type
 12942 ;;                  1    wreg      void 
 12943 ;; Registers used:
 12944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12945 ;; Tracked objects:
 12946 ;;		On entry : 3E/0
 12947 ;;		On exit  : 3F/0
 12948 ;;		Unchanged: 0/0
 12949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12950 ;;      Params:         0       2       0       0       0       0       0       0
 12951 ;;      Locals:         0       1       0       0       0       0       0       0
 12952 ;;      Temps:          0       0       0       0       0       0       0       0
 12953 ;;      Totals:         0       3       0       0       0       0       0       0
 12954 ;;Total ram usage:        3 bytes
 12955 ;; Hardware stack levels used: 1
 12956 ;; Hardware stack levels required when called: 7
 12957 ;; This function calls:
 12958 ;;		_put_msg_header
 12959 ;; This function is called by:
 12960 ;;		_handle_read_registers
 12961 ;;		_handle_write_single_coil@nanomodbus$F2242
 12962 ;;		_handle_write_single_register@nanomodbus$F2271
 12963 ;; This function uses a non-reentrant model
 12964 ;;
 12965                           
 12966     0917                     _put_res_header:	
 12967                           ;psect for function _put_res_header
 12968                           
 12969                           
 12970                           ;incstack = 0
 12971                           ; Regs used in _put_res_header: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12972                           ;put_res_header@nmbs stored from wreg
 12973     0917  0140               	movlb	0	; select bank0
 12974     0918  00A9               	movwf	put_res_header@nmbs
 12975                           
 12976                           ;nanomodbus.c: 301:     put_msg_header(nmbs, data_length);
 12977     0919  0828               	movf	put_res_header@data_length+1,w
 12978     091A  00A5               	movwf	put_msg_header@data_length+1
 12979     091B  0827               	movf	put_res_header@data_length,w
 12980     091C  00A4               	movwf	put_msg_header@data_length
 12981     091D  0829               	movf	put_res_header@nmbs,w
 12982     091E  3187  278F         	fcall	_put_msg_header
 12983     0920  0008               	return
 12984     0921                     __end_of_put_res_header:
 12985                           
 12986                           	psect	text39
 12987     078F                     __ptext39:	
 12988 ;; *************** function _put_msg_header *****************
 12989 ;; Defined at:
 12990 ;;		line 249 in file "nanomodbus.c"
 12991 ;; Parameters:    Size  Location     Type
 12992 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12993 ;;		 -> main@nmbs(59), 
 12994 ;;  data_length     2    4[BANK0 ] unsigned short 
 12995 ;; Auto vars:     Size  Location     Type
 12996 ;;  nmbs            1    6[BANK0 ] PTR struct nmbs_t
 12997 ;;		 -> main@nmbs(59), 
 12998 ;; Return value:  Size  Location     Type
 12999 ;;                  1    wreg      void 
 13000 ;; Registers used:
 13001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13002 ;; Tracked objects:
 13003 ;;		On entry : 3F/0
 13004 ;;		On exit  : 3F/0
 13005 ;;		Unchanged: 0/0
 13006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13007 ;;      Params:         0       2       0       0       0       0       0       0
 13008 ;;      Locals:         0       1       0       0       0       0       0       0
 13009 ;;      Temps:          0       0       0       0       0       0       0       0
 13010 ;;      Totals:         0       3       0       0       0       0       0       0
 13011 ;;Total ram usage:        3 bytes
 13012 ;; Hardware stack levels used: 1
 13013 ;; Hardware stack levels required when called: 6
 13014 ;; This function calls:
 13015 ;;		_msg_buf_reset
 13016 ;;		_put_1
 13017 ;;		_put_2
 13018 ;; This function is called by:
 13019 ;;		_put_res_header
 13020 ;;		_send_exception_msg
 13021 ;; This function uses a non-reentrant model
 13022 ;;
 13023                           
 13024     078F                     _put_msg_header:	
 13025                           ;psect for function _put_msg_header
 13026                           
 13027                           
 13028                           ;incstack = 0
 13029                           ; Regs used in _put_msg_header: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13030                           ;put_msg_header@nmbs stored from wreg
 13031     078F  00A6               	movwf	put_msg_header@nmbs
 13032                           
 13033                           ;nanomodbus.c: 250:     msg_buf_reset(nmbs);
 13034     0790  0826               	movf	put_msg_header@nmbs,w
 13035     0791  3189  210D  3187   	fcall	_msg_buf_reset
 13036                           
 13037                           ;nanomodbus.c: 252:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 13038     0794  0826               	movf	put_msg_header@nmbs,w
 13039     0795  3E31               	addlw	49
 13040     0796  0086               	movwf	6
 13041     0797  3001               	movlw	1	; select bank2/3
 13042     0798  0087               	movwf	7
 13043     0799  0301               	decf	1,w
 13044     079A  1903               	btfsc	3,2
 13045     079B  2FC3               	goto	L6
 13046                           
 13047                           ;nanomodbus.c: 254:     }
 13048                           
 13049                           ;nanomodbus.c: 253:         put_1(nmbs, nmbs->msg.unit_id);
 13050     079C  0826               	movf	put_msg_header@nmbs,w
 13051     079D  3E31               	addlw	49
 13052     079E  0086               	movwf	6
 13053     079F  3001               	movlw	1	; select bank2/3
 13054     07A0  0087               	movwf	7
 13055     07A1  3002               	movlw	2
 13056     07A2  0601               	xorwf	1,w
 13057     07A3  1D03               	btfss	3,2
 13058     07A4  2FCE               	goto	l758
 13059                           
 13060                           ;nanomodbus.c: 256:         put_2(nmbs, nmbs->msg.transaction_id);
 13061     07A5  0826               	movf	put_msg_header@nmbs,w
 13062     07A6  3E24               	addlw	36
 13063     07A7  0086               	movwf	6
 13064     07A8  3001               	movlw	1	; select bank2/3
 13065     07A9  0087               	movwf	7
 13066     07AA  3F40               	moviw [0]fsr1
 13067     07AB  00A0               	movwf	put_2@data
 13068     07AC  3F41               	moviw [1]fsr1
 13069     07AD  00A1               	movwf	put_2@data+1
 13070     07AE  0826               	movf	put_msg_header@nmbs,w
 13071     07AF  318B  2370  3187   	fcall	_put_2
 13072                           
 13073                           ;nanomodbus.c: 257:         put_2(nmbs, 0);
 13074     07B2  3000               	movlw	0
 13075     07B3  00A0               	movwf	put_2@data
 13076     07B4  00A1               	movwf	put_2@data+1
 13077     07B5  0826               	movf	put_msg_header@nmbs,w
 13078     07B6  318B  2370  3187   	fcall	_put_2
 13079                           
 13080                           ;nanomodbus.c: 258:         put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 13081     07B9  0824               	movf	put_msg_header@data_length,w
 13082     07BA  3E02               	addlw	2
 13083     07BB  00A0               	movwf	put_2@data
 13084     07BC  3000               	movlw	0
 13085     07BD  3D25               	addwfc	put_msg_header@data_length+1,w
 13086     07BE  00A1               	movwf	put_2@data+1
 13087     07BF  0826               	movf	put_msg_header@nmbs,w
 13088     07C0  318B  2370  3187   	fcall	_put_2
 13089     07C3                     L6:
 13090                           
 13091                           ;nanomodbus.c: 259:         put_1(nmbs, nmbs->msg.unit_id);
 13092     07C3  0826               	movf	put_msg_header@nmbs,w
 13093     07C4  3E22               	addlw	34
 13094     07C5  0086               	movwf	6
 13095     07C6  3001               	movlw	1	; select bank2/3
 13096     07C7  0087               	movwf	7
 13097     07C8  0801               	movf	1,w
 13098     07C9  00A0               	movwf	put_1@data
 13099     07CA  0826               	movf	put_msg_header@nmbs,w
 13100     07CB  318A  2279  3187   	fcall	_put_1
 13101     07CE                     l758:
 13102                           
 13103                           ;nanomodbus.c: 262:     put_1(nmbs, nmbs->msg.fc);
 13104     07CE  0826               	movf	put_msg_header@nmbs,w
 13105     07CF  3E23               	addlw	35
 13106     07D0  0086               	movwf	6
 13107     07D1  3001               	movlw	1	; select bank2/3
 13108     07D2  0087               	movwf	7
 13109     07D3  0801               	movf	1,w
 13110     07D4  00A0               	movwf	put_1@data
 13111     07D5  0826               	movf	put_msg_header@nmbs,w
 13112     07D6  318A  2279         	fcall	_put_1
 13113     07D8  0008               	return
 13114     07D9                     __end_of_put_msg_header:
 13115                           
 13116                           	psect	text40
 13117     0B70                     __ptext40:	
 13118 ;; *************** function _put_2 *****************
 13119 ;; Defined at:
 13120 ;;		line 64 in file "nanomodbus.c"
 13121 ;; Parameters:    Size  Location     Type
 13122 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13123 ;;		 -> main@nmbs(59), 
 13124 ;;  data            2    0[BANK0 ] unsigned short 
 13125 ;; Auto vars:     Size  Location     Type
 13126 ;;  nmbs            1    3[BANK0 ] PTR struct nmbs_t
 13127 ;;		 -> main@nmbs(59), 
 13128 ;; Return value:  Size  Location     Type
 13129 ;;                  1    wreg      void 
 13130 ;; Registers used:
 13131 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13132 ;; Tracked objects:
 13133 ;;		On entry : 3E/0
 13134 ;;		On exit  : 3F/0
 13135 ;;		Unchanged: 0/0
 13136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13137 ;;      Params:         0       2       0       0       0       0       0       0
 13138 ;;      Locals:         0       1       0       0       0       0       0       0
 13139 ;;      Temps:          0       1       0       0       0       0       0       0
 13140 ;;      Totals:         0       4       0       0       0       0       0       0
 13141 ;;Total ram usage:        4 bytes
 13142 ;; Hardware stack levels used: 1
 13143 ;; Hardware stack levels required when called: 5
 13144 ;; This function calls:
 13145 ;;		Nothing
 13146 ;; This function is called by:
 13147 ;;		_put_msg_header
 13148 ;;		_send_msg
 13149 ;;		_handle_read_registers
 13150 ;;		_handle_write_single_coil@nanomodbus$F2242
 13151 ;;		_handle_write_single_register@nanomodbus$F2271
 13152 ;; This function uses a non-reentrant model
 13153 ;;
 13154                           
 13155     0B70                     _put_2:	
 13156                           ;psect for function _put_2
 13157                           
 13158                           
 13159                           ;incstack = 0
 13160                           ; Regs used in _put_2: [wreg+fsr1l+fsr1h+status,2+status,0]
 13161                           ;put_2@nmbs stored from wreg
 13162     0B70  0140               	movlb	0	; select bank0
 13163     0B71  00A3               	movwf	put_2@nmbs
 13164                           
 13165                           ;nanomodbus.c: 65:     nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU
      +                          );
 13166     0B72  0823               	movf	put_2@nmbs,w
 13167     0B73  3E20               	addlw	32
 13168     0B74  0086               	movwf	6
 13169     0B75  3001               	movlw	1	; select bank2/3
 13170     0B76  0087               	movwf	7
 13171     0B77  0801               	movf	1,w
 13172     0B78  0723               	addwf	put_2@nmbs,w
 13173     0B79  00A2               	movwf	??_put_2
 13174     0B7A  0822               	movf	??_put_2,w
 13175     0B7B  0086               	movwf	6
 13176     0B7C  3001               	movlw	1	; select bank2/3
 13177     0B7D  0087               	movwf	7
 13178     0B7E  0821               	movf	put_2@data+1,w
 13179     0B7F  0081               	movwf	1
 13180                           
 13181                           ;nanomodbus.c: 66:     nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 13182     0B80  0823               	movf	put_2@nmbs,w
 13183     0B81  3E20               	addlw	32
 13184     0B82  0086               	movwf	6
 13185     0B83  3001               	movlw	1	; select bank2/3
 13186     0B84  0087               	movwf	7
 13187     0B85  0801               	movf	1,w
 13188     0B86  0723               	addwf	put_2@nmbs,w
 13189     0B87  00A2               	movwf	??_put_2
 13190     0B88  0A22               	incf	??_put_2,w
 13191     0B89  0086               	movwf	6
 13192     0B8A  3001               	movlw	1	; select bank2/3
 13193     0B8B  0087               	movwf	7
 13194     0B8C  0820               	movf	put_2@data,w
 13195     0B8D  0081               	movwf	1
 13196                           
 13197                           ;nanomodbus.c: 67:     nmbs->msg.buf_idx += 2;
 13198     0B8E  0823               	movf	put_2@nmbs,w
 13199     0B8F  3E20               	addlw	32
 13200     0B90  0086               	movwf	6
 13201     0B91  3001               	movlw	1	; select bank2/3
 13202     0B92  0087               	movwf	7
 13203     0B93  3002               	movlw	2
 13204     0B94  0781               	addwf	1,f
 13205     0B95  3141               	addfsr 1,1
 13206     0B96  1803               	skipnc
 13207     0B97  0A81               	incf	1,f
 13208     0B98  0008               	return
 13209     0B99                     __end_of_put_2:
 13210                           
 13211                           	psect	text41
 13212     0A79                     __ptext41:	
 13213 ;; *************** function _put_1 *****************
 13214 ;; Defined at:
 13215 ;;		line 46 in file "nanomodbus.c"
 13216 ;; Parameters:    Size  Location     Type
 13217 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13218 ;;		 -> main@nmbs(59), 
 13219 ;;  data            1    0[BANK0 ] unsigned char 
 13220 ;; Auto vars:     Size  Location     Type
 13221 ;;  nmbs            1    2[BANK0 ] PTR struct nmbs_t
 13222 ;;		 -> main@nmbs(59), 
 13223 ;; Return value:  Size  Location     Type
 13224 ;;                  1    wreg      void 
 13225 ;; Registers used:
 13226 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13227 ;; Tracked objects:
 13228 ;;		On entry : 3E/1
 13229 ;;		On exit  : 3F/0
 13230 ;;		Unchanged: 0/0
 13231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13232 ;;      Params:         0       1       0       0       0       0       0       0
 13233 ;;      Locals:         0       1       0       0       0       0       0       0
 13234 ;;      Temps:          0       1       0       0       0       0       0       0
 13235 ;;      Totals:         0       3       0       0       0       0       0       0
 13236 ;;Total ram usage:        3 bytes
 13237 ;; Hardware stack levels used: 1
 13238 ;; Hardware stack levels required when called: 5
 13239 ;; This function calls:
 13240 ;;		Nothing
 13241 ;; This function is called by:
 13242 ;;		_put_msg_header
 13243 ;;		_send_exception_msg
 13244 ;;		_handle_read_registers
 13245 ;; This function uses a non-reentrant model
 13246 ;;
 13247                           
 13248     0A79                     _put_1:	
 13249                           ;psect for function _put_1
 13250                           
 13251                           
 13252                           ;incstack = 0
 13253                           ; Regs used in _put_1: [wreg+fsr1l+fsr1h+status,2+status,0]
 13254                           ;put_1@nmbs stored from wreg
 13255     0A79  0140               	movlb	0	; select bank0
 13256     0A7A  00A2               	movwf	put_1@nmbs
 13257                           
 13258                           ;nanomodbus.c: 47:     nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 13259     0A7B  0822               	movf	put_1@nmbs,w
 13260     0A7C  3E20               	addlw	32
 13261     0A7D  0086               	movwf	6
 13262     0A7E  3001               	movlw	1	; select bank2/3
 13263     0A7F  0087               	movwf	7
 13264     0A80  0801               	movf	1,w
 13265     0A81  0722               	addwf	put_1@nmbs,w
 13266     0A82  00A1               	movwf	??_put_1
 13267     0A83  0821               	movf	??_put_1,w
 13268     0A84  0086               	movwf	6
 13269     0A85  3001               	movlw	1	; select bank2/3
 13270     0A86  0087               	movwf	7
 13271     0A87  0820               	movf	put_1@data,w
 13272     0A88  0081               	movwf	1
 13273                           
 13274                           ;nanomodbus.c: 48:     nmbs->msg.buf_idx++;
 13275     0A89  0822               	movf	put_1@nmbs,w
 13276     0A8A  3E20               	addlw	32
 13277     0A8B  0086               	movwf	6
 13278     0A8C  3001               	movlw	1	; select bank2/3
 13279     0A8D  0087               	movwf	7
 13280     0A8E  3001               	movlw	1
 13281     0A8F  0781               	addwf	1,f
 13282     0A90  3141               	addfsr 1,1
 13283     0A91  1803               	skipnc
 13284     0A92  0A81               	incf	1,f
 13285     0A93  0008               	return
 13286     0A94                     __end_of_put_1:
 13287                           
 13288                           	psect	text42
 13289     090D                     __ptext42:	
 13290 ;; *************** function _msg_buf_reset *****************
 13291 ;; Defined at:
 13292 ;;		line 70 in file "nanomodbus.c"
 13293 ;; Parameters:    Size  Location     Type
 13294 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13295 ;;		 -> main@nmbs(59), 
 13296 ;; Auto vars:     Size  Location     Type
 13297 ;;  nmbs            1    0[BANK0 ] PTR struct nmbs_t
 13298 ;;		 -> main@nmbs(59), 
 13299 ;; Return value:  Size  Location     Type
 13300 ;;                  1    wreg      void 
 13301 ;; Registers used:
 13302 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13303 ;; Tracked objects:
 13304 ;;		On entry : 3F/0
 13305 ;;		On exit  : 3F/0
 13306 ;;		Unchanged: 0/0
 13307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13308 ;;      Params:         0       0       0       0       0       0       0       0
 13309 ;;      Locals:         0       1       0       0       0       0       0       0
 13310 ;;      Temps:          0       0       0       0       0       0       0       0
 13311 ;;      Totals:         0       1       0       0       0       0       0       0
 13312 ;;Total ram usage:        1 bytes
 13313 ;; Hardware stack levels used: 1
 13314 ;; Hardware stack levels required when called: 5
 13315 ;; This function calls:
 13316 ;;		Nothing
 13317 ;; This function is called by:
 13318 ;;		_msg_state_reset
 13319 ;;		_put_msg_header
 13320 ;; This function uses a non-reentrant model
 13321 ;;
 13322                           
 13323     090D                     _msg_buf_reset:	
 13324                           ;psect for function _msg_buf_reset
 13325                           
 13326                           
 13327                           ;incstack = 0
 13328                           ; Regs used in _msg_buf_reset: [wreg+fsr1l+fsr1h+status,2+status,0]
 13329                           ;msg_buf_reset@nmbs stored from wreg
 13330     090D  00A0               	movwf	msg_buf_reset@nmbs
 13331                           
 13332                           ;nanomodbus.c: 71:     nmbs->msg.buf_idx = 0;
 13333     090E  0820               	movf	msg_buf_reset@nmbs,w
 13334     090F  3E20               	addlw	32
 13335     0910  0086               	movwf	6
 13336     0911  3001               	movlw	1	; select bank2/3
 13337     0912  0087               	movwf	7
 13338     0913  3000               	movlw	0
 13339     0914  3FC0               	movwi [0]fsr1
 13340     0915  3FC1               	movwi [1]fsr1
 13341     0916  0008               	return
 13342     0917                     __end_of_msg_buf_reset:
 13343                           
 13344                           	psect	text43
 13345     0CC8                     __ptext43:	
 13346 ;; *************** function _handler_read_holding_registers *****************
 13347 ;; Defined at:
 13348 ;;		line 98 in file "modbus_imp.c"
 13349 ;; Parameters:    Size  Location     Type
 13350 ;;  address         2    0[BANK0 ] unsigned short 
 13351 ;;  quantity        2    2[BANK0 ] unsigned short 
 13352 ;;  registers_ou    1    4[BANK0 ] PTR unsigned short 
 13353 ;;		 -> handle_read_registers@regs(10), 
 13354 ;;  unit_id         1    5[BANK0 ] unsigned char 
 13355 ;;  arg             1    6[BANK0 ] PTR void 
 13356 ;;		 -> main@registers(11), 
 13357 ;; Auto vars:     Size  Location     Type
 13358 ;;  i               2   11[BANK0 ] int 
 13359 ;;  server_regis    1   10[BANK0 ] PTR unsigned short 
 13360 ;;		 -> registers.server_holding_register(4), main@registers(11), 
 13361 ;; Return value:  Size  Location     Type
 13362 ;;                  1    wreg      enum E10517
 13363 ;; Registers used:
 13364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 13365 ;; Tracked objects:
 13366 ;;		On entry : 3F/0
 13367 ;;		On exit  : 3F/0
 13368 ;;		Unchanged: 0/0
 13369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13370 ;;      Params:         0       7       0       0       0       0       0       0
 13371 ;;      Locals:         0       3       0       0       0       0       0       0
 13372 ;;      Temps:          0       3       0       0       0       0       0       0
 13373 ;;      Totals:         0      13       0       0       0       0       0       0
 13374 ;;Total ram usage:       13 bytes
 13375 ;; Hardware stack levels used: 1
 13376 ;; Hardware stack levels required when called: 5
 13377 ;; This function calls:
 13378 ;;		Nothing
 13379 ;; This function is called by:
 13380 ;;		_main
 13381 ;;		_handle_read_registers
 13382 ;; This function uses a non-reentrant model
 13383 ;;
 13384                           
 13385     0CC8                     _handler_read_holding_registers:	
 13386                           ;psect for function _handler_read_holding_registers
 13387                           
 13388                           
 13389                           ;modbus_imp.c: 99:   if (address + quantity > 2)
 13390                           
 13391                           ;incstack = 0
 13392                           ; Regs used in _handler_read_holding_registers: [wreg-fsr1h+status,2+status,0]
 13393     0CC8  0822               	movf	handler_read_holding_registers@quantity,w
 13394     0CC9  0720               	addwf	handler_read_holding_registers@address,w
 13395     0CCA  00A7               	movwf	??_handler_read_holding_registers
 13396     0CCB  0823               	movf	handler_read_holding_registers@quantity+1,w
 13397     0CCC  3D21               	addwfc	handler_read_holding_registers@address+1,w
 13398     0CCD  00A8               	movwf	??_handler_read_holding_registers+1
 13399     0CCE  3000               	movlw	0
 13400     0CCF  0228               	subwf	??_handler_read_holding_registers+1,w
 13401     0CD0  3003               	movlw	3
 13402     0CD1  1903               	skipnz
 13403     0CD2  0227               	subwf	??_handler_read_holding_registers,w
 13404     0CD3  1C03               	skipc
 13405     0CD4  2CD7               	goto	l4968
 13406                           
 13407                           ;modbus_imp.c: 100:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 13408     0CD5  3002               	movlw	2
 13409     0CD6  0008               	return
 13410     0CD7                     l4968:
 13411                           
 13412                           ;modbus_imp.c: 103:   uint16_t* server_registers = (uint16_t *)(&(((mod_bus_registers*) 
      +                          arg)->server_holding_register));
 13413     0CD7  0826               	movf	handler_read_holding_registers@arg,w
 13414     0CD8  3E07               	addlw	7
 13415     0CD9  00AA               	movwf	handler_read_holding_registers@server_registers
 13416                           
 13417                           ;modbus_imp.c: 104:   for (int i = 0; i < quantity; i++)
 13418     0CDA  01AB               	clrf	handler_read_holding_registers@i
 13419     0CDB  01AC               	clrf	handler_read_holding_registers@i+1
 13420     0CDC                     l4976:
 13421     0CDC  0823               	movf	handler_read_holding_registers@quantity+1,w
 13422     0CDD  022C               	subwf	handler_read_holding_registers@i+1,w
 13423     0CDE  1D03               	skipz
 13424     0CDF  2CE2               	goto	u3315
 13425     0CE0  0822               	movf	handler_read_holding_registers@quantity,w
 13426     0CE1  022B               	subwf	handler_read_holding_registers@i,w
 13427     0CE2                     u3315:
 13428     0CE2  1803               	btfsc	3,0
 13429     0CE3  2CFC               	goto	l4978
 13430                           
 13431                           ;modbus_imp.c: 105:     registers_out[i] = server_registers[address + i];
 13432     0CE4  352B               	lslf	handler_read_holding_registers@i,w
 13433     0CE5  072A               	addwf	handler_read_holding_registers@server_registers,w
 13434     0CE6  00A7               	movwf	??_handler_read_holding_registers
 13435     0CE7  3520               	lslf	handler_read_holding_registers@address,w
 13436     0CE8  0727               	addwf	??_handler_read_holding_registers,w
 13437     0CE9  00A8               	movwf	??_handler_read_holding_registers+1
 13438     0CEA  0828               	movf	??_handler_read_holding_registers+1,w
 13439     0CEB  0086               	movwf	6
 13440     0CEC  0187               	clrf	7
 13441     0CED  352B               	lslf	handler_read_holding_registers@i,w
 13442     0CEE  0724               	addwf	handler_read_holding_registers@registers_out,w
 13443     0CEF  00A9               	movwf	??_handler_read_holding_registers+2
 13444     0CF0  0829               	movf	??_handler_read_holding_registers+2,w
 13445     0CF1  0084               	movwf	4
 13446     0CF2  0185               	clrf	5
 13447     0CF3  3F40               	moviw [0]fsr1
 13448     0CF4  3F80               	movwi [0]fsr0
 13449     0CF5  3F41               	moviw [1]fsr1
 13450     0CF6  3F81               	movwi [1]fsr0
 13451     0CF7  3001               	movlw	1
 13452     0CF8  07AB               	addwf	handler_read_holding_registers@i,f
 13453     0CF9  3000               	movlw	0
 13454     0CFA  3DAC               	addwfc	handler_read_holding_registers@i+1,f
 13455     0CFB  2CDC               	goto	l4976
 13456     0CFC                     l4978:
 13457                           
 13458                           ;modbus_imp.c: 107:   return NMBS_ERROR_NONE;
 13459     0CFC  3000               	movlw	0
 13460     0CFD  0008               	return
 13461     0CFE                     __end_of_handler_read_holding_registers:
 13462                           
 13463                           	psect	text44
 13464     0C92                     __ptext44:	
 13465 ;; *************** function _handler_read_input_registers *****************
 13466 ;; Defined at:
 13467 ;;		line 86 in file "modbus_imp.c"
 13468 ;; Parameters:    Size  Location     Type
 13469 ;;  address         2    0[BANK0 ] unsigned short 
 13470 ;;  quantity        2    2[BANK0 ] unsigned short 
 13471 ;;  registers_ou    1    4[BANK0 ] PTR unsigned short 
 13472 ;;		 -> handle_read_registers@regs(10), 
 13473 ;;  unit_id         1    5[BANK0 ] unsigned char 
 13474 ;;  arg             1    6[BANK0 ] PTR void 
 13475 ;;		 -> main@registers(11), 
 13476 ;; Auto vars:     Size  Location     Type
 13477 ;;  i               2   11[BANK0 ] int 
 13478 ;;  server_regis    1   10[BANK0 ] PTR unsigned short 
 13479 ;;		 -> registers.server_input_register(6), main@registers(11), 
 13480 ;; Return value:  Size  Location     Type
 13481 ;;                  1    wreg      enum E10517
 13482 ;; Registers used:
 13483 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 13484 ;; Tracked objects:
 13485 ;;		On entry : 3F/0
 13486 ;;		On exit  : 3F/0
 13487 ;;		Unchanged: 0/0
 13488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13489 ;;      Params:         0       7       0       0       0       0       0       0
 13490 ;;      Locals:         0       3       0       0       0       0       0       0
 13491 ;;      Temps:          0       3       0       0       0       0       0       0
 13492 ;;      Totals:         0      13       0       0       0       0       0       0
 13493 ;;Total ram usage:       13 bytes
 13494 ;; Hardware stack levels used: 1
 13495 ;; Hardware stack levels required when called: 5
 13496 ;; This function calls:
 13497 ;;		Nothing
 13498 ;; This function is called by:
 13499 ;;		_main
 13500 ;;		_handle_read_registers
 13501 ;; This function uses a non-reentrant model
 13502 ;;
 13503                           
 13504     0C92                     _handler_read_input_registers:	
 13505                           ;psect for function _handler_read_input_registers
 13506                           
 13507                           
 13508                           ;modbus_imp.c: 87:   if (address + quantity > 3)
 13509                           
 13510                           ;incstack = 0
 13511                           ; Regs used in _handler_read_input_registers: [wreg-fsr1h+status,2+status,0]
 13512     0C92  0822               	movf	handler_read_input_registers@quantity,w
 13513     0C93  0720               	addwf	handler_read_input_registers@address,w
 13514     0C94  00A7               	movwf	??_handler_read_input_registers
 13515     0C95  0823               	movf	handler_read_input_registers@quantity+1,w
 13516     0C96  3D21               	addwfc	handler_read_input_registers@address+1,w
 13517     0C97  00A8               	movwf	??_handler_read_input_registers+1
 13518     0C98  3000               	movlw	0
 13519     0C99  0228               	subwf	??_handler_read_input_registers+1,w
 13520     0C9A  3004               	movlw	4
 13521     0C9B  1903               	skipnz
 13522     0C9C  0227               	subwf	??_handler_read_input_registers,w
 13523     0C9D  1C03               	skipc
 13524     0C9E  2CA1               	goto	l4948
 13525                           
 13526                           ;modbus_imp.c: 88:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 13527     0C9F  3002               	movlw	2
 13528     0CA0  0008               	return
 13529     0CA1                     l4948:
 13530                           
 13531                           ;modbus_imp.c: 91:   uint16_t* server_registers = (uint16_t *)(&(((mod_bus_registers*) a
      +                          rg)->server_input_register));
 13532     0CA1  0826               	movf	handler_read_input_registers@arg,w
 13533     0CA2  3E01               	addlw	1
 13534     0CA3  00AA               	movwf	handler_read_input_registers@server_registers
 13535                           
 13536                           ;modbus_imp.c: 92:   for (int i = 0; i < quantity; i++)
 13537     0CA4  01AB               	clrf	handler_read_input_registers@i
 13538     0CA5  01AC               	clrf	handler_read_input_registers@i+1
 13539     0CA6                     l4956:
 13540     0CA6  0823               	movf	handler_read_input_registers@quantity+1,w
 13541     0CA7  022C               	subwf	handler_read_input_registers@i+1,w
 13542     0CA8  1D03               	skipz
 13543     0CA9  2CAC               	goto	u3295
 13544     0CAA  0822               	movf	handler_read_input_registers@quantity,w
 13545     0CAB  022B               	subwf	handler_read_input_registers@i,w
 13546     0CAC                     u3295:
 13547     0CAC  1803               	btfsc	3,0
 13548     0CAD  2CC6               	goto	l4958
 13549                           
 13550                           ;modbus_imp.c: 93:     registers_out[i] = server_registers[address + i];
 13551     0CAE  352B               	lslf	handler_read_input_registers@i,w
 13552     0CAF  072A               	addwf	handler_read_input_registers@server_registers,w
 13553     0CB0  00A7               	movwf	??_handler_read_input_registers
 13554     0CB1  3520               	lslf	handler_read_input_registers@address,w
 13555     0CB2  0727               	addwf	??_handler_read_input_registers,w
 13556     0CB3  00A8               	movwf	??_handler_read_input_registers+1
 13557     0CB4  0828               	movf	??_handler_read_input_registers+1,w
 13558     0CB5  0086               	movwf	6
 13559     0CB6  0187               	clrf	7
 13560     0CB7  352B               	lslf	handler_read_input_registers@i,w
 13561     0CB8  0724               	addwf	handler_read_input_registers@registers_out,w
 13562     0CB9  00A9               	movwf	??_handler_read_input_registers+2
 13563     0CBA  0829               	movf	??_handler_read_input_registers+2,w
 13564     0CBB  0084               	movwf	4
 13565     0CBC  0185               	clrf	5
 13566     0CBD  3F40               	moviw [0]fsr1
 13567     0CBE  3F80               	movwi [0]fsr0
 13568     0CBF  3F41               	moviw [1]fsr1
 13569     0CC0  3F81               	movwi [1]fsr0
 13570     0CC1  3001               	movlw	1
 13571     0CC2  07AB               	addwf	handler_read_input_registers@i,f
 13572     0CC3  3000               	movlw	0
 13573     0CC4  3DAC               	addwfc	handler_read_input_registers@i+1,f
 13574     0CC5  2CA6               	goto	l4956
 13575     0CC6                     l4958:
 13576                           
 13577                           ;modbus_imp.c: 95:   return NMBS_ERROR_NONE;
 13578     0CC6  3000               	movlw	0
 13579     0CC7  0008               	return
 13580     0CC8                     __end_of_handler_read_input_registers:
 13581                           
 13582                           	psect	text45
 13583     0B99                     __ptext45:	
 13584 ;; *************** function _nmbs_server_create *****************
 13585 ;; Defined at:
 13586 ;;		line 1360 in file "nanomodbus.c"
 13587 ;; Parameters:    Size  Location     Type
 13588 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13589 ;;		 -> main@nmbs(59), 
 13590 ;;  address_rtu     1   12[BANK0 ] unsigned char 
 13591 ;;  platform_con    1   13[BANK0 ] PTR const struct nmbs_pl
 13592 ;;		 -> main@platform_conf(6), 
 13593 ;;  callbacks       1   14[BANK0 ] PTR const struct nmbs_ca
 13594 ;;		 -> main@callbacks(9), 
 13595 ;; Auto vars:     Size  Location     Type
 13596 ;;  nmbs            1   17[BANK0 ] PTR struct nmbs_t
 13597 ;;		 -> main@nmbs(59), 
 13598 ;;  ret             1   16[BANK0 ] enum E10483
 13599 ;; Return value:  Size  Location     Type
 13600 ;;                  1    wreg      enum E10517
 13601 ;; Registers used:
 13602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13603 ;; Tracked objects:
 13604 ;;		On entry : 3F/0
 13605 ;;		On exit  : 3F/0
 13606 ;;		Unchanged: 0/0
 13607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13608 ;;      Params:         0       3       0       0       0       0       0       0
 13609 ;;      Locals:         0       2       0       0       0       0       0       0
 13610 ;;      Temps:          0       1       0       0       0       0       0       0
 13611 ;;      Totals:         0       6       0       0       0       0       0       0
 13612 ;;Total ram usage:        6 bytes
 13613 ;; Hardware stack levels used: 1
 13614 ;; Hardware stack levels required when called: 7
 13615 ;; This function calls:
 13616 ;;		_nmbs_create
 13617 ;; This function is called by:
 13618 ;;		_main
 13619 ;; This function uses a non-reentrant model
 13620 ;;
 13621                           
 13622     0B99                     _nmbs_server_create:	
 13623                           ;psect for function _nmbs_server_create
 13624                           
 13625                           
 13626                           ;incstack = 0
 13627                           ; Regs used in _nmbs_server_create: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13628                           ;nmbs_server_create@nmbs stored from wreg
 13629     0B99  00B1               	movwf	nmbs_server_create@nmbs
 13630                           
 13631                           ;nanomodbus.c: 1360: nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, co
      +                          nst nmbs_platform_conf* platform_conf,;nanomodbus.c: 1361:                              
      +                           const nmbs_callbacks* callbacks) {;nanomodbus.c: 1362:     if (platform_conf->transport
      +                           == NMBS_TRANSPORT_RTU && address_rtu == 0)
 13632     0B9A  082D               	movf	nmbs_server_create@platform_conf,w
 13633     0B9B  0086               	movwf	6
 13634     0B9C  0187               	clrf	7
 13635     0B9D  0301               	decf	1,w
 13636     0B9E  1D03               	btfss	3,2
 13637     0B9F  2BA5               	goto	l5694
 13638     0BA0  082C               	movf	nmbs_server_create@address_rtu,w
 13639     0BA1  1D03               	btfss	3,2
 13640     0BA2  2BA5               	goto	l5694
 13641                           
 13642                           ;nanomodbus.c: 1363:         return NMBS_ERROR_INVALID_ARGUMENT;
 13643     0BA3  30FF               	movlw	255
 13644     0BA4  0008               	return
 13645     0BA5                     l5694:
 13646                           
 13647                           ;nanomodbus.c: 1365:     nmbs_error ret = nmbs_create(nmbs, platform_conf);
 13648     0BA5  082D               	movf	nmbs_server_create@platform_conf,w
 13649     0BA6  00A8               	movwf	nmbs_create@platform_conf
 13650     0BA7  0831               	movf	nmbs_server_create@nmbs,w
 13651     0BA8  318E  26E3  318B   	fcall	_nmbs_create
 13652     0BAB  00B0               	movwf	nmbs_server_create@ret
 13653                           
 13654                           ;nanomodbus.c: 1366:     if (ret != NMBS_ERROR_NONE)
 13655     0BAC  0830               	movf	nmbs_server_create@ret,w
 13656     0BAD  1903               	btfsc	3,2
 13657     0BAE  2BB1               	goto	l5702
 13658                           
 13659                           ;nanomodbus.c: 1367:         return ret;
 13660     0BAF  0830               	movf	nmbs_server_create@ret,w
 13661     0BB0  0008               	return
 13662     0BB1                     l5702:
 13663                           
 13664                           ;nanomodbus.c: 1369:     nmbs->address_rtu = address_rtu;
 13665     0BB1  0831               	movf	nmbs_server_create@nmbs,w
 13666     0BB2  3E37               	addlw	55
 13667     0BB3  0086               	movwf	6
 13668     0BB4  3001               	movlw	1	; select bank2/3
 13669     0BB5  0087               	movwf	7
 13670     0BB6  082C               	movf	nmbs_server_create@address_rtu,w
 13671     0BB7  0081               	movwf	1
 13672                           
 13673                           ;nanomodbus.c: 1370:     nmbs->callbacks = *callbacks;
 13674     0BB8  082E               	movf	nmbs_server_create@callbacks,w
 13675     0BB9  0086               	movwf	6
 13676     0BBA  0187               	clrf	7
 13677     0BBB  0831               	movf	nmbs_server_create@nmbs,w
 13678     0BBC  3E28               	addlw	40
 13679     0BBD  0084               	movwf	4
 13680     0BBE  3001               	movlw	1	; select bank2/3
 13681     0BBF  0085               	movwf	5
 13682     0BC0  3009               	movlw	9
 13683     0BC1  00AF               	movwf	??_nmbs_server_create
 13684     0BC2                     u4040:
 13685     0BC2  0016               	moviw fsr1++
 13686     0BC3  001A               	movwi fsr0++
 13687     0BC4  0BAF               	decfsz	??_nmbs_server_create,f
 13688     0BC5  2BC2               	goto	u4040
 13689                           
 13690                           ;nanomodbus.c: 1372:     return NMBS_ERROR_NONE;
 13691     0BC6  3000               	movlw	0
 13692     0BC7  0008               	return
 13693     0BC8                     __end_of_nmbs_server_create:
 13694                           
 13695                           	psect	text46
 13696     0EE3                     __ptext46:	
 13697 ;; *************** function _nmbs_create *****************
 13698 ;; Defined at:
 13699 ;;		line 110 in file "nanomodbus.c"
 13700 ;; Parameters:    Size  Location     Type
 13701 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13702 ;;		 -> main@nmbs(59), 
 13703 ;;  platform_con    1    8[BANK0 ] PTR const struct nmbs_pl
 13704 ;;		 -> main@platform_conf(6), 
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;  nmbs            1   11[BANK0 ] PTR struct nmbs_t
 13707 ;;		 -> main@nmbs(59), 
 13708 ;; Return value:  Size  Location     Type
 13709 ;;                  1    wreg      enum E10483
 13710 ;; Registers used:
 13711 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13712 ;; Tracked objects:
 13713 ;;		On entry : 3F/0
 13714 ;;		On exit  : 3F/0
 13715 ;;		Unchanged: 0/0
 13716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13717 ;;      Params:         0       1       0       0       0       0       0       0
 13718 ;;      Locals:         0       1       0       0       0       0       0       0
 13719 ;;      Temps:          0       2       0       0       0       0       0       0
 13720 ;;      Totals:         0       4       0       0       0       0       0       0
 13721 ;;Total ram usage:        4 bytes
 13722 ;; Hardware stack levels used: 1
 13723 ;; Hardware stack levels required when called: 6
 13724 ;; This function calls:
 13725 ;;		_m_memset
 13726 ;; This function is called by:
 13727 ;;		_nmbs_server_create
 13728 ;; This function uses a non-reentrant model
 13729 ;;
 13730                           
 13731     0EE3                     _nmbs_create:	
 13732                           ;psect for function _nmbs_create
 13733                           
 13734                           
 13735                           ;incstack = 0
 13736                           ; Regs used in _nmbs_create: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13737                           ;nmbs_create@nmbs stored from wreg
 13738     0EE3  00AB               	movwf	nmbs_create@nmbs
 13739                           
 13740                           ;nanomodbus.c: 111:     if (!nmbs)
 13741     0EE4  082B               	movf	nmbs_create@nmbs,w
 13742     0EE5  1903               	btfsc	3,2
 13743     0EE6  2EF6               	goto	l5558
 13744     0EE7  2EF8               	goto	l5562
 13745     0EE8                     l5572:
 13746     0EE8  0828               	movf	nmbs_create@platform_conf,w
 13747     0EE9  0086               	movwf	6
 13748     0EEA  0187               	clrf	7
 13749     0EEB  3002               	movlw	2
 13750     0EEC  0601               	xorwf	1,w
 13751     0EED  1D03               	btfss	3,2
 13752     0EEE  2EF6               	goto	l5558
 13753     0EEF                     l5578:
 13754                           
 13755                           ;nanomodbus.c: 125:     if (!platform_conf->read || !platform_conf->write)
 13756     0EEF  0A28               	incf	nmbs_create@platform_conf,w
 13757     0EF0  0086               	movwf	6
 13758     0EF1  0187               	clrf	7
 13759     0EF2  0016               	moviw fsr1++
 13760     0EF3  0401               	iorwf	1,w
 13761     0EF4  1D03               	btfss	3,2
 13762     0EF5  2F10               	goto	l5580
 13763     0EF6                     l5558:
 13764                           
 13765                           ;nanomodbus.c: 112:         return NMBS_ERROR_INVALID_ARGUMENT;
 13766     0EF6  30FF               	movlw	255
 13767     0EF7  0008               	return
 13768     0EF8                     l5562:
 13769                           
 13770                           ;nanomodbus.c: 114:     m_memset(nmbs, 0, sizeof(nmbs_t));
 13771     0EF8  082B               	movf	nmbs_create@nmbs,w
 13772     0EF9  00A0               	movwf	m_memset@s
 13773     0EFA  3001               	movlw	1
 13774     0EFB  00A1               	movwf	m_memset@s+1
 13775     0EFC  3000               	movlw	0
 13776     0EFD  00A2               	movwf	m_memset@c
 13777     0EFE  00A3               	movwf	m_memset@c+1
 13778     0EFF  303B               	movlw	59
 13779     0F00  00A4               	movwf	m_memset@len
 13780     0F01  3000               	movlw	0
 13781     0F02  00A5               	movwf	m_memset@len+1
 13782     0F03  318A  2214  318E   	fcall	_m_memset
 13783                           
 13784                           ;nanomodbus.c: 119:     if (!platform_conf)
 13785     0F06  0828               	movf	nmbs_create@platform_conf,w
 13786     0F07  1903               	btfsc	3,2
 13787     0F08  2EF6               	goto	l5558
 13788                           
 13789                           ;nanomodbus.c: 122:     if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_c
      +                          onf->transport != NMBS_TRANSPORT_TCP)
 13790     0F09  0828               	movf	nmbs_create@platform_conf,w
 13791     0F0A  0086               	movwf	6
 13792     0F0B  0187               	clrf	7
 13793     0F0C  0301               	decf	1,w
 13794     0F0D  1D03               	btfss	3,2
 13795     0F0E  2EE8               	goto	l5572
 13796     0F0F  2EEF               	goto	l5578
 13797     0F10                     l5580:
 13798     0F10  0828               	movf	nmbs_create@platform_conf,w
 13799     0F11  3E03               	addlw	3
 13800     0F12  0086               	movwf	6
 13801     0F13  0187               	clrf	7
 13802     0F14  0016               	moviw fsr1++
 13803     0F15  0401               	iorwf	1,w
 13804     0F16  1903               	btfsc	3,2
 13805     0F17  2EF6               	goto	l5558
 13806                           
 13807                           ;nanomodbus.c: 128:     nmbs->platform = *platform_conf;
 13808     0F18  0828               	movf	nmbs_create@platform_conf,w
 13809     0F19  0086               	movwf	6
 13810     0F1A  0187               	clrf	7
 13811     0F1B  082B               	movf	nmbs_create@nmbs,w
 13812     0F1C  3E31               	addlw	49
 13813     0F1D  0084               	movwf	4
 13814     0F1E  3001               	movlw	1	; select bank2/3
 13815     0F1F  0085               	movwf	5
 13816     0F20  3006               	movlw	6
 13817     0F21  00A9               	movwf	??_nmbs_create
 13818     0F22                     u3940:
 13819     0F22  0016               	moviw fsr1++
 13820     0F23  001A               	movwi fsr0++
 13821     0F24  0BA9               	decfsz	??_nmbs_create,f
 13822     0F25  2F22               	goto	u3940
 13823                           
 13824                           ;nanomodbus.c: 130:     return NMBS_ERROR_NONE;
 13825     0F26  3000               	movlw	0
 13826     0F27  0008               	return
 13827     0F28                     __end_of_nmbs_create:
 13828                           
 13829                           	psect	text47
 13830     031B                     __ptext47:	
 13831 ;; *************** function _is_a_new_value *****************
 13832 ;; Defined at:
 13833 ;;		line 140 in file "main.c"
 13834 ;; Parameters:    Size  Location     Type
 13835 ;;  registers       1    wreg     PTR struct .
 13836 ;;		 -> main@registers(11), 
 13837 ;;  actual_regs     1    8[BANK0 ] PTR struct .
 13838 ;;		 -> main@actual_regs(4), 
 13839 ;;  nmbs            1    9[BANK0 ] PTR struct nmbs_t
 13840 ;;		 -> main@nmbs(59), 
 13841 ;; Auto vars:     Size  Location     Type
 13842 ;;  registers       1   14[BANK0 ] PTR struct .
 13843 ;;		 -> main@registers(11), 
 13844 ;; Return value:  Size  Location     Type
 13845 ;;                  1    wreg      void 
 13846 ;; Registers used:
 13847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13848 ;; Tracked objects:
 13849 ;;		On entry : 3F/0
 13850 ;;		On exit  : 3F/0
 13851 ;;		Unchanged: 0/0
 13852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13853 ;;      Params:         0       2       0       0       0       0       0       0
 13854 ;;      Locals:         0       1       0       0       0       0       0       0
 13855 ;;      Temps:          0       4       0       0       0       0       0       0
 13856 ;;      Totals:         0       7       0       0       0       0       0       0
 13857 ;;Total ram usage:        7 bytes
 13858 ;; Hardware stack levels used: 1
 13859 ;; Hardware stack levels required when called: 7
 13860 ;; This function calls:
 13861 ;;		_DATAEE_WriteByte
 13862 ;;		_DATAEE_WriteWord
 13863 ;;		_setBaudRateEUSART1
 13864 ;; This function is called by:
 13865 ;;		_main
 13866 ;; This function uses a non-reentrant model
 13867 ;;
 13868                           
 13869     031B                     _is_a_new_value:	
 13870                           ;psect for function _is_a_new_value
 13871                           
 13872                           
 13873                           ;incstack = 0
 13874                           ; Regs used in _is_a_new_value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13875                           ;is_a_new_value@registers stored from wreg
 13876     031B  00AE               	movwf	is_a_new_value@registers
 13877                           
 13878                           ;main.c: 140: void is_a_new_value(mod_bus_registers* registers,holding_register* actual_
      +                          regs,nmbs_t* nmbs );main.c: 141: {;main.c: 142:     if(registers->server_holding_registe
      +                          r.addr_slave != actual_regs->addr_slave)
 13879     031C  0828               	movf	is_a_new_value@actual_regs,w
 13880     031D  0086               	movwf	6
 13881     031E  0187               	clrf	7
 13882     031F  3F40               	moviw [0]fsr1
 13883     0320  00AA               	movwf	??_is_a_new_value
 13884     0321  3F41               	moviw [1]fsr1
 13885     0322  00AB               	movwf	??_is_a_new_value+1
 13886     0323  082E               	movf	is_a_new_value@registers,w
 13887     0324  3E07               	addlw	7
 13888     0325  0086               	movwf	6
 13889     0326  0187               	clrf	7
 13890     0327  3F40               	moviw [0]fsr1
 13891     0328  00AC               	movwf	??_is_a_new_value+2
 13892     0329  3F41               	moviw [1]fsr1
 13893     032A  00AD               	movwf	??_is_a_new_value+3
 13894     032B  082B               	movf	??_is_a_new_value+1,w
 13895     032C  062D               	xorwf	??_is_a_new_value+3,w
 13896     032D  1D03               	skipz
 13897     032E  2B31               	goto	u4145
 13898     032F  082A               	movf	??_is_a_new_value,w
 13899     0330  062C               	xorwf	??_is_a_new_value+2,w
 13900     0331                     u4145:
 13901     0331  1903               	skipnz
 13902     0332  2B78               	goto	l5774
 13903                           
 13904                           ;main.c: 143:     {;main.c: 144:         if(registers->server_holding_register.addr_slav
      +                          e <=255
 13905     0333  082E               	movf	is_a_new_value@registers,w
 13906     0334  3E07               	addlw	7
 13907     0335  0086               	movwf	6
 13908     0336  0187               	clrf	7
 13909     0337  3F40               	moviw [0]fsr1
 13910     0338  00AA               	movwf	??_is_a_new_value
 13911     0339  3F41               	moviw [1]fsr1
 13912     033A  00AB               	movwf	??_is_a_new_value+1
 13913     033B  3001               	movlw	1
 13914     033C  022B               	subwf	??_is_a_new_value+1,w
 13915     033D  3000               	movlw	0
 13916     033E  1903               	skipnz
 13917     033F  022A               	subwf	??_is_a_new_value,w
 13918     0340  1803               	skipnc
 13919     0341  2B6C               	goto	l5772
 13920     0342  082E               	movf	is_a_new_value@registers,w
 13921     0343  3E07               	addlw	7
 13922     0344  0086               	movwf	6
 13923     0345  0187               	clrf	7
 13924     0346  0016               	moviw fsr1++
 13925     0347  0401               	iorwf	1,w
 13926     0348  1903               	btfsc	3,2
 13927     0349  2B6C               	goto	l5772
 13928                           
 13929                           ;main.c: 146:         {;main.c: 147:             nmbs->address_rtu = registers->server_h
      +                          olding_register.addr_slave;
 13930     034A  0829               	movf	is_a_new_value@nmbs,w
 13931     034B  3E37               	addlw	55
 13932     034C  0086               	movwf	6
 13933     034D  3001               	movlw	1	; select bank2/3
 13934     034E  0087               	movwf	7
 13935     034F  082E               	movf	is_a_new_value@registers,w
 13936     0350  3E07               	addlw	7
 13937     0351  0084               	movwf	4
 13938     0352  0185               	clrf	5
 13939     0353  0800               	movf	0,w
 13940     0354  0081               	movwf	1
 13941                           
 13942                           ;main.c: 148:             DATAEE_WriteWord(0x7002,registers->server_holding_register.add
      +                          r_slave);
 13943     0355  3002               	movlw	2
 13944     0356  00A4               	movwf	DATAEE_WriteWord@bAdd
 13945     0357  3070               	movlw	112
 13946     0358  00A5               	movwf	DATAEE_WriteWord@bAdd+1
 13947     0359  082E               	movf	is_a_new_value@registers,w
 13948     035A  3E07               	addlw	7
 13949     035B  0086               	movwf	6
 13950     035C  0187               	clrf	7
 13951     035D  3F40               	moviw [0]fsr1
 13952     035E  00A6               	movwf	DATAEE_WriteWord@bData
 13953     035F  3F41               	moviw [1]fsr1
 13954     0360                     L7:
 13955     0360  00A7               	movwf	DATAEE_WriteWord@bData+1
 13956     0361  3189  21D4  3183   	fcall	_DATAEE_WriteWord
 13957                           
 13958                           ;main.c: 149:             DATAEE_WriteByte(0x7001, 0x00);
 13959     0364  3001               	movlw	1
 13960     0365  00A0               	movwf	DATAEE_WriteByte@bAdd
 13961     0366  3070               	movlw	112
 13962     0367  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 13963     0368  01A2               	clrf	DATAEE_WriteByte@bData
 13964     0369  318B  2307         	fcall	_DATAEE_WriteByte
 13965                           
 13966                           ;main.c: 150:         }
 13967     036B  0008               	return
 13968     036C                     l5772:
 13969                           
 13970                           ;main.c: 152:         {;main.c: 153:             registers->server_holding_register.addr
      +                          _slave = actual_regs->addr_slave;
 13971     036C  0828               	movf	is_a_new_value@actual_regs,w
 13972     036D  0086               	movwf	6
 13973     036E  0187               	clrf	7
 13974     036F  082E               	movf	is_a_new_value@registers,w
 13975     0370  3E07               	addlw	7
 13976     0371  0084               	movwf	4
 13977     0372  0185               	clrf	5
 13978     0373  3F40               	moviw [0]fsr1
 13979     0374  3F80               	movwi [0]fsr0
 13980     0375  3F41               	moviw [1]fsr1
 13981     0376  3F81               	movwi [1]fsr0
 13982     0377  0008               	return
 13983     0378                     l5774:
 13984     0378  0828               	movf	is_a_new_value@actual_regs,w
 13985     0379  3E02               	addlw	2
 13986     037A  0086               	movwf	6
 13987     037B  0187               	clrf	7
 13988     037C  3F40               	moviw [0]fsr1
 13989     037D  00AA               	movwf	??_is_a_new_value
 13990     037E  3F41               	moviw [1]fsr1
 13991     037F  00AB               	movwf	??_is_a_new_value+1
 13992     0380  082E               	movf	is_a_new_value@registers,w
 13993     0381  3E09               	addlw	9
 13994     0382  0086               	movwf	6
 13995     0383  0187               	clrf	7
 13996     0384  3F40               	moviw [0]fsr1
 13997     0385  00AC               	movwf	??_is_a_new_value+2
 13998     0386  3F41               	moviw [1]fsr1
 13999     0387  00AD               	movwf	??_is_a_new_value+3
 14000     0388  082B               	movf	??_is_a_new_value+1,w
 14001     0389  062D               	xorwf	??_is_a_new_value+3,w
 14002     038A  1D03               	skipz
 14003     038B  2B8E               	goto	u4175
 14004     038C  082A               	movf	??_is_a_new_value,w
 14005     038D  062C               	xorwf	??_is_a_new_value+2,w
 14006     038E                     u4175:
 14007     038E  1903               	skipnz
 14008     038F  0008               	return
 14009                           
 14010                           ;main.c: 157:     {;main.c: 158:         if(setBaudRateEUSART1(registers->server_holding
      +                          _register.baudrate))
 14011     0390  082E               	movf	is_a_new_value@registers,w
 14012     0391  3E09               	addlw	9
 14013     0392  0086               	movwf	6
 14014     0393  0187               	clrf	7
 14015     0394  3F40               	moviw [0]fsr1
 14016     0395  00AA               	movwf	??_is_a_new_value
 14017     0396  3F41               	moviw [1]fsr1
 14018     0397  00AB               	movwf	??_is_a_new_value+1
 14019     0398  082A               	movf	??_is_a_new_value,w
 14020     0399  00A0               	movwf	setBaudRateEUSART1@baudRate
 14021     039A  082B               	movf	??_is_a_new_value+1,w
 14022     039B  00A1               	movwf	setBaudRateEUSART1@baudRate+1
 14023     039C  01A2               	clrf	setBaudRateEUSART1@baudRate+2
 14024     039D  01A3               	clrf	setBaudRateEUSART1@baudRate+3
 14025     039E  3186  261B  3183   	fcall	_setBaudRateEUSART1
 14026     03A1  3A00               	xorlw	0
 14027     03A2  1903               	skipnz
 14028     03A3  2BB2               	goto	l5780
 14029                           
 14030                           ;main.c: 159:         {;main.c: 160:             registers->server_holding_register.baud
      +                          rate = actual_regs->baudrate;
 14031     03A4  0140               	movlb	0	; select bank0
 14032     03A5  0828               	movf	is_a_new_value@actual_regs,w
 14033     03A6  3E02               	addlw	2
 14034     03A7  0086               	movwf	6
 14035     03A8  0187               	clrf	7
 14036     03A9  082E               	movf	is_a_new_value@registers,w
 14037     03AA  3E09               	addlw	9
 14038     03AB  0084               	movwf	4
 14039     03AC  0185               	clrf	5
 14040     03AD  3F40               	moviw [0]fsr1
 14041     03AE  3F80               	movwi [0]fsr0
 14042     03AF  3F41               	moviw [1]fsr1
 14043     03B0  3F81               	movwi [1]fsr0
 14044                           
 14045                           ;main.c: 161:         }
 14046     03B1  0008               	return
 14047     03B2                     l5780:
 14048                           
 14049                           ;main.c: 163:         {;main.c: 164:             DATAEE_WriteWord(0x7004,registers->serv
      +                          er_holding_register.baudrate);
 14050     03B2  3004               	movlw	4
 14051     03B3  0140               	movlb	0	; select bank0
 14052     03B4  00A4               	movwf	DATAEE_WriteWord@bAdd
 14053     03B5  3070               	movlw	112
 14054     03B6  00A5               	movwf	DATAEE_WriteWord@bAdd+1
 14055     03B7  082E               	movf	is_a_new_value@registers,w
 14056     03B8  3E09               	addlw	9
 14057     03B9  0086               	movwf	6
 14058     03BA  0187               	clrf	7
 14059     03BB  3F40               	moviw [0]fsr1
 14060     03BC  00A6               	movwf	DATAEE_WriteWord@bData
 14061     03BD  3F41               	moviw [1]fsr1
 14062     03BE  2B60               	goto	L7
 14063     03BF                     __end_of_is_a_new_value:
 14064                           
 14065                           	psect	text48
 14066     061B                     __ptext48:	
 14067 ;; *************** function _setBaudRateEUSART1 *****************
 14068 ;; Defined at:
 14069 ;;		line 84 in file "mcc_generated_files/eusart1.c"
 14070 ;; Parameters:    Size  Location     Type
 14071 ;;  baudRate        4    0[BANK0 ] unsigned long 
 14072 ;; Auto vars:     Size  Location     Type
 14073 ;;		None
 14074 ;; Return value:  Size  Location     Type
 14075 ;;                  1    wreg      unsigned char 
 14076 ;; Registers used:
 14077 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14078 ;; Tracked objects:
 14079 ;;		On entry : 3F/0
 14080 ;;		On exit  : 3F/2
 14081 ;;		Unchanged: 0/0
 14082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14083 ;;      Params:         0       4       0       0       0       0       0       0
 14084 ;;      Locals:         0       0       0       0       0       0       0       0
 14085 ;;      Temps:          0       0       0       0       0       0       0       0
 14086 ;;      Totals:         0       4       0       0       0       0       0       0
 14087 ;;Total ram usage:        4 bytes
 14088 ;; Hardware stack levels used: 1
 14089 ;; Hardware stack levels required when called: 5
 14090 ;; This function calls:
 14091 ;;		Nothing
 14092 ;; This function is called by:
 14093 ;;		_main
 14094 ;;		_is_a_new_value
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098     061B                     _setBaudRateEUSART1:	
 14099                           ;psect for function _setBaudRateEUSART1
 14100                           
 14101                           
 14102                           ;mcc_generated_files/eusart1.c: 84: uint8_t setBaudRateEUSART1(uint32_t baudRate);mcc_ge
      +                          nerated_files/eusart1.c: 85: {;mcc_generated_files/eusart1.c: 86:     TX1STAbits.TXEN = 
      +                          0;
 14103                           
 14104                           ;incstack = 0
 14105                           ; Regs used in _setBaudRateEUSART1: [wreg-fsr0h+status,2+status,0]
 14106     061B  0142               	movlb	2	; select bank2
 14107     061C  129E               	bcf	30,5	;volatile
 14108                           
 14109                           ;mcc_generated_files/eusart1.c: 87:     RC1STAbits.CREN = 0;
 14110     061D  121D               	bcf	29,4	;volatile
 14111                           
 14112                           ;mcc_generated_files/eusart1.c: 90:     switch(baudRate)
 14113     061E  2E3B               	goto	l5434
 14114     061F                     l5410:
 14115                           
 14116                           ;mcc_generated_files/eusart1.c: 94:              SP1BRGL = 0x40;
 14117     061F  3040               	movlw	64
 14118     0620  0142               	movlb	2	; select bank2
 14119     0621  009B               	movwf	27	;volatile
 14120                           
 14121                           ;mcc_generated_files/eusart1.c: 97:             SP1BRGH = 0x03;
 14122     0622  3003               	movlw	3
 14123     0623  009C               	movwf	28	;volatile
 14124                           
 14125                           ;mcc_generated_files/eusart1.c: 98:             break;
 14126     0624  2E78               	goto	l239
 14127     0625                     l5412:
 14128                           
 14129                           ;mcc_generated_files/eusart1.c: 101:             SP1BRGL = 0xCF;
 14130     0625  30CF               	movlw	207
 14131     0626                     L8:
 14132     0626  0142               	movlb	2	; select bank2
 14133     0627  009B               	movwf	27	;volatile
 14134                           
 14135                           ;mcc_generated_files/eusart1.c: 104:             SP1BRGH = 0x00;
 14136     0628  019C               	clrf	28	;volatile
 14137                           
 14138                           ;mcc_generated_files/eusart1.c: 105:             break;
 14139     0629  2E78               	goto	l239
 14140     062A                     l5416:
 14141                           
 14142                           ;mcc_generated_files/eusart1.c: 108:             SP1BRGL = 0x67;
 14143     062A  3067               	movlw	103
 14144     062B  2E26               	goto	L8
 14145     062C                     l242:	
 14146                           ;mcc_generated_files/eusart1.c: 112:         case 4800:
 14147                           
 14148                           
 14149                           ;mcc_generated_files/eusart1.c: 114:             SP1BRG = (1000000 / (4 * 4800)) - 1;
 14150     062C  3000               	movlw	0
 14151     062D  0142               	movlb	2	; select bank2
 14152     062E  009C               	movwf	28	;volatile
 14153     062F  3033               	movlw	51
 14154     0630  009B               	movwf	27	;volatile
 14155                           
 14156                           ;mcc_generated_files/eusart1.c: 115:             break;
 14157     0631  2E78               	goto	l239
 14158     0632                     l5420:
 14159                           
 14160                           ;mcc_generated_files/eusart1.c: 118:             SP1BRGL = 0x19;
 14161     0632  3019               	movlw	25
 14162     0633  2E26               	goto	L8
 14163     0634                     l5424:
 14164                           
 14165                           ;mcc_generated_files/eusart1.c: 125:             SP1BRGL = 0x0C;
 14166     0634  300C               	movlw	12
 14167     0635  2E26               	goto	L8
 14168     0636                     l245:	
 14169                           ;mcc_generated_files/eusart1.c: 130:         default:
 14170                           
 14171                           
 14172                           ;mcc_generated_files/eusart1.c: 132:             TX1STAbits.TXEN = 1;
 14173     0636  0142               	movlb	2	; select bank2
 14174     0637  169E               	bsf	30,5	;volatile
 14175                           
 14176                           ;mcc_generated_files/eusart1.c: 133:             RC1STAbits.CREN = 1;
 14177     0638  161D               	bsf	29,4	;volatile
 14178                           
 14179                           ;mcc_generated_files/eusart1.c: 134:             return 1;
 14180     0639  3001               	movlw	1
 14181     063A  0008               	return
 14182     063B                     l5434:
 14183                           
 14184                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 14185                           ; Switch size 1, requested type "simple"
 14186                           ; Number of cases is 1, Range of values is 0 to 0
 14187                           ; switch strategies available:
 14188                           ; Name         Instructions Cycles
 14189                           ; simple_byte            4     3 (average)
 14190                           ; direct_byte            8     6 (fixed)
 14191                           ; jumptable            260     6 (fixed)
 14192                           ;	Chosen strategy is simple_byte
 14193     063B  0140               	movlb	0	; select bank0
 14194     063C  0823               	movf	setBaudRateEUSART1@baudRate+3,w
 14195     063D  3A00               	xorlw	0	; case 0
 14196     063E  1903               	skipnz
 14197     063F  2E73               	goto	l6044
 14198     0640  2E36               	goto	l245
 14199     0641                     l6042:
 14200                           
 14201                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
 14202                           ; Switch size 1, requested type "simple"
 14203                           ; Number of cases is 6, Range of values is 1 to 75
 14204                           ; switch strategies available:
 14205                           ; Name         Instructions Cycles
 14206                           ; simple_byte           19    10 (average)
 14207                           ; direct_byte          159     9 (fixed)
 14208                           ; jumptable            263     9 (fixed)
 14209                           ;	Chosen strategy is simple_byte
 14210     0641  0821               	movf	setBaudRateEUSART1@baudRate+1,w
 14211     0642  3A01               	xorlw	1	; case 1
 14212     0643  1903               	skipnz
 14213     0644  2E55               	goto	l6046
 14214     0645  3A05               	xorlw	5	; case 4
 14215     0646  1903               	skipnz
 14216     0647  2E5A               	goto	l6048
 14217     0648  3A0D               	xorlw	13	; case 9
 14218     0649  1903               	skipnz
 14219     064A  2E5F               	goto	l6050
 14220     064B  3A1B               	xorlw	27	; case 18
 14221     064C  1903               	skipnz
 14222     064D  2E64               	goto	l6052
 14223     064E  3A37               	xorlw	55	; case 37
 14224     064F  1903               	skipnz
 14225     0650  2E69               	goto	l6054
 14226     0651  3A6E               	xorlw	110	; case 75
 14227     0652  1903               	skipnz
 14228     0653  2E6E               	goto	l6056
 14229     0654  2E36               	goto	l245
 14230     0655                     l6046:
 14231                           
 14232                           ; Switch size 1, requested type "simple"
 14233                           ; Number of cases is 1, Range of values is 44 to 44
 14234                           ; switch strategies available:
 14235                           ; Name         Instructions Cycles
 14236                           ; simple_byte            4     3 (average)
 14237                           ; direct_byte           11     9 (fixed)
 14238                           ; jumptable            263     9 (fixed)
 14239                           ;	Chosen strategy is simple_byte
 14240     0655  0820               	movf	setBaudRateEUSART1@baudRate,w
 14241     0656  3A2C               	xorlw	44	; case 44
 14242     0657  1903               	skipnz
 14243     0658  2E1F               	goto	l5410
 14244     0659  2E36               	goto	l245
 14245     065A                     l6048:
 14246                           
 14247                           ; Switch size 1, requested type "simple"
 14248                           ; Number of cases is 1, Range of values is 176 to 176
 14249                           ; switch strategies available:
 14250                           ; Name         Instructions Cycles
 14251                           ; simple_byte            4     3 (average)
 14252                           ; direct_byte           11     9 (fixed)
 14253                           ; jumptable            263     9 (fixed)
 14254                           ;	Chosen strategy is simple_byte
 14255     065A  0820               	movf	setBaudRateEUSART1@baudRate,w
 14256     065B  3AB0               	xorlw	176	; case 176
 14257     065C  1903               	skipnz
 14258     065D  2E25               	goto	l5412
 14259     065E  2E36               	goto	l245
 14260     065F                     l6050:
 14261                           
 14262                           ; Switch size 1, requested type "simple"
 14263                           ; Number of cases is 1, Range of values is 96 to 96
 14264                           ; switch strategies available:
 14265                           ; Name         Instructions Cycles
 14266                           ; simple_byte            4     3 (average)
 14267                           ; direct_byte           11     9 (fixed)
 14268                           ; jumptable            263     9 (fixed)
 14269                           ;	Chosen strategy is simple_byte
 14270     065F  0820               	movf	setBaudRateEUSART1@baudRate,w
 14271     0660  3A60               	xorlw	96	; case 96
 14272     0661  1903               	skipnz
 14273     0662  2E2A               	goto	l5416
 14274     0663  2E36               	goto	l245
 14275     0664                     l6052:
 14276                           
 14277                           ; Switch size 1, requested type "simple"
 14278                           ; Number of cases is 1, Range of values is 192 to 192
 14279                           ; switch strategies available:
 14280                           ; Name         Instructions Cycles
 14281                           ; simple_byte            4     3 (average)
 14282                           ; direct_byte           11     9 (fixed)
 14283                           ; jumptable            263     9 (fixed)
 14284                           ;	Chosen strategy is simple_byte
 14285     0664  0820               	movf	setBaudRateEUSART1@baudRate,w
 14286     0665  3AC0               	xorlw	192	; case 192
 14287     0666  1903               	skipnz
 14288     0667  2E2C               	goto	l242
 14289     0668  2E36               	goto	l245
 14290     0669                     l6054:
 14291                           
 14292                           ; Switch size 1, requested type "simple"
 14293                           ; Number of cases is 1, Range of values is 128 to 128
 14294                           ; switch strategies available:
 14295                           ; Name         Instructions Cycles
 14296                           ; simple_byte            4     3 (average)
 14297                           ; direct_byte           11     9 (fixed)
 14298                           ; jumptable            263     9 (fixed)
 14299                           ;	Chosen strategy is simple_byte
 14300     0669  0820               	movf	setBaudRateEUSART1@baudRate,w
 14301     066A  3A80               	xorlw	128	; case 128
 14302     066B  1903               	skipnz
 14303     066C  2E32               	goto	l5420
 14304     066D  2E36               	goto	l245
 14305     066E                     l6056:
 14306                           
 14307                           ; Switch size 1, requested type "simple"
 14308                           ; Number of cases is 1, Range of values is 0 to 0
 14309                           ; switch strategies available:
 14310                           ; Name         Instructions Cycles
 14311                           ; simple_byte            4     3 (average)
 14312                           ; direct_byte            8     6 (fixed)
 14313                           ; jumptable            260     6 (fixed)
 14314                           ;	Chosen strategy is simple_byte
 14315     066E  0820               	movf	setBaudRateEUSART1@baudRate,w
 14316     066F  3A00               	xorlw	0	; case 0
 14317     0670  1903               	skipnz
 14318     0671  2E34               	goto	l5424
 14319     0672  2E36               	goto	l245
 14320     0673                     l6044:
 14321                           
 14322                           ; Switch size 1, requested type "simple"
 14323                           ; Number of cases is 1, Range of values is 0 to 0
 14324                           ; switch strategies available:
 14325                           ; Name         Instructions Cycles
 14326                           ; simple_byte            4     3 (average)
 14327                           ; direct_byte            8     6 (fixed)
 14328                           ; jumptable            260     6 (fixed)
 14329                           ;	Chosen strategy is simple_byte
 14330     0673  0822               	movf	setBaudRateEUSART1@baudRate+2,w
 14331     0674  3A00               	xorlw	0	; case 0
 14332     0675  1903               	skipnz
 14333     0676  2E41               	goto	l6042
 14334     0677  2E36               	goto	l245
 14335     0678                     l239:
 14336                           
 14337                           ;mcc_generated_files/eusart1.c: 136:      TX1STAbits.TXEN = 1;
 14338     0678  169E               	bsf	30,5	;volatile
 14339                           
 14340                           ;mcc_generated_files/eusart1.c: 137:      RC1STAbits.CREN = 1;
 14341     0679  161D               	bsf	29,4	;volatile
 14342                           
 14343                           ;mcc_generated_files/eusart1.c: 138:     return 0;
 14344     067A  3000               	movlw	0
 14345     067B  0008               	return
 14346     067C                     __end_of_setBaudRateEUSART1:
 14347                           
 14348                           	psect	text49
 14349     09D4                     __ptext49:	
 14350 ;; *************** function _DATAEE_WriteWord *****************
 14351 ;; Defined at:
 14352 ;;		line 202 in file "mcc_generated_files/memory.c"
 14353 ;; Parameters:    Size  Location     Type
 14354 ;;  bAdd            2    4[BANK0 ] unsigned short 
 14355 ;;  bData           2    6[BANK0 ] unsigned short 
 14356 ;; Auto vars:     Size  Location     Type
 14357 ;;		None
 14358 ;; Return value:  Size  Location     Type
 14359 ;;                  1    wreg      void 
 14360 ;; Registers used:
 14361 ;;		wreg, status,2, status,0, pclath, cstack
 14362 ;; Tracked objects:
 14363 ;;		On entry : 3F/0
 14364 ;;		On exit  : 3F/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14367 ;;      Params:         0       4       0       0       0       0       0       0
 14368 ;;      Locals:         0       0       0       0       0       0       0       0
 14369 ;;      Temps:          0       0       0       0       0       0       0       0
 14370 ;;      Totals:         0       4       0       0       0       0       0       0
 14371 ;;Total ram usage:        4 bytes
 14372 ;; Hardware stack levels used: 1
 14373 ;; Hardware stack levels required when called: 6
 14374 ;; This function calls:
 14375 ;;		_DATAEE_WriteByte
 14376 ;; This function is called by:
 14377 ;;		_main
 14378 ;;		_is_a_new_value
 14379 ;; This function uses a non-reentrant model
 14380 ;;
 14381                           
 14382     09D4                     _DATAEE_WriteWord:	
 14383                           ;psect for function _DATAEE_WriteWord
 14384                           
 14385                           
 14386                           ;mcc_generated_files/memory.c: 202: void DATAEE_WriteWord(uint16_t bAdd, uint16_t bData)
      +                          ;mcc_generated_files/memory.c: 203: {;mcc_generated_files/memory.c: 204:     DATAEE_Writ
      +                          eByte(bAdd, bData & 0xFF);
 14387                           
 14388                           ;incstack = 0
 14389                           ; Regs used in _DATAEE_WriteWord: [wreg+status,2+status,0+pclath+cstack]
 14390     09D4  0825               	movf	DATAEE_WriteWord@bAdd+1,w
 14391     09D5  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14392     09D6  0824               	movf	DATAEE_WriteWord@bAdd,w
 14393     09D7  00A0               	movwf	DATAEE_WriteByte@bAdd
 14394     09D8  0826               	movf	DATAEE_WriteWord@bData,w
 14395     09D9  00A2               	movwf	DATAEE_WriteByte@bData
 14396     09DA  318B  2307  3189   	fcall	_DATAEE_WriteByte
 14397                           
 14398                           ;mcc_generated_files/memory.c: 205:     DATAEE_WriteByte(bAdd + 0x0001, (bData>>8) & 0xF
      +                          F);
 14399     09DD  0824               	movf	DATAEE_WriteWord@bAdd,w
 14400     09DE  3E01               	addlw	1
 14401     09DF  00A0               	movwf	DATAEE_WriteByte@bAdd
 14402     09E0  3000               	movlw	0
 14403     09E1  3D25               	addwfc	DATAEE_WriteWord@bAdd+1,w
 14404     09E2  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14405     09E3  0827               	movf	DATAEE_WriteWord@bData+1,w
 14406     09E4  00A2               	movwf	DATAEE_WriteByte@bData
 14407     09E5  318B  2307         	fcall	_DATAEE_WriteByte
 14408     09E7  0008               	return
 14409     09E8                     __end_of_DATAEE_WriteWord:
 14410                           
 14411                           	psect	text50
 14412     0B07                     __ptext50:	
 14413 ;; *************** function _DATAEE_WriteByte *****************
 14414 ;; Defined at:
 14415 ;;		line 180 in file "mcc_generated_files/memory.c"
 14416 ;; Parameters:    Size  Location     Type
 14417 ;;  bAdd            2    0[BANK0 ] unsigned short 
 14418 ;;  bData           1    2[BANK0 ] unsigned char 
 14419 ;; Auto vars:     Size  Location     Type
 14420 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
 14421 ;; Return value:  Size  Location     Type
 14422 ;;                  1    wreg      void 
 14423 ;; Registers used:
 14424 ;;		wreg, status,2, status,0
 14425 ;; Tracked objects:
 14426 ;;		On entry : 3F/0
 14427 ;;		On exit  : 3F/0
 14428 ;;		Unchanged: 0/0
 14429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14430 ;;      Params:         0       3       0       0       0       0       0       0
 14431 ;;      Locals:         0       1       0       0       0       0       0       0
 14432 ;;      Temps:          0       0       0       0       0       0       0       0
 14433 ;;      Totals:         0       4       0       0       0       0       0       0
 14434 ;;Total ram usage:        4 bytes
 14435 ;; Hardware stack levels used: 1
 14436 ;; Hardware stack levels required when called: 5
 14437 ;; This function calls:
 14438 ;;		Nothing
 14439 ;; This function is called by:
 14440 ;;		_DATAEE_WriteWord
 14441 ;;		_is_a_new_value
 14442 ;; This function uses a non-reentrant model
 14443 ;;
 14444                           
 14445     0B07                     _DATAEE_WriteByte:	
 14446                           ;psect for function _DATAEE_WriteByte
 14447                           
 14448                           
 14449                           ;mcc_generated_files/memory.c: 180: void DATAEE_WriteByte(uint16_t bAdd, uint8_t bData);
      +                          mcc_generated_files/memory.c: 181: {;mcc_generated_files/memory.c: 182:     uint8_t GIEB
      +                          itValue = INTCONbits.GIE;
 14450                           
 14451                           ;incstack = 0
 14452                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 14453     0B07  3000               	movlw	0
 14454     0B08  1B8B               	btfsc	11,7	;volatile
 14455     0B09  3001               	movlw	1
 14456     0B0A  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
 14457                           
 14458                           ;mcc_generated_files/memory.c: 184:     NVMADRH = ((bAdd >> 8) & 0xFF);
 14459     0B0B  0821               	movf	DATAEE_WriteByte@bAdd+1,w
 14460     0B0C  0150               	movlb	16	; select bank16
 14461     0B0D  009B               	movwf	27	;volatile
 14462                           
 14463                           ;mcc_generated_files/memory.c: 185:     NVMADRL = (bAdd & 0xFF);
 14464     0B0E  0140               	movlb	0	; select bank0
 14465     0B0F  0820               	movf	DATAEE_WriteByte@bAdd,w
 14466     0B10  0150               	movlb	16	; select bank16
 14467     0B11  009A               	movwf	26	;volatile
 14468                           
 14469                           ;mcc_generated_files/memory.c: 186:     NVMDATL = bData;
 14470     0B12  0140               	movlb	0	; select bank0
 14471     0B13  0822               	movf	DATAEE_WriteByte@bData,w
 14472     0B14  0150               	movlb	16	; select bank16
 14473     0B15  009C               	movwf	28	;volatile
 14474                           
 14475                           ;mcc_generated_files/memory.c: 187:     NVMCON1bits.NVMREGS = 1;
 14476     0B16  171E               	bsf	30,6	;volsfr
 14477                           
 14478                           ;mcc_generated_files/memory.c: 188:     NVMCON1bits.WREN = 1;
 14479     0B17  151E               	bsf	30,2	;volsfr
 14480                           
 14481                           ;mcc_generated_files/memory.c: 189:     INTCONbits.GIE = 0;
 14482     0B18  138B               	bcf	11,7	;volatile
 14483                           
 14484                           ;mcc_generated_files/memory.c: 190:     NVMCON2 = 0x55;
 14485     0B19  3055               	movlw	85
 14486     0B1A  009F               	movwf	31	;volsfr
 14487                           
 14488                           ;mcc_generated_files/memory.c: 191:     NVMCON2 = 0xAA;
 14489     0B1B  30AA               	movlw	170
 14490     0B1C  009F               	movwf	31	;volsfr
 14491                           
 14492                           ;mcc_generated_files/memory.c: 192:     NVMCON1bits.WR = 1;
 14493     0B1D  149E               	bsf	30,1	;volsfr
 14494     0B1E                     l479:	
 14495                           ;mcc_generated_files/memory.c: 195:     {;mcc_generated_files/memory.c: 196:     }
 14496                           
 14497                           
 14498                           ;mcc_generated_files/memory.c: 194:     while (NVMCON1bits.WR)
 14499     0B1E  189E               	btfsc	30,1	;volsfr
 14500     0B1F  2B1E               	goto	l479
 14501                           
 14502                           ;mcc_generated_files/memory.c: 198:     NVMCON1bits.WREN = 0;
 14503     0B20  111E               	bcf	30,2	;volsfr
 14504                           
 14505                           ;mcc_generated_files/memory.c: 199:     INTCONbits.GIE = GIEBitValue;
 14506     0B21  0140               	movlb	0	; select bank0
 14507     0B22  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
 14508     0B23  1C03               	skipc
 14509     0B24  138B               	bcf	11,7	;volatile
 14510     0B25  1803               	skipnc
 14511     0B26  178B               	bsf	11,7	;volatile
 14512     0B27  0008               	return
 14513     0B28                     __end_of_DATAEE_WriteByte:
 14514                           
 14515                           	psect	text51
 14516     09AF                     __ptext51:	
 14517 ;; *************** function _getADCData *****************
 14518 ;; Defined at:
 14519 ;;		line 4 in file "sensor.c"
 14520 ;; Parameters:    Size  Location     Type
 14521 ;;  sensorSelect    1    3[BANK0 ] PTR void 
 14522 ;;		 -> sensor.sensor_info(11), sensor(13), 
 14523 ;; Auto vars:     Size  Location     Type
 14524 ;;  result          2    5[BANK0 ] unsigned short 
 14525 ;;  channel         1    7[BANK0 ] enum E10353
 14526 ;; Return value:  Size  Location     Type
 14527 ;;                  2    3[BANK0 ] unsigned short 
 14528 ;; Registers used:
 14529 ;;		wreg, fsr1l, fsr1h, pclath, cstack
 14530 ;; Tracked objects:
 14531 ;;		On entry : 3F/0
 14532 ;;		On exit  : 3F/0
 14533 ;;		Unchanged: 0/0
 14534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14535 ;;      Params:         0       2       0       0       0       0       0       0
 14536 ;;      Locals:         0       3       0       0       0       0       0       0
 14537 ;;      Temps:          0       0       0       0       0       0       0       0
 14538 ;;      Totals:         0       5       0       0       0       0       0       0
 14539 ;;Total ram usage:        5 bytes
 14540 ;; Hardware stack levels used: 1
 14541 ;; Hardware stack levels required when called: 6
 14542 ;; This function calls:
 14543 ;;		_ADCC_GetSingleConversion
 14544 ;; This function is called by:
 14545 ;;		_main
 14546 ;; This function uses a non-reentrant model
 14547 ;;
 14548                           
 14549     09AF                     _getADCData:	
 14550                           ;psect for function _getADCData
 14551                           
 14552                           
 14553                           ;sensor.c: 4: uint16_t getADCData(void* sensorSelection);sensor.c: 5: {;sensor.c: 6:    
      +                           uint16_t result;;sensor.c: 7:     adcc_channel_t channel;;sensor.c: 9:     channel = *(
      +                          (adcc_channel_t *) sensorSelection);
 14554                           
 14555                           ;incstack = 0
 14556                           ; Regs used in _getADCData: [wreg+fsr1l+fsr1h+pclath+cstack]
 14557     09AF  0823               	movf	getADCData@sensorSelection,w
 14558     09B0  0086               	movwf	6
 14559     09B1  3001               	movlw	1	; select bank2/3
 14560     09B2  0087               	movwf	7
 14561     09B3  0801               	movf	1,w
 14562     09B4  00A7               	movwf	getADCData@channel
 14563                           
 14564                           ;sensor.c: 10:     result = ADCC_GetSingleConversion(channel);
 14565     09B5  0827               	movf	getADCData@channel,w
 14566     09B6  3189  21C1         	fcall	_ADCC_GetSingleConversion
 14567     09B8  0821               	movf	?_ADCC_GetSingleConversion+1,w
 14568     09B9  00A6               	movwf	getADCData@result+1
 14569     09BA  0820               	movf	?_ADCC_GetSingleConversion,w
 14570     09BB  00A5               	movwf	getADCData@result
 14571                           
 14572                           ;sensor.c: 12:     return result;
 14573     09BC  0826               	movf	getADCData@result+1,w
 14574     09BD  00A4               	movwf	?_getADCData+1
 14575     09BE  0825               	movf	getADCData@result,w
 14576     09BF  00A3               	movwf	?_getADCData
 14577     09C0  0008               	return
 14578     09C1                     __end_of_getADCData:
 14579                           
 14580                           	psect	text52
 14581     09C1                     __ptext52:	
 14582 ;; *************** function _ADCC_GetSingleConversion *****************
 14583 ;; Defined at:
 14584 ;;		line 138 in file "mcc_generated_files/adcc.c"
 14585 ;; Parameters:    Size  Location     Type
 14586 ;;  channel         1    wreg     enum E10030
 14587 ;; Auto vars:     Size  Location     Type
 14588 ;;  channel         1    2[BANK0 ] enum E10030
 14589 ;; Return value:  Size  Location     Type
 14590 ;;                  2    0[BANK0 ] unsigned short 
 14591 ;; Registers used:
 14592 ;;		wreg
 14593 ;; Tracked objects:
 14594 ;;		On entry : 3F/0
 14595 ;;		On exit  : 3F/0
 14596 ;;		Unchanged: 0/0
 14597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14598 ;;      Params:         0       2       0       0       0       0       0       0
 14599 ;;      Locals:         0       1       0       0       0       0       0       0
 14600 ;;      Temps:          0       0       0       0       0       0       0       0
 14601 ;;      Totals:         0       3       0       0       0       0       0       0
 14602 ;;Total ram usage:        3 bytes
 14603 ;; Hardware stack levels used: 1
 14604 ;; Hardware stack levels required when called: 5
 14605 ;; This function calls:
 14606 ;;		Nothing
 14607 ;; This function is called by:
 14608 ;;		_getADCData
 14609 ;; This function uses a non-reentrant model
 14610 ;;
 14611                           
 14612     09C1                     _ADCC_GetSingleConversion:	
 14613                           ;psect for function _ADCC_GetSingleConversion
 14614                           
 14615                           
 14616                           ;incstack = 0
 14617                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 14618                           ;ADCC_GetSingleConversion@channel stored from wreg
 14619     09C1  00A2               	movwf	ADCC_GetSingleConversion@channel
 14620                           
 14621                           ;mcc_generated_files/adcc.c: 138: adc_result_t ADCC_GetSingleConversion(adcc_channel_t c
      +                          hannel);mcc_generated_files/adcc.c: 139: {;mcc_generated_files/adcc.c: 141:     ADPCH = 
      +                          channel;
 14622     09C2  0822               	movf	ADCC_GetSingleConversion@channel,w
 14623     09C3  0141               	movlb	1	; select bank1
 14624     09C4  009F               	movwf	31	;volatile
 14625                           
 14626                           ;mcc_generated_files/adcc.c: 144:     ADCON0bits.ADON = 1;
 14627     09C5  0142               	movlb	2	; select bank2
 14628     09C6  1791               	bsf	17,7	;volatile
 14629                           
 14630                           ;mcc_generated_files/adcc.c: 147:     ADCON0bits.ADCONT = 0;
 14631     09C7  1311               	bcf	17,6	;volatile
 14632                           
 14633                           ;mcc_generated_files/adcc.c: 150:     ADCON0bits.ADGO = 1;
 14634     09C8  1411               	bsf	17,0	;volatile
 14635     09C9                     l93:	
 14636                           ;mcc_generated_files/adcc.c: 155:     {;mcc_generated_files/adcc.c: 156:     }
 14637                           
 14638                           
 14639                           ;mcc_generated_files/adcc.c: 154:     while (ADCON0bits.ADGO)
 14640     09C9  1811               	btfsc	17,0	;volatile
 14641     09CA  29C9               	goto	l93
 14642                           
 14643                           ;mcc_generated_files/adcc.c: 160:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 14644     09CB  0141               	movlb	1	; select bank1
 14645     09CC  081E               	movf	30,w	;volatile
 14646     09CD  0140               	movlb	0	; select bank0
 14647     09CE  00A1               	movwf	?_ADCC_GetSingleConversion+1
 14648     09CF  0141               	movlb	1	; select bank1
 14649     09D0  081D               	movf	29,w	;volatile
 14650     09D1  0140               	movlb	0	; select bank0
 14651     09D2  00A0               	movwf	?_ADCC_GetSingleConversion
 14652     09D3  0008               	return
 14653     09D4                     __end_of_ADCC_GetSingleConversion:
 14654                           
 14655                           	psect	text53
 14656     092C                     __ptext53:	
 14657 ;; *************** function _exit *****************
 14658 ;; Defined at:
 14659 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\exit.c"
 14660 ;; Parameters:    Size  Location     Type
 14661 ;;  code            2    2[BANK0 ] int 
 14662 ;; Auto vars:     Size  Location     Type
 14663 ;;		None
 14664 ;; Return value:  Size  Location     Type
 14665 ;;                  1    wreg      void 
 14666 ;; Registers used:
 14667 ;;		wreg, status,2, status,0, pclath, cstack
 14668 ;; Tracked objects:
 14669 ;;		On entry : 0/0
 14670 ;;		On exit  : 3F/0
 14671 ;;		Unchanged: 0/0
 14672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14673 ;;      Params:         0       2       0       0       0       0       0       0
 14674 ;;      Locals:         0       0       0       0       0       0       0       0
 14675 ;;      Temps:          0       0       0       0       0       0       0       0
 14676 ;;      Totals:         0       2       0       0       0       0       0       0
 14677 ;;Total ram usage:        2 bytes
 14678 ;; Hardware stack levels used: 1
 14679 ;; Hardware stack levels required when called: 6
 14680 ;; This function calls:
 14681 ;;		__Exit
 14682 ;;		___funcs_on_exit
 14683 ;; This function is called by:
 14684 ;;		_main
 14685 ;; This function uses a non-reentrant model
 14686 ;;
 14687                           
 14688     092C                     _exit:	
 14689                           ;psect for function _exit
 14690                           
 14691                           
 14692                           ;incstack = 0
 14693                           ; Regs used in _exit: [wreg+status,2+status,0+pclath+cstack]
 14694     092C  3189  2121  3189   	fcall	___funcs_on_exit
 14695     092F  0140               	movlb	0	; select bank0
 14696     0930  0823               	movf	exit@code+1,w
 14697     0931  00A1               	movwf	__Exit@ec+1
 14698     0932  0822               	movf	exit@code,w
 14699     0933  00A0               	movwf	__Exit@ec
 14700     0934  3188  208E         	fcall	__Exit
 14701     0936  0008               	return
 14702     0937                     __end_of_exit:
 14703                           
 14704                           	psect	text54
 14705     0921                     __ptext54:	
 14706 ;; *************** function ___funcs_on_exit *****************
 14707 ;; Defined at:
 14708 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\atexit.c"
 14709 ;; Parameters:    Size  Location     Type
 14710 ;;		None
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;  func            2    0        PTR FTN()void 
 14713 ;; Return value:  Size  Location     Type
 14714 ;;                  1    wreg      void 
 14715 ;; Registers used:
 14716 ;;		wreg, status,2, status,0
 14717 ;; Tracked objects:
 14718 ;;		On entry : 0/0
 14719 ;;		On exit  : 0/0
 14720 ;;		Unchanged: 0/0
 14721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14722 ;;      Params:         0       0       0       0       0       0       0       0
 14723 ;;      Locals:         0       0       0       0       0       0       0       0
 14724 ;;      Temps:          0       1       0       0       0       0       0       0
 14725 ;;      Totals:         0       1       0       0       0       0       0       0
 14726 ;;Total ram usage:        1 bytes
 14727 ;; Hardware stack levels used: 1
 14728 ;; Hardware stack levels required when called: 5
 14729 ;; This function calls:
 14730 ;;		Nothing
 14731 ;; This function is called by:
 14732 ;;		_exit
 14733 ;; This function uses a non-reentrant model
 14734 ;;
 14735                           
 14736     0921                     ___funcs_on_exit:	
 14737                           ;psect for function ___funcs_on_exit
 14738                           
 14739     0921                     l5640:	
 14740                           ;incstack = 0
 14741                           ; Regs used in ___funcs_on_exit: [wreg+status,2+status,0]
 14742                           
 14743     0921  0870               	movf	_count,w
 14744     0922  3A80               	xorlw	128
 14745     0923  3E7F               	addlw	-129
 14746     0924  1C03               	btfss	3,0
 14747     0925  0008               	return
 14748     0926  30FF               	movlw	255
 14749     0927  0140               	movlb	0	; select bank0
 14750     0928  00A0               	movwf	??___funcs_on_exit
 14751     0929  0820               	movf	??___funcs_on_exit,w
 14752     092A  07F0               	addwf	_count,f
 14753     092B  2921               	goto	l5640
 14754     092C                     __end_of___funcs_on_exit:
 14755                           
 14756                           	psect	text55
 14757     088E                     __ptext55:	
 14758 ;; *************** function __Exit *****************
 14759 ;; Defined at:
 14760 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\_Exit.c"
 14761 ;; Parameters:    Size  Location     Type
 14762 ;;  ec              2    0[BANK0 ] int 
 14763 ;; Auto vars:     Size  Location     Type
 14764 ;;		None
 14765 ;; Return value:  Size  Location     Type
 14766 ;;                  1    wreg      void 
 14767 ;; Registers used:
 14768 ;;		None
 14769 ;; Tracked objects:
 14770 ;;		On entry : 3F/0
 14771 ;;		On exit  : 3F/0
 14772 ;;		Unchanged: 3F/0
 14773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14774 ;;      Params:         0       2       0       0       0       0       0       0
 14775 ;;      Locals:         0       0       0       0       0       0       0       0
 14776 ;;      Temps:          0       0       0       0       0       0       0       0
 14777 ;;      Totals:         0       2       0       0       0       0       0       0
 14778 ;;Total ram usage:        2 bytes
 14779 ;; Hardware stack levels used: 1
 14780 ;; Hardware stack levels required when called: 5
 14781 ;; This function calls:
 14782 ;;		Nothing
 14783 ;; This function is called by:
 14784 ;;		_exit
 14785 ;; This function uses a non-reentrant model
 14786 ;;
 14787                           
 14788     088E                     __Exit:	
 14789                           ;psect for function __Exit
 14790                           
 14791     088E                     l1580:	
 14792                           ;incstack = 0
 14793                           ; Regs used in __Exit: []
 14794                           
 14795     088E  288E               	goto	l1580
 14796     088F                     __end_of__Exit:
 14797                           
 14798                           	psect	text56
 14799     0DA6                     __ptext56:	
 14800 ;; *************** function _default_values_register *****************
 14801 ;; Defined at:
 14802 ;;		line 123 in file "modbus_imp.c"
 14803 ;; Parameters:    Size  Location     Type
 14804 ;;  registers       1    wreg     PTR struct .
 14805 ;;		 -> main@registers(11), 
 14806 ;; Auto vars:     Size  Location     Type
 14807 ;;  registers       1    8[BANK0 ] PTR struct .
 14808 ;;		 -> main@registers(11), 
 14809 ;; Return value:  Size  Location     Type
 14810 ;;                  1    wreg      void 
 14811 ;; Registers used:
 14812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14813 ;; Tracked objects:
 14814 ;;		On entry : 3F/12
 14815 ;;		On exit  : 3F/0
 14816 ;;		Unchanged: 0/0
 14817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14818 ;;      Params:         0       0       0       0       0       0       0       0
 14819 ;;      Locals:         0       1       0       0       0       0       0       0
 14820 ;;      Temps:          0       0       0       0       0       0       0       0
 14821 ;;      Totals:         0       1       0       0       0       0       0       0
 14822 ;;Total ram usage:        1 bytes
 14823 ;; Hardware stack levels used: 1
 14824 ;; Hardware stack levels required when called: 6
 14825 ;; This function calls:
 14826 ;;		_m_memset
 14827 ;; This function is called by:
 14828 ;;		_main
 14829 ;; This function uses a non-reentrant model
 14830 ;;
 14831                           
 14832     0DA6                     _default_values_register:	
 14833                           ;psect for function _default_values_register
 14834                           
 14835                           
 14836                           ;incstack = 0
 14837                           ; Regs used in _default_values_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14838                           ;default_values_register@registers stored from wreg
 14839     0DA6  0140               	movlb	0	; select bank0
 14840     0DA7  00A8               	movwf	default_values_register@registers
 14841                           
 14842                           ;modbus_imp.c: 123: void default_values_register(mod_bus_registers* registers);modbus_im
      +                          p.c: 124: {;modbus_imp.c: 125:     registers->server_holding_register.addr_slave = 100;
 14843     0DA8  0828               	movf	default_values_register@registers,w
 14844     0DA9  3E07               	addlw	7
 14845     0DAA  0086               	movwf	6
 14846     0DAB  0187               	clrf	7
 14847     0DAC  3064               	movlw	100
 14848     0DAD  3FC0               	movwi [0]fsr1
 14849     0DAE  3000               	movlw	0
 14850     0DAF  3FC1               	movwi [1]fsr1
 14851                           
 14852                           ;modbus_imp.c: 126:     registers->server_holding_register.baudrate = 9600;
 14853     0DB0  0828               	movf	default_values_register@registers,w
 14854     0DB1  3E09               	addlw	9
 14855     0DB2  0086               	movwf	6
 14856     0DB3  0187               	clrf	7
 14857     0DB4  3080               	movlw	128
 14858     0DB5  3FC0               	movwi [0]fsr1
 14859     0DB6  3025               	movlw	37
 14860     0DB7  3FC1               	movwi [1]fsr1
 14861                           
 14862                           ;modbus_imp.c: 128:     m_memset(&(registers->server_coils), 0 ,sizeof(registers->server
      +                          _coils));
 14863     0DB8  0828               	movf	default_values_register@registers,w
 14864     0DB9  00A0               	movwf	m_memset@s
 14865     0DBA  01A1               	clrf	m_memset@s+1
 14866     0DBB  3000               	movlw	0
 14867     0DBC  00A2               	movwf	m_memset@c
 14868     0DBD  00A3               	movwf	m_memset@c+1
 14869     0DBE  3001               	movlw	1
 14870     0DBF  00A4               	movwf	m_memset@len
 14871     0DC0  3000               	movlw	0
 14872     0DC1  00A5               	movwf	m_memset@len+1
 14873     0DC2  318A  2214  318D   	fcall	_m_memset
 14874                           
 14875                           ;modbus_imp.c: 129:     m_memset(&(registers->server_input_register), 0 ,sizeof(register
      +                          s->server_input_register));
 14876     0DC5  0828               	movf	default_values_register@registers,w
 14877     0DC6  3E01               	addlw	1
 14878     0DC7  00A0               	movwf	m_memset@s
 14879     0DC8  01A1               	clrf	m_memset@s+1
 14880     0DC9  3000               	movlw	0
 14881     0DCA  00A2               	movwf	m_memset@c
 14882     0DCB  00A3               	movwf	m_memset@c+1
 14883     0DCC  3006               	movlw	6
 14884     0DCD  00A4               	movwf	m_memset@len
 14885     0DCE  3000               	movlw	0
 14886     0DCF  00A5               	movwf	m_memset@len+1
 14887     0DD0  318A  2214         	fcall	_m_memset
 14888                           
 14889                           ;modbus_imp.c: 130:     registers->server_input_register.serial_number = 666;
 14890     0DD2  0828               	movf	default_values_register@registers,w
 14891     0DD3  3E03               	addlw	3
 14892     0DD4  0086               	movwf	6
 14893     0DD5  0187               	clrf	7
 14894     0DD6  309A               	movlw	154
 14895     0DD7  3FC0               	movwi [0]fsr1
 14896     0DD8  3002               	movlw	2
 14897     0DD9  3FC1               	movwi [1]fsr1
 14898                           
 14899                           ;modbus_imp.c: 131:     registers->server_input_register.sensor_type = 999;
 14900     0DDA  0A28               	incf	default_values_register@registers,w
 14901     0DDB  0086               	movwf	6
 14902     0DDC  0187               	clrf	7
 14903     0DDD  30E7               	movlw	231
 14904     0DDE  3FC0               	movwi [0]fsr1
 14905     0DDF  3003               	movlw	3
 14906     0DE0  3FC1               	movwi [1]fsr1
 14907     0DE1  0008               	return
 14908     0DE2                     __end_of_default_values_register:
 14909                           
 14910                           	psect	text57
 14911     0A14                     __ptext57:	
 14912 ;; *************** function _m_memset *****************
 14913 ;; Defined at:
 14914 ;;		line 101 in file "nanomodbus.c"
 14915 ;; Parameters:    Size  Location     Type
 14916 ;;  s               2    0[BANK0 ] PTR void 
 14917 ;;		 -> registers.server_coils(1), main@nmbs(59), main@registers(11), 
 14918 ;;  c               2    2[BANK0 ] int 
 14919 ;;  len             2    4[BANK0 ] unsigned int 
 14920 ;; Auto vars:     Size  Location     Type
 14921 ;;  p               2    6[BANK0 ] PTR unsigned char 
 14922 ;;		 -> registers.server_coils(1), main@nmbs(59), main@registers(11), 
 14923 ;; Return value:  Size  Location     Type
 14924 ;;                  1    wreg      void 
 14925 ;; Registers used:
 14926 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14927 ;; Tracked objects:
 14928 ;;		On entry : 3F/0
 14929 ;;		On exit  : 3F/0
 14930 ;;		Unchanged: 0/0
 14931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14932 ;;      Params:         0       6       0       0       0       0       0       0
 14933 ;;      Locals:         0       2       0       0       0       0       0       0
 14934 ;;      Temps:          0       0       0       0       0       0       0       0
 14935 ;;      Totals:         0       8       0       0       0       0       0       0
 14936 ;;Total ram usage:        8 bytes
 14937 ;; Hardware stack levels used: 1
 14938 ;; Hardware stack levels required when called: 5
 14939 ;; This function calls:
 14940 ;;		Nothing
 14941 ;; This function is called by:
 14942 ;;		_main
 14943 ;;		_default_values_register
 14944 ;;		_nmbs_create
 14945 ;; This function uses a non-reentrant model
 14946 ;;
 14947                           
 14948     0A14                     _m_memset:	
 14949                           ;psect for function _m_memset
 14950                           
 14951                           
 14952                           ;nanomodbus.c: 101: void m_memset(void *s, int c, unsigned int len);nanomodbus.c: 102: {
      +                          ;nanomodbus.c: 103:     unsigned char* p=s;
 14953                           
 14954                           ;incstack = 0
 14955                           ; Regs used in _m_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 14956     0A14  0821               	movf	m_memset@s+1,w
 14957     0A15  00A7               	movwf	m_memset@p+1
 14958     0A16  0820               	movf	m_memset@s,w
 14959     0A17  00A6               	movwf	m_memset@p
 14960     0A18                     l5262:	
 14961                           ;nanomodbus.c: 104:     while(len--)
 14962                           
 14963                           
 14964                           ;nanomodbus.c: 104:     while(len--)
 14965     0A18  3001               	movlw	1
 14966     0A19  02A4               	subwf	m_memset@len,f
 14967     0A1A  3000               	movlw	0
 14968     0A1B  3BA5               	subwfb	m_memset@len+1,f
 14969     0A1C  0A24               	incf	m_memset@len,w
 14970     0A1D  1903               	btfsc	3,2
 14971     0A1E  0A25               	incf	m_memset@len+1,w
 14972     0A1F  1903               	btfsc	3,2
 14973     0A20  0008               	return
 14974                           
 14975                           ;nanomodbus.c: 105:     {;nanomodbus.c: 106:         *p++ = (unsigned char)c;
 14976     0A21  0826               	movf	m_memset@p,w
 14977     0A22  0086               	movwf	6
 14978     0A23  0827               	movf	m_memset@p+1,w
 14979     0A24  0087               	movwf	7
 14980     0A25  0822               	movf	m_memset@c,w
 14981     0A26  0081               	movwf	1
 14982     0A27  3001               	movlw	1
 14983     0A28  07A6               	addwf	m_memset@p,f
 14984     0A29  3000               	movlw	0
 14985     0A2A  3DA7               	addwfc	m_memset@p+1,f
 14986     0A2B  2A18               	goto	l5262
 14987     0A2C                     __end_of_m_memset:
 14988                           
 14989                           	psect	text58
 14990     088D                     __ptext58:	
 14991 ;; *************** function _check_error_modbus *****************
 14992 ;; Defined at:
 14993 ;;		line 134 in file "modbus_imp.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;  err             1    wreg     enum E10517
 14996 ;; Auto vars:     Size  Location     Type
 14997 ;;  err             1    0[COMMON] enum E10517
 14998 ;; Return value:  Size  Location     Type
 14999 ;;                  1    wreg      void 
 15000 ;; Registers used:
 15001 ;;		wreg
 15002 ;; Tracked objects:
 15003 ;;		On entry : 3F/0
 15004 ;;		On exit  : 3F/0
 15005 ;;		Unchanged: 3F/0
 15006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15007 ;;      Params:         0       0       0       0       0       0       0       0
 15008 ;;      Locals:         0       0       0       0       0       0       0       0
 15009 ;;      Temps:          0       0       0       0       0       0       0       0
 15010 ;;      Totals:         0       0       0       0       0       0       0       0
 15011 ;;Total ram usage:        0 bytes
 15012 ;; Hardware stack levels used: 1
 15013 ;; Hardware stack levels required when called: 5
 15014 ;; This function calls:
 15015 ;;		Nothing
 15016 ;; This function is called by:
 15017 ;;		_main
 15018 ;; This function uses a non-reentrant model
 15019 ;;
 15020                           
 15021     088D                     _check_error_modbus:	
 15022                           ;psect for function _check_error_modbus
 15023                           
 15024                           
 15025                           ;incstack = 0
 15026                           ; Regs used in _check_error_modbus: [wreg]
 15027     088D  0008               	return
 15028     088E                     __end_of_check_error_modbus:
 15029                           
 15030                           	psect	text59
 15031     08AA                     __ptext59:	
 15032 ;; *************** function _UART_ClearBuffer *****************
 15033 ;; Defined at:
 15034 ;;		line 313 in file "mcc_generated_files/eusart1.c"
 15035 ;; Parameters:    Size  Location     Type
 15036 ;;		None
 15037 ;; Auto vars:     Size  Location     Type
 15038 ;;		None
 15039 ;; Return value:  Size  Location     Type
 15040 ;;                  1    wreg      void 
 15041 ;; Registers used:
 15042 ;;		status,2
 15043 ;; Tracked objects:
 15044 ;;		On entry : 3F/0
 15045 ;;		On exit  : 3F/0
 15046 ;;		Unchanged: 3F/0
 15047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15048 ;;      Params:         0       0       0       0       0       0       0       0
 15049 ;;      Locals:         0       0       0       0       0       0       0       0
 15050 ;;      Temps:          0       0       0       0       0       0       0       0
 15051 ;;      Totals:         0       0       0       0       0       0       0       0
 15052 ;;Total ram usage:        0 bytes
 15053 ;; Hardware stack levels used: 1
 15054 ;; Hardware stack levels required when called: 5
 15055 ;; This function calls:
 15056 ;;		Nothing
 15057 ;; This function is called by:
 15058 ;;		_main
 15059 ;; This function uses a non-reentrant model
 15060 ;;
 15061                           
 15062     08AA                     _UART_ClearBuffer:	
 15063                           ;psect for function _UART_ClearBuffer
 15064                           
 15065                           
 15066                           ;mcc_generated_files/eusart1.c: 314:     eusart1RxHead = 0;
 15067                           
 15068                           ;incstack = 0
 15069                           ; Regs used in _UART_ClearBuffer: [status,2]
 15070     08AA  01F3               	clrf	_eusart1RxHead	;volatile
 15071                           
 15072                           ;mcc_generated_files/eusart1.c: 315:     eusart1RxTail = 0;
 15073     08AB  01F2               	clrf	_eusart1RxTail	;volatile
 15074                           
 15075                           ;mcc_generated_files/eusart1.c: 316:     eusart1RxCount = 0;
 15076     08AC  01F1               	clrf	_eusart1RxCount	;volatile
 15077     08AD  0008               	return
 15078     08AE                     __end_of_UART_ClearBuffer:
 15079                           
 15080                           	psect	text60
 15081     09E8                     __ptext60:	
 15082 ;; *************** function _SYSTEM_Initialize *****************
 15083 ;; Defined at:
 15084 ;;		line 50 in file "mcc_generated_files/mcc.c"
 15085 ;; Parameters:    Size  Location     Type
 15086 ;;		None
 15087 ;; Auto vars:     Size  Location     Type
 15088 ;;		None
 15089 ;; Return value:  Size  Location     Type
 15090 ;;                  1    wreg      void 
 15091 ;; Registers used:
 15092 ;;		wreg, status,2, status,0, pclath, cstack
 15093 ;; Tracked objects:
 15094 ;;		On entry : B3F/0
 15095 ;;		On exit  : 3F/E
 15096 ;;		Unchanged: 0/0
 15097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15098 ;;      Params:         0       0       0       0       0       0       0       0
 15099 ;;      Locals:         0       0       0       0       0       0       0       0
 15100 ;;      Temps:          0       0       0       0       0       0       0       0
 15101 ;;      Totals:         0       0       0       0       0       0       0       0
 15102 ;;Total ram usage:        0 bytes
 15103 ;; Hardware stack levels used: 1
 15104 ;; Hardware stack levels required when called: 7
 15105 ;; This function calls:
 15106 ;;		_ADCC_Initialize
 15107 ;;		_EUSART1_Initialize
 15108 ;;		_FVR_Initialize
 15109 ;;		_OSCILLATOR_Initialize
 15110 ;;		_PIN_MANAGER_Initialize
 15111 ;;		_PMD_Initialize
 15112 ;;		_TMR0_Initialize
 15113 ;; This function is called by:
 15114 ;;		_main
 15115 ;; This function uses a non-reentrant model
 15116 ;;
 15117                           
 15118     09E8                     _SYSTEM_Initialize:	
 15119                           ;psect for function _SYSTEM_Initialize
 15120                           
 15121                           
 15122                           ;mcc_generated_files/mcc.c: 52:     PMD_Initialize();
 15123                           
 15124                           ;incstack = 0
 15125                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 15126     09E8  3189  2103  3189   	fcall	_PMD_Initialize
 15127                           
 15128                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
 15129     09EB  318A  22E9  3189   	fcall	_PIN_MANAGER_Initialize
 15130                           
 15131                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
 15132     09EE  3188  20F1  3189   	fcall	_OSCILLATOR_Initialize
 15133                           
 15134                           ;mcc_generated_files/mcc.c: 55:     FVR_Initialize();
 15135     09F1  3188  20A6  3189   	fcall	_FVR_Initialize
 15136                           
 15137                           ;mcc_generated_files/mcc.c: 56:     ADCC_Initialize();
 15138     09F4  318A  225E  3189   	fcall	_ADCC_Initialize
 15139                           
 15140                           ;mcc_generated_files/mcc.c: 57:     TMR0_Initialize();
 15141     09F7  3189  21FD  3189   	fcall	_TMR0_Initialize
 15142                           
 15143                           ;mcc_generated_files/mcc.c: 58:     EUSART1_Initialize();
 15144     09FA  318C  242B         	fcall	_EUSART1_Initialize
 15145     09FC  0008               	return
 15146     09FD                     __end_of_SYSTEM_Initialize:
 15147                           
 15148                           	psect	text61
 15149     09FD                     __ptext61:	
 15150 ;; *************** function _TMR0_Initialize *****************
 15151 ;; Defined at:
 15152 ;;		line 63 in file "mcc_generated_files/tmr0.c"
 15153 ;; Parameters:    Size  Location     Type
 15154 ;;		None
 15155 ;; Auto vars:     Size  Location     Type
 15156 ;;		None
 15157 ;; Return value:  Size  Location     Type
 15158 ;;                  1    wreg      void 
 15159 ;; Registers used:
 15160 ;;		wreg, status,2, status,0, pclath, cstack
 15161 ;; Tracked objects:
 15162 ;;		On entry : B3F/2
 15163 ;;		On exit  : B3F/B
 15164 ;;		Unchanged: B00/0
 15165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15166 ;;      Params:         0       0       0       0       0       0       0       0
 15167 ;;      Locals:         0       0       0       0       0       0       0       0
 15168 ;;      Temps:          0       0       0       0       0       0       0       0
 15169 ;;      Totals:         0       0       0       0       0       0       0       0
 15170 ;;Total ram usage:        0 bytes
 15171 ;; Hardware stack levels used: 1
 15172 ;; Hardware stack levels required when called: 6
 15173 ;; This function calls:
 15174 ;;		_TMR0_SetInterruptHandler
 15175 ;;		_TMR0_StopTimer
 15176 ;; This function is called by:
 15177 ;;		_SYSTEM_Initialize
 15178 ;; This function uses a non-reentrant model
 15179 ;;
 15180                           
 15181     09FD                     _TMR0_Initialize:	
 15182                           ;psect for function _TMR0_Initialize
 15183                           
 15184                           
 15185                           ;mcc_generated_files/tmr0.c: 68:     T0CON1 = 0x45;
 15186                           
 15187                           ;incstack = 0
 15188                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 15189     09FD  3045               	movlw	69
 15190     09FE  014B               	movlb	11	; select bank11
 15191     09FF  009F               	movwf	31	;volatile
 15192                           
 15193                           ;mcc_generated_files/tmr0.c: 71:     TMR0H = 0xD2;
 15194     0A00  30D2               	movlw	210
 15195     0A01  009D               	movwf	29	;volatile
 15196                           
 15197                           ;mcc_generated_files/tmr0.c: 74:     TMR0L = 0x00;
 15198     0A02  019C               	clrf	28	;volatile
 15199                           
 15200                           ;mcc_generated_files/tmr0.c: 77:     PIR0bits.TMR0IF = 0;
 15201     0A03  014E               	movlb	14	; select bank14
 15202     0A04  128C               	bcf	12,5	;volatile
 15203                           
 15204                           ;mcc_generated_files/tmr0.c: 80:     PIE0bits.TMR0IE = 1;
 15205     0A05  1696               	bsf	22,5	;volatile
 15206                           
 15207                           ;mcc_generated_files/tmr0.c: 83:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 15208     0A06  304F               	movlw	low _TMR0_DefaultInterruptHandler
 15209     0A07  0140               	movlb	0	; select bank0
 15210     0A08  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 15211     0A09  3009               	movlw	high _TMR0_DefaultInterruptHandler
 15212     0A0A  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 15213     0A0B  3188  20E9  3189   	fcall	_TMR0_SetInterruptHandler
 15214                           
 15215                           ;mcc_generated_files/tmr0.c: 86:     T0CON0 = 0x80;
 15216     0A0E  3080               	movlw	128
 15217     0A0F  014B               	movlb	11	; select bank11
 15218     0A10  009E               	movwf	30	;volatile
 15219                           
 15220                           ;mcc_generated_files/tmr0.c: 87:     TMR0_StopTimer();
 15221     0A11  3188  2091         	fcall	_TMR0_StopTimer
 15222     0A13  0008               	return
 15223     0A14                     __end_of_TMR0_Initialize:
 15224                           
 15225                           	psect	text62
 15226     0891                     __ptext62:	
 15227 ;; *************** function _TMR0_StopTimer *****************
 15228 ;; Defined at:
 15229 ;;		line 96 in file "mcc_generated_files/tmr0.c"
 15230 ;; Parameters:    Size  Location     Type
 15231 ;;		None
 15232 ;; Auto vars:     Size  Location     Type
 15233 ;;		None
 15234 ;; Return value:  Size  Location     Type
 15235 ;;                  1    wreg      void 
 15236 ;; Registers used:
 15237 ;;		None
 15238 ;; Tracked objects:
 15239 ;;		On entry : B3F/B
 15240 ;;		On exit  : B3F/B
 15241 ;;		Unchanged: B00/0
 15242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15243 ;;      Params:         0       0       0       0       0       0       0       0
 15244 ;;      Locals:         0       0       0       0       0       0       0       0
 15245 ;;      Temps:          0       0       0       0       0       0       0       0
 15246 ;;      Totals:         0       0       0       0       0       0       0       0
 15247 ;;Total ram usage:        0 bytes
 15248 ;; Hardware stack levels used: 1
 15249 ;; Hardware stack levels required when called: 5
 15250 ;; This function calls:
 15251 ;;		Nothing
 15252 ;; This function is called by:
 15253 ;;		_TMR0_Initialize
 15254 ;; This function uses a non-reentrant model
 15255 ;;
 15256                           
 15257     0891                     _TMR0_StopTimer:	
 15258                           ;psect for function _TMR0_StopTimer
 15259                           
 15260                           
 15261                           ;mcc_generated_files/tmr0.c: 99:     T0CON0bits.T0EN = 0;
 15262                           
 15263                           ;incstack = 0
 15264                           ; Regs used in _TMR0_StopTimer: []
 15265     0891  139E               	bcf	30,7	;volatile
 15266     0892  0008               	return
 15267     0893                     __end_of_TMR0_StopTimer:
 15268                           
 15269                           	psect	text63
 15270     08E9                     __ptext63:	
 15271 ;; *************** function _TMR0_SetInterruptHandler *****************
 15272 ;; Defined at:
 15273 ;;		line 137 in file "mcc_generated_files/tmr0.c"
 15274 ;; Parameters:    Size  Location     Type
 15275 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 15276 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 15277 ;; Auto vars:     Size  Location     Type
 15278 ;;		None
 15279 ;; Return value:  Size  Location     Type
 15280 ;;                  1    wreg      void 
 15281 ;; Registers used:
 15282 ;;		wreg
 15283 ;; Tracked objects:
 15284 ;;		On entry : B3F/0
 15285 ;;		On exit  : B3F/1
 15286 ;;		Unchanged: B00/0
 15287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15288 ;;      Params:         0       2       0       0       0       0       0       0
 15289 ;;      Locals:         0       0       0       0       0       0       0       0
 15290 ;;      Temps:          0       0       0       0       0       0       0       0
 15291 ;;      Totals:         0       2       0       0       0       0       0       0
 15292 ;;Total ram usage:        2 bytes
 15293 ;; Hardware stack levels used: 1
 15294 ;; Hardware stack levels required when called: 5
 15295 ;; This function calls:
 15296 ;;		Nothing
 15297 ;; This function is called by:
 15298 ;;		_TMR0_Initialize
 15299 ;; This function uses a non-reentrant model
 15300 ;;
 15301                           
 15302     08E9                     _TMR0_SetInterruptHandler:	
 15303                           ;psect for function _TMR0_SetInterruptHandler
 15304                           
 15305                           
 15306                           ;mcc_generated_files/tmr0.c: 138:     TMR0_InterruptHandler = InterruptHandler;
 15307                           
 15308                           ;incstack = 0
 15309                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 15310     08E9  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 15311     08EA  0141               	movlb	1	; select bank1
 15312     08EB  00E7               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 15313     08EC  0140               	movlb	0	; select bank0
 15314     08ED  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 15315     08EE  0141               	movlb	1	; select bank1
 15316     08EF  00E6               	movwf	_TMR0_InterruptHandler^(0+128)
 15317     08F0  0008               	return
 15318     08F1                     __end_of_TMR0_SetInterruptHandler:
 15319                           
 15320                           	psect	text64
 15321     0903                     __ptext64:	
 15322 ;; *************** function _PMD_Initialize *****************
 15323 ;; Defined at:
 15324 ;;		line 75 in file "mcc_generated_files/mcc.c"
 15325 ;; Parameters:    Size  Location     Type
 15326 ;;		None
 15327 ;; Auto vars:     Size  Location     Type
 15328 ;;		None
 15329 ;; Return value:  Size  Location     Type
 15330 ;;                  1    wreg      void 
 15331 ;; Registers used:
 15332 ;;		status,2
 15333 ;; Tracked objects:
 15334 ;;		On entry : B3F/0
 15335 ;;		On exit  : B3F/F
 15336 ;;		Unchanged: B00/0
 15337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15338 ;;      Params:         0       0       0       0       0       0       0       0
 15339 ;;      Locals:         0       0       0       0       0       0       0       0
 15340 ;;      Temps:          0       0       0       0       0       0       0       0
 15341 ;;      Totals:         0       0       0       0       0       0       0       0
 15342 ;;Total ram usage:        0 bytes
 15343 ;; Hardware stack levels used: 1
 15344 ;; Hardware stack levels required when called: 5
 15345 ;; This function calls:
 15346 ;;		Nothing
 15347 ;; This function is called by:
 15348 ;;		_SYSTEM_Initialize
 15349 ;; This function uses a non-reentrant model
 15350 ;;
 15351                           
 15352     0903                     _PMD_Initialize:	
 15353                           ;psect for function _PMD_Initialize
 15354                           
 15355                           
 15356                           ;mcc_generated_files/mcc.c: 78:     PMD0 = 0x00;
 15357                           
 15358                           ;incstack = 0
 15359                           ; Regs used in _PMD_Initialize: [status,2]
 15360     0903  014F               	movlb	15	; select bank15
 15361     0904  0196               	clrf	22	;volatile
 15362                           
 15363                           ;mcc_generated_files/mcc.c: 80:     PMD1 = 0x00;
 15364     0905  0197               	clrf	23	;volatile
 15365                           
 15366                           ;mcc_generated_files/mcc.c: 82:     PMD2 = 0x00;
 15367     0906  0198               	clrf	24	;volatile
 15368                           
 15369                           ;mcc_generated_files/mcc.c: 84:     PMD3 = 0x00;
 15370     0907  0199               	clrf	25	;volatile
 15371                           
 15372                           ;mcc_generated_files/mcc.c: 86:     PMD4 = 0x00;
 15373     0908  019A               	clrf	26	;volatile
 15374                           
 15375                           ;mcc_generated_files/mcc.c: 88:     PMD5 = 0x00;
 15376     0909  019B               	clrf	27	;volatile
 15377                           
 15378                           ;mcc_generated_files/mcc.c: 90:     PMD6 = 0x00;
 15379     090A  019C               	clrf	28	;volatile
 15380                           
 15381                           ;mcc_generated_files/mcc.c: 92:     PMD7 = 0x00;
 15382     090B  019D               	clrf	29	;volatile
 15383     090C  0008               	return
 15384     090D                     __end_of_PMD_Initialize:
 15385                           
 15386                           	psect	text65
 15387     0AE9                     __ptext65:	
 15388 ;; *************** function _PIN_MANAGER_Initialize *****************
 15389 ;; Defined at:
 15390 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 15391 ;; Parameters:    Size  Location     Type
 15392 ;;		None
 15393 ;; Auto vars:     Size  Location     Type
 15394 ;;		None
 15395 ;; Return value:  Size  Location     Type
 15396 ;;                  1    wreg      void 
 15397 ;; Registers used:
 15398 ;;		wreg, status,2
 15399 ;; Tracked objects:
 15400 ;;		On entry : B3F/F
 15401 ;;		On exit  : B3F/3D
 15402 ;;		Unchanged: B00/0
 15403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15404 ;;      Params:         0       0       0       0       0       0       0       0
 15405 ;;      Locals:         0       0       0       0       0       0       0       0
 15406 ;;      Temps:          0       0       0       0       0       0       0       0
 15407 ;;      Totals:         0       0       0       0       0       0       0       0
 15408 ;;Total ram usage:        0 bytes
 15409 ;; Hardware stack levels used: 1
 15410 ;; Hardware stack levels required when called: 5
 15411 ;; This function calls:
 15412 ;;		Nothing
 15413 ;; This function is called by:
 15414 ;;		_SYSTEM_Initialize
 15415 ;; This function uses a non-reentrant model
 15416 ;;
 15417                           
 15418     0AE9                     _PIN_MANAGER_Initialize:	
 15419                           ;psect for function _PIN_MANAGER_Initialize
 15420                           
 15421                           
 15422                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 15423                           
 15424                           ;incstack = 0
 15425                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 15426     0AE9  0140               	movlb	0	; select bank0
 15427     0AEA  0198               	clrf	24	;volatile
 15428                           
 15429                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
 15430     0AEB  019A               	clrf	26	;volatile
 15431                           
 15432                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x3F;
 15433     0AEC  303F               	movlw	63
 15434     0AED  0092               	movwf	18	;volatile
 15435                           
 15436                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x27;
 15437     0AEE  3027               	movlw	39
 15438     0AEF  0094               	movwf	20	;volatile
 15439                           
 15440                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x1F;
 15441     0AF0  301F               	movlw	31
 15442     0AF1  017E               	movlb	62	; select bank62
 15443     0AF2  00CE               	movwf	78	;volatile
 15444                           
 15445                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x37;
 15446     0AF3  3037               	movlw	55
 15447     0AF4  00B8               	movwf	56	;volatile
 15448                           
 15449                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
 15450     0AF5  01B9               	clrf	57	;volatile
 15451                           
 15452                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
 15453     0AF6  01CF               	clrf	79	;volatile
 15454                           
 15455                           ;mcc_generated_files/pin_manager.c: 84:     ODCONA = 0x00;
 15456     0AF7  01BA               	clrf	58	;volatile
 15457                           
 15458                           ;mcc_generated_files/pin_manager.c: 85:     ODCONC = 0x00;
 15459     0AF8  01D0               	clrf	80	;volatile
 15460                           
 15461                           ;mcc_generated_files/pin_manager.c: 90:     SLRCONA = 0x37;
 15462     0AF9  3037               	movlw	55
 15463     0AFA  00BB               	movwf	59	;volatile
 15464                           
 15465                           ;mcc_generated_files/pin_manager.c: 91:     SLRCONC = 0x3F;
 15466     0AFB  303F               	movlw	63
 15467     0AFC  00D1               	movwf	81	;volatile
 15468                           
 15469                           ;mcc_generated_files/pin_manager.c: 96:     INLVLA = 0x3F;
 15470     0AFD  303F               	movlw	63
 15471     0AFE  00BC               	movwf	60	;volatile
 15472                           
 15473                           ;mcc_generated_files/pin_manager.c: 97:     INLVLC = 0x3F;
 15474     0AFF  303F               	movlw	63
 15475     0B00  00D2               	movwf	82	;volatile
 15476                           
 15477                           ;mcc_generated_files/pin_manager.c: 106:     RC4PPS = 0x0F;
 15478     0B01  300F               	movlw	15
 15479     0B02  00A4               	movwf	36	;volatile
 15480                           
 15481                           ;mcc_generated_files/pin_manager.c: 107:     RX1DTPPS = 0x15;
 15482     0B03  3015               	movlw	21
 15483     0B04  017D               	movlb	61	; select bank61
 15484     0B05  00CB               	movwf	75	;volatile
 15485     0B06  0008               	return
 15486     0B07                     __end_of_PIN_MANAGER_Initialize:
 15487                           
 15488                           	psect	text66
 15489     08F1                     __ptext66:	
 15490 ;; *************** function _OSCILLATOR_Initialize *****************
 15491 ;; Defined at:
 15492 ;;		line 61 in file "mcc_generated_files/mcc.c"
 15493 ;; Parameters:    Size  Location     Type
 15494 ;;		None
 15495 ;; Auto vars:     Size  Location     Type
 15496 ;;		None
 15497 ;; Return value:  Size  Location     Type
 15498 ;;                  1    wreg      void 
 15499 ;; Registers used:
 15500 ;;		wreg, status,2
 15501 ;; Tracked objects:
 15502 ;;		On entry : B3F/3D
 15503 ;;		On exit  : B3F/11
 15504 ;;		Unchanged: B00/0
 15505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15506 ;;      Params:         0       0       0       0       0       0       0       0
 15507 ;;      Locals:         0       0       0       0       0       0       0       0
 15508 ;;      Temps:          0       0       0       0       0       0       0       0
 15509 ;;      Totals:         0       0       0       0       0       0       0       0
 15510 ;;Total ram usage:        0 bytes
 15511 ;; Hardware stack levels used: 1
 15512 ;; Hardware stack levels required when called: 5
 15513 ;; This function calls:
 15514 ;;		Nothing
 15515 ;; This function is called by:
 15516 ;;		_SYSTEM_Initialize
 15517 ;; This function uses a non-reentrant model
 15518 ;;
 15519                           
 15520     08F1                     _OSCILLATOR_Initialize:	
 15521                           ;psect for function _OSCILLATOR_Initialize
 15522                           
 15523                           
 15524                           ;mcc_generated_files/mcc.c: 64:     OSCCON1 = 0x62;
 15525                           
 15526                           ;incstack = 0
 15527                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 15528     08F1  3062               	movlw	98
 15529     08F2  0151               	movlb	17	; select bank17
 15530     08F3  008D               	movwf	13	;volatile
 15531                           
 15532                           ;mcc_generated_files/mcc.c: 66:     OSCCON3 = 0x00;
 15533     08F4  018F               	clrf	15	;volatile
 15534                           
 15535                           ;mcc_generated_files/mcc.c: 68:     OSCEN = 0x00;
 15536     08F5  0191               	clrf	17	;volatile
 15537                           
 15538                           ;mcc_generated_files/mcc.c: 70:     OSCFRQ = 0x02;
 15539     08F6  3002               	movlw	2
 15540     08F7  0093               	movwf	19	;volatile
 15541                           
 15542                           ;mcc_generated_files/mcc.c: 72:     OSCTUNE = 0x00;
 15543     08F8  0192               	clrf	18	;volatile
 15544     08F9  0008               	return
 15545     08FA                     __end_of_OSCILLATOR_Initialize:
 15546                           
 15547                           	psect	text67
 15548     08A6                     __ptext67:	
 15549 ;; *************** function _FVR_Initialize *****************
 15550 ;; Defined at:
 15551 ;;		line 58 in file "mcc_generated_files/fvr.c"
 15552 ;; Parameters:    Size  Location     Type
 15553 ;;		None
 15554 ;; Auto vars:     Size  Location     Type
 15555 ;;		None
 15556 ;; Return value:  Size  Location     Type
 15557 ;;                  1    wreg      void 
 15558 ;; Registers used:
 15559 ;;		wreg
 15560 ;; Tracked objects:
 15561 ;;		On entry : B3F/11
 15562 ;;		On exit  : B3F/12
 15563 ;;		Unchanged: B00/0
 15564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15565 ;;      Params:         0       0       0       0       0       0       0       0
 15566 ;;      Locals:         0       0       0       0       0       0       0       0
 15567 ;;      Temps:          0       0       0       0       0       0       0       0
 15568 ;;      Totals:         0       0       0       0       0       0       0       0
 15569 ;;Total ram usage:        0 bytes
 15570 ;; Hardware stack levels used: 1
 15571 ;; Hardware stack levels required when called: 5
 15572 ;; This function calls:
 15573 ;;		Nothing
 15574 ;; This function is called by:
 15575 ;;		_SYSTEM_Initialize
 15576 ;; This function uses a non-reentrant model
 15577 ;;
 15578                           
 15579     08A6                     _FVR_Initialize:	
 15580                           ;psect for function _FVR_Initialize
 15581                           
 15582                           
 15583                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x82;
 15584                           
 15585                           ;incstack = 0
 15586                           ; Regs used in _FVR_Initialize: [wreg]
 15587     08A6  3082               	movlw	130
 15588     08A7  0152               	movlb	18	; select bank18
 15589     08A8  008C               	movwf	12	;volatile
 15590     08A9  0008               	return
 15591     08AA                     __end_of_FVR_Initialize:
 15592                           
 15593                           	psect	text68
 15594     0C2B                     __ptext68:	
 15595 ;; *************** function _EUSART1_Initialize *****************
 15596 ;; Defined at:
 15597 ;;		line 141 in file "mcc_generated_files/eusart1.c"
 15598 ;; Parameters:    Size  Location     Type
 15599 ;;		None
 15600 ;; Auto vars:     Size  Location     Type
 15601 ;;		None
 15602 ;; Return value:  Size  Location     Type
 15603 ;;                  1    wreg      void 
 15604 ;; Registers used:
 15605 ;;		wreg, status,2, status,0, pclath, cstack
 15606 ;; Tracked objects:
 15607 ;;		On entry : 3F/B
 15608 ;;		On exit  : 3F/E
 15609 ;;		Unchanged: 0/0
 15610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15611 ;;      Params:         0       0       0       0       0       0       0       0
 15612 ;;      Locals:         0       0       0       0       0       0       0       0
 15613 ;;      Temps:          0       0       0       0       0       0       0       0
 15614 ;;      Totals:         0       0       0       0       0       0       0       0
 15615 ;;Total ram usage:        0 bytes
 15616 ;; Hardware stack levels used: 1
 15617 ;; Hardware stack levels required when called: 6
 15618 ;; This function calls:
 15619 ;;		_EUSART1_SetErrorHandler
 15620 ;;		_EUSART1_SetFramingErrorHandler
 15621 ;;		_EUSART1_SetOverrunErrorHandler
 15622 ;;		_EUSART1_SetRxInterruptHandler
 15623 ;; This function is called by:
 15624 ;;		_SYSTEM_Initialize
 15625 ;; This function uses a non-reentrant model
 15626 ;;
 15627                           
 15628     0C2B                     _EUSART1_Initialize:	
 15629                           ;psect for function _EUSART1_Initialize
 15630                           
 15631                           
 15632                           ;mcc_generated_files/eusart1.c: 144:     PIE3bits.RC1IE = 0;
 15633                           
 15634                           ;incstack = 0
 15635                           ; Regs used in _EUSART1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 15636     0C2B  014E               	movlb	14	; select bank14
 15637     0C2C  1299               	bcf	25,5	;volatile
 15638                           
 15639                           ;mcc_generated_files/eusart1.c: 145:     EUSART1_SetRxInterruptHandler(EUSART1_Receive_I
      +                          SR);
 15640     0C2D  30F9               	movlw	low _EUSART1_Receive_ISR
 15641     0C2E  0140               	movlb	0	; select bank0
 15642     0C2F  00A0               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler
 15643     0C30  300B               	movlw	high _EUSART1_Receive_ISR
 15644     0C31  00A1               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler+1
 15645     0C32  3188  20E1  318C   	fcall	_EUSART1_SetRxInterruptHandler
 15646                           
 15647                           ;mcc_generated_files/eusart1.c: 149:     BAUD1CON = 0x08;
 15648     0C35  3008               	movlw	8
 15649     0C36  0142               	movlb	2	; select bank2
 15650     0C37  009F               	movwf	31	;volatile
 15651                           
 15652                           ;mcc_generated_files/eusart1.c: 152:     RC1STA = 0x90;
 15653     0C38  3090               	movlw	144
 15654     0C39  009D               	movwf	29	;volatile
 15655                           
 15656                           ;mcc_generated_files/eusart1.c: 155:     TX1STA = 0x24;
 15657     0C3A  3024               	movlw	36
 15658     0C3B  009E               	movwf	30	;volatile
 15659                           
 15660                           ;mcc_generated_files/eusart1.c: 158:     SP1BRGL = 0x19;
 15661     0C3C  3019               	movlw	25
 15662     0C3D  009B               	movwf	27	;volatile
 15663                           
 15664                           ;mcc_generated_files/eusart1.c: 161:     SP1BRGH = 0x00;
 15665     0C3E  019C               	clrf	28	;volatile
 15666                           
 15667                           ;mcc_generated_files/eusart1.c: 167:     EUSART1_SetFramingErrorHandler(EUSART1_DefaultF
      +                          ramingErrorHandler);
 15668     0C3F  308C               	movlw	low _EUSART1_DefaultFramingErrorHandler
 15669     0C40  0140               	movlb	0	; select bank0
 15670     0C41  00A0               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler
 15671     0C42  3008               	movlw	high _EUSART1_DefaultFramingErrorHandler
 15672     0C43  00A1               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler+1
 15673     0C44  3188  20D1  318C   	fcall	_EUSART1_SetFramingErrorHandler
 15674                           
 15675                           ;mcc_generated_files/eusart1.c: 168:     EUSART1_SetOverrunErrorHandler(EUSART1_DefaultO
      +                          verrunErrorHandler);
 15676     0C47  309E               	movlw	low _EUSART1_DefaultOverrunErrorHandler
 15677     0C48  0140               	movlb	0	; select bank0
 15678     0C49  00A0               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler
 15679     0C4A  3008               	movlw	high _EUSART1_DefaultOverrunErrorHandler
 15680     0C4B  00A1               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler+1
 15681     0C4C  3188  20D9  318C   	fcall	_EUSART1_SetOverrunErrorHandler
 15682                           
 15683                           ;mcc_generated_files/eusart1.c: 169:     EUSART1_SetErrorHandler(EUSART1_DefaultErrorHan
      +                          dler);
 15684     0C4F  3095               	movlw	low _EUSART1_DefaultErrorHandler
 15685     0C50  0140               	movlb	0	; select bank0
 15686     0C51  00A0               	movwf	EUSART1_SetErrorHandler@interruptHandler
 15687     0C52  3008               	movlw	high _EUSART1_DefaultErrorHandler
 15688     0C53  00A1               	movwf	EUSART1_SetErrorHandler@interruptHandler+1
 15689     0C54  3188  20C9         	fcall	_EUSART1_SetErrorHandler
 15690                           
 15691                           ;mcc_generated_files/eusart1.c: 171:     eusart1RxLastError.status = 0;
 15692     0C56  0140               	movlb	0	; select bank0
 15693     0C57  01EC               	clrf	_eusart1RxLastError	;volatile
 15694                           
 15695                           ;mcc_generated_files/eusart1.c: 174:     eusart1RxHead = 0;
 15696     0C58  01F3               	clrf	_eusart1RxHead	;volatile
 15697                           
 15698                           ;mcc_generated_files/eusart1.c: 175:     eusart1RxTail = 0;
 15699     0C59  01F2               	clrf	_eusart1RxTail	;volatile
 15700                           
 15701                           ;mcc_generated_files/eusart1.c: 176:     eusart1RxCount = 0;
 15702     0C5A  01F1               	clrf	_eusart1RxCount	;volatile
 15703                           
 15704                           ;mcc_generated_files/eusart1.c: 179:     PIE3bits.RC1IE = 1;
 15705     0C5B  014E               	movlb	14	; select bank14
 15706     0C5C  1699               	bsf	25,5	;volatile
 15707     0C5D  0008               	return
 15708     0C5E                     __end_of_EUSART1_Initialize:
 15709                           
 15710                           	psect	text69
 15711     08E1                     __ptext69:	
 15712 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
 15713 ;; Defined at:
 15714 ;;		line 309 in file "mcc_generated_files/eusart1.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15717 ;;		 -> EUSART1_Receive_ISR(1), 
 15718 ;; Auto vars:     Size  Location     Type
 15719 ;;		None
 15720 ;; Return value:  Size  Location     Type
 15721 ;;                  1    wreg      void 
 15722 ;; Registers used:
 15723 ;;		wreg
 15724 ;; Tracked objects:
 15725 ;;		On entry : 3F/0
 15726 ;;		On exit  : 3F/1
 15727 ;;		Unchanged: 0/0
 15728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15729 ;;      Params:         0       2       0       0       0       0       0       0
 15730 ;;      Locals:         0       0       0       0       0       0       0       0
 15731 ;;      Temps:          0       0       0       0       0       0       0       0
 15732 ;;      Totals:         0       2       0       0       0       0       0       0
 15733 ;;Total ram usage:        2 bytes
 15734 ;; Hardware stack levels used: 1
 15735 ;; Hardware stack levels required when called: 5
 15736 ;; This function calls:
 15737 ;;		Nothing
 15738 ;; This function is called by:
 15739 ;;		_EUSART1_Initialize
 15740 ;; This function uses a non-reentrant model
 15741 ;;
 15742                           
 15743     08E1                     _EUSART1_SetRxInterruptHandler:	
 15744                           ;psect for function _EUSART1_SetRxInterruptHandler
 15745                           
 15746                           
 15747                           ;mcc_generated_files/eusart1.c: 310:     EUSART1_RxDefaultInterruptHandler = interruptHa
      +                          ndler;
 15748                           
 15749                           ;incstack = 0
 15750                           ; Regs used in _EUSART1_SetRxInterruptHandler: [wreg]
 15751     08E1  0821               	movf	EUSART1_SetRxInterruptHandler@interruptHandler+1,w
 15752     08E2  0141               	movlb	1	; select bank1
 15753     08E3  00EF               	movwf	(_EUSART1_RxDefaultInterruptHandler+1)^(0+128)
 15754     08E4  0140               	movlb	0	; select bank0
 15755     08E5  0820               	movf	EUSART1_SetRxInterruptHandler@interruptHandler,w
 15756     08E6  0141               	movlb	1	; select bank1
 15757     08E7  00EE               	movwf	_EUSART1_RxDefaultInterruptHandler^(0+128)
 15758     08E8  0008               	return
 15759     08E9                     __end_of_EUSART1_SetRxInterruptHandler:
 15760                           
 15761                           	psect	text70
 15762     08D9                     __ptext70:	
 15763 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
 15764 ;; Defined at:
 15765 ;;		line 300 in file "mcc_generated_files/eusart1.c"
 15766 ;; Parameters:    Size  Location     Type
 15767 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15768 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
 15769 ;; Auto vars:     Size  Location     Type
 15770 ;;		None
 15771 ;; Return value:  Size  Location     Type
 15772 ;;                  1    wreg      void 
 15773 ;; Registers used:
 15774 ;;		wreg
 15775 ;; Tracked objects:
 15776 ;;		On entry : 3F/0
 15777 ;;		On exit  : 3F/1
 15778 ;;		Unchanged: 0/0
 15779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15780 ;;      Params:         0       2       0       0       0       0       0       0
 15781 ;;      Locals:         0       0       0       0       0       0       0       0
 15782 ;;      Temps:          0       0       0       0       0       0       0       0
 15783 ;;      Totals:         0       2       0       0       0       0       0       0
 15784 ;;Total ram usage:        2 bytes
 15785 ;; Hardware stack levels used: 1
 15786 ;; Hardware stack levels required when called: 5
 15787 ;; This function calls:
 15788 ;;		Nothing
 15789 ;; This function is called by:
 15790 ;;		_EUSART1_Initialize
 15791 ;; This function uses a non-reentrant model
 15792 ;;
 15793                           
 15794     08D9                     _EUSART1_SetOverrunErrorHandler:	
 15795                           ;psect for function _EUSART1_SetOverrunErrorHandler
 15796                           
 15797                           
 15798                           ;mcc_generated_files/eusart1.c: 301:     EUSART1_OverrunErrorHandler = interruptHandler;
 15799                           
 15800                           ;incstack = 0
 15801                           ; Regs used in _EUSART1_SetOverrunErrorHandler: [wreg]
 15802     08D9  0821               	movf	EUSART1_SetOverrunErrorHandler@interruptHandler+1,w
 15803     08DA  0141               	movlb	1	; select bank1
 15804     08DB  00EB               	movwf	(_EUSART1_OverrunErrorHandler+1)^(0+128)
 15805     08DC  0140               	movlb	0	; select bank0
 15806     08DD  0820               	movf	EUSART1_SetOverrunErrorHandler@interruptHandler,w
 15807     08DE  0141               	movlb	1	; select bank1
 15808     08DF  00EA               	movwf	_EUSART1_OverrunErrorHandler^(0+128)
 15809     08E0  0008               	return
 15810     08E1                     __end_of_EUSART1_SetOverrunErrorHandler:
 15811                           
 15812                           	psect	text71
 15813     08D1                     __ptext71:	
 15814 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
 15815 ;; Defined at:
 15816 ;;		line 296 in file "mcc_generated_files/eusart1.c"
 15817 ;; Parameters:    Size  Location     Type
 15818 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15819 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
 15820 ;; Auto vars:     Size  Location     Type
 15821 ;;		None
 15822 ;; Return value:  Size  Location     Type
 15823 ;;                  1    wreg      void 
 15824 ;; Registers used:
 15825 ;;		wreg
 15826 ;; Tracked objects:
 15827 ;;		On entry : 3F/0
 15828 ;;		On exit  : 3F/1
 15829 ;;		Unchanged: 0/0
 15830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15831 ;;      Params:         0       2       0       0       0       0       0       0
 15832 ;;      Locals:         0       0       0       0       0       0       0       0
 15833 ;;      Temps:          0       0       0       0       0       0       0       0
 15834 ;;      Totals:         0       2       0       0       0       0       0       0
 15835 ;;Total ram usage:        2 bytes
 15836 ;; Hardware stack levels used: 1
 15837 ;; Hardware stack levels required when called: 5
 15838 ;; This function calls:
 15839 ;;		Nothing
 15840 ;; This function is called by:
 15841 ;;		_EUSART1_Initialize
 15842 ;; This function uses a non-reentrant model
 15843 ;;
 15844                           
 15845     08D1                     _EUSART1_SetFramingErrorHandler:	
 15846                           ;psect for function _EUSART1_SetFramingErrorHandler
 15847                           
 15848                           
 15849                           ;mcc_generated_files/eusart1.c: 297:     EUSART1_FramingErrorHandler = interruptHandler;
 15850                           
 15851                           ;incstack = 0
 15852                           ; Regs used in _EUSART1_SetFramingErrorHandler: [wreg]
 15853     08D1  0821               	movf	EUSART1_SetFramingErrorHandler@interruptHandler+1,w
 15854     08D2  0141               	movlb	1	; select bank1
 15855     08D3  00ED               	movwf	(_EUSART1_FramingErrorHandler+1)^(0+128)
 15856     08D4  0140               	movlb	0	; select bank0
 15857     08D5  0820               	movf	EUSART1_SetFramingErrorHandler@interruptHandler,w
 15858     08D6  0141               	movlb	1	; select bank1
 15859     08D7  00EC               	movwf	_EUSART1_FramingErrorHandler^(0+128)
 15860     08D8  0008               	return
 15861     08D9                     __end_of_EUSART1_SetFramingErrorHandler:
 15862                           
 15863                           	psect	text72
 15864     08C9                     __ptext72:	
 15865 ;; *************** function _EUSART1_SetErrorHandler *****************
 15866 ;; Defined at:
 15867 ;;		line 304 in file "mcc_generated_files/eusart1.c"
 15868 ;; Parameters:    Size  Location     Type
 15869 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15870 ;;		 -> EUSART1_DefaultErrorHandler(1), 
 15871 ;; Auto vars:     Size  Location     Type
 15872 ;;		None
 15873 ;; Return value:  Size  Location     Type
 15874 ;;                  1    wreg      void 
 15875 ;; Registers used:
 15876 ;;		wreg
 15877 ;; Tracked objects:
 15878 ;;		On entry : 3F/0
 15879 ;;		On exit  : 3F/1
 15880 ;;		Unchanged: 0/0
 15881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15882 ;;      Params:         0       2       0       0       0       0       0       0
 15883 ;;      Locals:         0       0       0       0       0       0       0       0
 15884 ;;      Temps:          0       0       0       0       0       0       0       0
 15885 ;;      Totals:         0       2       0       0       0       0       0       0
 15886 ;;Total ram usage:        2 bytes
 15887 ;; Hardware stack levels used: 1
 15888 ;; Hardware stack levels required when called: 5
 15889 ;; This function calls:
 15890 ;;		Nothing
 15891 ;; This function is called by:
 15892 ;;		_EUSART1_Initialize
 15893 ;; This function uses a non-reentrant model
 15894 ;;
 15895                           
 15896     08C9                     _EUSART1_SetErrorHandler:	
 15897                           ;psect for function _EUSART1_SetErrorHandler
 15898                           
 15899                           
 15900                           ;mcc_generated_files/eusart1.c: 305:     EUSART1_ErrorHandler = interruptHandler;
 15901                           
 15902                           ;incstack = 0
 15903                           ; Regs used in _EUSART1_SetErrorHandler: [wreg]
 15904     08C9  0821               	movf	EUSART1_SetErrorHandler@interruptHandler+1,w
 15905     08CA  0141               	movlb	1	; select bank1
 15906     08CB  00E9               	movwf	(_EUSART1_ErrorHandler+1)^(0+128)
 15907     08CC  0140               	movlb	0	; select bank0
 15908     08CD  0820               	movf	EUSART1_SetErrorHandler@interruptHandler,w
 15909     08CE  0141               	movlb	1	; select bank1
 15910     08CF  00E8               	movwf	_EUSART1_ErrorHandler^(0+128)
 15911     08D0  0008               	return
 15912     08D1                     __end_of_EUSART1_SetErrorHandler:
 15913                           
 15914                           	psect	text73
 15915     0A5E                     __ptext73:	
 15916 ;; *************** function _ADCC_Initialize *****************
 15917 ;; Defined at:
 15918 ;;		line 63 in file "mcc_generated_files/adcc.c"
 15919 ;; Parameters:    Size  Location     Type
 15920 ;;		None
 15921 ;; Auto vars:     Size  Location     Type
 15922 ;;		None
 15923 ;; Return value:  Size  Location     Type
 15924 ;;                  1    wreg      void 
 15925 ;; Registers used:
 15926 ;;		wreg, status,2
 15927 ;; Tracked objects:
 15928 ;;		On entry : B3F/12
 15929 ;;		On exit  : B3F/2
 15930 ;;		Unchanged: B00/0
 15931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15932 ;;      Params:         0       0       0       0       0       0       0       0
 15933 ;;      Locals:         0       0       0       0       0       0       0       0
 15934 ;;      Temps:          0       0       0       0       0       0       0       0
 15935 ;;      Totals:         0       0       0       0       0       0       0       0
 15936 ;;Total ram usage:        0 bytes
 15937 ;; Hardware stack levels used: 1
 15938 ;; Hardware stack levels required when called: 5
 15939 ;; This function calls:
 15940 ;;		Nothing
 15941 ;; This function is called by:
 15942 ;;		_SYSTEM_Initialize
 15943 ;; This function uses a non-reentrant model
 15944 ;;
 15945                           
 15946     0A5E                     _ADCC_Initialize:	
 15947                           ;psect for function _ADCC_Initialize
 15948                           
 15949                           
 15950                           ;mcc_generated_files/adcc.c: 67:     ADLTHL = 0x00;
 15951                           
 15952                           ;incstack = 0
 15953                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 15954     0A5E  0141               	movlb	1	; select bank1
 15955     0A5F  018C               	clrf	12	;volatile
 15956                           
 15957                           ;mcc_generated_files/adcc.c: 69:     ADLTHH = 0x00;
 15958     0A60  018D               	clrf	13	;volatile
 15959                           
 15960                           ;mcc_generated_files/adcc.c: 71:     ADUTHL = 0x00;
 15961     0A61  018E               	clrf	14	;volatile
 15962                           
 15963                           ;mcc_generated_files/adcc.c: 73:     ADUTHH = 0x00;
 15964     0A62  018F               	clrf	15	;volatile
 15965                           
 15966                           ;mcc_generated_files/adcc.c: 75:     ADSTPTL = 0x00;
 15967     0A63  0192               	clrf	18	;volatile
 15968                           
 15969                           ;mcc_generated_files/adcc.c: 77:     ADSTPTH = 0x00;
 15970     0A64  0193               	clrf	19	;volatile
 15971                           
 15972                           ;mcc_generated_files/adcc.c: 79:     ADACCU = 0x00;
 15973     0A65  0198               	clrf	24	;volatile
 15974                           
 15975                           ;mcc_generated_files/adcc.c: 81:     ADRPT = 0x00;
 15976     0A66  019A               	clrf	26	;volatile
 15977                           
 15978                           ;mcc_generated_files/adcc.c: 83:     ADPCH = 0x00;
 15979     0A67  019F               	clrf	31	;volatile
 15980                           
 15981                           ;mcc_generated_files/adcc.c: 85:     ADACQL = 0x00;
 15982     0A68  0142               	movlb	2	; select bank2
 15983     0A69  018C               	clrf	12	;volatile
 15984                           
 15985                           ;mcc_generated_files/adcc.c: 87:     ADACQH = 0x00;
 15986     0A6A  018D               	clrf	13	;volatile
 15987                           
 15988                           ;mcc_generated_files/adcc.c: 89:     ADCAP = 0x00;
 15989     0A6B  018E               	clrf	14	;volatile
 15990                           
 15991                           ;mcc_generated_files/adcc.c: 91:     ADPREL = 0x00;
 15992     0A6C  018F               	clrf	15	;volatile
 15993                           
 15994                           ;mcc_generated_files/adcc.c: 93:     ADPREH = 0x00;
 15995     0A6D  0190               	clrf	16	;volatile
 15996                           
 15997                           ;mcc_generated_files/adcc.c: 95:     ADCON1 = 0x00;
 15998     0A6E  0192               	clrf	18	;volatile
 15999                           
 16000                           ;mcc_generated_files/adcc.c: 97:     ADCON2 = 0x02;
 16001     0A6F  3002               	movlw	2
 16002     0A70  0093               	movwf	19	;volatile
 16003                           
 16004                           ;mcc_generated_files/adcc.c: 99:     ADCON3 = 0x00;
 16005     0A71  0194               	clrf	20	;volatile
 16006                           
 16007                           ;mcc_generated_files/adcc.c: 101:     ADSTAT = 0x00;
 16008     0A72  0195               	clrf	21	;volatile
 16009                           
 16010                           ;mcc_generated_files/adcc.c: 103:     ADREF = 0x00;
 16011     0A73  0196               	clrf	22	;volatile
 16012                           
 16013                           ;mcc_generated_files/adcc.c: 105:     ADACT = 0x00;
 16014     0A74  0197               	clrf	23	;volatile
 16015                           
 16016                           ;mcc_generated_files/adcc.c: 107:     ADCLK = 0x00;
 16017     0A75  0198               	clrf	24	;volatile
 16018                           
 16019                           ;mcc_generated_files/adcc.c: 109:     ADCON0 = 0x84;
 16020     0A76  3084               	movlw	132
 16021     0A77  0091               	movwf	17	;volatile
 16022     0A78  0008               	return
 16023     0A79                     __end_of_ADCC_Initialize:
 16024                           
 16025                           	psect	text74
 16026     08B7                     __ptext74:	
 16027 ;; *************** function _FVR_IsOutputReady *****************
 16028 ;; Defined at:
 16029 ;;		line 64 in file "mcc_generated_files/fvr.c"
 16030 ;; Parameters:    Size  Location     Type
 16031 ;;		None
 16032 ;; Auto vars:     Size  Location     Type
 16033 ;;		None
 16034 ;; Return value:  Size  Location     Type
 16035 ;;                  1    wreg      _Bool 
 16036 ;; Registers used:
 16037 ;;		wreg, status,2, status,0
 16038 ;; Tracked objects:
 16039 ;;		On entry : 2D/0
 16040 ;;		On exit  : 3F/12
 16041 ;;		Unchanged: 0/0
 16042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16043 ;;      Params:         0       0       0       0       0       0       0       0
 16044 ;;      Locals:         0       0       0       0       0       0       0       0
 16045 ;;      Temps:          0       0       0       0       0       0       0       0
 16046 ;;      Totals:         0       0       0       0       0       0       0       0
 16047 ;;Total ram usage:        0 bytes
 16048 ;; Hardware stack levels used: 1
 16049 ;; Hardware stack levels required when called: 5
 16050 ;; This function calls:
 16051 ;;		Nothing
 16052 ;; This function is called by:
 16053 ;;		_main
 16054 ;; This function uses a non-reentrant model
 16055 ;;
 16056                           
 16057     08B7                     _FVR_IsOutputReady:	
 16058                           ;psect for function _FVR_IsOutputReady
 16059                           
 16060                           
 16061                           ;mcc_generated_files/fvr.c: 66:     return (FVRCONbits.FVRRDY);
 16062                           
 16063                           ;incstack = 0
 16064                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
 16065     08B7  0152               	movlb	18	; select bank18
 16066     08B8  0E0C               	swapf	12,w	;volatile
 16067     08B9  0C89               	rrf	9,f
 16068     08BA  0C89               	rrf	9,f
 16069     08BB  3901               	andlw	1
 16070     08BC  0008               	return
 16071     08BD                     __end_of_FVR_IsOutputReady:
 16072                           
 16073                           	psect	text75
 16074     0B28                     __ptext75:	
 16075 ;; *************** function _DATAEE_ReadWord *****************
 16076 ;; Defined at:
 16077 ;;		line 208 in file "mcc_generated_files/memory.c"
 16078 ;; Parameters:    Size  Location     Type
 16079 ;;  bAdd            2    2[BANK0 ] unsigned short 
 16080 ;; Auto vars:     Size  Location     Type
 16081 ;;  high_byte       1   10[BANK0 ] unsigned char 
 16082 ;;  low_byte        1    9[BANK0 ] unsigned char 
 16083 ;; Return value:  Size  Location     Type
 16084 ;;                  2    2[BANK0 ] unsigned short 
 16085 ;; Registers used:
 16086 ;;		wreg, status,2, status,0, pclath, cstack
 16087 ;; Tracked objects:
 16088 ;;		On entry : 3F/0
 16089 ;;		On exit  : 3F/0
 16090 ;;		Unchanged: 0/0
 16091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16092 ;;      Params:         0       2       0       0       0       0       0       0
 16093 ;;      Locals:         0       2       0       0       0       0       0       0
 16094 ;;      Temps:          0       5       0       0       0       0       0       0
 16095 ;;      Totals:         0       9       0       0       0       0       0       0
 16096 ;;Total ram usage:        9 bytes
 16097 ;; Hardware stack levels used: 1
 16098 ;; Hardware stack levels required when called: 6
 16099 ;; This function calls:
 16100 ;;		_DATAEE_ReadByte
 16101 ;; This function is called by:
 16102 ;;		_main
 16103 ;; This function uses a non-reentrant model
 16104 ;;
 16105                           
 16106     0B28                     _DATAEE_ReadWord:	
 16107                           ;psect for function _DATAEE_ReadWord
 16108                           
 16109                           
 16110                           ;mcc_generated_files/memory.c: 208: uint16_t DATAEE_ReadWord(uint16_t bAdd);mcc_generate
      +                          d_files/memory.c: 209: {;mcc_generated_files/memory.c: 210:     uint8_t low_byte = DATAE
      +                          E_ReadByte(bAdd);
 16111                           
 16112                           ;incstack = 0
 16113                           ; Regs used in _DATAEE_ReadWord: [wreg+status,2+status,0+pclath+cstack]
 16114     0B28  0823               	movf	DATAEE_ReadWord@bAdd+1,w
 16115     0B29  00A1               	movwf	DATAEE_ReadByte@bAdd+1
 16116     0B2A  0822               	movf	DATAEE_ReadWord@bAdd,w
 16117     0B2B  00A0               	movwf	DATAEE_ReadByte@bAdd
 16118     0B2C  3189  2176  318B   	fcall	_DATAEE_ReadByte
 16119     0B2F  0140               	movlb	0	; select bank0
 16120     0B30  00A9               	movwf	DATAEE_ReadWord@low_byte
 16121                           
 16122                           ;mcc_generated_files/memory.c: 211:     uint8_t high_byte = DATAEE_ReadByte(bAdd + 0x000
      +                          1);
 16123     0B31  0822               	movf	DATAEE_ReadWord@bAdd,w
 16124     0B32  3E01               	addlw	1
 16125     0B33  00A0               	movwf	DATAEE_ReadByte@bAdd
 16126     0B34  3000               	movlw	0
 16127     0B35  3D23               	addwfc	DATAEE_ReadWord@bAdd+1,w
 16128     0B36  00A1               	movwf	DATAEE_ReadByte@bAdd+1
 16129     0B37  3189  2176         	fcall	_DATAEE_ReadByte
 16130     0B39  0140               	movlb	0	; select bank0
 16131     0B3A  00AA               	movwf	DATAEE_ReadWord@high_byte
 16132                           
 16133                           ;mcc_generated_files/memory.c: 213:     return ( high_byte << 8 | low_byte);
 16134     0B3B  0829               	movf	DATAEE_ReadWord@low_byte,w
 16135     0B3C  00A4               	movwf	??_DATAEE_ReadWord
 16136     0B3D  01A5               	clrf	??_DATAEE_ReadWord+1
 16137     0B3E  082A               	movf	DATAEE_ReadWord@high_byte,w
 16138     0B3F  00A6               	movwf	??_DATAEE_ReadWord+2
 16139     0B40  01A7               	clrf	??_DATAEE_ReadWord+3
 16140     0B41  0826               	movf	??_DATAEE_ReadWord+2,w
 16141     0B42  00A7               	movwf	??_DATAEE_ReadWord+3
 16142     0B43  01A6               	clrf	??_DATAEE_ReadWord+2
 16143     0B44  0824               	movf	??_DATAEE_ReadWord,w
 16144     0B45  0426               	iorwf	??_DATAEE_ReadWord+2,w
 16145     0B46  00A2               	movwf	?_DATAEE_ReadWord
 16146     0B47  0825               	movf	??_DATAEE_ReadWord+1,w
 16147     0B48  0427               	iorwf	??_DATAEE_ReadWord+3,w
 16148     0B49  00A3               	movwf	?_DATAEE_ReadWord+1
 16149     0B4A  0008               	return
 16150     0B4B                     __end_of_DATAEE_ReadWord:
 16151                           
 16152                           	psect	text76
 16153     0976                     __ptext76:	
 16154 ;; *************** function _DATAEE_ReadByte *****************
 16155 ;; Defined at:
 16156 ;;		line 216 in file "mcc_generated_files/memory.c"
 16157 ;; Parameters:    Size  Location     Type
 16158 ;;  bAdd            2    0[BANK0 ] unsigned short 
 16159 ;; Auto vars:     Size  Location     Type
 16160 ;;		None
 16161 ;; Return value:  Size  Location     Type
 16162 ;;                  1    wreg      unsigned char 
 16163 ;; Registers used:
 16164 ;;		wreg
 16165 ;; Tracked objects:
 16166 ;;		On entry : 3F/0
 16167 ;;		On exit  : 3F/10
 16168 ;;		Unchanged: 0/0
 16169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16170 ;;      Params:         0       2       0       0       0       0       0       0
 16171 ;;      Locals:         0       0       0       0       0       0       0       0
 16172 ;;      Temps:          0       0       0       0       0       0       0       0
 16173 ;;      Totals:         0       2       0       0       0       0       0       0
 16174 ;;Total ram usage:        2 bytes
 16175 ;; Hardware stack levels used: 1
 16176 ;; Hardware stack levels required when called: 5
 16177 ;; This function calls:
 16178 ;;		Nothing
 16179 ;; This function is called by:
 16180 ;;		_DATAEE_ReadWord
 16181 ;;		_main
 16182 ;; This function uses a non-reentrant model
 16183 ;;
 16184                           
 16185     0976                     _DATAEE_ReadByte:	
 16186                           ;psect for function _DATAEE_ReadByte
 16187                           
 16188                           
 16189                           ;mcc_generated_files/memory.c: 216: uint8_t DATAEE_ReadByte(uint16_t bAdd);mcc_generated
      +                          _files/memory.c: 217: {;mcc_generated_files/memory.c: 218:     NVMADRH = ((bAdd >> 8) & 
      +                          0xFF);
 16190                           
 16191                           ;incstack = 0
 16192                           ; Regs used in _DATAEE_ReadByte: [wreg]
 16193     0976  0821               	movf	DATAEE_ReadByte@bAdd+1,w
 16194     0977  0150               	movlb	16	; select bank16
 16195     0978  009B               	movwf	27	;volatile
 16196                           
 16197                           ;mcc_generated_files/memory.c: 219:     NVMADRL = (bAdd & 0xFF);
 16198     0979  0140               	movlb	0	; select bank0
 16199     097A  0820               	movf	DATAEE_ReadByte@bAdd,w
 16200     097B  0150               	movlb	16	; select bank16
 16201     097C  009A               	movwf	26	;volatile
 16202                           
 16203                           ;mcc_generated_files/memory.c: 220:     NVMCON1bits.NVMREGS = 1;
 16204     097D  171E               	bsf	30,6	;volsfr
 16205                           
 16206                           ;mcc_generated_files/memory.c: 221:     NVMCON1bits.RD = 1;
 16207     097E  141E               	bsf	30,0	;volsfr
 16208                           
 16209                           ;mcc_generated_files/memory.c: 222:     __nop();
 16210     097F  0000               	nop
 16211                           
 16212                           ;mcc_generated_files/memory.c: 223:     __nop();
 16213     0980  0000               	nop
 16214                           
 16215                           ;mcc_generated_files/memory.c: 225:     return (NVMDATL);
 16216     0981  0150               	movlb	16	; select bank16
 16217     0982  081C               	movf	28,w	;volatile
 16218     0983  0008               	return
 16219     0984                     __end_of_DATAEE_ReadByte:
 16220                           
 16221                           	psect	intentry
 16222     0004                     __pintentry:	
 16223 ;; *************** function _INTERRUPT_InterruptManager *****************
 16224 ;; Defined at:
 16225 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 16226 ;; Parameters:    Size  Location     Type
 16227 ;;		None
 16228 ;; Auto vars:     Size  Location     Type
 16229 ;;		None
 16230 ;; Return value:  Size  Location     Type
 16231 ;;                  1    wreg      void 
 16232 ;; Registers used:
 16233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16234 ;; Tracked objects:
 16235 ;;		On entry : 0/0
 16236 ;;		On exit  : 0/0
 16237 ;;		Unchanged: 0/0
 16238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16239 ;;      Params:         0       0       0       0       0       0       0       0
 16240 ;;      Locals:         0       0       0       0       0       0       0       0
 16241 ;;      Temps:          0       0       0       0       0       0       0       0
 16242 ;;      Totals:         0       0       0       0       0       0       0       0
 16243 ;;Total ram usage:        0 bytes
 16244 ;; Hardware stack levels used: 1
 16245 ;; Hardware stack levels required when called: 4
 16246 ;; This function calls:
 16247 ;;		NULL
 16248 ;;		_EUSART1_Receive_ISR
 16249 ;;		_TMR0_ISR
 16250 ;; This function is called by:
 16251 ;;		Interrupt level 1
 16252 ;; This function uses a non-reentrant model
 16253 ;;
 16254                           
 16255     0004                     _INTERRUPT_InterruptManager:
 16256                           
 16257                           ;incstack = 0
 16258     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 16259                           
 16260                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16261     0005  3180               	pagesel	$
 16262                           
 16263                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.TMR0IE == 1 && PIR0bits.TM
      +                          R0IF == 1)
 16264     0006  014E               	movlb	14	; select bank14
 16265     0007  1A96               	btfsc	22,5	;volatile
 16266     0008  1E8C               	btfss	12,5	;volatile
 16267     0009  280E               	goto	i1l430
 16268                           
 16269                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 16270     000A  3189  2137  3180   	fcall	_TMR0_ISR
 16271                           
 16272                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 16273     000D  2819               	goto	i1l436
 16274     000E                     i1l430:	
 16275                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 16276                           
 16277     000E  1B0B               	btfsc	11,6	;volatile
 16278                           
 16279                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1)
 16280     000F  1E99               	btfss	25,5	;volatile
 16281     0010  2819               	goto	i1l436
 16282     0011  1E8F               	btfss	15,5	;volatile
 16283     0012  2819               	goto	i1l436
 16284                           
 16285                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART1_RxDefaultInterruptHandler();
 16286     0013  0141               	movlb	1	; select bank1
 16287     0014  086F               	movf	(_EUSART1_RxDefaultInterruptHandler+1)^(0+128),w
 16288     0015  008A               	movwf	10
 16289     0016  086E               	movf	_EUSART1_RxDefaultInterruptHandler^(0+128),w
 16290     0017  000A               	callw
 16291     0018  3180               	pagesel	$
 16292     0019                     i1l436:	
 16293                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
 16294                           
 16295                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 16296                           
 16297     0019  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 16298     001A  0009               	retfie
 16299     001B                     __end_of_INTERRUPT_InterruptManager:
 16300                           
 16301                           	psect	text78
 16302     0937                     __ptext78:	
 16303 ;; *************** function _TMR0_ISR *****************
 16304 ;; Defined at:
 16305 ;;		line 124 in file "mcc_generated_files/tmr0.c"
 16306 ;; Parameters:    Size  Location     Type
 16307 ;;		None
 16308 ;; Auto vars:     Size  Location     Type
 16309 ;;		None
 16310 ;; Return value:  Size  Location     Type
 16311 ;;                  1    wreg      void 
 16312 ;; Registers used:
 16313 ;;		wreg, status,2, status,0, pclath, cstack
 16314 ;; Tracked objects:
 16315 ;;		On entry : 3F/E
 16316 ;;		On exit  : 0/0
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16319 ;;      Params:         0       0       0       0       0       0       0       0
 16320 ;;      Locals:         0       0       0       0       0       0       0       0
 16321 ;;      Temps:          0       0       0       0       0       0       0       0
 16322 ;;      Totals:         0       0       0       0       0       0       0       0
 16323 ;;Total ram usage:        0 bytes
 16324 ;; Hardware stack levels used: 1
 16325 ;; Hardware stack levels required when called: 2
 16326 ;; This function calls:
 16327 ;;		NULL
 16328 ;;		_TMR0_DefaultInterruptHandler
 16329 ;; This function is called by:
 16330 ;;		_INTERRUPT_InterruptManager
 16331 ;; This function uses a non-reentrant model
 16332 ;;
 16333                           
 16334     0937                     _TMR0_ISR:	
 16335                           ;psect for function _TMR0_ISR
 16336                           
 16337                           
 16338                           ;mcc_generated_files/tmr0.c: 127:     PIR0bits.TMR0IF = 0;
 16339                           
 16340                           ;incstack = 0
 16341                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 16342     0937  128C               	bcf	12,5	;volatile
 16343                           
 16344                           ;mcc_generated_files/tmr0.c: 128:     if(TMR0_InterruptHandler)
 16345     0938  0141               	movlb	1	; select bank1
 16346     0939  0866               	movf	_TMR0_InterruptHandler^(0+128),w
 16347     093A  0467               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 16348     093B  1903               	btfsc	3,2
 16349     093C  0008               	return
 16350                           
 16351                           ;mcc_generated_files/tmr0.c: 129:     {;mcc_generated_files/tmr0.c: 130:         TMR0_In
      +                          terruptHandler();
 16352     093D  0867               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 16353     093E  008A               	movwf	10
 16354     093F  0866               	movf	_TMR0_InterruptHandler^(0+128),w
 16355     0940  000A               	callw
 16356     0941  3189               	pagesel	$
 16357     0942  0008               	return
 16358     0943                     __end_of_TMR0_ISR:
 16359                           
 16360                           	psect	text79
 16361     094F                     __ptext79:	
 16362 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 16363 ;; Defined at:
 16364 ;;		line 141 in file "mcc_generated_files/tmr0.c"
 16365 ;; Parameters:    Size  Location     Type
 16366 ;;		None
 16367 ;; Auto vars:     Size  Location     Type
 16368 ;;		None
 16369 ;; Return value:  Size  Location     Type
 16370 ;;                  1    wreg      void 
 16371 ;; Registers used:
 16372 ;;		wreg, status,2, status,0, pclath, cstack
 16373 ;; Tracked objects:
 16374 ;;		On entry : 3F/1
 16375 ;;		On exit  : 3F/E
 16376 ;;		Unchanged: 0/0
 16377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16378 ;;      Params:         0       0       0       0       0       0       0       0
 16379 ;;      Locals:         0       0       0       0       0       0       0       0
 16380 ;;      Temps:          0       0       0       0       0       0       0       0
 16381 ;;      Totals:         0       0       0       0       0       0       0       0
 16382 ;;Total ram usage:        0 bytes
 16383 ;; Hardware stack levels used: 1
 16384 ;; Hardware stack levels required when called: 1
 16385 ;; This function calls:
 16386 ;;		i1_TMR0_StopTimer
 16387 ;;		i1_UART_ClearBuffer
 16388 ;; This function is called by:
 16389 ;;		_TMR0_Initialize
 16390 ;;		_TMR0_ISR
 16391 ;; This function uses a non-reentrant model
 16392 ;;
 16393                           
 16394     094F                     _TMR0_DefaultInterruptHandler:	
 16395                           ;psect for function _TMR0_DefaultInterruptHandler
 16396                           
 16397                           
 16398                           ;mcc_generated_files/tmr0.c: 142:     if(uart_expire_time){
 16399                           
 16400                           ;incstack = 0
 16401                           ; Regs used in _TMR0_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 16402     094F  0874               	movf	_uart_expire_time,w	;volatile
 16403     0950  1903               	btfsc	3,2
 16404     0951  2957               	goto	i1l4190
 16405                           
 16406                           ;mcc_generated_files/tmr0.c: 143:         UART_ClearBuffer();
 16407     0952  3188  20A2  3189   	fcall	i1_UART_ClearBuffer
 16408                           
 16409                           ;mcc_generated_files/tmr0.c: 144:         TMR0_StopTimer();
 16410     0955  3188  2098         	fcall	i1_TMR0_StopTimer
 16411     0957                     i1l4190:
 16412                           
 16413                           ;mcc_generated_files/tmr0.c: 146:     uart_expire_time = 1;
 16414     0957  3001               	movlw	1
 16415     0958  00F4               	movwf	_uart_expire_time	;volatile
 16416                           
 16417                           ;mcc_generated_files/tmr0.c: 148:     PIR0bits.TMR0IF = 0;
 16418     0959  014E               	movlb	14	; select bank14
 16419     095A  128C               	bcf	12,5	;volatile
 16420     095B  0008               	return
 16421     095C                     __end_of_TMR0_DefaultInterruptHandler:
 16422                           
 16423                           	psect	text80
 16424     08A2                     __ptext80:	
 16425 ;; *************** function i1_UART_ClearBuffer *****************
 16426 ;; Defined at:
 16427 ;;		line 313 in file "mcc_generated_files/eusart1.c"
 16428 ;; Parameters:    Size  Location     Type
 16429 ;;		None
 16430 ;; Auto vars:     Size  Location     Type
 16431 ;;		None
 16432 ;; Return value:  Size  Location     Type
 16433 ;;                  1    wreg      void 
 16434 ;; Registers used:
 16435 ;;		status,2
 16436 ;; Tracked objects:
 16437 ;;		On entry : 3F/1
 16438 ;;		On exit  : 3F/1
 16439 ;;		Unchanged: 3F/0
 16440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16441 ;;      Params:         0       0       0       0       0       0       0       0
 16442 ;;      Locals:         0       0       0       0       0       0       0       0
 16443 ;;      Temps:          0       0       0       0       0       0       0       0
 16444 ;;      Totals:         0       0       0       0       0       0       0       0
 16445 ;;Total ram usage:        0 bytes
 16446 ;; Hardware stack levels used: 1
 16447 ;; This function calls:
 16448 ;;		Nothing
 16449 ;; This function is called by:
 16450 ;;		_TMR0_DefaultInterruptHandler
 16451 ;; This function uses a non-reentrant model
 16452 ;;
 16453                           
 16454     08A2                     i1_UART_ClearBuffer:	
 16455                           ;psect for function i1_UART_ClearBuffer
 16456                           
 16457                           
 16458                           ;mcc_generated_files/eusart1.c: 314:     eusart1RxHead = 0;
 16459                           
 16460                           ;incstack = 0
 16461                           ; Regs used in i1_UART_ClearBuffer: [status,2]
 16462     08A2  01F3               	clrf	_eusart1RxHead	;volatile
 16463                           
 16464                           ;mcc_generated_files/eusart1.c: 315:     eusart1RxTail = 0;
 16465     08A3  01F2               	clrf	_eusart1RxTail	;volatile
 16466                           
 16467                           ;mcc_generated_files/eusart1.c: 316:     eusart1RxCount = 0;
 16468     08A4  01F1               	clrf	_eusart1RxCount	;volatile
 16469     08A5  0008               	return
 16470     08A6                     __end_ofi1_UART_ClearBuffer:
 16471                           
 16472                           	psect	text81
 16473     0898                     __ptext81:	
 16474 ;; *************** function i1_TMR0_StopTimer *****************
 16475 ;; Defined at:
 16476 ;;		line 96 in file "mcc_generated_files/tmr0.c"
 16477 ;; Parameters:    Size  Location     Type
 16478 ;;		None
 16479 ;; Auto vars:     Size  Location     Type
 16480 ;;		None
 16481 ;; Return value:  Size  Location     Type
 16482 ;;                  1    wreg      void 
 16483 ;; Registers used:
 16484 ;;		None
 16485 ;; Tracked objects:
 16486 ;;		On entry : 3F/1
 16487 ;;		On exit  : 3F/B
 16488 ;;		Unchanged: 0/0
 16489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16490 ;;      Params:         0       0       0       0       0       0       0       0
 16491 ;;      Locals:         0       0       0       0       0       0       0       0
 16492 ;;      Temps:          0       0       0       0       0       0       0       0
 16493 ;;      Totals:         0       0       0       0       0       0       0       0
 16494 ;;Total ram usage:        0 bytes
 16495 ;; Hardware stack levels used: 1
 16496 ;; This function calls:
 16497 ;;		Nothing
 16498 ;; This function is called by:
 16499 ;;		_TMR0_DefaultInterruptHandler
 16500 ;; This function uses a non-reentrant model
 16501 ;;
 16502                           
 16503     0898                     i1_TMR0_StopTimer:	
 16504                           ;psect for function i1_TMR0_StopTimer
 16505                           
 16506                           
 16507                           ;mcc_generated_files/tmr0.c: 99:     T0CON0bits.T0EN = 0;
 16508                           
 16509                           ;incstack = 0
 16510                           ; Regs used in i1_TMR0_StopTimer: []
 16511     0898  014B               	movlb	11	; select bank11
 16512     0899  139E               	bcf	30,7	;volatile
 16513     089A  0008               	return
 16514     089B                     __end_ofi1_TMR0_StopTimer:
 16515                           
 16516                           	psect	text82
 16517     0BF9                     __ptext82:	
 16518 ;; *************** function _EUSART1_Receive_ISR *****************
 16519 ;; Defined at:
 16520 ;;		line 234 in file "mcc_generated_files/eusart1.c"
 16521 ;; Parameters:    Size  Location     Type
 16522 ;;		None
 16523 ;; Auto vars:     Size  Location     Type
 16524 ;;		None
 16525 ;; Return value:  Size  Location     Type
 16526 ;;                  1    wreg      void 
 16527 ;; Registers used:
 16528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16529 ;; Tracked objects:
 16530 ;;		On entry : 3F/1
 16531 ;;		On exit  : 0/0
 16532 ;;		Unchanged: 0/0
 16533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16534 ;;      Params:         0       0       0       0       0       0       0       0
 16535 ;;      Locals:         0       0       0       0       0       0       0       0
 16536 ;;      Temps:          0       0       0       0       0       0       0       0
 16537 ;;      Totals:         0       0       0       0       0       0       0       0
 16538 ;;Total ram usage:        0 bytes
 16539 ;; Hardware stack levels used: 1
 16540 ;; Hardware stack levels required when called: 3
 16541 ;; This function calls:
 16542 ;;		NULL
 16543 ;;		_EUSART1_DefaultErrorHandler
 16544 ;;		_EUSART1_DefaultFramingErrorHandler
 16545 ;;		_EUSART1_DefaultOverrunErrorHandler
 16546 ;;		_EUSART1_RxDataHandler
 16547 ;; This function is called by:
 16548 ;;		_EUSART1_Initialize
 16549 ;;		_INTERRUPT_InterruptManager
 16550 ;; This function uses a non-reentrant model
 16551 ;;
 16552                           
 16553     0BF9                     _EUSART1_Receive_ISR:	
 16554                           ;psect for function _EUSART1_Receive_ISR
 16555                           
 16556                           
 16557                           ;mcc_generated_files/eusart1.c: 237:     eusart1RxStatusBuffer[eusart1RxHead].status = 0
      +                          ;
 16558                           
 16559                           ;incstack = 0
 16560                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16561     0BF9  0873               	movf	_eusart1RxHead,w	;volatile
 16562     0BFA  3ED1               	addlw	(low (_eusart1RxStatusBuffer| 0))& (0+255)
 16563     0BFB  0086               	movwf	6
 16564     0BFC  0187               	clrf	7
 16565     0BFD  0181               	clrf	1
 16566                           
 16567                           ;mcc_generated_files/eusart1.c: 239:     if(RC1STAbits.FERR){
 16568     0BFE  0142               	movlb	2	; select bank2
 16569     0BFF  1D1D               	btfss	29,2	;volatile
 16570     0C00  2C0C               	goto	i1l4218
 16571                           
 16572                           ;mcc_generated_files/eusart1.c: 240:         eusart1RxStatusBuffer[eusart1RxHead].ferr =
      +                           1;
 16573     0C01  0873               	movf	_eusart1RxHead,w	;volatile
 16574     0C02  3ED1               	addlw	(low (_eusart1RxStatusBuffer| 0))& (0+255)
 16575     0C03  0086               	movwf	6
 16576     0C04  0187               	clrf	7
 16577     0C05  1481               	bsf	1,1
 16578                           
 16579                           ;mcc_generated_files/eusart1.c: 241:         EUSART1_FramingErrorHandler();
 16580     0C06  0141               	movlb	1	; select bank1
 16581     0C07  086D               	movf	(_EUSART1_FramingErrorHandler+1)^(0+128),w
 16582     0C08  008A               	movwf	10
 16583     0C09  086C               	movf	_EUSART1_FramingErrorHandler^(0+128),w
 16584     0C0A  000A               	callw
 16585     0C0B  318B               	pagesel	$
 16586     0C0C                     i1l4218:
 16587                           
 16588                           ;mcc_generated_files/eusart1.c: 244:     if(RC1STAbits.OERR){
 16589     0C0C  0142               	movlb	2	; select bank2
 16590     0C0D  1C9D               	btfss	29,1	;volatile
 16591     0C0E  2C1A               	goto	i1l4224
 16592                           
 16593                           ;mcc_generated_files/eusart1.c: 245:         eusart1RxStatusBuffer[eusart1RxHead].oerr =
      +                           1;
 16594     0C0F  0873               	movf	_eusart1RxHead,w	;volatile
 16595     0C10  3ED1               	addlw	(low (_eusart1RxStatusBuffer| 0))& (0+255)
 16596     0C11  0086               	movwf	6
 16597     0C12  0187               	clrf	7
 16598     0C13  1501               	bsf	1,2
 16599                           
 16600                           ;mcc_generated_files/eusart1.c: 246:         EUSART1_OverrunErrorHandler();
 16601     0C14  0141               	movlb	1	; select bank1
 16602     0C15  086B               	movf	(_EUSART1_OverrunErrorHandler+1)^(0+128),w
 16603     0C16  008A               	movwf	10
 16604     0C17  086A               	movf	_EUSART1_OverrunErrorHandler^(0+128),w
 16605     0C18  000A               	callw
 16606     0C19  318B               	pagesel	$
 16607     0C1A                     i1l4224:
 16608                           
 16609                           ;mcc_generated_files/eusart1.c: 249:     if(eusart1RxStatusBuffer[eusart1RxHead].status)
      +                          {
 16610     0C1A  0873               	movf	_eusart1RxHead,w	;volatile
 16611     0C1B  3ED1               	addlw	(low (_eusart1RxStatusBuffer| 0))& (0+255)
 16612     0C1C  0086               	movwf	6
 16613     0C1D  0187               	clrf	7
 16614     0C1E  0801               	movf	1,w
 16615     0C1F  1903               	btfsc	3,2
 16616     0C20  2C28               	goto	i1l4228
 16617                           
 16618                           ;mcc_generated_files/eusart1.c: 250:         EUSART1_ErrorHandler();
 16619     0C21  0141               	movlb	1	; select bank1
 16620     0C22  0869               	movf	(_EUSART1_ErrorHandler+1)^(0+128),w
 16621     0C23  008A               	movwf	10
 16622     0C24  0868               	movf	_EUSART1_ErrorHandler^(0+128),w
 16623     0C25  000A               	callw
 16624     0C26  318B               	pagesel	$
 16625                           
 16626                           ;mcc_generated_files/eusart1.c: 251:     } else {
 16627     0C27  0008               	return
 16628     0C28                     i1l4228:
 16629                           
 16630                           ;mcc_generated_files/eusart1.c: 252:         EUSART1_RxDataHandler();
 16631     0C28  318C  245E         	fcall	_EUSART1_RxDataHandler
 16632     0C2A  0008               	return
 16633     0C2B                     __end_of_EUSART1_Receive_ISR:
 16634                           
 16635                           	psect	text83
 16636     089E                     __ptext83:	
 16637 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
 16638 ;; Defined at:
 16639 ;;		line 284 in file "mcc_generated_files/eusart1.c"
 16640 ;; Parameters:    Size  Location     Type
 16641 ;;		None
 16642 ;; Auto vars:     Size  Location     Type
 16643 ;;		None
 16644 ;; Return value:  Size  Location     Type
 16645 ;;                  1    wreg      void 
 16646 ;; Registers used:
 16647 ;;		None
 16648 ;; Tracked objects:
 16649 ;;		On entry : 3F/1
 16650 ;;		On exit  : 3F/2
 16651 ;;		Unchanged: 0/0
 16652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16653 ;;      Params:         0       0       0       0       0       0       0       0
 16654 ;;      Locals:         0       0       0       0       0       0       0       0
 16655 ;;      Temps:          0       0       0       0       0       0       0       0
 16656 ;;      Totals:         0       0       0       0       0       0       0       0
 16657 ;;Total ram usage:        0 bytes
 16658 ;; Hardware stack levels used: 1
 16659 ;; This function calls:
 16660 ;;		Nothing
 16661 ;; This function is called by:
 16662 ;;		_EUSART1_Initialize
 16663 ;;		_EUSART1_Receive_ISR
 16664 ;; This function uses a non-reentrant model
 16665 ;;
 16666                           
 16667     089E                     _EUSART1_DefaultOverrunErrorHandler:	
 16668                           ;psect for function _EUSART1_DefaultOverrunErrorHandler
 16669                           
 16670                           
 16671                           ;mcc_generated_files/eusart1.c: 287:     RC1STAbits.CREN = 0;
 16672                           
 16673                           ;incstack = 0
 16674                           ; Regs used in _EUSART1_DefaultOverrunErrorHandler: []
 16675     089E  0142               	movlb	2	; select bank2
 16676     089F  121D               	bcf	29,4	;volatile
 16677                           
 16678                           ;mcc_generated_files/eusart1.c: 288:     RC1STAbits.CREN = 1;
 16679     08A0  161D               	bsf	29,4	;volatile
 16680     08A1  0008               	return
 16681     08A2                     __end_of_EUSART1_DefaultOverrunErrorHandler:
 16682                           
 16683                           	psect	text84
 16684     088C                     __ptext84:	
 16685 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
 16686 ;; Defined at:
 16687 ;;		line 282 in file "mcc_generated_files/eusart1.c"
 16688 ;; Parameters:    Size  Location     Type
 16689 ;;		None
 16690 ;; Auto vars:     Size  Location     Type
 16691 ;;		None
 16692 ;; Return value:  Size  Location     Type
 16693 ;;                  1    wreg      void 
 16694 ;; Registers used:
 16695 ;;		None
 16696 ;; Tracked objects:
 16697 ;;		On entry : 3F/1
 16698 ;;		On exit  : 3F/1
 16699 ;;		Unchanged: 3F/0
 16700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16701 ;;      Params:         0       0       0       0       0       0       0       0
 16702 ;;      Locals:         0       0       0       0       0       0       0       0
 16703 ;;      Temps:          0       0       0       0       0       0       0       0
 16704 ;;      Totals:         0       0       0       0       0       0       0       0
 16705 ;;Total ram usage:        0 bytes
 16706 ;; Hardware stack levels used: 1
 16707 ;; This function calls:
 16708 ;;		Nothing
 16709 ;; This function is called by:
 16710 ;;		_EUSART1_Initialize
 16711 ;;		_EUSART1_Receive_ISR
 16712 ;; This function uses a non-reentrant model
 16713 ;;
 16714                           
 16715     088C                     _EUSART1_DefaultFramingErrorHandler:	
 16716                           ;psect for function _EUSART1_DefaultFramingErrorHandler
 16717                           
 16718                           
 16719                           ;incstack = 0
 16720                           ; Regs used in _EUSART1_DefaultFramingErrorHandler: []
 16721     088C  0008               	return
 16722     088D                     __end_of_EUSART1_DefaultFramingErrorHandler:
 16723                           
 16724                           	psect	text85
 16725     0895                     __ptext85:	
 16726 ;; *************** function _EUSART1_DefaultErrorHandler *****************
 16727 ;; Defined at:
 16728 ;;		line 292 in file "mcc_generated_files/eusart1.c"
 16729 ;; Parameters:    Size  Location     Type
 16730 ;;		None
 16731 ;; Auto vars:     Size  Location     Type
 16732 ;;		None
 16733 ;; Return value:  Size  Location     Type
 16734 ;;                  1    wreg      void 
 16735 ;; Registers used:
 16736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16737 ;; Tracked objects:
 16738 ;;		On entry : 3F/1
 16739 ;;		On exit  : 34/0
 16740 ;;		Unchanged: 0/0
 16741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16742 ;;      Params:         0       0       0       0       0       0       0       0
 16743 ;;      Locals:         0       0       0       0       0       0       0       0
 16744 ;;      Temps:          0       0       0       0       0       0       0       0
 16745 ;;      Totals:         0       0       0       0       0       0       0       0
 16746 ;;Total ram usage:        0 bytes
 16747 ;; Hardware stack levels used: 1
 16748 ;; Hardware stack levels required when called: 2
 16749 ;; This function calls:
 16750 ;;		_EUSART1_RxDataHandler
 16751 ;; This function is called by:
 16752 ;;		_EUSART1_Initialize
 16753 ;;		_EUSART1_Receive_ISR
 16754 ;; This function uses a non-reentrant model
 16755 ;;
 16756                           
 16757     0895                     _EUSART1_DefaultErrorHandler:	
 16758                           ;psect for function _EUSART1_DefaultErrorHandler
 16759                           
 16760                           
 16761                           ;mcc_generated_files/eusart1.c: 293:     EUSART1_RxDataHandler();
 16762                           
 16763                           ;incstack = 0
 16764                           ; Regs used in _EUSART1_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16765     0895  318C  245E         	fcall	_EUSART1_RxDataHandler
 16766     0897  0008               	return
 16767     0898                     __end_of_EUSART1_DefaultErrorHandler:
 16768                           
 16769                           	psect	text86
 16770     0C5E                     __ptext86:	
 16771 ;; *************** function _EUSART1_RxDataHandler *****************
 16772 ;; Defined at:
 16773 ;;		line 258 in file "mcc_generated_files/eusart1.c"
 16774 ;; Parameters:    Size  Location     Type
 16775 ;;		None
 16776 ;; Auto vars:     Size  Location     Type
 16777 ;;  t               2    3[COMMON] int 
 16778 ;; Return value:  Size  Location     Type
 16779 ;;                  1    wreg      void 
 16780 ;; Registers used:
 16781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16782 ;; Tracked objects:
 16783 ;;		On entry : 0/2
 16784 ;;		On exit  : 34/0
 16785 ;;		Unchanged: 0/0
 16786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16787 ;;      Params:         0       0       0       0       0       0       0       0
 16788 ;;      Locals:         2       0       0       0       0       0       0       0
 16789 ;;      Temps:          2       0       0       0       0       0       0       0
 16790 ;;      Totals:         4       0       0       0       0       0       0       0
 16791 ;;Total ram usage:        4 bytes
 16792 ;; Hardware stack levels used: 1
 16793 ;; Hardware stack levels required when called: 1
 16794 ;; This function calls:
 16795 ;;		_TMR0_StartTimer
 16796 ;;		_TMR0_WriteTimer
 16797 ;; This function is called by:
 16798 ;;		_EUSART1_Receive_ISR
 16799 ;;		_EUSART1_DefaultErrorHandler
 16800 ;; This function uses a non-reentrant model
 16801 ;;
 16802                           
 16803     0C5E                     _EUSART1_RxDataHandler:	
 16804                           ;psect for function _EUSART1_RxDataHandler
 16805                           
 16806                           
 16807                           ;mcc_generated_files/eusart1.c: 260:     int t;;mcc_generated_files/eusart1.c: 261:     
      +                          eusart1RxBuffer[eusart1RxHead] = RC1REG;
 16808                           
 16809                           ;incstack = 0
 16810                           ; Regs used in _EUSART1_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16811     0C5E  0873               	movf	_eusart1RxHead,w
 16812     0C5F  3ED9               	addlw	(low (_eusart1RxBuffer| 0))& (0+255)
 16813     0C60  0086               	movwf	6
 16814     0C61  0187               	clrf	7
 16815     0C62  0142               	movlb	2	; select bank2
 16816     0C63  0819               	movf	25,w	;volatile
 16817     0C64  0081               	movwf	1
 16818                           
 16819                           ;mcc_generated_files/eusart1.c: 262:     eusart1RxCount++;
 16820     0C65  3001               	movlw	1
 16821     0C66  00F6               	movwf	??_EUSART1_RxDataHandler
 16822     0C67  0876               	movf	??_EUSART1_RxDataHandler,w
 16823     0C68  07F1               	addwf	_eusart1RxCount,f	;volatile
 16824                           
 16825                           ;mcc_generated_files/eusart1.c: 264:     if(eusart1RxCount == 8)
 16826     0C69  3008               	movlw	8
 16827     0C6A  0671               	xorwf	_eusart1RxCount,w	;volatile
 16828     0C6B  1D03               	btfss	3,2
 16829     0C6C  2C74               	goto	i1l3760
 16830                           
 16831                           ;mcc_generated_files/eusart1.c: 265:     {;mcc_generated_files/eusart1.c: 266:         e
      +                          usart1PacketFinish++;
 16832     0C6D  3001               	movlw	1
 16833     0C6E  00F6               	movwf	??_EUSART1_RxDataHandler
 16834     0C6F  0876               	movf	??_EUSART1_RxDataHandler,w
 16835     0C70  0141               	movlb	1	; select bank1
 16836     0C71  07E5               	addwf	_eusart1PacketFinish^(0+128),f	;volatile
 16837                           
 16838                           ;mcc_generated_files/eusart1.c: 267:         eusart1RxCount = 0;
 16839     0C72  01F1               	clrf	_eusart1RxCount	;volatile
 16840                           
 16841                           ;mcc_generated_files/eusart1.c: 268:     }else if(eusart1RxCount == 1){
 16842     0C73  2C7E               	goto	i1l3766
 16843     0C74                     i1l3760:
 16844     0C74  0371               	decf	_eusart1RxCount,w	;volatile
 16845     0C75  1D03               	btfss	3,2
 16846     0C76  2C7E               	goto	i1l3766
 16847                           
 16848                           ;mcc_generated_files/eusart1.c: 269:         TMR0_WriteTimer(0);
 16849     0C77  3000               	movlw	0
 16850     0C78  3188  20B2  318C   	fcall	_TMR0_WriteTimer
 16851                           
 16852                           ;mcc_generated_files/eusart1.c: 270:         TMR0_StartTimer();
 16853     0C7B  3188  208F  318C   	fcall	_TMR0_StartTimer
 16854     0C7E                     i1l3766:
 16855                           
 16856                           ;mcc_generated_files/eusart1.c: 273:     uart_expire_time = 0;
 16857     0C7E  01F4               	clrf	_uart_expire_time
 16858     0C7F  01F5               	clrf	_uart_expire_time+1
 16859                           
 16860                           ;mcc_generated_files/eusart1.c: 274:     t=eusart1RxHead;
 16861     0C80  0873               	movf	_eusart1RxHead,w	;volatile
 16862     0C81  00F6               	movwf	??_EUSART1_RxDataHandler
 16863     0C82  01F7               	clrf	??_EUSART1_RxDataHandler+1
 16864     0C83  0876               	movf	??_EUSART1_RxDataHandler,w
 16865     0C84  00F8               	movwf	EUSART1_RxDataHandler@t
 16866     0C85  0877               	movf	??_EUSART1_RxDataHandler+1,w
 16867     0C86  00F9               	movwf	EUSART1_RxDataHandler@t+1
 16868                           
 16869                           ;mcc_generated_files/eusart1.c: 275:     eusart1RxHead = (eusart1RxHead + 1)% 8;
 16870     0C87  0873               	movf	_eusart1RxHead,w	;volatile
 16871     0C88  3E01               	addlw	1
 16872     0C89  3907               	andlw	7
 16873     0C8A  00F3               	movwf	_eusart1RxHead	;volatile
 16874                           
 16875                           ;mcc_generated_files/eusart1.c: 276:     if(eusart1RxHead == eusart1RxTail)
 16876     0C8B  0873               	movf	_eusart1RxHead,w	;volatile
 16877     0C8C  0672               	xorwf	_eusart1RxTail,w	;volatile
 16878     0C8D  1D03               	skipz
 16879     0C8E  0008               	return
 16880                           
 16881                           ;mcc_generated_files/eusart1.c: 277:     {;mcc_generated_files/eusart1.c: 278:         e
      +                          usart1RxHead = t;
 16882     0C8F  0878               	movf	EUSART1_RxDataHandler@t,w
 16883     0C90  00F3               	movwf	_eusart1RxHead	;volatile
 16884     0C91  0008               	return
 16885     0C92                     __end_of_EUSART1_RxDataHandler:
 16886                           
 16887                           	psect	text87
 16888     08B2                     __ptext87:	
 16889 ;; *************** function _TMR0_WriteTimer *****************
 16890 ;; Defined at:
 16891 ;;		line 112 in file "mcc_generated_files/tmr0.c"
 16892 ;; Parameters:    Size  Location     Type
 16893 ;;  timerVal        1    wreg     unsigned char 
 16894 ;; Auto vars:     Size  Location     Type
 16895 ;;  timerVal        1    0[COMMON] unsigned char 
 16896 ;; Return value:  Size  Location     Type
 16897 ;;                  1    wreg      void 
 16898 ;; Registers used:
 16899 ;;		wreg
 16900 ;; Tracked objects:
 16901 ;;		On entry : 3F/2
 16902 ;;		On exit  : 3F/B
 16903 ;;		Unchanged: 0/0
 16904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16905 ;;      Params:         0       0       0       0       0       0       0       0
 16906 ;;      Locals:         1       0       0       0       0       0       0       0
 16907 ;;      Temps:          0       0       0       0       0       0       0       0
 16908 ;;      Totals:         1       0       0       0       0       0       0       0
 16909 ;;Total ram usage:        1 bytes
 16910 ;; Hardware stack levels used: 1
 16911 ;; This function calls:
 16912 ;;		Nothing
 16913 ;; This function is called by:
 16914 ;;		_EUSART1_RxDataHandler
 16915 ;; This function uses a non-reentrant model
 16916 ;;
 16917                           
 16918     08B2                     _TMR0_WriteTimer:	
 16919                           ;psect for function _TMR0_WriteTimer
 16920                           
 16921                           
 16922                           ;incstack = 0
 16923                           ; Regs used in _TMR0_WriteTimer: [wreg]
 16924                           ;TMR0_WriteTimer@timerVal stored from wreg
 16925     08B2  00F5               	movwf	TMR0_WriteTimer@timerVal
 16926                           
 16927                           ;mcc_generated_files/tmr0.c: 112: void TMR0_WriteTimer(uint8_t timerVal);mcc_generated_f
      +                          iles/tmr0.c: 113: {;mcc_generated_files/tmr0.c: 115:     TMR0L = timerVal;
 16928     08B3  0875               	movf	TMR0_WriteTimer@timerVal,w
 16929     08B4  014B               	movlb	11	; select bank11
 16930     08B5  009C               	movwf	28	;volatile
 16931     08B6  0008               	return
 16932     08B7                     __end_of_TMR0_WriteTimer:
 16933                           
 16934                           	psect	text88
 16935     088F                     __ptext88:	
 16936 ;; *************** function _TMR0_StartTimer *****************
 16937 ;; Defined at:
 16938 ;;		line 90 in file "mcc_generated_files/tmr0.c"
 16939 ;; Parameters:    Size  Location     Type
 16940 ;;		None
 16941 ;; Auto vars:     Size  Location     Type
 16942 ;;		None
 16943 ;; Return value:  Size  Location     Type
 16944 ;;                  1    wreg      void 
 16945 ;; Registers used:
 16946 ;;		None
 16947 ;; Tracked objects:
 16948 ;;		On entry : 3F/B
 16949 ;;		On exit  : 3F/B
 16950 ;;		Unchanged: 0/0
 16951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16952 ;;      Params:         0       0       0       0       0       0       0       0
 16953 ;;      Locals:         0       0       0       0       0       0       0       0
 16954 ;;      Temps:          0       0       0       0       0       0       0       0
 16955 ;;      Totals:         0       0       0       0       0       0       0       0
 16956 ;;Total ram usage:        0 bytes
 16957 ;; Hardware stack levels used: 1
 16958 ;; This function calls:
 16959 ;;		Nothing
 16960 ;; This function is called by:
 16961 ;;		_EUSART1_RxDataHandler
 16962 ;; This function uses a non-reentrant model
 16963 ;;
 16964                           
 16965     088F                     _TMR0_StartTimer:	
 16966                           ;psect for function _TMR0_StartTimer
 16967                           
 16968                           
 16969                           ;mcc_generated_files/tmr0.c: 93:     T0CON0bits.T0EN = 1;
 16970                           
 16971                           ;incstack = 0
 16972                           ; Regs used in _TMR0_StartTimer: []
 16973     088F  179E               	bsf	30,7	;volatile
 16974     0890  0008               	return
 16975     0891                     __end_of_TMR0_StartTimer:
 16976     007E                     btemp	set	126	;btemp
 16977     007E                     int$flags	set	126
 16978     007E                     wtemp0	set	126
 16979                           
 16980                           	psect	idloc
 16981                           
 16982                           ;Config register IDLOC0 @ 0x8000
 16983                           ;	unspecified, using default values
 16984     8000                     	org	32768
 16985     8000  3FFF               	dw	16383
 16986                           
 16987                           ;Config register IDLOC1 @ 0x8001
 16988                           ;	unspecified, using default values
 16989     8001                     	org	32769
 16990     8001  3FFF               	dw	16383
 16991                           
 16992                           ;Config register IDLOC2 @ 0x8002
 16993                           ;	unspecified, using default values
 16994     8002                     	org	32770
 16995     8002  3FFF               	dw	16383
 16996                           
 16997                           ;Config register IDLOC3 @ 0x8003
 16998                           ;	unspecified, using default values
 16999     8003                     	org	32771
 17000     8003  3FFF               	dw	16383
 17001                           
 17002                           	psect	config
 17003                           
 17004                           ;Config register CONFIG1 @ 0x8007
 17005                           ;	External Oscillator mode selection bits
 17006                           ;	FEXTOSC = OFF, Oscillator not enabled
 17007                           ;	Power-up default value for COSC bits
 17008                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
 17009                           ;	Clock Out Enable bit
 17010                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
 17011                           ;	Clock Switch Enable bit
 17012                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 17013                           ;	Fail-Safe Clock Monitor Enable bit
 17014                           ;	FCMEN = ON, FSCM timer enabled
 17015     8007                     	org	32775
 17016     8007  3FEC               	dw	16364
 17017                           
 17018                           ;Config register CONFIG2 @ 0x8008
 17019                           ;	Master Clear Enable bit
 17020                           ;	MCLRE = ON, MCLR pin is Master Clear function
 17021                           ;	Power-up Timer Enable bit
 17022                           ;	PWRTS = OFF, PWRT disabled
 17023                           ;	Low-Power BOR enable bit
 17024                           ;	LPBOREN = OFF, ULPBOR disabled
 17025                           ;	Brown-out reset enable bits
 17026                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
 17027                           ;	Brown-out Reset Voltage Selection
 17028                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 2.45V
 17029                           ;	Zero-cross detect disable
 17030                           ;	ZCDDIS = OFF, Zero-cross detect circuit is disabled at POR.
 17031                           ;	Peripheral Pin Select one-way control
 17032                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
 17033                           ;	Stack Overflow/Underflow Reset Enable bit
 17034                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
 17035     8008                     	org	32776
 17036     8008  3FFF               	dw	16383
 17037                           
 17038                           ;Config register CONFIG3 @ 0x8009
 17039                           ;	WDT Period Select bits
 17040                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 17041                           ;	WDT operating mode
 17042                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
 17043                           ;	WDT Window Select bits
 17044                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 17045                           ;	WDT input clock selector
 17046                           ;	WDTCCS = SC, Software Control
 17047     8009                     	org	32777
 17048     8009  3F9F               	dw	16287
 17049                           
 17050                           ;Config register CONFIG4 @ 0x800A
 17051                           ;	Boot Block Size Selection bits
 17052                           ;	BBSIZE = BB512, 512 words boot block size
 17053                           ;	Boot Block Enable bit
 17054                           ;	BBEN = OFF, Boot Block disabled
 17055                           ;	SAF Enable bit
 17056                           ;	SAFEN = OFF, SAF disabled
 17057                           ;	Application Block Write Protection bit
 17058                           ;	WRTAPP = OFF, Application Block not write protected
 17059                           ;	Boot Block Write Protection bit
 17060                           ;	WRTB = OFF, Boot Block not write protected
 17061                           ;	Configuration Register Write Protection bit
 17062                           ;	WRTC = OFF, Configuration Register not write protected
 17063                           ;	Data EEPROM write protection bit
 17064                           ;	WRTD = OFF, Data EEPROM NOT write protected
 17065                           ;	Storage Area Flash Write Protection bit
 17066                           ;	WRTSAF = OFF, SAF not write protected
 17067                           ;	Low Voltage Programming Enable bit
 17068                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
 17069     800A                     	org	32778
 17070     800A  3FFF               	dw	16383
 17071                           
 17072                           ;Config register CONFIG5 @ 0x800B
 17073                           ;	UserNVM Program memory code protection bit
 17074                           ;	CP = OFF, UserNVM code protection disabled
 17075     800B                     	org	32779
 17076     800B  3FFF               	dw	16383

Data Sizes:
    Strings     42
    Constant    3
    Data        13
    BSS         135
    Persistent  42
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     75      78
    BANK1            80     49      80
    BANK2            80     59      72
    BANK3            80      0      42
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    nmbs_server_poll@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    nmbs_server_poll@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    nmbs_server_poll@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    nmbs_server_poll@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    nmbs_server_poll@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    nmbs_server_poll@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    nmbs_server_poll@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    nmbs_server_create@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    nmbs_server_create@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    nmbs_server_create@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    nmbs_server_create@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    nmbs_server_create@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    nmbs_server_create@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    nmbs_server_create@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_req_fc@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_req_fc@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_req_fc@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_req_fc@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_req_fc@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_req_fc@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_req_fc@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_req_header@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_req_header@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_req_header@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_req_header@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_req_header@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_req_header@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_req_header@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    nmbs_create@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    nmbs_create@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    nmbs_create@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    nmbs_create@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    nmbs_create@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    nmbs_create@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    nmbs_create@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_write_single_register@nanomodbus$F2271@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_read_input_registers@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_read_input_registers@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_read_input_registers@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_read_input_registers@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_read_input_registers@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_read_input_registers@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_read_input_registers@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_read_holding_registers@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_read_holding_registers@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_read_holding_registers@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_read_holding_registers@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_read_holding_registers@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_read_holding_registers@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_read_holding_registers@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_read_registers@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_read_registers@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_read_registers@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_read_registers@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_read_registers@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_read_registers@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_read_registers@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_write_single_register_res@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_write_single_register_res@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_write_single_register_res@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_write_single_register_res@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_write_single_register_res@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_write_single_register_res@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_write_single_register_res@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_write_single_register_res@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_write_single_register_res@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_write_single_register_res@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_write_single_register_res@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_write_single_register_res@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_write_single_register_res@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_write_single_register_res@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_write_single_coil_res@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_write_single_coil_res@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_write_single_coil_res@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_write_single_coil_res@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_write_single_coil_res@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_write_single_coil_res@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_write_single_coil_res@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_write_single_coil_res@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_write_single_coil_res@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_write_single_coil_res@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_write_single_coil_res@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_write_single_coil_res@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_write_single_coil_res@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_write_single_coil_res@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_read_registers_res@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_read_registers_res@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_read_registers_res@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_read_registers_res@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_read_registers_res@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_read_registers_res@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_read_registers_res@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_read_registers_res@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_read_registers_res@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_read_registers_res@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_read_registers_res@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_read_registers_res@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_read_registers_res@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_read_registers_res@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    send_exception_msg@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    send_exception_msg@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    send_exception_msg@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    send_exception_msg@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    send_exception_msg@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    send_exception_msg@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    send_exception_msg@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    put_res_header@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    put_res_header@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    put_res_header@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    put_res_header@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    put_res_header@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    put_res_header@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    put_res_header@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    put_res_header@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    put_res_header@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    put_res_header@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    put_res_header@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    put_res_header@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    put_res_header@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    put_res_header@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_res_header@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_res_header@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_res_header@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_res_header@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_res_header@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_res_header@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_res_header@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    send_msg@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    send_msg@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    send_msg@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    send_msg@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    send_msg@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    send_msg@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    send_msg@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    put_msg_header@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    put_msg_header@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    put_msg_header@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    put_msg_header@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    put_msg_header@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    put_msg_header@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    put_msg_header@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_msg_header@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_msg_header@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_msg_header@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_msg_header@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_msg_header@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_msg_header@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_msg_header@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_msg_footer@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_msg_footer@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_msg_footer@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_msg_footer@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_msg_footer@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_msg_footer@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_msg_footer@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    send@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    send@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    send@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    send@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    send@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    send@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    send@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    put_2@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    put_2@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    put_2@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    put_2@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    put_2@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    put_2@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    put_2@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    put_1@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    put_1@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    put_1@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    put_1@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    put_1@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    put_1@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    put_1@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    msg_state_reset@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    msg_state_reset@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    msg_state_reset@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    msg_state_reset@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    msg_state_reset@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    msg_state_reset@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    msg_state_reset@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    get_2@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    get_2@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    get_2@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    get_2@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    get_2@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    get_2@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    get_2@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    get_1@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    get_1@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    get_1@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    get_1@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    get_1@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    get_1@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    get_1@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    msg_buf_reset@nmbs.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    msg_buf_reset@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    msg_buf_reset@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    msg_buf_reset@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    msg_buf_reset@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    msg_buf_reset@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    msg_buf_reset@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    S1006$0$4	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    S1006$0$2	PTR unsigned short  size(1) Largest target is 10
		 -> handle_read_registers@regs(BANK1[10]), 

    S1006$1$4	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    S1006$1$2	PTR unsigned short  size(1) Largest target is 10
		 -> handle_read_registers@regs(BANK1[10]), 

    read_serial@arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    write_serial@arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    S1006$3$3	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    S1006$2$3	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    callback$4	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    callback$2	PTR unsigned short  size(1) Largest target is 10
		 -> handle_read_registers@regs(BANK1[10]), 

    S1047$2$3	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    S1047$2$0	PTR const unsigned char  size(2) Largest target is 0

    S1047$1$3	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    S1047$1$0	PTR unsigned char  size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    S926$1$0	PTR void  size(1) Largest target is 13
		 -> sensor(BANK2[13]), 

    S2936$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    S2936$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 38
		 -> STR_1(CODE[38]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 38
		 -> STR_1(CODE[38]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    S2970$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    printf@fmt	PTR const unsigned char  size(2) Largest target is 38
		 -> STR_1(CODE[38]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    funcs	PTR FTN()void [32] size(2) Largest target is 0

    __funcs_on_exit@func	PTR FTN()void  size(2) Largest target is 0

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> TMR0_DefaultInterruptHandler(), NULL(), 

    nmbs_server_poll@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    nmbs_server_poll@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_server_poll@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_server_poll@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_server_poll@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_server_poll@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_server_poll@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_server_poll@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    nmbs_server_create@callbacks	PTR const struct nmbs_callbacks size(1) Largest target is 9
		 -> main@callbacks(BANK1[9]), 

    nmbs_server_create@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    nmbs_server_create@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_server_create@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_server_create@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_server_create@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_server_create@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_server_create@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_server_create@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    nmbs_server_create@platform_conf.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    nmbs_server_create@platform_conf.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_server_create@platform_conf.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_server_create@platform_conf	PTR const struct nmbs_platform_conf size(1) Largest target is 7
		 -> main@platform_conf(BANK1[6]), 

    handle_req_fc@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_req_fc@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_req_fc@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_req_fc@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_req_fc@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_req_fc@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_req_fc@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_req_fc@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    handle_write_single_register@nanomodbus$F2271@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_write_single_register@nanomodbus$F2271@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_write_single_register@nanomodbus$F2271@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_write_single_register@nanomodbus$F2271@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_write_single_coil@nanomodbus$F2242@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    handle_read_input_registers@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_read_input_registers@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_read_input_registers@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_read_input_registers@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_input_registers@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_input_registers@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_input_registers@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_input_registers@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    handle_read_holding_registers@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_read_holding_registers@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_read_holding_registers@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_read_holding_registers@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_holding_registers@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_holding_registers@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_holding_registers@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_holding_registers@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    handle_read_registers@callback	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10483 size(2) Largest target is 1
		 -> handler_read_input_registers(), handler_read_holding_registers(), 

    handle_read_registers@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_read_registers@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_read_registers@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_read_registers@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_registers@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_registers@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_registers@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_registers@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    recv_write_single_register_res@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    recv_write_single_coil_res@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    recv_read_registers_res@registers	PTR unsigned short  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    recv_read_registers_res@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    recv_res_header@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_res_header@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_res_header@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_res_header@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_res_header@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_res_header@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_res_header@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_res_header@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    send_exception_msg@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    send_exception_msg@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    send_exception_msg@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send_exception_msg@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    send_exception_msg@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    send_exception_msg@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    send_exception_msg@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    send_exception_msg@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    put_res_header@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    recv_req_header@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_req_header@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_req_header@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_req_header@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_req_header@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_req_header@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_req_header@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_req_header@first_byte_received	PTR _Bool  size(1) Largest target is 1
		 -> nmbs_server_poll@first_byte_received(BANK0[1]), 

    recv_req_header@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    send_msg@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    send_msg@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    send_msg@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send_msg@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    send_msg@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    send_msg@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    send_msg@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    send_msg@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    put_msg_header@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    put_msg_header@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    put_msg_header@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    put_msg_header@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    put_msg_header@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    put_msg_header@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    put_msg_header@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_msg_header@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    recv_msg_header@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_msg_header@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_msg_header@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_msg_header@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_msg_header@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_msg_header@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_msg_header@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_msg_header@first_byte_received	PTR _Bool  size(1) Largest target is 1
		 -> nmbs_server_poll@first_byte_received(BANK0[1]), recv_res_header@first_byte_received(BANK0[1]), 

    recv_msg_header@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    recv_msg_footer@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv_msg_footer@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_msg_footer@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_msg_footer@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_msg_footer@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_msg_footer@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_msg_footer@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_msg_footer@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    send@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    send@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    send@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    send@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    send@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    send@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    send@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    recv@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    recv@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    nmbs_crc_calc@data	PTR const unsigned char  size(1) Largest target is 32
		 -> nmbs.msg.buf(BANK0[32]), 

    nmbs_set_destination_rtu_address@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    nmbs_set_destination_rtu_address@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_set_destination_rtu_address@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_set_destination_rtu_address@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_set_destination_rtu_address@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_set_destination_rtu_address@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_set_destination_rtu_address@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_create@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    nmbs_create@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_create@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_create@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_create@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_create@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_create@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_create@platform_conf.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    nmbs_create@platform_conf.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_create@platform_conf.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_create@platform_conf	PTR const struct nmbs_platform_conf size(1) Largest target is 7
		 -> main@platform_conf(BANK1[6]), 

    nmbs_create@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    m_memset@s	PTR void  size(2) Largest target is 60
		 -> registers.server_coils(COMMON[1]), main@nmbs(BANK2[59]), main@registers(BANK1[11]), 

    m_memset@p	PTR unsigned char  size(2) Largest target is 60
		 -> registers.server_coils(COMMON[1]), main@nmbs(BANK2[59]), main@registers(BANK1[11]), 

    msg_state_reset@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    msg_state_reset@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    msg_state_reset@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    msg_state_reset@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    msg_state_reset@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    msg_state_reset@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    msg_state_reset@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    msg_state_reset@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    msg_buf_reset@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    msg_buf_reset@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    msg_buf_reset@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    msg_buf_reset@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    msg_buf_reset@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    msg_buf_reset@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    msg_buf_reset@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    msg_buf_reset@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    put_2@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    put_2@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    put_2@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    put_2@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    put_2@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    put_2@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    put_2@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_2@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    get_2@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    get_2@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    get_2@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    get_2@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    get_2@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    get_2@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    get_2@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    get_2@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    discard_1@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    discard_1@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    discard_1@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    discard_1@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    discard_1@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    discard_1@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    discard_1@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_1@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    put_1@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    put_1@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    put_1@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    put_1@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    put_1@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    put_1@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_1@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    get_1@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    get_1@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    get_1@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    get_1@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    get_1@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    get_1@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    get_1@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    get_1@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    default_values_register@registers	PTR struct . size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_write_single_register@registers	PTR const unsigned short  size(2) Largest target is 0

    handle_write_single_register@arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_write_single_register@server_registers	PTR unsigned short  size(1) Largest target is 11
		 -> registers.server_holding_register(COMMON[4]), main@registers(BANK1[11]), 

    handler_read_holding_registers@registers_out	PTR unsigned short  size(1) Largest target is 10
		 -> handle_read_registers@regs(BANK1[10]), 

    handler_read_holding_registers@arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handler_read_holding_registers@server_registers	PTR unsigned short  size(1) Largest target is 11
		 -> registers.server_holding_register(COMMON[4]), main@registers(BANK1[11]), 

    handler_read_input_registers@registers_out	PTR unsigned short  size(1) Largest target is 10
		 -> handle_read_registers@regs(BANK1[10]), 

    handler_read_input_registers@arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handler_read_input_registers@server_registers	PTR unsigned short  size(1) Largest target is 11
		 -> registers.server_input_register(COMMON[6]), main@registers(BANK1[11]), 

    handle_write_single_coil@arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    handle_write_single_coil@server_coils	PTR unsigned char [1] size(1) Largest target is 1
		 -> registers.server_coils.coils(COMMON[1]), 

    write_serial@buf	PTR const unsigned char  size(1) Largest target is 32
		 -> nmbs.msg.buf(BANK0[32]), 

    read_serial@buf	PTR unsigned char  size(1) Largest target is 60
		 -> nmbs.msg.buf(BANK0[32]), nmbs.msg(BANK0[40]), main@nmbs(BANK2[59]), 

    getADCData@sensorSelection	PTR void  size(1) Largest target is 13
		 -> sensor.sensor_info(BANK2[11]), sensor(BANK2[13]), 

    is_a_new_value@nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    is_a_new_value@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    is_a_new_value@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    is_a_new_value@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    is_a_new_value@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    is_a_new_value@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    is_a_new_value@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    is_a_new_value@nmbs	PTR struct nmbs_t size(1) Largest target is 60
		 -> main@nmbs(BANK2[59]), 

    is_a_new_value@actual_regs	PTR struct . size(1) Largest target is 4
		 -> main@actual_regs(BANK1[4]), 

    is_a_new_value@registers	PTR struct . size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    platform_conf.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    platform_conf.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    platform_conf.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    S1047nmbs_platform_conf$arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    nmbs.platform.arg	PTR void  size(1) Largest target is 11
		 -> main@registers(BANK1[11]), 

    S1047nmbs_platform_conf$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    S1047nmbs_platform_conf$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    S1006nmbs_callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    S1006nmbs_callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    S1006nmbs_callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    S1006nmbs_callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10517 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    S926$sense	PTR FTN(PTR void ,)unsigned short  size(2) Largest target is 2
		 -> getADCData(), 

    sensor.sense	PTR FTN(PTR void ,)unsigned short  size(2) Largest target is 2
		 -> getADCData(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> NULL(), EUSART1_Receive_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 4
		 -> NULL(), EUSART1_DefaultErrorHandler(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 4
		 -> NULL(), EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 4
		 -> NULL(), EUSART1_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _EUSART1_Receive_ISR->_EUSART1_RxDataHandler
    _EUSART1_DefaultErrorHandler->_EUSART1_RxDataHandler
    _EUSART1_RxDataHandler->_TMR0_WriteTimer

Critical Paths under _main in BANK0

    _main->_nmbs_server_poll
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _nmbs_server_poll->_handle_req_fc
    _recv_req_header->_recv_msg_header
    _handle_req_fc->_handle_read_holding_registers
    _handle_req_fc->_handle_read_input_registers
    _handle_write_single_register@nanomodbus$F2271->_recv_write_single_register_res
    _recv_write_single_register_res->_recv_res_header
    _handle_write_single_coil@nanomodbus$F2242->_recv_write_single_coil_res
    _recv_write_single_coil_res->_recv_res_header
    _handle_read_input_registers->_handle_read_registers
    _handle_read_holding_registers->_handle_read_registers
    _handle_read_registers->_recv_read_registers_res
    _send_exception_msg->_send_msg
    _send_msg->_send
    _send->_write_serial
    _write_serial->_EUSART1_Write
    _write_serial->_EUSART1_is_tx_ready
    _recv_read_registers_res->_recv_res_header
    _recv_res_header->_recv_msg_footer
    _recv_msg_header->_recv
    _msg_state_reset->_msg_buf_reset
    _recv_msg_footer->_recv
    _recv->_read_serial
    _read_serial->_EUSART1_Read
    _put_res_header->_put_msg_header
    _put_msg_header->_put_2
    _nmbs_server_create->_nmbs_create
    _nmbs_create->_m_memset
    _is_a_new_value->_DATAEE_WriteWord
    _DATAEE_WriteWord->_DATAEE_WriteByte
    _getADCData->_ADCC_GetSingleConversion
    _exit->__Exit
    _default_values_register->_m_memset
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _DATAEE_ReadWord->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handle_read_input_registers->_handle_read_registers
    _handle_read_holding_registers->_handle_read_registers

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                91    91      0  210690
                                             73 BANK0      2     2      0
                                             19 BANK1     30    30      0
                                              0 BANK2     59    59      0
                    _DATAEE_ReadByte
                    _DATAEE_ReadWord
                   _DATAEE_WriteWord
                  _FVR_IsOutputReady
                  _SYSTEM_Initialize
                    _TxDeviceDisable
                   _UART_ClearBuffer
                 _check_error_modbus
            _default_values_register
                               _exit
                         _getADCData *
                     _is_a_new_value
                           _m_memset
                 _nmbs_server_create
                   _nmbs_server_poll
                             _printf
                 _setBaudRateEUSART1
 ---------------------------------------------------------------------------------
 (1) _printf                                               5     3      2    1850
                                             25 BANK0      3     1      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     3      5    1685
                                             17 BANK0      8     3      5
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           19    15      4    1233
                                              9 BANK0      8     4      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     777
                                              0 BANK0      9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _nmbs_server_poll                                     3     3      0  195790
                                             70 BANK0      3     3      0
                      _handle_req_fc
                    _msg_state_reset
                        _read_serial *
                    _recv_req_header
 ---------------------------------------------------------------------------------
 (2) _recv_req_header                                      3     2      1    4648
                                             26 BANK0      3     2      1
                    _recv_msg_header
 ---------------------------------------------------------------------------------
 (2) _handle_req_fc                                        4     4      0  189414
                                             66 BANK0      4     4      0
      _handle_read_holding_registers
        _handle_read_input_registers
_handle_write_single_coil@nanomodbus
_handle_write_single_register@nanomo
 ---------------------------------------------------------------------------------
 (3) _handle_write_single_register@nanomodbus$F2271        8     8      0   39355
                                             46 BANK0      8     8      0
                              _get_2
       _handle_write_single_register *
                              _put_2
                     _put_res_header
                               _recv
                    _recv_msg_footer
     _recv_write_single_register_res
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _recv_write_single_register_res                      10     6      4   21942
                                             40 BANK0      6     2      4
                              _get_2
                               _recv
                    _recv_msg_footer
                    _recv_res_header
 ---------------------------------------------------------------------------------
 (4) _handle_write_single_register                         8     2      6     418
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) _handle_write_single_coil@nanomodbus$F2242            9     9      0   48474
                                             50 BANK0      8     8      0
                              _get_2
           _handle_write_single_coil *
                              _put_2
                     _put_res_header
                               _recv
                    _recv_msg_footer
         _recv_write_single_coil_res
                 _send_exception_msg
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _recv_write_single_coil_res                          10     6      4   22252
                                             40 BANK0     10     6      4
                              _get_2
                               _recv
                    _recv_msg_footer
                    _recv_res_header
 ---------------------------------------------------------------------------------
 (4) _handle_write_single_coil                            14     9      5     641
                                              0 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _handle_read_input_registers                          1     1      0   50674
                                             65 BANK0      1     1      0
              _handle_read_registers
 ---------------------------------------------------------------------------------
 (3) _handle_read_holding_registers                        1     1      0   50674
                                             65 BANK0      1     1      0
              _handle_read_registers
 ---------------------------------------------------------------------------------
 (4) _handle_read_registers                               29    27      2   50576
                                             55 BANK0     10     8      2
                                              0 BANK1     19    19      0
                              _get_2
     _handler_read_holding_registers *
       _handler_read_input_registers *
                              _put_1
                              _put_2
                     _put_res_header
                               _recv
                    _recv_msg_footer
            _recv_read_registers_res
                 _send_exception_msg
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _send_exception_msg                                   3     2      1    8056
                                             34 BANK0      3     2      1
                              _put_1
                     _put_msg_header
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _send_msg                                             6     6      0    3242
                                             28 BANK0      6     6      0
                      _nmbs_crc_calc
                              _put_2
                               _send
 ---------------------------------------------------------------------------------
 (5) _send                                                12    10      2     875
                                             16 BANK0     12    10      2
                       _write_serial *
 ---------------------------------------------------------------------------------
 (6) _write_serial                                        15     7      8     467
                                              1 BANK0     15     7      8
                      _EUSART1_Write
                 _EUSART1_is_tx_done
                _EUSART1_is_tx_ready
                    _TxDeviceDisable
                     _TxDeviceEnable
 ---------------------------------------------------------------------------------
 (7) _TxDeviceEnable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TxDeviceDisable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_is_tx_ready                                  1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_is_tx_done                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Write                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _recv_read_registers_res                             15    11      4   22852
                                             40 BANK0     15    11      4
                              _get_1
                              _get_2
                               _recv
                    _recv_msg_footer
                    _recv_res_header
 ---------------------------------------------------------------------------------
 (5) _recv_res_header                                     10    10      0   13199
                                             30 BANK0     10    10      0
                              _get_1
                               _recv
                    _recv_msg_footer
                    _recv_msg_header
 ---------------------------------------------------------------------------------
 (3) _recv_msg_header                                      4     3      1    4178
                                             22 BANK0      4     3      1
                              _get_1
                    _msg_state_reset
                               _recv
 ---------------------------------------------------------------------------------
 (4) _msg_state_reset                                      1     1      0     361
                                              1 BANK0      1     1      0
                      _msg_buf_reset
 ---------------------------------------------------------------------------------
 (4) _get_1                                                3     3      0     343
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) _recv_msg_footer                                      8     8      0    4810
                                             22 BANK0      8     8      0
                              _get_2
                      _nmbs_crc_calc
                               _recv
 ---------------------------------------------------------------------------------
 (4) _recv                                                 4     2      2    2782
                                             18 BANK0      4     2      2
                        _read_serial *
 ---------------------------------------------------------------------------------
 (5) _read_serial                                         17     9      8     752
                                              1 BANK0     17     9      8
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Read                                         1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _nmbs_crc_calc                                       17    13      4     615
                                              0 BANK0     17    13      4
 ---------------------------------------------------------------------------------
 (7) _get_2                                               12    10      2     765
                                              0 BANK0     12    10      2
 ---------------------------------------------------------------------------------
 (4) _put_res_header                                       3     1      2    3337
                                              7 BANK0      3     1      2
                     _put_msg_header
 ---------------------------------------------------------------------------------
 (5) _put_msg_header                                       3     1      2    2897
                                              4 BANK0      3     1      2
                      _msg_buf_reset
                              _put_1
                              _put_2
 ---------------------------------------------------------------------------------
 (5) _put_2                                                4     2      2    1354
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (6) _put_1                                                3     2      1     754
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (5) _msg_buf_reset                                        1     1      0     103
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _handler_read_input_registers                        13     6      7     644
                                              0 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (5) _handler_read_holding_registers                      13     6      7     319
                                              0 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (1) _nmbs_server_create                                   6     3      3    2034
                                             12 BANK0      6     3      3
                        _nmbs_create
 ---------------------------------------------------------------------------------
 (2) _nmbs_create                                          4     3      1    1415
                                              8 BANK0      4     3      1
                           _m_memset
 ---------------------------------------------------------------------------------
 (1) _is_a_new_value                                       7     5      2    3439
                                              8 BANK0      7     5      2
                   _DATAEE_WriteByte
                   _DATAEE_WriteWord
                 _setBaudRateEUSART1
 ---------------------------------------------------------------------------------
 (1) _setBaudRateEUSART1                                   4     0      4     211
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteWord                                     4     0      4    1697
                                              4 BANK0      4     0      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     4     1      3     850
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _getADCData                                           5     3      2     195
                                              3 BANK0      5     3      2
           _ADCC_GetSingleConversion
 ---------------------------------------------------------------------------------
 (2) _ADCC_GetSingleConversion                             3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _exit                                                 2     0      2     214
                                              2 BANK0      2     0      2
                              __Exit
                    ___funcs_on_exit
 ---------------------------------------------------------------------------------
 (2) ___funcs_on_exit                                      3     3      0       3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) __Exit                                                2     0      2      90
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _default_values_register                              1     1      0    1232
                                              8 BANK0      1     1      0
                           _m_memset
 ---------------------------------------------------------------------------------
 (3) _m_memset                                             8     2      6    1010
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _check_error_modbus                                   1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_ClearBuffer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     605
                    _ADCC_Initialize
                 _EUSART1_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     121
           _TMR0_SetInterruptHandler
                     _TMR0_StopTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     484
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadWord                                      9     7      2     645
                                              2 BANK0      9     7      2
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0      90
                                NULL *
                _EUSART1_Receive_ISR *
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0       0
                                NULL *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0       0
                   i1_TMR0_StopTimer
                 i1_UART_ClearBuffer
 ---------------------------------------------------------------------------------
 (14) i1_UART_ClearBuffer                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_TMR0_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0      90
                                NULL *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART1_DefaultOverrunErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART1_DefaultFramingErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART1_DefaultErrorHandler                         0     0      0      45
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART1_RxDataHandler                               4     4      0      45
                                              1 COMMON     4     4      0
                    _TMR0_StartTimer
                    _TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (14) _TMR0_WriteTimer                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _TMR0_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
   _DATAEE_ReadWord
     _DATAEE_ReadByte
   _DATAEE_WriteWord
     _DATAEE_WriteByte
   _FVR_IsOutputReady
   _SYSTEM_Initialize
     _ADCC_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StopTimer
   _TxDeviceDisable
   _UART_ClearBuffer
   _check_error_modbus
   _default_values_register
     _m_memset
   _exit
     __Exit
     ___funcs_on_exit
   _getADCData *
     _ADCC_GetSingleConversion
   _is_a_new_value *
     _DATAEE_WriteByte
     _DATAEE_WriteWord
     _setBaudRateEUSART1
   _m_memset *
   _nmbs_server_create *
     _nmbs_create
       _m_memset
   _nmbs_server_poll *
     _handle_req_fc
       _handle_read_holding_registers
         _handle_read_registers
           _get_2
           _handler_read_holding_registers *
           _handler_read_input_registers *
           _put_1 *
           _put_2 *
           _put_res_header *
             _put_msg_header
               _msg_buf_reset
               _put_1
               _put_2
           _recv *
             _read_serial *
               _EUSART1_Read
           _recv_msg_footer *
             _get_2
             _nmbs_crc_calc
             _recv
           _recv_read_registers_res *
             _get_1
             _get_2
             _recv
             _recv_msg_footer
             _recv_res_header
               _get_1
               _recv
               _recv_msg_footer
               _recv_msg_header
                 _get_1
                 _msg_state_reset
                   _msg_buf_reset
                 _recv
           _send_exception_msg *
             _put_1
             _put_msg_header
             _send_msg
               _nmbs_crc_calc
               _put_2
               _send
                 _write_serial *
                   _EUSART1_Write
                   _EUSART1_is_tx_done
                   _EUSART1_is_tx_ready
                   _TxDeviceDisable
                   _TxDeviceEnable
           _send_msg *
       _handle_read_input_registers
         _handle_read_registers
       _handle_write_single_coil@nanomodbus$F2242
         _get_2
         _handle_write_single_coil *
         _put_2 *
         _put_res_header *
         _recv *
         _recv_msg_footer *
         _recv_write_single_coil_res *
           _get_2
           _recv
           _recv_msg_footer
           _recv_res_header
         _send_exception_msg *
         _send_msg *
       _handle_write_single_register@nanomodbus$F2271
         _get_2
         _handle_write_single_register *
         _put_2 *
         _put_res_header *
         _recv *
         _recv_msg_footer *
         _recv_write_single_register_res *
           _get_2
           _recv
           _recv_msg_footer
           _recv_res_header
         _send_msg *
     _msg_state_reset
     _read_serial *
     _recv_req_header *
       _recv_msg_header
   _printf *
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
   _setBaudRateEUSART1 *

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART1_Receive_ISR *
     NULL(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
         _TMR0_StartTimer
         _TMR0_WriteTimer
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _TMR0_ISR *
     NULL(Fake) *
     _TMR0_DefaultInterruptHandler *
       i1_TMR0_StopTimer
       i1_UART_ClearBuffer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     31      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3B      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2A      11       52.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
ABS                  0      0     15A      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      40      14       80.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     15A      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Oct 04 11:50:50 2023

                             ?_default_values_register 0075  
                                                   l93 09C9  
                               __end_of_FVR_Initialize 08AA  
                     recv_read_registers_res@registers 004A  
                   recv_res_header@first_byte_received 0043  
                                                  l242 062C  
                                                  l245 0636  
                                                  l239 0678  
                                                  l269 08FB  
                                                  l561 020A  
                                                  l725 06E9  
                                                  l565 024A  
                                                  l479 0B1E  
                                                  l727 070B  
                                                  l763 0D5F  
                                                  l758 07CE  
                                                  l890 0D86  
                      recv_read_registers_res@quantity 0048  
                handle_write_single_register@registers 0022  
                                                  wreg 0009  
                       ?_handle_read_holding_registers 0075  
                      handler_read_holding_registers@i 002B  
                                                 l5002 04E1  
                                                 l1580 088E  
                                                 l5030 0536  
                                                 l5110 0ED9  
                                                 l5026 0531  
                                                 l5202 0167  
                                                 l5130 005D  
                                                 l5106 0ED7  
                                                 l5044 0552  
                                                 l5028 0503  
                                                 l5060 0584  
                                                 l5220 076D  
                                                 l5206 0176  
                                                 l5134 005F  
                                                 l5054 055D  
                                                 l5302 02A0  
                                                 l5214 0742  
                                                 l5152 0099  
                                                 l5072 0A35  
                                                 l6040 0D96  
                                                 l5216 0746  
                                                 l6050 065F  
                                                 l6042 0641  
                                                 l5410 061F  
                                                 l5154 00BF  
                                                 l5314 02D8  
                                                 l6052 0664  
                                                 l6044 0673  
                                                 l5420 0632  
                                                 l5412 0625  
                                                 l5148 0091  
                                                 l5084 0EA9  
                                                 l5332 030D  
                                                 l5262 0A18  
                                                 l6054 0669  
                                                 l6046 0655  
                                                 l4702 0F5E  
                                                 l5174 0116  
                                                 l5158 00C7  
                                                 l5318 02DE  
                                                 l6056 066E  
                                                 l6048 065A  
                                                 l5424 0634  
                                                 l5416 062A  
                                                 l4704 0F35  
                                                 l5192 0141  
                                                 l5088 0EAB  
                                                 l5336 0319  
                                                 l5328 0307  
                                                 l5280 0269  
                                                 l5352 04C7  
                                                 l5600 0E2C  
                                                 l5434 063B  
                                                 l4706 0F63  
                                                 l5194 015D  
                                                 l5178 011E  
                                                 l5610 0E55  
                                                 l5276 0267  
                                                 l5356 04D3  
                                                 l5620 0D75  
                                                 l5612 0E5B  
                                                 l5372 0FDC  
                                                 l5702 0BB1  
                                                 l4814 0E8C  
                                                 l4822 0E9E  
                                                 l4902 0412  
                                                 l4654 0966  
                                                 l5622 0D7B  
                                                 l5606 0E3F  
                                                 l5640 0921  
                                                 l4760 072D  
                                                 l4752 0717  
                                                 l4680 0E16  
                                                 l4840 0F8D  
                                                 l5624 0D80  
                                                 l5376 0FE6  
                                                 l5562 0EF8  
                                                 l4754 071C  
                                                 l4930 044E  
                                                 l5618 0D70  
                                                 l5626 0D89  
                                                 l5802 0180  
                                                 l5580 0F10  
                                                 l5572 0EE8  
                                                 l4772 0BF7  
                                                 l4836 0F8B  
                                                 l5628 0DA4  
                                                 l5732 05D3  
                                                 l5812 01B4  
                                                 l5558 0EF6  
                                                 l4678 0DEA  
                                                 l4854 0FB5  
                                                 l4926 044C  
                                                 l5646 0A48  
                                                 l5814 01D2  
                                                 l4696 0F4B  
                                                 l4792 06D8  
                                                 l5744 05E7  
                                                 l5728 05D1  
                                                 l5736 05D5  
                                                 l5648 0A5B  
                                                 l5578 0EEF  
                                                 l4938 0450  
                                                 l4882 03E1  
                                                 l5780 03B2  
                                                 l5772 036C  
                                                 l4956 0CA6  
                                                 l4948 0CA1  
                                                 l4796 06DA  
                                                 l4788 06BC  
                                                 l5852 0231  
                                                 l5774 0378  
                                                 l5694 0BA5  
                                                 l4958 0CC6  
                                                 l4894 03FF  
                                                 l4886 03E3  
                                                 l5838 020B  
                                                 l4976 0CDC  
                                                 l4968 0CD7  
                                                 l5856 0236  
                                                 l4978 0CFC  
                                                 l4998 04DF  
                                                 STR_1 07D9  
                                                 STR_2 07FF  
                                                 u3005 070E  
                                                 _LATA 0018  
                                                 u3015 0718  
                                                 _LATC 001A  
                                                 u3105 0E9A  
                                                 u3035 06F7  
                                                 u3063 06D4  
                                                 u3055 06B8  
                                                 u4040 0BC2  
                                                 u3315 0CE2  
                                                 u3424 0579  
                                                 u4145 0331  
                                                 u3425 0578  
                                                 u3434 058E  
                                                 u3195 03FB  
                                                 u3435 058C  
                                                 u3365 0506  
                                                 u4175 038E  
                                                 u3295 0CAC  
                                                 u3375 0512  
                                                 u3625 0147  
                                                 u3570 00D3  
                                                 u3395 054E  
                                                 _PMD0 0796  
                                                 u3485 0ED5  
                                                 _PMD1 0797  
                                                 _PMD2 0798  
                                                 u3495 0EDF  
                                                 _PMD3 0799  
                                                 u3760 02AA  
                                                 _PMD4 079A  
                                                 _PMD5 079B  
                                                 u3770 02AB  
                                                 _PMD6 079C  
                                                 u2955 0DFE  
                                                 u3675 076B  
                                                 _PMD7 079D  
                                                 u3940 0F22  
                                                 u2985 0F3B  
                      handle_read_input_registers@nmbs 0061  
                                                 _WPUA 1F39  
                                                 _WPUC 1F4F  
                                        _EUSART1_Write 08FA  
                                                 _dbuf 01A0  
                 handle_write_single_coil@server_coils 002D  
                                                 _main 0178  
                                                 _exit 092C  
                                                 _recv 0BC8  
                                        ?_EUSART1_Read 0075  
                                                 _send 067C  
                                                 _prec 00E3  
                                      _TMR0_StartTimer 088F  
                                 read_serial@charCount 002E  
                                                 fsr0h 0005  
                                                 fsr1h 0007  
                                                 indf0 0000  
                                                 fsr0l 0004  
                                                 indf1 0001  
                                                 fsr1l 0006  
                                                 btemp 007E  
                                     _nmbs_server_poll 05B9  
                                                 start 001B  
                             __end_ofi1_TMR0_StopTimer 089B  
                     ??_handler_read_holding_registers 0027  
                      ?_handler_read_holding_registers 0020  
                                recv_res_header@req_fc 0044  
                   __end_of_recv_write_single_coil_res 0EE3  
                           _recv_write_single_coil_res 0EA0  
                                        write_serial@i 002E  
                              __end_of_TMR0_Initialize 0A14  
                       ??_TMR0_DefaultInterruptHandler 0075  
                                      ?_FVR_Initialize 0075  
                        __end_of_OSCILLATOR_Initialize 08FA  
                                _eusart1RxStatusBuffer 00D1  
                                                _ADCAP 010E  
                                                _ADACT 0117  
                                                ?_main 0075  
                                                _ADCLK 0118  
                                                ?_exit 0022  
                                                _ADPCH 009F  
                                                _ADREF 0116  
                                                ?_recv 0032  
                                                ?_send 0030  
                                                _ADRPT 009A  
                  handle_write_single_register@address 0020  
                                                i1l430 000E  
                                                i1l436 0019  
                                      _TMR0_WriteTimer 08B2  
                                                _OSCEN 0891  
                                         vfpfcnvrt@fmt 002B  
                                                _TMR0H 059D  
                                                _TMR0L 059C  
                                       _TxDeviceEnable 0893  
                                                _TRISA 0012  
                                                _TRISC 0014  
                                __end_of_msg_buf_reset 0917  
                   recv_msg_header@first_byte_received 0036  
                            ?_TMR0_SetInterruptHandler 0020  
                                                __Exit 088E  
                                     __end_of_TMR0_ISR 0943  
                         ?_handle_read_input_registers 0075  
                                      _DATAEE_ReadByte 0976  
                                                _get_1 0A94  
                                                _get_2 0CFE  
                                                _flags 006B  
                                         ?_read_serial 0021  
                                      _DATAEE_ReadWord 0B28  
                             DATAEE_ReadWord@high_byte 002A  
                                                _count 0070  
                                                _funcs 0220  
                                                _fputc 073A  
                                          m_memset@len 0024  
     handle_write_single_coil@nanomodbus$F2242@address 0054  
                                                _put_1 0A79  
                                                _put_2 0B70  
                       ??_handle_write_single_register 0026  
                           recv_res_header@req_unit_id 0042  
                                                _width 00E1  
                                                _putch 0003  
                                       ?_EUSART1_Write 0075  
                                                pclath 000A  
                      nmbs_server_create@platform_conf 002D  
                                       ??_EUSART1_Read 0020  
                  handle_write_single_register@unit_id 0024  
              recv_write_single_register_res@value_req 004A  
                                                status 0003  
                                                wtemp0 007E  
                                   recv_msg_header@err 0038  
           __end_of_EUSART1_DefaultFramingErrorHandler 088D  
                 ??_EUSART1_DefaultFramingErrorHandler 0075  
                  ?_EUSART1_DefaultFramingErrorHandler 0075  
                   _EUSART1_DefaultFramingErrorHandler 088C  
                                      __initialization 001D  
                                         ?_nmbs_create 0028  
                                        main@callbacks 00B7  
                           __end_of_EUSART1_Initialize 0C5E  
                                         __end_of_main 025A  
                                         __end_of_exit 0937  
                                         __end_of_recv 0BF9  
                                         __end_of_send 06DC  
         handle_write_single_register@server_registers 0027  
                          ?_INTERRUPT_InterruptManager 0075  
                               __end_of_TxDeviceEnable 0895  
                                               ??_main 0069  
                     __end_of_handle_write_single_coil 05B9  
                                               ??_exit 0024  
                                               ??_recv 0034  
                                               ??_send 0032  
                      handle_write_single_coil@address 0020  
                                      _recv_msg_header 0F6E  
                                      _recv_req_header 0E1F  
                                      _recv_msg_footer 0E5D  
                               send_exception_msg@nmbs 0044  
         handle_write_single_coil@nanomodbus$F2242@err 0058  
                                      _recv_res_header 03BF  
                                               ?__Exit 0020  
                                    write_serial@count 0022  
                               nmbs_server_create@nmbs 0031  
                                               ?_get_1 0075  
                                               ?_get_2 0020  
                              __end_of_TMR0_StartTimer 0891  
                                               _ADACCU 0098  
                                               _ADACQH 010D  
                                               _ADACQL 010C  
                                  nmbs_server_poll@err 0068  
                                               _ADCON0 0111  
                                               _ADCON1 0112  
                                               _ADCON2 0113  
                                               _ADCON3 0114  
                                               ?_fputc 0020  
                                               _ADLTHH 008D  
                                               _ADLTHL 008C  
                                               _ADRESH 009E  
                                               _ADRESL 009D  
                                               _ADPREH 0110  
                                               _ADPREL 010F  
                                               _ADSTAT 0115  
                                               _ADUTHH 008F  
                                               _ADUTHL 008E  
                                               ?_put_1 0020  
                                               ?_put_2 0020  
                                               _ANSELA 1F38  
                                               ?_putch 0075  
                                               _ANSELC 1F4E  
                recv_write_single_coil_res@address_res 004C  
                                               _T0CON0 059E  
                                               _T0CON1 059F  
                                               _RC1REG 0119  
                                               _RC1STA 011D  
                                               _RC4PPS 1F24  
                                               _ODCONA 1F3A  
                                               _ODCONC 1F50  
                                               i1l4224 0C1A  
                                               i1l4218 0C0C  
                                               i1l4228 0C28  
                                               i1l4190 0957  
                                               i1l3760 0C74  
                                               i1l3766 0C7E  
                                               _INLVLA 1F3C  
                                               _INLVLC 1F52  
                                               _FVRCON 090C  
                      handle_write_single_coil@unit_id 0023  
                                               _SP1BRG 011B  
                          recv_read_registers_res@nmbs 0055  
                                               _OSCFRQ 0893  
                                   _send_exception_msg 0AAF  
                                               _TX1REG 011A  
                                               _TX1STA 011E  
                                      _TxDeviceDisable 089B  
                                       _put_msg_header 078F  
                                   recv_req_header@err 003B  
                          handle_read_registers@F10771 01C0  
                                   recv_msg_footer@crc 0038  
                                   recv_msg_footer@err 003C  
                                       _put_res_header 0917  
                                  ?_send_exception_msg 0042  
                                         _write_serial 0F28  
                                         vfprintf@cfmt 0037  
                           __end_of_setBaudRateEUSART1 067C  
                                     __end_of_m_memset 0A2C  
                              __end_of_TMR0_WriteTimer 08B7  
                                        main@registers 00C6  
                             ?_EUSART1_SetErrorHandler 0020  
                                     ?_TMR0_Initialize 0075  
                                   _nmbs_server_create 0B99  
                                               _sensor 015B  
                                               _printf 09A0  
                     ??_EUSART1_SetOverrunErrorHandler 0022  
                      ?_EUSART1_SetOverrunErrorHandler 0020  
                                      ?_TxDeviceEnable 0075  
                              __end_of_DATAEE_ReadByte 0984  
            handler_read_input_registers@registers_out 0024  
                              __end_of_DATAEE_ReadWord 0B4B  
                                     __end_of_send_msg 0D6E  
                                      _ADCC_Initialize 0A5E  
                                               fputc@c 0020  
                                       _PMD_Initialize 0903  
         handler_read_input_registers@server_registers 002A  
                                  ?_nmbs_server_create 002C  
                                 ??_send_exception_msg 0043  
                                               putch@c 0075  
       handle_write_single_coil@nanomodbus$F2242@value 0056  
                                     __end_of_vfprintf 0A5E  
                            ?_ADCC_GetSingleConversion 0020  
                                      ??_EUSART1_Write 0020  
             TMR0_SetInterruptHandler@InterruptHandler 0020  
                                      _eusart1RxBuffer 00D9  
                                     getADCData@result 0025  
                        handle_write_single_coil@coils 0022  
                                  recv_msg_header@nmbs 0039  
                           __end_of_check_error_modbus 088E  
                                    _SYSTEM_Initialize 09E8  
                               __end_of_put_msg_header 07D9  
                              __end_of__initialization 0048  
                              recv_msg_footer@recv_crc 003A  
                                   ?_SYSTEM_Initialize 0075  
                               __end_of_put_res_header 0921  
                                   recv_res_header@err 0046  
                                 ??_nmbs_server_create 002F  
                        __end_of_EUSART1_RxDataHandler 0C92  
                            put_res_header@data_length 0027  
                                       __pcstackCOMMON 0075  
                                        __end_of__Exit 088F  
                                         __pidataBANK2 0969  
                              __end_of_recv_msg_header 0FB7  
                                  ??_SYSTEM_Initialize 0022  
                        __end_of_handle_read_registers 0178  
                                            ?_TMR0_ISR 0075  
                                        __end_of_get_1 0AAF  
                                        __end_of_get_2 0D36  
                                     _DATAEE_WriteByte 0B07  
                              __end_of_recv_req_header 0E5D  
                              __end_of_recv_msg_footer 0EA0  
                                        __end_of_fputc 078F  
                                     _DATAEE_WriteWord 09D4  
                                        __end_of_put_1 0A94  
                                        __end_of_put_2 0B99  
                                        __end_of_putch 0004  
                              __end_of_recv_res_header 0452  
                               __end_of_PMD_Initialize 090D  
                                 __end_of_EUSART1_Read 094F  
                 __end_of_handler_read_input_registers 0CC8  
                         _handler_read_input_registers 0C92  
                             __end_of_nmbs_server_poll 061B  
                                      write_serial@arg 0028  
                                      write_serial@buf 0021  
                                    ??___funcs_on_exit 0020  
                  nmbs_server_poll@first_byte_received 0066  
                                           _getADCData 09AF  
                          __end_of_EUSART1_Receive_ISR 0C2B  
                                              ??__Exit 0022  
                                    ??_msg_state_reset 0021  
                                              ??_get_1 0020  
                                              ??_get_2 0022  
                              __end_of_TxDeviceDisable 089E  
                                     ?_TMR0_StartTimer 0075  
                                              ??_fputc 0024  
                            __end_of_SYSTEM_Initialize 09FD  
                                              ??_put_1 0021  
                                              ??_put_2 0022  
                                              ??_putch 0020  
                                        _eusart1RxHead 0073  
                                        _eusart1RxTail 0072  
                                       _is_a_new_value 031B  
                                           __pbssBANK0 006B  
                                           __pbssBANK1 00D1  
                                           __pbssBANK3 01A0  
                                           __pbssBANK4 0220  
                      ??_EUSART1_SetRxInterruptHandler 0022  
                                __end_of_handle_req_fc 0DA6  
                                      ?_put_msg_header 0024  
                    recv_write_single_register_res@err 004C  
                            ?_handle_write_single_coil 0020  
        handle_write_single_coil@nanomodbus$F2242@nmbs 0059  
                                      ?_put_res_header 0027  
                      __end_of_EUSART1_SetErrorHandler 08D1  
                                     ??_FVR_Initialize 0020  
                                           __pmaintext 0178  
               recv_read_registers_res@registers_bytes 0054  
                                    ?i1_TMR0_StopTimer 0075  
                     __end_of_TMR0_SetInterruptHandler 08F1  
                                           ??_TMR0_ISR 0075  
                          ?_recv_write_single_coil_res 0048  
                              __end_of_ADCC_Initialize 0A79  
                                           __pintentry 0004  
                                     ?_TMR0_WriteTimer 0075  
                                   ??i1_TMR0_StopTimer 0075  
                                 nmbs_server_poll@nmbs 0067  
                                              _ADSTPTH 0093  
                                              _ADSTPTL 0092  
                                              ?_printf 0039  
                                      ?_PMD_Initialize 0075  
               __end_of_EUSART1_SetFramingErrorHandler 08D9  
                       _EUSART1_SetFramingErrorHandler 08D1  
                                     ?_DATAEE_ReadByte 0020  
                                    main@platform_conf 00C0  
                                     ?_DATAEE_ReadWord 0022  
                           __end_ofi1_UART_ClearBuffer 08A6  
                        ?_handler_read_input_registers 0020  
               __end_of_handler_read_holding_registers 0CFE  
                       _handler_read_holding_registers 0CC8  
                         ?_EUSART1_DefaultErrorHandler 0075  
                                              _SP1BRGH 011C  
                                              _SP1BRGL 011B  
                     default_values_register@registers 0028  
                                              _OSCCON1 088D  
                                              _OSCCON3 088F  
                                              _NVMADRH 081B  
                                              _NVMADRL 081A  
                                              _OSCTUNE 0892  
                                              _NVMDATL 081C  
                                              _NVMCON2 081F  
                handler_read_holding_registers@address 0020  
                                              _SLRCONA 1F3B  
                                              _SLRCONC 1F51  
                               __end_of_is_a_new_value 03BF  
                            getADCData@sensorSelection 0023  
                                            ?_m_memset 0020  
                                  recv_req_header@nmbs 003C  
                                 DATAEE_WriteByte@bAdd 0020  
                                          send_msg@crc 003E  
                                          send_msg@err 0040  
                                    msg_buf_reset@nmbs 0020  
    handle_write_single_register@nanomodbus$F2271@nmbs 0055  
                                  recv_msg_footer@nmbs 003D  
                handler_read_holding_registers@unit_id 0025  
                                            ?_send_msg 0075  
     handle_write_single_register@nanomodbus$F2271@err 0050  
                                    nmbs_crc_calc@data 0028  
                                     ?_recv_msg_header 0036  
                                            ?_vfprintf 0031  
                                     ?_recv_req_header 003A  
                                     ?_recv_msg_footer 0075  
                           __end_of_EUSART1_is_tx_done 08B2  
                                     ?_recv_res_header 0075  
                                  _EUSART1_is_tx_ready 095C  
                                              _flag_Rx 006D  
                                              __ptext1 09A0  
                                              __ptext2 0A44  
                                              __ptext3 0FB7  
                                              __ptext4 073A  
                                              __ptext5 0003  
                                              __ptext6 05B9  
                                              __ptext7 0E1F  
                                              __ptext8 0D6E  
                                              __ptext9 0452  
                                       nmbs_crc_calc@i 0029  
                                       nmbs_crc_calc@j 002D  
                                _OSCILLATOR_Initialize 08F1  
                                          ?_getADCData 0023  
                                   _EUSART1_Initialize 0C2B  
                             ??_PIN_MANAGER_Initialize 0020  
                        ??_EUSART1_DefaultErrorHandler 007A  
                                      ?_is_a_new_value 0028  
                                     ?_TxDeviceDisable 0075  
                                              main@err 006A  
                                              clrloop0 08BE  
                  recv_write_single_coil_res@value_req 004A  
                  recv_write_single_coil_res@value_res 004E  
                                 end_of_initialization 0048  
                                    handle_req_fc@nmbs 0065  
                                           ??_m_memset 0026  
                                  ?_EUSART1_Initialize 0075  
                                 DATAEE_WriteWord@bAdd 0024  
                                 ?_EUSART1_is_tx_ready 0075  
                                              fputc@fp 0022  
                                              init_ram 08C3  
                          _EUSART1_OverrunErrorHandler 00EA  
                                              initloop 08C4  
                                              recv@ret 0034  
                              _recv_read_registers_res 04D5  
                                              send@ret 0037  
                      handle_read_registers@regs_bytes 00AC  
                                    _FVR_IsOutputReady 08B7  
                __end_of_EUSART1_SetRxInterruptHandler 08E9  
                        _EUSART1_SetRxInterruptHandler 08E1  
                                           ??_send_msg 003C  
                                    getADCData@channel 0027  
                                   ?_FVR_IsOutputReady 0075  
                        nmbs_server_create@address_rtu 002C  
                                    __end_of_vfpfcnvrt 1000  
                                     _UART_ClearBuffer 08AA  
      __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F1380 0805  
              _NMBS_BROADCAST_ADDRESS@nanomodbus$F1380 0804  
      __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F1606 0804  
              _NMBS_BROADCAST_ADDRESS@nanomodbus$F1606 0803  
                         handle_read_registers@address 00AA  
                                     ??_TxDeviceEnable 0020  
                                        _nmbs_crc_calc 06DC  
                                     ?_ADCC_Initialize 0075  
                                           ??_vfprintf 0036  
                 __end_of_handle_write_single_register 0A44  
                         _handle_write_single_register 0A2C  
                     __end_of_ADCC_GetSingleConversion 09D4  
                                 ??_EUSART1_Initialize 0022  
                                  ??_FVR_IsOutputReady 0020  
                             _TMR0_SetInterruptHandler 08E9  
                                         read_serial@c 002D  
                                     main@is_in_memory 0069  
                              _default_values_register 0DA6  
                                   _setBaudRateEUSART1 061B  
                                  EUSART1_Write@txData 0020  
                             __end_of_DATAEE_WriteByte 0B28  
                             __end_of_DATAEE_WriteWord 09E8  
                                ??_EUSART1_is_tx_ready 0020  
                                  ?_setBaudRateEUSART1 0020  
          handler_read_holding_registers@registers_out 0024  
                            handle_read_registers@nmbs 00B2  
                            handle_read_registers@regs 00A0  
__end_of_handle_write_single_register@nanomodbus$F2271 04D5  
      ??_handle_write_single_register@nanomodbus$F2271 004E  
       ?_handle_write_single_register@nanomodbus$F2271 0075  
        _handle_write_single_register@nanomodbus$F2271 0452  
                            __end_of_FVR_IsOutputReady 08BD  
                                  recv_res_header@nmbs 0047  
    __end_of_handle_write_single_coil@nanomodbus$F2242 031B  
          ??_handle_write_single_coil@nanomodbus$F2242 0052  
           ?_handle_write_single_coil@nanomodbus$F2242 0075  
            _handle_write_single_coil@nanomodbus$F2242 025A  
                                         _EUSART1_Read 0943  
                        handle_read_registers@callback 0057  
                                       ?_nmbs_crc_calc 0020  
                                       _TMR0_StopTimer 0891  
                                      ___funcs_on_exit 0921  
                                   _check_error_modbus 088D  
                      handler_read_input_registers@arg 0026  
                                      _msg_state_reset 0B4B  
                                          vfpfcnvrt@ap 002C  
                                          vfpfcnvrt@fp 0029  
                                 ??_setBaudRateEUSART1 0024  
                        ?_handle_write_single_register 0020  
                       recv_write_single_coil_res@nmbs 0050  
                               ?_OSCILLATOR_Initialize 0075  
                                  ?_check_error_modbus 0075  
                             recv_res_header@exception 0045  
                   recv_req_header@first_byte_received 003A  
                                       __end_of_printf 09AF  
                                    ?_nmbs_server_poll 0075  
                                  start_initialization 001D  
                                        _msg_buf_reset 090D  
                  __end_of_handle_read_input_registers 09A0  
                          _handle_read_input_registers 0992  
                                   ??_nmbs_server_poll 0066  
                                     ??_put_msg_header 0026  
                           read_serial@byte_timeout_ms 0024  
        EUSART1_SetRxInterruptHandler@interruptHandler 0020  
                              DATAEE_ReadWord@low_byte 0029  
                                     ??_put_res_header 0029  
                                __end_of_EUSART1_Write 0903  
                            ??_recv_read_registers_res 004C  
                                      main@actual_regs 00B3  
                        handle_read_registers@quantity 00AF  
                                nmbs_server_create@ret 0030  
                        ??_handle_read_input_registers 0061  
                    recv_write_single_coil_res@address 0048  
                                 ??_check_error_modbus 0020  
                      handle_write_single_register@arg 0025  
                                  DATAEE_ReadByte@bAdd 0020  
                        handler_read_input_registers@i 002B  
                           recv_read_registers_res@err 0056  
                           recv_read_registers_res@reg 0050  
                               __end_of_TMR0_StopTimer 0893  
                            put_msg_header@data_length 0024  
                                          vfprintf@fmt 0033  
                              is_a_new_value@registers 002E  
                                     ??_PMD_Initialize 0020  
                                _EUSART1_RxDataHandler 0C5E  
                                  nmbs_crc_calc@length 0020  
                       ?_EUSART1_SetRxInterruptHandler 0020  
                                          __pdataBANK2 015B  
                                   is_a_new_value@nmbs 0029  
                             nmbs_create@platform_conf 0028  
                                _handle_read_registers 004C  
                                             ??_printf 003B  
                                       _eusart1RxCount 0071  
                            ??_default_values_register 0028  
                             _ADCC_GetSingleConversion 09C1  
                                       ?_msg_buf_reset 0075  
                                          __pbssCOMMON 0070  
                    _EUSART1_RxDefaultInterruptHandler 00EE  
                                            ___latbits 0001  
                                        __pcstackBANK0 0020  
                                        __pcstackBANK1 00A0  
                                        __pcstackBANK2 0120  
                                        ??_read_serial 0029  
                   recv_write_single_register_res@nmbs 004D  
                                  _eusart1PacketFinish 00E5  
                     ??_EUSART1_SetFramingErrorHandler 0022  
                      ?_EUSART1_SetFramingErrorHandler 0020  
                                   i1_UART_ClearBuffer 08A2  
                                  DATAEE_ReadWord@bAdd 0022  
                              __end_of___funcs_on_exit 092C  
                                _TMR0_InterruptHandler 00E6  
                                            __pnvBANK1 00E6  
                                      ??_nmbs_crc_calc 0024  
                                      ?_TMR0_StopTimer 0075  
                              __end_of_msg_state_reset 0B70  
                               _PIN_MANAGER_Initialize 0AE9  
                                        ??_nmbs_create 0029  
                              _EUSART1_is_tx_ready$619 0020  
                                  ?i1_UART_ClearBuffer 0075  
                               _NMBS_BROADCAST_ADDRESS 0805  
                      ADCC_GetSingleConversion@channel 0022  
                      __end_of_recv_read_registers_res 0554  
                          send_exception_msg@exception 0042  
                         ??_INTERRUPT_InterruptManager 007A  
                                     ??_is_a_new_value 002A  
                                             _BAUD1CON 011F  
               __end_of_recv_write_single_register_res 0AE9  
                       _recv_write_single_register_res 0ACC  
           __end_of_EUSART1_DefaultOverrunErrorHandler 08A2  
                 ??_EUSART1_DefaultOverrunErrorHandler 0075  
                  ?_EUSART1_DefaultOverrunErrorHandler 0075  
                   _EUSART1_DefaultOverrunErrorHandler 089E  
                                 _EUSART1_ErrorHandler 00E8  
                                         ??_getADCData 0025  
                                     nmbs_crc_calc@crc 002F  
                              _EUSART1_SetErrorHandler 08C9  
                                 ??i1_UART_ClearBuffer 0075  
                             __end_of_UART_ClearBuffer 08AE  
                                   _EUSART1_is_tx_done 08AE  
                             _handle_write_single_coil 0554  
                               EUSART1_RxDataHandler@t 0078  
                                  msg_state_reset@nmbs 0021  
                                            get_1@nmbs 0022  
                                            get_2@nmbs 002B  
                                    ??_TMR0_Initialize 0022  
                      __end_of_default_values_register 0DE2  
                                   put_msg_header@nmbs 0026  
              EUSART1_SetErrorHandler@interruptHandler 0020  
                                             _LATCbits 001A  
                                  __end_of_read_serial 0E1F  
                                     handle_req_fc@err 0064  
                                  ?_EUSART1_is_tx_done 0075  
                                            clear_ram0 08BD  
                                             _PIE0bits 0716  
                                             _PIE3bits 0719  
                                     _uart_expire_time 0074  
                           ??_TMR0_SetInterruptHandler 0022  
                                             _PIR0bits 070C  
                                        ?_write_serial 0021  
                                             _PIR3bits 070F  
                                             _RX1DTPPS 1ECB  
                               ?_EUSART1_RxDataHandler 0075  
                      ??_handle_read_holding_registers 0061  
                                   __end_of_getADCData 09C1  
                                             _TMR0_ISR 0937  
                               handle_read_registers@i 00AD  
                               ?_handle_read_registers 0057  
                                            _vfpfcnvrt 0FB7  
                                  __end_of_nmbs_create 0F28  
                                           _ADCON0bits 0111  
                            is_a_new_value@actual_regs 0028  
                                      ??_msg_buf_reset 0020  
                                 ??_EUSART1_is_tx_done 0020  
                                DATAEE_WriteByte@bData 0022  
                                         send_msg@nmbs 0041  
                    recv_res_header@req_transaction_id 0040  
                        recv_write_single_coil_res@err 0051  
                                            m_memset@c 0022  
                                            m_memset@p 0026  
                                            m_memset@s 0020  
   handle_write_single_register@nanomodbus$F2271@value 0053  
                                    ?_DATAEE_WriteByte 0020  
                                check_error_modbus@err 0075  
                                    ?_DATAEE_WriteWord 0024  
                                        _handle_req_fc 0D6E  
                                EUSART1_Read@readValue 0020  
                                   ??_DATAEE_WriteByte 0023  
               handler_read_holding_registers@quantity 0022  
                                   ??_DATAEE_WriteWord 0028  
                                     ?___funcs_on_exit 0075  
                                             __Exit@ec 0020  
                                       ??_write_serial 0029  
                                     ?_msg_state_reset 0075  
                                           vfprintf@ap 0035  
                                           vfprintf@fp 0031  
                              ??_OSCILLATOR_Initialize 0020  
                                    ??_TMR0_StartTimer 0075  
                                           ?_vfpfcnvrt 0029  
       handler_read_holding_registers@server_registers 002A  
                                            recv@count 0032  
                            ??_EUSART1_SetErrorHandler 0022  
                  __end_of_EUSART1_DefaultErrorHandler 0898  
                          _EUSART1_DefaultErrorHandler 0895  
                                           _T0CON0bits 059E  
                                            send@count 0030  
                                     i1_TMR0_StopTimer 0898  
                          __end_of_EUSART1_is_tx_ready 0969  
                                             __ptext10 0ACC  
                                             __ptext11 0A2C  
                                             __ptext20 067C  
                                             __ptext12 025A  
                                             __ptext21 0F28  
                                             __ptext13 0EA0  
                                             __ptext30 0B4B  
                                             __ptext22 0893  
                                             __ptext14 0554  
                                             __ptext31 0A94  
                                             __ptext23 089B  
                                             __ptext15 0992  
                                             __ptext40 0B70  
                                             __ptext32 0E5D  
                                             __ptext24 095C  
                                             __ptext16 0984  
                                             __ptext41 0A79  
                                             __ptext33 0BC8  
                                             __ptext25 08AE  
                                             __ptext17 004C  
                                             __ptext50 0B07  
                                             __ptext42 090D  
                                             __ptext34 0DE2  
                                             __ptext26 08FA  
                                             __ptext18 0AAF  
                                             __ptext51 09AF  
                                             __ptext43 0CC8  
                                             __ptext35 0943  
                                             __ptext27 04D5  
                                             __ptext19 0D36  
                                             __ptext60 09E8  
                                             __ptext52 09C1  
                                             __ptext44 0C92  
                                             __ptext36 06DC  
                                             __ptext28 03BF  
                                             __ptext61 09FD  
                                             __ptext53 092C  
                                             __ptext45 0B99  
                                             __ptext37 0CFE  
                                             __ptext29 0F6E  
                                             __ptext70 08D9  
                                             __ptext62 0891  
                                             __ptext54 0921  
                                             __ptext46 0EE3  
                                             __ptext38 0917  
                                             __ptext71 08D1  
                                             __ptext63 08E9  
                                             __ptext55 088E  
                                             __ptext47 031B  
                                             __ptext39 078F  
                                             __ptext80 08A2  
                                             __ptext72 08C9  
                                             __ptext64 0903  
                                             __ptext56 0DA6  
                                             __ptext48 061B  
                                             __ptext81 0898  
                                             __ptext73 0A5E  
                                             __ptext65 0AE9  
                                             __ptext57 0A14  
                                             __ptext49 09D4  
                                             __ptext82 0BF9  
                                             __ptext74 08B7  
                                             __ptext66 08F1  
                                             __ptext58 088D  
                                             __ptext83 089E  
                                             __ptext75 0B28  
                                             __ptext67 08A6  
                                             __ptext59 08AA  
                                             __ptext84 088C  
                                             __ptext76 0976  
                                             __ptext68 0C2B  
                                             __ptext85 0895  
                                             __ptext69 08E1  
                                             __ptext86 0C5E  
                                             __ptext78 0937  
                                             __ptext87 08B2  
                                             __ptext79 094F  
                                             __ptext88 088F  
                                          _read_serial 0DE2  
                              TMR0_WriteTimer@timerVal 0075  
                          DATAEE_WriteByte@GIEBitValue 0023  
                                             _m_memset 0A14  
                                    ??_TMR0_WriteTimer 0075  
                                       ?_handle_req_fc 0075  
                           setBaudRateEUSART1@baudRate 0020  
                                            put_1@data 0020  
                 __end_of_TMR0_DefaultInterruptHandler 095C  
                         _TMR0_DefaultInterruptHandler 094F  
                                            put_2@data 0020  
                recv_write_single_register_res@address 0048  
                                    ??_DATAEE_ReadByte 0022  
                                            put_1@nmbs 0022  
                                            put_2@nmbs 0023  
                                    ??_DATAEE_ReadWord 0024  
                                             _send_msg 0D36  
 handle_write_single_register@nanomodbus$F2271@address 0051  
                                           _RC1STAbits 011D  
       EUSART1_SetOverrunErrorHandler@interruptHandler 0020  
                                          _nmbs_create 0EE3  
                                          get_1@result 0021  
                                          get_2@result 0029  
                           ??_ADCC_GetSingleConversion 0022  
                                             int$flags 007E  
                                      nmbs_create@nmbs 002B  
                                             _vfprintf 0A44  
                         ??_recv_write_single_coil_res 004C  
                          write_serial@byte_timeout_ms 0024  
                   __end_of_INTERRUPT_InterruptManager 001B  
                           _INTERRUPT_InterruptManager 0004  
                                            printf@fmt 0039  
                        _handle_write_single_coil$1436 002B  
                                     read_serial@count 0022  
                                             main@nmbs 0120  
                          _EUSART1_FramingErrorHandler 00EC  
                                  _EUSART1_Receive_ISR 0BF9  
                __end_of_handle_read_holding_registers 0992  
                        _handle_read_holding_registers 0984  
                    handle_read_holding_registers@nmbs 0061  
                           __end_of_send_exception_msg 0ACC  
                                           _INTCONbits 000B  
                                          _NVMCON1bits 081E  
                                DATAEE_WriteWord@bData 0026  
                                             exit@code 0022  
                                           _FVRCONbits 090C  
                                             recv@nmbs 0035  
                                    ??_recv_msg_header 0037  
                                             intlevel1 0000  
                                     ??_TMR0_StopTimer 0020  
                          handle_write_single_coil@arg 0024  
                                             send@nmbs 003B  
                                    ??_recv_req_header 003B  
                                    ??_recv_msg_footer 0036  
                    handler_read_holding_registers@arg 0026  
                                 ?_EUSART1_Receive_ISR 0075  
                       ??_handler_read_input_registers 0027  
                                    ??_recv_res_header 003E  
                              ?_PIN_MANAGER_Initialize 0075  
                           __end_of_nmbs_server_create 0BC8  
               __end_of_EUSART1_SetOverrunErrorHandler 08E1  
                       _EUSART1_SetOverrunErrorHandler 08D9  
                      write_serial@number_of_byte_send 002A  
                          nmbs_server_create@callbacks 002E  
                        ?_TMR0_DefaultInterruptHandler 0075  
                                             printf@ap 003B  
       EUSART1_SetFramingErrorHandler@interruptHandler 0020  
                                    ??_TxDeviceDisable 0020  
                                          ??_vfpfcnvrt 002D  
                                   _eusart1RxLastError 006C  
                                        __pstringtext1 0803  
                                        __pstringtext2 0804  
                                        __pstringtext3 0805  
                                        __pstringtext4 07D9  
                                        __pstringtext5 07FF  
                                        __pstringtext6 0000  
                                       _FVR_Initialize 08A6  
                             recv_read_registers_res@i 0052  
                           ??_handle_write_single_coil 0025  
                                      _TMR0_Initialize 09FD  
                             handle_read_registers@err 00B1  
                                 __end_of_write_serial 0F6E  
                  handler_read_input_registers@address 0020  
                             ?_recv_read_registers_res 0048  
                                       read_serial@arg 0028  
                                       read_serial@buf 0021  
                                           _TX1STAbits 011E  
                                    ?_UART_ClearBuffer 0075  
                                      ??_handle_req_fc 0062  
                                ??_EUSART1_Receive_ISR 007A  
                       __end_of_PIN_MANAGER_Initialize 0B07  
                                    ??_ADCC_Initialize 0020  
                                   ??_UART_ClearBuffer 0020  
                 handler_read_input_registers@quantity 0022  
                     ??_recv_write_single_register_res 004C  
                      ?_recv_write_single_register_res 0048  
                       __end_of_NMBS_BROADCAST_ADDRESS 0806  
                              ??_EUSART1_RxDataHandler 0076  
                                   put_res_header@nmbs 0029  
                  handler_read_input_registers@unit_id 0025  
                              ??_handle_read_registers 0059  
                                __end_of_nmbs_crc_calc 073A  
