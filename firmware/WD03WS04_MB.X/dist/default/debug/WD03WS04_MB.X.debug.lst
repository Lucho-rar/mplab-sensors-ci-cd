

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Mar 27 10:13:25 2025

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F18425
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK4,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    16                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,noexec
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,noexec
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    21                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    22                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2
    57                           	psect	text31,local,class=CODE,merge=1,delta=2
    58                           	psect	text32,local,class=CODE,merge=1,delta=2
    59                           	psect	text33,local,class=CODE,merge=1,delta=2
    60                           	psect	text34,local,class=CODE,merge=1,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,delta=2
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	psect	text52,local,class=CODE,merge=1,delta=2
    79                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
    80                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
    81                           	psect	text55,local,class=CODE,merge=1,delta=2,group=2
    82                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text57,local,class=CODE,merge=1,delta=2
    84                           	psect	text58,local,class=CODE,merge=1,delta=2
    85                           	psect	text59,local,class=CODE,merge=1,delta=2
    86                           	psect	text60,local,class=CODE,merge=1,delta=2
    87                           	psect	text61,local,class=CODE,merge=1,delta=2
    88                           	psect	text62,local,class=CODE,merge=1,delta=2
    89                           	psect	text63,local,class=CODE,merge=1,delta=2
    90                           	psect	text64,local,class=CODE,merge=1,delta=2
    91                           	psect	text65,local,class=CODE,merge=1,delta=2
    92                           	psect	text66,local,class=CODE,merge=1,delta=2
    93                           	psect	text67,local,class=CODE,merge=1,delta=2
    94                           	psect	text68,local,class=CODE,merge=1,delta=2
    95                           	psect	text69,local,class=CODE,merge=1,delta=2
    96                           	psect	text70,local,class=CODE,merge=1,delta=2
    97                           	psect	text71,local,class=CODE,merge=1,delta=2
    98                           	psect	text72,local,class=CODE,merge=1,delta=2
    99                           	psect	text73,local,class=CODE,merge=1,delta=2
   100                           	psect	text74,local,class=CODE,merge=1,delta=2
   101                           	psect	text75,local,class=CODE,merge=1,delta=2
   102                           	psect	text76,local,class=CODE,merge=1,delta=2
   103                           	psect	text77,local,class=CODE,merge=1,delta=2
   104                           	psect	text78,local,class=CODE,merge=1,delta=2
   105                           	psect	intentry,global,class=CODE,delta=2
   106                           	psect	text80,local,class=CODE,merge=1,delta=2
   107                           	psect	text81,local,class=CODE,merge=1,delta=2
   108                           	psect	text82,local,class=CODE,merge=1,delta=2
   109                           	psect	text83,local,class=CODE,merge=1,delta=2
   110                           	psect	text84,local,class=CODE,merge=1,delta=2
   111                           	psect	text85,local,class=CODE,merge=1,delta=2
   112                           	psect	text86,local,class=CODE,merge=1,delta=2
   113                           	psect	text87,local,class=CODE,merge=1,delta=2
   114                           	psect	text88,local,class=CODE,merge=1,delta=2
   115                           	psect	text89,local,class=CODE,merge=1,delta=2
   116                           	psect	text90,local,class=CODE,merge=1,delta=2
   117                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   118                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   119                           	dabs	1,0x620,48
   120                           	dabs	1,0x5A0,80
   121                           	dabs	1,0x56E,2
   122                           	dabs	1,0x236E,0,_builtin
   123                           	dabs	1,0x7E,2
   124  0000                     
   125                           ; Generated 19/07/2022 GMT
   126                           ; 
   127                           ; Copyright © 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
   128                           ; All rights reserved.
   129                           ; 
   130                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   131                           ; 
   132                           ; Redistribution and use in source and binary forms, with or without modification, are
   133                           ; permitted provided that the following conditions are met:
   134                           ; 
   135                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   136                           ;        conditions and the following disclaimer.
   137                           ; 
   138                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   139                           ;        of conditions and the following disclaimer in the documentation and/or other
   140                           ;        materials provided with the distribution. Publication is not required when
   141                           ;        this file is used in an embedded application.
   142                           ; 
   143                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   144                           ;        software without specific prior written permission.
   145                           ; 
   146                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   147                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   148                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   149                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   150                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   151                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   152                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   153                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   154                           ; 
   155                           ; 
   156                           ; Code-generator required, PIC16F18425 Definitions
   157                           ; 
   158                           ; SFR Addresses
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000E                     	;# 
   173  0012                     	;# 
   174  0014                     	;# 
   175  0018                     	;# 
   176  001A                     	;# 
   177  008C                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  008E                     	;# 
   182  008F                     	;# 
   183  0090                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0092                     	;# 
   188  0093                     	;# 
   189  0094                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009A                     	;# 
   198  009B                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  010C                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  010F                     	;# 
   211  0110                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0113                     	;# 
   215  0114                     	;# 
   216  0115                     	;# 
   217  0116                     	;# 
   218  0117                     	;# 
   219  0118                     	;# 
   220  0119                     	;# 
   221  0119                     	;# 
   222  0119                     	;# 
   223  011A                     	;# 
   224  011A                     	;# 
   225  011A                     	;# 
   226  011B                     	;# 
   227  011B                     	;# 
   228  011B                     	;# 
   229  011B                     	;# 
   230  011B                     	;# 
   231  011C                     	;# 
   232  011C                     	;# 
   233  011C                     	;# 
   234  011D                     	;# 
   235  011D                     	;# 
   236  011D                     	;# 
   237  011E                     	;# 
   238  011E                     	;# 
   239  011E                     	;# 
   240  011F                     	;# 
   241  011F                     	;# 
   242  011F                     	;# 
   243  011F                     	;# 
   244  011F                     	;# 
   245  018C                     	;# 
   246  018D                     	;# 
   247  018E                     	;# 
   248  018F                     	;# 
   249  0190                     	;# 
   250  0191                     	;# 
   251  0192                     	;# 
   252  0196                     	;# 
   253  0197                     	;# 
   254  0198                     	;# 
   255  0199                     	;# 
   256  019A                     	;# 
   257  019B                     	;# 
   258  019C                     	;# 
   259  020C                     	;# 
   260  020D                     	;# 
   261  020E                     	;# 
   262  020E                     	;# 
   263  020F                     	;# 
   264  020F                     	;# 
   265  0210                     	;# 
   266  0210                     	;# 
   267  0211                     	;# 
   268  0211                     	;# 
   269  0212                     	;# 
   270  0213                     	;# 
   271  0214                     	;# 
   272  0214                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0216                     	;# 
   276  0216                     	;# 
   277  0217                     	;# 
   278  0217                     	;# 
   279  0218                     	;# 
   280  0219                     	;# 
   281  021A                     	;# 
   282  021A                     	;# 
   283  021B                     	;# 
   284  021B                     	;# 
   285  021C                     	;# 
   286  021C                     	;# 
   287  021D                     	;# 
   288  021D                     	;# 
   289  021E                     	;# 
   290  021F                     	;# 
   291  028C                     	;# 
   292  028C                     	;# 
   293  028D                     	;# 
   294  028D                     	;# 
   295  028E                     	;# 
   296  028F                     	;# 
   297  0290                     	;# 
   298  0291                     	;# 
   299  0292                     	;# 
   300  0292                     	;# 
   301  0293                     	;# 
   302  0293                     	;# 
   303  0294                     	;# 
   304  0295                     	;# 
   305  0296                     	;# 
   306  0297                     	;# 
   307  0298                     	;# 
   308  0298                     	;# 
   309  0299                     	;# 
   310  0299                     	;# 
   311  029A                     	;# 
   312  029B                     	;# 
   313  029C                     	;# 
   314  029D                     	;# 
   315  029F                     	;# 
   316  030C                     	;# 
   317  030C                     	;# 
   318  030D                     	;# 
   319  030E                     	;# 
   320  030F                     	;# 
   321  0310                     	;# 
   322  0310                     	;# 
   323  0311                     	;# 
   324  0312                     	;# 
   325  0313                     	;# 
   326  0314                     	;# 
   327  0314                     	;# 
   328  0315                     	;# 
   329  0316                     	;# 
   330  0317                     	;# 
   331  0318                     	;# 
   332  0318                     	;# 
   333  0319                     	;# 
   334  031A                     	;# 
   335  031B                     	;# 
   336  038C                     	;# 
   337  038C                     	;# 
   338  038D                     	;# 
   339  038E                     	;# 
   340  0390                     	;# 
   341  0390                     	;# 
   342  0391                     	;# 
   343  0392                     	;# 
   344  048C                     	;# 
   345  048C                     	;# 
   346  048D                     	;# 
   347  048E                     	;# 
   348  048F                     	;# 
   349  048F                     	;# 
   350  0490                     	;# 
   351  0491                     	;# 
   352  0492                     	;# 
   353  0492                     	;# 
   354  0493                     	;# 
   355  0494                     	;# 
   356  0495                     	;# 
   357  0495                     	;# 
   358  0496                     	;# 
   359  0497                     	;# 
   360  0498                     	;# 
   361  0499                     	;# 
   362  049A                     	;# 
   363  049B                     	;# 
   364  049C                     	;# 
   365  049D                     	;# 
   366  058C                     	;# 
   367  058C                     	;# 
   368  058D                     	;# 
   369  058E                     	;# 
   370  058F                     	;# 
   371  058F                     	;# 
   372  0590                     	;# 
   373  0591                     	;# 
   374  0592                     	;# 
   375  0593                     	;# 
   376  059C                     	;# 
   377  059C                     	;# 
   378  059D                     	;# 
   379  059D                     	;# 
   380  059E                     	;# 
   381  059F                     	;# 
   382  060C                     	;# 
   383  060C                     	;# 
   384  060D                     	;# 
   385  060D                     	;# 
   386  060E                     	;# 
   387  060F                     	;# 
   388  0610                     	;# 
   389  0611                     	;# 
   390  0612                     	;# 
   391  0613                     	;# 
   392  0614                     	;# 
   393  0616                     	;# 
   394  0616                     	;# 
   395  0617                     	;# 
   396  0617                     	;# 
   397  0618                     	;# 
   398  0619                     	;# 
   399  061A                     	;# 
   400  061B                     	;# 
   401  061C                     	;# 
   402  061D                     	;# 
   403  061E                     	;# 
   404  070C                     	;# 
   405  070D                     	;# 
   406  070E                     	;# 
   407  070F                     	;# 
   408  0710                     	;# 
   409  0711                     	;# 
   410  0712                     	;# 
   411  0713                     	;# 
   412  0714                     	;# 
   413  0716                     	;# 
   414  0717                     	;# 
   415  0718                     	;# 
   416  0719                     	;# 
   417  071A                     	;# 
   418  071B                     	;# 
   419  071C                     	;# 
   420  071D                     	;# 
   421  071E                     	;# 
   422  0796                     	;# 
   423  0797                     	;# 
   424  0798                     	;# 
   425  0799                     	;# 
   426  079A                     	;# 
   427  079B                     	;# 
   428  079C                     	;# 
   429  079D                     	;# 
   430  080C                     	;# 
   431  080D                     	;# 
   432  080E                     	;# 
   433  080F                     	;# 
   434  0810                     	;# 
   435  0811                     	;# 
   436  0812                     	;# 
   437  0813                     	;# 
   438  0814                     	;# 
   439  081A                     	;# 
   440  081A                     	;# 
   441  081B                     	;# 
   442  081C                     	;# 
   443  081C                     	;# 
   444  081D                     	;# 
   445  081E                     	;# 
   446  081F                     	;# 
   447  088C                     	;# 
   448  088D                     	;# 
   449  088E                     	;# 
   450  088F                     	;# 
   451  0890                     	;# 
   452  0891                     	;# 
   453  0892                     	;# 
   454  0893                     	;# 
   455  0895                     	;# 
   456  0896                     	;# 
   457  0897                     	;# 
   458  0898                     	;# 
   459  0899                     	;# 
   460  089A                     	;# 
   461  089B                     	;# 
   462  090C                     	;# 
   463  090E                     	;# 
   464  090F                     	;# 
   465  091F                     	;# 
   466  098F                     	;# 
   467  098F                     	;# 
   468  0990                     	;# 
   469  0991                     	;# 
   470  0992                     	;# 
   471  0993                     	;# 
   472  0994                     	;# 
   473  0995                     	;# 
   474  0996                     	;# 
   475  0997                     	;# 
   476  1E0F                     	;# 
   477  1E10                     	;# 
   478  1E11                     	;# 
   479  1E12                     	;# 
   480  1E13                     	;# 
   481  1E14                     	;# 
   482  1E15                     	;# 
   483  1E16                     	;# 
   484  1E17                     	;# 
   485  1E18                     	;# 
   486  1E19                     	;# 
   487  1E1A                     	;# 
   488  1E1B                     	;# 
   489  1E1C                     	;# 
   490  1E1D                     	;# 
   491  1E1E                     	;# 
   492  1E1F                     	;# 
   493  1E20                     	;# 
   494  1E21                     	;# 
   495  1E22                     	;# 
   496  1E23                     	;# 
   497  1E24                     	;# 
   498  1E25                     	;# 
   499  1E26                     	;# 
   500  1E27                     	;# 
   501  1E28                     	;# 
   502  1E29                     	;# 
   503  1E2A                     	;# 
   504  1E2B                     	;# 
   505  1E2C                     	;# 
   506  1E2D                     	;# 
   507  1E2E                     	;# 
   508  1E2F                     	;# 
   509  1E30                     	;# 
   510  1E31                     	;# 
   511  1E32                     	;# 
   512  1E33                     	;# 
   513  1E34                     	;# 
   514  1E35                     	;# 
   515  1E36                     	;# 
   516  1E37                     	;# 
   517  1E8F                     	;# 
   518  1E90                     	;# 
   519  1E91                     	;# 
   520  1E92                     	;# 
   521  1E93                     	;# 
   522  1E94                     	;# 
   523  1E95                     	;# 
   524  1E96                     	;# 
   525  1E97                     	;# 
   526  1E9C                     	;# 
   527  1E9D                     	;# 
   528  1E9E                     	;# 
   529  1EA1                     	;# 
   530  1EA2                     	;# 
   531  1EA3                     	;# 
   532  1EA4                     	;# 
   533  1EA9                     	;# 
   534  1EAA                     	;# 
   535  1EB1                     	;# 
   536  1EB2                     	;# 
   537  1EB8                     	;# 
   538  1EB9                     	;# 
   539  1EBA                     	;# 
   540  1EBB                     	;# 
   541  1EBC                     	;# 
   542  1EBD                     	;# 
   543  1EBE                     	;# 
   544  1EC3                     	;# 
   545  1EC5                     	;# 
   546  1EC6                     	;# 
   547  1EC7                     	;# 
   548  1EC8                     	;# 
   549  1EC9                     	;# 
   550  1ECA                     	;# 
   551  1ECB                     	;# 
   552  1ECC                     	;# 
   553  1F10                     	;# 
   554  1F11                     	;# 
   555  1F12                     	;# 
   556  1F14                     	;# 
   557  1F15                     	;# 
   558  1F20                     	;# 
   559  1F21                     	;# 
   560  1F22                     	;# 
   561  1F23                     	;# 
   562  1F24                     	;# 
   563  1F25                     	;# 
   564  1F38                     	;# 
   565  1F39                     	;# 
   566  1F3A                     	;# 
   567  1F3B                     	;# 
   568  1F3C                     	;# 
   569  1F3D                     	;# 
   570  1F3E                     	;# 
   571  1F3F                     	;# 
   572  1F4E                     	;# 
   573  1F4F                     	;# 
   574  1F50                     	;# 
   575  1F51                     	;# 
   576  1F52                     	;# 
   577  1F53                     	;# 
   578  1F54                     	;# 
   579  1F55                     	;# 
   580  1FE4                     	;# 
   581  1FE5                     	;# 
   582  1FE6                     	;# 
   583  1FE7                     	;# 
   584  1FE8                     	;# 
   585  1FE8                     	;# 
   586  1FE9                     	;# 
   587  1FEA                     	;# 
   588  1FEB                     	;# 
   589  1FED                     	;# 
   590  1FEE                     	;# 
   591  1FEF                     	;# 
   592  0000                     	;# 
   593  0001                     	;# 
   594  0002                     	;# 
   595  0003                     	;# 
   596  0004                     	;# 
   597  0005                     	;# 
   598  0006                     	;# 
   599  0007                     	;# 
   600  0008                     	;# 
   601  0009                     	;# 
   602  000A                     	;# 
   603  000B                     	;# 
   604  000C                     	;# 
   605  000E                     	;# 
   606  0012                     	;# 
   607  0014                     	;# 
   608  0018                     	;# 
   609  001A                     	;# 
   610  008C                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  008E                     	;# 
   615  008F                     	;# 
   616  0090                     	;# 
   617  0090                     	;# 
   618  0091                     	;# 
   619  0092                     	;# 
   620  0092                     	;# 
   621  0093                     	;# 
   622  0094                     	;# 
   623  0094                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0096                     	;# 
   627  0097                     	;# 
   628  0098                     	;# 
   629  0099                     	;# 
   630  009A                     	;# 
   631  009B                     	;# 
   632  009B                     	;# 
   633  009C                     	;# 
   634  009D                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  009F                     	;# 
   638  010C                     	;# 
   639  010C                     	;# 
   640  010D                     	;# 
   641  010E                     	;# 
   642  010F                     	;# 
   643  010F                     	;# 
   644  0110                     	;# 
   645  0111                     	;# 
   646  0112                     	;# 
   647  0113                     	;# 
   648  0114                     	;# 
   649  0115                     	;# 
   650  0116                     	;# 
   651  0117                     	;# 
   652  0118                     	;# 
   653  0119                     	;# 
   654  0119                     	;# 
   655  0119                     	;# 
   656  011A                     	;# 
   657  011A                     	;# 
   658  011A                     	;# 
   659  011B                     	;# 
   660  011B                     	;# 
   661  011B                     	;# 
   662  011B                     	;# 
   663  011B                     	;# 
   664  011C                     	;# 
   665  011C                     	;# 
   666  011C                     	;# 
   667  011D                     	;# 
   668  011D                     	;# 
   669  011D                     	;# 
   670  011E                     	;# 
   671  011E                     	;# 
   672  011E                     	;# 
   673  011F                     	;# 
   674  011F                     	;# 
   675  011F                     	;# 
   676  011F                     	;# 
   677  011F                     	;# 
   678  018C                     	;# 
   679  018D                     	;# 
   680  018E                     	;# 
   681  018F                     	;# 
   682  0190                     	;# 
   683  0191                     	;# 
   684  0192                     	;# 
   685  0196                     	;# 
   686  0197                     	;# 
   687  0198                     	;# 
   688  0199                     	;# 
   689  019A                     	;# 
   690  019B                     	;# 
   691  019C                     	;# 
   692  020C                     	;# 
   693  020D                     	;# 
   694  020E                     	;# 
   695  020E                     	;# 
   696  020F                     	;# 
   697  020F                     	;# 
   698  0210                     	;# 
   699  0210                     	;# 
   700  0211                     	;# 
   701  0211                     	;# 
   702  0212                     	;# 
   703  0213                     	;# 
   704  0214                     	;# 
   705  0214                     	;# 
   706  0215                     	;# 
   707  0215                     	;# 
   708  0216                     	;# 
   709  0216                     	;# 
   710  0217                     	;# 
   711  0217                     	;# 
   712  0218                     	;# 
   713  0219                     	;# 
   714  021A                     	;# 
   715  021A                     	;# 
   716  021B                     	;# 
   717  021B                     	;# 
   718  021C                     	;# 
   719  021C                     	;# 
   720  021D                     	;# 
   721  021D                     	;# 
   722  021E                     	;# 
   723  021F                     	;# 
   724  028C                     	;# 
   725  028C                     	;# 
   726  028D                     	;# 
   727  028D                     	;# 
   728  028E                     	;# 
   729  028F                     	;# 
   730  0290                     	;# 
   731  0291                     	;# 
   732  0292                     	;# 
   733  0292                     	;# 
   734  0293                     	;# 
   735  0293                     	;# 
   736  0294                     	;# 
   737  0295                     	;# 
   738  0296                     	;# 
   739  0297                     	;# 
   740  0298                     	;# 
   741  0298                     	;# 
   742  0299                     	;# 
   743  0299                     	;# 
   744  029A                     	;# 
   745  029B                     	;# 
   746  029C                     	;# 
   747  029D                     	;# 
   748  029F                     	;# 
   749  030C                     	;# 
   750  030C                     	;# 
   751  030D                     	;# 
   752  030E                     	;# 
   753  030F                     	;# 
   754  0310                     	;# 
   755  0310                     	;# 
   756  0311                     	;# 
   757  0312                     	;# 
   758  0313                     	;# 
   759  0314                     	;# 
   760  0314                     	;# 
   761  0315                     	;# 
   762  0316                     	;# 
   763  0317                     	;# 
   764  0318                     	;# 
   765  0318                     	;# 
   766  0319                     	;# 
   767  031A                     	;# 
   768  031B                     	;# 
   769  038C                     	;# 
   770  038C                     	;# 
   771  038D                     	;# 
   772  038E                     	;# 
   773  0390                     	;# 
   774  0390                     	;# 
   775  0391                     	;# 
   776  0392                     	;# 
   777  048C                     	;# 
   778  048C                     	;# 
   779  048D                     	;# 
   780  048E                     	;# 
   781  048F                     	;# 
   782  048F                     	;# 
   783  0490                     	;# 
   784  0491                     	;# 
   785  0492                     	;# 
   786  0492                     	;# 
   787  0493                     	;# 
   788  0494                     	;# 
   789  0495                     	;# 
   790  0495                     	;# 
   791  0496                     	;# 
   792  0497                     	;# 
   793  0498                     	;# 
   794  0499                     	;# 
   795  049A                     	;# 
   796  049B                     	;# 
   797  049C                     	;# 
   798  049D                     	;# 
   799  058C                     	;# 
   800  058C                     	;# 
   801  058D                     	;# 
   802  058E                     	;# 
   803  058F                     	;# 
   804  058F                     	;# 
   805  0590                     	;# 
   806  0591                     	;# 
   807  0592                     	;# 
   808  0593                     	;# 
   809  059C                     	;# 
   810  059C                     	;# 
   811  059D                     	;# 
   812  059D                     	;# 
   813  059E                     	;# 
   814  059F                     	;# 
   815  060C                     	;# 
   816  060C                     	;# 
   817  060D                     	;# 
   818  060D                     	;# 
   819  060E                     	;# 
   820  060F                     	;# 
   821  0610                     	;# 
   822  0611                     	;# 
   823  0612                     	;# 
   824  0613                     	;# 
   825  0614                     	;# 
   826  0616                     	;# 
   827  0616                     	;# 
   828  0617                     	;# 
   829  0617                     	;# 
   830  0618                     	;# 
   831  0619                     	;# 
   832  061A                     	;# 
   833  061B                     	;# 
   834  061C                     	;# 
   835  061D                     	;# 
   836  061E                     	;# 
   837  070C                     	;# 
   838  070D                     	;# 
   839  070E                     	;# 
   840  070F                     	;# 
   841  0710                     	;# 
   842  0711                     	;# 
   843  0712                     	;# 
   844  0713                     	;# 
   845  0714                     	;# 
   846  0716                     	;# 
   847  0717                     	;# 
   848  0718                     	;# 
   849  0719                     	;# 
   850  071A                     	;# 
   851  071B                     	;# 
   852  071C                     	;# 
   853  071D                     	;# 
   854  071E                     	;# 
   855  0796                     	;# 
   856  0797                     	;# 
   857  0798                     	;# 
   858  0799                     	;# 
   859  079A                     	;# 
   860  079B                     	;# 
   861  079C                     	;# 
   862  079D                     	;# 
   863  080C                     	;# 
   864  080D                     	;# 
   865  080E                     	;# 
   866  080F                     	;# 
   867  0810                     	;# 
   868  0811                     	;# 
   869  0812                     	;# 
   870  0813                     	;# 
   871  0814                     	;# 
   872  081A                     	;# 
   873  081A                     	;# 
   874  081B                     	;# 
   875  081C                     	;# 
   876  081C                     	;# 
   877  081D                     	;# 
   878  081E                     	;# 
   879  081F                     	;# 
   880  088C                     	;# 
   881  088D                     	;# 
   882  088E                     	;# 
   883  088F                     	;# 
   884  0890                     	;# 
   885  0891                     	;# 
   886  0892                     	;# 
   887  0893                     	;# 
   888  0895                     	;# 
   889  0896                     	;# 
   890  0897                     	;# 
   891  0898                     	;# 
   892  0899                     	;# 
   893  089A                     	;# 
   894  089B                     	;# 
   895  090C                     	;# 
   896  090E                     	;# 
   897  090F                     	;# 
   898  091F                     	;# 
   899  098F                     	;# 
   900  098F                     	;# 
   901  0990                     	;# 
   902  0991                     	;# 
   903  0992                     	;# 
   904  0993                     	;# 
   905  0994                     	;# 
   906  0995                     	;# 
   907  0996                     	;# 
   908  0997                     	;# 
   909  1E0F                     	;# 
   910  1E10                     	;# 
   911  1E11                     	;# 
   912  1E12                     	;# 
   913  1E13                     	;# 
   914  1E14                     	;# 
   915  1E15                     	;# 
   916  1E16                     	;# 
   917  1E17                     	;# 
   918  1E18                     	;# 
   919  1E19                     	;# 
   920  1E1A                     	;# 
   921  1E1B                     	;# 
   922  1E1C                     	;# 
   923  1E1D                     	;# 
   924  1E1E                     	;# 
   925  1E1F                     	;# 
   926  1E20                     	;# 
   927  1E21                     	;# 
   928  1E22                     	;# 
   929  1E23                     	;# 
   930  1E24                     	;# 
   931  1E25                     	;# 
   932  1E26                     	;# 
   933  1E27                     	;# 
   934  1E28                     	;# 
   935  1E29                     	;# 
   936  1E2A                     	;# 
   937  1E2B                     	;# 
   938  1E2C                     	;# 
   939  1E2D                     	;# 
   940  1E2E                     	;# 
   941  1E2F                     	;# 
   942  1E30                     	;# 
   943  1E31                     	;# 
   944  1E32                     	;# 
   945  1E33                     	;# 
   946  1E34                     	;# 
   947  1E35                     	;# 
   948  1E36                     	;# 
   949  1E37                     	;# 
   950  1E8F                     	;# 
   951  1E90                     	;# 
   952  1E91                     	;# 
   953  1E92                     	;# 
   954  1E93                     	;# 
   955  1E94                     	;# 
   956  1E95                     	;# 
   957  1E96                     	;# 
   958  1E97                     	;# 
   959  1E9C                     	;# 
   960  1E9D                     	;# 
   961  1E9E                     	;# 
   962  1EA1                     	;# 
   963  1EA2                     	;# 
   964  1EA3                     	;# 
   965  1EA4                     	;# 
   966  1EA9                     	;# 
   967  1EAA                     	;# 
   968  1EB1                     	;# 
   969  1EB2                     	;# 
   970  1EB8                     	;# 
   971  1EB9                     	;# 
   972  1EBA                     	;# 
   973  1EBB                     	;# 
   974  1EBC                     	;# 
   975  1EBD                     	;# 
   976  1EBE                     	;# 
   977  1EC3                     	;# 
   978  1EC5                     	;# 
   979  1EC6                     	;# 
   980  1EC7                     	;# 
   981  1EC8                     	;# 
   982  1EC9                     	;# 
   983  1ECA                     	;# 
   984  1ECB                     	;# 
   985  1ECC                     	;# 
   986  1F10                     	;# 
   987  1F11                     	;# 
   988  1F12                     	;# 
   989  1F14                     	;# 
   990  1F15                     	;# 
   991  1F20                     	;# 
   992  1F21                     	;# 
   993  1F22                     	;# 
   994  1F23                     	;# 
   995  1F24                     	;# 
   996  1F25                     	;# 
   997  1F38                     	;# 
   998  1F39                     	;# 
   999  1F3A                     	;# 
  1000  1F3B                     	;# 
  1001  1F3C                     	;# 
  1002  1F3D                     	;# 
  1003  1F3E                     	;# 
  1004  1F3F                     	;# 
  1005  1F4E                     	;# 
  1006  1F4F                     	;# 
  1007  1F50                     	;# 
  1008  1F51                     	;# 
  1009  1F52                     	;# 
  1010  1F53                     	;# 
  1011  1F54                     	;# 
  1012  1F55                     	;# 
  1013  1FE4                     	;# 
  1014  1FE5                     	;# 
  1015  1FE6                     	;# 
  1016  1FE7                     	;# 
  1017  1FE8                     	;# 
  1018  1FE8                     	;# 
  1019  1FE9                     	;# 
  1020  1FEA                     	;# 
  1021  1FEB                     	;# 
  1022  1FED                     	;# 
  1023  1FEE                     	;# 
  1024  1FEF                     	;# 
  1025  0000                     	;# 
  1026  0001                     	;# 
  1027  0002                     	;# 
  1028  0003                     	;# 
  1029  0004                     	;# 
  1030  0005                     	;# 
  1031  0006                     	;# 
  1032  0007                     	;# 
  1033  0008                     	;# 
  1034  0009                     	;# 
  1035  000A                     	;# 
  1036  000B                     	;# 
  1037  000C                     	;# 
  1038  000E                     	;# 
  1039  0012                     	;# 
  1040  0014                     	;# 
  1041  0018                     	;# 
  1042  001A                     	;# 
  1043  008C                     	;# 
  1044  008C                     	;# 
  1045  008D                     	;# 
  1046  008E                     	;# 
  1047  008E                     	;# 
  1048  008F                     	;# 
  1049  0090                     	;# 
  1050  0090                     	;# 
  1051  0091                     	;# 
  1052  0092                     	;# 
  1053  0092                     	;# 
  1054  0093                     	;# 
  1055  0094                     	;# 
  1056  0094                     	;# 
  1057  0095                     	;# 
  1058  0096                     	;# 
  1059  0096                     	;# 
  1060  0097                     	;# 
  1061  0098                     	;# 
  1062  0099                     	;# 
  1063  009A                     	;# 
  1064  009B                     	;# 
  1065  009B                     	;# 
  1066  009C                     	;# 
  1067  009D                     	;# 
  1068  009D                     	;# 
  1069  009E                     	;# 
  1070  009F                     	;# 
  1071  010C                     	;# 
  1072  010C                     	;# 
  1073  010D                     	;# 
  1074  010E                     	;# 
  1075  010F                     	;# 
  1076  010F                     	;# 
  1077  0110                     	;# 
  1078  0111                     	;# 
  1079  0112                     	;# 
  1080  0113                     	;# 
  1081  0114                     	;# 
  1082  0115                     	;# 
  1083  0116                     	;# 
  1084  0117                     	;# 
  1085  0118                     	;# 
  1086  0119                     	;# 
  1087  0119                     	;# 
  1088  0119                     	;# 
  1089  011A                     	;# 
  1090  011A                     	;# 
  1091  011A                     	;# 
  1092  011B                     	;# 
  1093  011B                     	;# 
  1094  011B                     	;# 
  1095  011B                     	;# 
  1096  011B                     	;# 
  1097  011C                     	;# 
  1098  011C                     	;# 
  1099  011C                     	;# 
  1100  011D                     	;# 
  1101  011D                     	;# 
  1102  011D                     	;# 
  1103  011E                     	;# 
  1104  011E                     	;# 
  1105  011E                     	;# 
  1106  011F                     	;# 
  1107  011F                     	;# 
  1108  011F                     	;# 
  1109  011F                     	;# 
  1110  011F                     	;# 
  1111  018C                     	;# 
  1112  018D                     	;# 
  1113  018E                     	;# 
  1114  018F                     	;# 
  1115  0190                     	;# 
  1116  0191                     	;# 
  1117  0192                     	;# 
  1118  0196                     	;# 
  1119  0197                     	;# 
  1120  0198                     	;# 
  1121  0199                     	;# 
  1122  019A                     	;# 
  1123  019B                     	;# 
  1124  019C                     	;# 
  1125  020C                     	;# 
  1126  020D                     	;# 
  1127  020E                     	;# 
  1128  020E                     	;# 
  1129  020F                     	;# 
  1130  020F                     	;# 
  1131  0210                     	;# 
  1132  0210                     	;# 
  1133  0211                     	;# 
  1134  0211                     	;# 
  1135  0212                     	;# 
  1136  0213                     	;# 
  1137  0214                     	;# 
  1138  0214                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0218                     	;# 
  1146  0219                     	;# 
  1147  021A                     	;# 
  1148  021A                     	;# 
  1149  021B                     	;# 
  1150  021B                     	;# 
  1151  021C                     	;# 
  1152  021C                     	;# 
  1153  021D                     	;# 
  1154  021D                     	;# 
  1155  021E                     	;# 
  1156  021F                     	;# 
  1157  028C                     	;# 
  1158  028C                     	;# 
  1159  028D                     	;# 
  1160  028D                     	;# 
  1161  028E                     	;# 
  1162  028F                     	;# 
  1163  0290                     	;# 
  1164  0291                     	;# 
  1165  0292                     	;# 
  1166  0292                     	;# 
  1167  0293                     	;# 
  1168  0293                     	;# 
  1169  0294                     	;# 
  1170  0295                     	;# 
  1171  0296                     	;# 
  1172  0297                     	;# 
  1173  0298                     	;# 
  1174  0298                     	;# 
  1175  0299                     	;# 
  1176  0299                     	;# 
  1177  029A                     	;# 
  1178  029B                     	;# 
  1179  029C                     	;# 
  1180  029D                     	;# 
  1181  029F                     	;# 
  1182  030C                     	;# 
  1183  030C                     	;# 
  1184  030D                     	;# 
  1185  030E                     	;# 
  1186  030F                     	;# 
  1187  0310                     	;# 
  1188  0310                     	;# 
  1189  0311                     	;# 
  1190  0312                     	;# 
  1191  0313                     	;# 
  1192  0314                     	;# 
  1193  0314                     	;# 
  1194  0315                     	;# 
  1195  0316                     	;# 
  1196  0317                     	;# 
  1197  0318                     	;# 
  1198  0318                     	;# 
  1199  0319                     	;# 
  1200  031A                     	;# 
  1201  031B                     	;# 
  1202  038C                     	;# 
  1203  038C                     	;# 
  1204  038D                     	;# 
  1205  038E                     	;# 
  1206  0390                     	;# 
  1207  0390                     	;# 
  1208  0391                     	;# 
  1209  0392                     	;# 
  1210  048C                     	;# 
  1211  048C                     	;# 
  1212  048D                     	;# 
  1213  048E                     	;# 
  1214  048F                     	;# 
  1215  048F                     	;# 
  1216  0490                     	;# 
  1217  0491                     	;# 
  1218  0492                     	;# 
  1219  0492                     	;# 
  1220  0493                     	;# 
  1221  0494                     	;# 
  1222  0495                     	;# 
  1223  0495                     	;# 
  1224  0496                     	;# 
  1225  0497                     	;# 
  1226  0498                     	;# 
  1227  0499                     	;# 
  1228  049A                     	;# 
  1229  049B                     	;# 
  1230  049C                     	;# 
  1231  049D                     	;# 
  1232  058C                     	;# 
  1233  058C                     	;# 
  1234  058D                     	;# 
  1235  058E                     	;# 
  1236  058F                     	;# 
  1237  058F                     	;# 
  1238  0590                     	;# 
  1239  0591                     	;# 
  1240  0592                     	;# 
  1241  0593                     	;# 
  1242  059C                     	;# 
  1243  059C                     	;# 
  1244  059D                     	;# 
  1245  059D                     	;# 
  1246  059E                     	;# 
  1247  059F                     	;# 
  1248  060C                     	;# 
  1249  060C                     	;# 
  1250  060D                     	;# 
  1251  060D                     	;# 
  1252  060E                     	;# 
  1253  060F                     	;# 
  1254  0610                     	;# 
  1255  0611                     	;# 
  1256  0612                     	;# 
  1257  0613                     	;# 
  1258  0614                     	;# 
  1259  0616                     	;# 
  1260  0616                     	;# 
  1261  0617                     	;# 
  1262  0617                     	;# 
  1263  0618                     	;# 
  1264  0619                     	;# 
  1265  061A                     	;# 
  1266  061B                     	;# 
  1267  061C                     	;# 
  1268  061D                     	;# 
  1269  061E                     	;# 
  1270  070C                     	;# 
  1271  070D                     	;# 
  1272  070E                     	;# 
  1273  070F                     	;# 
  1274  0710                     	;# 
  1275  0711                     	;# 
  1276  0712                     	;# 
  1277  0713                     	;# 
  1278  0714                     	;# 
  1279  0716                     	;# 
  1280  0717                     	;# 
  1281  0718                     	;# 
  1282  0719                     	;# 
  1283  071A                     	;# 
  1284  071B                     	;# 
  1285  071C                     	;# 
  1286  071D                     	;# 
  1287  071E                     	;# 
  1288  0796                     	;# 
  1289  0797                     	;# 
  1290  0798                     	;# 
  1291  0799                     	;# 
  1292  079A                     	;# 
  1293  079B                     	;# 
  1294  079C                     	;# 
  1295  079D                     	;# 
  1296  080C                     	;# 
  1297  080D                     	;# 
  1298  080E                     	;# 
  1299  080F                     	;# 
  1300  0810                     	;# 
  1301  0811                     	;# 
  1302  0812                     	;# 
  1303  0813                     	;# 
  1304  0814                     	;# 
  1305  081A                     	;# 
  1306  081A                     	;# 
  1307  081B                     	;# 
  1308  081C                     	;# 
  1309  081C                     	;# 
  1310  081D                     	;# 
  1311  081E                     	;# 
  1312  081F                     	;# 
  1313  088C                     	;# 
  1314  088D                     	;# 
  1315  088E                     	;# 
  1316  088F                     	;# 
  1317  0890                     	;# 
  1318  0891                     	;# 
  1319  0892                     	;# 
  1320  0893                     	;# 
  1321  0895                     	;# 
  1322  0896                     	;# 
  1323  0897                     	;# 
  1324  0898                     	;# 
  1325  0899                     	;# 
  1326  089A                     	;# 
  1327  089B                     	;# 
  1328  090C                     	;# 
  1329  090E                     	;# 
  1330  090F                     	;# 
  1331  091F                     	;# 
  1332  098F                     	;# 
  1333  098F                     	;# 
  1334  0990                     	;# 
  1335  0991                     	;# 
  1336  0992                     	;# 
  1337  0993                     	;# 
  1338  0994                     	;# 
  1339  0995                     	;# 
  1340  0996                     	;# 
  1341  0997                     	;# 
  1342  1E0F                     	;# 
  1343  1E10                     	;# 
  1344  1E11                     	;# 
  1345  1E12                     	;# 
  1346  1E13                     	;# 
  1347  1E14                     	;# 
  1348  1E15                     	;# 
  1349  1E16                     	;# 
  1350  1E17                     	;# 
  1351  1E18                     	;# 
  1352  1E19                     	;# 
  1353  1E1A                     	;# 
  1354  1E1B                     	;# 
  1355  1E1C                     	;# 
  1356  1E1D                     	;# 
  1357  1E1E                     	;# 
  1358  1E1F                     	;# 
  1359  1E20                     	;# 
  1360  1E21                     	;# 
  1361  1E22                     	;# 
  1362  1E23                     	;# 
  1363  1E24                     	;# 
  1364  1E25                     	;# 
  1365  1E26                     	;# 
  1366  1E27                     	;# 
  1367  1E28                     	;# 
  1368  1E29                     	;# 
  1369  1E2A                     	;# 
  1370  1E2B                     	;# 
  1371  1E2C                     	;# 
  1372  1E2D                     	;# 
  1373  1E2E                     	;# 
  1374  1E2F                     	;# 
  1375  1E30                     	;# 
  1376  1E31                     	;# 
  1377  1E32                     	;# 
  1378  1E33                     	;# 
  1379  1E34                     	;# 
  1380  1E35                     	;# 
  1381  1E36                     	;# 
  1382  1E37                     	;# 
  1383  1E8F                     	;# 
  1384  1E90                     	;# 
  1385  1E91                     	;# 
  1386  1E92                     	;# 
  1387  1E93                     	;# 
  1388  1E94                     	;# 
  1389  1E95                     	;# 
  1390  1E96                     	;# 
  1391  1E97                     	;# 
  1392  1E9C                     	;# 
  1393  1E9D                     	;# 
  1394  1E9E                     	;# 
  1395  1EA1                     	;# 
  1396  1EA2                     	;# 
  1397  1EA3                     	;# 
  1398  1EA4                     	;# 
  1399  1EA9                     	;# 
  1400  1EAA                     	;# 
  1401  1EB1                     	;# 
  1402  1EB2                     	;# 
  1403  1EB8                     	;# 
  1404  1EB9                     	;# 
  1405  1EBA                     	;# 
  1406  1EBB                     	;# 
  1407  1EBC                     	;# 
  1408  1EBD                     	;# 
  1409  1EBE                     	;# 
  1410  1EC3                     	;# 
  1411  1EC5                     	;# 
  1412  1EC6                     	;# 
  1413  1EC7                     	;# 
  1414  1EC8                     	;# 
  1415  1EC9                     	;# 
  1416  1ECA                     	;# 
  1417  1ECB                     	;# 
  1418  1ECC                     	;# 
  1419  1F10                     	;# 
  1420  1F11                     	;# 
  1421  1F12                     	;# 
  1422  1F14                     	;# 
  1423  1F15                     	;# 
  1424  1F20                     	;# 
  1425  1F21                     	;# 
  1426  1F22                     	;# 
  1427  1F23                     	;# 
  1428  1F24                     	;# 
  1429  1F25                     	;# 
  1430  1F38                     	;# 
  1431  1F39                     	;# 
  1432  1F3A                     	;# 
  1433  1F3B                     	;# 
  1434  1F3C                     	;# 
  1435  1F3D                     	;# 
  1436  1F3E                     	;# 
  1437  1F3F                     	;# 
  1438  1F4E                     	;# 
  1439  1F4F                     	;# 
  1440  1F50                     	;# 
  1441  1F51                     	;# 
  1442  1F52                     	;# 
  1443  1F53                     	;# 
  1444  1F54                     	;# 
  1445  1F55                     	;# 
  1446  1FE4                     	;# 
  1447  1FE5                     	;# 
  1448  1FE6                     	;# 
  1449  1FE7                     	;# 
  1450  1FE8                     	;# 
  1451  1FE8                     	;# 
  1452  1FE9                     	;# 
  1453  1FEA                     	;# 
  1454  1FEB                     	;# 
  1455  1FED                     	;# 
  1456  1FEE                     	;# 
  1457  1FEF                     	;# 
  1458  0000                     	;# 
  1459  0001                     	;# 
  1460  0002                     	;# 
  1461  0003                     	;# 
  1462  0004                     	;# 
  1463  0005                     	;# 
  1464  0006                     	;# 
  1465  0007                     	;# 
  1466  0008                     	;# 
  1467  0009                     	;# 
  1468  000A                     	;# 
  1469  000B                     	;# 
  1470  000C                     	;# 
  1471  000E                     	;# 
  1472  0012                     	;# 
  1473  0014                     	;# 
  1474  0018                     	;# 
  1475  001A                     	;# 
  1476  008C                     	;# 
  1477  008C                     	;# 
  1478  008D                     	;# 
  1479  008E                     	;# 
  1480  008E                     	;# 
  1481  008F                     	;# 
  1482  0090                     	;# 
  1483  0090                     	;# 
  1484  0091                     	;# 
  1485  0092                     	;# 
  1486  0092                     	;# 
  1487  0093                     	;# 
  1488  0094                     	;# 
  1489  0094                     	;# 
  1490  0095                     	;# 
  1491  0096                     	;# 
  1492  0096                     	;# 
  1493  0097                     	;# 
  1494  0098                     	;# 
  1495  0099                     	;# 
  1496  009A                     	;# 
  1497  009B                     	;# 
  1498  009B                     	;# 
  1499  009C                     	;# 
  1500  009D                     	;# 
  1501  009D                     	;# 
  1502  009E                     	;# 
  1503  009F                     	;# 
  1504  010C                     	;# 
  1505  010C                     	;# 
  1506  010D                     	;# 
  1507  010E                     	;# 
  1508  010F                     	;# 
  1509  010F                     	;# 
  1510  0110                     	;# 
  1511  0111                     	;# 
  1512  0112                     	;# 
  1513  0113                     	;# 
  1514  0114                     	;# 
  1515  0115                     	;# 
  1516  0116                     	;# 
  1517  0117                     	;# 
  1518  0118                     	;# 
  1519  0119                     	;# 
  1520  0119                     	;# 
  1521  0119                     	;# 
  1522  011A                     	;# 
  1523  011A                     	;# 
  1524  011A                     	;# 
  1525  011B                     	;# 
  1526  011B                     	;# 
  1527  011B                     	;# 
  1528  011B                     	;# 
  1529  011B                     	;# 
  1530  011C                     	;# 
  1531  011C                     	;# 
  1532  011C                     	;# 
  1533  011D                     	;# 
  1534  011D                     	;# 
  1535  011D                     	;# 
  1536  011E                     	;# 
  1537  011E                     	;# 
  1538  011E                     	;# 
  1539  011F                     	;# 
  1540  011F                     	;# 
  1541  011F                     	;# 
  1542  011F                     	;# 
  1543  011F                     	;# 
  1544  018C                     	;# 
  1545  018D                     	;# 
  1546  018E                     	;# 
  1547  018F                     	;# 
  1548  0190                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0196                     	;# 
  1552  0197                     	;# 
  1553  0198                     	;# 
  1554  0199                     	;# 
  1555  019A                     	;# 
  1556  019B                     	;# 
  1557  019C                     	;# 
  1558  020C                     	;# 
  1559  020D                     	;# 
  1560  020E                     	;# 
  1561  020E                     	;# 
  1562  020F                     	;# 
  1563  020F                     	;# 
  1564  0210                     	;# 
  1565  0210                     	;# 
  1566  0211                     	;# 
  1567  0211                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0214                     	;# 
  1571  0214                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0216                     	;# 
  1575  0216                     	;# 
  1576  0217                     	;# 
  1577  0217                     	;# 
  1578  0218                     	;# 
  1579  0219                     	;# 
  1580  021A                     	;# 
  1581  021A                     	;# 
  1582  021B                     	;# 
  1583  021B                     	;# 
  1584  021C                     	;# 
  1585  021C                     	;# 
  1586  021D                     	;# 
  1587  021D                     	;# 
  1588  021E                     	;# 
  1589  021F                     	;# 
  1590  028C                     	;# 
  1591  028C                     	;# 
  1592  028D                     	;# 
  1593  028D                     	;# 
  1594  028E                     	;# 
  1595  028F                     	;# 
  1596  0290                     	;# 
  1597  0291                     	;# 
  1598  0292                     	;# 
  1599  0292                     	;# 
  1600  0293                     	;# 
  1601  0293                     	;# 
  1602  0294                     	;# 
  1603  0295                     	;# 
  1604  0296                     	;# 
  1605  0297                     	;# 
  1606  0298                     	;# 
  1607  0298                     	;# 
  1608  0299                     	;# 
  1609  0299                     	;# 
  1610  029A                     	;# 
  1611  029B                     	;# 
  1612  029C                     	;# 
  1613  029D                     	;# 
  1614  029F                     	;# 
  1615  030C                     	;# 
  1616  030C                     	;# 
  1617  030D                     	;# 
  1618  030E                     	;# 
  1619  030F                     	;# 
  1620  0310                     	;# 
  1621  0310                     	;# 
  1622  0311                     	;# 
  1623  0312                     	;# 
  1624  0313                     	;# 
  1625  0314                     	;# 
  1626  0314                     	;# 
  1627  0315                     	;# 
  1628  0316                     	;# 
  1629  0317                     	;# 
  1630  0318                     	;# 
  1631  0318                     	;# 
  1632  0319                     	;# 
  1633  031A                     	;# 
  1634  031B                     	;# 
  1635  038C                     	;# 
  1636  038C                     	;# 
  1637  038D                     	;# 
  1638  038E                     	;# 
  1639  0390                     	;# 
  1640  0390                     	;# 
  1641  0391                     	;# 
  1642  0392                     	;# 
  1643  048C                     	;# 
  1644  048C                     	;# 
  1645  048D                     	;# 
  1646  048E                     	;# 
  1647  048F                     	;# 
  1648  048F                     	;# 
  1649  0490                     	;# 
  1650  0491                     	;# 
  1651  0492                     	;# 
  1652  0492                     	;# 
  1653  0493                     	;# 
  1654  0494                     	;# 
  1655  0495                     	;# 
  1656  0495                     	;# 
  1657  0496                     	;# 
  1658  0497                     	;# 
  1659  0498                     	;# 
  1660  0499                     	;# 
  1661  049A                     	;# 
  1662  049B                     	;# 
  1663  049C                     	;# 
  1664  049D                     	;# 
  1665  058C                     	;# 
  1666  058C                     	;# 
  1667  058D                     	;# 
  1668  058E                     	;# 
  1669  058F                     	;# 
  1670  058F                     	;# 
  1671  0590                     	;# 
  1672  0591                     	;# 
  1673  0592                     	;# 
  1674  0593                     	;# 
  1675  059C                     	;# 
  1676  059C                     	;# 
  1677  059D                     	;# 
  1678  059D                     	;# 
  1679  059E                     	;# 
  1680  059F                     	;# 
  1681  060C                     	;# 
  1682  060C                     	;# 
  1683  060D                     	;# 
  1684  060D                     	;# 
  1685  060E                     	;# 
  1686  060F                     	;# 
  1687  0610                     	;# 
  1688  0611                     	;# 
  1689  0612                     	;# 
  1690  0613                     	;# 
  1691  0614                     	;# 
  1692  0616                     	;# 
  1693  0616                     	;# 
  1694  0617                     	;# 
  1695  0617                     	;# 
  1696  0618                     	;# 
  1697  0619                     	;# 
  1698  061A                     	;# 
  1699  061B                     	;# 
  1700  061C                     	;# 
  1701  061D                     	;# 
  1702  061E                     	;# 
  1703  070C                     	;# 
  1704  070D                     	;# 
  1705  070E                     	;# 
  1706  070F                     	;# 
  1707  0710                     	;# 
  1708  0711                     	;# 
  1709  0712                     	;# 
  1710  0713                     	;# 
  1711  0714                     	;# 
  1712  0716                     	;# 
  1713  0717                     	;# 
  1714  0718                     	;# 
  1715  0719                     	;# 
  1716  071A                     	;# 
  1717  071B                     	;# 
  1718  071C                     	;# 
  1719  071D                     	;# 
  1720  071E                     	;# 
  1721  0796                     	;# 
  1722  0797                     	;# 
  1723  0798                     	;# 
  1724  0799                     	;# 
  1725  079A                     	;# 
  1726  079B                     	;# 
  1727  079C                     	;# 
  1728  079D                     	;# 
  1729  080C                     	;# 
  1730  080D                     	;# 
  1731  080E                     	;# 
  1732  080F                     	;# 
  1733  0810                     	;# 
  1734  0811                     	;# 
  1735  0812                     	;# 
  1736  0813                     	;# 
  1737  0814                     	;# 
  1738  081A                     	;# 
  1739  081A                     	;# 
  1740  081B                     	;# 
  1741  081C                     	;# 
  1742  081C                     	;# 
  1743  081D                     	;# 
  1744  081E                     	;# 
  1745  081F                     	;# 
  1746  088C                     	;# 
  1747  088D                     	;# 
  1748  088E                     	;# 
  1749  088F                     	;# 
  1750  0890                     	;# 
  1751  0891                     	;# 
  1752  0892                     	;# 
  1753  0893                     	;# 
  1754  0895                     	;# 
  1755  0896                     	;# 
  1756  0897                     	;# 
  1757  0898                     	;# 
  1758  0899                     	;# 
  1759  089A                     	;# 
  1760  089B                     	;# 
  1761  090C                     	;# 
  1762  090E                     	;# 
  1763  090F                     	;# 
  1764  091F                     	;# 
  1765  098F                     	;# 
  1766  098F                     	;# 
  1767  0990                     	;# 
  1768  0991                     	;# 
  1769  0992                     	;# 
  1770  0993                     	;# 
  1771  0994                     	;# 
  1772  0995                     	;# 
  1773  0996                     	;# 
  1774  0997                     	;# 
  1775  1E0F                     	;# 
  1776  1E10                     	;# 
  1777  1E11                     	;# 
  1778  1E12                     	;# 
  1779  1E13                     	;# 
  1780  1E14                     	;# 
  1781  1E15                     	;# 
  1782  1E16                     	;# 
  1783  1E17                     	;# 
  1784  1E18                     	;# 
  1785  1E19                     	;# 
  1786  1E1A                     	;# 
  1787  1E1B                     	;# 
  1788  1E1C                     	;# 
  1789  1E1D                     	;# 
  1790  1E1E                     	;# 
  1791  1E1F                     	;# 
  1792  1E20                     	;# 
  1793  1E21                     	;# 
  1794  1E22                     	;# 
  1795  1E23                     	;# 
  1796  1E24                     	;# 
  1797  1E25                     	;# 
  1798  1E26                     	;# 
  1799  1E27                     	;# 
  1800  1E28                     	;# 
  1801  1E29                     	;# 
  1802  1E2A                     	;# 
  1803  1E2B                     	;# 
  1804  1E2C                     	;# 
  1805  1E2D                     	;# 
  1806  1E2E                     	;# 
  1807  1E2F                     	;# 
  1808  1E30                     	;# 
  1809  1E31                     	;# 
  1810  1E32                     	;# 
  1811  1E33                     	;# 
  1812  1E34                     	;# 
  1813  1E35                     	;# 
  1814  1E36                     	;# 
  1815  1E37                     	;# 
  1816  1E8F                     	;# 
  1817  1E90                     	;# 
  1818  1E91                     	;# 
  1819  1E92                     	;# 
  1820  1E93                     	;# 
  1821  1E94                     	;# 
  1822  1E95                     	;# 
  1823  1E96                     	;# 
  1824  1E97                     	;# 
  1825  1E9C                     	;# 
  1826  1E9D                     	;# 
  1827  1E9E                     	;# 
  1828  1EA1                     	;# 
  1829  1EA2                     	;# 
  1830  1EA3                     	;# 
  1831  1EA4                     	;# 
  1832  1EA9                     	;# 
  1833  1EAA                     	;# 
  1834  1EB1                     	;# 
  1835  1EB2                     	;# 
  1836  1EB8                     	;# 
  1837  1EB9                     	;# 
  1838  1EBA                     	;# 
  1839  1EBB                     	;# 
  1840  1EBC                     	;# 
  1841  1EBD                     	;# 
  1842  1EBE                     	;# 
  1843  1EC3                     	;# 
  1844  1EC5                     	;# 
  1845  1EC6                     	;# 
  1846  1EC7                     	;# 
  1847  1EC8                     	;# 
  1848  1EC9                     	;# 
  1849  1ECA                     	;# 
  1850  1ECB                     	;# 
  1851  1ECC                     	;# 
  1852  1F10                     	;# 
  1853  1F11                     	;# 
  1854  1F12                     	;# 
  1855  1F14                     	;# 
  1856  1F15                     	;# 
  1857  1F20                     	;# 
  1858  1F21                     	;# 
  1859  1F22                     	;# 
  1860  1F23                     	;# 
  1861  1F24                     	;# 
  1862  1F25                     	;# 
  1863  1F38                     	;# 
  1864  1F39                     	;# 
  1865  1F3A                     	;# 
  1866  1F3B                     	;# 
  1867  1F3C                     	;# 
  1868  1F3D                     	;# 
  1869  1F3E                     	;# 
  1870  1F3F                     	;# 
  1871  1F4E                     	;# 
  1872  1F4F                     	;# 
  1873  1F50                     	;# 
  1874  1F51                     	;# 
  1875  1F52                     	;# 
  1876  1F53                     	;# 
  1877  1F54                     	;# 
  1878  1F55                     	;# 
  1879  1FE4                     	;# 
  1880  1FE5                     	;# 
  1881  1FE6                     	;# 
  1882  1FE7                     	;# 
  1883  1FE8                     	;# 
  1884  1FE8                     	;# 
  1885  1FE9                     	;# 
  1886  1FEA                     	;# 
  1887  1FEB                     	;# 
  1888  1FED                     	;# 
  1889  1FEE                     	;# 
  1890  1FEF                     	;# 
  1891  0000                     	;# 
  1892  0001                     	;# 
  1893  0002                     	;# 
  1894  0003                     	;# 
  1895  0004                     	;# 
  1896  0005                     	;# 
  1897  0006                     	;# 
  1898  0007                     	;# 
  1899  0008                     	;# 
  1900  0009                     	;# 
  1901  000A                     	;# 
  1902  000B                     	;# 
  1903  000C                     	;# 
  1904  000E                     	;# 
  1905  0012                     	;# 
  1906  0014                     	;# 
  1907  0018                     	;# 
  1908  001A                     	;# 
  1909  008C                     	;# 
  1910  008C                     	;# 
  1911  008D                     	;# 
  1912  008E                     	;# 
  1913  008E                     	;# 
  1914  008F                     	;# 
  1915  0090                     	;# 
  1916  0090                     	;# 
  1917  0091                     	;# 
  1918  0092                     	;# 
  1919  0092                     	;# 
  1920  0093                     	;# 
  1921  0094                     	;# 
  1922  0094                     	;# 
  1923  0095                     	;# 
  1924  0096                     	;# 
  1925  0096                     	;# 
  1926  0097                     	;# 
  1927  0098                     	;# 
  1928  0099                     	;# 
  1929  009A                     	;# 
  1930  009B                     	;# 
  1931  009B                     	;# 
  1932  009C                     	;# 
  1933  009D                     	;# 
  1934  009D                     	;# 
  1935  009E                     	;# 
  1936  009F                     	;# 
  1937  010C                     	;# 
  1938  010C                     	;# 
  1939  010D                     	;# 
  1940  010E                     	;# 
  1941  010F                     	;# 
  1942  010F                     	;# 
  1943  0110                     	;# 
  1944  0111                     	;# 
  1945  0112                     	;# 
  1946  0113                     	;# 
  1947  0114                     	;# 
  1948  0115                     	;# 
  1949  0116                     	;# 
  1950  0117                     	;# 
  1951  0118                     	;# 
  1952  0119                     	;# 
  1953  0119                     	;# 
  1954  0119                     	;# 
  1955  011A                     	;# 
  1956  011A                     	;# 
  1957  011A                     	;# 
  1958  011B                     	;# 
  1959  011B                     	;# 
  1960  011B                     	;# 
  1961  011B                     	;# 
  1962  011B                     	;# 
  1963  011C                     	;# 
  1964  011C                     	;# 
  1965  011C                     	;# 
  1966  011D                     	;# 
  1967  011D                     	;# 
  1968  011D                     	;# 
  1969  011E                     	;# 
  1970  011E                     	;# 
  1971  011E                     	;# 
  1972  011F                     	;# 
  1973  011F                     	;# 
  1974  011F                     	;# 
  1975  011F                     	;# 
  1976  011F                     	;# 
  1977  018C                     	;# 
  1978  018D                     	;# 
  1979  018E                     	;# 
  1980  018F                     	;# 
  1981  0190                     	;# 
  1982  0191                     	;# 
  1983  0192                     	;# 
  1984  0196                     	;# 
  1985  0197                     	;# 
  1986  0198                     	;# 
  1987  0199                     	;# 
  1988  019A                     	;# 
  1989  019B                     	;# 
  1990  019C                     	;# 
  1991  020C                     	;# 
  1992  020D                     	;# 
  1993  020E                     	;# 
  1994  020E                     	;# 
  1995  020F                     	;# 
  1996  020F                     	;# 
  1997  0210                     	;# 
  1998  0210                     	;# 
  1999  0211                     	;# 
  2000  0211                     	;# 
  2001  0212                     	;# 
  2002  0213                     	;# 
  2003  0214                     	;# 
  2004  0214                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0216                     	;# 
  2008  0216                     	;# 
  2009  0217                     	;# 
  2010  0217                     	;# 
  2011  0218                     	;# 
  2012  0219                     	;# 
  2013  021A                     	;# 
  2014  021A                     	;# 
  2015  021B                     	;# 
  2016  021B                     	;# 
  2017  021C                     	;# 
  2018  021C                     	;# 
  2019  021D                     	;# 
  2020  021D                     	;# 
  2021  021E                     	;# 
  2022  021F                     	;# 
  2023  028C                     	;# 
  2024  028C                     	;# 
  2025  028D                     	;# 
  2026  028D                     	;# 
  2027  028E                     	;# 
  2028  028F                     	;# 
  2029  0290                     	;# 
  2030  0291                     	;# 
  2031  0292                     	;# 
  2032  0292                     	;# 
  2033  0293                     	;# 
  2034  0293                     	;# 
  2035  0294                     	;# 
  2036  0295                     	;# 
  2037  0296                     	;# 
  2038  0297                     	;# 
  2039  0298                     	;# 
  2040  0298                     	;# 
  2041  0299                     	;# 
  2042  0299                     	;# 
  2043  029A                     	;# 
  2044  029B                     	;# 
  2045  029C                     	;# 
  2046  029D                     	;# 
  2047  029F                     	;# 
  2048  030C                     	;# 
  2049  030C                     	;# 
  2050  030D                     	;# 
  2051  030E                     	;# 
  2052  030F                     	;# 
  2053  0310                     	;# 
  2054  0310                     	;# 
  2055  0311                     	;# 
  2056  0312                     	;# 
  2057  0313                     	;# 
  2058  0314                     	;# 
  2059  0314                     	;# 
  2060  0315                     	;# 
  2061  0316                     	;# 
  2062  0317                     	;# 
  2063  0318                     	;# 
  2064  0318                     	;# 
  2065  0319                     	;# 
  2066  031A                     	;# 
  2067  031B                     	;# 
  2068  038C                     	;# 
  2069  038C                     	;# 
  2070  038D                     	;# 
  2071  038E                     	;# 
  2072  0390                     	;# 
  2073  0390                     	;# 
  2074  0391                     	;# 
  2075  0392                     	;# 
  2076  048C                     	;# 
  2077  048C                     	;# 
  2078  048D                     	;# 
  2079  048E                     	;# 
  2080  048F                     	;# 
  2081  048F                     	;# 
  2082  0490                     	;# 
  2083  0491                     	;# 
  2084  0492                     	;# 
  2085  0492                     	;# 
  2086  0493                     	;# 
  2087  0494                     	;# 
  2088  0495                     	;# 
  2089  0495                     	;# 
  2090  0496                     	;# 
  2091  0497                     	;# 
  2092  0498                     	;# 
  2093  0499                     	;# 
  2094  049A                     	;# 
  2095  049B                     	;# 
  2096  049C                     	;# 
  2097  049D                     	;# 
  2098  058C                     	;# 
  2099  058C                     	;# 
  2100  058D                     	;# 
  2101  058E                     	;# 
  2102  058F                     	;# 
  2103  058F                     	;# 
  2104  0590                     	;# 
  2105  0591                     	;# 
  2106  0592                     	;# 
  2107  0593                     	;# 
  2108  059C                     	;# 
  2109  059C                     	;# 
  2110  059D                     	;# 
  2111  059D                     	;# 
  2112  059E                     	;# 
  2113  059F                     	;# 
  2114  060C                     	;# 
  2115  060C                     	;# 
  2116  060D                     	;# 
  2117  060D                     	;# 
  2118  060E                     	;# 
  2119  060F                     	;# 
  2120  0610                     	;# 
  2121  0611                     	;# 
  2122  0612                     	;# 
  2123  0613                     	;# 
  2124  0614                     	;# 
  2125  0616                     	;# 
  2126  0616                     	;# 
  2127  0617                     	;# 
  2128  0617                     	;# 
  2129  0618                     	;# 
  2130  0619                     	;# 
  2131  061A                     	;# 
  2132  061B                     	;# 
  2133  061C                     	;# 
  2134  061D                     	;# 
  2135  061E                     	;# 
  2136  070C                     	;# 
  2137  070D                     	;# 
  2138  070E                     	;# 
  2139  070F                     	;# 
  2140  0710                     	;# 
  2141  0711                     	;# 
  2142  0712                     	;# 
  2143  0713                     	;# 
  2144  0714                     	;# 
  2145  0716                     	;# 
  2146  0717                     	;# 
  2147  0718                     	;# 
  2148  0719                     	;# 
  2149  071A                     	;# 
  2150  071B                     	;# 
  2151  071C                     	;# 
  2152  071D                     	;# 
  2153  071E                     	;# 
  2154  0796                     	;# 
  2155  0797                     	;# 
  2156  0798                     	;# 
  2157  0799                     	;# 
  2158  079A                     	;# 
  2159  079B                     	;# 
  2160  079C                     	;# 
  2161  079D                     	;# 
  2162  080C                     	;# 
  2163  080D                     	;# 
  2164  080E                     	;# 
  2165  080F                     	;# 
  2166  0810                     	;# 
  2167  0811                     	;# 
  2168  0812                     	;# 
  2169  0813                     	;# 
  2170  0814                     	;# 
  2171  081A                     	;# 
  2172  081A                     	;# 
  2173  081B                     	;# 
  2174  081C                     	;# 
  2175  081C                     	;# 
  2176  081D                     	;# 
  2177  081E                     	;# 
  2178  081F                     	;# 
  2179  088C                     	;# 
  2180  088D                     	;# 
  2181  088E                     	;# 
  2182  088F                     	;# 
  2183  0890                     	;# 
  2184  0891                     	;# 
  2185  0892                     	;# 
  2186  0893                     	;# 
  2187  0895                     	;# 
  2188  0896                     	;# 
  2189  0897                     	;# 
  2190  0898                     	;# 
  2191  0899                     	;# 
  2192  089A                     	;# 
  2193  089B                     	;# 
  2194  090C                     	;# 
  2195  090E                     	;# 
  2196  090F                     	;# 
  2197  091F                     	;# 
  2198  098F                     	;# 
  2199  098F                     	;# 
  2200  0990                     	;# 
  2201  0991                     	;# 
  2202  0992                     	;# 
  2203  0993                     	;# 
  2204  0994                     	;# 
  2205  0995                     	;# 
  2206  0996                     	;# 
  2207  0997                     	;# 
  2208  1E0F                     	;# 
  2209  1E10                     	;# 
  2210  1E11                     	;# 
  2211  1E12                     	;# 
  2212  1E13                     	;# 
  2213  1E14                     	;# 
  2214  1E15                     	;# 
  2215  1E16                     	;# 
  2216  1E17                     	;# 
  2217  1E18                     	;# 
  2218  1E19                     	;# 
  2219  1E1A                     	;# 
  2220  1E1B                     	;# 
  2221  1E1C                     	;# 
  2222  1E1D                     	;# 
  2223  1E1E                     	;# 
  2224  1E1F                     	;# 
  2225  1E20                     	;# 
  2226  1E21                     	;# 
  2227  1E22                     	;# 
  2228  1E23                     	;# 
  2229  1E24                     	;# 
  2230  1E25                     	;# 
  2231  1E26                     	;# 
  2232  1E27                     	;# 
  2233  1E28                     	;# 
  2234  1E29                     	;# 
  2235  1E2A                     	;# 
  2236  1E2B                     	;# 
  2237  1E2C                     	;# 
  2238  1E2D                     	;# 
  2239  1E2E                     	;# 
  2240  1E2F                     	;# 
  2241  1E30                     	;# 
  2242  1E31                     	;# 
  2243  1E32                     	;# 
  2244  1E33                     	;# 
  2245  1E34                     	;# 
  2246  1E35                     	;# 
  2247  1E36                     	;# 
  2248  1E37                     	;# 
  2249  1E8F                     	;# 
  2250  1E90                     	;# 
  2251  1E91                     	;# 
  2252  1E92                     	;# 
  2253  1E93                     	;# 
  2254  1E94                     	;# 
  2255  1E95                     	;# 
  2256  1E96                     	;# 
  2257  1E97                     	;# 
  2258  1E9C                     	;# 
  2259  1E9D                     	;# 
  2260  1E9E                     	;# 
  2261  1EA1                     	;# 
  2262  1EA2                     	;# 
  2263  1EA3                     	;# 
  2264  1EA4                     	;# 
  2265  1EA9                     	;# 
  2266  1EAA                     	;# 
  2267  1EB1                     	;# 
  2268  1EB2                     	;# 
  2269  1EB8                     	;# 
  2270  1EB9                     	;# 
  2271  1EBA                     	;# 
  2272  1EBB                     	;# 
  2273  1EBC                     	;# 
  2274  1EBD                     	;# 
  2275  1EBE                     	;# 
  2276  1EC3                     	;# 
  2277  1EC5                     	;# 
  2278  1EC6                     	;# 
  2279  1EC7                     	;# 
  2280  1EC8                     	;# 
  2281  1EC9                     	;# 
  2282  1ECA                     	;# 
  2283  1ECB                     	;# 
  2284  1ECC                     	;# 
  2285  1F10                     	;# 
  2286  1F11                     	;# 
  2287  1F12                     	;# 
  2288  1F14                     	;# 
  2289  1F15                     	;# 
  2290  1F20                     	;# 
  2291  1F21                     	;# 
  2292  1F22                     	;# 
  2293  1F23                     	;# 
  2294  1F24                     	;# 
  2295  1F25                     	;# 
  2296  1F38                     	;# 
  2297  1F39                     	;# 
  2298  1F3A                     	;# 
  2299  1F3B                     	;# 
  2300  1F3C                     	;# 
  2301  1F3D                     	;# 
  2302  1F3E                     	;# 
  2303  1F3F                     	;# 
  2304  1F4E                     	;# 
  2305  1F4F                     	;# 
  2306  1F50                     	;# 
  2307  1F51                     	;# 
  2308  1F52                     	;# 
  2309  1F53                     	;# 
  2310  1F54                     	;# 
  2311  1F55                     	;# 
  2312  1FE4                     	;# 
  2313  1FE5                     	;# 
  2314  1FE6                     	;# 
  2315  1FE7                     	;# 
  2316  1FE8                     	;# 
  2317  1FE8                     	;# 
  2318  1FE9                     	;# 
  2319  1FEA                     	;# 
  2320  1FEB                     	;# 
  2321  1FED                     	;# 
  2322  1FEE                     	;# 
  2323  1FEF                     	;# 
  2324  0000                     	;# 
  2325  0001                     	;# 
  2326  0002                     	;# 
  2327  0003                     	;# 
  2328  0004                     	;# 
  2329  0005                     	;# 
  2330  0006                     	;# 
  2331  0007                     	;# 
  2332  0008                     	;# 
  2333  0009                     	;# 
  2334  000A                     	;# 
  2335  000B                     	;# 
  2336  000C                     	;# 
  2337  000E                     	;# 
  2338  0012                     	;# 
  2339  0014                     	;# 
  2340  0018                     	;# 
  2341  001A                     	;# 
  2342  008C                     	;# 
  2343  008C                     	;# 
  2344  008D                     	;# 
  2345  008E                     	;# 
  2346  008E                     	;# 
  2347  008F                     	;# 
  2348  0090                     	;# 
  2349  0090                     	;# 
  2350  0091                     	;# 
  2351  0092                     	;# 
  2352  0092                     	;# 
  2353  0093                     	;# 
  2354  0094                     	;# 
  2355  0094                     	;# 
  2356  0095                     	;# 
  2357  0096                     	;# 
  2358  0096                     	;# 
  2359  0097                     	;# 
  2360  0098                     	;# 
  2361  0099                     	;# 
  2362  009A                     	;# 
  2363  009B                     	;# 
  2364  009B                     	;# 
  2365  009C                     	;# 
  2366  009D                     	;# 
  2367  009D                     	;# 
  2368  009E                     	;# 
  2369  009F                     	;# 
  2370  010C                     	;# 
  2371  010C                     	;# 
  2372  010D                     	;# 
  2373  010E                     	;# 
  2374  010F                     	;# 
  2375  010F                     	;# 
  2376  0110                     	;# 
  2377  0111                     	;# 
  2378  0112                     	;# 
  2379  0113                     	;# 
  2380  0114                     	;# 
  2381  0115                     	;# 
  2382  0116                     	;# 
  2383  0117                     	;# 
  2384  0118                     	;# 
  2385  0119                     	;# 
  2386  0119                     	;# 
  2387  0119                     	;# 
  2388  011A                     	;# 
  2389  011A                     	;# 
  2390  011A                     	;# 
  2391  011B                     	;# 
  2392  011B                     	;# 
  2393  011B                     	;# 
  2394  011B                     	;# 
  2395  011B                     	;# 
  2396  011C                     	;# 
  2397  011C                     	;# 
  2398  011C                     	;# 
  2399  011D                     	;# 
  2400  011D                     	;# 
  2401  011D                     	;# 
  2402  011E                     	;# 
  2403  011E                     	;# 
  2404  011E                     	;# 
  2405  011F                     	;# 
  2406  011F                     	;# 
  2407  011F                     	;# 
  2408  011F                     	;# 
  2409  011F                     	;# 
  2410  018C                     	;# 
  2411  018D                     	;# 
  2412  018E                     	;# 
  2413  018F                     	;# 
  2414  0190                     	;# 
  2415  0191                     	;# 
  2416  0192                     	;# 
  2417  0196                     	;# 
  2418  0197                     	;# 
  2419  0198                     	;# 
  2420  0199                     	;# 
  2421  019A                     	;# 
  2422  019B                     	;# 
  2423  019C                     	;# 
  2424  020C                     	;# 
  2425  020D                     	;# 
  2426  020E                     	;# 
  2427  020E                     	;# 
  2428  020F                     	;# 
  2429  020F                     	;# 
  2430  0210                     	;# 
  2431  0210                     	;# 
  2432  0211                     	;# 
  2433  0211                     	;# 
  2434  0212                     	;# 
  2435  0213                     	;# 
  2436  0214                     	;# 
  2437  0214                     	;# 
  2438  0215                     	;# 
  2439  0215                     	;# 
  2440  0216                     	;# 
  2441  0216                     	;# 
  2442  0217                     	;# 
  2443  0217                     	;# 
  2444  0218                     	;# 
  2445  0219                     	;# 
  2446  021A                     	;# 
  2447  021A                     	;# 
  2448  021B                     	;# 
  2449  021B                     	;# 
  2450  021C                     	;# 
  2451  021C                     	;# 
  2452  021D                     	;# 
  2453  021D                     	;# 
  2454  021E                     	;# 
  2455  021F                     	;# 
  2456  028C                     	;# 
  2457  028C                     	;# 
  2458  028D                     	;# 
  2459  028D                     	;# 
  2460  028E                     	;# 
  2461  028F                     	;# 
  2462  0290                     	;# 
  2463  0291                     	;# 
  2464  0292                     	;# 
  2465  0292                     	;# 
  2466  0293                     	;# 
  2467  0293                     	;# 
  2468  0294                     	;# 
  2469  0295                     	;# 
  2470  0296                     	;# 
  2471  0297                     	;# 
  2472  0298                     	;# 
  2473  0298                     	;# 
  2474  0299                     	;# 
  2475  0299                     	;# 
  2476  029A                     	;# 
  2477  029B                     	;# 
  2478  029C                     	;# 
  2479  029D                     	;# 
  2480  029F                     	;# 
  2481  030C                     	;# 
  2482  030C                     	;# 
  2483  030D                     	;# 
  2484  030E                     	;# 
  2485  030F                     	;# 
  2486  0310                     	;# 
  2487  0310                     	;# 
  2488  0311                     	;# 
  2489  0312                     	;# 
  2490  0313                     	;# 
  2491  0314                     	;# 
  2492  0314                     	;# 
  2493  0315                     	;# 
  2494  0316                     	;# 
  2495  0317                     	;# 
  2496  0318                     	;# 
  2497  0318                     	;# 
  2498  0319                     	;# 
  2499  031A                     	;# 
  2500  031B                     	;# 
  2501  038C                     	;# 
  2502  038C                     	;# 
  2503  038D                     	;# 
  2504  038E                     	;# 
  2505  0390                     	;# 
  2506  0390                     	;# 
  2507  0391                     	;# 
  2508  0392                     	;# 
  2509  048C                     	;# 
  2510  048C                     	;# 
  2511  048D                     	;# 
  2512  048E                     	;# 
  2513  048F                     	;# 
  2514  048F                     	;# 
  2515  0490                     	;# 
  2516  0491                     	;# 
  2517  0492                     	;# 
  2518  0492                     	;# 
  2519  0493                     	;# 
  2520  0494                     	;# 
  2521  0495                     	;# 
  2522  0495                     	;# 
  2523  0496                     	;# 
  2524  0497                     	;# 
  2525  0498                     	;# 
  2526  0499                     	;# 
  2527  049A                     	;# 
  2528  049B                     	;# 
  2529  049C                     	;# 
  2530  049D                     	;# 
  2531  058C                     	;# 
  2532  058C                     	;# 
  2533  058D                     	;# 
  2534  058E                     	;# 
  2535  058F                     	;# 
  2536  058F                     	;# 
  2537  0590                     	;# 
  2538  0591                     	;# 
  2539  0592                     	;# 
  2540  0593                     	;# 
  2541  059C                     	;# 
  2542  059C                     	;# 
  2543  059D                     	;# 
  2544  059D                     	;# 
  2545  059E                     	;# 
  2546  059F                     	;# 
  2547  060C                     	;# 
  2548  060C                     	;# 
  2549  060D                     	;# 
  2550  060D                     	;# 
  2551  060E                     	;# 
  2552  060F                     	;# 
  2553  0610                     	;# 
  2554  0611                     	;# 
  2555  0612                     	;# 
  2556  0613                     	;# 
  2557  0614                     	;# 
  2558  0616                     	;# 
  2559  0616                     	;# 
  2560  0617                     	;# 
  2561  0617                     	;# 
  2562  0618                     	;# 
  2563  0619                     	;# 
  2564  061A                     	;# 
  2565  061B                     	;# 
  2566  061C                     	;# 
  2567  061D                     	;# 
  2568  061E                     	;# 
  2569  070C                     	;# 
  2570  070D                     	;# 
  2571  070E                     	;# 
  2572  070F                     	;# 
  2573  0710                     	;# 
  2574  0711                     	;# 
  2575  0712                     	;# 
  2576  0713                     	;# 
  2577  0714                     	;# 
  2578  0716                     	;# 
  2579  0717                     	;# 
  2580  0718                     	;# 
  2581  0719                     	;# 
  2582  071A                     	;# 
  2583  071B                     	;# 
  2584  071C                     	;# 
  2585  071D                     	;# 
  2586  071E                     	;# 
  2587  0796                     	;# 
  2588  0797                     	;# 
  2589  0798                     	;# 
  2590  0799                     	;# 
  2591  079A                     	;# 
  2592  079B                     	;# 
  2593  079C                     	;# 
  2594  079D                     	;# 
  2595  080C                     	;# 
  2596  080D                     	;# 
  2597  080E                     	;# 
  2598  080F                     	;# 
  2599  0810                     	;# 
  2600  0811                     	;# 
  2601  0812                     	;# 
  2602  0813                     	;# 
  2603  0814                     	;# 
  2604  081A                     	;# 
  2605  081A                     	;# 
  2606  081B                     	;# 
  2607  081C                     	;# 
  2608  081C                     	;# 
  2609  081D                     	;# 
  2610  081E                     	;# 
  2611  081F                     	;# 
  2612  088C                     	;# 
  2613  088D                     	;# 
  2614  088E                     	;# 
  2615  088F                     	;# 
  2616  0890                     	;# 
  2617  0891                     	;# 
  2618  0892                     	;# 
  2619  0893                     	;# 
  2620  0895                     	;# 
  2621  0896                     	;# 
  2622  0897                     	;# 
  2623  0898                     	;# 
  2624  0899                     	;# 
  2625  089A                     	;# 
  2626  089B                     	;# 
  2627  090C                     	;# 
  2628  090E                     	;# 
  2629  090F                     	;# 
  2630  091F                     	;# 
  2631  098F                     	;# 
  2632  098F                     	;# 
  2633  0990                     	;# 
  2634  0991                     	;# 
  2635  0992                     	;# 
  2636  0993                     	;# 
  2637  0994                     	;# 
  2638  0995                     	;# 
  2639  0996                     	;# 
  2640  0997                     	;# 
  2641  1E0F                     	;# 
  2642  1E10                     	;# 
  2643  1E11                     	;# 
  2644  1E12                     	;# 
  2645  1E13                     	;# 
  2646  1E14                     	;# 
  2647  1E15                     	;# 
  2648  1E16                     	;# 
  2649  1E17                     	;# 
  2650  1E18                     	;# 
  2651  1E19                     	;# 
  2652  1E1A                     	;# 
  2653  1E1B                     	;# 
  2654  1E1C                     	;# 
  2655  1E1D                     	;# 
  2656  1E1E                     	;# 
  2657  1E1F                     	;# 
  2658  1E20                     	;# 
  2659  1E21                     	;# 
  2660  1E22                     	;# 
  2661  1E23                     	;# 
  2662  1E24                     	;# 
  2663  1E25                     	;# 
  2664  1E26                     	;# 
  2665  1E27                     	;# 
  2666  1E28                     	;# 
  2667  1E29                     	;# 
  2668  1E2A                     	;# 
  2669  1E2B                     	;# 
  2670  1E2C                     	;# 
  2671  1E2D                     	;# 
  2672  1E2E                     	;# 
  2673  1E2F                     	;# 
  2674  1E30                     	;# 
  2675  1E31                     	;# 
  2676  1E32                     	;# 
  2677  1E33                     	;# 
  2678  1E34                     	;# 
  2679  1E35                     	;# 
  2680  1E36                     	;# 
  2681  1E37                     	;# 
  2682  1E8F                     	;# 
  2683  1E90                     	;# 
  2684  1E91                     	;# 
  2685  1E92                     	;# 
  2686  1E93                     	;# 
  2687  1E94                     	;# 
  2688  1E95                     	;# 
  2689  1E96                     	;# 
  2690  1E97                     	;# 
  2691  1E9C                     	;# 
  2692  1E9D                     	;# 
  2693  1E9E                     	;# 
  2694  1EA1                     	;# 
  2695  1EA2                     	;# 
  2696  1EA3                     	;# 
  2697  1EA4                     	;# 
  2698  1EA9                     	;# 
  2699  1EAA                     	;# 
  2700  1EB1                     	;# 
  2701  1EB2                     	;# 
  2702  1EB8                     	;# 
  2703  1EB9                     	;# 
  2704  1EBA                     	;# 
  2705  1EBB                     	;# 
  2706  1EBC                     	;# 
  2707  1EBD                     	;# 
  2708  1EBE                     	;# 
  2709  1EC3                     	;# 
  2710  1EC5                     	;# 
  2711  1EC6                     	;# 
  2712  1EC7                     	;# 
  2713  1EC8                     	;# 
  2714  1EC9                     	;# 
  2715  1ECA                     	;# 
  2716  1ECB                     	;# 
  2717  1ECC                     	;# 
  2718  1F10                     	;# 
  2719  1F11                     	;# 
  2720  1F12                     	;# 
  2721  1F14                     	;# 
  2722  1F15                     	;# 
  2723  1F20                     	;# 
  2724  1F21                     	;# 
  2725  1F22                     	;# 
  2726  1F23                     	;# 
  2727  1F24                     	;# 
  2728  1F25                     	;# 
  2729  1F38                     	;# 
  2730  1F39                     	;# 
  2731  1F3A                     	;# 
  2732  1F3B                     	;# 
  2733  1F3C                     	;# 
  2734  1F3D                     	;# 
  2735  1F3E                     	;# 
  2736  1F3F                     	;# 
  2737  1F4E                     	;# 
  2738  1F4F                     	;# 
  2739  1F50                     	;# 
  2740  1F51                     	;# 
  2741  1F52                     	;# 
  2742  1F53                     	;# 
  2743  1F54                     	;# 
  2744  1F55                     	;# 
  2745  1FE4                     	;# 
  2746  1FE5                     	;# 
  2747  1FE6                     	;# 
  2748  1FE7                     	;# 
  2749  1FE8                     	;# 
  2750  1FE8                     	;# 
  2751  1FE9                     	;# 
  2752  1FEA                     	;# 
  2753  1FEB                     	;# 
  2754  1FED                     	;# 
  2755  1FEE                     	;# 
  2756  1FEF                     	;# 
  2757  0000                     	;# 
  2758  0001                     	;# 
  2759  0002                     	;# 
  2760  0003                     	;# 
  2761  0004                     	;# 
  2762  0005                     	;# 
  2763  0006                     	;# 
  2764  0007                     	;# 
  2765  0008                     	;# 
  2766  0009                     	;# 
  2767  000A                     	;# 
  2768  000B                     	;# 
  2769  000C                     	;# 
  2770  000E                     	;# 
  2771  0012                     	;# 
  2772  0014                     	;# 
  2773  0018                     	;# 
  2774  001A                     	;# 
  2775  008C                     	;# 
  2776  008C                     	;# 
  2777  008D                     	;# 
  2778  008E                     	;# 
  2779  008E                     	;# 
  2780  008F                     	;# 
  2781  0090                     	;# 
  2782  0090                     	;# 
  2783  0091                     	;# 
  2784  0092                     	;# 
  2785  0092                     	;# 
  2786  0093                     	;# 
  2787  0094                     	;# 
  2788  0094                     	;# 
  2789  0095                     	;# 
  2790  0096                     	;# 
  2791  0096                     	;# 
  2792  0097                     	;# 
  2793  0098                     	;# 
  2794  0099                     	;# 
  2795  009A                     	;# 
  2796  009B                     	;# 
  2797  009B                     	;# 
  2798  009C                     	;# 
  2799  009D                     	;# 
  2800  009D                     	;# 
  2801  009E                     	;# 
  2802  009F                     	;# 
  2803  010C                     	;# 
  2804  010C                     	;# 
  2805  010D                     	;# 
  2806  010E                     	;# 
  2807  010F                     	;# 
  2808  010F                     	;# 
  2809  0110                     	;# 
  2810  0111                     	;# 
  2811  0112                     	;# 
  2812  0113                     	;# 
  2813  0114                     	;# 
  2814  0115                     	;# 
  2815  0116                     	;# 
  2816  0117                     	;# 
  2817  0118                     	;# 
  2818  0119                     	;# 
  2819  0119                     	;# 
  2820  0119                     	;# 
  2821  011A                     	;# 
  2822  011A                     	;# 
  2823  011A                     	;# 
  2824  011B                     	;# 
  2825  011B                     	;# 
  2826  011B                     	;# 
  2827  011B                     	;# 
  2828  011B                     	;# 
  2829  011C                     	;# 
  2830  011C                     	;# 
  2831  011C                     	;# 
  2832  011D                     	;# 
  2833  011D                     	;# 
  2834  011D                     	;# 
  2835  011E                     	;# 
  2836  011E                     	;# 
  2837  011E                     	;# 
  2838  011F                     	;# 
  2839  011F                     	;# 
  2840  011F                     	;# 
  2841  011F                     	;# 
  2842  011F                     	;# 
  2843  018C                     	;# 
  2844  018D                     	;# 
  2845  018E                     	;# 
  2846  018F                     	;# 
  2847  0190                     	;# 
  2848  0191                     	;# 
  2849  0192                     	;# 
  2850  0196                     	;# 
  2851  0197                     	;# 
  2852  0198                     	;# 
  2853  0199                     	;# 
  2854  019A                     	;# 
  2855  019B                     	;# 
  2856  019C                     	;# 
  2857  020C                     	;# 
  2858  020D                     	;# 
  2859  020E                     	;# 
  2860  020E                     	;# 
  2861  020F                     	;# 
  2862  020F                     	;# 
  2863  0210                     	;# 
  2864  0210                     	;# 
  2865  0211                     	;# 
  2866  0211                     	;# 
  2867  0212                     	;# 
  2868  0213                     	;# 
  2869  0214                     	;# 
  2870  0214                     	;# 
  2871  0215                     	;# 
  2872  0215                     	;# 
  2873  0216                     	;# 
  2874  0216                     	;# 
  2875  0217                     	;# 
  2876  0217                     	;# 
  2877  0218                     	;# 
  2878  0219                     	;# 
  2879  021A                     	;# 
  2880  021A                     	;# 
  2881  021B                     	;# 
  2882  021B                     	;# 
  2883  021C                     	;# 
  2884  021C                     	;# 
  2885  021D                     	;# 
  2886  021D                     	;# 
  2887  021E                     	;# 
  2888  021F                     	;# 
  2889  028C                     	;# 
  2890  028C                     	;# 
  2891  028D                     	;# 
  2892  028D                     	;# 
  2893  028E                     	;# 
  2894  028F                     	;# 
  2895  0290                     	;# 
  2896  0291                     	;# 
  2897  0292                     	;# 
  2898  0292                     	;# 
  2899  0293                     	;# 
  2900  0293                     	;# 
  2901  0294                     	;# 
  2902  0295                     	;# 
  2903  0296                     	;# 
  2904  0297                     	;# 
  2905  0298                     	;# 
  2906  0298                     	;# 
  2907  0299                     	;# 
  2908  0299                     	;# 
  2909  029A                     	;# 
  2910  029B                     	;# 
  2911  029C                     	;# 
  2912  029D                     	;# 
  2913  029F                     	;# 
  2914  030C                     	;# 
  2915  030C                     	;# 
  2916  030D                     	;# 
  2917  030E                     	;# 
  2918  030F                     	;# 
  2919  0310                     	;# 
  2920  0310                     	;# 
  2921  0311                     	;# 
  2922  0312                     	;# 
  2923  0313                     	;# 
  2924  0314                     	;# 
  2925  0314                     	;# 
  2926  0315                     	;# 
  2927  0316                     	;# 
  2928  0317                     	;# 
  2929  0318                     	;# 
  2930  0318                     	;# 
  2931  0319                     	;# 
  2932  031A                     	;# 
  2933  031B                     	;# 
  2934  038C                     	;# 
  2935  038C                     	;# 
  2936  038D                     	;# 
  2937  038E                     	;# 
  2938  0390                     	;# 
  2939  0390                     	;# 
  2940  0391                     	;# 
  2941  0392                     	;# 
  2942  048C                     	;# 
  2943  048C                     	;# 
  2944  048D                     	;# 
  2945  048E                     	;# 
  2946  048F                     	;# 
  2947  048F                     	;# 
  2948  0490                     	;# 
  2949  0491                     	;# 
  2950  0492                     	;# 
  2951  0492                     	;# 
  2952  0493                     	;# 
  2953  0494                     	;# 
  2954  0495                     	;# 
  2955  0495                     	;# 
  2956  0496                     	;# 
  2957  0497                     	;# 
  2958  0498                     	;# 
  2959  0499                     	;# 
  2960  049A                     	;# 
  2961  049B                     	;# 
  2962  049C                     	;# 
  2963  049D                     	;# 
  2964  058C                     	;# 
  2965  058C                     	;# 
  2966  058D                     	;# 
  2967  058E                     	;# 
  2968  058F                     	;# 
  2969  058F                     	;# 
  2970  0590                     	;# 
  2971  0591                     	;# 
  2972  0592                     	;# 
  2973  0593                     	;# 
  2974  059C                     	;# 
  2975  059C                     	;# 
  2976  059D                     	;# 
  2977  059D                     	;# 
  2978  059E                     	;# 
  2979  059F                     	;# 
  2980  060C                     	;# 
  2981  060C                     	;# 
  2982  060D                     	;# 
  2983  060D                     	;# 
  2984  060E                     	;# 
  2985  060F                     	;# 
  2986  0610                     	;# 
  2987  0611                     	;# 
  2988  0612                     	;# 
  2989  0613                     	;# 
  2990  0614                     	;# 
  2991  0616                     	;# 
  2992  0616                     	;# 
  2993  0617                     	;# 
  2994  0617                     	;# 
  2995  0618                     	;# 
  2996  0619                     	;# 
  2997  061A                     	;# 
  2998  061B                     	;# 
  2999  061C                     	;# 
  3000  061D                     	;# 
  3001  061E                     	;# 
  3002  070C                     	;# 
  3003  070D                     	;# 
  3004  070E                     	;# 
  3005  070F                     	;# 
  3006  0710                     	;# 
  3007  0711                     	;# 
  3008  0712                     	;# 
  3009  0713                     	;# 
  3010  0714                     	;# 
  3011  0716                     	;# 
  3012  0717                     	;# 
  3013  0718                     	;# 
  3014  0719                     	;# 
  3015  071A                     	;# 
  3016  071B                     	;# 
  3017  071C                     	;# 
  3018  071D                     	;# 
  3019  071E                     	;# 
  3020  0796                     	;# 
  3021  0797                     	;# 
  3022  0798                     	;# 
  3023  0799                     	;# 
  3024  079A                     	;# 
  3025  079B                     	;# 
  3026  079C                     	;# 
  3027  079D                     	;# 
  3028  080C                     	;# 
  3029  080D                     	;# 
  3030  080E                     	;# 
  3031  080F                     	;# 
  3032  0810                     	;# 
  3033  0811                     	;# 
  3034  0812                     	;# 
  3035  0813                     	;# 
  3036  0814                     	;# 
  3037  081A                     	;# 
  3038  081A                     	;# 
  3039  081B                     	;# 
  3040  081C                     	;# 
  3041  081C                     	;# 
  3042  081D                     	;# 
  3043  081E                     	;# 
  3044  081F                     	;# 
  3045  088C                     	;# 
  3046  088D                     	;# 
  3047  088E                     	;# 
  3048  088F                     	;# 
  3049  0890                     	;# 
  3050  0891                     	;# 
  3051  0892                     	;# 
  3052  0893                     	;# 
  3053  0895                     	;# 
  3054  0896                     	;# 
  3055  0897                     	;# 
  3056  0898                     	;# 
  3057  0899                     	;# 
  3058  089A                     	;# 
  3059  089B                     	;# 
  3060  090C                     	;# 
  3061  090E                     	;# 
  3062  090F                     	;# 
  3063  091F                     	;# 
  3064  098F                     	;# 
  3065  098F                     	;# 
  3066  0990                     	;# 
  3067  0991                     	;# 
  3068  0992                     	;# 
  3069  0993                     	;# 
  3070  0994                     	;# 
  3071  0995                     	;# 
  3072  0996                     	;# 
  3073  0997                     	;# 
  3074  1E0F                     	;# 
  3075  1E10                     	;# 
  3076  1E11                     	;# 
  3077  1E12                     	;# 
  3078  1E13                     	;# 
  3079  1E14                     	;# 
  3080  1E15                     	;# 
  3081  1E16                     	;# 
  3082  1E17                     	;# 
  3083  1E18                     	;# 
  3084  1E19                     	;# 
  3085  1E1A                     	;# 
  3086  1E1B                     	;# 
  3087  1E1C                     	;# 
  3088  1E1D                     	;# 
  3089  1E1E                     	;# 
  3090  1E1F                     	;# 
  3091  1E20                     	;# 
  3092  1E21                     	;# 
  3093  1E22                     	;# 
  3094  1E23                     	;# 
  3095  1E24                     	;# 
  3096  1E25                     	;# 
  3097  1E26                     	;# 
  3098  1E27                     	;# 
  3099  1E28                     	;# 
  3100  1E29                     	;# 
  3101  1E2A                     	;# 
  3102  1E2B                     	;# 
  3103  1E2C                     	;# 
  3104  1E2D                     	;# 
  3105  1E2E                     	;# 
  3106  1E2F                     	;# 
  3107  1E30                     	;# 
  3108  1E31                     	;# 
  3109  1E32                     	;# 
  3110  1E33                     	;# 
  3111  1E34                     	;# 
  3112  1E35                     	;# 
  3113  1E36                     	;# 
  3114  1E37                     	;# 
  3115  1E8F                     	;# 
  3116  1E90                     	;# 
  3117  1E91                     	;# 
  3118  1E92                     	;# 
  3119  1E93                     	;# 
  3120  1E94                     	;# 
  3121  1E95                     	;# 
  3122  1E96                     	;# 
  3123  1E97                     	;# 
  3124  1E9C                     	;# 
  3125  1E9D                     	;# 
  3126  1E9E                     	;# 
  3127  1EA1                     	;# 
  3128  1EA2                     	;# 
  3129  1EA3                     	;# 
  3130  1EA4                     	;# 
  3131  1EA9                     	;# 
  3132  1EAA                     	;# 
  3133  1EB1                     	;# 
  3134  1EB2                     	;# 
  3135  1EB8                     	;# 
  3136  1EB9                     	;# 
  3137  1EBA                     	;# 
  3138  1EBB                     	;# 
  3139  1EBC                     	;# 
  3140  1EBD                     	;# 
  3141  1EBE                     	;# 
  3142  1EC3                     	;# 
  3143  1EC5                     	;# 
  3144  1EC6                     	;# 
  3145  1EC7                     	;# 
  3146  1EC8                     	;# 
  3147  1EC9                     	;# 
  3148  1ECA                     	;# 
  3149  1ECB                     	;# 
  3150  1ECC                     	;# 
  3151  1F10                     	;# 
  3152  1F11                     	;# 
  3153  1F12                     	;# 
  3154  1F14                     	;# 
  3155  1F15                     	;# 
  3156  1F20                     	;# 
  3157  1F21                     	;# 
  3158  1F22                     	;# 
  3159  1F23                     	;# 
  3160  1F24                     	;# 
  3161  1F25                     	;# 
  3162  1F38                     	;# 
  3163  1F39                     	;# 
  3164  1F3A                     	;# 
  3165  1F3B                     	;# 
  3166  1F3C                     	;# 
  3167  1F3D                     	;# 
  3168  1F3E                     	;# 
  3169  1F3F                     	;# 
  3170  1F4E                     	;# 
  3171  1F4F                     	;# 
  3172  1F50                     	;# 
  3173  1F51                     	;# 
  3174  1F52                     	;# 
  3175  1F53                     	;# 
  3176  1F54                     	;# 
  3177  1F55                     	;# 
  3178  1FE4                     	;# 
  3179  1FE5                     	;# 
  3180  1FE6                     	;# 
  3181  1FE7                     	;# 
  3182  1FE8                     	;# 
  3183  1FE8                     	;# 
  3184  1FE9                     	;# 
  3185  1FEA                     	;# 
  3186  1FEB                     	;# 
  3187  1FED                     	;# 
  3188  1FEE                     	;# 
  3189  1FEF                     	;# 
  3190  0000                     	;# 
  3191  0001                     	;# 
  3192  0002                     	;# 
  3193  0003                     	;# 
  3194  0004                     	;# 
  3195  0005                     	;# 
  3196  0006                     	;# 
  3197  0007                     	;# 
  3198  0008                     	;# 
  3199  0009                     	;# 
  3200  000A                     	;# 
  3201  000B                     	;# 
  3202  000C                     	;# 
  3203  000E                     	;# 
  3204  0012                     	;# 
  3205  0014                     	;# 
  3206  0018                     	;# 
  3207  001A                     	;# 
  3208  008C                     	;# 
  3209  008C                     	;# 
  3210  008D                     	;# 
  3211  008E                     	;# 
  3212  008E                     	;# 
  3213  008F                     	;# 
  3214  0090                     	;# 
  3215  0090                     	;# 
  3216  0091                     	;# 
  3217  0092                     	;# 
  3218  0092                     	;# 
  3219  0093                     	;# 
  3220  0094                     	;# 
  3221  0094                     	;# 
  3222  0095                     	;# 
  3223  0096                     	;# 
  3224  0096                     	;# 
  3225  0097                     	;# 
  3226  0098                     	;# 
  3227  0099                     	;# 
  3228  009A                     	;# 
  3229  009B                     	;# 
  3230  009B                     	;# 
  3231  009C                     	;# 
  3232  009D                     	;# 
  3233  009D                     	;# 
  3234  009E                     	;# 
  3235  009F                     	;# 
  3236  010C                     	;# 
  3237  010C                     	;# 
  3238  010D                     	;# 
  3239  010E                     	;# 
  3240  010F                     	;# 
  3241  010F                     	;# 
  3242  0110                     	;# 
  3243  0111                     	;# 
  3244  0112                     	;# 
  3245  0113                     	;# 
  3246  0114                     	;# 
  3247  0115                     	;# 
  3248  0116                     	;# 
  3249  0117                     	;# 
  3250  0118                     	;# 
  3251  0119                     	;# 
  3252  0119                     	;# 
  3253  0119                     	;# 
  3254  011A                     	;# 
  3255  011A                     	;# 
  3256  011A                     	;# 
  3257  011B                     	;# 
  3258  011B                     	;# 
  3259  011B                     	;# 
  3260  011B                     	;# 
  3261  011B                     	;# 
  3262  011C                     	;# 
  3263  011C                     	;# 
  3264  011C                     	;# 
  3265  011D                     	;# 
  3266  011D                     	;# 
  3267  011D                     	;# 
  3268  011E                     	;# 
  3269  011E                     	;# 
  3270  011E                     	;# 
  3271  011F                     	;# 
  3272  011F                     	;# 
  3273  011F                     	;# 
  3274  011F                     	;# 
  3275  011F                     	;# 
  3276  018C                     	;# 
  3277  018D                     	;# 
  3278  018E                     	;# 
  3279  018F                     	;# 
  3280  0190                     	;# 
  3281  0191                     	;# 
  3282  0192                     	;# 
  3283  0196                     	;# 
  3284  0197                     	;# 
  3285  0198                     	;# 
  3286  0199                     	;# 
  3287  019A                     	;# 
  3288  019B                     	;# 
  3289  019C                     	;# 
  3290  020C                     	;# 
  3291  020D                     	;# 
  3292  020E                     	;# 
  3293  020E                     	;# 
  3294  020F                     	;# 
  3295  020F                     	;# 
  3296  0210                     	;# 
  3297  0210                     	;# 
  3298  0211                     	;# 
  3299  0211                     	;# 
  3300  0212                     	;# 
  3301  0213                     	;# 
  3302  0214                     	;# 
  3303  0214                     	;# 
  3304  0215                     	;# 
  3305  0215                     	;# 
  3306  0216                     	;# 
  3307  0216                     	;# 
  3308  0217                     	;# 
  3309  0217                     	;# 
  3310  0218                     	;# 
  3311  0219                     	;# 
  3312  021A                     	;# 
  3313  021A                     	;# 
  3314  021B                     	;# 
  3315  021B                     	;# 
  3316  021C                     	;# 
  3317  021C                     	;# 
  3318  021D                     	;# 
  3319  021D                     	;# 
  3320  021E                     	;# 
  3321  021F                     	;# 
  3322  028C                     	;# 
  3323  028C                     	;# 
  3324  028D                     	;# 
  3325  028D                     	;# 
  3326  028E                     	;# 
  3327  028F                     	;# 
  3328  0290                     	;# 
  3329  0291                     	;# 
  3330  0292                     	;# 
  3331  0292                     	;# 
  3332  0293                     	;# 
  3333  0293                     	;# 
  3334  0294                     	;# 
  3335  0295                     	;# 
  3336  0296                     	;# 
  3337  0297                     	;# 
  3338  0298                     	;# 
  3339  0298                     	;# 
  3340  0299                     	;# 
  3341  0299                     	;# 
  3342  029A                     	;# 
  3343  029B                     	;# 
  3344  029C                     	;# 
  3345  029D                     	;# 
  3346  029F                     	;# 
  3347  030C                     	;# 
  3348  030C                     	;# 
  3349  030D                     	;# 
  3350  030E                     	;# 
  3351  030F                     	;# 
  3352  0310                     	;# 
  3353  0310                     	;# 
  3354  0311                     	;# 
  3355  0312                     	;# 
  3356  0313                     	;# 
  3357  0314                     	;# 
  3358  0314                     	;# 
  3359  0315                     	;# 
  3360  0316                     	;# 
  3361  0317                     	;# 
  3362  0318                     	;# 
  3363  0318                     	;# 
  3364  0319                     	;# 
  3365  031A                     	;# 
  3366  031B                     	;# 
  3367  038C                     	;# 
  3368  038C                     	;# 
  3369  038D                     	;# 
  3370  038E                     	;# 
  3371  0390                     	;# 
  3372  0390                     	;# 
  3373  0391                     	;# 
  3374  0392                     	;# 
  3375  048C                     	;# 
  3376  048C                     	;# 
  3377  048D                     	;# 
  3378  048E                     	;# 
  3379  048F                     	;# 
  3380  048F                     	;# 
  3381  0490                     	;# 
  3382  0491                     	;# 
  3383  0492                     	;# 
  3384  0492                     	;# 
  3385  0493                     	;# 
  3386  0494                     	;# 
  3387  0495                     	;# 
  3388  0495                     	;# 
  3389  0496                     	;# 
  3390  0497                     	;# 
  3391  0498                     	;# 
  3392  0499                     	;# 
  3393  049A                     	;# 
  3394  049B                     	;# 
  3395  049C                     	;# 
  3396  049D                     	;# 
  3397  058C                     	;# 
  3398  058C                     	;# 
  3399  058D                     	;# 
  3400  058E                     	;# 
  3401  058F                     	;# 
  3402  058F                     	;# 
  3403  0590                     	;# 
  3404  0591                     	;# 
  3405  0592                     	;# 
  3406  0593                     	;# 
  3407  059C                     	;# 
  3408  059C                     	;# 
  3409  059D                     	;# 
  3410  059D                     	;# 
  3411  059E                     	;# 
  3412  059F                     	;# 
  3413  060C                     	;# 
  3414  060C                     	;# 
  3415  060D                     	;# 
  3416  060D                     	;# 
  3417  060E                     	;# 
  3418  060F                     	;# 
  3419  0610                     	;# 
  3420  0611                     	;# 
  3421  0612                     	;# 
  3422  0613                     	;# 
  3423  0614                     	;# 
  3424  0616                     	;# 
  3425  0616                     	;# 
  3426  0617                     	;# 
  3427  0617                     	;# 
  3428  0618                     	;# 
  3429  0619                     	;# 
  3430  061A                     	;# 
  3431  061B                     	;# 
  3432  061C                     	;# 
  3433  061D                     	;# 
  3434  061E                     	;# 
  3435  070C                     	;# 
  3436  070D                     	;# 
  3437  070E                     	;# 
  3438  070F                     	;# 
  3439  0710                     	;# 
  3440  0711                     	;# 
  3441  0712                     	;# 
  3442  0713                     	;# 
  3443  0714                     	;# 
  3444  0716                     	;# 
  3445  0717                     	;# 
  3446  0718                     	;# 
  3447  0719                     	;# 
  3448  071A                     	;# 
  3449  071B                     	;# 
  3450  071C                     	;# 
  3451  071D                     	;# 
  3452  071E                     	;# 
  3453  0796                     	;# 
  3454  0797                     	;# 
  3455  0798                     	;# 
  3456  0799                     	;# 
  3457  079A                     	;# 
  3458  079B                     	;# 
  3459  079C                     	;# 
  3460  079D                     	;# 
  3461  080C                     	;# 
  3462  080D                     	;# 
  3463  080E                     	;# 
  3464  080F                     	;# 
  3465  0810                     	;# 
  3466  0811                     	;# 
  3467  0812                     	;# 
  3468  0813                     	;# 
  3469  0814                     	;# 
  3470  081A                     	;# 
  3471  081A                     	;# 
  3472  081B                     	;# 
  3473  081C                     	;# 
  3474  081C                     	;# 
  3475  081D                     	;# 
  3476  081E                     	;# 
  3477  081F                     	;# 
  3478  088C                     	;# 
  3479  088D                     	;# 
  3480  088E                     	;# 
  3481  088F                     	;# 
  3482  0890                     	;# 
  3483  0891                     	;# 
  3484  0892                     	;# 
  3485  0893                     	;# 
  3486  0895                     	;# 
  3487  0896                     	;# 
  3488  0897                     	;# 
  3489  0898                     	;# 
  3490  0899                     	;# 
  3491  089A                     	;# 
  3492  089B                     	;# 
  3493  090C                     	;# 
  3494  090E                     	;# 
  3495  090F                     	;# 
  3496  091F                     	;# 
  3497  098F                     	;# 
  3498  098F                     	;# 
  3499  0990                     	;# 
  3500  0991                     	;# 
  3501  0992                     	;# 
  3502  0993                     	;# 
  3503  0994                     	;# 
  3504  0995                     	;# 
  3505  0996                     	;# 
  3506  0997                     	;# 
  3507  1E0F                     	;# 
  3508  1E10                     	;# 
  3509  1E11                     	;# 
  3510  1E12                     	;# 
  3511  1E13                     	;# 
  3512  1E14                     	;# 
  3513  1E15                     	;# 
  3514  1E16                     	;# 
  3515  1E17                     	;# 
  3516  1E18                     	;# 
  3517  1E19                     	;# 
  3518  1E1A                     	;# 
  3519  1E1B                     	;# 
  3520  1E1C                     	;# 
  3521  1E1D                     	;# 
  3522  1E1E                     	;# 
  3523  1E1F                     	;# 
  3524  1E20                     	;# 
  3525  1E21                     	;# 
  3526  1E22                     	;# 
  3527  1E23                     	;# 
  3528  1E24                     	;# 
  3529  1E25                     	;# 
  3530  1E26                     	;# 
  3531  1E27                     	;# 
  3532  1E28                     	;# 
  3533  1E29                     	;# 
  3534  1E2A                     	;# 
  3535  1E2B                     	;# 
  3536  1E2C                     	;# 
  3537  1E2D                     	;# 
  3538  1E2E                     	;# 
  3539  1E2F                     	;# 
  3540  1E30                     	;# 
  3541  1E31                     	;# 
  3542  1E32                     	;# 
  3543  1E33                     	;# 
  3544  1E34                     	;# 
  3545  1E35                     	;# 
  3546  1E36                     	;# 
  3547  1E37                     	;# 
  3548  1E8F                     	;# 
  3549  1E90                     	;# 
  3550  1E91                     	;# 
  3551  1E92                     	;# 
  3552  1E93                     	;# 
  3553  1E94                     	;# 
  3554  1E95                     	;# 
  3555  1E96                     	;# 
  3556  1E97                     	;# 
  3557  1E9C                     	;# 
  3558  1E9D                     	;# 
  3559  1E9E                     	;# 
  3560  1EA1                     	;# 
  3561  1EA2                     	;# 
  3562  1EA3                     	;# 
  3563  1EA4                     	;# 
  3564  1EA9                     	;# 
  3565  1EAA                     	;# 
  3566  1EB1                     	;# 
  3567  1EB2                     	;# 
  3568  1EB8                     	;# 
  3569  1EB9                     	;# 
  3570  1EBA                     	;# 
  3571  1EBB                     	;# 
  3572  1EBC                     	;# 
  3573  1EBD                     	;# 
  3574  1EBE                     	;# 
  3575  1EC3                     	;# 
  3576  1EC5                     	;# 
  3577  1EC6                     	;# 
  3578  1EC7                     	;# 
  3579  1EC8                     	;# 
  3580  1EC9                     	;# 
  3581  1ECA                     	;# 
  3582  1ECB                     	;# 
  3583  1ECC                     	;# 
  3584  1F10                     	;# 
  3585  1F11                     	;# 
  3586  1F12                     	;# 
  3587  1F14                     	;# 
  3588  1F15                     	;# 
  3589  1F20                     	;# 
  3590  1F21                     	;# 
  3591  1F22                     	;# 
  3592  1F23                     	;# 
  3593  1F24                     	;# 
  3594  1F25                     	;# 
  3595  1F38                     	;# 
  3596  1F39                     	;# 
  3597  1F3A                     	;# 
  3598  1F3B                     	;# 
  3599  1F3C                     	;# 
  3600  1F3D                     	;# 
  3601  1F3E                     	;# 
  3602  1F3F                     	;# 
  3603  1F4E                     	;# 
  3604  1F4F                     	;# 
  3605  1F50                     	;# 
  3606  1F51                     	;# 
  3607  1F52                     	;# 
  3608  1F53                     	;# 
  3609  1F54                     	;# 
  3610  1F55                     	;# 
  3611  1FE4                     	;# 
  3612  1FE5                     	;# 
  3613  1FE6                     	;# 
  3614  1FE7                     	;# 
  3615  1FE8                     	;# 
  3616  1FE8                     	;# 
  3617  1FE9                     	;# 
  3618  1FEA                     	;# 
  3619  1FEB                     	;# 
  3620  1FED                     	;# 
  3621  1FEE                     	;# 
  3622  1FEF                     	;# 
  3623  0000                     	;# 
  3624  0001                     	;# 
  3625  0002                     	;# 
  3626  0003                     	;# 
  3627  0004                     	;# 
  3628  0005                     	;# 
  3629  0006                     	;# 
  3630  0007                     	;# 
  3631  0008                     	;# 
  3632  0009                     	;# 
  3633  000A                     	;# 
  3634  000B                     	;# 
  3635  000C                     	;# 
  3636  000E                     	;# 
  3637  0012                     	;# 
  3638  0014                     	;# 
  3639  0018                     	;# 
  3640  001A                     	;# 
  3641  008C                     	;# 
  3642  008C                     	;# 
  3643  008D                     	;# 
  3644  008E                     	;# 
  3645  008E                     	;# 
  3646  008F                     	;# 
  3647  0090                     	;# 
  3648  0090                     	;# 
  3649  0091                     	;# 
  3650  0092                     	;# 
  3651  0092                     	;# 
  3652  0093                     	;# 
  3653  0094                     	;# 
  3654  0094                     	;# 
  3655  0095                     	;# 
  3656  0096                     	;# 
  3657  0096                     	;# 
  3658  0097                     	;# 
  3659  0098                     	;# 
  3660  0099                     	;# 
  3661  009A                     	;# 
  3662  009B                     	;# 
  3663  009B                     	;# 
  3664  009C                     	;# 
  3665  009D                     	;# 
  3666  009D                     	;# 
  3667  009E                     	;# 
  3668  009F                     	;# 
  3669  010C                     	;# 
  3670  010C                     	;# 
  3671  010D                     	;# 
  3672  010E                     	;# 
  3673  010F                     	;# 
  3674  010F                     	;# 
  3675  0110                     	;# 
  3676  0111                     	;# 
  3677  0112                     	;# 
  3678  0113                     	;# 
  3679  0114                     	;# 
  3680  0115                     	;# 
  3681  0116                     	;# 
  3682  0117                     	;# 
  3683  0118                     	;# 
  3684  0119                     	;# 
  3685  0119                     	;# 
  3686  0119                     	;# 
  3687  011A                     	;# 
  3688  011A                     	;# 
  3689  011A                     	;# 
  3690  011B                     	;# 
  3691  011B                     	;# 
  3692  011B                     	;# 
  3693  011B                     	;# 
  3694  011B                     	;# 
  3695  011C                     	;# 
  3696  011C                     	;# 
  3697  011C                     	;# 
  3698  011D                     	;# 
  3699  011D                     	;# 
  3700  011D                     	;# 
  3701  011E                     	;# 
  3702  011E                     	;# 
  3703  011E                     	;# 
  3704  011F                     	;# 
  3705  011F                     	;# 
  3706  011F                     	;# 
  3707  011F                     	;# 
  3708  011F                     	;# 
  3709  018C                     	;# 
  3710  018D                     	;# 
  3711  018E                     	;# 
  3712  018F                     	;# 
  3713  0190                     	;# 
  3714  0191                     	;# 
  3715  0192                     	;# 
  3716  0196                     	;# 
  3717  0197                     	;# 
  3718  0198                     	;# 
  3719  0199                     	;# 
  3720  019A                     	;# 
  3721  019B                     	;# 
  3722  019C                     	;# 
  3723  020C                     	;# 
  3724  020D                     	;# 
  3725  020E                     	;# 
  3726  020E                     	;# 
  3727  020F                     	;# 
  3728  020F                     	;# 
  3729  0210                     	;# 
  3730  0210                     	;# 
  3731  0211                     	;# 
  3732  0211                     	;# 
  3733  0212                     	;# 
  3734  0213                     	;# 
  3735  0214                     	;# 
  3736  0214                     	;# 
  3737  0215                     	;# 
  3738  0215                     	;# 
  3739  0216                     	;# 
  3740  0216                     	;# 
  3741  0217                     	;# 
  3742  0217                     	;# 
  3743  0218                     	;# 
  3744  0219                     	;# 
  3745  021A                     	;# 
  3746  021A                     	;# 
  3747  021B                     	;# 
  3748  021B                     	;# 
  3749  021C                     	;# 
  3750  021C                     	;# 
  3751  021D                     	;# 
  3752  021D                     	;# 
  3753  021E                     	;# 
  3754  021F                     	;# 
  3755  028C                     	;# 
  3756  028C                     	;# 
  3757  028D                     	;# 
  3758  028D                     	;# 
  3759  028E                     	;# 
  3760  028F                     	;# 
  3761  0290                     	;# 
  3762  0291                     	;# 
  3763  0292                     	;# 
  3764  0292                     	;# 
  3765  0293                     	;# 
  3766  0293                     	;# 
  3767  0294                     	;# 
  3768  0295                     	;# 
  3769  0296                     	;# 
  3770  0297                     	;# 
  3771  0298                     	;# 
  3772  0298                     	;# 
  3773  0299                     	;# 
  3774  0299                     	;# 
  3775  029A                     	;# 
  3776  029B                     	;# 
  3777  029C                     	;# 
  3778  029D                     	;# 
  3779  029F                     	;# 
  3780  030C                     	;# 
  3781  030C                     	;# 
  3782  030D                     	;# 
  3783  030E                     	;# 
  3784  030F                     	;# 
  3785  0310                     	;# 
  3786  0310                     	;# 
  3787  0311                     	;# 
  3788  0312                     	;# 
  3789  0313                     	;# 
  3790  0314                     	;# 
  3791  0314                     	;# 
  3792  0315                     	;# 
  3793  0316                     	;# 
  3794  0317                     	;# 
  3795  0318                     	;# 
  3796  0318                     	;# 
  3797  0319                     	;# 
  3798  031A                     	;# 
  3799  031B                     	;# 
  3800  038C                     	;# 
  3801  038C                     	;# 
  3802  038D                     	;# 
  3803  038E                     	;# 
  3804  0390                     	;# 
  3805  0390                     	;# 
  3806  0391                     	;# 
  3807  0392                     	;# 
  3808  048C                     	;# 
  3809  048C                     	;# 
  3810  048D                     	;# 
  3811  048E                     	;# 
  3812  048F                     	;# 
  3813  048F                     	;# 
  3814  0490                     	;# 
  3815  0491                     	;# 
  3816  0492                     	;# 
  3817  0492                     	;# 
  3818  0493                     	;# 
  3819  0494                     	;# 
  3820  0495                     	;# 
  3821  0495                     	;# 
  3822  0496                     	;# 
  3823  0497                     	;# 
  3824  0498                     	;# 
  3825  0499                     	;# 
  3826  049A                     	;# 
  3827  049B                     	;# 
  3828  049C                     	;# 
  3829  049D                     	;# 
  3830  058C                     	;# 
  3831  058C                     	;# 
  3832  058D                     	;# 
  3833  058E                     	;# 
  3834  058F                     	;# 
  3835  058F                     	;# 
  3836  0590                     	;# 
  3837  0591                     	;# 
  3838  0592                     	;# 
  3839  0593                     	;# 
  3840  059C                     	;# 
  3841  059C                     	;# 
  3842  059D                     	;# 
  3843  059D                     	;# 
  3844  059E                     	;# 
  3845  059F                     	;# 
  3846  060C                     	;# 
  3847  060C                     	;# 
  3848  060D                     	;# 
  3849  060D                     	;# 
  3850  060E                     	;# 
  3851  060F                     	;# 
  3852  0610                     	;# 
  3853  0611                     	;# 
  3854  0612                     	;# 
  3855  0613                     	;# 
  3856  0614                     	;# 
  3857  0616                     	;# 
  3858  0616                     	;# 
  3859  0617                     	;# 
  3860  0617                     	;# 
  3861  0618                     	;# 
  3862  0619                     	;# 
  3863  061A                     	;# 
  3864  061B                     	;# 
  3865  061C                     	;# 
  3866  061D                     	;# 
  3867  061E                     	;# 
  3868  070C                     	;# 
  3869  070D                     	;# 
  3870  070E                     	;# 
  3871  070F                     	;# 
  3872  0710                     	;# 
  3873  0711                     	;# 
  3874  0712                     	;# 
  3875  0713                     	;# 
  3876  0714                     	;# 
  3877  0716                     	;# 
  3878  0717                     	;# 
  3879  0718                     	;# 
  3880  0719                     	;# 
  3881  071A                     	;# 
  3882  071B                     	;# 
  3883  071C                     	;# 
  3884  071D                     	;# 
  3885  071E                     	;# 
  3886  0796                     	;# 
  3887  0797                     	;# 
  3888  0798                     	;# 
  3889  0799                     	;# 
  3890  079A                     	;# 
  3891  079B                     	;# 
  3892  079C                     	;# 
  3893  079D                     	;# 
  3894  080C                     	;# 
  3895  080D                     	;# 
  3896  080E                     	;# 
  3897  080F                     	;# 
  3898  0810                     	;# 
  3899  0811                     	;# 
  3900  0812                     	;# 
  3901  0813                     	;# 
  3902  0814                     	;# 
  3903  081A                     	;# 
  3904  081A                     	;# 
  3905  081B                     	;# 
  3906  081C                     	;# 
  3907  081C                     	;# 
  3908  081D                     	;# 
  3909  081E                     	;# 
  3910  081F                     	;# 
  3911  088C                     	;# 
  3912  088D                     	;# 
  3913  088E                     	;# 
  3914  088F                     	;# 
  3915  0890                     	;# 
  3916  0891                     	;# 
  3917  0892                     	;# 
  3918  0893                     	;# 
  3919  0895                     	;# 
  3920  0896                     	;# 
  3921  0897                     	;# 
  3922  0898                     	;# 
  3923  0899                     	;# 
  3924  089A                     	;# 
  3925  089B                     	;# 
  3926  090C                     	;# 
  3927  090E                     	;# 
  3928  090F                     	;# 
  3929  091F                     	;# 
  3930  098F                     	;# 
  3931  098F                     	;# 
  3932  0990                     	;# 
  3933  0991                     	;# 
  3934  0992                     	;# 
  3935  0993                     	;# 
  3936  0994                     	;# 
  3937  0995                     	;# 
  3938  0996                     	;# 
  3939  0997                     	;# 
  3940  1E0F                     	;# 
  3941  1E10                     	;# 
  3942  1E11                     	;# 
  3943  1E12                     	;# 
  3944  1E13                     	;# 
  3945  1E14                     	;# 
  3946  1E15                     	;# 
  3947  1E16                     	;# 
  3948  1E17                     	;# 
  3949  1E18                     	;# 
  3950  1E19                     	;# 
  3951  1E1A                     	;# 
  3952  1E1B                     	;# 
  3953  1E1C                     	;# 
  3954  1E1D                     	;# 
  3955  1E1E                     	;# 
  3956  1E1F                     	;# 
  3957  1E20                     	;# 
  3958  1E21                     	;# 
  3959  1E22                     	;# 
  3960  1E23                     	;# 
  3961  1E24                     	;# 
  3962  1E25                     	;# 
  3963  1E26                     	;# 
  3964  1E27                     	;# 
  3965  1E28                     	;# 
  3966  1E29                     	;# 
  3967  1E2A                     	;# 
  3968  1E2B                     	;# 
  3969  1E2C                     	;# 
  3970  1E2D                     	;# 
  3971  1E2E                     	;# 
  3972  1E2F                     	;# 
  3973  1E30                     	;# 
  3974  1E31                     	;# 
  3975  1E32                     	;# 
  3976  1E33                     	;# 
  3977  1E34                     	;# 
  3978  1E35                     	;# 
  3979  1E36                     	;# 
  3980  1E37                     	;# 
  3981  1E8F                     	;# 
  3982  1E90                     	;# 
  3983  1E91                     	;# 
  3984  1E92                     	;# 
  3985  1E93                     	;# 
  3986  1E94                     	;# 
  3987  1E95                     	;# 
  3988  1E96                     	;# 
  3989  1E97                     	;# 
  3990  1E9C                     	;# 
  3991  1E9D                     	;# 
  3992  1E9E                     	;# 
  3993  1EA1                     	;# 
  3994  1EA2                     	;# 
  3995  1EA3                     	;# 
  3996  1EA4                     	;# 
  3997  1EA9                     	;# 
  3998  1EAA                     	;# 
  3999  1EB1                     	;# 
  4000  1EB2                     	;# 
  4001  1EB8                     	;# 
  4002  1EB9                     	;# 
  4003  1EBA                     	;# 
  4004  1EBB                     	;# 
  4005  1EBC                     	;# 
  4006  1EBD                     	;# 
  4007  1EBE                     	;# 
  4008  1EC3                     	;# 
  4009  1EC5                     	;# 
  4010  1EC6                     	;# 
  4011  1EC7                     	;# 
  4012  1EC8                     	;# 
  4013  1EC9                     	;# 
  4014  1ECA                     	;# 
  4015  1ECB                     	;# 
  4016  1ECC                     	;# 
  4017  1F10                     	;# 
  4018  1F11                     	;# 
  4019  1F12                     	;# 
  4020  1F14                     	;# 
  4021  1F15                     	;# 
  4022  1F20                     	;# 
  4023  1F21                     	;# 
  4024  1F22                     	;# 
  4025  1F23                     	;# 
  4026  1F24                     	;# 
  4027  1F25                     	;# 
  4028  1F38                     	;# 
  4029  1F39                     	;# 
  4030  1F3A                     	;# 
  4031  1F3B                     	;# 
  4032  1F3C                     	;# 
  4033  1F3D                     	;# 
  4034  1F3E                     	;# 
  4035  1F3F                     	;# 
  4036  1F4E                     	;# 
  4037  1F4F                     	;# 
  4038  1F50                     	;# 
  4039  1F51                     	;# 
  4040  1F52                     	;# 
  4041  1F53                     	;# 
  4042  1F54                     	;# 
  4043  1F55                     	;# 
  4044  1FE4                     	;# 
  4045  1FE5                     	;# 
  4046  1FE6                     	;# 
  4047  1FE7                     	;# 
  4048  1FE8                     	;# 
  4049  1FE8                     	;# 
  4050  1FE9                     	;# 
  4051  1FEA                     	;# 
  4052  1FEB                     	;# 
  4053  1FED                     	;# 
  4054  1FEE                     	;# 
  4055  1FEF                     	;# 
  4056  0000                     	;# 
  4057  0001                     	;# 
  4058  0002                     	;# 
  4059  0003                     	;# 
  4060  0004                     	;# 
  4061  0005                     	;# 
  4062  0006                     	;# 
  4063  0007                     	;# 
  4064  0008                     	;# 
  4065  0009                     	;# 
  4066  000A                     	;# 
  4067  000B                     	;# 
  4068  000C                     	;# 
  4069  000E                     	;# 
  4070  0012                     	;# 
  4071  0014                     	;# 
  4072  0018                     	;# 
  4073  001A                     	;# 
  4074  008C                     	;# 
  4075  008C                     	;# 
  4076  008D                     	;# 
  4077  008E                     	;# 
  4078  008E                     	;# 
  4079  008F                     	;# 
  4080  0090                     	;# 
  4081  0090                     	;# 
  4082  0091                     	;# 
  4083  0092                     	;# 
  4084  0092                     	;# 
  4085  0093                     	;# 
  4086  0094                     	;# 
  4087  0094                     	;# 
  4088  0095                     	;# 
  4089  0096                     	;# 
  4090  0096                     	;# 
  4091  0097                     	;# 
  4092  0098                     	;# 
  4093  0099                     	;# 
  4094  009A                     	;# 
  4095  009B                     	;# 
  4096  009B                     	;# 
  4097  009C                     	;# 
  4098  009D                     	;# 
  4099  009D                     	;# 
  4100  009E                     	;# 
  4101  009F                     	;# 
  4102  010C                     	;# 
  4103  010C                     	;# 
  4104  010D                     	;# 
  4105  010E                     	;# 
  4106  010F                     	;# 
  4107  010F                     	;# 
  4108  0110                     	;# 
  4109  0111                     	;# 
  4110  0112                     	;# 
  4111  0113                     	;# 
  4112  0114                     	;# 
  4113  0115                     	;# 
  4114  0116                     	;# 
  4115  0117                     	;# 
  4116  0118                     	;# 
  4117  0119                     	;# 
  4118  0119                     	;# 
  4119  0119                     	;# 
  4120  011A                     	;# 
  4121  011A                     	;# 
  4122  011A                     	;# 
  4123  011B                     	;# 
  4124  011B                     	;# 
  4125  011B                     	;# 
  4126  011B                     	;# 
  4127  011B                     	;# 
  4128  011C                     	;# 
  4129  011C                     	;# 
  4130  011C                     	;# 
  4131  011D                     	;# 
  4132  011D                     	;# 
  4133  011D                     	;# 
  4134  011E                     	;# 
  4135  011E                     	;# 
  4136  011E                     	;# 
  4137  011F                     	;# 
  4138  011F                     	;# 
  4139  011F                     	;# 
  4140  011F                     	;# 
  4141  011F                     	;# 
  4142  018C                     	;# 
  4143  018D                     	;# 
  4144  018E                     	;# 
  4145  018F                     	;# 
  4146  0190                     	;# 
  4147  0191                     	;# 
  4148  0192                     	;# 
  4149  0196                     	;# 
  4150  0197                     	;# 
  4151  0198                     	;# 
  4152  0199                     	;# 
  4153  019A                     	;# 
  4154  019B                     	;# 
  4155  019C                     	;# 
  4156  020C                     	;# 
  4157  020D                     	;# 
  4158  020E                     	;# 
  4159  020E                     	;# 
  4160  020F                     	;# 
  4161  020F                     	;# 
  4162  0210                     	;# 
  4163  0210                     	;# 
  4164  0211                     	;# 
  4165  0211                     	;# 
  4166  0212                     	;# 
  4167  0213                     	;# 
  4168  0214                     	;# 
  4169  0214                     	;# 
  4170  0215                     	;# 
  4171  0215                     	;# 
  4172  0216                     	;# 
  4173  0216                     	;# 
  4174  0217                     	;# 
  4175  0217                     	;# 
  4176  0218                     	;# 
  4177  0219                     	;# 
  4178  021A                     	;# 
  4179  021A                     	;# 
  4180  021B                     	;# 
  4181  021B                     	;# 
  4182  021C                     	;# 
  4183  021C                     	;# 
  4184  021D                     	;# 
  4185  021D                     	;# 
  4186  021E                     	;# 
  4187  021F                     	;# 
  4188  028C                     	;# 
  4189  028C                     	;# 
  4190  028D                     	;# 
  4191  028D                     	;# 
  4192  028E                     	;# 
  4193  028F                     	;# 
  4194  0290                     	;# 
  4195  0291                     	;# 
  4196  0292                     	;# 
  4197  0292                     	;# 
  4198  0293                     	;# 
  4199  0293                     	;# 
  4200  0294                     	;# 
  4201  0295                     	;# 
  4202  0296                     	;# 
  4203  0297                     	;# 
  4204  0298                     	;# 
  4205  0298                     	;# 
  4206  0299                     	;# 
  4207  0299                     	;# 
  4208  029A                     	;# 
  4209  029B                     	;# 
  4210  029C                     	;# 
  4211  029D                     	;# 
  4212  029F                     	;# 
  4213  030C                     	;# 
  4214  030C                     	;# 
  4215  030D                     	;# 
  4216  030E                     	;# 
  4217  030F                     	;# 
  4218  0310                     	;# 
  4219  0310                     	;# 
  4220  0311                     	;# 
  4221  0312                     	;# 
  4222  0313                     	;# 
  4223  0314                     	;# 
  4224  0314                     	;# 
  4225  0315                     	;# 
  4226  0316                     	;# 
  4227  0317                     	;# 
  4228  0318                     	;# 
  4229  0318                     	;# 
  4230  0319                     	;# 
  4231  031A                     	;# 
  4232  031B                     	;# 
  4233  038C                     	;# 
  4234  038C                     	;# 
  4235  038D                     	;# 
  4236  038E                     	;# 
  4237  0390                     	;# 
  4238  0390                     	;# 
  4239  0391                     	;# 
  4240  0392                     	;# 
  4241  048C                     	;# 
  4242  048C                     	;# 
  4243  048D                     	;# 
  4244  048E                     	;# 
  4245  048F                     	;# 
  4246  048F                     	;# 
  4247  0490                     	;# 
  4248  0491                     	;# 
  4249  0492                     	;# 
  4250  0492                     	;# 
  4251  0493                     	;# 
  4252  0494                     	;# 
  4253  0495                     	;# 
  4254  0495                     	;# 
  4255  0496                     	;# 
  4256  0497                     	;# 
  4257  0498                     	;# 
  4258  0499                     	;# 
  4259  049A                     	;# 
  4260  049B                     	;# 
  4261  049C                     	;# 
  4262  049D                     	;# 
  4263  058C                     	;# 
  4264  058C                     	;# 
  4265  058D                     	;# 
  4266  058E                     	;# 
  4267  058F                     	;# 
  4268  058F                     	;# 
  4269  0590                     	;# 
  4270  0591                     	;# 
  4271  0592                     	;# 
  4272  0593                     	;# 
  4273  059C                     	;# 
  4274  059C                     	;# 
  4275  059D                     	;# 
  4276  059D                     	;# 
  4277  059E                     	;# 
  4278  059F                     	;# 
  4279  060C                     	;# 
  4280  060C                     	;# 
  4281  060D                     	;# 
  4282  060D                     	;# 
  4283  060E                     	;# 
  4284  060F                     	;# 
  4285  0610                     	;# 
  4286  0611                     	;# 
  4287  0612                     	;# 
  4288  0613                     	;# 
  4289  0614                     	;# 
  4290  0616                     	;# 
  4291  0616                     	;# 
  4292  0617                     	;# 
  4293  0617                     	;# 
  4294  0618                     	;# 
  4295  0619                     	;# 
  4296  061A                     	;# 
  4297  061B                     	;# 
  4298  061C                     	;# 
  4299  061D                     	;# 
  4300  061E                     	;# 
  4301  070C                     	;# 
  4302  070D                     	;# 
  4303  070E                     	;# 
  4304  070F                     	;# 
  4305  0710                     	;# 
  4306  0711                     	;# 
  4307  0712                     	;# 
  4308  0713                     	;# 
  4309  0714                     	;# 
  4310  0716                     	;# 
  4311  0717                     	;# 
  4312  0718                     	;# 
  4313  0719                     	;# 
  4314  071A                     	;# 
  4315  071B                     	;# 
  4316  071C                     	;# 
  4317  071D                     	;# 
  4318  071E                     	;# 
  4319  0796                     	;# 
  4320  0797                     	;# 
  4321  0798                     	;# 
  4322  0799                     	;# 
  4323  079A                     	;# 
  4324  079B                     	;# 
  4325  079C                     	;# 
  4326  079D                     	;# 
  4327  080C                     	;# 
  4328  080D                     	;# 
  4329  080E                     	;# 
  4330  080F                     	;# 
  4331  0810                     	;# 
  4332  0811                     	;# 
  4333  0812                     	;# 
  4334  0813                     	;# 
  4335  0814                     	;# 
  4336  081A                     	;# 
  4337  081A                     	;# 
  4338  081B                     	;# 
  4339  081C                     	;# 
  4340  081C                     	;# 
  4341  081D                     	;# 
  4342  081E                     	;# 
  4343  081F                     	;# 
  4344  088C                     	;# 
  4345  088D                     	;# 
  4346  088E                     	;# 
  4347  088F                     	;# 
  4348  0890                     	;# 
  4349  0891                     	;# 
  4350  0892                     	;# 
  4351  0893                     	;# 
  4352  0895                     	;# 
  4353  0896                     	;# 
  4354  0897                     	;# 
  4355  0898                     	;# 
  4356  0899                     	;# 
  4357  089A                     	;# 
  4358  089B                     	;# 
  4359  090C                     	;# 
  4360  090E                     	;# 
  4361  090F                     	;# 
  4362  091F                     	;# 
  4363  098F                     	;# 
  4364  098F                     	;# 
  4365  0990                     	;# 
  4366  0991                     	;# 
  4367  0992                     	;# 
  4368  0993                     	;# 
  4369  0994                     	;# 
  4370  0995                     	;# 
  4371  0996                     	;# 
  4372  0997                     	;# 
  4373  1E0F                     	;# 
  4374  1E10                     	;# 
  4375  1E11                     	;# 
  4376  1E12                     	;# 
  4377  1E13                     	;# 
  4378  1E14                     	;# 
  4379  1E15                     	;# 
  4380  1E16                     	;# 
  4381  1E17                     	;# 
  4382  1E18                     	;# 
  4383  1E19                     	;# 
  4384  1E1A                     	;# 
  4385  1E1B                     	;# 
  4386  1E1C                     	;# 
  4387  1E1D                     	;# 
  4388  1E1E                     	;# 
  4389  1E1F                     	;# 
  4390  1E20                     	;# 
  4391  1E21                     	;# 
  4392  1E22                     	;# 
  4393  1E23                     	;# 
  4394  1E24                     	;# 
  4395  1E25                     	;# 
  4396  1E26                     	;# 
  4397  1E27                     	;# 
  4398  1E28                     	;# 
  4399  1E29                     	;# 
  4400  1E2A                     	;# 
  4401  1E2B                     	;# 
  4402  1E2C                     	;# 
  4403  1E2D                     	;# 
  4404  1E2E                     	;# 
  4405  1E2F                     	;# 
  4406  1E30                     	;# 
  4407  1E31                     	;# 
  4408  1E32                     	;# 
  4409  1E33                     	;# 
  4410  1E34                     	;# 
  4411  1E35                     	;# 
  4412  1E36                     	;# 
  4413  1E37                     	;# 
  4414  1E8F                     	;# 
  4415  1E90                     	;# 
  4416  1E91                     	;# 
  4417  1E92                     	;# 
  4418  1E93                     	;# 
  4419  1E94                     	;# 
  4420  1E95                     	;# 
  4421  1E96                     	;# 
  4422  1E97                     	;# 
  4423  1E9C                     	;# 
  4424  1E9D                     	;# 
  4425  1E9E                     	;# 
  4426  1EA1                     	;# 
  4427  1EA2                     	;# 
  4428  1EA3                     	;# 
  4429  1EA4                     	;# 
  4430  1EA9                     	;# 
  4431  1EAA                     	;# 
  4432  1EB1                     	;# 
  4433  1EB2                     	;# 
  4434  1EB8                     	;# 
  4435  1EB9                     	;# 
  4436  1EBA                     	;# 
  4437  1EBB                     	;# 
  4438  1EBC                     	;# 
  4439  1EBD                     	;# 
  4440  1EBE                     	;# 
  4441  1EC3                     	;# 
  4442  1EC5                     	;# 
  4443  1EC6                     	;# 
  4444  1EC7                     	;# 
  4445  1EC8                     	;# 
  4446  1EC9                     	;# 
  4447  1ECA                     	;# 
  4448  1ECB                     	;# 
  4449  1ECC                     	;# 
  4450  1F10                     	;# 
  4451  1F11                     	;# 
  4452  1F12                     	;# 
  4453  1F14                     	;# 
  4454  1F15                     	;# 
  4455  1F20                     	;# 
  4456  1F21                     	;# 
  4457  1F22                     	;# 
  4458  1F23                     	;# 
  4459  1F24                     	;# 
  4460  1F25                     	;# 
  4461  1F38                     	;# 
  4462  1F39                     	;# 
  4463  1F3A                     	;# 
  4464  1F3B                     	;# 
  4465  1F3C                     	;# 
  4466  1F3D                     	;# 
  4467  1F3E                     	;# 
  4468  1F3F                     	;# 
  4469  1F4E                     	;# 
  4470  1F4F                     	;# 
  4471  1F50                     	;# 
  4472  1F51                     	;# 
  4473  1F52                     	;# 
  4474  1F53                     	;# 
  4475  1F54                     	;# 
  4476  1F55                     	;# 
  4477  1FE4                     	;# 
  4478  1FE5                     	;# 
  4479  1FE6                     	;# 
  4480  1FE7                     	;# 
  4481  1FE8                     	;# 
  4482  1FE8                     	;# 
  4483  1FE9                     	;# 
  4484  1FEA                     	;# 
  4485  1FEB                     	;# 
  4486  1FED                     	;# 
  4487  1FEE                     	;# 
  4488  1FEF                     	;# 
  4489  0000                     	;# 
  4490  0001                     	;# 
  4491  0002                     	;# 
  4492  0003                     	;# 
  4493  0004                     	;# 
  4494  0005                     	;# 
  4495  0006                     	;# 
  4496  0007                     	;# 
  4497  0008                     	;# 
  4498  0009                     	;# 
  4499  000A                     	;# 
  4500  000B                     	;# 
  4501  000C                     	;# 
  4502  000E                     	;# 
  4503  0012                     	;# 
  4504  0014                     	;# 
  4505  0018                     	;# 
  4506  001A                     	;# 
  4507  008C                     	;# 
  4508  008C                     	;# 
  4509  008D                     	;# 
  4510  008E                     	;# 
  4511  008E                     	;# 
  4512  008F                     	;# 
  4513  0090                     	;# 
  4514  0090                     	;# 
  4515  0091                     	;# 
  4516  0092                     	;# 
  4517  0092                     	;# 
  4518  0093                     	;# 
  4519  0094                     	;# 
  4520  0094                     	;# 
  4521  0095                     	;# 
  4522  0096                     	;# 
  4523  0096                     	;# 
  4524  0097                     	;# 
  4525  0098                     	;# 
  4526  0099                     	;# 
  4527  009A                     	;# 
  4528  009B                     	;# 
  4529  009B                     	;# 
  4530  009C                     	;# 
  4531  009D                     	;# 
  4532  009D                     	;# 
  4533  009E                     	;# 
  4534  009F                     	;# 
  4535  010C                     	;# 
  4536  010C                     	;# 
  4537  010D                     	;# 
  4538  010E                     	;# 
  4539  010F                     	;# 
  4540  010F                     	;# 
  4541  0110                     	;# 
  4542  0111                     	;# 
  4543  0112                     	;# 
  4544  0113                     	;# 
  4545  0114                     	;# 
  4546  0115                     	;# 
  4547  0116                     	;# 
  4548  0117                     	;# 
  4549  0118                     	;# 
  4550  0119                     	;# 
  4551  0119                     	;# 
  4552  0119                     	;# 
  4553  011A                     	;# 
  4554  011A                     	;# 
  4555  011A                     	;# 
  4556  011B                     	;# 
  4557  011B                     	;# 
  4558  011B                     	;# 
  4559  011B                     	;# 
  4560  011B                     	;# 
  4561  011C                     	;# 
  4562  011C                     	;# 
  4563  011C                     	;# 
  4564  011D                     	;# 
  4565  011D                     	;# 
  4566  011D                     	;# 
  4567  011E                     	;# 
  4568  011E                     	;# 
  4569  011E                     	;# 
  4570  011F                     	;# 
  4571  011F                     	;# 
  4572  011F                     	;# 
  4573  011F                     	;# 
  4574  011F                     	;# 
  4575  018C                     	;# 
  4576  018D                     	;# 
  4577  018E                     	;# 
  4578  018F                     	;# 
  4579  0190                     	;# 
  4580  0191                     	;# 
  4581  0192                     	;# 
  4582  0196                     	;# 
  4583  0197                     	;# 
  4584  0198                     	;# 
  4585  0199                     	;# 
  4586  019A                     	;# 
  4587  019B                     	;# 
  4588  019C                     	;# 
  4589  020C                     	;# 
  4590  020D                     	;# 
  4591  020E                     	;# 
  4592  020E                     	;# 
  4593  020F                     	;# 
  4594  020F                     	;# 
  4595  0210                     	;# 
  4596  0210                     	;# 
  4597  0211                     	;# 
  4598  0211                     	;# 
  4599  0212                     	;# 
  4600  0213                     	;# 
  4601  0214                     	;# 
  4602  0214                     	;# 
  4603  0215                     	;# 
  4604  0215                     	;# 
  4605  0216                     	;# 
  4606  0216                     	;# 
  4607  0217                     	;# 
  4608  0217                     	;# 
  4609  0218                     	;# 
  4610  0219                     	;# 
  4611  021A                     	;# 
  4612  021A                     	;# 
  4613  021B                     	;# 
  4614  021B                     	;# 
  4615  021C                     	;# 
  4616  021C                     	;# 
  4617  021D                     	;# 
  4618  021D                     	;# 
  4619  021E                     	;# 
  4620  021F                     	;# 
  4621  028C                     	;# 
  4622  028C                     	;# 
  4623  028D                     	;# 
  4624  028D                     	;# 
  4625  028E                     	;# 
  4626  028F                     	;# 
  4627  0290                     	;# 
  4628  0291                     	;# 
  4629  0292                     	;# 
  4630  0292                     	;# 
  4631  0293                     	;# 
  4632  0293                     	;# 
  4633  0294                     	;# 
  4634  0295                     	;# 
  4635  0296                     	;# 
  4636  0297                     	;# 
  4637  0298                     	;# 
  4638  0298                     	;# 
  4639  0299                     	;# 
  4640  0299                     	;# 
  4641  029A                     	;# 
  4642  029B                     	;# 
  4643  029C                     	;# 
  4644  029D                     	;# 
  4645  029F                     	;# 
  4646  030C                     	;# 
  4647  030C                     	;# 
  4648  030D                     	;# 
  4649  030E                     	;# 
  4650  030F                     	;# 
  4651  0310                     	;# 
  4652  0310                     	;# 
  4653  0311                     	;# 
  4654  0312                     	;# 
  4655  0313                     	;# 
  4656  0314                     	;# 
  4657  0314                     	;# 
  4658  0315                     	;# 
  4659  0316                     	;# 
  4660  0317                     	;# 
  4661  0318                     	;# 
  4662  0318                     	;# 
  4663  0319                     	;# 
  4664  031A                     	;# 
  4665  031B                     	;# 
  4666  038C                     	;# 
  4667  038C                     	;# 
  4668  038D                     	;# 
  4669  038E                     	;# 
  4670  0390                     	;# 
  4671  0390                     	;# 
  4672  0391                     	;# 
  4673  0392                     	;# 
  4674  048C                     	;# 
  4675  048C                     	;# 
  4676  048D                     	;# 
  4677  048E                     	;# 
  4678  048F                     	;# 
  4679  048F                     	;# 
  4680  0490                     	;# 
  4681  0491                     	;# 
  4682  0492                     	;# 
  4683  0492                     	;# 
  4684  0493                     	;# 
  4685  0494                     	;# 
  4686  0495                     	;# 
  4687  0495                     	;# 
  4688  0496                     	;# 
  4689  0497                     	;# 
  4690  0498                     	;# 
  4691  0499                     	;# 
  4692  049A                     	;# 
  4693  049B                     	;# 
  4694  049C                     	;# 
  4695  049D                     	;# 
  4696  058C                     	;# 
  4697  058C                     	;# 
  4698  058D                     	;# 
  4699  058E                     	;# 
  4700  058F                     	;# 
  4701  058F                     	;# 
  4702  0590                     	;# 
  4703  0591                     	;# 
  4704  0592                     	;# 
  4705  0593                     	;# 
  4706  059C                     	;# 
  4707  059C                     	;# 
  4708  059D                     	;# 
  4709  059D                     	;# 
  4710  059E                     	;# 
  4711  059F                     	;# 
  4712  060C                     	;# 
  4713  060C                     	;# 
  4714  060D                     	;# 
  4715  060D                     	;# 
  4716  060E                     	;# 
  4717  060F                     	;# 
  4718  0610                     	;# 
  4719  0611                     	;# 
  4720  0612                     	;# 
  4721  0613                     	;# 
  4722  0614                     	;# 
  4723  0616                     	;# 
  4724  0616                     	;# 
  4725  0617                     	;# 
  4726  0617                     	;# 
  4727  0618                     	;# 
  4728  0619                     	;# 
  4729  061A                     	;# 
  4730  061B                     	;# 
  4731  061C                     	;# 
  4732  061D                     	;# 
  4733  061E                     	;# 
  4734  070C                     	;# 
  4735  070D                     	;# 
  4736  070E                     	;# 
  4737  070F                     	;# 
  4738  0710                     	;# 
  4739  0711                     	;# 
  4740  0712                     	;# 
  4741  0713                     	;# 
  4742  0714                     	;# 
  4743  0716                     	;# 
  4744  0717                     	;# 
  4745  0718                     	;# 
  4746  0719                     	;# 
  4747  071A                     	;# 
  4748  071B                     	;# 
  4749  071C                     	;# 
  4750  071D                     	;# 
  4751  071E                     	;# 
  4752  0796                     	;# 
  4753  0797                     	;# 
  4754  0798                     	;# 
  4755  0799                     	;# 
  4756  079A                     	;# 
  4757  079B                     	;# 
  4758  079C                     	;# 
  4759  079D                     	;# 
  4760  080C                     	;# 
  4761  080D                     	;# 
  4762  080E                     	;# 
  4763  080F                     	;# 
  4764  0810                     	;# 
  4765  0811                     	;# 
  4766  0812                     	;# 
  4767  0813                     	;# 
  4768  0814                     	;# 
  4769  081A                     	;# 
  4770  081A                     	;# 
  4771  081B                     	;# 
  4772  081C                     	;# 
  4773  081C                     	;# 
  4774  081D                     	;# 
  4775  081E                     	;# 
  4776  081F                     	;# 
  4777  088C                     	;# 
  4778  088D                     	;# 
  4779  088E                     	;# 
  4780  088F                     	;# 
  4781  0890                     	;# 
  4782  0891                     	;# 
  4783  0892                     	;# 
  4784  0893                     	;# 
  4785  0895                     	;# 
  4786  0896                     	;# 
  4787  0897                     	;# 
  4788  0898                     	;# 
  4789  0899                     	;# 
  4790  089A                     	;# 
  4791  089B                     	;# 
  4792  090C                     	;# 
  4793  090E                     	;# 
  4794  090F                     	;# 
  4795  091F                     	;# 
  4796  098F                     	;# 
  4797  098F                     	;# 
  4798  0990                     	;# 
  4799  0991                     	;# 
  4800  0992                     	;# 
  4801  0993                     	;# 
  4802  0994                     	;# 
  4803  0995                     	;# 
  4804  0996                     	;# 
  4805  0997                     	;# 
  4806  1E0F                     	;# 
  4807  1E10                     	;# 
  4808  1E11                     	;# 
  4809  1E12                     	;# 
  4810  1E13                     	;# 
  4811  1E14                     	;# 
  4812  1E15                     	;# 
  4813  1E16                     	;# 
  4814  1E17                     	;# 
  4815  1E18                     	;# 
  4816  1E19                     	;# 
  4817  1E1A                     	;# 
  4818  1E1B                     	;# 
  4819  1E1C                     	;# 
  4820  1E1D                     	;# 
  4821  1E1E                     	;# 
  4822  1E1F                     	;# 
  4823  1E20                     	;# 
  4824  1E21                     	;# 
  4825  1E22                     	;# 
  4826  1E23                     	;# 
  4827  1E24                     	;# 
  4828  1E25                     	;# 
  4829  1E26                     	;# 
  4830  1E27                     	;# 
  4831  1E28                     	;# 
  4832  1E29                     	;# 
  4833  1E2A                     	;# 
  4834  1E2B                     	;# 
  4835  1E2C                     	;# 
  4836  1E2D                     	;# 
  4837  1E2E                     	;# 
  4838  1E2F                     	;# 
  4839  1E30                     	;# 
  4840  1E31                     	;# 
  4841  1E32                     	;# 
  4842  1E33                     	;# 
  4843  1E34                     	;# 
  4844  1E35                     	;# 
  4845  1E36                     	;# 
  4846  1E37                     	;# 
  4847  1E8F                     	;# 
  4848  1E90                     	;# 
  4849  1E91                     	;# 
  4850  1E92                     	;# 
  4851  1E93                     	;# 
  4852  1E94                     	;# 
  4853  1E95                     	;# 
  4854  1E96                     	;# 
  4855  1E97                     	;# 
  4856  1E9C                     	;# 
  4857  1E9D                     	;# 
  4858  1E9E                     	;# 
  4859  1EA1                     	;# 
  4860  1EA2                     	;# 
  4861  1EA3                     	;# 
  4862  1EA4                     	;# 
  4863  1EA9                     	;# 
  4864  1EAA                     	;# 
  4865  1EB1                     	;# 
  4866  1EB2                     	;# 
  4867  1EB8                     	;# 
  4868  1EB9                     	;# 
  4869  1EBA                     	;# 
  4870  1EBB                     	;# 
  4871  1EBC                     	;# 
  4872  1EBD                     	;# 
  4873  1EBE                     	;# 
  4874  1EC3                     	;# 
  4875  1EC5                     	;# 
  4876  1EC6                     	;# 
  4877  1EC7                     	;# 
  4878  1EC8                     	;# 
  4879  1EC9                     	;# 
  4880  1ECA                     	;# 
  4881  1ECB                     	;# 
  4882  1ECC                     	;# 
  4883  1F10                     	;# 
  4884  1F11                     	;# 
  4885  1F12                     	;# 
  4886  1F14                     	;# 
  4887  1F15                     	;# 
  4888  1F20                     	;# 
  4889  1F21                     	;# 
  4890  1F22                     	;# 
  4891  1F23                     	;# 
  4892  1F24                     	;# 
  4893  1F25                     	;# 
  4894  1F38                     	;# 
  4895  1F39                     	;# 
  4896  1F3A                     	;# 
  4897  1F3B                     	;# 
  4898  1F3C                     	;# 
  4899  1F3D                     	;# 
  4900  1F3E                     	;# 
  4901  1F3F                     	;# 
  4902  1F4E                     	;# 
  4903  1F4F                     	;# 
  4904  1F50                     	;# 
  4905  1F51                     	;# 
  4906  1F52                     	;# 
  4907  1F53                     	;# 
  4908  1F54                     	;# 
  4909  1F55                     	;# 
  4910  1FE4                     	;# 
  4911  1FE5                     	;# 
  4912  1FE6                     	;# 
  4913  1FE7                     	;# 
  4914  1FE8                     	;# 
  4915  1FE8                     	;# 
  4916  1FE9                     	;# 
  4917  1FEA                     	;# 
  4918  1FEB                     	;# 
  4919  1FED                     	;# 
  4920  1FEE                     	;# 
  4921  1FEF                     	;# 
  4922  0000                     	;# 
  4923  0001                     	;# 
  4924  0002                     	;# 
  4925  0003                     	;# 
  4926  0004                     	;# 
  4927  0005                     	;# 
  4928  0006                     	;# 
  4929  0007                     	;# 
  4930  0008                     	;# 
  4931  0009                     	;# 
  4932  000A                     	;# 
  4933  000B                     	;# 
  4934  000C                     	;# 
  4935  000E                     	;# 
  4936  0012                     	;# 
  4937  0014                     	;# 
  4938  0018                     	;# 
  4939  001A                     	;# 
  4940  008C                     	;# 
  4941  008C                     	;# 
  4942  008D                     	;# 
  4943  008E                     	;# 
  4944  008E                     	;# 
  4945  008F                     	;# 
  4946  0090                     	;# 
  4947  0090                     	;# 
  4948  0091                     	;# 
  4949  0092                     	;# 
  4950  0092                     	;# 
  4951  0093                     	;# 
  4952  0094                     	;# 
  4953  0094                     	;# 
  4954  0095                     	;# 
  4955  0096                     	;# 
  4956  0096                     	;# 
  4957  0097                     	;# 
  4958  0098                     	;# 
  4959  0099                     	;# 
  4960  009A                     	;# 
  4961  009B                     	;# 
  4962  009B                     	;# 
  4963  009C                     	;# 
  4964  009D                     	;# 
  4965  009D                     	;# 
  4966  009E                     	;# 
  4967  009F                     	;# 
  4968  010C                     	;# 
  4969  010C                     	;# 
  4970  010D                     	;# 
  4971  010E                     	;# 
  4972  010F                     	;# 
  4973  010F                     	;# 
  4974  0110                     	;# 
  4975  0111                     	;# 
  4976  0112                     	;# 
  4977  0113                     	;# 
  4978  0114                     	;# 
  4979  0115                     	;# 
  4980  0116                     	;# 
  4981  0117                     	;# 
  4982  0118                     	;# 
  4983  0119                     	;# 
  4984  0119                     	;# 
  4985  0119                     	;# 
  4986  011A                     	;# 
  4987  011A                     	;# 
  4988  011A                     	;# 
  4989  011B                     	;# 
  4990  011B                     	;# 
  4991  011B                     	;# 
  4992  011B                     	;# 
  4993  011B                     	;# 
  4994  011C                     	;# 
  4995  011C                     	;# 
  4996  011C                     	;# 
  4997  011D                     	;# 
  4998  011D                     	;# 
  4999  011D                     	;# 
  5000  011E                     	;# 
  5001  011E                     	;# 
  5002  011E                     	;# 
  5003  011F                     	;# 
  5004  011F                     	;# 
  5005  011F                     	;# 
  5006  011F                     	;# 
  5007  011F                     	;# 
  5008  018C                     	;# 
  5009  018D                     	;# 
  5010  018E                     	;# 
  5011  018F                     	;# 
  5012  0190                     	;# 
  5013  0191                     	;# 
  5014  0192                     	;# 
  5015  0196                     	;# 
  5016  0197                     	;# 
  5017  0198                     	;# 
  5018  0199                     	;# 
  5019  019A                     	;# 
  5020  019B                     	;# 
  5021  019C                     	;# 
  5022  020C                     	;# 
  5023  020D                     	;# 
  5024  020E                     	;# 
  5025  020E                     	;# 
  5026  020F                     	;# 
  5027  020F                     	;# 
  5028  0210                     	;# 
  5029  0210                     	;# 
  5030  0211                     	;# 
  5031  0211                     	;# 
  5032  0212                     	;# 
  5033  0213                     	;# 
  5034  0214                     	;# 
  5035  0214                     	;# 
  5036  0215                     	;# 
  5037  0215                     	;# 
  5038  0216                     	;# 
  5039  0216                     	;# 
  5040  0217                     	;# 
  5041  0217                     	;# 
  5042  0218                     	;# 
  5043  0219                     	;# 
  5044  021A                     	;# 
  5045  021A                     	;# 
  5046  021B                     	;# 
  5047  021B                     	;# 
  5048  021C                     	;# 
  5049  021C                     	;# 
  5050  021D                     	;# 
  5051  021D                     	;# 
  5052  021E                     	;# 
  5053  021F                     	;# 
  5054  028C                     	;# 
  5055  028C                     	;# 
  5056  028D                     	;# 
  5057  028D                     	;# 
  5058  028E                     	;# 
  5059  028F                     	;# 
  5060  0290                     	;# 
  5061  0291                     	;# 
  5062  0292                     	;# 
  5063  0292                     	;# 
  5064  0293                     	;# 
  5065  0293                     	;# 
  5066  0294                     	;# 
  5067  0295                     	;# 
  5068  0296                     	;# 
  5069  0297                     	;# 
  5070  0298                     	;# 
  5071  0298                     	;# 
  5072  0299                     	;# 
  5073  0299                     	;# 
  5074  029A                     	;# 
  5075  029B                     	;# 
  5076  029C                     	;# 
  5077  029D                     	;# 
  5078  029F                     	;# 
  5079  030C                     	;# 
  5080  030C                     	;# 
  5081  030D                     	;# 
  5082  030E                     	;# 
  5083  030F                     	;# 
  5084  0310                     	;# 
  5085  0310                     	;# 
  5086  0311                     	;# 
  5087  0312                     	;# 
  5088  0313                     	;# 
  5089  0314                     	;# 
  5090  0314                     	;# 
  5091  0315                     	;# 
  5092  0316                     	;# 
  5093  0317                     	;# 
  5094  0318                     	;# 
  5095  0318                     	;# 
  5096  0319                     	;# 
  5097  031A                     	;# 
  5098  031B                     	;# 
  5099  038C                     	;# 
  5100  038C                     	;# 
  5101  038D                     	;# 
  5102  038E                     	;# 
  5103  0390                     	;# 
  5104  0390                     	;# 
  5105  0391                     	;# 
  5106  0392                     	;# 
  5107  048C                     	;# 
  5108  048C                     	;# 
  5109  048D                     	;# 
  5110  048E                     	;# 
  5111  048F                     	;# 
  5112  048F                     	;# 
  5113  0490                     	;# 
  5114  0491                     	;# 
  5115  0492                     	;# 
  5116  0492                     	;# 
  5117  0493                     	;# 
  5118  0494                     	;# 
  5119  0495                     	;# 
  5120  0495                     	;# 
  5121  0496                     	;# 
  5122  0497                     	;# 
  5123  0498                     	;# 
  5124  0499                     	;# 
  5125  049A                     	;# 
  5126  049B                     	;# 
  5127  049C                     	;# 
  5128  049D                     	;# 
  5129  058C                     	;# 
  5130  058C                     	;# 
  5131  058D                     	;# 
  5132  058E                     	;# 
  5133  058F                     	;# 
  5134  058F                     	;# 
  5135  0590                     	;# 
  5136  0591                     	;# 
  5137  0592                     	;# 
  5138  0593                     	;# 
  5139  059C                     	;# 
  5140  059C                     	;# 
  5141  059D                     	;# 
  5142  059D                     	;# 
  5143  059E                     	;# 
  5144  059F                     	;# 
  5145  060C                     	;# 
  5146  060C                     	;# 
  5147  060D                     	;# 
  5148  060D                     	;# 
  5149  060E                     	;# 
  5150  060F                     	;# 
  5151  0610                     	;# 
  5152  0611                     	;# 
  5153  0612                     	;# 
  5154  0613                     	;# 
  5155  0614                     	;# 
  5156  0616                     	;# 
  5157  0616                     	;# 
  5158  0617                     	;# 
  5159  0617                     	;# 
  5160  0618                     	;# 
  5161  0619                     	;# 
  5162  061A                     	;# 
  5163  061B                     	;# 
  5164  061C                     	;# 
  5165  061D                     	;# 
  5166  061E                     	;# 
  5167  070C                     	;# 
  5168  070D                     	;# 
  5169  070E                     	;# 
  5170  070F                     	;# 
  5171  0710                     	;# 
  5172  0711                     	;# 
  5173  0712                     	;# 
  5174  0713                     	;# 
  5175  0714                     	;# 
  5176  0716                     	;# 
  5177  0717                     	;# 
  5178  0718                     	;# 
  5179  0719                     	;# 
  5180  071A                     	;# 
  5181  071B                     	;# 
  5182  071C                     	;# 
  5183  071D                     	;# 
  5184  071E                     	;# 
  5185  0796                     	;# 
  5186  0797                     	;# 
  5187  0798                     	;# 
  5188  0799                     	;# 
  5189  079A                     	;# 
  5190  079B                     	;# 
  5191  079C                     	;# 
  5192  079D                     	;# 
  5193  080C                     	;# 
  5194  080D                     	;# 
  5195  080E                     	;# 
  5196  080F                     	;# 
  5197  0810                     	;# 
  5198  0811                     	;# 
  5199  0812                     	;# 
  5200  0813                     	;# 
  5201  0814                     	;# 
  5202  081A                     	;# 
  5203  081A                     	;# 
  5204  081B                     	;# 
  5205  081C                     	;# 
  5206  081C                     	;# 
  5207  081D                     	;# 
  5208  081E                     	;# 
  5209  081F                     	;# 
  5210  088C                     	;# 
  5211  088D                     	;# 
  5212  088E                     	;# 
  5213  088F                     	;# 
  5214  0890                     	;# 
  5215  0891                     	;# 
  5216  0892                     	;# 
  5217  0893                     	;# 
  5218  0895                     	;# 
  5219  0896                     	;# 
  5220  0897                     	;# 
  5221  0898                     	;# 
  5222  0899                     	;# 
  5223  089A                     	;# 
  5224  089B                     	;# 
  5225  090C                     	;# 
  5226  090E                     	;# 
  5227  090F                     	;# 
  5228  091F                     	;# 
  5229  098F                     	;# 
  5230  098F                     	;# 
  5231  0990                     	;# 
  5232  0991                     	;# 
  5233  0992                     	;# 
  5234  0993                     	;# 
  5235  0994                     	;# 
  5236  0995                     	;# 
  5237  0996                     	;# 
  5238  0997                     	;# 
  5239  1E0F                     	;# 
  5240  1E10                     	;# 
  5241  1E11                     	;# 
  5242  1E12                     	;# 
  5243  1E13                     	;# 
  5244  1E14                     	;# 
  5245  1E15                     	;# 
  5246  1E16                     	;# 
  5247  1E17                     	;# 
  5248  1E18                     	;# 
  5249  1E19                     	;# 
  5250  1E1A                     	;# 
  5251  1E1B                     	;# 
  5252  1E1C                     	;# 
  5253  1E1D                     	;# 
  5254  1E1E                     	;# 
  5255  1E1F                     	;# 
  5256  1E20                     	;# 
  5257  1E21                     	;# 
  5258  1E22                     	;# 
  5259  1E23                     	;# 
  5260  1E24                     	;# 
  5261  1E25                     	;# 
  5262  1E26                     	;# 
  5263  1E27                     	;# 
  5264  1E28                     	;# 
  5265  1E29                     	;# 
  5266  1E2A                     	;# 
  5267  1E2B                     	;# 
  5268  1E2C                     	;# 
  5269  1E2D                     	;# 
  5270  1E2E                     	;# 
  5271  1E2F                     	;# 
  5272  1E30                     	;# 
  5273  1E31                     	;# 
  5274  1E32                     	;# 
  5275  1E33                     	;# 
  5276  1E34                     	;# 
  5277  1E35                     	;# 
  5278  1E36                     	;# 
  5279  1E37                     	;# 
  5280  1E8F                     	;# 
  5281  1E90                     	;# 
  5282  1E91                     	;# 
  5283  1E92                     	;# 
  5284  1E93                     	;# 
  5285  1E94                     	;# 
  5286  1E95                     	;# 
  5287  1E96                     	;# 
  5288  1E97                     	;# 
  5289  1E9C                     	;# 
  5290  1E9D                     	;# 
  5291  1E9E                     	;# 
  5292  1EA1                     	;# 
  5293  1EA2                     	;# 
  5294  1EA3                     	;# 
  5295  1EA4                     	;# 
  5296  1EA9                     	;# 
  5297  1EAA                     	;# 
  5298  1EB1                     	;# 
  5299  1EB2                     	;# 
  5300  1EB8                     	;# 
  5301  1EB9                     	;# 
  5302  1EBA                     	;# 
  5303  1EBB                     	;# 
  5304  1EBC                     	;# 
  5305  1EBD                     	;# 
  5306  1EBE                     	;# 
  5307  1EC3                     	;# 
  5308  1EC5                     	;# 
  5309  1EC6                     	;# 
  5310  1EC7                     	;# 
  5311  1EC8                     	;# 
  5312  1EC9                     	;# 
  5313  1ECA                     	;# 
  5314  1ECB                     	;# 
  5315  1ECC                     	;# 
  5316  1F10                     	;# 
  5317  1F11                     	;# 
  5318  1F12                     	;# 
  5319  1F14                     	;# 
  5320  1F15                     	;# 
  5321  1F20                     	;# 
  5322  1F21                     	;# 
  5323  1F22                     	;# 
  5324  1F23                     	;# 
  5325  1F24                     	;# 
  5326  1F25                     	;# 
  5327  1F38                     	;# 
  5328  1F39                     	;# 
  5329  1F3A                     	;# 
  5330  1F3B                     	;# 
  5331  1F3C                     	;# 
  5332  1F3D                     	;# 
  5333  1F3E                     	;# 
  5334  1F3F                     	;# 
  5335  1F4E                     	;# 
  5336  1F4F                     	;# 
  5337  1F50                     	;# 
  5338  1F51                     	;# 
  5339  1F52                     	;# 
  5340  1F53                     	;# 
  5341  1F54                     	;# 
  5342  1F55                     	;# 
  5343  1FE4                     	;# 
  5344  1FE5                     	;# 
  5345  1FE6                     	;# 
  5346  1FE7                     	;# 
  5347  1FE8                     	;# 
  5348  1FE8                     	;# 
  5349  1FE9                     	;# 
  5350  1FEA                     	;# 
  5351  1FEB                     	;# 
  5352  1FED                     	;# 
  5353  1FEE                     	;# 
  5354  1FEF                     	;# 
  5355  0000                     	;# 
  5356  0001                     	;# 
  5357  0002                     	;# 
  5358  0003                     	;# 
  5359  0004                     	;# 
  5360  0005                     	;# 
  5361  0006                     	;# 
  5362  0007                     	;# 
  5363  0008                     	;# 
  5364  0009                     	;# 
  5365  000A                     	;# 
  5366  000B                     	;# 
  5367  000C                     	;# 
  5368  000E                     	;# 
  5369  0012                     	;# 
  5370  0014                     	;# 
  5371  0018                     	;# 
  5372  001A                     	;# 
  5373  008C                     	;# 
  5374  008C                     	;# 
  5375  008D                     	;# 
  5376  008E                     	;# 
  5377  008E                     	;# 
  5378  008F                     	;# 
  5379  0090                     	;# 
  5380  0090                     	;# 
  5381  0091                     	;# 
  5382  0092                     	;# 
  5383  0092                     	;# 
  5384  0093                     	;# 
  5385  0094                     	;# 
  5386  0094                     	;# 
  5387  0095                     	;# 
  5388  0096                     	;# 
  5389  0096                     	;# 
  5390  0097                     	;# 
  5391  0098                     	;# 
  5392  0099                     	;# 
  5393  009A                     	;# 
  5394  009B                     	;# 
  5395  009B                     	;# 
  5396  009C                     	;# 
  5397  009D                     	;# 
  5398  009D                     	;# 
  5399  009E                     	;# 
  5400  009F                     	;# 
  5401  010C                     	;# 
  5402  010C                     	;# 
  5403  010D                     	;# 
  5404  010E                     	;# 
  5405  010F                     	;# 
  5406  010F                     	;# 
  5407  0110                     	;# 
  5408  0111                     	;# 
  5409  0112                     	;# 
  5410  0113                     	;# 
  5411  0114                     	;# 
  5412  0115                     	;# 
  5413  0116                     	;# 
  5414  0117                     	;# 
  5415  0118                     	;# 
  5416  0119                     	;# 
  5417  0119                     	;# 
  5418  0119                     	;# 
  5419  011A                     	;# 
  5420  011A                     	;# 
  5421  011A                     	;# 
  5422  011B                     	;# 
  5423  011B                     	;# 
  5424  011B                     	;# 
  5425  011B                     	;# 
  5426  011B                     	;# 
  5427  011C                     	;# 
  5428  011C                     	;# 
  5429  011C                     	;# 
  5430  011D                     	;# 
  5431  011D                     	;# 
  5432  011D                     	;# 
  5433  011E                     	;# 
  5434  011E                     	;# 
  5435  011E                     	;# 
  5436  011F                     	;# 
  5437  011F                     	;# 
  5438  011F                     	;# 
  5439  011F                     	;# 
  5440  011F                     	;# 
  5441  018C                     	;# 
  5442  018D                     	;# 
  5443  018E                     	;# 
  5444  018F                     	;# 
  5445  0190                     	;# 
  5446  0191                     	;# 
  5447  0192                     	;# 
  5448  0196                     	;# 
  5449  0197                     	;# 
  5450  0198                     	;# 
  5451  0199                     	;# 
  5452  019A                     	;# 
  5453  019B                     	;# 
  5454  019C                     	;# 
  5455  020C                     	;# 
  5456  020D                     	;# 
  5457  020E                     	;# 
  5458  020E                     	;# 
  5459  020F                     	;# 
  5460  020F                     	;# 
  5461  0210                     	;# 
  5462  0210                     	;# 
  5463  0211                     	;# 
  5464  0211                     	;# 
  5465  0212                     	;# 
  5466  0213                     	;# 
  5467  0214                     	;# 
  5468  0214                     	;# 
  5469  0215                     	;# 
  5470  0215                     	;# 
  5471  0216                     	;# 
  5472  0216                     	;# 
  5473  0217                     	;# 
  5474  0217                     	;# 
  5475  0218                     	;# 
  5476  0219                     	;# 
  5477  021A                     	;# 
  5478  021A                     	;# 
  5479  021B                     	;# 
  5480  021B                     	;# 
  5481  021C                     	;# 
  5482  021C                     	;# 
  5483  021D                     	;# 
  5484  021D                     	;# 
  5485  021E                     	;# 
  5486  021F                     	;# 
  5487  028C                     	;# 
  5488  028C                     	;# 
  5489  028D                     	;# 
  5490  028D                     	;# 
  5491  028E                     	;# 
  5492  028F                     	;# 
  5493  0290                     	;# 
  5494  0291                     	;# 
  5495  0292                     	;# 
  5496  0292                     	;# 
  5497  0293                     	;# 
  5498  0293                     	;# 
  5499  0294                     	;# 
  5500  0295                     	;# 
  5501  0296                     	;# 
  5502  0297                     	;# 
  5503  0298                     	;# 
  5504  0298                     	;# 
  5505  0299                     	;# 
  5506  0299                     	;# 
  5507  029A                     	;# 
  5508  029B                     	;# 
  5509  029C                     	;# 
  5510  029D                     	;# 
  5511  029F                     	;# 
  5512  030C                     	;# 
  5513  030C                     	;# 
  5514  030D                     	;# 
  5515  030E                     	;# 
  5516  030F                     	;# 
  5517  0310                     	;# 
  5518  0310                     	;# 
  5519  0311                     	;# 
  5520  0312                     	;# 
  5521  0313                     	;# 
  5522  0314                     	;# 
  5523  0314                     	;# 
  5524  0315                     	;# 
  5525  0316                     	;# 
  5526  0317                     	;# 
  5527  0318                     	;# 
  5528  0318                     	;# 
  5529  0319                     	;# 
  5530  031A                     	;# 
  5531  031B                     	;# 
  5532  038C                     	;# 
  5533  038C                     	;# 
  5534  038D                     	;# 
  5535  038E                     	;# 
  5536  0390                     	;# 
  5537  0390                     	;# 
  5538  0391                     	;# 
  5539  0392                     	;# 
  5540  048C                     	;# 
  5541  048C                     	;# 
  5542  048D                     	;# 
  5543  048E                     	;# 
  5544  048F                     	;# 
  5545  048F                     	;# 
  5546  0490                     	;# 
  5547  0491                     	;# 
  5548  0492                     	;# 
  5549  0492                     	;# 
  5550  0493                     	;# 
  5551  0494                     	;# 
  5552  0495                     	;# 
  5553  0495                     	;# 
  5554  0496                     	;# 
  5555  0497                     	;# 
  5556  0498                     	;# 
  5557  0499                     	;# 
  5558  049A                     	;# 
  5559  049B                     	;# 
  5560  049C                     	;# 
  5561  049D                     	;# 
  5562  058C                     	;# 
  5563  058C                     	;# 
  5564  058D                     	;# 
  5565  058E                     	;# 
  5566  058F                     	;# 
  5567  058F                     	;# 
  5568  0590                     	;# 
  5569  0591                     	;# 
  5570  0592                     	;# 
  5571  0593                     	;# 
  5572  059C                     	;# 
  5573  059C                     	;# 
  5574  059D                     	;# 
  5575  059D                     	;# 
  5576  059E                     	;# 
  5577  059F                     	;# 
  5578  060C                     	;# 
  5579  060C                     	;# 
  5580  060D                     	;# 
  5581  060D                     	;# 
  5582  060E                     	;# 
  5583  060F                     	;# 
  5584  0610                     	;# 
  5585  0611                     	;# 
  5586  0612                     	;# 
  5587  0613                     	;# 
  5588  0614                     	;# 
  5589  0616                     	;# 
  5590  0616                     	;# 
  5591  0617                     	;# 
  5592  0617                     	;# 
  5593  0618                     	;# 
  5594  0619                     	;# 
  5595  061A                     	;# 
  5596  061B                     	;# 
  5597  061C                     	;# 
  5598  061D                     	;# 
  5599  061E                     	;# 
  5600  070C                     	;# 
  5601  070D                     	;# 
  5602  070E                     	;# 
  5603  070F                     	;# 
  5604  0710                     	;# 
  5605  0711                     	;# 
  5606  0712                     	;# 
  5607  0713                     	;# 
  5608  0714                     	;# 
  5609  0716                     	;# 
  5610  0717                     	;# 
  5611  0718                     	;# 
  5612  0719                     	;# 
  5613  071A                     	;# 
  5614  071B                     	;# 
  5615  071C                     	;# 
  5616  071D                     	;# 
  5617  071E                     	;# 
  5618  0796                     	;# 
  5619  0797                     	;# 
  5620  0798                     	;# 
  5621  0799                     	;# 
  5622  079A                     	;# 
  5623  079B                     	;# 
  5624  079C                     	;# 
  5625  079D                     	;# 
  5626  080C                     	;# 
  5627  080D                     	;# 
  5628  080E                     	;# 
  5629  080F                     	;# 
  5630  0810                     	;# 
  5631  0811                     	;# 
  5632  0812                     	;# 
  5633  0813                     	;# 
  5634  0814                     	;# 
  5635  081A                     	;# 
  5636  081A                     	;# 
  5637  081B                     	;# 
  5638  081C                     	;# 
  5639  081C                     	;# 
  5640  081D                     	;# 
  5641  081E                     	;# 
  5642  081F                     	;# 
  5643  088C                     	;# 
  5644  088D                     	;# 
  5645  088E                     	;# 
  5646  088F                     	;# 
  5647  0890                     	;# 
  5648  0891                     	;# 
  5649  0892                     	;# 
  5650  0893                     	;# 
  5651  0895                     	;# 
  5652  0896                     	;# 
  5653  0897                     	;# 
  5654  0898                     	;# 
  5655  0899                     	;# 
  5656  089A                     	;# 
  5657  089B                     	;# 
  5658  090C                     	;# 
  5659  090E                     	;# 
  5660  090F                     	;# 
  5661  091F                     	;# 
  5662  098F                     	;# 
  5663  098F                     	;# 
  5664  0990                     	;# 
  5665  0991                     	;# 
  5666  0992                     	;# 
  5667  0993                     	;# 
  5668  0994                     	;# 
  5669  0995                     	;# 
  5670  0996                     	;# 
  5671  0997                     	;# 
  5672  1E0F                     	;# 
  5673  1E10                     	;# 
  5674  1E11                     	;# 
  5675  1E12                     	;# 
  5676  1E13                     	;# 
  5677  1E14                     	;# 
  5678  1E15                     	;# 
  5679  1E16                     	;# 
  5680  1E17                     	;# 
  5681  1E18                     	;# 
  5682  1E19                     	;# 
  5683  1E1A                     	;# 
  5684  1E1B                     	;# 
  5685  1E1C                     	;# 
  5686  1E1D                     	;# 
  5687  1E1E                     	;# 
  5688  1E1F                     	;# 
  5689  1E20                     	;# 
  5690  1E21                     	;# 
  5691  1E22                     	;# 
  5692  1E23                     	;# 
  5693  1E24                     	;# 
  5694  1E25                     	;# 
  5695  1E26                     	;# 
  5696  1E27                     	;# 
  5697  1E28                     	;# 
  5698  1E29                     	;# 
  5699  1E2A                     	;# 
  5700  1E2B                     	;# 
  5701  1E2C                     	;# 
  5702  1E2D                     	;# 
  5703  1E2E                     	;# 
  5704  1E2F                     	;# 
  5705  1E30                     	;# 
  5706  1E31                     	;# 
  5707  1E32                     	;# 
  5708  1E33                     	;# 
  5709  1E34                     	;# 
  5710  1E35                     	;# 
  5711  1E36                     	;# 
  5712  1E37                     	;# 
  5713  1E8F                     	;# 
  5714  1E90                     	;# 
  5715  1E91                     	;# 
  5716  1E92                     	;# 
  5717  1E93                     	;# 
  5718  1E94                     	;# 
  5719  1E95                     	;# 
  5720  1E96                     	;# 
  5721  1E97                     	;# 
  5722  1E9C                     	;# 
  5723  1E9D                     	;# 
  5724  1E9E                     	;# 
  5725  1EA1                     	;# 
  5726  1EA2                     	;# 
  5727  1EA3                     	;# 
  5728  1EA4                     	;# 
  5729  1EA9                     	;# 
  5730  1EAA                     	;# 
  5731  1EB1                     	;# 
  5732  1EB2                     	;# 
  5733  1EB8                     	;# 
  5734  1EB9                     	;# 
  5735  1EBA                     	;# 
  5736  1EBB                     	;# 
  5737  1EBC                     	;# 
  5738  1EBD                     	;# 
  5739  1EBE                     	;# 
  5740  1EC3                     	;# 
  5741  1EC5                     	;# 
  5742  1EC6                     	;# 
  5743  1EC7                     	;# 
  5744  1EC8                     	;# 
  5745  1EC9                     	;# 
  5746  1ECA                     	;# 
  5747  1ECB                     	;# 
  5748  1ECC                     	;# 
  5749  1F10                     	;# 
  5750  1F11                     	;# 
  5751  1F12                     	;# 
  5752  1F14                     	;# 
  5753  1F15                     	;# 
  5754  1F20                     	;# 
  5755  1F21                     	;# 
  5756  1F22                     	;# 
  5757  1F23                     	;# 
  5758  1F24                     	;# 
  5759  1F25                     	;# 
  5760  1F38                     	;# 
  5761  1F39                     	;# 
  5762  1F3A                     	;# 
  5763  1F3B                     	;# 
  5764  1F3C                     	;# 
  5765  1F3D                     	;# 
  5766  1F3E                     	;# 
  5767  1F3F                     	;# 
  5768  1F4E                     	;# 
  5769  1F4F                     	;# 
  5770  1F50                     	;# 
  5771  1F51                     	;# 
  5772  1F52                     	;# 
  5773  1F53                     	;# 
  5774  1F54                     	;# 
  5775  1F55                     	;# 
  5776  1FE4                     	;# 
  5777  1FE5                     	;# 
  5778  1FE6                     	;# 
  5779  1FE7                     	;# 
  5780  1FE8                     	;# 
  5781  1FE8                     	;# 
  5782  1FE9                     	;# 
  5783  1FEA                     	;# 
  5784  1FEB                     	;# 
  5785  1FED                     	;# 
  5786  1FEE                     	;# 
  5787  1FEF                     	;# 
  5788  0000                     	;# 
  5789  0001                     	;# 
  5790  0002                     	;# 
  5791  0003                     	;# 
  5792  0004                     	;# 
  5793  0005                     	;# 
  5794  0006                     	;# 
  5795  0007                     	;# 
  5796  0008                     	;# 
  5797  0009                     	;# 
  5798  000A                     	;# 
  5799  000B                     	;# 
  5800  000C                     	;# 
  5801  000E                     	;# 
  5802  0012                     	;# 
  5803  0014                     	;# 
  5804  0018                     	;# 
  5805  001A                     	;# 
  5806  008C                     	;# 
  5807  008C                     	;# 
  5808  008D                     	;# 
  5809  008E                     	;# 
  5810  008E                     	;# 
  5811  008F                     	;# 
  5812  0090                     	;# 
  5813  0090                     	;# 
  5814  0091                     	;# 
  5815  0092                     	;# 
  5816  0092                     	;# 
  5817  0093                     	;# 
  5818  0094                     	;# 
  5819  0094                     	;# 
  5820  0095                     	;# 
  5821  0096                     	;# 
  5822  0096                     	;# 
  5823  0097                     	;# 
  5824  0098                     	;# 
  5825  0099                     	;# 
  5826  009A                     	;# 
  5827  009B                     	;# 
  5828  009B                     	;# 
  5829  009C                     	;# 
  5830  009D                     	;# 
  5831  009D                     	;# 
  5832  009E                     	;# 
  5833  009F                     	;# 
  5834  010C                     	;# 
  5835  010C                     	;# 
  5836  010D                     	;# 
  5837  010E                     	;# 
  5838  010F                     	;# 
  5839  010F                     	;# 
  5840  0110                     	;# 
  5841  0111                     	;# 
  5842  0112                     	;# 
  5843  0113                     	;# 
  5844  0114                     	;# 
  5845  0115                     	;# 
  5846  0116                     	;# 
  5847  0117                     	;# 
  5848  0118                     	;# 
  5849  0119                     	;# 
  5850  0119                     	;# 
  5851  0119                     	;# 
  5852  011A                     	;# 
  5853  011A                     	;# 
  5854  011A                     	;# 
  5855  011B                     	;# 
  5856  011B                     	;# 
  5857  011B                     	;# 
  5858  011B                     	;# 
  5859  011B                     	;# 
  5860  011C                     	;# 
  5861  011C                     	;# 
  5862  011C                     	;# 
  5863  011D                     	;# 
  5864  011D                     	;# 
  5865  011D                     	;# 
  5866  011E                     	;# 
  5867  011E                     	;# 
  5868  011E                     	;# 
  5869  011F                     	;# 
  5870  011F                     	;# 
  5871  011F                     	;# 
  5872  011F                     	;# 
  5873  011F                     	;# 
  5874  018C                     	;# 
  5875  018D                     	;# 
  5876  018E                     	;# 
  5877  018F                     	;# 
  5878  0190                     	;# 
  5879  0191                     	;# 
  5880  0192                     	;# 
  5881  0196                     	;# 
  5882  0197                     	;# 
  5883  0198                     	;# 
  5884  0199                     	;# 
  5885  019A                     	;# 
  5886  019B                     	;# 
  5887  019C                     	;# 
  5888  020C                     	;# 
  5889  020D                     	;# 
  5890  020E                     	;# 
  5891  020E                     	;# 
  5892  020F                     	;# 
  5893  020F                     	;# 
  5894  0210                     	;# 
  5895  0210                     	;# 
  5896  0211                     	;# 
  5897  0211                     	;# 
  5898  0212                     	;# 
  5899  0213                     	;# 
  5900  0214                     	;# 
  5901  0214                     	;# 
  5902  0215                     	;# 
  5903  0215                     	;# 
  5904  0216                     	;# 
  5905  0216                     	;# 
  5906  0217                     	;# 
  5907  0217                     	;# 
  5908  0218                     	;# 
  5909  0219                     	;# 
  5910  021A                     	;# 
  5911  021A                     	;# 
  5912  021B                     	;# 
  5913  021B                     	;# 
  5914  021C                     	;# 
  5915  021C                     	;# 
  5916  021D                     	;# 
  5917  021D                     	;# 
  5918  021E                     	;# 
  5919  021F                     	;# 
  5920  028C                     	;# 
  5921  028C                     	;# 
  5922  028D                     	;# 
  5923  028D                     	;# 
  5924  028E                     	;# 
  5925  028F                     	;# 
  5926  0290                     	;# 
  5927  0291                     	;# 
  5928  0292                     	;# 
  5929  0292                     	;# 
  5930  0293                     	;# 
  5931  0293                     	;# 
  5932  0294                     	;# 
  5933  0295                     	;# 
  5934  0296                     	;# 
  5935  0297                     	;# 
  5936  0298                     	;# 
  5937  0298                     	;# 
  5938  0299                     	;# 
  5939  0299                     	;# 
  5940  029A                     	;# 
  5941  029B                     	;# 
  5942  029C                     	;# 
  5943  029D                     	;# 
  5944  029F                     	;# 
  5945  030C                     	;# 
  5946  030C                     	;# 
  5947  030D                     	;# 
  5948  030E                     	;# 
  5949  030F                     	;# 
  5950  0310                     	;# 
  5951  0310                     	;# 
  5952  0311                     	;# 
  5953  0312                     	;# 
  5954  0313                     	;# 
  5955  0314                     	;# 
  5956  0314                     	;# 
  5957  0315                     	;# 
  5958  0316                     	;# 
  5959  0317                     	;# 
  5960  0318                     	;# 
  5961  0318                     	;# 
  5962  0319                     	;# 
  5963  031A                     	;# 
  5964  031B                     	;# 
  5965  038C                     	;# 
  5966  038C                     	;# 
  5967  038D                     	;# 
  5968  038E                     	;# 
  5969  0390                     	;# 
  5970  0390                     	;# 
  5971  0391                     	;# 
  5972  0392                     	;# 
  5973  048C                     	;# 
  5974  048C                     	;# 
  5975  048D                     	;# 
  5976  048E                     	;# 
  5977  048F                     	;# 
  5978  048F                     	;# 
  5979  0490                     	;# 
  5980  0491                     	;# 
  5981  0492                     	;# 
  5982  0492                     	;# 
  5983  0493                     	;# 
  5984  0494                     	;# 
  5985  0495                     	;# 
  5986  0495                     	;# 
  5987  0496                     	;# 
  5988  0497                     	;# 
  5989  0498                     	;# 
  5990  0499                     	;# 
  5991  049A                     	;# 
  5992  049B                     	;# 
  5993  049C                     	;# 
  5994  049D                     	;# 
  5995  058C                     	;# 
  5996  058C                     	;# 
  5997  058D                     	;# 
  5998  058E                     	;# 
  5999  058F                     	;# 
  6000  058F                     	;# 
  6001  0590                     	;# 
  6002  0591                     	;# 
  6003  0592                     	;# 
  6004  0593                     	;# 
  6005  059C                     	;# 
  6006  059C                     	;# 
  6007  059D                     	;# 
  6008  059D                     	;# 
  6009  059E                     	;# 
  6010  059F                     	;# 
  6011  060C                     	;# 
  6012  060C                     	;# 
  6013  060D                     	;# 
  6014  060D                     	;# 
  6015  060E                     	;# 
  6016  060F                     	;# 
  6017  0610                     	;# 
  6018  0611                     	;# 
  6019  0612                     	;# 
  6020  0613                     	;# 
  6021  0614                     	;# 
  6022  0616                     	;# 
  6023  0616                     	;# 
  6024  0617                     	;# 
  6025  0617                     	;# 
  6026  0618                     	;# 
  6027  0619                     	;# 
  6028  061A                     	;# 
  6029  061B                     	;# 
  6030  061C                     	;# 
  6031  061D                     	;# 
  6032  061E                     	;# 
  6033  070C                     	;# 
  6034  070D                     	;# 
  6035  070E                     	;# 
  6036  070F                     	;# 
  6037  0710                     	;# 
  6038  0711                     	;# 
  6039  0712                     	;# 
  6040  0713                     	;# 
  6041  0714                     	;# 
  6042  0716                     	;# 
  6043  0717                     	;# 
  6044  0718                     	;# 
  6045  0719                     	;# 
  6046  071A                     	;# 
  6047  071B                     	;# 
  6048  071C                     	;# 
  6049  071D                     	;# 
  6050  071E                     	;# 
  6051  0796                     	;# 
  6052  0797                     	;# 
  6053  0798                     	;# 
  6054  0799                     	;# 
  6055  079A                     	;# 
  6056  079B                     	;# 
  6057  079C                     	;# 
  6058  079D                     	;# 
  6059  080C                     	;# 
  6060  080D                     	;# 
  6061  080E                     	;# 
  6062  080F                     	;# 
  6063  0810                     	;# 
  6064  0811                     	;# 
  6065  0812                     	;# 
  6066  0813                     	;# 
  6067  0814                     	;# 
  6068  081A                     	;# 
  6069  081A                     	;# 
  6070  081B                     	;# 
  6071  081C                     	;# 
  6072  081C                     	;# 
  6073  081D                     	;# 
  6074  081E                     	;# 
  6075  081F                     	;# 
  6076  088C                     	;# 
  6077  088D                     	;# 
  6078  088E                     	;# 
  6079  088F                     	;# 
  6080  0890                     	;# 
  6081  0891                     	;# 
  6082  0892                     	;# 
  6083  0893                     	;# 
  6084  0895                     	;# 
  6085  0896                     	;# 
  6086  0897                     	;# 
  6087  0898                     	;# 
  6088  0899                     	;# 
  6089  089A                     	;# 
  6090  089B                     	;# 
  6091  090C                     	;# 
  6092  090E                     	;# 
  6093  090F                     	;# 
  6094  091F                     	;# 
  6095  098F                     	;# 
  6096  098F                     	;# 
  6097  0990                     	;# 
  6098  0991                     	;# 
  6099  0992                     	;# 
  6100  0993                     	;# 
  6101  0994                     	;# 
  6102  0995                     	;# 
  6103  0996                     	;# 
  6104  0997                     	;# 
  6105  1E0F                     	;# 
  6106  1E10                     	;# 
  6107  1E11                     	;# 
  6108  1E12                     	;# 
  6109  1E13                     	;# 
  6110  1E14                     	;# 
  6111  1E15                     	;# 
  6112  1E16                     	;# 
  6113  1E17                     	;# 
  6114  1E18                     	;# 
  6115  1E19                     	;# 
  6116  1E1A                     	;# 
  6117  1E1B                     	;# 
  6118  1E1C                     	;# 
  6119  1E1D                     	;# 
  6120  1E1E                     	;# 
  6121  1E1F                     	;# 
  6122  1E20                     	;# 
  6123  1E21                     	;# 
  6124  1E22                     	;# 
  6125  1E23                     	;# 
  6126  1E24                     	;# 
  6127  1E25                     	;# 
  6128  1E26                     	;# 
  6129  1E27                     	;# 
  6130  1E28                     	;# 
  6131  1E29                     	;# 
  6132  1E2A                     	;# 
  6133  1E2B                     	;# 
  6134  1E2C                     	;# 
  6135  1E2D                     	;# 
  6136  1E2E                     	;# 
  6137  1E2F                     	;# 
  6138  1E30                     	;# 
  6139  1E31                     	;# 
  6140  1E32                     	;# 
  6141  1E33                     	;# 
  6142  1E34                     	;# 
  6143  1E35                     	;# 
  6144  1E36                     	;# 
  6145  1E37                     	;# 
  6146  1E8F                     	;# 
  6147  1E90                     	;# 
  6148  1E91                     	;# 
  6149  1E92                     	;# 
  6150  1E93                     	;# 
  6151  1E94                     	;# 
  6152  1E95                     	;# 
  6153  1E96                     	;# 
  6154  1E97                     	;# 
  6155  1E9C                     	;# 
  6156  1E9D                     	;# 
  6157  1E9E                     	;# 
  6158  1EA1                     	;# 
  6159  1EA2                     	;# 
  6160  1EA3                     	;# 
  6161  1EA4                     	;# 
  6162  1EA9                     	;# 
  6163  1EAA                     	;# 
  6164  1EB1                     	;# 
  6165  1EB2                     	;# 
  6166  1EB8                     	;# 
  6167  1EB9                     	;# 
  6168  1EBA                     	;# 
  6169  1EBB                     	;# 
  6170  1EBC                     	;# 
  6171  1EBD                     	;# 
  6172  1EBE                     	;# 
  6173  1EC3                     	;# 
  6174  1EC5                     	;# 
  6175  1EC6                     	;# 
  6176  1EC7                     	;# 
  6177  1EC8                     	;# 
  6178  1EC9                     	;# 
  6179  1ECA                     	;# 
  6180  1ECB                     	;# 
  6181  1ECC                     	;# 
  6182  1F10                     	;# 
  6183  1F11                     	;# 
  6184  1F12                     	;# 
  6185  1F14                     	;# 
  6186  1F15                     	;# 
  6187  1F20                     	;# 
  6188  1F21                     	;# 
  6189  1F22                     	;# 
  6190  1F23                     	;# 
  6191  1F24                     	;# 
  6192  1F25                     	;# 
  6193  1F38                     	;# 
  6194  1F39                     	;# 
  6195  1F3A                     	;# 
  6196  1F3B                     	;# 
  6197  1F3C                     	;# 
  6198  1F3D                     	;# 
  6199  1F3E                     	;# 
  6200  1F3F                     	;# 
  6201  1F4E                     	;# 
  6202  1F4F                     	;# 
  6203  1F50                     	;# 
  6204  1F51                     	;# 
  6205  1F52                     	;# 
  6206  1F53                     	;# 
  6207  1F54                     	;# 
  6208  1F55                     	;# 
  6209  1FE4                     	;# 
  6210  1FE5                     	;# 
  6211  1FE6                     	;# 
  6212  1FE7                     	;# 
  6213  1FE8                     	;# 
  6214  1FE8                     	;# 
  6215  1FE9                     	;# 
  6216  1FEA                     	;# 
  6217  1FEB                     	;# 
  6218  1FED                     	;# 
  6219  1FEE                     	;# 
  6220  1FEF                     	;# 
  6221  0000                     	;# 
  6222  0001                     	;# 
  6223  0002                     	;# 
  6224  0003                     	;# 
  6225  0004                     	;# 
  6226  0005                     	;# 
  6227  0006                     	;# 
  6228  0007                     	;# 
  6229  0008                     	;# 
  6230  0009                     	;# 
  6231  000A                     	;# 
  6232  000B                     	;# 
  6233  000C                     	;# 
  6234  000E                     	;# 
  6235  0012                     	;# 
  6236  0014                     	;# 
  6237  0018                     	;# 
  6238  001A                     	;# 
  6239  008C                     	;# 
  6240  008C                     	;# 
  6241  008D                     	;# 
  6242  008E                     	;# 
  6243  008E                     	;# 
  6244  008F                     	;# 
  6245  0090                     	;# 
  6246  0090                     	;# 
  6247  0091                     	;# 
  6248  0092                     	;# 
  6249  0092                     	;# 
  6250  0093                     	;# 
  6251  0094                     	;# 
  6252  0094                     	;# 
  6253  0095                     	;# 
  6254  0096                     	;# 
  6255  0096                     	;# 
  6256  0097                     	;# 
  6257  0098                     	;# 
  6258  0099                     	;# 
  6259  009A                     	;# 
  6260  009B                     	;# 
  6261  009B                     	;# 
  6262  009C                     	;# 
  6263  009D                     	;# 
  6264  009D                     	;# 
  6265  009E                     	;# 
  6266  009F                     	;# 
  6267  010C                     	;# 
  6268  010C                     	;# 
  6269  010D                     	;# 
  6270  010E                     	;# 
  6271  010F                     	;# 
  6272  010F                     	;# 
  6273  0110                     	;# 
  6274  0111                     	;# 
  6275  0112                     	;# 
  6276  0113                     	;# 
  6277  0114                     	;# 
  6278  0115                     	;# 
  6279  0116                     	;# 
  6280  0117                     	;# 
  6281  0118                     	;# 
  6282  0119                     	;# 
  6283  0119                     	;# 
  6284  0119                     	;# 
  6285  011A                     	;# 
  6286  011A                     	;# 
  6287  011A                     	;# 
  6288  011B                     	;# 
  6289  011B                     	;# 
  6290  011B                     	;# 
  6291  011B                     	;# 
  6292  011B                     	;# 
  6293  011C                     	;# 
  6294  011C                     	;# 
  6295  011C                     	;# 
  6296  011D                     	;# 
  6297  011D                     	;# 
  6298  011D                     	;# 
  6299  011E                     	;# 
  6300  011E                     	;# 
  6301  011E                     	;# 
  6302  011F                     	;# 
  6303  011F                     	;# 
  6304  011F                     	;# 
  6305  011F                     	;# 
  6306  011F                     	;# 
  6307  018C                     	;# 
  6308  018D                     	;# 
  6309  018E                     	;# 
  6310  018F                     	;# 
  6311  0190                     	;# 
  6312  0191                     	;# 
  6313  0192                     	;# 
  6314  0196                     	;# 
  6315  0197                     	;# 
  6316  0198                     	;# 
  6317  0199                     	;# 
  6318  019A                     	;# 
  6319  019B                     	;# 
  6320  019C                     	;# 
  6321  020C                     	;# 
  6322  020D                     	;# 
  6323  020E                     	;# 
  6324  020E                     	;# 
  6325  020F                     	;# 
  6326  020F                     	;# 
  6327  0210                     	;# 
  6328  0210                     	;# 
  6329  0211                     	;# 
  6330  0211                     	;# 
  6331  0212                     	;# 
  6332  0213                     	;# 
  6333  0214                     	;# 
  6334  0214                     	;# 
  6335  0215                     	;# 
  6336  0215                     	;# 
  6337  0216                     	;# 
  6338  0216                     	;# 
  6339  0217                     	;# 
  6340  0217                     	;# 
  6341  0218                     	;# 
  6342  0219                     	;# 
  6343  021A                     	;# 
  6344  021A                     	;# 
  6345  021B                     	;# 
  6346  021B                     	;# 
  6347  021C                     	;# 
  6348  021C                     	;# 
  6349  021D                     	;# 
  6350  021D                     	;# 
  6351  021E                     	;# 
  6352  021F                     	;# 
  6353  028C                     	;# 
  6354  028C                     	;# 
  6355  028D                     	;# 
  6356  028D                     	;# 
  6357  028E                     	;# 
  6358  028F                     	;# 
  6359  0290                     	;# 
  6360  0291                     	;# 
  6361  0292                     	;# 
  6362  0292                     	;# 
  6363  0293                     	;# 
  6364  0293                     	;# 
  6365  0294                     	;# 
  6366  0295                     	;# 
  6367  0296                     	;# 
  6368  0297                     	;# 
  6369  0298                     	;# 
  6370  0298                     	;# 
  6371  0299                     	;# 
  6372  0299                     	;# 
  6373  029A                     	;# 
  6374  029B                     	;# 
  6375  029C                     	;# 
  6376  029D                     	;# 
  6377  029F                     	;# 
  6378  030C                     	;# 
  6379  030C                     	;# 
  6380  030D                     	;# 
  6381  030E                     	;# 
  6382  030F                     	;# 
  6383  0310                     	;# 
  6384  0310                     	;# 
  6385  0311                     	;# 
  6386  0312                     	;# 
  6387  0313                     	;# 
  6388  0314                     	;# 
  6389  0314                     	;# 
  6390  0315                     	;# 
  6391  0316                     	;# 
  6392  0317                     	;# 
  6393  0318                     	;# 
  6394  0318                     	;# 
  6395  0319                     	;# 
  6396  031A                     	;# 
  6397  031B                     	;# 
  6398  038C                     	;# 
  6399  038C                     	;# 
  6400  038D                     	;# 
  6401  038E                     	;# 
  6402  0390                     	;# 
  6403  0390                     	;# 
  6404  0391                     	;# 
  6405  0392                     	;# 
  6406  048C                     	;# 
  6407  048C                     	;# 
  6408  048D                     	;# 
  6409  048E                     	;# 
  6410  048F                     	;# 
  6411  048F                     	;# 
  6412  0490                     	;# 
  6413  0491                     	;# 
  6414  0492                     	;# 
  6415  0492                     	;# 
  6416  0493                     	;# 
  6417  0494                     	;# 
  6418  0495                     	;# 
  6419  0495                     	;# 
  6420  0496                     	;# 
  6421  0497                     	;# 
  6422  0498                     	;# 
  6423  0499                     	;# 
  6424  049A                     	;# 
  6425  049B                     	;# 
  6426  049C                     	;# 
  6427  049D                     	;# 
  6428  058C                     	;# 
  6429  058C                     	;# 
  6430  058D                     	;# 
  6431  058E                     	;# 
  6432  058F                     	;# 
  6433  058F                     	;# 
  6434  0590                     	;# 
  6435  0591                     	;# 
  6436  0592                     	;# 
  6437  0593                     	;# 
  6438  059C                     	;# 
  6439  059C                     	;# 
  6440  059D                     	;# 
  6441  059D                     	;# 
  6442  059E                     	;# 
  6443  059F                     	;# 
  6444  060C                     	;# 
  6445  060C                     	;# 
  6446  060D                     	;# 
  6447  060D                     	;# 
  6448  060E                     	;# 
  6449  060F                     	;# 
  6450  0610                     	;# 
  6451  0611                     	;# 
  6452  0612                     	;# 
  6453  0613                     	;# 
  6454  0614                     	;# 
  6455  0616                     	;# 
  6456  0616                     	;# 
  6457  0617                     	;# 
  6458  0617                     	;# 
  6459  0618                     	;# 
  6460  0619                     	;# 
  6461  061A                     	;# 
  6462  061B                     	;# 
  6463  061C                     	;# 
  6464  061D                     	;# 
  6465  061E                     	;# 
  6466  070C                     	;# 
  6467  070D                     	;# 
  6468  070E                     	;# 
  6469  070F                     	;# 
  6470  0710                     	;# 
  6471  0711                     	;# 
  6472  0712                     	;# 
  6473  0713                     	;# 
  6474  0714                     	;# 
  6475  0716                     	;# 
  6476  0717                     	;# 
  6477  0718                     	;# 
  6478  0719                     	;# 
  6479  071A                     	;# 
  6480  071B                     	;# 
  6481  071C                     	;# 
  6482  071D                     	;# 
  6483  071E                     	;# 
  6484  0796                     	;# 
  6485  0797                     	;# 
  6486  0798                     	;# 
  6487  0799                     	;# 
  6488  079A                     	;# 
  6489  079B                     	;# 
  6490  079C                     	;# 
  6491  079D                     	;# 
  6492  080C                     	;# 
  6493  080D                     	;# 
  6494  080E                     	;# 
  6495  080F                     	;# 
  6496  0810                     	;# 
  6497  0811                     	;# 
  6498  0812                     	;# 
  6499  0813                     	;# 
  6500  0814                     	;# 
  6501  081A                     	;# 
  6502  081A                     	;# 
  6503  081B                     	;# 
  6504  081C                     	;# 
  6505  081C                     	;# 
  6506  081D                     	;# 
  6507  081E                     	;# 
  6508  081F                     	;# 
  6509  088C                     	;# 
  6510  088D                     	;# 
  6511  088E                     	;# 
  6512  088F                     	;# 
  6513  0890                     	;# 
  6514  0891                     	;# 
  6515  0892                     	;# 
  6516  0893                     	;# 
  6517  0895                     	;# 
  6518  0896                     	;# 
  6519  0897                     	;# 
  6520  0898                     	;# 
  6521  0899                     	;# 
  6522  089A                     	;# 
  6523  089B                     	;# 
  6524  090C                     	;# 
  6525  090E                     	;# 
  6526  090F                     	;# 
  6527  091F                     	;# 
  6528  098F                     	;# 
  6529  098F                     	;# 
  6530  0990                     	;# 
  6531  0991                     	;# 
  6532  0992                     	;# 
  6533  0993                     	;# 
  6534  0994                     	;# 
  6535  0995                     	;# 
  6536  0996                     	;# 
  6537  0997                     	;# 
  6538  1E0F                     	;# 
  6539  1E10                     	;# 
  6540  1E11                     	;# 
  6541  1E12                     	;# 
  6542  1E13                     	;# 
  6543  1E14                     	;# 
  6544  1E15                     	;# 
  6545  1E16                     	;# 
  6546  1E17                     	;# 
  6547  1E18                     	;# 
  6548  1E19                     	;# 
  6549  1E1A                     	;# 
  6550  1E1B                     	;# 
  6551  1E1C                     	;# 
  6552  1E1D                     	;# 
  6553  1E1E                     	;# 
  6554  1E1F                     	;# 
  6555  1E20                     	;# 
  6556  1E21                     	;# 
  6557  1E22                     	;# 
  6558  1E23                     	;# 
  6559  1E24                     	;# 
  6560  1E25                     	;# 
  6561  1E26                     	;# 
  6562  1E27                     	;# 
  6563  1E28                     	;# 
  6564  1E29                     	;# 
  6565  1E2A                     	;# 
  6566  1E2B                     	;# 
  6567  1E2C                     	;# 
  6568  1E2D                     	;# 
  6569  1E2E                     	;# 
  6570  1E2F                     	;# 
  6571  1E30                     	;# 
  6572  1E31                     	;# 
  6573  1E32                     	;# 
  6574  1E33                     	;# 
  6575  1E34                     	;# 
  6576  1E35                     	;# 
  6577  1E36                     	;# 
  6578  1E37                     	;# 
  6579  1E8F                     	;# 
  6580  1E90                     	;# 
  6581  1E91                     	;# 
  6582  1E92                     	;# 
  6583  1E93                     	;# 
  6584  1E94                     	;# 
  6585  1E95                     	;# 
  6586  1E96                     	;# 
  6587  1E97                     	;# 
  6588  1E9C                     	;# 
  6589  1E9D                     	;# 
  6590  1E9E                     	;# 
  6591  1EA1                     	;# 
  6592  1EA2                     	;# 
  6593  1EA3                     	;# 
  6594  1EA4                     	;# 
  6595  1EA9                     	;# 
  6596  1EAA                     	;# 
  6597  1EB1                     	;# 
  6598  1EB2                     	;# 
  6599  1EB8                     	;# 
  6600  1EB9                     	;# 
  6601  1EBA                     	;# 
  6602  1EBB                     	;# 
  6603  1EBC                     	;# 
  6604  1EBD                     	;# 
  6605  1EBE                     	;# 
  6606  1EC3                     	;# 
  6607  1EC5                     	;# 
  6608  1EC6                     	;# 
  6609  1EC7                     	;# 
  6610  1EC8                     	;# 
  6611  1EC9                     	;# 
  6612  1ECA                     	;# 
  6613  1ECB                     	;# 
  6614  1ECC                     	;# 
  6615  1F10                     	;# 
  6616  1F11                     	;# 
  6617  1F12                     	;# 
  6618  1F14                     	;# 
  6619  1F15                     	;# 
  6620  1F20                     	;# 
  6621  1F21                     	;# 
  6622  1F22                     	;# 
  6623  1F23                     	;# 
  6624  1F24                     	;# 
  6625  1F25                     	;# 
  6626  1F38                     	;# 
  6627  1F39                     	;# 
  6628  1F3A                     	;# 
  6629  1F3B                     	;# 
  6630  1F3C                     	;# 
  6631  1F3D                     	;# 
  6632  1F3E                     	;# 
  6633  1F3F                     	;# 
  6634  1F4E                     	;# 
  6635  1F4F                     	;# 
  6636  1F50                     	;# 
  6637  1F51                     	;# 
  6638  1F52                     	;# 
  6639  1F53                     	;# 
  6640  1F54                     	;# 
  6641  1F55                     	;# 
  6642  1FE4                     	;# 
  6643  1FE5                     	;# 
  6644  1FE6                     	;# 
  6645  1FE7                     	;# 
  6646  1FE8                     	;# 
  6647  1FE8                     	;# 
  6648  1FE9                     	;# 
  6649  1FEA                     	;# 
  6650  1FEB                     	;# 
  6651  1FED                     	;# 
  6652  1FEE                     	;# 
  6653  1FEF                     	;# 
  6654  0000                     	;# 
  6655  0001                     	;# 
  6656  0002                     	;# 
  6657  0003                     	;# 
  6658  0004                     	;# 
  6659  0005                     	;# 
  6660  0006                     	;# 
  6661  0007                     	;# 
  6662  0008                     	;# 
  6663  0009                     	;# 
  6664  000A                     	;# 
  6665  000B                     	;# 
  6666  000C                     	;# 
  6667  000E                     	;# 
  6668  0012                     	;# 
  6669  0014                     	;# 
  6670  0018                     	;# 
  6671  001A                     	;# 
  6672  008C                     	;# 
  6673  008C                     	;# 
  6674  008D                     	;# 
  6675  008E                     	;# 
  6676  008E                     	;# 
  6677  008F                     	;# 
  6678  0090                     	;# 
  6679  0090                     	;# 
  6680  0091                     	;# 
  6681  0092                     	;# 
  6682  0092                     	;# 
  6683  0093                     	;# 
  6684  0094                     	;# 
  6685  0094                     	;# 
  6686  0095                     	;# 
  6687  0096                     	;# 
  6688  0096                     	;# 
  6689  0097                     	;# 
  6690  0098                     	;# 
  6691  0099                     	;# 
  6692  009A                     	;# 
  6693  009B                     	;# 
  6694  009B                     	;# 
  6695  009C                     	;# 
  6696  009D                     	;# 
  6697  009D                     	;# 
  6698  009E                     	;# 
  6699  009F                     	;# 
  6700  010C                     	;# 
  6701  010C                     	;# 
  6702  010D                     	;# 
  6703  010E                     	;# 
  6704  010F                     	;# 
  6705  010F                     	;# 
  6706  0110                     	;# 
  6707  0111                     	;# 
  6708  0112                     	;# 
  6709  0113                     	;# 
  6710  0114                     	;# 
  6711  0115                     	;# 
  6712  0116                     	;# 
  6713  0117                     	;# 
  6714  0118                     	;# 
  6715  0119                     	;# 
  6716  0119                     	;# 
  6717  0119                     	;# 
  6718  011A                     	;# 
  6719  011A                     	;# 
  6720  011A                     	;# 
  6721  011B                     	;# 
  6722  011B                     	;# 
  6723  011B                     	;# 
  6724  011B                     	;# 
  6725  011B                     	;# 
  6726  011C                     	;# 
  6727  011C                     	;# 
  6728  011C                     	;# 
  6729  011D                     	;# 
  6730  011D                     	;# 
  6731  011D                     	;# 
  6732  011E                     	;# 
  6733  011E                     	;# 
  6734  011E                     	;# 
  6735  011F                     	;# 
  6736  011F                     	;# 
  6737  011F                     	;# 
  6738  011F                     	;# 
  6739  011F                     	;# 
  6740  018C                     	;# 
  6741  018D                     	;# 
  6742  018E                     	;# 
  6743  018F                     	;# 
  6744  0190                     	;# 
  6745  0191                     	;# 
  6746  0192                     	;# 
  6747  0196                     	;# 
  6748  0197                     	;# 
  6749  0198                     	;# 
  6750  0199                     	;# 
  6751  019A                     	;# 
  6752  019B                     	;# 
  6753  019C                     	;# 
  6754  020C                     	;# 
  6755  020D                     	;# 
  6756  020E                     	;# 
  6757  020E                     	;# 
  6758  020F                     	;# 
  6759  020F                     	;# 
  6760  0210                     	;# 
  6761  0210                     	;# 
  6762  0211                     	;# 
  6763  0211                     	;# 
  6764  0212                     	;# 
  6765  0213                     	;# 
  6766  0214                     	;# 
  6767  0214                     	;# 
  6768  0215                     	;# 
  6769  0215                     	;# 
  6770  0216                     	;# 
  6771  0216                     	;# 
  6772  0217                     	;# 
  6773  0217                     	;# 
  6774  0218                     	;# 
  6775  0219                     	;# 
  6776  021A                     	;# 
  6777  021A                     	;# 
  6778  021B                     	;# 
  6779  021B                     	;# 
  6780  021C                     	;# 
  6781  021C                     	;# 
  6782  021D                     	;# 
  6783  021D                     	;# 
  6784  021E                     	;# 
  6785  021F                     	;# 
  6786  028C                     	;# 
  6787  028C                     	;# 
  6788  028D                     	;# 
  6789  028D                     	;# 
  6790  028E                     	;# 
  6791  028F                     	;# 
  6792  0290                     	;# 
  6793  0291                     	;# 
  6794  0292                     	;# 
  6795  0292                     	;# 
  6796  0293                     	;# 
  6797  0293                     	;# 
  6798  0294                     	;# 
  6799  0295                     	;# 
  6800  0296                     	;# 
  6801  0297                     	;# 
  6802  0298                     	;# 
  6803  0298                     	;# 
  6804  0299                     	;# 
  6805  0299                     	;# 
  6806  029A                     	;# 
  6807  029B                     	;# 
  6808  029C                     	;# 
  6809  029D                     	;# 
  6810  029F                     	;# 
  6811  030C                     	;# 
  6812  030C                     	;# 
  6813  030D                     	;# 
  6814  030E                     	;# 
  6815  030F                     	;# 
  6816  0310                     	;# 
  6817  0310                     	;# 
  6818  0311                     	;# 
  6819  0312                     	;# 
  6820  0313                     	;# 
  6821  0314                     	;# 
  6822  0314                     	;# 
  6823  0315                     	;# 
  6824  0316                     	;# 
  6825  0317                     	;# 
  6826  0318                     	;# 
  6827  0318                     	;# 
  6828  0319                     	;# 
  6829  031A                     	;# 
  6830  031B                     	;# 
  6831  038C                     	;# 
  6832  038C                     	;# 
  6833  038D                     	;# 
  6834  038E                     	;# 
  6835  0390                     	;# 
  6836  0390                     	;# 
  6837  0391                     	;# 
  6838  0392                     	;# 
  6839  048C                     	;# 
  6840  048C                     	;# 
  6841  048D                     	;# 
  6842  048E                     	;# 
  6843  048F                     	;# 
  6844  048F                     	;# 
  6845  0490                     	;# 
  6846  0491                     	;# 
  6847  0492                     	;# 
  6848  0492                     	;# 
  6849  0493                     	;# 
  6850  0494                     	;# 
  6851  0495                     	;# 
  6852  0495                     	;# 
  6853  0496                     	;# 
  6854  0497                     	;# 
  6855  0498                     	;# 
  6856  0499                     	;# 
  6857  049A                     	;# 
  6858  049B                     	;# 
  6859  049C                     	;# 
  6860  049D                     	;# 
  6861  058C                     	;# 
  6862  058C                     	;# 
  6863  058D                     	;# 
  6864  058E                     	;# 
  6865  058F                     	;# 
  6866  058F                     	;# 
  6867  0590                     	;# 
  6868  0591                     	;# 
  6869  0592                     	;# 
  6870  0593                     	;# 
  6871  059C                     	;# 
  6872  059C                     	;# 
  6873  059D                     	;# 
  6874  059D                     	;# 
  6875  059E                     	;# 
  6876  059F                     	;# 
  6877  060C                     	;# 
  6878  060C                     	;# 
  6879  060D                     	;# 
  6880  060D                     	;# 
  6881  060E                     	;# 
  6882  060F                     	;# 
  6883  0610                     	;# 
  6884  0611                     	;# 
  6885  0612                     	;# 
  6886  0613                     	;# 
  6887  0614                     	;# 
  6888  0616                     	;# 
  6889  0616                     	;# 
  6890  0617                     	;# 
  6891  0617                     	;# 
  6892  0618                     	;# 
  6893  0619                     	;# 
  6894  061A                     	;# 
  6895  061B                     	;# 
  6896  061C                     	;# 
  6897  061D                     	;# 
  6898  061E                     	;# 
  6899  070C                     	;# 
  6900  070D                     	;# 
  6901  070E                     	;# 
  6902  070F                     	;# 
  6903  0710                     	;# 
  6904  0711                     	;# 
  6905  0712                     	;# 
  6906  0713                     	;# 
  6907  0714                     	;# 
  6908  0716                     	;# 
  6909  0717                     	;# 
  6910  0718                     	;# 
  6911  0719                     	;# 
  6912  071A                     	;# 
  6913  071B                     	;# 
  6914  071C                     	;# 
  6915  071D                     	;# 
  6916  071E                     	;# 
  6917  0796                     	;# 
  6918  0797                     	;# 
  6919  0798                     	;# 
  6920  0799                     	;# 
  6921  079A                     	;# 
  6922  079B                     	;# 
  6923  079C                     	;# 
  6924  079D                     	;# 
  6925  080C                     	;# 
  6926  080D                     	;# 
  6927  080E                     	;# 
  6928  080F                     	;# 
  6929  0810                     	;# 
  6930  0811                     	;# 
  6931  0812                     	;# 
  6932  0813                     	;# 
  6933  0814                     	;# 
  6934  081A                     	;# 
  6935  081A                     	;# 
  6936  081B                     	;# 
  6937  081C                     	;# 
  6938  081C                     	;# 
  6939  081D                     	;# 
  6940  081E                     	;# 
  6941  081F                     	;# 
  6942  088C                     	;# 
  6943  088D                     	;# 
  6944  088E                     	;# 
  6945  088F                     	;# 
  6946  0890                     	;# 
  6947  0891                     	;# 
  6948  0892                     	;# 
  6949  0893                     	;# 
  6950  0895                     	;# 
  6951  0896                     	;# 
  6952  0897                     	;# 
  6953  0898                     	;# 
  6954  0899                     	;# 
  6955  089A                     	;# 
  6956  089B                     	;# 
  6957  090C                     	;# 
  6958  090E                     	;# 
  6959  090F                     	;# 
  6960  091F                     	;# 
  6961  098F                     	;# 
  6962  098F                     	;# 
  6963  0990                     	;# 
  6964  0991                     	;# 
  6965  0992                     	;# 
  6966  0993                     	;# 
  6967  0994                     	;# 
  6968  0995                     	;# 
  6969  0996                     	;# 
  6970  0997                     	;# 
  6971  1E0F                     	;# 
  6972  1E10                     	;# 
  6973  1E11                     	;# 
  6974  1E12                     	;# 
  6975  1E13                     	;# 
  6976  1E14                     	;# 
  6977  1E15                     	;# 
  6978  1E16                     	;# 
  6979  1E17                     	;# 
  6980  1E18                     	;# 
  6981  1E19                     	;# 
  6982  1E1A                     	;# 
  6983  1E1B                     	;# 
  6984  1E1C                     	;# 
  6985  1E1D                     	;# 
  6986  1E1E                     	;# 
  6987  1E1F                     	;# 
  6988  1E20                     	;# 
  6989  1E21                     	;# 
  6990  1E22                     	;# 
  6991  1E23                     	;# 
  6992  1E24                     	;# 
  6993  1E25                     	;# 
  6994  1E26                     	;# 
  6995  1E27                     	;# 
  6996  1E28                     	;# 
  6997  1E29                     	;# 
  6998  1E2A                     	;# 
  6999  1E2B                     	;# 
  7000  1E2C                     	;# 
  7001  1E2D                     	;# 
  7002  1E2E                     	;# 
  7003  1E2F                     	;# 
  7004  1E30                     	;# 
  7005  1E31                     	;# 
  7006  1E32                     	;# 
  7007  1E33                     	;# 
  7008  1E34                     	;# 
  7009  1E35                     	;# 
  7010  1E36                     	;# 
  7011  1E37                     	;# 
  7012  1E8F                     	;# 
  7013  1E90                     	;# 
  7014  1E91                     	;# 
  7015  1E92                     	;# 
  7016  1E93                     	;# 
  7017  1E94                     	;# 
  7018  1E95                     	;# 
  7019  1E96                     	;# 
  7020  1E97                     	;# 
  7021  1E9C                     	;# 
  7022  1E9D                     	;# 
  7023  1E9E                     	;# 
  7024  1EA1                     	;# 
  7025  1EA2                     	;# 
  7026  1EA3                     	;# 
  7027  1EA4                     	;# 
  7028  1EA9                     	;# 
  7029  1EAA                     	;# 
  7030  1EB1                     	;# 
  7031  1EB2                     	;# 
  7032  1EB8                     	;# 
  7033  1EB9                     	;# 
  7034  1EBA                     	;# 
  7035  1EBB                     	;# 
  7036  1EBC                     	;# 
  7037  1EBD                     	;# 
  7038  1EBE                     	;# 
  7039  1EC3                     	;# 
  7040  1EC5                     	;# 
  7041  1EC6                     	;# 
  7042  1EC7                     	;# 
  7043  1EC8                     	;# 
  7044  1EC9                     	;# 
  7045  1ECA                     	;# 
  7046  1ECB                     	;# 
  7047  1ECC                     	;# 
  7048  1F10                     	;# 
  7049  1F11                     	;# 
  7050  1F12                     	;# 
  7051  1F14                     	;# 
  7052  1F15                     	;# 
  7053  1F20                     	;# 
  7054  1F21                     	;# 
  7055  1F22                     	;# 
  7056  1F23                     	;# 
  7057  1F24                     	;# 
  7058  1F25                     	;# 
  7059  1F38                     	;# 
  7060  1F39                     	;# 
  7061  1F3A                     	;# 
  7062  1F3B                     	;# 
  7063  1F3C                     	;# 
  7064  1F3D                     	;# 
  7065  1F3E                     	;# 
  7066  1F3F                     	;# 
  7067  1F4E                     	;# 
  7068  1F4F                     	;# 
  7069  1F50                     	;# 
  7070  1F51                     	;# 
  7071  1F52                     	;# 
  7072  1F53                     	;# 
  7073  1F54                     	;# 
  7074  1F55                     	;# 
  7075  1FE4                     	;# 
  7076  1FE5                     	;# 
  7077  1FE6                     	;# 
  7078  1FE7                     	;# 
  7079  1FE8                     	;# 
  7080  1FE8                     	;# 
  7081  1FE9                     	;# 
  7082  1FEA                     	;# 
  7083  1FEB                     	;# 
  7084  1FED                     	;# 
  7085  1FEE                     	;# 
  7086  1FEF                     	;# 
  7087  0000                     	;# 
  7088  0001                     	;# 
  7089  0002                     	;# 
  7090  0003                     	;# 
  7091  0004                     	;# 
  7092  0005                     	;# 
  7093  0006                     	;# 
  7094  0007                     	;# 
  7095  0008                     	;# 
  7096  0009                     	;# 
  7097  000A                     	;# 
  7098  000B                     	;# 
  7099  000C                     	;# 
  7100  000E                     	;# 
  7101  0012                     	;# 
  7102  0014                     	;# 
  7103  0018                     	;# 
  7104  001A                     	;# 
  7105  008C                     	;# 
  7106  008C                     	;# 
  7107  008D                     	;# 
  7108  008E                     	;# 
  7109  008E                     	;# 
  7110  008F                     	;# 
  7111  0090                     	;# 
  7112  0090                     	;# 
  7113  0091                     	;# 
  7114  0092                     	;# 
  7115  0092                     	;# 
  7116  0093                     	;# 
  7117  0094                     	;# 
  7118  0094                     	;# 
  7119  0095                     	;# 
  7120  0096                     	;# 
  7121  0096                     	;# 
  7122  0097                     	;# 
  7123  0098                     	;# 
  7124  0099                     	;# 
  7125  009A                     	;# 
  7126  009B                     	;# 
  7127  009B                     	;# 
  7128  009C                     	;# 
  7129  009D                     	;# 
  7130  009D                     	;# 
  7131  009E                     	;# 
  7132  009F                     	;# 
  7133  010C                     	;# 
  7134  010C                     	;# 
  7135  010D                     	;# 
  7136  010E                     	;# 
  7137  010F                     	;# 
  7138  010F                     	;# 
  7139  0110                     	;# 
  7140  0111                     	;# 
  7141  0112                     	;# 
  7142  0113                     	;# 
  7143  0114                     	;# 
  7144  0115                     	;# 
  7145  0116                     	;# 
  7146  0117                     	;# 
  7147  0118                     	;# 
  7148  0119                     	;# 
  7149  0119                     	;# 
  7150  0119                     	;# 
  7151  011A                     	;# 
  7152  011A                     	;# 
  7153  011A                     	;# 
  7154  011B                     	;# 
  7155  011B                     	;# 
  7156  011B                     	;# 
  7157  011B                     	;# 
  7158  011B                     	;# 
  7159  011C                     	;# 
  7160  011C                     	;# 
  7161  011C                     	;# 
  7162  011D                     	;# 
  7163  011D                     	;# 
  7164  011D                     	;# 
  7165  011E                     	;# 
  7166  011E                     	;# 
  7167  011E                     	;# 
  7168  011F                     	;# 
  7169  011F                     	;# 
  7170  011F                     	;# 
  7171  011F                     	;# 
  7172  011F                     	;# 
  7173  018C                     	;# 
  7174  018D                     	;# 
  7175  018E                     	;# 
  7176  018F                     	;# 
  7177  0190                     	;# 
  7178  0191                     	;# 
  7179  0192                     	;# 
  7180  0196                     	;# 
  7181  0197                     	;# 
  7182  0198                     	;# 
  7183  0199                     	;# 
  7184  019A                     	;# 
  7185  019B                     	;# 
  7186  019C                     	;# 
  7187  020C                     	;# 
  7188  020D                     	;# 
  7189  020E                     	;# 
  7190  020E                     	;# 
  7191  020F                     	;# 
  7192  020F                     	;# 
  7193  0210                     	;# 
  7194  0210                     	;# 
  7195  0211                     	;# 
  7196  0211                     	;# 
  7197  0212                     	;# 
  7198  0213                     	;# 
  7199  0214                     	;# 
  7200  0214                     	;# 
  7201  0215                     	;# 
  7202  0215                     	;# 
  7203  0216                     	;# 
  7204  0216                     	;# 
  7205  0217                     	;# 
  7206  0217                     	;# 
  7207  0218                     	;# 
  7208  0219                     	;# 
  7209  021A                     	;# 
  7210  021A                     	;# 
  7211  021B                     	;# 
  7212  021B                     	;# 
  7213  021C                     	;# 
  7214  021C                     	;# 
  7215  021D                     	;# 
  7216  021D                     	;# 
  7217  021E                     	;# 
  7218  021F                     	;# 
  7219  028C                     	;# 
  7220  028C                     	;# 
  7221  028D                     	;# 
  7222  028D                     	;# 
  7223  028E                     	;# 
  7224  028F                     	;# 
  7225  0290                     	;# 
  7226  0291                     	;# 
  7227  0292                     	;# 
  7228  0292                     	;# 
  7229  0293                     	;# 
  7230  0293                     	;# 
  7231  0294                     	;# 
  7232  0295                     	;# 
  7233  0296                     	;# 
  7234  0297                     	;# 
  7235  0298                     	;# 
  7236  0298                     	;# 
  7237  0299                     	;# 
  7238  0299                     	;# 
  7239  029A                     	;# 
  7240  029B                     	;# 
  7241  029C                     	;# 
  7242  029D                     	;# 
  7243  029F                     	;# 
  7244  030C                     	;# 
  7245  030C                     	;# 
  7246  030D                     	;# 
  7247  030E                     	;# 
  7248  030F                     	;# 
  7249  0310                     	;# 
  7250  0310                     	;# 
  7251  0311                     	;# 
  7252  0312                     	;# 
  7253  0313                     	;# 
  7254  0314                     	;# 
  7255  0314                     	;# 
  7256  0315                     	;# 
  7257  0316                     	;# 
  7258  0317                     	;# 
  7259  0318                     	;# 
  7260  0318                     	;# 
  7261  0319                     	;# 
  7262  031A                     	;# 
  7263  031B                     	;# 
  7264  038C                     	;# 
  7265  038C                     	;# 
  7266  038D                     	;# 
  7267  038E                     	;# 
  7268  0390                     	;# 
  7269  0390                     	;# 
  7270  0391                     	;# 
  7271  0392                     	;# 
  7272  048C                     	;# 
  7273  048C                     	;# 
  7274  048D                     	;# 
  7275  048E                     	;# 
  7276  048F                     	;# 
  7277  048F                     	;# 
  7278  0490                     	;# 
  7279  0491                     	;# 
  7280  0492                     	;# 
  7281  0492                     	;# 
  7282  0493                     	;# 
  7283  0494                     	;# 
  7284  0495                     	;# 
  7285  0495                     	;# 
  7286  0496                     	;# 
  7287  0497                     	;# 
  7288  0498                     	;# 
  7289  0499                     	;# 
  7290  049A                     	;# 
  7291  049B                     	;# 
  7292  049C                     	;# 
  7293  049D                     	;# 
  7294  058C                     	;# 
  7295  058C                     	;# 
  7296  058D                     	;# 
  7297  058E                     	;# 
  7298  058F                     	;# 
  7299  058F                     	;# 
  7300  0590                     	;# 
  7301  0591                     	;# 
  7302  0592                     	;# 
  7303  0593                     	;# 
  7304  059C                     	;# 
  7305  059C                     	;# 
  7306  059D                     	;# 
  7307  059D                     	;# 
  7308  059E                     	;# 
  7309  059F                     	;# 
  7310  060C                     	;# 
  7311  060C                     	;# 
  7312  060D                     	;# 
  7313  060D                     	;# 
  7314  060E                     	;# 
  7315  060F                     	;# 
  7316  0610                     	;# 
  7317  0611                     	;# 
  7318  0612                     	;# 
  7319  0613                     	;# 
  7320  0614                     	;# 
  7321  0616                     	;# 
  7322  0616                     	;# 
  7323  0617                     	;# 
  7324  0617                     	;# 
  7325  0618                     	;# 
  7326  0619                     	;# 
  7327  061A                     	;# 
  7328  061B                     	;# 
  7329  061C                     	;# 
  7330  061D                     	;# 
  7331  061E                     	;# 
  7332  070C                     	;# 
  7333  070D                     	;# 
  7334  070E                     	;# 
  7335  070F                     	;# 
  7336  0710                     	;# 
  7337  0711                     	;# 
  7338  0712                     	;# 
  7339  0713                     	;# 
  7340  0714                     	;# 
  7341  0716                     	;# 
  7342  0717                     	;# 
  7343  0718                     	;# 
  7344  0719                     	;# 
  7345  071A                     	;# 
  7346  071B                     	;# 
  7347  071C                     	;# 
  7348  071D                     	;# 
  7349  071E                     	;# 
  7350  0796                     	;# 
  7351  0797                     	;# 
  7352  0798                     	;# 
  7353  0799                     	;# 
  7354  079A                     	;# 
  7355  079B                     	;# 
  7356  079C                     	;# 
  7357  079D                     	;# 
  7358  080C                     	;# 
  7359  080D                     	;# 
  7360  080E                     	;# 
  7361  080F                     	;# 
  7362  0810                     	;# 
  7363  0811                     	;# 
  7364  0812                     	;# 
  7365  0813                     	;# 
  7366  0814                     	;# 
  7367  081A                     	;# 
  7368  081A                     	;# 
  7369  081B                     	;# 
  7370  081C                     	;# 
  7371  081C                     	;# 
  7372  081D                     	;# 
  7373  081E                     	;# 
  7374  081F                     	;# 
  7375  088C                     	;# 
  7376  088D                     	;# 
  7377  088E                     	;# 
  7378  088F                     	;# 
  7379  0890                     	;# 
  7380  0891                     	;# 
  7381  0892                     	;# 
  7382  0893                     	;# 
  7383  0895                     	;# 
  7384  0896                     	;# 
  7385  0897                     	;# 
  7386  0898                     	;# 
  7387  0899                     	;# 
  7388  089A                     	;# 
  7389  089B                     	;# 
  7390  090C                     	;# 
  7391  090E                     	;# 
  7392  090F                     	;# 
  7393  091F                     	;# 
  7394  098F                     	;# 
  7395  098F                     	;# 
  7396  0990                     	;# 
  7397  0991                     	;# 
  7398  0992                     	;# 
  7399  0993                     	;# 
  7400  0994                     	;# 
  7401  0995                     	;# 
  7402  0996                     	;# 
  7403  0997                     	;# 
  7404  1E0F                     	;# 
  7405  1E10                     	;# 
  7406  1E11                     	;# 
  7407  1E12                     	;# 
  7408  1E13                     	;# 
  7409  1E14                     	;# 
  7410  1E15                     	;# 
  7411  1E16                     	;# 
  7412  1E17                     	;# 
  7413  1E18                     	;# 
  7414  1E19                     	;# 
  7415  1E1A                     	;# 
  7416  1E1B                     	;# 
  7417  1E1C                     	;# 
  7418  1E1D                     	;# 
  7419  1E1E                     	;# 
  7420  1E1F                     	;# 
  7421  1E20                     	;# 
  7422  1E21                     	;# 
  7423  1E22                     	;# 
  7424  1E23                     	;# 
  7425  1E24                     	;# 
  7426  1E25                     	;# 
  7427  1E26                     	;# 
  7428  1E27                     	;# 
  7429  1E28                     	;# 
  7430  1E29                     	;# 
  7431  1E2A                     	;# 
  7432  1E2B                     	;# 
  7433  1E2C                     	;# 
  7434  1E2D                     	;# 
  7435  1E2E                     	;# 
  7436  1E2F                     	;# 
  7437  1E30                     	;# 
  7438  1E31                     	;# 
  7439  1E32                     	;# 
  7440  1E33                     	;# 
  7441  1E34                     	;# 
  7442  1E35                     	;# 
  7443  1E36                     	;# 
  7444  1E37                     	;# 
  7445  1E8F                     	;# 
  7446  1E90                     	;# 
  7447  1E91                     	;# 
  7448  1E92                     	;# 
  7449  1E93                     	;# 
  7450  1E94                     	;# 
  7451  1E95                     	;# 
  7452  1E96                     	;# 
  7453  1E97                     	;# 
  7454  1E9C                     	;# 
  7455  1E9D                     	;# 
  7456  1E9E                     	;# 
  7457  1EA1                     	;# 
  7458  1EA2                     	;# 
  7459  1EA3                     	;# 
  7460  1EA4                     	;# 
  7461  1EA9                     	;# 
  7462  1EAA                     	;# 
  7463  1EB1                     	;# 
  7464  1EB2                     	;# 
  7465  1EB8                     	;# 
  7466  1EB9                     	;# 
  7467  1EBA                     	;# 
  7468  1EBB                     	;# 
  7469  1EBC                     	;# 
  7470  1EBD                     	;# 
  7471  1EBE                     	;# 
  7472  1EC3                     	;# 
  7473  1EC5                     	;# 
  7474  1EC6                     	;# 
  7475  1EC7                     	;# 
  7476  1EC8                     	;# 
  7477  1EC9                     	;# 
  7478  1ECA                     	;# 
  7479  1ECB                     	;# 
  7480  1ECC                     	;# 
  7481  1F10                     	;# 
  7482  1F11                     	;# 
  7483  1F12                     	;# 
  7484  1F14                     	;# 
  7485  1F15                     	;# 
  7486  1F20                     	;# 
  7487  1F21                     	;# 
  7488  1F22                     	;# 
  7489  1F23                     	;# 
  7490  1F24                     	;# 
  7491  1F25                     	;# 
  7492  1F38                     	;# 
  7493  1F39                     	;# 
  7494  1F3A                     	;# 
  7495  1F3B                     	;# 
  7496  1F3C                     	;# 
  7497  1F3D                     	;# 
  7498  1F3E                     	;# 
  7499  1F3F                     	;# 
  7500  1F4E                     	;# 
  7501  1F4F                     	;# 
  7502  1F50                     	;# 
  7503  1F51                     	;# 
  7504  1F52                     	;# 
  7505  1F53                     	;# 
  7506  1F54                     	;# 
  7507  1F55                     	;# 
  7508  1FE4                     	;# 
  7509  1FE5                     	;# 
  7510  1FE6                     	;# 
  7511  1FE7                     	;# 
  7512  1FE8                     	;# 
  7513  1FE8                     	;# 
  7514  1FE9                     	;# 
  7515  1FEA                     	;# 
  7516  1FEB                     	;# 
  7517  1FED                     	;# 
  7518  1FEE                     	;# 
  7519  1FEF                     	;_builtin
  7520                           
  7521 ;; Function _handle_write_single_register is unused but had its address taken
  7522  0000                     
  7523                           	psect	idataBANK2
  7524  0942                     __pidataBANK2:
  7525                           
  7526                           ;initializer for _sensor2
  7527  0942  3457               	retlw	87
  7528  0943  3453               	retlw	83
  7529  0944  3430               	retlw	48
  7530  0945  3430               	retlw	48
  7531  0946  3434               	retlw	52
  7532  0947  3430               	retlw	48
  7533  0948  3430               	retlw	48
  7534  0949  3434               	retlw	52
  7535  094A  3400               	retlw	0
  7536  094B  3400               	retlw	0
  7537  094C  3405               	retlw	5
  7538  094D  3416               	retlw	low _getCount
  7539  094E  340A               	retlw	high _getCount
  7540                           
  7541                           ;initializer for sendSensorData@F10866
  7542  094F  344C               	retlw	76
  7543  0950  343E               	retlw	62
  7544  0951  3400               	retlw	0
  7545  0952  3400               	retlw	0
  7546  0953  3400               	retlw	0
  7547  0954  3400               	retlw	0
  7548  0955  3400               	retlw	0
  7549  0956  3400               	retlw	0
  7550                           
  7551                           ;initializer for sendSensorInfo@F10861
  7552  0957  344C               	retlw	76
  7553  0958  343E               	retlw	62
  7554  0959  3457               	retlw	87
  7555  095A  3453               	retlw	83
  7556  095B  3430               	retlw	48
  7557  095C  3430               	retlw	48
  7558  095D  3434               	retlw	52
  7559                           
  7560                           	psect	idataBANK4
  7561  0828                     __pidataBANK4:
  7562                           
  7563                           ;initializer for _sensor1
  7564  0828  3457               	retlw	87
  7565  0829  3444               	retlw	68
  7566  082A  3430               	retlw	48
  7567  082B  3430               	retlw	48
  7568  082C  3433               	retlw	51
  7569  082D  3430               	retlw	48
  7570  082E  3430               	retlw	48
  7571  082F  3433               	retlw	51
  7572  0830  3400               	retlw	0
  7573  0831  3400               	retlw	0
  7574  0832  3404               	retlw	4
  7575  0833  34C8               	retlw	low _getADCData
  7576  0834  3408               	retlw	high _getADCData
  7577                           
  7578                           	psect	stringtext1
  7579  1800                     __pstringtext1:
  7580  1800                     _NMBS_BROADCAST_ADDRESS@nanomodbus$F2150:
  7581  1800  3400               	retlw	0
  7582  1801                     __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F2150:
  7583                           
  7584                           	psect	stringtext2
  7585  1801                     __pstringtext2:
  7586  1801                     _NMBS_BROADCAST_ADDRESS@nanomodbus$F1922:
  7587  1801  3400               	retlw	0
  7588  1802                     __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F1922:
  7589                           
  7590                           	psect	stringtext3
  7591  1802                     __pstringtext3:
  7592  1802                     _NMBS_BROADCAST_ADDRESS:
  7593  1802  3400               	retlw	0
  7594  1803                     __end_of_NMBS_BROADCAST_ADDRESS:
  7595                           
  7596                           	psect	nvBANK2
  7597  0162                     __pnvBANK2:
  7598  0162                     _TMR1_InterruptHandler:
  7599  0162                     	ds	2
  7600  0164                     _timer1ReloadVal:
  7601  0164                     	ds	2
  7602  0166                     _timer5ReloadVal:
  7603  0166                     	ds	2
  7604  0168                     _EUSART1_ErrorHandler:
  7605  0168                     	ds	2
  7606  016A                     _EUSART1_OverrunErrorHandler:
  7607  016A                     	ds	2
  7608  016C                     _EUSART1_FramingErrorHandler:
  7609  016C                     	ds	2
  7610  016E                     _EUSART1_RxDefaultInterruptHandler:
  7611  016E                     	ds	2
  7612  001A                     _LATCbits	set	26
  7613  000B                     _INTCONbits	set	11
  7614  0014                     _TRISC	set	20
  7615  0012                     _TRISA	set	18
  7616  001A                     _LATC	set	26
  7617  0018                     _LATA	set	24
  7618  009D                     _ADRESL	set	157
  7619  009E                     _ADRESH	set	158
  7620  009F                     _ADPCH	set	159
  7621  009A                     _ADRPT	set	154
  7622  0098                     _ADACCU	set	152
  7623  0093                     _ADSTPTH	set	147
  7624  0092                     _ADSTPTL	set	146
  7625  008F                     _ADUTHH	set	143
  7626  008E                     _ADUTHL	set	142
  7627  008D                     _ADLTHH	set	141
  7628  008C                     _ADLTHL	set	140
  7629  011B                     _SP1BRG	set	283
  7630  0119                     _RC1REG	set	281
  7631  011A                     _TX1REG	set	282
  7632  011E                     _TX1STA	set	286
  7633  011D                     _RC1STA	set	285
  7634  011F                     _BAUD1CON	set	287
  7635  011C                     _SP1BRGH	set	284
  7636  011B                     _SP1BRGL	set	283
  7637  011D                     _RC1STAbits	set	285
  7638  011E                     _TX1STAbits	set	286
  7639  0111                     _ADCON0bits	set	273
  7640  0111                     _ADCON0	set	273
  7641  0118                     _ADCLK	set	280
  7642  0117                     _ADACT	set	279
  7643  0116                     _ADREF	set	278
  7644  0115                     _ADSTAT	set	277
  7645  0114                     _ADCON3	set	276
  7646  0113                     _ADCON2	set	275
  7647  0112                     _ADCON1	set	274
  7648  0110                     _ADPREH	set	272
  7649  010F                     _ADPREL	set	271
  7650  010E                     _ADCAP	set	270
  7651  010D                     _ADACQH	set	269
  7652  010C                     _ADACQL	set	268
  7653  020E                     _T1CONbits	set	526
  7654  020E                     _T1CON	set	526
  7655  0211                     _T1CLK	set	529
  7656  0210                     _T1GATE	set	528
  7657  020F                     _T1GCON	set	527
  7658  021A                     _T5CONbits	set	538
  7659  021A                     _T5CON	set	538
  7660  0218                     _TMR5L	set	536
  7661  0219                     _TMR5H	set	537
  7662  021D                     _T5CLK	set	541
  7663  021C                     _T5GATE	set	540
  7664  021B                     _T5GCON	set	539
  7665  020C                     _TMR1L	set	524
  7666  020D                     _TMR1H	set	525
  7667  059E                     _T0CON0bits	set	1438
  7668  059E                     _T0CON0	set	1438
  7669  059C                     _TMR0L	set	1436
  7670  059D                     _TMR0H	set	1437
  7671  059F                     _T0CON1	set	1439
  7672  071A                     _PIE4bits	set	1818
  7673  0710                     _PIR4bits	set	1808
  7674  070C                     _PIR0bits	set	1804
  7675  070F                     _PIR3bits	set	1807
  7676  0719                     _PIE3bits	set	1817
  7677  079D                     _PMD7	set	1949
  7678  079C                     _PMD6	set	1948
  7679  079B                     _PMD5	set	1947
  7680  079A                     _PMD4	set	1946
  7681  0799                     _PMD3	set	1945
  7682  0798                     _PMD2	set	1944
  7683  0797                     _PMD1	set	1943
  7684  0796                     _PMD0	set	1942
  7685  081F                     _NVMCON2	set	2079
  7686  081C                     _NVMDATL	set	2076
  7687  081E                     _NVMCON1bits	set	2078
  7688  081B                     _NVMADRH	set	2075
  7689  081A                     _NVMADRL	set	2074
  7690  0892                     _OSCTUNE	set	2194
  7691  0893                     _OSCFRQ	set	2195
  7692  0891                     _OSCEN	set	2193
  7693  088F                     _OSCCON3	set	2191
  7694  088D                     _OSCCON1	set	2189
  7695  090C                     _FVRCONbits	set	2316
  7696  090C                     _FVRCON	set	2316
  7697  1ECB                     _RX1DTPPS	set	7883
  7698  1E96                     _T5CKIPPS	set	7830
  7699  1F24                     _RC4PPS	set	7972
  7700  1F52                     _INLVLC	set	8018
  7701  1F3C                     _INLVLA	set	7996
  7702  1F51                     _SLRCONC	set	8017
  7703  1F3B                     _SLRCONA	set	7995
  7704  1F50                     _ODCONC	set	8016
  7705  1F3A                     _ODCONA	set	7994
  7706  1F4F                     _WPUC	set	8015
  7707  1F39                     _WPUA	set	7993
  7708  1F38                     _ANSELA	set	7992
  7709  1F4E                     _ANSELC	set	8014
  7710                           
  7711                           	psect	cinit
  7712  001D                     start_initialization:	
  7713                           ; #config settings
  7714                           
  7715  001D                     __initialization:	;BIGRAM
  7716                           
  7717                           ; Initialize objects allocated to BANK2
  7718  001D  3042               	movlw	low __pidataBANK2
  7719  001E  0084               	movwf	4
  7720  001F  3089               	movlw	(high __pidataBANK2)| (0+128)
  7721  0020  0085               	movwf	5
  7722  0021  3020               	movlw	low __pdataBANK2
  7723  0022  0086               	movwf	6
  7724  0023  3001               	movlw	high __pdataBANK2
  7725  0024  0087               	movwf	7
  7726  0025  3000               	movlw	0
  7727  0026  00FF               	movwf	btemp+1
  7728  0027  301C               	movlw	28
  7729  0028  3188  200F  3180   	fcall	init_ram
  7730                           
  7731                           ; Initialize objects allocated to BANK4
  7732  002B  3028               	movlw	low __pidataBANK4
  7733  002C  0084               	movwf	4
  7734  002D  3088               	movlw	(high __pidataBANK4)| (0+128)
  7735  002E  0085               	movwf	5
  7736  002F  3020               	movlw	low __pdataBANK4
  7737  0030  0086               	movwf	6
  7738  0031  3002               	movlw	high __pdataBANK4
  7739  0032  0087               	movwf	7
  7740  0033  3000               	movlw	0
  7741  0034  00FF               	movwf	btemp+1
  7742  0035  300D               	movlw	13
  7743  0036  3188  200F  3180   	fcall	init_ram
  7744                           
  7745                           ; Clear objects allocated to BIGRAM
  7746  0039  306E               	movlw	low (0+9070)
  7747  003A  0084               	movwf	4
  7748  003B  3023               	movlw	high (0+9070)
  7749  003C  0085               	movwf	5
  7750  003D  3082               	movlw	130
  7751  003E  00FE               	movwf	btemp
  7752  003F  3000               	movlw	0
  7753  0040  00FF               	movwf	btemp+1
  7754  0041  3188  2003  3180   	fcall	clear_ram0
  7755                           
  7756                           ; Clear objects allocated to COMMON
  7757  0044  01F0               	clrf	__pbssCOMMON& (0+127)
  7758  0045  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  7759  0046  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  7760  0047  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  7761  0048  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  7762  0049  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  7763                           
  7764                           ; Clear objects allocated to BANK1
  7765  004A  0141               	movlb	1	; select bank1
  7766  004B  01EF               	clrf	__pbssBANK1& (0+127)
  7767                           
  7768                           ; Clear objects allocated to BANK2
  7769  004C  303C               	movlw	low __pbssBANK2
  7770  004D  0084               	movwf	4
  7771  004E  3001               	movlw	high __pbssBANK2
  7772  004F  0085               	movwf	5
  7773  0050  3013               	movlw	19
  7774  0051  00FE               	movwf	btemp
  7775  0052  3000               	movlw	0
  7776  0053  00FF               	movwf	btemp+1
  7777  0054  3188  2003  3180   	fcall	clear_ram0
  7778                           
  7779                           ; Clear objects allocated to BANK4
  7780  0057  0144               	movlb	4	; select bank4
  7781  0058  01BA               	clrf	__pbssBANK4& (0+127)
  7782                           
  7783                           ; Clear objects allocated to BANK5
  7784  0059  30A0               	movlw	low __pbssBANK5
  7785  005A  0084               	movwf	4
  7786  005B  3002               	movlw	high __pbssBANK5
  7787  005C  0085               	movwf	5
  7788  005D  3040               	movlw	64
  7789  005E  00FE               	movwf	btemp
  7790  005F  3000               	movlw	0
  7791  0060  00FF               	movwf	btemp+1
  7792  0061  3188  2003         	fcall	clear_ram0
  7793  0063                     end_of_initialization:	
  7794                           ;End of C runtime variable initialization code
  7795                           
  7796  0063                     __end_of__initialization:
  7797  0063  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  7798  0064  0140               	movlb	0
  7799  0065  3181  29AD         	ljmp	_main	;jump to C main() function
  7800                           
  7801                           	psect	bssCOMMON
  7802  0070                     __pbssCOMMON:
  7803  0070                     _head:
  7804  0070                     	ds	2
  7805  0072                     _eusart1RxCount:
  7806  0072                     	ds	1
  7807  0073                     _eusart1RxTail:
  7808  0073                     	ds	1
  7809  0074                     _eusart1RxHead:
  7810  0074                     	ds	1
  7811  0075                     _uart_expire_time:
  7812  0075                     	ds	1
  7813                           
  7814                           	psect	bssBANK1
  7815  00EF                     __pbssBANK1:
  7816  00EF                     _flag_Rx:
  7817  00EF                     	ds	1
  7818                           
  7819                           	psect	bssBANK2
  7820  013C                     __pbssBANK2:
  7821  013C                     _eusart1RxStatusBuffer:
  7822  013C                     	ds	8
  7823  0144                     _eusart1RxBuffer:
  7824  0144                     	ds	8
  7825  014C                     _slot:
  7826  014C                     	ds	2
  7827  014E                     _eusart1RxLastError:
  7828  014E                     	ds	1
  7829                           
  7830                           	psect	dataBANK2
  7831  0120                     __pdataBANK2:
  7832  0120                     _sensor2:
  7833  0120                     	ds	13
  7834  012D                     sendSensorData@F10866:
  7835  012D                     	ds	8
  7836  0135                     sendSensorInfo@F10861:
  7837  0135                     	ds	7
  7838                           
  7839                           	psect	bssBANK4
  7840  023A                     __pbssBANK4:
  7841  023A                     _eusart1PacketFinish:
  7842  023A                     	ds	1
  7843                           
  7844                           	psect	dataBANK4
  7845  0220                     __pdataBANK4:
  7846  0220                     _sensor1:
  7847  0220                     	ds	13
  7848                           
  7849                           	psect	bssBANK5
  7850  02A0                     __pbssBANK5:
  7851  02A0                     handle_read_registers@F11090:
  7852  02A0                     	ds	64
  7853                           
  7854                           	psect	inittext
  7855  080F                     init_ram:
  7856  080F  00FE               	movwf	126
  7857  0810                     initloop:
  7858  0810  0012               	moviw fsr0++
  7859  0811  001E               	movwi fsr1++
  7860  0812  3001               	movlw	1
  7861  0813  02FE               	subwf	126,f
  7862  0814  3000               	movlw	0
  7863  0815  3BFF               	subwfb	127,f
  7864  0816  087F               	movf	127,w
  7865  0817  047E               	iorwf	126,w
  7866  0818  1903               	btfsc	3,2
  7867  0819  3400               	retlw	0
  7868  081A  2810               	goto	initloop
  7869                           
  7870                           	psect	clrtext
  7871  0803                     clear_ram0:	
  7872                           ;	Called with FSR0 containing the base address, and
  7873                           ;	btemp/btemp+1 has the size to clear
  7874                           
  7875  0803  0064               	clrwdt	;clear the watchdog before getting into this loop
  7876  0804                     clrloop0:
  7877  0804  0180               	clrf	0	;clear RAM location pointed to by FSR
  7878  0805  3101               	addfsr 0,1
  7879  0806  3001               	movlw	1
  7880  0807  02FE               	subwf	126,f
  7881  0808  3000               	movlw	0
  7882  0809  3BFF               	subwfb	127,f
  7883  080A  087F               	movf	127,w
  7884  080B  047E               	iorwf	126,w
  7885  080C  1903               	btfsc	3,2
  7886  080D  3400               	retlw	0	;all done for this memory range, return
  7887  080E  2804               	goto	clrloop0	;have we reached the end yet?
  7888                           
  7889                           	psect	cstackBANK4
  7890  022D                     __pcstackBANK4:
  7891  022D                     main@registers:
  7892                           
  7893                           ; 13 bytes @ 0x0
  7894  022D                     	ds	13
  7895                           
  7896                           	psect	cstackBANK3
  7897  01A0                     __pcstackBANK3:
  7898  01A0                     main@nmbs:
  7899                           
  7900                           ; 75 bytes @ 0x0
  7901  01A0                     	ds	75
  7902                           
  7903                           	psect	cstackBANK2
  7904  014F                     __pcstackBANK2:
  7905  014F                     main@actual_regs:
  7906                           
  7907                           ; 4 bytes @ 0x0
  7908  014F                     	ds	4
  7909  0153                     main@callbacks:
  7910                           
  7911                           ; 9 bytes @ 0x4
  7912  0153                     	ds	9
  7913  015C                     main@platform_conf:
  7914                           
  7915                           ; 6 bytes @ 0xD
  7916  015C                     	ds	6
  7917                           
  7918                           	psect	cstackBANK1
  7919  00A0                     __pcstackBANK1:
  7920  00A0                     handle_read_registers@regs:
  7921                           
  7922                           ; 64 bytes @ 0x0
  7923  00A0                     	ds	64
  7924  00E0                     handle_read_registers@address:
  7925                           
  7926                           ; 2 bytes @ 0x40
  7927  00E0                     	ds	2
  7928  00E2                     handle_read_registers@regs_bytes:
  7929                           
  7930                           ; 1 bytes @ 0x42
  7931  00E2                     	ds	1
  7932  00E3                     handle_read_registers@i:
  7933                           
  7934                           ; 2 bytes @ 0x43
  7935  00E3                     	ds	2
  7936  00E5                     handle_read_registers@quantity:
  7937                           
  7938                           ; 2 bytes @ 0x45
  7939  00E5                     	ds	2
  7940  00E7                     handle_read_registers@err:
  7941                           
  7942                           ; 1 bytes @ 0x47
  7943  00E7                     	ds	1
  7944  00E8                     handle_read_registers@nmbs:
  7945                           
  7946                           ; 1 bytes @ 0x48
  7947  00E8                     	ds	1
  7948  00E9                     ??_main:
  7949                           
  7950                           ; 1 bytes @ 0x49
  7951  00E9                     	ds	4
  7952  00ED                     main@is_in_memory:
  7953                           
  7954                           ; 1 bytes @ 0x4D
  7955  00ED                     	ds	1
  7956  00EE                     main@err:
  7957                           
  7958                           ; 1 bytes @ 0x4E
  7959  00EE                     	ds	1
  7960                           
  7961                           	psect	cstackCOMMON
  7962  0076                     __pcstackCOMMON:
  7963  0076                     ?_EUSART1_Receive_ISR:
  7964  0076                     ?_EUSART1_DefaultFramingErrorHandler:	
  7965                           ; 1 bytes @ 0x0
  7966                           
  7967  0076                     ??_EUSART1_DefaultFramingErrorHandler:	
  7968                           ; 1 bytes @ 0x0
  7969                           
  7970  0076                     ?_EUSART1_DefaultOverrunErrorHandler:	
  7971                           ; 1 bytes @ 0x0
  7972                           
  7973  0076                     ??_EUSART1_DefaultOverrunErrorHandler:	
  7974                           ; 1 bytes @ 0x0
  7975                           
  7976  0076                     ?_EUSART1_DefaultErrorHandler:	
  7977                           ; 1 bytes @ 0x0
  7978                           
  7979  0076                     ?_EUSART1_RxDataHandler:	
  7980                           ; 1 bytes @ 0x0
  7981                           
  7982  0076                     ?_TMR1_StopTimer:	
  7983                           ; 1 bytes @ 0x0
  7984                           
  7985  0076                     ??_TMR1_StopTimer:	
  7986                           ; 1 bytes @ 0x0
  7987                           
  7988  0076                     ?_TMR1_WriteTimer:	
  7989                           ; 1 bytes @ 0x0
  7990                           
  7991  0076                     ?_TMR1_StartTimer:	
  7992                           ; 1 bytes @ 0x0
  7993                           
  7994  0076                     ??_TMR1_StartTimer:	
  7995                           ; 1 bytes @ 0x0
  7996                           
  7997  0076                     ?_PMD_Initialize:	
  7998                           ; 1 bytes @ 0x0
  7999                           
  8000  0076                     ?_PIN_MANAGER_Initialize:	
  8001                           ; 1 bytes @ 0x0
  8002                           
  8003  0076                     ?_OSCILLATOR_Initialize:	
  8004                           ; 1 bytes @ 0x0
  8005                           
  8006  0076                     ?_FVR_Initialize:	
  8007                           ; 1 bytes @ 0x0
  8008                           
  8009  0076                     ?_TMR5_Initialize:	
  8010                           ; 1 bytes @ 0x0
  8011                           
  8012  0076                     ?_TMR1_Initialize:	
  8013                           ; 1 bytes @ 0x0
  8014                           
  8015  0076                     ?_TMR0_Initialize:	
  8016                           ; 1 bytes @ 0x0
  8017                           
  8018  0076                     ?_TMR1_ISR:	
  8019                           ; 1 bytes @ 0x0
  8020                           
  8021  0076                     ?_TMR1_DefaultInterruptHandler:	
  8022                           ; 1 bytes @ 0x0
  8023                           
  8024  0076                     ??_TMR1_DefaultInterruptHandler:	
  8025                           ; 1 bytes @ 0x0
  8026                           
  8027  0076                     ?_TxDeviceDisable:	
  8028                           ; 1 bytes @ 0x0
  8029                           
  8030  0076                     ?_default_values_register:	
  8031                           ; 1 bytes @ 0x0
  8032                           
  8033  0076                     ?_nmbs_server_poll:	
  8034                           ; 1 bytes @ 0x0
  8035                           
  8036  0076                     ?_check_error_modbus:	
  8037                           ; 1 bytes @ 0x0
  8038                           
  8039  0076                     ?_TxDeviceEnable:	
  8040                           ; 1 bytes @ 0x0
  8041                           
  8042  0076                     ?___funcs_on_exit:	
  8043                           ; 1 bytes @ 0x0
  8044                           
  8045  0076                     ?_ADCC_Initialize:	
  8046                           ; 1 bytes @ 0x0
  8047                           
  8048  0076                     ?_EUSART1_Initialize:	
  8049                           ; 1 bytes @ 0x0
  8050                           
  8051  0076                     ?_EUSART1_is_tx_ready:	
  8052                           ; 1 bytes @ 0x0
  8053                           
  8054  0076                     ?_EUSART1_is_tx_done:	
  8055                           ; 1 bytes @ 0x0
  8056                           
  8057  0076                     ?_EUSART1_Read:	
  8058                           ; 1 bytes @ 0x0
  8059                           
  8060  0076                     ?_EUSART1_Write:	
  8061                           ; 1 bytes @ 0x0
  8062                           
  8063  0076                     ?_UART_ClearBuffer:	
  8064                           ; 1 bytes @ 0x0
  8065                           
  8066  0076                     ?_SYSTEM_Initialize:	
  8067                           ; 1 bytes @ 0x0
  8068                           
  8069  0076                     ?_FVR_IsOutputReady:	
  8070                           ; 1 bytes @ 0x0
  8071                           
  8072  0076                     ?_TMR0_StartTimer:	
  8073                           ; 1 bytes @ 0x0
  8074                           
  8075  0076                     ?_TMR0_HasOverflowOccured:	
  8076                           ; 1 bytes @ 0x0
  8077                           
  8078  0076                     ?_TMR5_StartTimer:	
  8079                           ; 1 bytes @ 0x0
  8080                           
  8081  0076                     ?_TMR5_StopTimer:	
  8082                           ; 1 bytes @ 0x0
  8083                           
  8084  0076                     ?_INTERRUPT_InterruptManager:	
  8085                           ; 1 bytes @ 0x0
  8086                           
  8087  0076                     ?_main:	
  8088                           ; 1 bytes @ 0x0
  8089                           
  8090  0076                     ?_get_1:	
  8091                           ; 1 bytes @ 0x0
  8092                           
  8093  0076                     ?_msg_buf_reset:	
  8094                           ; 1 bytes @ 0x0
  8095                           
  8096  0076                     ?_msg_state_reset:	
  8097                           ; 1 bytes @ 0x0
  8098                           
  8099  0076                     ?_recv_msg_footer:	
  8100                           ; 1 bytes @ 0x0
  8101                           
  8102  0076                     ?_send_msg:	
  8103                           ; 1 bytes @ 0x0
  8104                           
  8105  0076                     ?_recv_res_header:	
  8106                           ; 1 bytes @ 0x0
  8107                           
  8108  0076                     ?_handle_read_holding_registers:	
  8109                           ; 1 bytes @ 0x0
  8110                           
  8111  0076                     ?_handle_read_input_registers:	
  8112                           ; 1 bytes @ 0x0
  8113                           
  8114  0076                     ?_handle_write_single_coil@nanomodbus$F2778:	
  8115                           ; 1 bytes @ 0x0
  8116                           
  8117  0076                     ?_handle_write_single_register@nanomodbus$F2807:	
  8118                           ; 1 bytes @ 0x0
  8119                           
  8120  0076                     ?_handle_req_fc:	
  8121                           ; 1 bytes @ 0x0
  8122                           
  8123  0076                     ?i1_UART_ClearBuffer:	
  8124                           ; 1 bytes @ 0x0
  8125                           
  8126  0076                     ??i1_UART_ClearBuffer:	
  8127                           ; 1 bytes @ 0x0
  8128                           
  8129  0076                     check_error_modbus@err:	
  8130                           ; 1 bytes @ 0x0
  8131                           
  8132  0076                     TMR1_WriteTimer@timerVal:	
  8133                           ; 1 bytes @ 0x0
  8134                           
  8135                           
  8136                           ; 2 bytes @ 0x0
  8137  0076                     	ds	2
  8138  0078                     ??_EUSART1_RxDataHandler:
  8139  0078                     ??_TMR1_WriteTimer:	
  8140                           ; 1 bytes @ 0x2
  8141                           
  8142  0078                     ??_TMR1_ISR:	
  8143                           ; 1 bytes @ 0x2
  8144                           
  8145                           
  8146                           ; 1 bytes @ 0x2
  8147  0078                     	ds	2
  8148  007A                     EUSART1_RxDataHandler@t:
  8149                           
  8150                           ; 2 bytes @ 0x4
  8151  007A                     	ds	2
  8152  007C                     ??_EUSART1_Receive_ISR:
  8153  007C                     ??_EUSART1_DefaultErrorHandler:	
  8154                           ; 1 bytes @ 0x6
  8155                           
  8156  007C                     ??_INTERRUPT_InterruptManager:	
  8157                           ; 1 bytes @ 0x6
  8158                           
  8159                           
  8160                           	psect	cstackBANK0
  8161  0020                     __pcstackBANK0:	
  8162                           ; 1 bytes @ 0x6
  8163                           
  8164  0020                     ?_EUSART1_SetRxInterruptHandler:
  8165  0020                     ?_EUSART1_SetFramingErrorHandler:	
  8166                           ; 1 bytes @ 0x0
  8167                           
  8168  0020                     ?_EUSART1_SetOverrunErrorHandler:	
  8169                           ; 1 bytes @ 0x0
  8170                           
  8171  0020                     ?_EUSART1_SetErrorHandler:	
  8172                           ; 1 bytes @ 0x0
  8173                           
  8174  0020                     ??_PMD_Initialize:	
  8175                           ; 1 bytes @ 0x0
  8176                           
  8177  0020                     ??_PIN_MANAGER_Initialize:	
  8178                           ; 1 bytes @ 0x0
  8179                           
  8180  0020                     ??_OSCILLATOR_Initialize:	
  8181                           ; 1 bytes @ 0x0
  8182                           
  8183  0020                     ??_FVR_Initialize:	
  8184                           ; 1 bytes @ 0x0
  8185                           
  8186  0020                     ??_TMR5_Initialize:	
  8187                           ; 1 bytes @ 0x0
  8188                           
  8189  0020                     ??_TMR0_Initialize:	
  8190                           ; 1 bytes @ 0x0
  8191                           
  8192  0020                     ?_DATAEE_ReadByte:	
  8193                           ; 1 bytes @ 0x0
  8194                           
  8195  0020                     ?_TMR1_SetInterruptHandler:	
  8196                           ; 1 bytes @ 0x0
  8197                           
  8198  0020                     ??_TxDeviceDisable:	
  8199                           ; 1 bytes @ 0x0
  8200                           
  8201  0020                     ?_handler_read_holding_registers:	
  8202                           ; 1 bytes @ 0x0
  8203                           
  8204  0020                     ?_handler_read_input_registers:	
  8205                           ; 1 bytes @ 0x0
  8206                           
  8207  0020                     ?_handle_write_single_coil:	
  8208                           ; 1 bytes @ 0x0
  8209                           
  8210  0020                     ??_check_error_modbus:	
  8211                           ; 1 bytes @ 0x0
  8212                           
  8213  0020                     ?_m_memset:	
  8214                           ; 1 bytes @ 0x0
  8215                           
  8216  0020                     ??_TxDeviceEnable:	
  8217                           ; 1 bytes @ 0x0
  8218                           
  8219  0020                     ?__Exit:	
  8220                           ; 1 bytes @ 0x0
  8221                           
  8222  0020                     ??_ADCC_Initialize:	
  8223                           ; 1 bytes @ 0x0
  8224                           
  8225  0020                     ?_setBaudRateEUSART1:	
  8226                           ; 1 bytes @ 0x0
  8227                           
  8228  0020                     ??_EUSART1_is_tx_ready:	
  8229                           ; 1 bytes @ 0x0
  8230                           
  8231  0020                     ??_EUSART1_is_tx_done:	
  8232                           ; 1 bytes @ 0x0
  8233                           
  8234  0020                     ??_EUSART1_Read:	
  8235                           ; 1 bytes @ 0x0
  8236                           
  8237  0020                     ??_EUSART1_Write:	
  8238                           ; 1 bytes @ 0x0
  8239                           
  8240  0020                     ??_UART_ClearBuffer:	
  8241                           ; 1 bytes @ 0x0
  8242                           
  8243  0020                     ??_FVR_IsOutputReady:	
  8244                           ; 1 bytes @ 0x0
  8245                           
  8246  0020                     ??_TMR0_StartTimer:	
  8247                           ; 1 bytes @ 0x0
  8248                           
  8249  0020                     ??_TMR0_HasOverflowOccured:	
  8250                           ; 1 bytes @ 0x0
  8251                           
  8252  0020                     ??_TMR5_StartTimer:	
  8253                           ; 1 bytes @ 0x0
  8254                           
  8255  0020                     ??_TMR5_StopTimer:	
  8256                           ; 1 bytes @ 0x0
  8257                           
  8258  0020                     ?_DATAEE_WriteByte:	
  8259                           ; 1 bytes @ 0x0
  8260                           
  8261  0020                     ??_get_1:	
  8262                           ; 1 bytes @ 0x0
  8263                           
  8264  0020                     ?_put_1:	
  8265                           ; 1 bytes @ 0x0
  8266                           
  8267  0020                     ?_put_2:	
  8268                           ; 1 bytes @ 0x0
  8269                           
  8270  0020                     ??_msg_buf_reset:	
  8271                           ; 1 bytes @ 0x0
  8272                           
  8273  0020                     ?_call:	
  8274                           ; 1 bytes @ 0x0
  8275                           
  8276  0020                     ?_ADCC_GetSingleConversion:	
  8277                           ; 1 bytes @ 0x0
  8278                           
  8279  0020                     ?_TMR5_ReadTimer:	
  8280                           ; 2 bytes @ 0x0
  8281                           
  8282  0020                     ?_get_2:	
  8283                           ; 2 bytes @ 0x0
  8284                           
  8285  0020                     ?_nmbs_crc_calc:	
  8286                           ; 2 bytes @ 0x0
  8287                           
  8288  0020                     _EUSART1_is_tx_ready$633:	
  8289                           ; 2 bytes @ 0x0
  8290                           
  8291  0020                     EUSART1_Write@txData:	
  8292                           ; 1 bytes @ 0x0
  8293                           
  8294  0020                     put_1@data:	
  8295                           ; 1 bytes @ 0x0
  8296                           
  8297  0020                     msg_buf_reset@nmbs:	
  8298                           ; 1 bytes @ 0x0
  8299                           
  8300  0020                     EUSART1_SetFramingErrorHandler@interruptHandler:	
  8301                           ; 1 bytes @ 0x0
  8302                           
  8303  0020                     EUSART1_SetOverrunErrorHandler@interruptHandler:	
  8304                           ; 2 bytes @ 0x0
  8305                           
  8306  0020                     EUSART1_SetErrorHandler@interruptHandler:	
  8307                           ; 2 bytes @ 0x0
  8308                           
  8309  0020                     EUSART1_SetRxInterruptHandler@interruptHandler:	
  8310                           ; 2 bytes @ 0x0
  8311                           
  8312  0020                     DATAEE_WriteByte@bAdd:	
  8313                           ; 2 bytes @ 0x0
  8314                           
  8315  0020                     DATAEE_ReadByte@bAdd:	
  8316                           ; 2 bytes @ 0x0
  8317                           
  8318  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  8319                           ; 2 bytes @ 0x0
  8320                           
  8321  0020                     handle_write_single_coil@address:	
  8322                           ; 2 bytes @ 0x0
  8323                           
  8324  0020                     handler_read_input_registers@address:	
  8325                           ; 2 bytes @ 0x0
  8326                           
  8327  0020                     handler_read_holding_registers@address:	
  8328                           ; 2 bytes @ 0x0
  8329                           
  8330  0020                     put_2@data:	
  8331                           ; 2 bytes @ 0x0
  8332                           
  8333  0020                     m_memset@s:	
  8334                           ; 2 bytes @ 0x0
  8335                           
  8336  0020                     __Exit@ec:	
  8337                           ; 2 bytes @ 0x0
  8338                           
  8339  0020                     call@p:	
  8340                           ; 2 bytes @ 0x0
  8341                           
  8342  0020                     setBaudRateEUSART1@baudRate:	
  8343                           ; 2 bytes @ 0x0
  8344                           
  8345  0020                     nmbs_crc_calc@length:	
  8346                           ; 4 bytes @ 0x0
  8347                           
  8348                           
  8349                           ; 4 bytes @ 0x0
  8350  0020                     	ds	1
  8351  0021                     ??_put_1:
  8352  0021                     ??_msg_state_reset:	
  8353                           ; 1 bytes @ 0x1
  8354                           
  8355  0021                     ?_write_serial:	
  8356                           ; 1 bytes @ 0x1
  8357                           
  8358  0021                     EUSART1_Read@readValue:	
  8359                           ; 4 bytes @ 0x1
  8360                           
  8361  0021                     write_serial@buf:	
  8362                           ; 1 bytes @ 0x1
  8363                           
  8364  0021                     msg_state_reset@nmbs:	
  8365                           ; 1 bytes @ 0x1
  8366                           
  8367                           
  8368                           ; 1 bytes @ 0x1
  8369  0021                     	ds	1
  8370  0022                     ??_EUSART1_SetRxInterruptHandler:
  8371  0022                     ??_EUSART1_SetFramingErrorHandler:	
  8372                           ; 1 bytes @ 0x2
  8373                           
  8374  0022                     ??_EUSART1_SetOverrunErrorHandler:	
  8375                           ; 1 bytes @ 0x2
  8376                           
  8377  0022                     ??_EUSART1_SetErrorHandler:	
  8378                           ; 1 bytes @ 0x2
  8379                           
  8380  0022                     ??_TMR1_Initialize:	
  8381                           ; 1 bytes @ 0x2
  8382                           
  8383  0022                     ??_DATAEE_ReadByte:	
  8384                           ; 1 bytes @ 0x2
  8385                           
  8386  0022                     ??_TMR1_SetInterruptHandler:	
  8387                           ; 1 bytes @ 0x2
  8388                           
  8389  0022                     ??___funcs_on_exit:	
  8390                           ; 1 bytes @ 0x2
  8391                           
  8392  0022                     ??__Exit:	
  8393                           ; 1 bytes @ 0x2
  8394                           
  8395  0022                     ??_ADCC_GetSingleConversion:	
  8396                           ; 1 bytes @ 0x2
  8397                           
  8398  0022                     ??_EUSART1_Initialize:	
  8399                           ; 1 bytes @ 0x2
  8400                           
  8401  0022                     ??_SYSTEM_Initialize:	
  8402                           ; 1 bytes @ 0x2
  8403                           
  8404  0022                     ??_TMR5_ReadTimer:	
  8405                           ; 1 bytes @ 0x2
  8406                           
  8407  0022                     ??_get_2:	
  8408                           ; 1 bytes @ 0x2
  8409                           
  8410  0022                     ??_put_2:	
  8411                           ; 1 bytes @ 0x2
  8412                           
  8413  0022                     ??_call:	
  8414                           ; 1 bytes @ 0x2
  8415                           
  8416  0022                     ?_DATAEE_ReadWord:	
  8417                           ; 1 bytes @ 0x2
  8418                           
  8419  0022                     ?_read_serial:	
  8420                           ; 2 bytes @ 0x2
  8421                           
  8422  0022                     ADCC_GetSingleConversion@channel:	
  8423                           ; 4 bytes @ 0x2
  8424                           
  8425  0022                     DATAEE_WriteByte@bData:	
  8426                           ; 1 bytes @ 0x2
  8427                           
  8428  0022                     read_serial@buf:	
  8429                           ; 1 bytes @ 0x2
  8430                           
  8431  0022                     handle_write_single_coil@coils:	
  8432                           ; 1 bytes @ 0x2
  8433                           
  8434  0022                     get_1@result:	
  8435                           ; 1 bytes @ 0x2
  8436                           
  8437  0022                     DATAEE_ReadWord@bAdd:	
  8438                           ; 1 bytes @ 0x2
  8439                           
  8440  0022                     write_serial@count:	
  8441                           ; 2 bytes @ 0x2
  8442                           
  8443  0022                     handler_read_input_registers@quantity:	
  8444                           ; 2 bytes @ 0x2
  8445                           
  8446  0022                     handler_read_holding_registers@quantity:	
  8447                           ; 2 bytes @ 0x2
  8448                           
  8449  0022                     m_memset@c:	
  8450                           ; 2 bytes @ 0x2
  8451                           
  8452                           
  8453                           ; 2 bytes @ 0x2
  8454  0022                     	ds	1
  8455  0023                     ??_DATAEE_WriteByte:
  8456  0023                     ?_getADCData:	
  8457                           ; 1 bytes @ 0x3
  8458                           
  8459  0023                     DATAEE_WriteByte@GIEBitValue:	
  8460                           ; 2 bytes @ 0x3
  8461                           
  8462  0023                     getADCData@sensorSelection:	
  8463                           ; 1 bytes @ 0x3
  8464                           
  8465  0023                     handle_write_single_coil@unit_id:	
  8466                           ; 1 bytes @ 0x3
  8467                           
  8468  0023                     get_1@nmbs:	
  8469                           ; 1 bytes @ 0x3
  8470                           
  8471  0023                     put_1@nmbs:	
  8472                           ; 1 bytes @ 0x3
  8473                           
  8474  0023                     read_serial@count:	
  8475                           ; 1 bytes @ 0x3
  8476                           
  8477                           
  8478                           ; 2 bytes @ 0x3
  8479  0023                     	ds	1
  8480  0024                     ??_setBaudRateEUSART1:
  8481  0024                     ?_DATAEE_WriteWord:	
  8482                           ; 1 bytes @ 0x4
  8483                           
  8484  0024                     ??_DATAEE_ReadWord:	
  8485                           ; 1 bytes @ 0x4
  8486                           
  8487  0024                     ??_nmbs_crc_calc:	
  8488                           ; 1 bytes @ 0x4
  8489                           
  8490  0024                     handle_write_single_coil@arg:	
  8491                           ; 1 bytes @ 0x4
  8492                           
  8493  0024                     handler_read_input_registers@registers_out:	
  8494                           ; 1 bytes @ 0x4
  8495                           
  8496  0024                     handler_read_holding_registers@registers_out:	
  8497                           ; 1 bytes @ 0x4
  8498                           
  8499  0024                     put_2@nmbs:	
  8500                           ; 1 bytes @ 0x4
  8501                           
  8502  0024                     DATAEE_WriteWord@bAdd:	
  8503                           ; 1 bytes @ 0x4
  8504                           
  8505  0024                     m_memset@len:	
  8506                           ; 2 bytes @ 0x4
  8507                           
  8508  0024                     write_serial@byte_timeout_ms:	
  8509                           ; 2 bytes @ 0x4
  8510                           
  8511                           
  8512                           ; 4 bytes @ 0x4
  8513  0024                     	ds	1
  8514  0025                     ??_getADCData:
  8515  0025                     ??_handle_write_single_coil:	
  8516                           ; 1 bytes @ 0x5
  8517                           
  8518  0025                     ?_put_msg_header:	
  8519                           ; 1 bytes @ 0x5
  8520                           
  8521  0025                     handler_read_input_registers@unit_id:	
  8522                           ; 1 bytes @ 0x5
  8523                           
  8524  0025                     handler_read_holding_registers@unit_id:	
  8525                           ; 1 bytes @ 0x5
  8526                           
  8527  0025                     put_msg_header@data_length:	
  8528                           ; 1 bytes @ 0x5
  8529                           
  8530  0025                     read_serial@byte_timeout_ms:	
  8531                           ; 2 bytes @ 0x5
  8532                           
  8533                           
  8534                           ; 4 bytes @ 0x5
  8535  0025                     	ds	1
  8536  0026                     ??_m_memset:
  8537  0026                     handler_read_input_registers@arg:	
  8538                           ; 1 bytes @ 0x6
  8539                           
  8540  0026                     handler_read_holding_registers@arg:	
  8541                           ; 1 bytes @ 0x6
  8542                           
  8543  0026                     DATAEE_WriteWord@bData:	
  8544                           ; 1 bytes @ 0x6
  8545                           
  8546  0026                     getADCData@result:	
  8547                           ; 2 bytes @ 0x6
  8548                           
  8549  0026                     m_memset@p:	
  8550                           ; 2 bytes @ 0x6
  8551                           
  8552  0026                     ___funcs_on_exit@func:	
  8553                           ; 2 bytes @ 0x6
  8554                           
  8555                           
  8556                           ; 2 bytes @ 0x6
  8557  0026                     	ds	1
  8558  0027                     ??_handler_read_holding_registers:
  8559  0027                     ??_handler_read_input_registers:	
  8560                           ; 1 bytes @ 0x7
  8561                           
  8562  0027                     ??_put_msg_header:	
  8563                           ; 1 bytes @ 0x7
  8564                           
  8565  0027                     TMR5_ReadTimer@readVal:	
  8566                           ; 1 bytes @ 0x7
  8567                           
  8568                           
  8569                           ; 2 bytes @ 0x7
  8570  0027                     	ds	1
  8571  0028                     ??_default_values_register:
  8572  0028                     ??_DATAEE_WriteWord:	
  8573                           ; 1 bytes @ 0x8
  8574                           
  8575  0028                     ?_nmbs_create:	
  8576                           ; 1 bytes @ 0x8
  8577                           
  8578  0028                     getADCData@channel:	
  8579                           ; 1 bytes @ 0x8
  8580                           
  8581  0028                     write_serial@arg:	
  8582                           ; 1 bytes @ 0x8
  8583                           
  8584  0028                     default_values_register@registers:	
  8585                           ; 1 bytes @ 0x8
  8586                           
  8587  0028                     nmbs_create@platform_conf:	
  8588                           ; 1 bytes @ 0x8
  8589                           
  8590  0028                     nmbs_crc_calc@data:	
  8591                           ; 1 bytes @ 0x8
  8592                           
  8593  0028                     put_msg_header@nmbs:	
  8594                           ; 1 bytes @ 0x8
  8595                           
  8596  0028                     ___funcs_on_exit@arg:	
  8597                           ; 1 bytes @ 0x8
  8598                           
  8599                           
  8600                           ; 2 bytes @ 0x8
  8601  0028                     	ds	1
  8602  0029                     ??_write_serial:
  8603  0029                     ?_is_a_new_value:	
  8604                           ; 1 bytes @ 0x9
  8605                           
  8606  0029                     ??_nmbs_create:	
  8607                           ; 1 bytes @ 0x9
  8608                           
  8609  0029                     ?_put_res_header:	
  8610                           ; 1 bytes @ 0x9
  8611                           
  8612  0029                     TMR5_ReadTimer@readValHigh:	
  8613                           ; 1 bytes @ 0x9
  8614                           
  8615  0029                     DATAEE_ReadWord@low_byte:	
  8616                           ; 1 bytes @ 0x9
  8617                           
  8618  0029                     is_a_new_value@actual_regs:	
  8619                           ; 1 bytes @ 0x9
  8620                           
  8621  0029                     read_serial@arg:	
  8622                           ; 1 bytes @ 0x9
  8623                           
  8624  0029                     get_2@result:	
  8625                           ; 1 bytes @ 0x9
  8626                           
  8627  0029                     put_res_header@data_length:	
  8628                           ; 2 bytes @ 0x9
  8629                           
  8630  0029                     nmbs_crc_calc@i:	
  8631                           ; 2 bytes @ 0x9
  8632                           
  8633                           
  8634                           ; 4 bytes @ 0x9
  8635  0029                     	ds	1
  8636  002A                     ??_read_serial:
  8637  002A                     ?_exit:	
  8638                           ; 1 bytes @ 0xA
  8639                           
  8640  002A                     TMR5_ReadTimer@readValLow:	
  8641                           ; 1 bytes @ 0xA
  8642                           
  8643  002A                     DATAEE_ReadWord@high_byte:	
  8644                           ; 1 bytes @ 0xA
  8645                           
  8646  002A                     is_a_new_value@nmbs:	
  8647                           ; 1 bytes @ 0xA
  8648                           
  8649  002A                     handler_read_input_registers@server_registers:	
  8650                           ; 1 bytes @ 0xA
  8651                           
  8652  002A                     handler_read_holding_registers@server_registers:	
  8653                           ; 1 bytes @ 0xA
  8654                           
  8655  002A                     exit@code:	
  8656                           ; 1 bytes @ 0xA
  8657                           
  8658  002A                     write_serial@number_of_byte_send:	
  8659                           ; 2 bytes @ 0xA
  8660                           
  8661                           
  8662                           ; 4 bytes @ 0xA
  8663  002A                     	ds	1
  8664  002B                     ??_is_a_new_value:
  8665  002B                     ??_put_res_header:	
  8666                           ; 1 bytes @ 0xB
  8667                           
  8668  002B                     ?_getCount:	
  8669                           ; 1 bytes @ 0xB
  8670                           
  8671  002B                     get_2@nmbs:	
  8672                           ; 2 bytes @ 0xB
  8673                           
  8674  002B                     nmbs_create@nmbs:	
  8675                           ; 1 bytes @ 0xB
  8676                           
  8677  002B                     put_res_header@nmbs:	
  8678                           ; 1 bytes @ 0xB
  8679                           
  8680  002B                     _handle_write_single_coil$1975:	
  8681                           ; 1 bytes @ 0xB
  8682                           
  8683  002B                     handler_read_input_registers@i:	
  8684                           ; 2 bytes @ 0xB
  8685                           
  8686  002B                     handler_read_holding_registers@i:	
  8687                           ; 2 bytes @ 0xB
  8688                           
  8689                           
  8690                           ; 2 bytes @ 0xB
  8691  002B                     	ds	1
  8692  002C                     ?_nmbs_server_create:
  8693  002C                     ??_exit:	
  8694                           ; 1 bytes @ 0xC
  8695                           
  8696  002C                     nmbs_server_create@address_rtu:	
  8697                           ; 1 bytes @ 0xC
  8698                           
  8699                           
  8700                           ; 1 bytes @ 0xC
  8701  002C                     	ds	1
  8702  002D                     ??_getCount:
  8703  002D                     handle_write_single_coil@server_coils:	
  8704                           ; 1 bytes @ 0xD
  8705                           
  8706  002D                     nmbs_server_create@platform_conf:	
  8707                           ; 1 bytes @ 0xD
  8708                           
  8709  002D                     getCount@result:	
  8710                           ; 1 bytes @ 0xD
  8711                           
  8712  002D                     nmbs_crc_calc@j:	
  8713                           ; 2 bytes @ 0xD
  8714                           
  8715                           
  8716                           ; 2 bytes @ 0xD
  8717  002D                     	ds	1
  8718  002E                     read_serial@c:
  8719  002E                     nmbs_server_create@callbacks:	
  8720                           ; 1 bytes @ 0xE
  8721                           
  8722  002E                     write_serial@i:	
  8723                           ; 1 bytes @ 0xE
  8724                           
  8725                           
  8726                           ; 2 bytes @ 0xE
  8727  002E                     	ds	1
  8728  002F                     ??_nmbs_server_create:
  8729  002F                     is_a_new_value@registers:	
  8730                           ; 1 bytes @ 0xF
  8731                           
  8732  002F                     nmbs_crc_calc@crc:	
  8733                           ; 1 bytes @ 0xF
  8734                           
  8735  002F                     read_serial@charCount:	
  8736                           ; 2 bytes @ 0xF
  8737                           
  8738                           
  8739                           ; 4 bytes @ 0xF
  8740  002F                     	ds	1
  8741  0030                     ?_send:
  8742  0030                     send@count:	
  8743                           ; 1 bytes @ 0x10
  8744                           
  8745                           
  8746                           ; 2 bytes @ 0x10
  8747  0030                     	ds	1
  8748  0031                     nmbs_server_create@ret:
  8749                           
  8750                           ; 1 bytes @ 0x11
  8751  0031                     	ds	1
  8752  0032                     ??_send:
  8753  0032                     nmbs_server_create@nmbs:	
  8754                           ; 1 bytes @ 0x12
  8755                           
  8756                           
  8757                           ; 1 bytes @ 0x12
  8758  0032                     	ds	1
  8759  0033                     ?_recv:
  8760  0033                     recv@count:	
  8761                           ; 1 bytes @ 0x13
  8762                           
  8763                           
  8764                           ; 2 bytes @ 0x13
  8765  0033                     	ds	2
  8766  0035                     ??_recv:
  8767                           
  8768                           ; 1 bytes @ 0x15
  8769  0035                     	ds	2
  8770  0037                     send@ret:
  8771                           
  8772                           ; 4 bytes @ 0x17
  8773  0037                     	ds	1
  8774  0038                     recv@ret:
  8775                           
  8776                           ; 1 bytes @ 0x18
  8777  0038                     	ds	1
  8778  0039                     recv@nmbs:
  8779                           
  8780                           ; 1 bytes @ 0x19
  8781  0039                     	ds	1
  8782  003A                     ??_recv_msg_footer:
  8783  003A                     ?_recv_msg_header:	
  8784                           ; 1 bytes @ 0x1A
  8785                           
  8786  003A                     recv_msg_header@first_byte_received:	
  8787                           ; 1 bytes @ 0x1A
  8788                           
  8789                           
  8790                           ; 1 bytes @ 0x1A
  8791  003A                     	ds	1
  8792  003B                     ??_recv_msg_header:
  8793  003B                     send@nmbs:	
  8794                           ; 1 bytes @ 0x1B
  8795                           
  8796                           
  8797                           ; 1 bytes @ 0x1B
  8798  003B                     	ds	1
  8799  003C                     ??_send_msg:
  8800  003C                     recv_msg_header@err:	
  8801                           ; 1 bytes @ 0x1C
  8802                           
  8803  003C                     recv_msg_footer@crc:	
  8804                           ; 1 bytes @ 0x1C
  8805                           
  8806                           
  8807                           ; 2 bytes @ 0x1C
  8808  003C                     	ds	1
  8809  003D                     recv_msg_header@nmbs:
  8810                           
  8811                           ; 1 bytes @ 0x1D
  8812  003D                     	ds	1
  8813  003E                     ?_recv_req_header:
  8814  003E                     recv_req_header@first_byte_received:	
  8815                           ; 1 bytes @ 0x1E
  8816                           
  8817  003E                     recv_msg_footer@recv_crc:	
  8818                           ; 1 bytes @ 0x1E
  8819                           
  8820  003E                     send_msg@crc:	
  8821                           ; 2 bytes @ 0x1E
  8822                           
  8823                           
  8824                           ; 2 bytes @ 0x1E
  8825  003E                     	ds	1
  8826  003F                     ??_recv_req_header:
  8827                           
  8828                           ; 1 bytes @ 0x1F
  8829  003F                     	ds	1
  8830  0040                     recv_msg_footer@err:
  8831  0040                     send_msg@err:	
  8832                           ; 1 bytes @ 0x20
  8833                           
  8834                           
  8835                           ; 1 bytes @ 0x20
  8836  0040                     	ds	1
  8837  0041                     recv_msg_footer@nmbs:
  8838  0041                     send_msg@nmbs:	
  8839                           ; 1 bytes @ 0x21
  8840                           
  8841  0041                     recv_req_header@err:	
  8842                           ; 1 bytes @ 0x21
  8843                           
  8844                           
  8845                           ; 1 bytes @ 0x21
  8846  0041                     	ds	1
  8847  0042                     ?_send_exception_msg:
  8848  0042                     ??_recv_res_header:	
  8849                           ; 1 bytes @ 0x22
  8850                           
  8851  0042                     recv_req_header@nmbs:	
  8852                           ; 1 bytes @ 0x22
  8853                           
  8854  0042                     send_exception_msg@exception:	
  8855                           ; 1 bytes @ 0x22
  8856                           
  8857                           
  8858                           ; 1 bytes @ 0x22
  8859  0042                     	ds	1
  8860  0043                     ??_send_exception_msg:
  8861                           
  8862                           ; 1 bytes @ 0x23
  8863  0043                     	ds	1
  8864  0044                     send_exception_msg@nmbs:
  8865  0044                     recv_res_header@req_transaction_id:	
  8866                           ; 1 bytes @ 0x24
  8867                           
  8868                           
  8869                           ; 2 bytes @ 0x24
  8870  0044                     	ds	2
  8871  0046                     recv_res_header@req_unit_id:
  8872                           
  8873                           ; 1 bytes @ 0x26
  8874  0046                     	ds	1
  8875  0047                     recv_res_header@first_byte_received:
  8876                           
  8877                           ; 1 bytes @ 0x27
  8878  0047                     	ds	1
  8879  0048                     recv_res_header@req_fc:
  8880                           
  8881                           ; 1 bytes @ 0x28
  8882  0048                     	ds	1
  8883  0049                     recv_res_header@exception:
  8884                           
  8885                           ; 1 bytes @ 0x29
  8886  0049                     	ds	1
  8887  004A                     recv_res_header@err:
  8888                           
  8889                           ; 1 bytes @ 0x2A
  8890  004A                     	ds	1
  8891  004B                     recv_res_header@nmbs:
  8892                           
  8893                           ; 1 bytes @ 0x2B
  8894  004B                     	ds	1
  8895  004C                     ?_recv_read_registers_res:
  8896  004C                     ?_recv_write_single_coil_res:	
  8897                           ; 1 bytes @ 0x2C
  8898                           
  8899  004C                     ?_recv_write_single_register_res:	
  8900                           ; 1 bytes @ 0x2C
  8901                           
  8902  004C                     recv_read_registers_res@quantity:	
  8903                           ; 1 bytes @ 0x2C
  8904                           
  8905  004C                     recv_write_single_coil_res@address:	
  8906                           ; 2 bytes @ 0x2C
  8907                           
  8908  004C                     recv_write_single_register_res@address:	
  8909                           ; 2 bytes @ 0x2C
  8910                           
  8911                           
  8912                           ; 2 bytes @ 0x2C
  8913  004C                     	ds	2
  8914  004E                     recv_read_registers_res@registers:
  8915  004E                     recv_write_single_coil_res@value_req:	
  8916                           ; 1 bytes @ 0x2E
  8917                           
  8918  004E                     recv_write_single_register_res@value_req:	
  8919                           ; 2 bytes @ 0x2E
  8920                           
  8921                           
  8922                           ; 2 bytes @ 0x2E
  8923  004E                     	ds	1
  8924  004F                     ??_recv_read_registers_res:
  8925                           
  8926                           ; 1 bytes @ 0x2F
  8927  004F                     	ds	1
  8928  0050                     ??_recv_write_single_coil_res:
  8929  0050                     ??_recv_write_single_register_res:	
  8930                           ; 1 bytes @ 0x30
  8931                           
  8932                           
  8933                           ; 1 bytes @ 0x30
  8934  0050                     	ds	1
  8935  0051                     recv_write_single_register_res@err:
  8936  0051                     recv_write_single_coil_res@address_res:	
  8937                           ; 1 bytes @ 0x31
  8938                           
  8939                           
  8940                           ; 2 bytes @ 0x31
  8941  0051                     	ds	1
  8942  0052                     recv_write_single_register_res@nmbs:
  8943                           
  8944                           ; 1 bytes @ 0x32
  8945  0052                     	ds	1
  8946  0053                     ??_handle_write_single_register@nanomodbus$F2807:
  8947  0053                     recv_read_registers_res@reg:	
  8948                           ; 1 bytes @ 0x33
  8949                           
  8950  0053                     recv_write_single_coil_res@value_res:	
  8951                           ; 2 bytes @ 0x33
  8952                           
  8953                           
  8954                           ; 2 bytes @ 0x33
  8955  0053                     	ds	2
  8956  0055                     recv_write_single_coil_res@nmbs:
  8957  0055                     handle_write_single_register@nanomodbus$F2807@err:	
  8958                           ; 1 bytes @ 0x35
  8959                           
  8960  0055                     recv_read_registers_res@i:	
  8961                           ; 1 bytes @ 0x35
  8962                           
  8963                           
  8964                           ; 2 bytes @ 0x35
  8965  0055                     	ds	1
  8966  0056                     recv_write_single_coil_res@err:
  8967  0056                     handle_write_single_register@nanomodbus$F2807@address:	
  8968                           ; 1 bytes @ 0x36
  8969                           
  8970                           
  8971                           ; 2 bytes @ 0x36
  8972  0056                     	ds	1
  8973  0057                     ??_handle_write_single_coil@nanomodbus$F2778:
  8974  0057                     recv_read_registers_res@registers_bytes:	
  8975                           ; 1 bytes @ 0x37
  8976                           
  8977                           
  8978                           ; 1 bytes @ 0x37
  8979  0057                     	ds	1
  8980  0058                     recv_read_registers_res@nmbs:
  8981  0058                     handle_write_single_register@nanomodbus$F2807@value:	
  8982                           ; 1 bytes @ 0x38
  8983                           
  8984                           
  8985                           ; 2 bytes @ 0x38
  8986  0058                     	ds	1
  8987  0059                     recv_read_registers_res@err:
  8988                           
  8989                           ; 1 bytes @ 0x39
  8990  0059                     	ds	1
  8991  005A                     ?_handle_read_registers:
  8992  005A                     handle_write_single_register@nanomodbus$F2807@nmbs:	
  8993                           ; 1 bytes @ 0x3A
  8994                           
  8995  005A                     handle_read_registers@callback:	
  8996                           ; 1 bytes @ 0x3A
  8997                           
  8998                           
  8999                           ; 2 bytes @ 0x3A
  9000  005A                     	ds	1
  9001  005B                     handle_write_single_coil@nanomodbus$F2778@address:
  9002                           
  9003                           ; 2 bytes @ 0x3B
  9004  005B                     	ds	1
  9005  005C                     ??_handle_read_registers:
  9006                           
  9007                           ; 1 bytes @ 0x3C
  9008  005C                     	ds	1
  9009  005D                     handle_write_single_coil@nanomodbus$F2778@value:
  9010                           
  9011                           ; 2 bytes @ 0x3D
  9012  005D                     	ds	2
  9013  005F                     handle_write_single_coil@nanomodbus$F2778@err:
  9014                           
  9015                           ; 1 bytes @ 0x3F
  9016  005F                     	ds	1
  9017  0060                     handle_write_single_coil@nanomodbus$F2778@nmbs:
  9018                           
  9019                           ; 1 bytes @ 0x40
  9020  0060                     	ds	4
  9021  0064                     ??_handle_read_holding_registers:
  9022  0064                     ??_handle_read_input_registers:	
  9023                           ; 1 bytes @ 0x44
  9024                           
  9025  0064                     handle_read_holding_registers@nmbs:	
  9026                           ; 1 bytes @ 0x44
  9027                           
  9028  0064                     handle_read_input_registers@nmbs:	
  9029                           ; 1 bytes @ 0x44
  9030                           
  9031                           
  9032                           ; 1 bytes @ 0x44
  9033  0064                     	ds	1
  9034  0065                     ??_handle_req_fc:
  9035                           
  9036                           ; 1 bytes @ 0x45
  9037  0065                     	ds	2
  9038  0067                     handle_req_fc@err:
  9039                           
  9040                           ; 1 bytes @ 0x47
  9041  0067                     	ds	1
  9042  0068                     handle_req_fc@nmbs:
  9043                           
  9044                           ; 1 bytes @ 0x48
  9045  0068                     	ds	1
  9046  0069                     ??_nmbs_server_poll:
  9047                           
  9048                           ; 1 bytes @ 0x49
  9049  0069                     	ds	2
  9050  006B                     nmbs_server_poll@first_byte_received:
  9051                           
  9052                           ; 1 bytes @ 0x4B
  9053  006B                     	ds	1
  9054  006C                     nmbs_server_poll@nmbs:
  9055                           
  9056                           ; 1 bytes @ 0x4C
  9057  006C                     	ds	1
  9058  006D                     nmbs_server_poll@err:
  9059                           
  9060                           ; 1 bytes @ 0x4D
  9061  006D                     	ds	1
  9062                           
  9063                           	psect	maintext
  9064  01AD                     __pmaintext:	
  9065 ;;
  9066 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  9067 ;;
  9068 ;; *************** function _main *****************
  9069 ;; Defined at:
  9070 ;;		line 70 in file "main.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;		None
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;  nmbs           75    0[BANK3 ] struct nmbs_t
  9075 ;;  registers      13    0[BANK4 ] struct .
  9076 ;;  callbacks       9    4[BANK2 ] struct nmbs_callbacks
  9077 ;;  platform_con    6   13[BANK2 ] struct nmbs_platform_con
  9078 ;;  actual_regs     4    0[BANK2 ] struct .
  9079 ;;  err             1   78[BANK1 ] enum E10863
  9080 ;;  is_in_memory    1   77[BANK1 ] unsigned char 
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  1    wreg      void 
  9083 ;; Registers used:
  9084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9085 ;; Tracked objects:
  9086 ;;		On entry : B3F/0
  9087 ;;		On exit  : 3F/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9091 ;;      Locals:         0       0       2      19      75      13       0       0       0       0       0       0       
      +0       0
  9092 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;      Totals:         0       0       6      19      75      13       0       0       0       0       0       0       
      +0       0
  9094 ;;Total ram usage:      113 bytes
  9095 ;; Hardware stack levels required when called: 15
  9096 ;; This function calls:
  9097 ;;		_DATAEE_ReadByte
  9098 ;;		_DATAEE_ReadWord
  9099 ;;		_DATAEE_WriteWord
  9100 ;;		_FVR_IsOutputReady
  9101 ;;		_SYSTEM_Initialize
  9102 ;;		_TxDeviceDisable
  9103 ;;		_UART_ClearBuffer
  9104 ;;		_check_error_modbus
  9105 ;;		_default_values_register
  9106 ;;		_exit
  9107 ;;		_getADCData
  9108 ;;		_getCount
  9109 ;;		_is_a_new_value
  9110 ;;		_m_memset
  9111 ;;		_nmbs_server_create
  9112 ;;		_nmbs_server_poll
  9113 ;;		_setBaudRateEUSART1
  9114 ;; This function is called by:
  9115 ;;		Startup code after reset
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119  01AD                     _main:	
  9120                           ;psect for function _main
  9121                           
  9122                           
  9123                           ;main.c: 74:     SYSTEM_Initialize();
  9124                           
  9125                           ;incstack = 0
  9126                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9127  01AD  3189  2127  3181   	fcall	_SYSTEM_Initialize
  9128                           
  9129                           ;main.c: 75:     TxDeviceDisable();
  9130  01B0  3188  2000  3181   	fcall	_TxDeviceDisable
  9131                           
  9132                           ;main.c: 76:     (INTCONbits.GIE = 1);
  9133  01B3  178B               	bsf	11,7	;volatile
  9134                           
  9135                           ;main.c: 77:     (INTCONbits.PEIE = 1);
  9136  01B4  170B               	bsf	11,6	;volatile
  9137  01B5                     l6057:	
  9138                           ;main.c: 80:     while(!FVR_IsOutputReady());
  9139                           
  9140  01B5  3197  278C  3181   	fcall	_FVR_IsOutputReady
  9141  01B8  3A00               	xorlw	0
  9142  01B9  1903               	skipnz
  9143  01BA  29B5               	goto	l6057
  9144                           
  9145                           ;main.c: 84:     mod_bus_registers registers;;main.c: 85:     default_values_register(&r
      +                          egisters);
  9146  01BB  302D               	movlw	(low (main@registers| (0+512)))& (0+255)
  9147  01BC  318D  2565  3181   	fcall	_default_values_register
  9148                           
  9149                           ;main.c: 86:     uint8_t is_in_memory = DATAEE_ReadByte(0x7001);
  9150  01BF  3001               	movlw	1
  9151  01C0  00A0               	movwf	DATAEE_ReadByte@bAdd
  9152  01C1  3070               	movlw	112
  9153  01C2  00A1               	movwf	DATAEE_ReadByte@bAdd+1
  9154  01C3  3188  2035  3181   	fcall	_DATAEE_ReadByte
  9155  01C6  0141               	movlb	1	; select bank1
  9156  01C7  00E9               	movwf	??_main^(0+128)
  9157  01C8  0869               	movf	??_main^(0+128),w
  9158  01C9  00ED               	movwf	main@is_in_memory^(0+128)
  9159                           
  9160                           ;main.c: 89:     if (is_in_memory == 0x00)
  9161  01CA  086D               	movf	main@is_in_memory^(0+128),w
  9162  01CB  1D03               	btfss	3,2
  9163  01CC  29EC               	goto	l6067
  9164                           
  9165                           ;main.c: 90:     {;main.c: 91:         registers.server_holding_register.addr_slave = DA
      +                          TAEE_ReadWord(0x7002);
  9166  01CD  3002               	movlw	2
  9167  01CE  0140               	movlb	0	; select bank0
  9168  01CF  00A2               	movwf	DATAEE_ReadWord@bAdd
  9169  01D0  3070               	movlw	112
  9170  01D1  00A3               	movwf	DATAEE_ReadWord@bAdd+1
  9171  01D2  318A  22A0  3181   	fcall	_DATAEE_ReadWord
  9172  01D5  0823               	movf	?_DATAEE_ReadWord+1,w
  9173  01D6  0144               	movlb	4	; select bank4
  9174  01D7  00B7               	movwf	((main@registers+1)^(0+512)+9)
  9175  01D8  0140               	movlb	0	; select bank0
  9176  01D9  0822               	movf	?_DATAEE_ReadWord,w
  9177  01DA  0144               	movlb	4	; select bank4
  9178  01DB  00B6               	movwf	(main@registers^(0+512)+9)
  9179                           
  9180                           ;main.c: 92:         registers.server_holding_register.baudrate = DATAEE_ReadWord(0x7004
      +                          );
  9181  01DC  3004               	movlw	4
  9182  01DD  0140               	movlb	0	; select bank0
  9183  01DE  00A2               	movwf	DATAEE_ReadWord@bAdd
  9184  01DF  3070               	movlw	112
  9185  01E0  00A3               	movwf	DATAEE_ReadWord@bAdd+1
  9186  01E1  318A  22A0  3181   	fcall	_DATAEE_ReadWord
  9187  01E4  0823               	movf	?_DATAEE_ReadWord+1,w
  9188  01E5  0144               	movlb	4	; select bank4
  9189  01E6  00B9               	movwf	((main@registers+1)^(0+512)+11)
  9190  01E7  0140               	movlb	0	; select bank0
  9191  01E8  0822               	movf	?_DATAEE_ReadWord,w
  9192  01E9  0144               	movlb	4	; select bank4
  9193  01EA  00B8               	movwf	(main@registers^(0+512)+11)
  9194                           
  9195                           ;main.c: 93:     }
  9196  01EB  2A0B               	goto	l6069
  9197  01EC                     l6067:
  9198                           
  9199                           ;main.c: 95:     {;main.c: 96:         DATAEE_WriteWord(0x7002,registers.server_holding_
      +                          register.addr_slave);
  9200  01EC  3002               	movlw	2
  9201  01ED  0140               	movlb	0	; select bank0
  9202  01EE  00A4               	movwf	DATAEE_WriteWord@bAdd
  9203  01EF  3070               	movlw	112
  9204  01F0  00A5               	movwf	DATAEE_WriteWord@bAdd+1
  9205  01F1  0144               	movlb	4	; select bank4
  9206  01F2  0837               	movf	((main@registers+1)^(0+512)+9),w
  9207  01F3  0140               	movlb	0	; select bank0
  9208  01F4  00A7               	movwf	DATAEE_WriteWord@bData+1
  9209  01F5  0144               	movlb	4	; select bank4
  9210  01F6  0836               	movf	(main@registers^(0+512)+9),w
  9211  01F7  0140               	movlb	0	; select bank0
  9212  01F8  00A6               	movwf	DATAEE_WriteWord@bData
  9213  01F9  3188  20F4  3181   	fcall	_DATAEE_WriteWord
  9214                           
  9215                           ;main.c: 97:         DATAEE_WriteWord(0x7004,registers.server_holding_register.baudrate)
      +                          ;
  9216  01FC  3004               	movlw	4
  9217  01FD  00A4               	movwf	DATAEE_WriteWord@bAdd
  9218  01FE  3070               	movlw	112
  9219  01FF  00A5               	movwf	DATAEE_WriteWord@bAdd+1
  9220  0200  0144               	movlb	4	; select bank4
  9221  0201  0839               	movf	((main@registers+1)^(0+512)+11),w
  9222  0202  0140               	movlb	0	; select bank0
  9223  0203  00A7               	movwf	DATAEE_WriteWord@bData+1
  9224  0204  0144               	movlb	4	; select bank4
  9225  0205  0838               	movf	(main@registers^(0+512)+11),w
  9226  0206  0140               	movlb	0	; select bank0
  9227  0207  00A6               	movwf	DATAEE_WriteWord@bData
  9228  0208  3188  20F4  3181   	fcall	_DATAEE_WriteWord
  9229  020B                     l6069:
  9230                           
  9231                           ;main.c: 99:     setBaudRateEUSART1(registers.server_holding_register.baudrate);
  9232  020B  0144               	movlb	4	; select bank4
  9233  020C  0838               	movf	(main@registers^(0+512)+11),w
  9234  020D  0140               	movlb	0	; select bank0
  9235  020E  00A0               	movwf	setBaudRateEUSART1@baudRate
  9236  020F  0144               	movlb	4	; select bank4
  9237  0210  0839               	movf	((main@registers+1)^(0+512)+11),w
  9238  0211  0140               	movlb	0	; select bank0
  9239  0212  00A1               	movwf	setBaudRateEUSART1@baudRate+1
  9240  0213  01A2               	clrf	setBaudRateEUSART1@baudRate+2
  9241  0214  01A3               	clrf	setBaudRateEUSART1@baudRate+3
  9242  0215  3184  24EC  3181   	fcall	_setBaudRateEUSART1
  9243                           
  9244                           ;main.c: 101:     nmbs_t nmbs;;main.c: 103:     nmbs_platform_conf platform_conf;;main.c
      +                          : 104:     platform_conf.transport = NMBS_TRANSPORT_RTU;
  9245  0218  01DC               	clrf	main@platform_conf^(0+256)
  9246  0219  0ADC               	incf	main@platform_conf^(0+256),f
  9247                           
  9248                           ;main.c: 105:     platform_conf.read = read_serial;
  9249  021A  3024               	movlw	low _read_serial
  9250  021B  00DD               	movwf	(low ((main@platform_conf| (0+256)+1)))^0
  9251  021C  300D               	movlw	high _read_serial
  9252  021D  00DE               	movwf	((low ((main@platform_conf| (0+256)+1)))^0+1)
  9253                           
  9254                           ;main.c: 106:     platform_conf.write = write_serial;
  9255  021E  302E               	movlw	low _write_serial
  9256  021F  00DF               	movwf	(low ((main@platform_conf| (0+256)+3)))^0
  9257  0220  300E               	movlw	high _write_serial
  9258  0221  00E0               	movwf	((low ((main@platform_conf| (0+256)+3)))^0+1)
  9259                           
  9260                           ;main.c: 107:     platform_conf.arg = &(registers);
  9261  0222  302D               	movlw	(low (main@registers| (0+512)))& (0+255)
  9262  0223  0141               	movlb	1	; select bank1
  9263  0224  00E9               	movwf	??_main^(0+128)
  9264  0225  0869               	movf	??_main^(0+128),w
  9265  0226  0142               	movlb	2	; select bank2
  9266  0227  00E1               	movwf	(low ((main@platform_conf| (0+256)+5)))^0
  9267                           
  9268                           ;main.c: 109:     nmbs_callbacks callbacks;;main.c: 110:     callbacks.read_holding_regi
      +                          sters = handler_read_holding_registers;
  9269  0228  3037               	movlw	low _handler_read_holding_registers
  9270  0229  00D3               	movwf	main@callbacks^(0+256)
  9271  022A  300C               	movlw	high _handler_read_holding_registers
  9272  022B  00D4               	movwf	(main@callbacks^(0+256)+1)
  9273                           
  9274                           ;main.c: 111:     callbacks.read_input_registers = handler_read_input_registers;
  9275  022C  30FE               	movlw	low _handler_read_input_registers
  9276  022D  00D5               	movwf	(low ((main@callbacks| (0+256)+2)))^0
  9277  022E  300B               	movlw	high _handler_read_input_registers
  9278  022F  00D6               	movwf	((low ((main@callbacks| (0+256)+2)))^0+1)
  9279                           
  9280                           ;main.c: 113:     callbacks.write_single_coil = handle_write_single_coil;
  9281  0230  305E               	movlw	low _handle_write_single_coil
  9282  0231  00D7               	movwf	(low ((main@callbacks| (0+256)+4)))^0
  9283  0232  3006               	movlw	high _handle_write_single_coil
  9284  0233  00D8               	movwf	((low ((main@callbacks| (0+256)+4)))^0+1)
  9285                           
  9286                           ;main.c: 114:     callbacks.write_single_register = handle_write_single_register;
  9287  0234  3000               	movlw	0
  9288  0235  00D9               	movwf	(low ((main@callbacks| (0+256)+6)))^0
  9289  0236  3000               	movlw	0
  9290  0237  00DA               	movwf	((low ((main@callbacks| (0+256)+6)))^0+1)
  9291                           
  9292                           ;main.c: 116:     nmbs_error err = nmbs_server_create(&nmbs, registers.server_holding_re
      +                          gister.addr_slave, &platform_conf, &callbacks);
  9293  0238  0144               	movlb	4	; select bank4
  9294  0239  0836               	movf	(main@registers^(0+512)+9),w
  9295  023A  0141               	movlb	1	; select bank1
  9296  023B  00E9               	movwf	??_main^(0+128)
  9297  023C  0869               	movf	??_main^(0+128),w
  9298  023D  0140               	movlb	0	; select bank0
  9299  023E  00AC               	movwf	nmbs_server_create@address_rtu
  9300  023F  305C               	movlw	(low (main@platform_conf| (0+256)))& (0+255)
  9301  0240  0141               	movlb	1	; select bank1
  9302  0241  00EA               	movwf	(??_main+1)^(0+128)
  9303  0242  086A               	movf	(??_main+1)^(0+128),w
  9304  0243  0140               	movlb	0	; select bank0
  9305  0244  00AD               	movwf	nmbs_server_create@platform_conf
  9306  0245  3053               	movlw	(low (main@callbacks| (0+256)))& (0+255)
  9307  0246  0141               	movlb	1	; select bank1
  9308  0247  00EB               	movwf	(??_main+2)^(0+128)
  9309  0248  086B               	movf	(??_main+2)^(0+128),w
  9310  0249  0140               	movlb	0	; select bank0
  9311  024A  00AE               	movwf	nmbs_server_create@callbacks
  9312  024B  30A0               	movlw	(low (main@nmbs| (0+256)))& (0+255)
  9313  024C  318B  2358  3181   	fcall	_nmbs_server_create
  9314  024F  0141               	movlb	1	; select bank1
  9315  0250  00EC               	movwf	(??_main+3)^(0+128)
  9316  0251  086C               	movf	(??_main+3)^(0+128),w
  9317  0252  00EE               	movwf	main@err^(0+128)
  9318                           
  9319                           ;main.c: 117:     if (err != NMBS_ERROR_NONE) {
  9320  0253  086E               	movf	main@err^(0+128),w
  9321  0254  1D03               	btfss	3,2
  9322  0255                     l728:	
  9323                           ;main.c: 118:       while(1){};
  9324                           
  9325  0255  2A55               	goto	l728
  9326  0256                     l6091:
  9327                           
  9328                           ;main.c: 125:     {;main.c: 126:         actual_regs= registers.server_holding_register;
  9329  0256  3009               	movlw	9
  9330  0257  3E2D               	addlw	(low (main@registers| (0+512)))& (0+255)
  9331  0258  0086               	movwf	6
  9332  0259  3002               	movlw	2	; select bank4/5
  9333  025A  0087               	movwf	7
  9334  025B  3F40               	moviw [0]fsr1
  9335  025C  0142               	movlb	2	; select bank2
  9336  025D  00CF               	movwf	main@actual_regs^(0+256)
  9337  025E  3F41               	moviw [1]fsr1
  9338  025F  00D0               	movwf	(main@actual_regs+1)^(0+256)
  9339  0260  3F42               	moviw [2]fsr1
  9340  0261  00D1               	movwf	(main@actual_regs+2)^(0+256)
  9341  0262  3F43               	moviw [3]fsr1
  9342  0263  00D2               	movwf	(main@actual_regs+3)^(0+256)
  9343                           
  9344                           ;main.c: 127:         if(eusart1PacketFinish)
  9345  0264  0144               	movlb	4	; select bank4
  9346  0265  083A               	movf	_eusart1PacketFinish^(0+512),w	;volatile
  9347  0266  1903               	btfsc	3,2
  9348  0267  2A88               	goto	l6105
  9349                           
  9350                           ;main.c: 128:         {;main.c: 129:             eusart1PacketFinish--;
  9351  0268  3001               	movlw	1
  9352  0269  02BA               	subwf	_eusart1PacketFinish^(0+512),f	;volatile
  9353                           
  9354                           ;main.c: 131:             err = nmbs_server_poll(&nmbs);
  9355  026A  30A0               	movlw	(low (main@nmbs| (0+256)))& (0+255)
  9356  026B  3185  25F2  3181   	fcall	_nmbs_server_poll
  9357  026E  0141               	movlb	1	; select bank1
  9358  026F  00E9               	movwf	??_main^(0+128)
  9359  0270  0869               	movf	??_main^(0+128),w
  9360  0271  00EE               	movwf	main@err^(0+128)
  9361                           
  9362                           ;main.c: 133:             check_error_modbus(err);
  9363  0272  086E               	movf	main@err^(0+128),w
  9364  0273  3197  2764  3181   	fcall	_check_error_modbus
  9365                           
  9366                           ;main.c: 134:             UART_ClearBuffer();
  9367  0276  3197  2783  3181   	fcall	_UART_ClearBuffer
  9368                           
  9369                           ;main.c: 135:             is_a_new_value(&registers,&actual_regs,&nmbs);
  9370  0279  304F               	movlw	(low (main@actual_regs| (0+256)))& (0+255)
  9371  027A  00E9               	movwf	??_main^(0+128)
  9372  027B  0869               	movf	??_main^(0+128),w
  9373  027C  0140               	movlb	0	; select bank0
  9374  027D  00A9               	movwf	is_a_new_value@actual_regs
  9375  027E  30A0               	movlw	(low (main@nmbs| (0+256)))& (0+255)
  9376  027F  0141               	movlb	1	; select bank1
  9377  0280  00EA               	movwf	(??_main+1)^(0+128)
  9378  0281  086A               	movf	(??_main+1)^(0+128),w
  9379  0282  0140               	movlb	0	; select bank0
  9380  0283  00AA               	movwf	is_a_new_value@nmbs
  9381  0284  302D               	movlw	(low (main@registers| (0+512)))& (0+255)
  9382  0285  3183  2397  3181   	fcall	_is_a_new_value
  9383  0288                     l6105:
  9384                           
  9385                           ;main.c: 137:         if(((_Bool) ((registers.server_coils.coils)[(0) / 8] & (0x1 << ((0
      +                          ) % 8)))) || ((_Bool) ((registers.server_coils.coils)[(1) / 8] & (0x1 << ((1) % 8)))))
  9386  0288  0144               	movlb	4	; select bank4
  9387  0289  182D               	btfsc	main@registers^(0+512),0
  9388  028A  2A8D               	goto	l6109
  9389  028B  1CAD               	btfss	main@registers^(0+512),1
  9390  028C  2AA4               	goto	l6111
  9391  028D                     l6109:
  9392                           
  9393                           ;main.c: 138:         {;main.c: 139:             registers.server_input_register.sensor_
      +                          value1 = sensor1.sense(&sensor1.sensor_info.ADCChannel);
  9394  028D  302A               	movlw	(low ((_sensor1| (0+512)+10)))& (0+255)
  9395  028E  0141               	movlb	1	; select bank1
  9396  028F  00E9               	movwf	??_main^(0+128)
  9397  0290  0869               	movf	??_main^(0+128),w
  9398  0291  0140               	movlb	0	; select bank0
  9399  0292  00A3               	movwf	getADCData@sensorSelection
  9400  0293  300B               	movlw	11
  9401  0294  3E20               	addlw	(low (_sensor1| (0+512)))& (0+255)
  9402  0295  0086               	movwf	6
  9403  0296  3002               	movlw	2	; select bank4/5
  9404  0297  0087               	movwf	7
  9405  0298  3F41               	moviw [1]fsr1
  9406  0299  008A               	movwf	10
  9407  029A  3F40               	moviw [0]fsr1
  9408  029B  000A               	callw
  9409  029C  3181               	pagesel	$
  9410  029D  0824               	movf	?_getADCData+1,w
  9411  029E  0144               	movlb	4	; select bank4
  9412  029F  00B3               	movwf	((main@registers+1)^(0+512)+5)
  9413  02A0  0140               	movlb	0	; select bank0
  9414  02A1  0823               	movf	?_getADCData,w
  9415  02A2  0144               	movlb	4	; select bank4
  9416  02A3  00B2               	movwf	(main@registers^(0+512)+5)
  9417  02A4                     l6111:
  9418                           
  9419                           ;main.c: 141:          if(((_Bool) ((registers.server_coils.coils)[(0) / 8] & (0x1 << ((
      +                          0) % 8)))) || ((_Bool) ((registers.server_coils.coils)[(2) / 8] & (0x1 << ((2) % 8)))))
  9420  02A4  182D               	btfsc	main@registers^(0+512),0
  9421  02A5  2AA8               	goto	l6115
  9422  02A6  1D2D               	btfss	main@registers^(0+512),2
  9423  02A7  2AB2               	goto	l6117
  9424  02A8                     l6115:
  9425                           
  9426                           ;main.c: 142:         {;main.c: 143:             registers.server_input_register.sensor_
      +                          value2 = getCount();
  9427  02A8  318A  2216  3181   	fcall	_getCount
  9428  02AB  082C               	movf	?_getCount+1,w
  9429  02AC  0144               	movlb	4	; select bank4
  9430  02AD  00B5               	movwf	((main@registers+1)^(0+512)+7)
  9431  02AE  0140               	movlb	0	; select bank0
  9432  02AF  082B               	movf	?_getCount,w
  9433  02B0  0144               	movlb	4	; select bank4
  9434  02B1  00B4               	movwf	(main@registers^(0+512)+7)
  9435  02B2                     l6117:
  9436                           
  9437                           ;main.c: 145:         m_memset(registers.server_coils.coils, 0, sizeof(registers.server_
      +                          coils.coils));
  9438  02B2  302D               	movlw	low main@registers
  9439  02B3  0140               	movlb	0	; select bank0
  9440  02B4  00A0               	movwf	m_memset@s
  9441  02B5  3002               	movlw	high main@registers
  9442  02B6  00A1               	movwf	m_memset@s+1
  9443  02B7  3000               	movlw	0
  9444  02B8  00A2               	movwf	m_memset@c
  9445  02B9  00A3               	movwf	m_memset@c+1
  9446  02BA  3001               	movlw	1
  9447  02BB  00A4               	movwf	m_memset@len
  9448  02BC  3000               	movlw	0
  9449  02BD  00A5               	movwf	m_memset@len+1
  9450  02BE  3188  20DC  3181   	fcall	_m_memset
  9451  02C1  2A56               	goto	l6091
  9452  02C2                     __end_of_main:
  9453                           
  9454                           	psect	text1
  9455  05F2                     __ptext1:	
  9456 ;; *************** function _nmbs_server_poll *****************
  9457 ;; Defined at:
  9458 ;;		line 1375 in file "nanomodbus.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;  nmbs            1    wreg     PTR struct nmbs_t
  9461 ;;		 -> main@nmbs(75), 
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;  nmbs            1   76[BANK0 ] PTR struct nmbs_t
  9464 ;;		 -> main@nmbs(75), 
  9465 ;;  err             1   77[BANK0 ] enum E10802
  9466 ;;  first_byte_r    1   75[BANK0 ] _Bool 
  9467 ;; Return value:  Size  Location     Type
  9468 ;;                  1    wreg      enum E10863
  9469 ;; Registers used:
  9470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9471 ;; Tracked objects:
  9472 ;;		On entry : 3F/4
  9473 ;;		On exit  : 3F/0
  9474 ;;		Unchanged: 0/0
  9475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;Total ram usage:        5 bytes
  9481 ;; Hardware stack levels used: 1
  9482 ;; Hardware stack levels required when called: 14
  9483 ;; This function calls:
  9484 ;;		_handle_req_fc
  9485 ;;		_msg_state_reset
  9486 ;;		_read_serial
  9487 ;;		_recv_req_header
  9488 ;; This function is called by:
  9489 ;;		_main
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493  05F2                     _nmbs_server_poll:	
  9494                           ;psect for function _nmbs_server_poll
  9495                           
  9496                           
  9497                           ;incstack = 0
  9498                           ; Regs used in _nmbs_server_poll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9499                           ;nmbs_server_poll@nmbs stored from wreg
  9500  05F2  0140               	movlb	0	; select bank0
  9501  05F3  00EC               	movwf	nmbs_server_poll@nmbs
  9502                           
  9503                           ;nanomodbus.c: 1376:     msg_state_reset(nmbs);
  9504  05F4  086C               	movf	nmbs_server_poll@nmbs,w
  9505  05F5  318A  227B  3185   	fcall	_msg_state_reset
  9506                           
  9507                           ;nanomodbus.c: 1378:     _Bool first_byte_received = 0;
  9508  05F8  01EB               	clrf	nmbs_server_poll@first_byte_received
  9509                           
  9510                           ;nanomodbus.c: 1379:     nmbs_error err = recv_req_header(nmbs, &first_byte_received);
  9511  05F9  306B               	movlw	(low (nmbs_server_poll@first_byte_received| 0))& (0+255)
  9512  05FA  00E9               	movwf	??_nmbs_server_poll
  9513  05FB  0869               	movf	??_nmbs_server_poll,w
  9514  05FC  00BE               	movwf	recv_req_header@first_byte_received
  9515  05FD  086C               	movf	nmbs_server_poll@nmbs,w
  9516  05FE  318D  25A7  3185   	fcall	_recv_req_header
  9517  0601  00EA               	movwf	??_nmbs_server_poll+1
  9518  0602  086A               	movf	??_nmbs_server_poll+1,w
  9519  0603  00ED               	movwf	nmbs_server_poll@err
  9520                           
  9521                           ;nanomodbus.c: 1380:     if (err != NMBS_ERROR_NONE) {
  9522  0604  086D               	movf	nmbs_server_poll@err,w
  9523  0605  1903               	btfsc	3,2
  9524  0606  2E12               	goto	l5973
  9525                           
  9526                           ;nanomodbus.c: 1381:         if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
  9527  0607  086B               	movf	nmbs_server_poll@first_byte_received,w
  9528  0608  1D03               	btfss	3,2
  9529  0609  2E10               	goto	l5969
  9530  060A  30FD               	movlw	253
  9531  060B  066D               	xorwf	nmbs_server_poll@err,w
  9532  060C  1D03               	btfss	3,2
  9533  060D  2E10               	goto	l5969
  9534  060E                     l5965:
  9535                           
  9536                           ;nanomodbus.c: 1382:             return NMBS_ERROR_NONE;
  9537  060E  3000               	movlw	0
  9538  060F  0008               	return
  9539  0610                     l5969:
  9540                           
  9541                           ;nanomodbus.c: 1384:         return err;
  9542  0610  086D               	movf	nmbs_server_poll@err,w
  9543  0611  0008               	return
  9544  0612                     l5973:
  9545                           
  9546                           ;nanomodbus.c: 1398:     err = handle_req_fc(nmbs);
  9547  0612  086C               	movf	nmbs_server_poll@nmbs,w
  9548  0613  318C  24AA  3185   	fcall	_handle_req_fc
  9549  0616  00E9               	movwf	??_nmbs_server_poll
  9550  0617  0869               	movf	??_nmbs_server_poll,w
  9551  0618  00ED               	movwf	nmbs_server_poll@err
  9552                           
  9553                           ;nanomodbus.c: 1399:     if (err != NMBS_ERROR_NONE && !((err) > 0 && (err) < 5)) {
  9554  0619  086D               	movf	nmbs_server_poll@err,w
  9555  061A  1903               	btfsc	3,2
  9556  061B  2E0E               	goto	l5965
  9557  061C  086D               	movf	nmbs_server_poll@err,w
  9558  061D  3A80               	xorlw	128
  9559  061E  3E7F               	addlw	-129
  9560  061F  1C03               	skipc
  9561  0620  2E26               	goto	l5981
  9562  0621  086D               	movf	nmbs_server_poll@err,w
  9563  0622  3A80               	xorlw	128
  9564  0623  3E7B               	addlw	-133
  9565  0624  1C03               	skipc
  9566  0625  2E0E               	goto	l5965
  9567  0626                     l5981:
  9568                           
  9569                           ;nanomodbus.c: 1400:         if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && err !
      +                          = NMBS_ERROR_TIMEOUT && nmbs->msg.ignored) {
  9570  0626  086C               	movf	nmbs_server_poll@nmbs,w
  9571  0627  3E41               	addlw	65
  9572  0628  0086               	movwf	6
  9573  0629  3001               	movlw	1	; select bank2/3
  9574  062A  0087               	movwf	7
  9575  062B  0301               	decf	1,w
  9576  062C  1D03               	btfss	3,2
  9577  062D  2E10               	goto	l5969
  9578  062E  30FD               	movlw	253
  9579  062F  066D               	xorwf	nmbs_server_poll@err,w
  9580  0630  1903               	btfsc	3,2
  9581  0631  2E10               	goto	l5969
  9582  0632  086C               	movf	nmbs_server_poll@nmbs,w
  9583  0633  3E37               	addlw	55
  9584  0634  0086               	movwf	6
  9585  0635  3001               	movlw	1	; select bank2/3
  9586  0636  0087               	movwf	7
  9587  0637  0801               	movf	1,w
  9588  0638  1903               	btfsc	3,2
  9589  0639  2E10               	goto	l5969
  9590                           
  9591                           ;nanomodbus.c: 1402:             nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf
      +                          ), 0, nmbs->platform.arg);
  9592  063A  086C               	movf	nmbs_server_poll@nmbs,w
  9593  063B  00E9               	movwf	??_nmbs_server_poll
  9594  063C  0869               	movf	??_nmbs_server_poll,w
  9595  063D  00A2               	movwf	read_serial@buf
  9596  063E  3030               	movlw	48
  9597  063F  00A3               	movwf	read_serial@count
  9598  0640  3000               	movlw	0
  9599  0641  00A4               	movwf	read_serial@count+1
  9600  0642  3000               	movlw	0
  9601  0643  00A8               	movwf	read_serial@byte_timeout_ms+3
  9602  0644  3000               	movlw	0
  9603  0645  00A7               	movwf	read_serial@byte_timeout_ms+2
  9604  0646  3000               	movlw	0
  9605  0647  00A6               	movwf	read_serial@byte_timeout_ms+1
  9606  0648  3000               	movlw	0
  9607  0649  00A5               	movwf	read_serial@byte_timeout_ms
  9608  064A  086C               	movf	nmbs_server_poll@nmbs,w
  9609  064B  3E46               	addlw	70
  9610  064C  0086               	movwf	6
  9611  064D  3001               	movlw	1	; select bank2/3
  9612  064E  0087               	movwf	7
  9613  064F  0801               	movf	1,w
  9614  0650  00EA               	movwf	??_nmbs_server_poll+1
  9615  0651  086A               	movf	??_nmbs_server_poll+1,w
  9616  0652  00A9               	movwf	read_serial@arg
  9617  0653  086C               	movf	nmbs_server_poll@nmbs,w
  9618  0654  3E42               	addlw	66
  9619  0655  0086               	movwf	6
  9620  0656  3001               	movlw	1	; select bank2/3
  9621  0657  0087               	movwf	7
  9622  0658  3F41               	moviw [1]fsr1
  9623  0659  008A               	movwf	10
  9624  065A  3F40               	moviw [0]fsr1
  9625  065B  000A               	callw
  9626  065C  3185               	pagesel	$
  9627  065D  2E10               	goto	l5969
  9628  065E                     __end_of_nmbs_server_poll:
  9629                           
  9630                           	psect	text2
  9631  0DA7                     __ptext2:	
  9632 ;; *************** function _recv_req_header *****************
  9633 ;; Defined at:
  9634 ;;		line 281 in file "nanomodbus.c"
  9635 ;; Parameters:    Size  Location     Type
  9636 ;;  nmbs            1    wreg     PTR struct nmbs_t
  9637 ;;		 -> main@nmbs(75), 
  9638 ;;  first_byte_r    1   30[BANK0 ] PTR _Bool 
  9639 ;;		 -> nmbs_server_poll@first_byte_received(1), 
  9640 ;; Auto vars:     Size  Location     Type
  9641 ;;  nmbs            1   34[BANK0 ] PTR struct nmbs_t
  9642 ;;		 -> main@nmbs(75), 
  9643 ;;  err             1   33[BANK0 ] enum E10802
  9644 ;; Return value:  Size  Location     Type
  9645 ;;                  1    wreg      enum E10802
  9646 ;; Registers used:
  9647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9648 ;; Tracked objects:
  9649 ;;		On entry : 3F/0
  9650 ;;		On exit  : 3F/0
  9651 ;;		Unchanged: 0/0
  9652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9653 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;Total ram usage:        5 bytes
  9658 ;; Hardware stack levels used: 1
  9659 ;; Hardware stack levels required when called: 9
  9660 ;; This function calls:
  9661 ;;		_recv_msg_header
  9662 ;; This function is called by:
  9663 ;;		_nmbs_server_poll
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667  0DA7                     _recv_req_header:	
  9668                           ;psect for function _recv_req_header
  9669                           
  9670                           
  9671                           ;incstack = 0
  9672                           ; Regs used in _recv_req_header: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9673                           ;recv_req_header@nmbs stored from wreg
  9674  0DA7  00C2               	movwf	recv_req_header@nmbs
  9675                           
  9676                           ;nanomodbus.c: 282:     nmbs_error err = recv_msg_header(nmbs, first_byte_received);
  9677  0DA8  083E               	movf	recv_req_header@first_byte_received,w
  9678  0DA9  00BF               	movwf	??_recv_req_header
  9679  0DAA  083F               	movf	??_recv_req_header,w
  9680  0DAB  00BA               	movwf	recv_msg_header@first_byte_received
  9681  0DAC  0842               	movf	recv_req_header@nmbs,w
  9682  0DAD  318F  2707  318D   	fcall	_recv_msg_header
  9683  0DB0  00C0               	movwf	??_recv_req_header+1
  9684  0DB1  0840               	movf	??_recv_req_header+1,w
  9685  0DB2  00C1               	movwf	recv_req_header@err
  9686                           
  9687                           ;nanomodbus.c: 283:     if (err != NMBS_ERROR_NONE)
  9688  0DB3  0841               	movf	recv_req_header@err,w
  9689  0DB4  1903               	btfsc	3,2
  9690  0DB5  2DB8               	goto	l5841
  9691                           
  9692                           ;nanomodbus.c: 284:         return err;
  9693  0DB6  0841               	movf	recv_req_header@err,w
  9694  0DB7  0008               	return
  9695  0DB8                     l5841:
  9696                           
  9697                           ;nanomodbus.c: 286:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
  9698  0DB8  0842               	movf	recv_req_header@nmbs,w
  9699  0DB9  3E41               	addlw	65
  9700  0DBA  0086               	movwf	6
  9701  0DBB  3001               	movlw	1	; select bank2/3
  9702  0DBC  0087               	movwf	7
  9703  0DBD  0301               	decf	1,w
  9704  0DBE  1D03               	btfss	3,2
  9705  0DBF  2DE7               	goto	l5853
  9706  0DC0  0842               	movf	recv_req_header@nmbs,w
  9707  0DC1  3E32               	addlw	50
  9708  0DC2  0086               	movwf	6
  9709  0DC3  3001               	movlw	1	; select bank2/3
  9710  0DC4  0087               	movwf	7
  9711  0DC5  0801               	movf	1,w
  9712  0DC6  1D03               	btfss	3,2
  9713  0DC7  2DCB               	goto	l5847
  9714                           
  9715                           ;nanomodbus.c: 289:             nmbs->msg.broadcast = 1;
  9716  0DC8  0842               	movf	recv_req_header@nmbs,w
  9717  0DC9  3E36               	addlw	54
  9718  0DCA  2DDB               	goto	L1
  9719  0DCB                     l5847:
  9720  0DCB  0842               	movf	recv_req_header@nmbs,w
  9721  0DCC  3E47               	addlw	71
  9722  0DCD  0086               	movwf	6
  9723  0DCE  3001               	movlw	1	; select bank2/3
  9724  0DCF  0087               	movwf	7
  9725  0DD0  0842               	movf	recv_req_header@nmbs,w
  9726  0DD1  3E32               	addlw	50
  9727  0DD2  0084               	movwf	4
  9728  0DD3  3001               	movlw	1	; select bank2/3
  9729  0DD4  0085               	movwf	5
  9730  0DD5  0800               	movf	0,w
  9731  0DD6  0601               	xorwf	1,w
  9732  0DD7  1903               	skipnz
  9733  0DD8  2DE1               	goto	l5851
  9734                           
  9735                           ;nanomodbus.c: 291:             nmbs->msg.ignored = 1;
  9736  0DD9  0842               	movf	recv_req_header@nmbs,w
  9737  0DDA  3E37               	addlw	55
  9738  0DDB                     L1:
  9739  0DDB  0086               	movwf	6
  9740  0DDC  3001               	movlw	1	; select bank2/3
  9741  0DDD  0087               	movwf	7
  9742  0DDE  0181               	clrf	1
  9743  0DDF  0A81               	incf	1,f
  9744  0DE0  2DE7               	goto	l5853
  9745  0DE1                     l5851:
  9746                           
  9747                           ;nanomodbus.c: 293:             nmbs->msg.ignored = 0;
  9748  0DE1  0842               	movf	recv_req_header@nmbs,w
  9749  0DE2  3E37               	addlw	55
  9750  0DE3  0086               	movwf	6
  9751  0DE4  3001               	movlw	1	; select bank2/3
  9752  0DE5  0087               	movwf	7
  9753  0DE6  0181               	clrf	1
  9754  0DE7                     l5853:
  9755                           
  9756                           ;nanomodbus.c: 296:     return NMBS_ERROR_NONE;
  9757  0DE7  3000               	movlw	0
  9758  0DE8  0008               	return
  9759  0DE9                     __end_of_recv_req_header:
  9760                           
  9761                           	psect	text3
  9762  0CAA                     __ptext3:	
  9763 ;; *************** function _handle_req_fc *****************
  9764 ;; Defined at:
  9765 ;;		line 1281 in file "nanomodbus.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;  nmbs            1    wreg     PTR struct nmbs_t
  9768 ;;		 -> main@nmbs(75), 
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  nmbs            1   72[BANK0 ] PTR struct nmbs_t
  9771 ;;		 -> main@nmbs(75), 
  9772 ;;  err             1   71[BANK0 ] enum E10802
  9773 ;; Return value:  Size  Location     Type
  9774 ;;                  1    wreg      enum E10802
  9775 ;; Registers used:
  9776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9777 ;; Tracked objects:
  9778 ;;		On entry : 3F/0
  9779 ;;		On exit  : 3F/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;Total ram usage:        4 bytes
  9787 ;; Hardware stack levels used: 1
  9788 ;; Hardware stack levels required when called: 13
  9789 ;; This function calls:
  9790 ;;		_handle_read_holding_registers
  9791 ;;		_handle_read_input_registers
  9792 ;;		_handle_write_single_coil@nanomodbus$F2778
  9793 ;;		_handle_write_single_register@nanomodbus$F2807
  9794 ;; This function is called by:
  9795 ;;		_nmbs_server_poll
  9796 ;; This function uses a non-reentrant model
  9797 ;;
  9798                           
  9799  0CAA                     _handle_req_fc:	
  9800                           ;psect for function _handle_req_fc
  9801                           
  9802                           
  9803                           ;incstack = 0
  9804                           ; Regs used in _handle_req_fc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9805                           ;handle_req_fc@nmbs stored from wreg
  9806  0CAA  00E8               	movwf	handle_req_fc@nmbs
  9807                           
  9808                           ;nanomodbus.c: 1284:     nmbs_error err;;nanomodbus.c: 1285:     switch (nmbs->msg.fc) {
  9809  0CAB  2CC7               	goto	l5867
  9810  0CAC                     l5859:
  9811                           
  9812                           ;nanomodbus.c: 1300:             err = handle_read_holding_registers(nmbs);
  9813  0CAC  0868               	movf	handle_req_fc@nmbs,w
  9814  0CAD  3188  2043  318C   	fcall	_handle_read_holding_registers
  9815  0CB0  2CB5               	goto	L2
  9816  0CB1                     l5861:	
  9817                           ;nanomodbus.c: 1301:             break;
  9818                           
  9819                           
  9820                           ;nanomodbus.c: 1306:             err = handle_read_input_registers(nmbs);
  9821  0CB1  0868               	movf	handle_req_fc@nmbs,w
  9822  0CB2  3188  2051  318C   	fcall	_handle_read_input_registers
  9823  0CB5                     L2:
  9824  0CB5  0140               	movlb	0	; select bank0
  9825  0CB6  2CC0               	goto	L4
  9826  0CB7                     l5863:	
  9827                           ;nanomodbus.c: 1307:             break;
  9828                           
  9829                           
  9830                           ;nanomodbus.c: 1312:             err = handle_write_single_coil(nmbs);
  9831  0CB7  0868               	movf	handle_req_fc@nmbs,w
  9832  0CB8  3182  22C2  318C   	fcall	_handle_write_single_coil@nanomodbus$F2778
  9833  0CBB  2CC0               	goto	L4
  9834  0CBC                     l5865:	
  9835                           ;nanomodbus.c: 1313:             break;
  9836                           
  9837                           
  9838                           ;nanomodbus.c: 1318:             err = handle_write_single_register(nmbs);
  9839  0CBC  0868               	movf	handle_req_fc@nmbs,w
  9840  0CBD  3186  26CA  318C   	fcall	_handle_write_single_register@nanomodbus$F2807
  9841  0CC0                     L4:
  9842  0CC0  00E5               	movwf	??_handle_req_fc
  9843  0CC1  0865               	movf	??_handle_req_fc,w
  9844  0CC2  00E7               	movwf	handle_req_fc@err
  9845                           
  9846                           ;nanomodbus.c: 1319:             break;
  9847  0CC3  2CE2               	goto	l5869
  9848  0CC4                     l1156:	
  9849                           ;nanomodbus.c: 1351:         default:
  9850                           
  9851                           
  9852                           ;nanomodbus.c: 1352:             err = NMBS_EXCEPTION_ILLEGAL_FUNCTION;
  9853  0CC4  01E7               	clrf	handle_req_fc@err
  9854  0CC5  0AE7               	incf	handle_req_fc@err,f
  9855                           
  9856                           ;nanomodbus.c: 1353:     }
  9857  0CC6  2CE2               	goto	l5869
  9858  0CC7                     l5867:
  9859  0CC7  0868               	movf	handle_req_fc@nmbs,w
  9860  0CC8  3E33               	addlw	51
  9861  0CC9  0086               	movwf	6
  9862  0CCA  3001               	movlw	1	; select bank2/3
  9863  0CCB  0087               	movwf	7
  9864  0CCC  0801               	movf	1,w
  9865  0CCD  00E5               	movwf	??_handle_req_fc
  9866  0CCE  01E6               	clrf	??_handle_req_fc+1
  9867                           
  9868                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9869                           ; Switch size 1, requested type "simple"
  9870                           ; Number of cases is 1, Range of values is 0 to 0
  9871                           ; switch strategies available:
  9872                           ; Name         Instructions Cycles
  9873                           ; simple_byte            4     3 (average)
  9874                           ; direct_byte            8     6 (fixed)
  9875                           ; jumptable            260     6 (fixed)
  9876                           ;	Chosen strategy is simple_byte
  9877  0CCF  0866               	movf	??_handle_req_fc+1,w
  9878  0CD0  3A00               	xorlw	0	; case 0
  9879  0CD1  1903               	skipnz
  9880  0CD2  2CD4               	goto	l6301
  9881  0CD3  2CC4               	goto	l1156
  9882  0CD4                     l6301:
  9883                           
  9884                           ; Switch size 1, requested type "simple"
  9885                           ; Number of cases is 4, Range of values is 3 to 6
  9886                           ; switch strategies available:
  9887                           ; Name         Instructions Cycles
  9888                           ; simple_byte           13     7 (average)
  9889                           ; direct_byte           17     9 (fixed)
  9890                           ; jumptable            263     9 (fixed)
  9891                           ;	Chosen strategy is simple_byte
  9892  0CD4  0865               	movf	??_handle_req_fc,w
  9893  0CD5  3A03               	xorlw	3	; case 3
  9894  0CD6  1903               	skipnz
  9895  0CD7  2CAC               	goto	l5859
  9896  0CD8  3A07               	xorlw	7	; case 4
  9897  0CD9  1903               	skipnz
  9898  0CDA  2CB1               	goto	l5861
  9899  0CDB  3A01               	xorlw	1	; case 5
  9900  0CDC  1903               	skipnz
  9901  0CDD  2CB7               	goto	l5863
  9902  0CDE  3A03               	xorlw	3	; case 6
  9903  0CDF  1903               	skipnz
  9904  0CE0  2CBC               	goto	l5865
  9905  0CE1  2CC4               	goto	l1156
  9906  0CE2                     l5869:
  9907                           
  9908                           ;nanomodbus.c: 1355:     return err;
  9909  0CE2  0867               	movf	handle_req_fc@err,w
  9910  0CE3  0008               	return
  9911  0CE4                     __end_of_handle_req_fc:
  9912                           
  9913                           	psect	text4
  9914  06CA                     __ptext4:	
  9915 ;; *************** function _handle_write_single_register@nanomodbus$F2807 *****************
  9916 ;; Defined at:
  9917 ;;		line 768 in file "nanomodbus.c"
  9918 ;; Parameters:    Size  Location     Type
  9919 ;;  nmbs            1    wreg     PTR struct nmbs_t
  9920 ;;		 -> main@nmbs(75), 
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;  nmbs            1   58[BANK0 ] PTR struct nmbs_t
  9923 ;;		 -> main@nmbs(75), 
  9924 ;;  value           2   56[BANK0 ] unsigned short 
  9925 ;;  address         2   54[BANK0 ] unsigned short 
  9926 ;;  err             1   53[BANK0 ] enum E10802
  9927 ;; Return value:  Size  Location     Type
  9928 ;;                  1    wreg      enum E10802
  9929 ;; Registers used:
  9930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9931 ;; Tracked objects:
  9932 ;;		On entry : 3F/0
  9933 ;;		On exit  : 3F/0
  9934 ;;		Unchanged: 0/0
  9935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9940 ;;Total ram usage:        8 bytes
  9941 ;; Hardware stack levels used: 1
  9942 ;; Hardware stack levels required when called: 11
  9943 ;; This function calls:
  9944 ;;		_get_2
  9945 ;;		_put_2
  9946 ;;		_put_res_header
  9947 ;;		_recv
  9948 ;;		_recv_msg_footer
  9949 ;;		_recv_write_single_register_res
  9950 ;;		_send_msg
  9951 ;; This function is called by:
  9952 ;;		_handle_req_fc
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956  06CA                     _handle_write_single_register@nanomodbus$F2807:	
  9957                           ;psect for function _handle_write_single_register@nanomodbus$F2807
  9958                           
  9959                           
  9960                           ;incstack = 0
  9961                           ; Regs used in _handle_write_single_register@nanomodbus$F2807: [wreg+fsr1l+fsr1h+status,
      +                          2+status,0+pclath+cstack]
  9962                           ;handle_write_single_register@nanomodbus$F2807@nmbs stored from wreg
  9963  06CA  00DA               	movwf	handle_write_single_register@nanomodbus$F2807@nmbs
  9964                           
  9965                           ;nanomodbus.c: 769:     nmbs_error err = recv(nmbs, 4);
  9966  06CB  3004               	movlw	4
  9967  06CC  00B3               	movwf	recv@count
  9968  06CD  3000               	movlw	0
  9969  06CE  00B4               	movwf	recv@count+1
  9970  06CF  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
  9971  06D0  318B  238F  3186   	fcall	_recv
  9972  06D3  00D3               	movwf	??_handle_write_single_register@nanomodbus$F2807
  9973  06D4  0853               	movf	??_handle_write_single_register@nanomodbus$F2807,w
  9974  06D5  00D5               	movwf	handle_write_single_register@nanomodbus$F2807@err
  9975                           
  9976                           ;nanomodbus.c: 773:     uint16_t address = get_2(nmbs);
  9977  06D6  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
  9978  06D7  318B  23C6  3186   	fcall	_get_2
  9979  06DA  0821               	movf	?_get_2+1,w
  9980  06DB  00D7               	movwf	handle_write_single_register@nanomodbus$F2807@address+1
  9981  06DC  0820               	movf	?_get_2,w
  9982  06DD  00D6               	movwf	handle_write_single_register@nanomodbus$F2807@address
  9983                           
  9984                           ;nanomodbus.c: 774:     uint16_t value = get_2(nmbs);
  9985  06DE  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
  9986  06DF  318B  23C6  3186   	fcall	_get_2
  9987  06E2  0821               	movf	?_get_2+1,w
  9988  06E3  00D9               	movwf	handle_write_single_register@nanomodbus$F2807@value+1
  9989  06E4  0820               	movf	?_get_2,w
  9990  06E5  00D8               	movwf	handle_write_single_register@nanomodbus$F2807@value
  9991                           
  9992                           ;nanomodbus.c: 778:     err = recv_msg_footer(nmbs);
  9993  06E6  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
  9994  06E7  318D  25E9  3186   	fcall	_recv_msg_footer
  9995  06EA  00D3               	movwf	??_handle_write_single_register@nanomodbus$F2807
  9996  06EB  0853               	movf	??_handle_write_single_register@nanomodbus$F2807,w
  9997  06EC  00D5               	movwf	handle_write_single_register@nanomodbus$F2807@err
  9998                           
  9999                           ;nanomodbus.c: 782:     if (!nmbs->msg.ignored) {
 10000  06ED  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
 10001  06EE  3E37               	addlw	55
 10002  06EF  0086               	movwf	6
 10003  06F0  3001               	movlw	1	; select bank2/3
 10004  06F1  0087               	movwf	7
 10005  06F2  0801               	movf	1,w
 10006  06F3  1D03               	btfss	3,2
 10007  06F4  2F23               	goto	l5559
 10008                           
 10009                           ;nanomodbus.c: 783:         if (nmbs->callbacks.write_single_register) {
 10010  06F5  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
 10011  06F6  3E3E               	addlw	62
 10012  06F7  0086               	movwf	6
 10013  06F8  3001               	movlw	1	; select bank2/3
 10014  06F9  0087               	movwf	7
 10015  06FA  0016               	moviw fsr1++
 10016  06FB  0401               	iorwf	1,w
 10017  06FC  1903               	btfsc	3,2
 10018  06FD  2F2F               	goto	l5563
 10019                           
 10020                           ;nanomodbus.c: 793:             if (!nmbs->msg.broadcast) {
 10021  06FE  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
 10022  06FF  3E36               	addlw	54
 10023  0700  0086               	movwf	6
 10024  0701  3001               	movlw	1	; select bank2/3
 10025  0702  0087               	movwf	7
 10026  0703  0801               	movf	1,w
 10027  0704  1D03               	btfss	3,2
 10028  0705  2F2F               	goto	l5563
 10029                           
 10030                           ;nanomodbus.c: 794:                 put_res_header(nmbs, 4);
 10031  0706  3004               	movlw	4
 10032  0707  00A9               	movwf	put_res_header@data_length
 10033  0708  3000               	movlw	0
 10034  0709  00AA               	movwf	put_res_header@data_length+1
 10035  070A  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
 10036  070B  3197  27E0  3186   	fcall	_put_res_header
 10037                           
 10038                           ;nanomodbus.c: 796:                 put_2(nmbs, address);
 10039  070E  0857               	movf	handle_write_single_register@nanomodbus$F2807@address+1,w
 10040  070F  00A1               	movwf	put_2@data+1
 10041  0710  0856               	movf	handle_write_single_register@nanomodbus$F2807@address,w
 10042  0711  00A0               	movwf	put_2@data
 10043  0712  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
 10044  0713  318A  22C7  3186   	fcall	_put_2
 10045                           
 10046                           ;nanomodbus.c: 797:                 put_2(nmbs, value);
 10047  0716  0859               	movf	handle_write_single_register@nanomodbus$F2807@value+1,w
 10048  0717  00A1               	movwf	put_2@data+1
 10049  0718  0858               	movf	handle_write_single_register@nanomodbus$F2807@value,w
 10050  0719  00A0               	movwf	put_2@data
 10051  071A  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
 10052  071B  318A  22C7  3186   	fcall	_put_2
 10053  071E  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
 10054  071F  318C  2470  3186   	fcall	_send_msg
 10055  0722  2F2F               	goto	l5563
 10056  0723                     l5559:
 10057                           
 10058                           ;nanomodbus.c: 810:         return recv_write_single_register_res(nmbs, address, value);
 10059  0723  0857               	movf	handle_write_single_register@nanomodbus$F2807@address+1,w
 10060  0724  00CD               	movwf	recv_write_single_register_res@address+1
 10061  0725  0856               	movf	handle_write_single_register@nanomodbus$F2807@address,w
 10062  0726  00CC               	movwf	recv_write_single_register_res@address
 10063  0727  0859               	movf	handle_write_single_register@nanomodbus$F2807@value+1,w
 10064  0728  00CF               	movwf	recv_write_single_register_res@value_req+1
 10065  0729  0858               	movf	handle_write_single_register@nanomodbus$F2807@value,w
 10066  072A  00CE               	movwf	recv_write_single_register_res@value_req
 10067  072B  085A               	movf	handle_write_single_register@nanomodbus$F2807@nmbs,w
 10068  072C  318A  2258         	fcall	_recv_write_single_register_res
 10069  072E  0008               	return
 10070  072F                     l5563:
 10071                           
 10072                           ;nanomodbus.c: 813:     return NMBS_ERROR_NONE;
 10073  072F  3000               	movlw	0
 10074  0730  0008               	return
 10075  0731                     __end_of_handle_write_single_register@nanomodbus$F2807:
 10076                           
 10077                           	psect	text5
 10078  0A58                     __ptext5:	
 10079 ;; *************** function _recv_write_single_register_res *****************
 10080 ;; Defined at:
 10081 ;;		line 477 in file "nanomodbus.c"
 10082 ;; Parameters:    Size  Location     Type
 10083 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10084 ;;		 -> main@nmbs(75), 
 10085 ;;  address         2   44[BANK0 ] unsigned short 
 10086 ;;  value_req       2   46[BANK0 ] unsigned short 
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;  nmbs            1   50[BANK0 ] PTR struct nmbs_t
 10089 ;;		 -> main@nmbs(75), 
 10090 ;;  value_res       2    0        unsigned short 
 10091 ;;  address_res     2    0        unsigned short 
 10092 ;;  err             1   49[BANK0 ] enum E10802
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  1    wreg      enum E10802
 10095 ;; Registers used:
 10096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10097 ;; Tracked objects:
 10098 ;;		On entry : 3F/0
 10099 ;;		On exit  : 3F/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10102 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;Total ram usage:        7 bytes
 10107 ;; Hardware stack levels used: 1
 10108 ;; Hardware stack levels required when called: 10
 10109 ;; This function calls:
 10110 ;;		_get_2
 10111 ;;		_recv
 10112 ;;		_recv_msg_footer
 10113 ;;		_recv_res_header
 10114 ;; This function is called by:
 10115 ;;		_handle_write_single_register@nanomodbus$F2807
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119  0A58                     _recv_write_single_register_res:	
 10120                           ;psect for function _recv_write_single_register_res
 10121                           
 10122                           
 10123                           ;incstack = 0
 10124                           ; Regs used in _recv_write_single_register_res: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 10125                           ;recv_write_single_register_res@nmbs stored from wreg
 10126  0A58  00D2               	movwf	recv_write_single_register_res@nmbs
 10127                           
 10128                           ;nanomodbus.c: 478:     nmbs_error err = recv_res_header(nmbs);
 10129  0A59  0852               	movf	recv_write_single_register_res@nmbs,w
 10130  0A5A  3184  244B  318A   	fcall	_recv_res_header
 10131  0A5D  00D0               	movwf	??_recv_write_single_register_res
 10132  0A5E  0850               	movf	??_recv_write_single_register_res,w
 10133  0A5F  00D1               	movwf	recv_write_single_register_res@err
 10134                           
 10135                           ;nanomodbus.c: 482:     err = recv(nmbs, 4);
 10136  0A60  3004               	movlw	4
 10137  0A61  00B3               	movwf	recv@count
 10138  0A62  3000               	movlw	0
 10139  0A63  00B4               	movwf	recv@count+1
 10140  0A64  0852               	movf	recv_write_single_register_res@nmbs,w
 10141  0A65  318B  238F  318A   	fcall	_recv
 10142  0A68  00D0               	movwf	??_recv_write_single_register_res
 10143  0A69  0850               	movf	??_recv_write_single_register_res,w
 10144  0A6A  00D1               	movwf	recv_write_single_register_res@err
 10145  0A6B  0852               	movf	recv_write_single_register_res@nmbs,w
 10146  0A6C  318B  23C6  318A   	fcall	_get_2
 10147  0A6F  0852               	movf	recv_write_single_register_res@nmbs,w
 10148  0A70  318B  23C6  318A   	fcall	_get_2
 10149                           
 10150                           ;nanomodbus.c: 490:     err = recv_msg_footer(nmbs);
 10151  0A73  0852               	movf	recv_write_single_register_res@nmbs,w
 10152  0A74  318D  25E9         	fcall	_recv_msg_footer
 10153  0A76  00D0               	movwf	??_recv_write_single_register_res
 10154  0A77  0850               	movf	??_recv_write_single_register_res,w
 10155  0A78  00D1               	movwf	recv_write_single_register_res@err
 10156                           
 10157                           ;nanomodbus.c: 500:     return NMBS_ERROR_NONE;
 10158  0A79  3000               	movlw	0
 10159  0A7A  0008               	return
 10160  0A7B                     __end_of_recv_write_single_register_res:
 10161                           
 10162                           	psect	text6
 10163  02C2                     __ptext6:	
 10164 ;; *************** function _handle_write_single_coil@nanomodbus$F2778 *****************
 10165 ;; Defined at:
 10166 ;;		line 715 in file "nanomodbus.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10169 ;;		 -> main@nmbs(75), 
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  nmbs            1   64[BANK0 ] PTR struct nmbs_t
 10172 ;;		 -> main@nmbs(75), 
 10173 ;;  val             1    0        _Bool 
 10174 ;;  value           2   61[BANK0 ] unsigned short 
 10175 ;;  address         2   59[BANK0 ] unsigned short 
 10176 ;;  err             1   63[BANK0 ] enum E10802
 10177 ;; Return value:  Size  Location     Type
 10178 ;;                  1    wreg      enum E10802
 10179 ;; Registers used:
 10180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10181 ;; Tracked objects:
 10182 ;;		On entry : 3F/0
 10183 ;;		On exit  : 3F/0
 10184 ;;		Unchanged: 0/0
 10185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10189 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10190 ;;Total ram usage:       10 bytes
 10191 ;; Hardware stack levels used: 1
 10192 ;; Hardware stack levels required when called: 11
 10193 ;; This function calls:
 10194 ;;		_get_2
 10195 ;;		_handle_write_single_coil
 10196 ;;		_put_2
 10197 ;;		_put_res_header
 10198 ;;		_recv
 10199 ;;		_recv_msg_footer
 10200 ;;		_recv_write_single_coil_res
 10201 ;;		_send_exception_msg
 10202 ;;		_send_msg
 10203 ;; This function is called by:
 10204 ;;		_handle_req_fc
 10205 ;; This function uses a non-reentrant model
 10206 ;;
 10207                           
 10208  02C2                     _handle_write_single_coil@nanomodbus$F2778:	
 10209                           ;psect for function _handle_write_single_coil@nanomodbus$F2778
 10210                           
 10211                           
 10212                           ;incstack = 0
 10213                           ; Regs used in _handle_write_single_coil@nanomodbus$F2778: [wreg+fsr1l+fsr1h+status,2+st
      +                          atus,0+pclath+cstack]
 10214                           ;handle_write_single_coil@nanomodbus$F2778@nmbs stored from wreg
 10215  02C2  00E0               	movwf	handle_write_single_coil@nanomodbus$F2778@nmbs
 10216                           
 10217                           ;nanomodbus.c: 716:     nmbs_error err = recv(nmbs, 4);
 10218  02C3  3004               	movlw	4
 10219  02C4  00B3               	movwf	recv@count
 10220  02C5  3000               	movlw	0
 10221  02C6  00B4               	movwf	recv@count+1
 10222  02C7  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10223  02C8  318B  238F  3182   	fcall	_recv
 10224  02CB  00D7               	movwf	??_handle_write_single_coil@nanomodbus$F2778
 10225  02CC  0857               	movf	??_handle_write_single_coil@nanomodbus$F2778,w
 10226  02CD  00DF               	movwf	handle_write_single_coil@nanomodbus$F2778@err
 10227                           
 10228                           ;nanomodbus.c: 717:     if (err != NMBS_ERROR_NONE)
 10229  02CE  085F               	movf	handle_write_single_coil@nanomodbus$F2778@err,w
 10230  02CF  1903               	btfsc	3,2
 10231  02D0  2AD3               	goto	l5487
 10232  02D1                     l5483:
 10233                           
 10234                           ;nanomodbus.c: 718:         return err;
 10235  02D1  085F               	movf	handle_write_single_coil@nanomodbus$F2778@err,w
 10236  02D2  0008               	return
 10237  02D3                     l5487:
 10238                           
 10239                           ;nanomodbus.c: 720:     uint16_t address = get_2(nmbs);
 10240  02D3  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10241  02D4  318B  23C6  3182   	fcall	_get_2
 10242  02D7  0821               	movf	?_get_2+1,w
 10243  02D8  00DC               	movwf	handle_write_single_coil@nanomodbus$F2778@address+1
 10244  02D9  0820               	movf	?_get_2,w
 10245  02DA  00DB               	movwf	handle_write_single_coil@nanomodbus$F2778@address
 10246                           
 10247                           ;nanomodbus.c: 721:     uint16_t value = get_2(nmbs);
 10248  02DB  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10249  02DC  318B  23C6  3182   	fcall	_get_2
 10250  02DF  0821               	movf	?_get_2+1,w
 10251  02E0  00DE               	movwf	handle_write_single_coil@nanomodbus$F2778@value+1
 10252  02E1  0820               	movf	?_get_2,w
 10253  02E2  00DD               	movwf	handle_write_single_coil@nanomodbus$F2778@value
 10254                           
 10255                           ;nanomodbus.c: 725:     err = recv_msg_footer(nmbs);
 10256  02E3  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10257  02E4  318D  25E9  3182   	fcall	_recv_msg_footer
 10258  02E7  00D7               	movwf	??_handle_write_single_coil@nanomodbus$F2778
 10259  02E8  0857               	movf	??_handle_write_single_coil@nanomodbus$F2778,w
 10260  02E9  00DF               	movwf	handle_write_single_coil@nanomodbus$F2778@err
 10261                           
 10262                           ;nanomodbus.c: 726:     if (err != NMBS_ERROR_NONE)
 10263  02EA  085F               	movf	handle_write_single_coil@nanomodbus$F2778@err,w
 10264  02EB  1D03               	btfss	3,2
 10265  02EC  2AD1               	goto	l5483
 10266                           
 10267                           ;nanomodbus.c: 729:     if (!nmbs->msg.ignored) {
 10268  02ED  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10269  02EE  3E37               	addlw	55
 10270  02EF  0086               	movwf	6
 10271  02F0  3001               	movlw	1	; select bank2/3
 10272  02F1  0087               	movwf	7
 10273  02F2  0801               	movf	1,w
 10274  02F3  1D03               	btfss	3,2
 10275  02F4  2B89               	goto	l5539
 10276                           
 10277                           ;nanomodbus.c: 730:         if (nmbs->callbacks.write_single_coil) {
 10278  02F5  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10279  02F6  3E3C               	addlw	60
 10280  02F7  0086               	movwf	6
 10281  02F8  3001               	movlw	1	; select bank2/3
 10282  02F9  0087               	movwf	7
 10283  02FA  0016               	moviw fsr1++
 10284  02FB  0401               	iorwf	1,w
 10285  02FC  1903               	btfsc	3,2
 10286  02FD  2B83               	goto	l5535
 10287                           
 10288                           ;nanomodbus.c: 731:             if (value != 0 && value != 0xFF00)
 10289  02FE  085D               	movf	handle_write_single_coil@nanomodbus$F2778@value,w
 10290  02FF  045E               	iorwf	handle_write_single_coil@nanomodbus$F2778@value+1,w
 10291  0300  1903               	btfsc	3,2
 10292  0301  2B0E               	goto	l5509
 10293  0302  0A5E               	incf	handle_write_single_coil@nanomodbus$F2778@value+1,w
 10294  0303  045D               	iorwf	handle_write_single_coil@nanomodbus$F2778@value,w
 10295  0304  1903               	btfsc	3,2
 10296  0305  2B0E               	goto	l5509
 10297                           
 10298                           ;nanomodbus.c: 732:                 return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEG
      +                          AL_DATA_VALUE);
 10299  0306  3003               	movlw	3
 10300  0307  00D7               	movwf	??_handle_write_single_coil@nanomodbus$F2778
 10301  0308  0857               	movf	??_handle_write_single_coil@nanomodbus$F2778,w
 10302  0309  00C2               	movwf	send_exception_msg@exception
 10303  030A  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10304  030B  3189  21B7         	fcall	_send_exception_msg
 10305  030D  0008               	return
 10306  030E                     l5509:
 10307                           
 10308                           ;nanomodbus.c: 734:             err = nmbs->callbacks.write_single_coil(address,value, n
      +                          mbs->msg.unit_id, nmbs->platform.arg);
 10309  030E  085C               	movf	handle_write_single_coil@nanomodbus$F2778@address+1,w
 10310  030F  00A1               	movwf	handle_write_single_coil@address+1
 10311  0310  085B               	movf	handle_write_single_coil@nanomodbus$F2778@address,w
 10312  0311  00A0               	movwf	handle_write_single_coil@address
 10313  0312  085D               	movf	handle_write_single_coil@nanomodbus$F2778@value,w
 10314  0313  045E               	iorwf	handle_write_single_coil@nanomodbus$F2778@value+1,w
 10315  0314  1903               	btfsc	3,2
 10316  0315  2B18               	goto	u3670
 10317  0316  3001               	movlw	1
 10318  0317  2B19               	goto	u3680
 10319  0318                     u3670:
 10320  0318  3000               	movlw	0
 10321  0319                     u3680:
 10322  0319  00D7               	movwf	??_handle_write_single_coil@nanomodbus$F2778
 10323  031A  0857               	movf	??_handle_write_single_coil@nanomodbus$F2778,w
 10324  031B  00A2               	movwf	handle_write_single_coil@coils
 10325  031C  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10326  031D  3E32               	addlw	50
 10327  031E  0086               	movwf	6
 10328  031F  3001               	movlw	1	; select bank2/3
 10329  0320  0087               	movwf	7
 10330  0321  0801               	movf	1,w
 10331  0322  00D8               	movwf	??_handle_write_single_coil@nanomodbus$F2778+1
 10332  0323  0858               	movf	??_handle_write_single_coil@nanomodbus$F2778+1,w
 10333  0324  00A3               	movwf	handle_write_single_coil@unit_id
 10334  0325  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10335  0326  3E46               	addlw	70
 10336  0327  0086               	movwf	6
 10337  0328  3001               	movlw	1	; select bank2/3
 10338  0329  0087               	movwf	7
 10339  032A  0801               	movf	1,w
 10340  032B  00D9               	movwf	??_handle_write_single_coil@nanomodbus$F2778+2
 10341  032C  0859               	movf	??_handle_write_single_coil@nanomodbus$F2778+2,w
 10342  032D  00A4               	movwf	handle_write_single_coil@arg
 10343  032E  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10344  032F  3E3C               	addlw	60
 10345  0330  0086               	movwf	6
 10346  0331  3001               	movlw	1	; select bank2/3
 10347  0332  0087               	movwf	7
 10348  0333  3F41               	moviw [1]fsr1
 10349  0334  008A               	movwf	10
 10350  0335  3F40               	moviw [0]fsr1
 10351  0336  000A               	callw
 10352  0337  3182               	pagesel	$
 10353  0338  00DA               	movwf	??_handle_write_single_coil@nanomodbus$F2778+3
 10354  0339  085A               	movf	??_handle_write_single_coil@nanomodbus$F2778+3,w
 10355  033A  00DF               	movwf	handle_write_single_coil@nanomodbus$F2778@err
 10356                           
 10357                           ;nanomodbus.c: 735:             if (err != NMBS_ERROR_NONE) {
 10358  033B  085F               	movf	handle_write_single_coil@nanomodbus$F2778@err,w
 10359  033C  1903               	btfsc	3,2
 10360  033D  2B58               	goto	l5525
 10361                           
 10362                           ;nanomodbus.c: 736:                 if (((err) > 0 && (err) < 5))
 10363  033E  085F               	movf	handle_write_single_coil@nanomodbus$F2778@err,w
 10364  033F  3A80               	xorlw	128
 10365  0340  3E7F               	addlw	-129
 10366  0341  1C03               	skipc
 10367  0342  2B50               	goto	l5521
 10368  0343  085F               	movf	handle_write_single_coil@nanomodbus$F2778@err,w
 10369  0344  3A80               	xorlw	128
 10370  0345  3E7B               	addlw	-133
 10371  0346  1803               	skipnc
 10372  0347  2B50               	goto	l5521
 10373                           
 10374                           ;nanomodbus.c: 737:                     return send_exception_msg(nmbs, err);
 10375  0348  085F               	movf	handle_write_single_coil@nanomodbus$F2778@err,w
 10376  0349  00D7               	movwf	??_handle_write_single_coil@nanomodbus$F2778
 10377  034A  0857               	movf	??_handle_write_single_coil@nanomodbus$F2778,w
 10378  034B  00C2               	movwf	send_exception_msg@exception
 10379  034C  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10380  034D  3189  21B7         	fcall	_send_exception_msg
 10381  034F  0008               	return
 10382  0350                     l5521:
 10383                           
 10384                           ;nanomodbus.c: 739:                 return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVE
      +                          R_DEVICE_FAILURE);
 10385  0350  3004               	movlw	4
 10386  0351  00D7               	movwf	??_handle_write_single_coil@nanomodbus$F2778
 10387  0352  0857               	movf	??_handle_write_single_coil@nanomodbus$F2778,w
 10388  0353  00C2               	movwf	send_exception_msg@exception
 10389  0354  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10390  0355  3189  21B7         	fcall	_send_exception_msg
 10391  0357  0008               	return
 10392  0358                     l5525:
 10393                           
 10394                           ;nanomodbus.c: 742:             if (!nmbs->msg.broadcast) {
 10395  0358  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10396  0359  3E36               	addlw	54
 10397  035A  0086               	movwf	6
 10398  035B  3001               	movlw	1	; select bank2/3
 10399  035C  0087               	movwf	7
 10400  035D  0801               	movf	1,w
 10401  035E  1D03               	btfss	3,2
 10402  035F  2B95               	goto	l5543
 10403                           
 10404                           ;nanomodbus.c: 743:                 put_res_header(nmbs, 4);
 10405  0360  3004               	movlw	4
 10406  0361  00A9               	movwf	put_res_header@data_length
 10407  0362  3000               	movlw	0
 10408  0363  00AA               	movwf	put_res_header@data_length+1
 10409  0364  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10410  0365  3197  27E0  3182   	fcall	_put_res_header
 10411                           
 10412                           ;nanomodbus.c: 745:                 put_2(nmbs, address);
 10413  0368  085C               	movf	handle_write_single_coil@nanomodbus$F2778@address+1,w
 10414  0369  00A1               	movwf	put_2@data+1
 10415  036A  085B               	movf	handle_write_single_coil@nanomodbus$F2778@address,w
 10416  036B  00A0               	movwf	put_2@data
 10417  036C  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10418  036D  318A  22C7  3182   	fcall	_put_2
 10419                           
 10420                           ;nanomodbus.c: 746:                 put_2(nmbs, value);
 10421  0370  085E               	movf	handle_write_single_coil@nanomodbus$F2778@value+1,w
 10422  0371  00A1               	movwf	put_2@data+1
 10423  0372  085D               	movf	handle_write_single_coil@nanomodbus$F2778@value,w
 10424  0373  00A0               	movwf	put_2@data
 10425  0374  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10426  0375  318A  22C7  3182   	fcall	_put_2
 10427                           
 10428                           ;nanomodbus.c: 749:                 err = send_msg(nmbs);
 10429  0378  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10430  0379  318C  2470  3182   	fcall	_send_msg
 10431  037C  00D7               	movwf	??_handle_write_single_coil@nanomodbus$F2778
 10432  037D  0857               	movf	??_handle_write_single_coil@nanomodbus$F2778,w
 10433  037E  00DF               	movwf	handle_write_single_coil@nanomodbus$F2778@err
 10434                           
 10435                           ;nanomodbus.c: 750:                 if (err != NMBS_ERROR_NONE)
 10436  037F  085F               	movf	handle_write_single_coil@nanomodbus$F2778@err,w
 10437  0380  1D03               	btfss	3,2
 10438  0381  2AD1               	goto	l5483
 10439  0382  2B95               	goto	l5543
 10440  0383                     l5535:
 10441                           
 10442                           ;nanomodbus.c: 755:             return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_F
      +                          UNCTION);
 10443  0383  01C2               	clrf	send_exception_msg@exception
 10444  0384  0AC2               	incf	send_exception_msg@exception,f
 10445  0385  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10446  0386  3189  21B7         	fcall	_send_exception_msg
 10447  0388  0008               	return
 10448  0389                     l5539:	
 10449                           ;nanomodbus.c: 757:     }
 10450                           
 10451                           ;nanomodbus.c: 756:         }
 10452                           
 10453                           
 10454                           ;nanomodbus.c: 759:         return recv_write_single_coil_res(nmbs, address, value);
 10455  0389  085C               	movf	handle_write_single_coil@nanomodbus$F2778@address+1,w
 10456  038A  00CD               	movwf	recv_write_single_coil_res@address+1
 10457  038B  085B               	movf	handle_write_single_coil@nanomodbus$F2778@address,w
 10458  038C  00CC               	movwf	recv_write_single_coil_res@address
 10459  038D  085E               	movf	handle_write_single_coil@nanomodbus$F2778@value+1,w
 10460  038E  00CF               	movwf	recv_write_single_coil_res@value_req+1
 10461  038F  085D               	movf	handle_write_single_coil@nanomodbus$F2778@value,w
 10462  0390  00CE               	movwf	recv_write_single_coil_res@value_req
 10463  0391  0860               	movf	handle_write_single_coil@nanomodbus$F2778@nmbs,w
 10464  0392  318E  2674         	fcall	_recv_write_single_coil_res
 10465  0394  0008               	return
 10466  0395                     l5543:
 10467                           
 10468                           ;nanomodbus.c: 762:     return NMBS_ERROR_NONE;
 10469  0395  3000               	movlw	0
 10470  0396  0008               	return
 10471  0397                     __end_of_handle_write_single_coil@nanomodbus$F2778:
 10472                           
 10473                           	psect	text7
 10474  0E74                     __ptext7:	
 10475 ;; *************** function _recv_write_single_coil_res *****************
 10476 ;; Defined at:
 10477 ;;		line 449 in file "nanomodbus.c"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10480 ;;		 -> main@nmbs(75), 
 10481 ;;  address         2   44[BANK0 ] unsigned short 
 10482 ;;  value_req       2   46[BANK0 ] unsigned short 
 10483 ;; Auto vars:     Size  Location     Type
 10484 ;;  nmbs            1   53[BANK0 ] PTR struct nmbs_t
 10485 ;;		 -> main@nmbs(75), 
 10486 ;;  value_res       2   51[BANK0 ] unsigned short 
 10487 ;;  address_res     2   49[BANK0 ] unsigned short 
 10488 ;;  err             1   54[BANK0 ] enum E10802
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  1    wreg      enum E10802
 10491 ;; Registers used:
 10492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10493 ;; Tracked objects:
 10494 ;;		On entry : 3F/0
 10495 ;;		On exit  : 3F/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10498 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;Total ram usage:       11 bytes
 10503 ;; Hardware stack levels used: 1
 10504 ;; Hardware stack levels required when called: 10
 10505 ;; This function calls:
 10506 ;;		_get_2
 10507 ;;		_recv
 10508 ;;		_recv_msg_footer
 10509 ;;		_recv_res_header
 10510 ;; This function is called by:
 10511 ;;		_handle_write_single_coil@nanomodbus$F2778
 10512 ;; This function uses a non-reentrant model
 10513 ;;
 10514                           
 10515  0E74                     _recv_write_single_coil_res:	
 10516                           ;psect for function _recv_write_single_coil_res
 10517                           
 10518                           
 10519                           ;incstack = 0
 10520                           ; Regs used in _recv_write_single_coil_res: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10521                           ;recv_write_single_coil_res@nmbs stored from wreg
 10522  0E74  00D5               	movwf	recv_write_single_coil_res@nmbs
 10523                           
 10524                           ;nanomodbus.c: 450:     nmbs_error err = recv_res_header(nmbs);
 10525  0E75  0855               	movf	recv_write_single_coil_res@nmbs,w
 10526  0E76  3184  244B  318E   	fcall	_recv_res_header
 10527  0E79  00D0               	movwf	??_recv_write_single_coil_res
 10528  0E7A  0850               	movf	??_recv_write_single_coil_res,w
 10529  0E7B  00D6               	movwf	recv_write_single_coil_res@err
 10530                           
 10531                           ;nanomodbus.c: 451:     if (err != NMBS_ERROR_NONE)
 10532  0E7C  0856               	movf	recv_write_single_coil_res@err,w
 10533  0E7D  1903               	btfsc	3,2
 10534  0E7E  2E81               	goto	l5309
 10535  0E7F                     l5305:
 10536                           
 10537                           ;nanomodbus.c: 452:         return err;
 10538  0E7F  0856               	movf	recv_write_single_coil_res@err,w
 10539  0E80  0008               	return
 10540  0E81                     l5309:
 10541                           
 10542                           ;nanomodbus.c: 454:     err = recv(nmbs, 4);
 10543  0E81  3004               	movlw	4
 10544  0E82  00B3               	movwf	recv@count
 10545  0E83  3000               	movlw	0
 10546  0E84  00B4               	movwf	recv@count+1
 10547  0E85  0855               	movf	recv_write_single_coil_res@nmbs,w
 10548  0E86  318B  238F  318E   	fcall	_recv
 10549  0E89  00D0               	movwf	??_recv_write_single_coil_res
 10550  0E8A  0850               	movf	??_recv_write_single_coil_res,w
 10551  0E8B  00D6               	movwf	recv_write_single_coil_res@err
 10552                           
 10553                           ;nanomodbus.c: 455:     if (err != NMBS_ERROR_NONE)
 10554  0E8C  0856               	movf	recv_write_single_coil_res@err,w
 10555  0E8D  1D03               	btfss	3,2
 10556  0E8E  2E7F               	goto	l5305
 10557                           
 10558                           ;nanomodbus.c: 458:     uint16_t address_res = get_2(nmbs);
 10559  0E8F  0855               	movf	recv_write_single_coil_res@nmbs,w
 10560  0E90  318B  23C6  318E   	fcall	_get_2
 10561  0E93  0821               	movf	?_get_2+1,w
 10562  0E94  00D2               	movwf	recv_write_single_coil_res@address_res+1
 10563  0E95  0820               	movf	?_get_2,w
 10564  0E96  00D1               	movwf	recv_write_single_coil_res@address_res
 10565                           
 10566                           ;nanomodbus.c: 459:     uint16_t value_res = get_2(nmbs);
 10567  0E97  0855               	movf	recv_write_single_coil_res@nmbs,w
 10568  0E98  318B  23C6  318E   	fcall	_get_2
 10569  0E9B  0821               	movf	?_get_2+1,w
 10570  0E9C  00D4               	movwf	recv_write_single_coil_res@value_res+1
 10571  0E9D  0820               	movf	?_get_2,w
 10572  0E9E  00D3               	movwf	recv_write_single_coil_res@value_res
 10573                           
 10574                           ;nanomodbus.c: 463:     err = recv_msg_footer(nmbs);
 10575  0E9F  0855               	movf	recv_write_single_coil_res@nmbs,w
 10576  0EA0  318D  25E9  318E   	fcall	_recv_msg_footer
 10577  0EA3  00D0               	movwf	??_recv_write_single_coil_res
 10578  0EA4  0850               	movf	??_recv_write_single_coil_res,w
 10579  0EA5  00D6               	movwf	recv_write_single_coil_res@err
 10580                           
 10581                           ;nanomodbus.c: 464:     if (err != NMBS_ERROR_NONE)
 10582  0EA6  0856               	movf	recv_write_single_coil_res@err,w
 10583  0EA7  1D03               	btfss	3,2
 10584  0EA8  2E7F               	goto	l5305
 10585                           
 10586                           ;nanomodbus.c: 467:     if (address_res != address)
 10587  0EA9  084D               	movf	recv_write_single_coil_res@address+1,w
 10588  0EAA  0652               	xorwf	recv_write_single_coil_res@address_res+1,w
 10589  0EAB  1D03               	skipz
 10590  0EAC  2EAF               	goto	u3435
 10591  0EAD  084C               	movf	recv_write_single_coil_res@address,w
 10592  0EAE  0651               	xorwf	recv_write_single_coil_res@address_res,w
 10593  0EAF                     u3435:
 10594  0EAF  1903               	skipnz
 10595  0EB0  2EB3               	goto	l5331
 10596  0EB1                     l5327:
 10597                           
 10598                           ;nanomodbus.c: 468:         return NMBS_ERROR_INVALID_RESPONSE;
 10599  0EB1  30FE               	movlw	254
 10600  0EB2  0008               	return
 10601  0EB3                     l5331:
 10602                           
 10603                           ;nanomodbus.c: 470:     if (value_res != value_req)
 10604  0EB3  084F               	movf	recv_write_single_coil_res@value_req+1,w
 10605  0EB4  0654               	xorwf	recv_write_single_coil_res@value_res+1,w
 10606  0EB5  1D03               	skipz
 10607  0EB6  2EB9               	goto	u3445
 10608  0EB7  084E               	movf	recv_write_single_coil_res@value_req,w
 10609  0EB8  0653               	xorwf	recv_write_single_coil_res@value_res,w
 10610  0EB9                     u3445:
 10611  0EB9  1D03               	btfss	3,2
 10612  0EBA  2EB1               	goto	l5327
 10613                           
 10614                           ;nanomodbus.c: 473:     return NMBS_ERROR_NONE;
 10615  0EBB  3000               	movlw	0
 10616  0EBC  0008               	return
 10617  0EBD                     __end_of_recv_write_single_coil_res:
 10618                           
 10619                           	psect	text8
 10620  065E                     __ptext8:	
 10621 ;; *************** function _handle_write_single_coil *****************
 10622 ;; Defined at:
 10623 ;;		line 75 in file "modbus_imp.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;  address         2    0[BANK0 ] unsigned short 
 10626 ;;  coils           1    2[BANK0 ] _Bool 
 10627 ;;  unit_id         1    3[BANK0 ] unsigned char 
 10628 ;;  arg             1    4[BANK0 ] PTR void 
 10629 ;;		 -> main@registers(13), 
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;  server_coils    1   13[BANK0 ] PTR unsigned char [1]
 10632 ;;		 -> registers.server_coils.coils(1), 
 10633 ;; Return value:  Size  Location     Type
 10634 ;;                  1    wreg      enum E10863
 10635 ;; Registers used:
 10636 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10637 ;; Tracked objects:
 10638 ;;		On entry : 3F/0
 10639 ;;		On exit  : 3F/0
 10640 ;;		Unchanged: 0/0
 10641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10642 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;Total ram usage:       14 bytes
 10647 ;; Hardware stack levels used: 1
 10648 ;; Hardware stack levels required when called: 5
 10649 ;; This function calls:
 10650 ;;		Nothing
 10651 ;; This function is called by:
 10652 ;;		_main
 10653 ;;		_handle_write_single_coil@nanomodbus$F2778
 10654 ;; This function uses a non-reentrant model
 10655 ;;
 10656                           
 10657  065E                     _handle_write_single_coil:	
 10658                           ;psect for function _handle_write_single_coil
 10659                           
 10660                           
 10661                           ;modbus_imp.c: 76:   if (address > 3)
 10662                           
 10663                           ;incstack = 0
 10664                           ; Regs used in _handle_write_single_coil: [wreg+fsr1l+fsr1h+status,2+status,0]
 10665  065E  3000               	movlw	0
 10666  065F  0221               	subwf	handle_write_single_coil@address+1,w
 10667  0660  3004               	movlw	4
 10668  0661  1903               	skipnz
 10669  0662  0220               	subwf	handle_write_single_coil@address,w
 10670  0663  1C03               	skipc
 10671  0664  2E67               	goto	l5289
 10672                           
 10673                           ;modbus_imp.c: 77:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 10674  0665  3002               	movlw	2
 10675  0666  0008               	return
 10676  0667                     l5289:
 10677                           
 10678                           ;modbus_imp.c: 80:   nmbs_bitfield *server_coils = &((mod_bus_registers*) arg)->server_c
      +                          oils.coils;
 10679  0667  0824               	movf	handle_write_single_coil@arg,w
 10680  0668  00A5               	movwf	??_handle_write_single_coil
 10681  0669  0825               	movf	??_handle_write_single_coil,w
 10682  066A  00AD               	movwf	handle_write_single_coil@server_coils
 10683                           
 10684                           ;modbus_imp.c: 81:   (((*server_coils)[(address) / 8]) = ((coils) ? (((*server_coils)[(a
      +                          ddress) / 8]) | (0x1 << ((address) % 8))) : (((*server_coils)[(address) / 8]) & ~(0x1 <<
      +                           ((address) % 8)))));
 10685  066B  0822               	movf	handle_write_single_coil@coils,w
 10686  066C  1D03               	btfss	3,2
 10687  066D  2E91               	goto	l5295
 10688  066E  0821               	movf	handle_write_single_coil@address+1,w
 10689  066F  00A6               	movwf	??_handle_write_single_coil+1
 10690  0670  0820               	movf	handle_write_single_coil@address,w
 10691  0671  00A5               	movwf	??_handle_write_single_coil
 10692  0672  36A6               	lsrf	??_handle_write_single_coil+1,f
 10693  0673  0CA5               	rrf	??_handle_write_single_coil,f
 10694  0674  36A6               	lsrf	??_handle_write_single_coil+1,f
 10695  0675  0CA5               	rrf	??_handle_write_single_coil,f
 10696  0676  36A6               	lsrf	??_handle_write_single_coil+1,f
 10697  0677  0CA5               	rrf	??_handle_write_single_coil,f
 10698  0678  0825               	movf	??_handle_write_single_coil,w
 10699  0679  072D               	addwf	handle_write_single_coil@server_coils,w
 10700  067A  00A7               	movwf	??_handle_write_single_coil+2
 10701  067B  0827               	movf	??_handle_write_single_coil+2,w
 10702  067C  0086               	movwf	6
 10703  067D  3002               	movlw	2	; select bank4/5
 10704  067E  0087               	movwf	7
 10705  067F  3001               	movlw	1
 10706  0680  00A8               	movwf	??_handle_write_single_coil+3
 10707  0681  0820               	movf	handle_write_single_coil@address,w
 10708  0682  3907               	andlw	7
 10709  0683  0A89               	incf	9,f
 10710  0684  2E86               	goto	u3384
 10711  0685                     u3385:
 10712  0685  35A8               	lslf	??_handle_write_single_coil+3,f
 10713  0686                     u3384:
 10714  0686  0B89               	decfsz	9,f
 10715  0687  2E85               	goto	u3385
 10716  0688  0828               	movf	??_handle_write_single_coil+3,w
 10717  0689  3AFF               	xorlw	255
 10718  068A  0501               	andwf	1,w
 10719  068B  00A9               	movwf	??_handle_write_single_coil+4
 10720  068C  01AA               	clrf	??_handle_write_single_coil+5
 10721  068D  0829               	movf	??_handle_write_single_coil+4,w
 10722  068E  00AB               	movwf	_handle_write_single_coil$1975
 10723  068F  082A               	movf	??_handle_write_single_coil+5,w
 10724  0690  2EB2               	goto	L5
 10725  0691                     l5295:
 10726  0691  3001               	movlw	1
 10727  0692  00A5               	movwf	??_handle_write_single_coil
 10728  0693  3000               	movlw	0
 10729  0694  00A6               	movwf	??_handle_write_single_coil+1
 10730  0695  0820               	movf	handle_write_single_coil@address,w
 10731  0696  3907               	andlw	7
 10732  0697  0A89               	incf	9,f
 10733  0698  2E9B               	goto	u3394
 10734  0699                     u3395:
 10735  0699  35A5               	lslf	??_handle_write_single_coil,f
 10736  069A  0DA6               	rlf	??_handle_write_single_coil+1,f
 10737  069B                     u3394:
 10738  069B  0B89               	decfsz	9,f
 10739  069C  2E99               	goto	u3395
 10740  069D  0821               	movf	handle_write_single_coil@address+1,w
 10741  069E  00A8               	movwf	??_handle_write_single_coil+3
 10742  069F  0820               	movf	handle_write_single_coil@address,w
 10743  06A0  00A7               	movwf	??_handle_write_single_coil+2
 10744  06A1  36A8               	lsrf	??_handle_write_single_coil+3,f
 10745  06A2  0CA7               	rrf	??_handle_write_single_coil+2,f
 10746  06A3  36A8               	lsrf	??_handle_write_single_coil+3,f
 10747  06A4  0CA7               	rrf	??_handle_write_single_coil+2,f
 10748  06A5  36A8               	lsrf	??_handle_write_single_coil+3,f
 10749  06A6  0CA7               	rrf	??_handle_write_single_coil+2,f
 10750  06A7  0827               	movf	??_handle_write_single_coil+2,w
 10751  06A8  072D               	addwf	handle_write_single_coil@server_coils,w
 10752  06A9  00A9               	movwf	??_handle_write_single_coil+4
 10753  06AA  0829               	movf	??_handle_write_single_coil+4,w
 10754  06AB  0086               	movwf	6
 10755  06AC  3002               	movlw	2	; select bank4/5
 10756  06AD  0087               	movwf	7
 10757  06AE  0825               	movf	??_handle_write_single_coil,w
 10758  06AF  0401               	iorwf	1,w
 10759  06B0  00AB               	movwf	_handle_write_single_coil$1975
 10760  06B1  0826               	movf	??_handle_write_single_coil+1,w
 10761  06B2                     L5:
 10762  06B2  00AC               	movwf	_handle_write_single_coil$1975+1
 10763  06B3  082B               	movf	_handle_write_single_coil$1975,w
 10764  06B4  00A5               	movwf	??_handle_write_single_coil
 10765  06B5  0821               	movf	handle_write_single_coil@address+1,w
 10766  06B6  00A7               	movwf	??_handle_write_single_coil+2
 10767  06B7  0820               	movf	handle_write_single_coil@address,w
 10768  06B8  00A6               	movwf	??_handle_write_single_coil+1
 10769  06B9  36A7               	lsrf	??_handle_write_single_coil+2,f
 10770  06BA  0CA6               	rrf	??_handle_write_single_coil+1,f
 10771  06BB  36A7               	lsrf	??_handle_write_single_coil+2,f
 10772  06BC  0CA6               	rrf	??_handle_write_single_coil+1,f
 10773  06BD  36A7               	lsrf	??_handle_write_single_coil+2,f
 10774  06BE  0CA6               	rrf	??_handle_write_single_coil+1,f
 10775  06BF  0826               	movf	??_handle_write_single_coil+1,w
 10776  06C0  072D               	addwf	handle_write_single_coil@server_coils,w
 10777  06C1  00A8               	movwf	??_handle_write_single_coil+3
 10778  06C2  0828               	movf	??_handle_write_single_coil+3,w
 10779  06C3  0086               	movwf	6
 10780  06C4  3002               	movlw	2	; select bank4/5
 10781  06C5  0087               	movwf	7
 10782  06C6  0825               	movf	??_handle_write_single_coil,w
 10783  06C7  0081               	movwf	1
 10784                           
 10785                           ;modbus_imp.c: 83:   return NMBS_ERROR_NONE;
 10786  06C8  3000               	movlw	0
 10787  06C9  0008               	return
 10788  06CA                     __end_of_handle_write_single_coil:
 10789                           
 10790                           	psect	text9
 10791  0851                     __ptext9:	
 10792 ;; *************** function _handle_read_input_registers *****************
 10793 ;; Defined at:
 10794 ;;		line 708 in file "nanomodbus.c"
 10795 ;; Parameters:    Size  Location     Type
 10796 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10797 ;;		 -> main@nmbs(75), 
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;  nmbs            1   68[BANK0 ] PTR struct nmbs_t
 10800 ;;		 -> main@nmbs(75), 
 10801 ;; Return value:  Size  Location     Type
 10802 ;;                  1    wreg      enum E10802
 10803 ;; Registers used:
 10804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10805 ;; Tracked objects:
 10806 ;;		On entry : 3F/0
 10807 ;;		On exit  : 3E/0
 10808 ;;		Unchanged: 0/0
 10809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;Total ram usage:        1 bytes
 10815 ;; Hardware stack levels used: 1
 10816 ;; Hardware stack levels required when called: 12
 10817 ;; This function calls:
 10818 ;;		_handle_read_registers
 10819 ;; This function is called by:
 10820 ;;		_handle_req_fc
 10821 ;; This function uses a non-reentrant model
 10822 ;;
 10823                           
 10824  0851                     _handle_read_input_registers:	
 10825                           ;psect for function _handle_read_input_registers
 10826                           
 10827                           
 10828                           ;incstack = 0
 10829                           ; Regs used in _handle_read_input_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10830                           ;handle_read_input_registers@nmbs stored from wreg
 10831  0851  00E4               	movwf	handle_read_input_registers@nmbs
 10832                           
 10833                           ;nanomodbus.c: 709:     return handle_read_registers(nmbs, nmbs->callbacks.read_input_re
      +                          gisters);
 10834  0852  0864               	movf	handle_read_input_registers@nmbs,w
 10835  0853  3E3A               	addlw	58
 10836  0854  0086               	movwf	6
 10837  0855  3001               	movlw	1	; select bank2/3
 10838  0856  0087               	movwf	7
 10839  0857  3F40               	moviw [0]fsr1
 10840  0858  00DA               	movwf	handle_read_registers@callback
 10841  0859  3F41               	moviw [1]fsr1
 10842  085A  00DB               	movwf	handle_read_registers@callback+1
 10843  085B  0864               	movf	handle_read_input_registers@nmbs,w
 10844  085C  3180  2067         	fcall	_handle_read_registers
 10845  085E  0008               	return
 10846  085F                     __end_of_handle_read_input_registers:
 10847                           
 10848                           	psect	text10
 10849  0843                     __ptext10:	
 10850 ;; *************** function _handle_read_holding_registers *****************
 10851 ;; Defined at:
 10852 ;;		line 701 in file "nanomodbus.c"
 10853 ;; Parameters:    Size  Location     Type
 10854 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10855 ;;		 -> main@nmbs(75), 
 10856 ;; Auto vars:     Size  Location     Type
 10857 ;;  nmbs            1   68[BANK0 ] PTR struct nmbs_t
 10858 ;;		 -> main@nmbs(75), 
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  1    wreg      enum E10802
 10861 ;; Registers used:
 10862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10863 ;; Tracked objects:
 10864 ;;		On entry : 3F/0
 10865 ;;		On exit  : 3E/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;Total ram usage:        1 bytes
 10873 ;; Hardware stack levels used: 1
 10874 ;; Hardware stack levels required when called: 12
 10875 ;; This function calls:
 10876 ;;		_handle_read_registers
 10877 ;; This function is called by:
 10878 ;;		_handle_req_fc
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882  0843                     _handle_read_holding_registers:	
 10883                           ;psect for function _handle_read_holding_registers
 10884                           
 10885                           
 10886                           ;incstack = 0
 10887                           ; Regs used in _handle_read_holding_registers: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10888                           ;handle_read_holding_registers@nmbs stored from wreg
 10889  0843  00E4               	movwf	handle_read_holding_registers@nmbs
 10890                           
 10891                           ;nanomodbus.c: 702:     return handle_read_registers(nmbs, nmbs->callbacks.read_holding_
      +                          registers);
 10892  0844  0864               	movf	handle_read_holding_registers@nmbs,w
 10893  0845  3E38               	addlw	56
 10894  0846  0086               	movwf	6
 10895  0847  3001               	movlw	1	; select bank2/3
 10896  0848  0087               	movwf	7
 10897  0849  3F40               	moviw [0]fsr1
 10898  084A  00DA               	movwf	handle_read_registers@callback
 10899  084B  3F41               	moviw [1]fsr1
 10900  084C  00DB               	movwf	handle_read_registers@callback+1
 10901  084D  0864               	movf	handle_read_holding_registers@nmbs,w
 10902  084E  3180  2067         	fcall	_handle_read_registers
 10903  0850  0008               	return
 10904  0851                     __end_of_handle_read_holding_registers:
 10905                           
 10906                           	psect	text11
 10907  0067                     __ptext11:	
 10908 ;; *************** function _handle_read_registers *****************
 10909 ;; Defined at:
 10910 ;;		line 625 in file "nanomodbus.c"
 10911 ;; Parameters:    Size  Location     Type
 10912 ;;  nmbs            1    wreg     PTR struct nmbs_t
 10913 ;;		 -> main@nmbs(75), 
 10914 ;;  callback        2   58[BANK0 ] PTR FTN(unsigned short ,
 10915 ;;		 -> handler_read_input_registers(1), handler_read_holding_registers(1), 
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;  nmbs            1   72[BANK1 ] PTR struct nmbs_t
 10918 ;;		 -> main@nmbs(75), 
 10919 ;;  i               2   67[BANK1 ] int 
 10920 ;;  regs_bytes      1   66[BANK1 ] unsigned char 
 10921 ;;  regs           64    0[BANK1 ] unsigned short [32]
 10922 ;;  quantity        2   69[BANK1 ] unsigned short 
 10923 ;;  address         2   64[BANK1 ] unsigned short 
 10924 ;;  err             1   71[BANK1 ] enum E10802
 10925 ;; Return value:  Size  Location     Type
 10926 ;;                  1    wreg      enum E10802
 10927 ;; Registers used:
 10928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10929 ;; Tracked objects:
 10930 ;;		On entry : 3F/0
 10931 ;;		On exit  : 3E/0
 10932 ;;		Unchanged: 0/0
 10933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10934 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10935 ;;      Locals:         0       0      73       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10937 ;;      Totals:         0      10      73       0       0       0       0       0       0       0       0       0       
      +0       0
 10938 ;;Total ram usage:       83 bytes
 10939 ;; Hardware stack levels used: 1
 10940 ;; Hardware stack levels required when called: 11
 10941 ;; This function calls:
 10942 ;;		_get_2
 10943 ;;		_handler_read_holding_registers
 10944 ;;		_handler_read_input_registers
 10945 ;;		_put_1
 10946 ;;		_put_2
 10947 ;;		_put_res_header
 10948 ;;		_recv
 10949 ;;		_recv_msg_footer
 10950 ;;		_recv_read_registers_res
 10951 ;;		_send_exception_msg
 10952 ;;		_send_msg
 10953 ;; This function is called by:
 10954 ;;		_handle_read_holding_registers
 10955 ;;		_handle_read_input_registers
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959  0067                     _handle_read_registers:	
 10960                           ;psect for function _handle_read_registers
 10961                           
 10962                           
 10963                           ;incstack = 0
 10964                           ; Regs used in _handle_read_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10965                           ;handle_read_registers@nmbs stored from wreg
 10966  0067  0141               	movlb	1	; select bank1
 10967  0068  00E8               	movwf	handle_read_registers@nmbs^(0+128)
 10968                           
 10969                           ;nanomodbus.c: 625: static nmbs_error handle_read_registers(nmbs_t* nmbs,;nanomodbus.c: 
      +                          626:                                         nmbs_error (*callback)(uint16_t, uint16_t, 
      +                          uint16_t*, uint8_t, void*)) {;nanomodbus.c: 627:     nmbs_error err = recv(nmbs, 4);
 10970  0069  3004               	movlw	4
 10971  006A  0140               	movlb	0	; select bank0
 10972  006B  00B3               	movwf	recv@count
 10973  006C  3000               	movlw	0
 10974  006D  00B4               	movwf	recv@count+1
 10975  006E  0141               	movlb	1	; select bank1
 10976  006F  0868               	movf	handle_read_registers@nmbs^(0+128),w
 10977  0070  318B  238F  3180   	fcall	_recv
 10978  0073  00DC               	movwf	??_handle_read_registers
 10979  0074  085C               	movf	??_handle_read_registers,w
 10980  0075  0141               	movlb	1	; select bank1
 10981  0076  00E7               	movwf	handle_read_registers@err^(0+128)
 10982                           
 10983                           ;nanomodbus.c: 628:     if (err != NMBS_ERROR_NONE)
 10984  0077  0867               	movf	handle_read_registers@err^(0+128),w
 10985  0078  1903               	btfsc	3,2
 10986  0079  287C               	goto	l5355
 10987  007A                     l5351:
 10988                           
 10989                           ;nanomodbus.c: 629:         return err;
 10990  007A  0867               	movf	handle_read_registers@err^(0+128),w
 10991  007B  0008               	return
 10992  007C                     l5355:
 10993                           
 10994                           ;nanomodbus.c: 631:     uint16_t address = get_2(nmbs);
 10995  007C  0868               	movf	handle_read_registers@nmbs^(0+128),w
 10996  007D  318B  23C6  3180   	fcall	_get_2
 10997  0080  0821               	movf	?_get_2+1,w
 10998  0081  0141               	movlb	1	; select bank1
 10999  0082  00E1               	movwf	(handle_read_registers@address+1)^(0+128)
 11000  0083  0140               	movlb	0	; select bank0
 11001  0084  0820               	movf	?_get_2,w
 11002  0085  0141               	movlb	1	; select bank1
 11003  0086  00E0               	movwf	handle_read_registers@address^(0+128)
 11004                           
 11005                           ;nanomodbus.c: 632:     uint16_t quantity = get_2(nmbs);
 11006  0087  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11007  0088  318B  23C6  3180   	fcall	_get_2
 11008  008B  0821               	movf	?_get_2+1,w
 11009  008C  0141               	movlb	1	; select bank1
 11010  008D  00E6               	movwf	(handle_read_registers@quantity+1)^(0+128)
 11011  008E  0140               	movlb	0	; select bank0
 11012  008F  0820               	movf	?_get_2,w
 11013  0090  0141               	movlb	1	; select bank1
 11014  0091  00E5               	movwf	handle_read_registers@quantity^(0+128)
 11015                           
 11016                           ;nanomodbus.c: 636:     err = recv_msg_footer(nmbs);
 11017  0092  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11018  0093  318D  25E9  3180   	fcall	_recv_msg_footer
 11019  0096  00DC               	movwf	??_handle_read_registers
 11020  0097  085C               	movf	??_handle_read_registers,w
 11021  0098  0141               	movlb	1	; select bank1
 11022  0099  00E7               	movwf	handle_read_registers@err^(0+128)
 11023                           
 11024                           ;nanomodbus.c: 637:     if (err != NMBS_ERROR_NONE)
 11025  009A  0867               	movf	handle_read_registers@err^(0+128),w
 11026  009B  1D03               	btfss	3,2
 11027  009C  287A               	goto	l5351
 11028                           
 11029                           ;nanomodbus.c: 640:     if (!nmbs->msg.ignored) {
 11030  009D  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11031  009E  3E37               	addlw	55
 11032  009F  0086               	movwf	6
 11033  00A0  3001               	movlw	1	; select bank2/3
 11034  00A1  0087               	movwf	7
 11035  00A2  0801               	movf	1,w
 11036  00A3  1D03               	btfss	3,2
 11037  00A4  299E               	goto	l5423
 11038                           
 11039                           ;nanomodbus.c: 641:         if (quantity < 1 || quantity > 125)
 11040  00A5  0865               	movf	handle_read_registers@quantity^(0+128),w
 11041  00A6  0466               	iorwf	(handle_read_registers@quantity+1)^(0+128),w
 11042  00A7  1903               	btfsc	3,2
 11043  00A8  28B0               	goto	l5369
 11044  00A9  3000               	movlw	0
 11045  00AA  0266               	subwf	(handle_read_registers@quantity+1)^(0+128),w
 11046  00AB  307E               	movlw	126
 11047  00AC  1903               	skipnz
 11048  00AD  0265               	subwf	handle_read_registers@quantity^(0+128),w
 11049  00AE  1C03               	skipc
 11050  00AF  28BA               	goto	l5373
 11051  00B0                     l5369:
 11052                           
 11053                           ;nanomodbus.c: 642:             return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_D
      +                          ATA_VALUE);
 11054  00B0  3003               	movlw	3
 11055  00B1  0140               	movlb	0	; select bank0
 11056  00B2  00DC               	movwf	??_handle_read_registers
 11057  00B3  085C               	movf	??_handle_read_registers,w
 11058  00B4  00C2               	movwf	send_exception_msg@exception
 11059  00B5  0141               	movlb	1	; select bank1
 11060  00B6  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11061  00B7  3189  21B7         	fcall	_send_exception_msg
 11062  00B9  0008               	return
 11063  00BA                     l5373:
 11064                           
 11065                           ;nanomodbus.c: 644:         if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0
      +                          xFFFF) + 1)
 11066  00BA  0865               	movf	handle_read_registers@quantity^(0+128),w
 11067  00BB  0140               	movlb	0	; select bank0
 11068  00BC  00DC               	movwf	??_handle_read_registers
 11069  00BD  0141               	movlb	1	; select bank1
 11070  00BE  0866               	movf	(handle_read_registers@quantity+1)^(0+128),w
 11071  00BF  0140               	movlb	0	; select bank0
 11072  00C0  00DD               	movwf	??_handle_read_registers+1
 11073  00C1  01DE               	clrf	??_handle_read_registers+2
 11074  00C2  01DF               	clrf	??_handle_read_registers+3
 11075  00C3  0141               	movlb	1	; select bank1
 11076  00C4  0860               	movf	handle_read_registers@address^(0+128),w
 11077  00C5  0140               	movlb	0	; select bank0
 11078  00C6  00E0               	movwf	??_handle_read_registers+4
 11079  00C7  0141               	movlb	1	; select bank1
 11080  00C8  0861               	movf	(handle_read_registers@address+1)^(0+128),w
 11081  00C9  0140               	movlb	0	; select bank0
 11082  00CA  00E1               	movwf	??_handle_read_registers+5
 11083  00CB  01E2               	clrf	??_handle_read_registers+6
 11084  00CC  01E3               	clrf	??_handle_read_registers+7
 11085  00CD  0860               	movf	??_handle_read_registers+4,w
 11086  00CE  07DC               	addwf	??_handle_read_registers,f
 11087  00CF  0861               	movf	??_handle_read_registers+5,w
 11088  00D0  3DDD               	addwfc	??_handle_read_registers+1,f
 11089  00D1  0862               	movf	??_handle_read_registers+6,w
 11090  00D2  3DDE               	addwfc	??_handle_read_registers+2,f
 11091  00D3  0863               	movf	??_handle_read_registers+7,w
 11092  00D4  3DDF               	addwfc	??_handle_read_registers+3,f
 11093  00D5  085F               	movf	??_handle_read_registers+3,w
 11094  00D6  1D03               	btfss	3,2
 11095  00D7  28E0               	goto	l5375
 11096  00D8  3001               	movlw	1
 11097  00D9  025C               	subwf	??_handle_read_registers,w
 11098  00DA  3000               	movlw	0
 11099  00DB  3B5D               	subwfb	??_handle_read_registers+1,w
 11100  00DC  3001               	movlw	1
 11101  00DD  3B5E               	subwfb	??_handle_read_registers+2,w
 11102  00DE  1C03               	btfss	3,0
 11103  00DF  28EA               	goto	l5379
 11104  00E0                     l5375:
 11105                           
 11106                           ;nanomodbus.c: 645:             return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_D
      +                          ATA_ADDRESS);
 11107  00E0  3002               	movlw	2
 11108  00E1  0140               	movlb	0	; select bank0
 11109  00E2  00DC               	movwf	??_handle_read_registers
 11110  00E3  085C               	movf	??_handle_read_registers,w
 11111  00E4  00C2               	movwf	send_exception_msg@exception
 11112  00E5  0141               	movlb	1	; select bank1
 11113  00E6  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11114  00E7  3189  21B7         	fcall	_send_exception_msg
 11115  00E9  0008               	return
 11116  00EA                     l5379:
 11117                           
 11118                           ;nanomodbus.c: 647:         if (callback) {
 11119  00EA  0140               	movlb	0	; select bank0
 11120  00EB  085A               	movf	handle_read_registers@callback,w
 11121  00EC  045B               	iorwf	handle_read_registers@callback+1,w
 11122  00ED  1903               	btfsc	3,2
 11123  00EE  29AB               	goto	l5427
 11124                           
 11125                           ;nanomodbus.c: 648:             uint16_t regs[32] = {0};
 11126  00EF  30A0               	movlw	low handle_read_registers@regs
 11127  00F0  0086               	movwf	6
 11128  00F1  3000               	movlw	high handle_read_registers@regs
 11129  00F2  0087               	movwf	7
 11130  00F3  3040               	movlw	64
 11131  00F4  00DC               	movwf	??_handle_read_registers
 11132  00F5  3000               	movlw	0
 11133  00F6                     u3520:
 11134  00F6  001E               	movwi fsr1++
 11135  00F7  0BDC               	decfsz	??_handle_read_registers,f
 11136  00F8  28F6               	goto	u3520
 11137                           
 11138                           ;nanomodbus.c: 649:             err = callback(address, quantity, regs, nmbs->msg.unit_i
      +                          d, nmbs->platform.arg);
 11139  00F9  0141               	movlb	1	; select bank1
 11140  00FA  0861               	movf	(handle_read_registers@address+1)^(0+128),w
 11141  00FB  0140               	movlb	0	; select bank0
 11142  00FC  00A1               	movwf	handler_read_input_registers@address+1
 11143  00FD  0141               	movlb	1	; select bank1
 11144  00FE  0860               	movf	handle_read_registers@address^(0+128),w
 11145  00FF  0140               	movlb	0	; select bank0
 11146  0100  00A0               	movwf	handler_read_input_registers@address
 11147  0101  0141               	movlb	1	; select bank1
 11148  0102  0866               	movf	(handle_read_registers@quantity+1)^(0+128),w
 11149  0103  0140               	movlb	0	; select bank0
 11150  0104  00A3               	movwf	handler_read_input_registers@quantity+1
 11151  0105  0141               	movlb	1	; select bank1
 11152  0106  0865               	movf	handle_read_registers@quantity^(0+128),w
 11153  0107  0140               	movlb	0	; select bank0
 11154  0108  00A2               	movwf	handler_read_input_registers@quantity
 11155  0109  30A0               	movlw	(low (handle_read_registers@regs| 0))& (0+255)
 11156  010A  00DC               	movwf	??_handle_read_registers
 11157  010B  085C               	movf	??_handle_read_registers,w
 11158  010C  00A4               	movwf	handler_read_input_registers@registers_out
 11159  010D  0141               	movlb	1	; select bank1
 11160  010E  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11161  010F  3E32               	addlw	50
 11162  0110  0086               	movwf	6
 11163  0111  3001               	movlw	1	; select bank2/3
 11164  0112  0087               	movwf	7
 11165  0113  0801               	movf	1,w
 11166  0114  0140               	movlb	0	; select bank0
 11167  0115  00DD               	movwf	??_handle_read_registers+1
 11168  0116  085D               	movf	??_handle_read_registers+1,w
 11169  0117  00A5               	movwf	handler_read_input_registers@unit_id
 11170  0118  0141               	movlb	1	; select bank1
 11171  0119  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11172  011A  3E46               	addlw	70
 11173  011B  0086               	movwf	6
 11174  011C  3001               	movlw	1	; select bank2/3
 11175  011D  0087               	movwf	7
 11176  011E  0801               	movf	1,w
 11177  011F  0140               	movlb	0	; select bank0
 11178  0120  00DE               	movwf	??_handle_read_registers+2
 11179  0121  085E               	movf	??_handle_read_registers+2,w
 11180  0122  00A6               	movwf	handler_read_input_registers@arg
 11181  0123  085B               	movf	handle_read_registers@callback+1,w
 11182  0124  008A               	movwf	10
 11183  0125  085A               	movf	handle_read_registers@callback,w
 11184  0126  000A               	callw
 11185  0127  3180               	pagesel	$
 11186  0128  00DF               	movwf	??_handle_read_registers+3
 11187  0129  085F               	movf	??_handle_read_registers+3,w
 11188  012A  0141               	movlb	1	; select bank1
 11189  012B  00E7               	movwf	handle_read_registers@err^(0+128)
 11190                           
 11191                           ;nanomodbus.c: 650:             if (err != NMBS_ERROR_NONE) {
 11192  012C  0867               	movf	handle_read_registers@err^(0+128),w
 11193  012D  1903               	btfsc	3,2
 11194  012E  294D               	goto	l5399
 11195                           
 11196                           ;nanomodbus.c: 651:                 if (((err) > 0 && (err) < 5))
 11197  012F  0867               	movf	handle_read_registers@err^(0+128),w
 11198  0130  3A80               	xorlw	128
 11199  0131  3E7F               	addlw	-129
 11200  0132  1C03               	skipc
 11201  0133  2943               	goto	l5395
 11202  0134  0867               	movf	handle_read_registers@err^(0+128),w
 11203  0135  3A80               	xorlw	128
 11204  0136  3E7B               	addlw	-133
 11205  0137  1803               	skipnc
 11206  0138  2943               	goto	l5395
 11207                           
 11208                           ;nanomodbus.c: 652:                     return send_exception_msg(nmbs, err);
 11209  0139  0867               	movf	handle_read_registers@err^(0+128),w
 11210  013A  0140               	movlb	0	; select bank0
 11211  013B  00DC               	movwf	??_handle_read_registers
 11212  013C  085C               	movf	??_handle_read_registers,w
 11213  013D  00C2               	movwf	send_exception_msg@exception
 11214  013E  0141               	movlb	1	; select bank1
 11215  013F  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11216  0140  3189  21B7         	fcall	_send_exception_msg
 11217  0142  0008               	return
 11218  0143                     l5395:
 11219                           
 11220                           ;nanomodbus.c: 654:                 return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVE
      +                          R_DEVICE_FAILURE);
 11221  0143  3004               	movlw	4
 11222  0144  0140               	movlb	0	; select bank0
 11223  0145  00DC               	movwf	??_handle_read_registers
 11224  0146  085C               	movf	??_handle_read_registers,w
 11225  0147  00C2               	movwf	send_exception_msg@exception
 11226  0148  0141               	movlb	1	; select bank1
 11227  0149  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11228  014A  3189  21B7         	fcall	_send_exception_msg
 11229  014C  0008               	return
 11230  014D                     l5399:
 11231                           
 11232                           ;nanomodbus.c: 657:             if (!nmbs->msg.broadcast) {
 11233  014D  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11234  014E  3E36               	addlw	54
 11235  014F  0086               	movwf	6
 11236  0150  3001               	movlw	1	; select bank2/3
 11237  0151  0087               	movwf	7
 11238  0152  0801               	movf	1,w
 11239  0153  1D03               	btfss	3,2
 11240  0154  29AB               	goto	l5427
 11241                           
 11242                           ;nanomodbus.c: 658:                 uint8_t regs_bytes = quantity * 2;
 11243  0155  3565               	lslf	handle_read_registers@quantity^(0+128),w
 11244  0156  0140               	movlb	0	; select bank0
 11245  0157  00DC               	movwf	??_handle_read_registers
 11246  0158  085C               	movf	??_handle_read_registers,w
 11247  0159  0141               	movlb	1	; select bank1
 11248  015A  00E2               	movwf	handle_read_registers@regs_bytes^(0+128)
 11249                           
 11250                           ;nanomodbus.c: 659:                 put_res_header(nmbs, 1 + regs_bytes);
 11251  015B  0862               	movf	handle_read_registers@regs_bytes^(0+128),w
 11252  015C  3E01               	addlw	1
 11253  015D  0140               	movlb	0	; select bank0
 11254  015E  00A9               	movwf	put_res_header@data_length
 11255  015F  3000               	movlw	0
 11256  0160  1803               	skipnc
 11257  0161  3001               	movlw	1
 11258  0162  00AA               	movwf	put_res_header@data_length+1
 11259  0163  0141               	movlb	1	; select bank1
 11260  0164  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11261  0165  3197  27E0  3180   	fcall	_put_res_header
 11262                           
 11263                           ;nanomodbus.c: 661:                 put_1(nmbs, regs_bytes);
 11264  0168  0141               	movlb	1	; select bank1
 11265  0169  0862               	movf	handle_read_registers@regs_bytes^(0+128),w
 11266  016A  0140               	movlb	0	; select bank0
 11267  016B  00DC               	movwf	??_handle_read_registers
 11268  016C  085C               	movf	??_handle_read_registers,w
 11269  016D  00A0               	movwf	put_1@data
 11270  016E  0141               	movlb	1	; select bank1
 11271  016F  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11272  0170  3189  215E  3180   	fcall	_put_1
 11273                           
 11274                           ;nanomodbus.c: 666:                 for (int i = 0; i < quantity; i++) {
 11275  0173  0141               	movlb	1	; select bank1
 11276  0174  01E3               	clrf	handle_read_registers@i^(0+128)
 11277  0175  01E4               	clrf	(handle_read_registers@i+1)^(0+128)
 11278  0176                     l5413:
 11279  0176  0866               	movf	(handle_read_registers@quantity+1)^(0+128),w
 11280  0177  0264               	subwf	(handle_read_registers@i+1)^(0+128),w
 11281  0178  1D03               	skipz
 11282  0179  297C               	goto	u3575
 11283  017A  0865               	movf	handle_read_registers@quantity^(0+128),w
 11284  017B  0263               	subwf	handle_read_registers@i^(0+128),w
 11285  017C                     u3575:
 11286  017C  1803               	btfsc	3,0
 11287  017D  2992               	goto	l5415
 11288                           
 11289                           ;nanomodbus.c: 667:                     put_2(nmbs, regs[i]);
 11290  017E  3563               	lslf	handle_read_registers@i^(0+128),w
 11291  017F  3EA0               	addlw	(low (handle_read_registers@regs| 0))& (0+255)
 11292  0180  0086               	movwf	6
 11293  0181  0187               	clrf	7
 11294  0182  3F40               	moviw [0]fsr1
 11295  0183  0140               	movlb	0	; select bank0
 11296  0184  00A0               	movwf	put_2@data
 11297  0185  3F41               	moviw [1]fsr1
 11298  0186  00A1               	movwf	put_2@data+1
 11299  0187  0141               	movlb	1	; select bank1
 11300  0188  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11301  0189  318A  22C7  3180   	fcall	_put_2
 11302                           
 11303                           ;nanomodbus.c: 669:                 }
 11304  018C  3001               	movlw	1
 11305  018D  0141               	movlb	1	; select bank1
 11306  018E  07E3               	addwf	handle_read_registers@i^(0+128),f
 11307  018F  3000               	movlw	0
 11308  0190  3DE4               	addwfc	(handle_read_registers@i+1)^(0+128),f
 11309  0191  2976               	goto	l5413
 11310  0192                     l5415:
 11311                           
 11312                           ;nanomodbus.c: 671:                 err = send_msg(nmbs);
 11313  0192  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11314  0193  318C  2470  3180   	fcall	_send_msg
 11315  0196  00DC               	movwf	??_handle_read_registers
 11316  0197  085C               	movf	??_handle_read_registers,w
 11317  0198  0141               	movlb	1	; select bank1
 11318  0199  00E7               	movwf	handle_read_registers@err^(0+128)
 11319                           
 11320                           ;nanomodbus.c: 672:                 if (err != NMBS_ERROR_NONE)
 11321  019A  0867               	movf	handle_read_registers@err^(0+128),w
 11322  019B  1D03               	btfss	3,2
 11323  019C  287A               	goto	l5351
 11324  019D  29AB               	goto	l5427
 11325  019E                     l5423:	
 11326                           ;nanomodbus.c: 676:     }
 11327                           
 11328                           ;nanomodbus.c: 675:         }
 11329                           
 11330                           
 11331                           ;nanomodbus.c: 678:         return recv_read_registers_res(nmbs, quantity, ((void*)0));
 11332  019E  0866               	movf	(handle_read_registers@quantity+1)^(0+128),w
 11333  019F  0140               	movlb	0	; select bank0
 11334  01A0  00CD               	movwf	recv_read_registers_res@quantity+1
 11335  01A1  0141               	movlb	1	; select bank1
 11336  01A2  0865               	movf	handle_read_registers@quantity^(0+128),w
 11337  01A3  0140               	movlb	0	; select bank0
 11338  01A4  00CC               	movwf	recv_read_registers_res@quantity
 11339  01A5  01CE               	clrf	recv_read_registers_res@registers
 11340  01A6  0141               	movlb	1	; select bank1
 11341  01A7  0868               	movf	handle_read_registers@nmbs^(0+128),w
 11342  01A8  3185  2570         	fcall	_recv_read_registers_res
 11343  01AA  0008               	return
 11344  01AB                     l5427:
 11345                           
 11346                           ;nanomodbus.c: 681:     return NMBS_ERROR_NONE;
 11347  01AB  3000               	movlw	0
 11348  01AC  0008               	return
 11349  01AD                     __end_of_handle_read_registers:
 11350                           
 11351                           	psect	text12
 11352  09B7                     __ptext12:	
 11353 ;; *************** function _send_exception_msg *****************
 11354 ;; Defined at:
 11355 ;;		line 306 in file "nanomodbus.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;  nmbs            1    wreg     PTR struct nmbs_t
 11358 ;;		 -> main@nmbs(75), 
 11359 ;;  exception       1   34[BANK0 ] unsigned char 
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;  nmbs            1   36[BANK0 ] PTR struct nmbs_t
 11362 ;;		 -> main@nmbs(75), 
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  1    wreg      enum E10802
 11365 ;; Registers used:
 11366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11367 ;; Tracked objects:
 11368 ;;		On entry : 3E/0
 11369 ;;		On exit  : 3F/0
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11372 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;Total ram usage:        3 bytes
 11377 ;; Hardware stack levels used: 1
 11378 ;; Hardware stack levels required when called: 9
 11379 ;; This function calls:
 11380 ;;		_put_1
 11381 ;;		_put_msg_header
 11382 ;;		_send_msg
 11383 ;; This function is called by:
 11384 ;;		_handle_read_registers
 11385 ;;		_handle_write_single_coil@nanomodbus$F2778
 11386 ;; This function uses a non-reentrant model
 11387 ;;
 11388                           
 11389  09B7                     _send_exception_msg:	
 11390                           ;psect for function _send_exception_msg
 11391                           
 11392                           
 11393                           ;incstack = 0
 11394                           ; Regs used in _send_exception_msg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11395                           ;send_exception_msg@nmbs stored from wreg
 11396  09B7  0140               	movlb	0	; select bank0
 11397  09B8  00C4               	movwf	send_exception_msg@nmbs
 11398                           
 11399                           ;nanomodbus.c: 307:     nmbs->msg.fc += 0x80;
 11400  09B9  3080               	movlw	128
 11401  09BA  00C3               	movwf	??_send_exception_msg
 11402  09BB  0844               	movf	send_exception_msg@nmbs,w
 11403  09BC  3E33               	addlw	51
 11404  09BD  0086               	movwf	6
 11405  09BE  3001               	movlw	1	; select bank2/3
 11406  09BF  0087               	movwf	7
 11407  09C0  0843               	movf	??_send_exception_msg,w
 11408  09C1  0781               	addwf	1,f
 11409                           
 11410                           ;nanomodbus.c: 308:     put_msg_header(nmbs, 1);
 11411  09C2  3001               	movlw	1
 11412  09C3  00A5               	movwf	put_msg_header@data_length
 11413  09C4  3000               	movlw	0
 11414  09C5  00A6               	movwf	put_msg_header@data_length+1
 11415  09C6  0844               	movf	send_exception_msg@nmbs,w
 11416  09C7  318F  2754  3189   	fcall	_put_msg_header
 11417                           
 11418                           ;nanomodbus.c: 309:     put_1(nmbs, exception);
 11419  09CA  0842               	movf	send_exception_msg@exception,w
 11420  09CB  00C3               	movwf	??_send_exception_msg
 11421  09CC  0843               	movf	??_send_exception_msg,w
 11422  09CD  00A0               	movwf	put_1@data
 11423  09CE  0844               	movf	send_exception_msg@nmbs,w
 11424  09CF  3189  215E  3189   	fcall	_put_1
 11425                           
 11426                           ;nanomodbus.c: 313:     return send_msg(nmbs);
 11427  09D2  0844               	movf	send_exception_msg@nmbs,w
 11428  09D3  318C  2470         	fcall	_send_msg
 11429  09D5  0008               	return
 11430  09D6                     __end_of_send_exception_msg:
 11431                           
 11432                           	psect	text13
 11433  0C70                     __ptext13:	
 11434 ;; *************** function _send_msg *****************
 11435 ;; Defined at:
 11436 ;;		line 266 in file "nanomodbus.c"
 11437 ;; Parameters:    Size  Location     Type
 11438 ;;  nmbs            1    wreg     PTR struct nmbs_t
 11439 ;;		 -> main@nmbs(75), 
 11440 ;; Auto vars:     Size  Location     Type
 11441 ;;  nmbs            1   33[BANK0 ] PTR struct nmbs_t
 11442 ;;		 -> main@nmbs(75), 
 11443 ;;  crc             2   30[BANK0 ] unsigned short 
 11444 ;;  err             1   32[BANK0 ] enum E10802
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  1    wreg      enum E10802
 11447 ;; Registers used:
 11448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11449 ;; Tracked objects:
 11450 ;;		On entry : 3E/0
 11451 ;;		On exit  : 3F/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;Total ram usage:        6 bytes
 11459 ;; Hardware stack levels used: 1
 11460 ;; Hardware stack levels required when called: 8
 11461 ;; This function calls:
 11462 ;;		_nmbs_crc_calc
 11463 ;;		_put_2
 11464 ;;		_send
 11465 ;; This function is called by:
 11466 ;;		_send_exception_msg
 11467 ;;		_handle_read_registers
 11468 ;;		_handle_write_single_coil@nanomodbus$F2778
 11469 ;;		_handle_write_single_register@nanomodbus$F2807
 11470 ;; This function uses a non-reentrant model
 11471 ;;
 11472                           
 11473  0C70                     _send_msg:	
 11474                           ;psect for function _send_msg
 11475                           
 11476                           
 11477                           ;incstack = 0
 11478                           ; Regs used in _send_msg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11479                           ;send_msg@nmbs stored from wreg
 11480  0C70  0140               	movlb	0	; select bank0
 11481  0C71  00C1               	movwf	send_msg@nmbs
 11482                           
 11483                           ;nanomodbus.c: 269:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 11484  0C72  0841               	movf	send_msg@nmbs,w
 11485  0C73  3E41               	addlw	65
 11486  0C74  0086               	movwf	6
 11487  0C75  3001               	movlw	1	; select bank2/3
 11488  0C76  0087               	movwf	7
 11489  0C77  0301               	decf	1,w
 11490  0C78  1D03               	btfss	3,2
 11491  0C79  2C99               	goto	l1029
 11492                           
 11493                           ;nanomodbus.c: 270:         uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_id
      +                          x);
 11494  0C7A  0841               	movf	send_msg@nmbs,w
 11495  0C7B  3E30               	addlw	48
 11496  0C7C  0086               	movwf	6
 11497  0C7D  3001               	movlw	1	; select bank2/3
 11498  0C7E  0087               	movwf	7
 11499  0C7F  3F40               	moviw [0]fsr1
 11500  0C80  00BC               	movwf	??_send_msg
 11501  0C81  3F41               	moviw [1]fsr1
 11502  0C82  00BD               	movwf	??_send_msg+1
 11503  0C83  083C               	movf	??_send_msg,w
 11504  0C84  00A0               	movwf	nmbs_crc_calc@length
 11505  0C85  083D               	movf	??_send_msg+1,w
 11506  0C86  00A1               	movwf	nmbs_crc_calc@length+1
 11507  0C87  01A2               	clrf	nmbs_crc_calc@length+2
 11508  0C88  01A3               	clrf	nmbs_crc_calc@length+3
 11509  0C89  0841               	movf	send_msg@nmbs,w
 11510  0C8A  318F  27A2  318C   	fcall	_nmbs_crc_calc
 11511  0C8D  0821               	movf	?_nmbs_crc_calc+1,w
 11512  0C8E  00BF               	movwf	send_msg@crc+1
 11513  0C8F  0820               	movf	?_nmbs_crc_calc,w
 11514  0C90  00BE               	movwf	send_msg@crc
 11515                           
 11516                           ;nanomodbus.c: 271:         put_2(nmbs, crc);
 11517  0C91  083F               	movf	send_msg@crc+1,w
 11518  0C92  00A1               	movwf	put_2@data+1
 11519  0C93  083E               	movf	send_msg@crc,w
 11520  0C94  00A0               	movwf	put_2@data
 11521  0C95  0841               	movf	send_msg@nmbs,w
 11522  0C96  318A  22C7  318C   	fcall	_put_2
 11523  0C99                     l1029:	
 11524                           ;nanomodbus.c: 272:     }
 11525                           
 11526                           
 11527                           ;nanomodbus.c: 274:     nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 11528  0C99  0841               	movf	send_msg@nmbs,w
 11529  0C9A  3E30               	addlw	48
 11530  0C9B  0086               	movwf	6
 11531  0C9C  3001               	movlw	1	; select bank2/3
 11532  0C9D  0087               	movwf	7
 11533  0C9E  3F40               	moviw [0]fsr1
 11534  0C9F  00B0               	movwf	send@count
 11535  0CA0  3F41               	moviw [1]fsr1
 11536  0CA1  00B1               	movwf	send@count+1
 11537  0CA2  0841               	movf	send_msg@nmbs,w
 11538  0CA3  3187  2798         	fcall	_send
 11539  0CA5  00BC               	movwf	??_send_msg
 11540  0CA6  083C               	movf	??_send_msg,w
 11541  0CA7  00C0               	movwf	send_msg@err
 11542                           
 11543                           ;nanomodbus.c: 276:     return err;
 11544  0CA8  0840               	movf	send_msg@err,w
 11545  0CA9  0008               	return
 11546  0CAA                     __end_of_send_msg:
 11547                           
 11548                           	psect	text14
 11549  0798                     __ptext14:	
 11550 ;; *************** function _send *****************
 11551 ;; Defined at:
 11552 ;;		line 184 in file "nanomodbus.c"
 11553 ;; Parameters:    Size  Location     Type
 11554 ;;  nmbs            1    wreg     PTR struct nmbs_t
 11555 ;;		 -> main@nmbs(75), 
 11556 ;;  count           2   16[BANK0 ] unsigned short 
 11557 ;; Auto vars:     Size  Location     Type
 11558 ;;  nmbs            1   27[BANK0 ] PTR struct nmbs_t
 11559 ;;		 -> main@nmbs(75), 
 11560 ;;  ret             4   23[BANK0 ] long 
 11561 ;; Return value:  Size  Location     Type
 11562 ;;                  1    wreg      enum E10802
 11563 ;; Registers used:
 11564 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11565 ;; Tracked objects:
 11566 ;;		On entry : 3F/0
 11567 ;;		On exit  : 3F/0
 11568 ;;		Unchanged: 0/0
 11569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11570 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;Total ram usage:       12 bytes
 11575 ;; Hardware stack levels used: 1
 11576 ;; Hardware stack levels required when called: 7
 11577 ;; This function calls:
 11578 ;;		_write_serial
 11579 ;; This function is called by:
 11580 ;;		_send_msg
 11581 ;; This function uses a non-reentrant model
 11582 ;;
 11583                           
 11584  0798                     _send:	
 11585                           ;psect for function _send
 11586                           
 11587                           
 11588                           ;incstack = 0
 11589                           ; Regs used in _send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11590                           ;send@nmbs stored from wreg
 11591  0798  00BB               	movwf	send@nmbs
 11592                           
 11593                           ;nanomodbus.c: 185:     int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, 1000, n
      +                          mbs->platform.arg);
 11594  0799  083B               	movf	send@nmbs,w
 11595  079A  00B2               	movwf	??_send
 11596  079B  0832               	movf	??_send,w
 11597  079C  00A1               	movwf	write_serial@buf
 11598  079D  0831               	movf	send@count+1,w
 11599  079E  00A3               	movwf	write_serial@count+1
 11600  079F  0830               	movf	send@count,w
 11601  07A0  00A2               	movwf	write_serial@count
 11602  07A1  3000               	movlw	0
 11603  07A2  00A7               	movwf	write_serial@byte_timeout_ms+3
 11604  07A3  3000               	movlw	0
 11605  07A4  00A6               	movwf	write_serial@byte_timeout_ms+2
 11606  07A5  3003               	movlw	3
 11607  07A6  00A5               	movwf	write_serial@byte_timeout_ms+1
 11608  07A7  30E8               	movlw	232
 11609  07A8  00A4               	movwf	write_serial@byte_timeout_ms
 11610  07A9  083B               	movf	send@nmbs,w
 11611  07AA  3E46               	addlw	70
 11612  07AB  0086               	movwf	6
 11613  07AC  3001               	movlw	1	; select bank2/3
 11614  07AD  0087               	movwf	7
 11615  07AE  0801               	movf	1,w
 11616  07AF  00B3               	movwf	??_send+1
 11617  07B0  0833               	movf	??_send+1,w
 11618  07B1  00A8               	movwf	write_serial@arg
 11619  07B2  083B               	movf	send@nmbs,w
 11620  07B3  3E44               	addlw	68
 11621  07B4  0086               	movwf	6
 11622  07B5  3001               	movlw	1	; select bank2/3
 11623  07B6  0087               	movwf	7
 11624  07B7  3F41               	moviw [1]fsr1
 11625  07B8  008A               	movwf	10
 11626  07B9  3F40               	moviw [0]fsr1
 11627  07BA  000A               	callw
 11628  07BB  3187               	pagesel	$
 11629  07BC  0824               	movf	?_write_serial+3,w
 11630  07BD  00BA               	movwf	send@ret+3
 11631  07BE  0823               	movf	?_write_serial+2,w
 11632  07BF  00B9               	movwf	send@ret+2
 11633  07C0  0822               	movf	?_write_serial+1,w
 11634  07C1  00B8               	movwf	send@ret+1
 11635  07C2  0821               	movf	?_write_serial,w
 11636  07C3  00B7               	movwf	send@ret
 11637                           
 11638                           ;nanomodbus.c: 187:     if (ret == count)
 11639  07C4  0830               	movf	send@count,w
 11640  07C5  00B2               	movwf	??_send
 11641  07C6  0831               	movf	send@count+1,w
 11642  07C7  00B3               	movwf	??_send+1
 11643  07C8  01B4               	clrf	??_send+2
 11644  07C9  01B5               	clrf	??_send+3
 11645  07CA  083A               	movf	send@ret+3,w
 11646  07CB  0635               	xorwf	??_send+3,w
 11647  07CC  1D03               	skipz
 11648  07CD  2FD8               	goto	u3015
 11649  07CE  0839               	movf	send@ret+2,w
 11650  07CF  0634               	xorwf	??_send+2,w
 11651  07D0  1D03               	skipz
 11652  07D1  2FD8               	goto	u3015
 11653  07D2  0838               	movf	send@ret+1,w
 11654  07D3  0633               	xorwf	??_send+1,w
 11655  07D4  1D03               	skipz
 11656  07D5  2FD8               	goto	u3015
 11657  07D6  0837               	movf	send@ret,w
 11658  07D7  0632               	xorwf	??_send,w
 11659  07D8                     u3015:
 11660  07D8  1D03               	skipz
 11661  07D9  2FDC               	goto	l5023
 11662                           
 11663                           ;nanomodbus.c: 188:         return NMBS_ERROR_NONE;
 11664  07DA  3000               	movlw	0
 11665  07DB  0008               	return
 11666  07DC                     l5023:
 11667                           
 11668                           ;nanomodbus.c: 190:     if (ret < count) {
 11669  07DC  0830               	movf	send@count,w
 11670  07DD  00B2               	movwf	??_send
 11671  07DE  0831               	movf	send@count+1,w
 11672  07DF  00B3               	movwf	??_send+1
 11673  07E0  01B4               	clrf	??_send+2
 11674  07E1  01B5               	clrf	??_send+3
 11675  07E2  083A               	movf	send@ret+3,w
 11676  07E3  3A80               	xorlw	128
 11677  07E4  00B6               	movwf	??_send+4
 11678  07E5  0835               	movf	??_send+3,w
 11679  07E6  3A80               	xorlw	128
 11680  07E7  0236               	subwf	??_send+4,w
 11681  07E8  1D03               	skipz
 11682  07E9  2FF4               	goto	u3023
 11683  07EA  0834               	movf	??_send+2,w
 11684  07EB  0239               	subwf	send@ret+2,w
 11685  07EC  1D03               	skipz
 11686  07ED  2FF4               	goto	u3023
 11687  07EE  0833               	movf	??_send+1,w
 11688  07EF  0238               	subwf	send@ret+1,w
 11689  07F0  1D03               	skipz
 11690  07F1  2FF4               	goto	u3023
 11691  07F2  0832               	movf	??_send,w
 11692  07F3  0237               	subwf	send@ret,w
 11693  07F4                     u3023:
 11694  07F4  1803               	skipnc
 11695  07F5  2FF8               	goto	l5027
 11696                           
 11697                           ;nanomodbus.c: 191:         if (ret < 0)
 11698  07F6  1FBA               	btfss	send@ret+3,7
 11699  07F7  2FFA               	goto	l5031
 11700  07F8                     l5027:
 11701                           
 11702                           ;nanomodbus.c: 192:             return NMBS_ERROR_TRANSPORT;
 11703  07F8  30FC               	movlw	252
 11704  07F9  0008               	return
 11705  07FA                     l5031:
 11706                           
 11707                           ;nanomodbus.c: 194:         return NMBS_ERROR_TIMEOUT;
 11708  07FA  30FD               	movlw	253
 11709  07FB  0008               	return
 11710  07FC                     __end_of_send:
 11711                           
 11712                           	psect	text15
 11713  0E2E                     __ptext15:	
 11714 ;; *************** function _write_serial *****************
 11715 ;; Defined at:
 11716 ;;		line 39 in file "modbus_imp.c"
 11717 ;; Parameters:    Size  Location     Type
 11718 ;;  buf             1    1[BANK0 ] PTR const unsigned char 
 11719 ;;		 -> nmbs.msg.buf(48), 
 11720 ;;  count           2    2[BANK0 ] unsigned short 
 11721 ;;  byte_timeout    4    4[BANK0 ] long 
 11722 ;;  arg             1    8[BANK0 ] PTR void 
 11723 ;;		 -> main@registers(13), 
 11724 ;; Auto vars:     Size  Location     Type
 11725 ;;  i               2   14[BANK0 ] int 
 11726 ;;  number_of_by    4   10[BANK0 ] long 
 11727 ;; Return value:  Size  Location     Type
 11728 ;;                  4    1[BANK0 ] long 
 11729 ;; Registers used:
 11730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11731 ;; Tracked objects:
 11732 ;;		On entry : 3F/0
 11733 ;;		On exit  : 3F/0
 11734 ;;		Unchanged: 0/0
 11735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11736 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11737 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;Total ram usage:       15 bytes
 11741 ;; Hardware stack levels used: 1
 11742 ;; Hardware stack levels required when called: 6
 11743 ;; This function calls:
 11744 ;;		_EUSART1_Write
 11745 ;;		_EUSART1_is_tx_done
 11746 ;;		_EUSART1_is_tx_ready
 11747 ;;		_TxDeviceDisable
 11748 ;;		_TxDeviceEnable
 11749 ;; This function is called by:
 11750 ;;		_main
 11751 ;;		_send
 11752 ;; This function uses a non-reentrant model
 11753 ;;
 11754                           
 11755  0E2E                     _write_serial:	
 11756                           ;psect for function _write_serial
 11757                           
 11758                           
 11759                           ;modbus_imp.c: 39: int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte
      +                          _timeout_ms, void* arg);modbus_imp.c: 40: {;modbus_imp.c: 41:     TxDeviceEnable();
 11760                           
 11761                           ;incstack = 0
 11762                           ; Regs used in _write_serial: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11763  0E2E  3180  2002  318E   	fcall	_TxDeviceEnable
 11764                           
 11765                           ;modbus_imp.c: 42:     int32_t number_of_byte_send = 0;
 11766  0E31  3000               	movlw	0
 11767  0E32  00AD               	movwf	write_serial@number_of_byte_send+3
 11768  0E33  3000               	movlw	0
 11769  0E34  00AC               	movwf	write_serial@number_of_byte_send+2
 11770  0E35  3000               	movlw	0
 11771  0E36  00AB               	movwf	write_serial@number_of_byte_send+1
 11772  0E37  3000               	movlw	0
 11773  0E38  00AA               	movwf	write_serial@number_of_byte_send
 11774                           
 11775                           ;modbus_imp.c: 44:     for(int i=0; i<count; i++)
 11776  0E39  01AE               	clrf	write_serial@i
 11777  0E3A  01AF               	clrf	write_serial@i+1
 11778  0E3B                     l4939:
 11779  0E3B  0823               	movf	write_serial@count+1,w
 11780  0E3C  022F               	subwf	write_serial@i+1,w
 11781  0E3D  1D03               	skipz
 11782  0E3E  2E41               	goto	u2945
 11783  0E3F  0822               	movf	write_serial@count,w
 11784  0E40  022E               	subwf	write_serial@i,w
 11785  0E41                     u2945:
 11786  0E41  1803               	btfsc	3,0
 11787  0E42  2E69               	goto	l4941
 11788                           
 11789                           ;modbus_imp.c: 45:     {;modbus_imp.c: 46:         if(EUSART1_is_tx_ready())
 11790  0E43  3188  201B  318E   	fcall	_EUSART1_is_tx_ready
 11791  0E46  3A00               	xorlw	0
 11792  0E47  1903               	skipnz
 11793  0E48  2E64               	goto	l4937
 11794                           
 11795                           ;modbus_imp.c: 47:         {;modbus_imp.c: 48:             EUSART1_Write(*buf);
 11796  0E49  0821               	movf	write_serial@buf,w
 11797  0E4A  0086               	movwf	6
 11798  0E4B  3001               	movlw	1	; select bank2/3
 11799  0E4C  0087               	movwf	7
 11800  0E4D  0801               	movf	1,w
 11801  0E4E  3197  27C3  318E   	fcall	_EUSART1_Write
 11802  0E51                     l4931:	
 11803                           ;modbus_imp.c: 49:             while(!EUSART1_is_tx_done());
 11804                           
 11805  0E51  3187  27FC  318E   	fcall	_EUSART1_is_tx_done
 11806  0E54  3A00               	xorlw	0
 11807  0E55  1903               	skipnz
 11808  0E56  2E51               	goto	l4931
 11809                           
 11810                           ;modbus_imp.c: 50:             buf++;
 11811  0E57  3001               	movlw	1
 11812  0E58  0140               	movlb	0	; select bank0
 11813  0E59  00A9               	movwf	??_write_serial
 11814  0E5A  0829               	movf	??_write_serial,w
 11815  0E5B  07A1               	addwf	write_serial@buf,f
 11816                           
 11817                           ;modbus_imp.c: 51:             number_of_byte_send++;
 11818  0E5C  3001               	movlw	1
 11819  0E5D  07AA               	addwf	write_serial@number_of_byte_send,f
 11820  0E5E  3000               	movlw	0
 11821  0E5F  3DAB               	addwfc	write_serial@number_of_byte_send+1,f
 11822  0E60  3000               	movlw	0
 11823  0E61  3DAC               	addwfc	write_serial@number_of_byte_send+2,f
 11824  0E62  3000               	movlw	0
 11825  0E63  3DAD               	addwfc	write_serial@number_of_byte_send+3,f
 11826  0E64                     l4937:
 11827                           
 11828                           ;modbus_imp.c: 53:     }
 11829  0E64  3001               	movlw	1
 11830  0E65  07AE               	addwf	write_serial@i,f
 11831  0E66  3000               	movlw	0
 11832  0E67  3DAF               	addwfc	write_serial@i+1,f
 11833  0E68  2E3B               	goto	l4939
 11834  0E69                     l4941:
 11835                           
 11836                           ;modbus_imp.c: 54:     TxDeviceDisable();
 11837  0E69  3188  2000         	fcall	_TxDeviceDisable
 11838                           
 11839                           ;modbus_imp.c: 56:     return number_of_byte_send;
 11840  0E6B  082D               	movf	write_serial@number_of_byte_send+3,w
 11841  0E6C  00A4               	movwf	?_write_serial+3
 11842  0E6D  082C               	movf	write_serial@number_of_byte_send+2,w
 11843  0E6E  00A3               	movwf	?_write_serial+2
 11844  0E6F  082B               	movf	write_serial@number_of_byte_send+1,w
 11845  0E70  00A2               	movwf	?_write_serial+1
 11846  0E71  082A               	movf	write_serial@number_of_byte_send,w
 11847  0E72  00A1               	movwf	?_write_serial
 11848  0E73  0008               	return
 11849  0E74                     __end_of_write_serial:
 11850                           
 11851                           	psect	text16
 11852  0002                     __ptext16:	
 11853 ;; *************** function _TxDeviceEnable *****************
 11854 ;; Defined at:
 11855 ;;		line 63 in file "communication.c"
 11856 ;; Parameters:    Size  Location     Type
 11857 ;;		None
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;		None
 11860 ;; Return value:  Size  Location     Type
 11861 ;;                  1    wreg      void 
 11862 ;; Registers used:
 11863 ;;		None
 11864 ;; Tracked objects:
 11865 ;;		On entry : 3F/0
 11866 ;;		On exit  : 3F/0
 11867 ;;		Unchanged: 0/0
 11868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;Total ram usage:        0 bytes
 11874 ;; Hardware stack levels used: 1
 11875 ;; Hardware stack levels required when called: 5
 11876 ;; This function calls:
 11877 ;;		Nothing
 11878 ;; This function is called by:
 11879 ;;		_write_serial
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883  0002                     _TxDeviceEnable:	
 11884                           ;psect for function _TxDeviceEnable
 11885                           
 11886                           
 11887                           ;communication.c: 65:     LATCbits.LATC3 = 1;
 11888                           
 11889                           ;incstack = 0
 11890                           ; Regs used in _TxDeviceEnable: []
 11891  0002  159A               	bsf	26,3	;volatile
 11892  0003  0008               	return
 11893  0004                     __end_of_TxDeviceEnable:
 11894                           
 11895                           	psect	text17
 11896  0800                     __ptext17:	
 11897 ;; *************** function _TxDeviceDisable *****************
 11898 ;; Defined at:
 11899 ;;		line 68 in file "communication.c"
 11900 ;; Parameters:    Size  Location     Type
 11901 ;;		None
 11902 ;; Auto vars:     Size  Location     Type
 11903 ;;		None
 11904 ;; Return value:  Size  Location     Type
 11905 ;;                  1    wreg      void 
 11906 ;; Registers used:
 11907 ;;		None
 11908 ;; Tracked objects:
 11909 ;;		On entry : 31/E
 11910 ;;		On exit  : 3F/0
 11911 ;;		Unchanged: 0/0
 11912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;Total ram usage:        0 bytes
 11918 ;; Hardware stack levels used: 1
 11919 ;; Hardware stack levels required when called: 5
 11920 ;; This function calls:
 11921 ;;		Nothing
 11922 ;; This function is called by:
 11923 ;;		_main
 11924 ;;		_write_serial
 11925 ;; This function uses a non-reentrant model
 11926 ;;
 11927                           
 11928  0800                     _TxDeviceDisable:	
 11929                           ;psect for function _TxDeviceDisable
 11930                           
 11931                           
 11932                           ;communication.c: 70:     LATCbits.LATC3 = 0;
 11933                           
 11934                           ;incstack = 0
 11935                           ; Regs used in _TxDeviceDisable: []
 11936  0800  0140               	movlb	0	; select bank0
 11937  0801  119A               	bcf	26,3	;volatile
 11938  0802  0008               	return
 11939  0803                     __end_of_TxDeviceDisable:
 11940                           
 11941                           	psect	text18
 11942  081B                     __ptext18:	
 11943 ;; *************** function _EUSART1_is_tx_ready *****************
 11944 ;; Defined at:
 11945 ;;		line 218 in file "mcc_generated_files/eusart1.c"
 11946 ;; Parameters:    Size  Location     Type
 11947 ;;		None
 11948 ;; Auto vars:     Size  Location     Type
 11949 ;;		None
 11950 ;; Return value:  Size  Location     Type
 11951 ;;                  1    wreg      _Bool 
 11952 ;; Registers used:
 11953 ;;		wreg, status,2
 11954 ;; Tracked objects:
 11955 ;;		On entry : 3F/0
 11956 ;;		On exit  : 3F/0
 11957 ;;		Unchanged: 0/0
 11958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11962 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;Total ram usage:        1 bytes
 11964 ;; Hardware stack levels used: 1
 11965 ;; Hardware stack levels required when called: 5
 11966 ;; This function calls:
 11967 ;;		Nothing
 11968 ;; This function is called by:
 11969 ;;		_write_serial
 11970 ;; This function uses a non-reentrant model
 11971 ;;
 11972                           
 11973  081B                     _EUSART1_is_tx_ready:	
 11974                           ;psect for function _EUSART1_is_tx_ready
 11975                           
 11976                           
 11977                           ;mcc_generated_files/eusart1.c: 220:     return (_Bool)(PIR3bits.TX1IF && TX1STAbits.TXE
      +                          N);
 11978                           
 11979                           ;incstack = 0
 11980                           ; Regs used in _EUSART1_is_tx_ready: [wreg+status,2]
 11981  081B  01A0               	clrf	_EUSART1_is_tx_ready$633
 11982  081C  014E               	movlb	14	; select bank14
 11983  081D  1E0F               	btfss	15,4	;volatile
 11984  081E  2825               	goto	l4889
 11985  081F  0142               	movlb	2	; select bank2
 11986  0820  1E9E               	btfss	30,5	;volatile
 11987  0821  2825               	goto	l4889
 11988  0822  0140               	movlb	0	; select bank0
 11989  0823  01A0               	clrf	_EUSART1_is_tx_ready$633
 11990  0824  0AA0               	incf	_EUSART1_is_tx_ready$633,f
 11991  0825                     l4889:
 11992  0825  0140               	movlb	0	; select bank0
 11993  0826  0820               	movf	_EUSART1_is_tx_ready$633,w
 11994  0827  0008               	return
 11995  0828                     __end_of_EUSART1_is_tx_ready:
 11996                           
 11997                           	psect	text19
 11998  07FC                     __ptext19:	
 11999 ;; *************** function _EUSART1_is_tx_done *****************
 12000 ;; Defined at:
 12001 ;;		line 228 in file "mcc_generated_files/eusart1.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;		None
 12004 ;; Auto vars:     Size  Location     Type
 12005 ;;		None
 12006 ;; Return value:  Size  Location     Type
 12007 ;;                  1    wreg      _Bool 
 12008 ;; Registers used:
 12009 ;;		wreg, status,2, status,0
 12010 ;; Tracked objects:
 12011 ;;		On entry : 3D/2
 12012 ;;		On exit  : 3F/2
 12013 ;;		Unchanged: 0/0
 12014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;Total ram usage:        0 bytes
 12020 ;; Hardware stack levels used: 1
 12021 ;; Hardware stack levels required when called: 5
 12022 ;; This function calls:
 12023 ;;		Nothing
 12024 ;; This function is called by:
 12025 ;;		_write_serial
 12026 ;; This function uses a non-reentrant model
 12027 ;;
 12028                           
 12029  07FC                     _EUSART1_is_tx_done:	
 12030                           ;psect for function _EUSART1_is_tx_done
 12031                           
 12032                           
 12033                           ;mcc_generated_files/eusart1.c: 230:     return TX1STAbits.TRMT;
 12034                           
 12035                           ;incstack = 0
 12036                           ; Regs used in _EUSART1_is_tx_done: [wreg+status,2+status,0]
 12037  07FC  0142               	movlb	2	; select bank2
 12038  07FD  0C1E               	rrf	30,w	;volatile
 12039  07FE  3901               	andlw	1
 12040  07FF  0008               	return
 12041  0800                     __end_of_EUSART1_is_tx_done:
 12042                           
 12043                           	psect	text20
 12044  17C3                     __ptext20:	
 12045 ;; *************** function _EUSART1_Write *****************
 12046 ;; Defined at:
 12047 ;;		line 259 in file "mcc_generated_files/eusart1.c"
 12048 ;; Parameters:    Size  Location     Type
 12049 ;;  txData          1    wreg     unsigned char 
 12050 ;; Auto vars:     Size  Location     Type
 12051 ;;  txData          1    0[BANK0 ] unsigned char 
 12052 ;; Return value:  Size  Location     Type
 12053 ;;                  1    wreg      void 
 12054 ;; Registers used:
 12055 ;;		wreg
 12056 ;; Tracked objects:
 12057 ;;		On entry : 3F/0
 12058 ;;		On exit  : 3F/2
 12059 ;;		Unchanged: 0/0
 12060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12064 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;Total ram usage:        1 bytes
 12066 ;; Hardware stack levels used: 1
 12067 ;; Hardware stack levels required when called: 5
 12068 ;; This function calls:
 12069 ;;		Nothing
 12070 ;; This function is called by:
 12071 ;;		_write_serial
 12072 ;; This function uses a non-reentrant model
 12073 ;;
 12074                           
 12075  17C3                     _EUSART1_Write:	
 12076                           ;psect for function _EUSART1_Write
 12077                           
 12078                           
 12079                           ;incstack = 0
 12080                           ; Regs used in _EUSART1_Write: [wreg]
 12081                           ;EUSART1_Write@txData stored from wreg
 12082  17C3  00A0               	movwf	EUSART1_Write@txData
 12083  17C4                     l275:	
 12084                           ;mcc_generated_files/eusart1.c: 262:     {;mcc_generated_files/eusart1.c: 263:     }
 12085                           
 12086                           
 12087                           ;mcc_generated_files/eusart1.c: 261:     while(0 == PIR3bits.TX1IF)
 12088  17C4  014E               	movlb	14	; select bank14
 12089  17C5  1E0F               	btfss	15,4	;volatile
 12090  17C6  2FC4               	goto	l275
 12091                           
 12092                           ;mcc_generated_files/eusart1.c: 265:     TX1REG = txData;
 12093  17C7  0140               	movlb	0	; select bank0
 12094  17C8  0820               	movf	EUSART1_Write@txData,w
 12095  17C9  0142               	movlb	2	; select bank2
 12096  17CA  009A               	movwf	26	;volatile
 12097  17CB  0008               	return
 12098  17CC                     __end_of_EUSART1_Write:
 12099                           
 12100                           	psect	text21
 12101  0570                     __ptext21:	
 12102 ;; *************** function _recv_read_registers_res *****************
 12103 ;; Defined at:
 12104 ;;		line 414 in file "nanomodbus.c"
 12105 ;; Parameters:    Size  Location     Type
 12106 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12107 ;;		 -> main@nmbs(75), 
 12108 ;;  quantity        2   44[BANK0 ] unsigned short 
 12109 ;;  registers       1   46[BANK0 ] PTR unsigned short 
 12110 ;;		 -> NULL(0), 
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;  nmbs            1   56[BANK0 ] PTR struct nmbs_t
 12113 ;;		 -> main@nmbs(75), 
 12114 ;;  reg             2   51[BANK0 ] unsigned short 
 12115 ;;  i               2   53[BANK0 ] int 
 12116 ;;  err             1   57[BANK0 ] enum E10802
 12117 ;;  registers_by    1   55[BANK0 ] unsigned char 
 12118 ;; Return value:  Size  Location     Type
 12119 ;;                  1    wreg      enum E10802
 12120 ;; Registers used:
 12121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12122 ;; Tracked objects:
 12123 ;;		On entry : 3F/1
 12124 ;;		On exit  : 3F/0
 12125 ;;		Unchanged: 0/0
 12126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12127 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12128 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;Total ram usage:       14 bytes
 12132 ;; Hardware stack levels used: 1
 12133 ;; Hardware stack levels required when called: 10
 12134 ;; This function calls:
 12135 ;;		_get_1
 12136 ;;		_get_2
 12137 ;;		_recv
 12138 ;;		_recv_msg_footer
 12139 ;;		_recv_res_header
 12140 ;; This function is called by:
 12141 ;;		_handle_read_registers
 12142 ;; This function uses a non-reentrant model
 12143 ;;
 12144                           
 12145  0570                     _recv_read_registers_res:	
 12146                           ;psect for function _recv_read_registers_res
 12147                           
 12148                           
 12149                           ;incstack = 0
 12150                           ; Regs used in _recv_read_registers_res: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12151                           ;recv_read_registers_res@nmbs stored from wreg
 12152  0570  0140               	movlb	0	; select bank0
 12153  0571  00D8               	movwf	recv_read_registers_res@nmbs
 12154                           
 12155                           ;nanomodbus.c: 415:     nmbs_error err = recv_res_header(nmbs);
 12156  0572  0858               	movf	recv_read_registers_res@nmbs,w
 12157  0573  3184  244B  3185   	fcall	_recv_res_header
 12158  0576  00CF               	movwf	??_recv_read_registers_res
 12159  0577  084F               	movf	??_recv_read_registers_res,w
 12160  0578  00D9               	movwf	recv_read_registers_res@err
 12161                           
 12162                           ;nanomodbus.c: 416:     if (err != NMBS_ERROR_NONE)
 12163  0579  0859               	movf	recv_read_registers_res@err,w
 12164  057A  1903               	btfsc	3,2
 12165  057B  2D7E               	goto	l5237
 12166  057C                     l5233:
 12167                           
 12168                           ;nanomodbus.c: 417:         return err;
 12169  057C  0859               	movf	recv_read_registers_res@err,w
 12170  057D  0008               	return
 12171  057E                     l5237:
 12172                           
 12173                           ;nanomodbus.c: 419:     err = recv(nmbs, 1);
 12174  057E  3001               	movlw	1
 12175  057F  00B3               	movwf	recv@count
 12176  0580  3000               	movlw	0
 12177  0581  00B4               	movwf	recv@count+1
 12178  0582  0858               	movf	recv_read_registers_res@nmbs,w
 12179  0583  318B  238F  3185   	fcall	_recv
 12180  0586  00CF               	movwf	??_recv_read_registers_res
 12181  0587  084F               	movf	??_recv_read_registers_res,w
 12182  0588  00D9               	movwf	recv_read_registers_res@err
 12183                           
 12184                           ;nanomodbus.c: 420:     if (err != NMBS_ERROR_NONE)
 12185  0589  0859               	movf	recv_read_registers_res@err,w
 12186  058A  1D03               	btfss	3,2
 12187  058B  2D7C               	goto	l5233
 12188                           
 12189                           ;nanomodbus.c: 423:     uint8_t registers_bytes = get_1(nmbs);
 12190  058C  0858               	movf	recv_read_registers_res@nmbs,w
 12191  058D  3189  217B  3185   	fcall	_get_1
 12192  0590  00CF               	movwf	??_recv_read_registers_res
 12193  0591  084F               	movf	??_recv_read_registers_res,w
 12194  0592  00D7               	movwf	recv_read_registers_res@registers_bytes
 12195                           
 12196                           ;nanomodbus.c: 426:     err = recv(nmbs, registers_bytes);
 12197  0593  0857               	movf	recv_read_registers_res@registers_bytes,w
 12198  0594  00CF               	movwf	??_recv_read_registers_res
 12199  0595  01D0               	clrf	??_recv_read_registers_res+1
 12200  0596  084F               	movf	??_recv_read_registers_res,w
 12201  0597  00B3               	movwf	recv@count
 12202  0598  0850               	movf	??_recv_read_registers_res+1,w
 12203  0599  00B4               	movwf	recv@count+1
 12204  059A  0858               	movf	recv_read_registers_res@nmbs,w
 12205  059B  318B  238F  3185   	fcall	_recv
 12206  059E  00D1               	movwf	??_recv_read_registers_res+2
 12207  059F  0851               	movf	??_recv_read_registers_res+2,w
 12208  05A0  00D9               	movwf	recv_read_registers_res@err
 12209                           
 12210                           ;nanomodbus.c: 427:     if (err != NMBS_ERROR_NONE)
 12211  05A1  0859               	movf	recv_read_registers_res@err,w
 12212  05A2  1D03               	btfss	3,2
 12213  05A3  2D7C               	goto	l5233
 12214                           
 12215                           ;nanomodbus.c: 431:     for (int i = 0; i < registers_bytes / 2; i++) {
 12216  05A4  01D5               	clrf	recv_read_registers_res@i
 12217  05A5  01D6               	clrf	recv_read_registers_res@i+1
 12218  05A6                     l5263:
 12219  05A6  0857               	movf	recv_read_registers_res@registers_bytes,w
 12220  05A7  00CF               	movwf	??_recv_read_registers_res
 12221  05A8  3001               	movlw	1
 12222  05A9                     u3325:
 12223  05A9  36CF               	lsrf	??_recv_read_registers_res,f
 12224  05AA  0B89               	decfsz	9,f
 12225  05AB  2DA9               	goto	u3325
 12226  05AC  0856               	movf	recv_read_registers_res@i+1,w
 12227  05AD  3A80               	xorlw	128
 12228  05AE  00D0               	movwf	??_recv_read_registers_res+1
 12229  05AF  3080               	movlw	128
 12230  05B0  0250               	subwf	??_recv_read_registers_res+1,w
 12231  05B1  1D03               	skipz
 12232  05B2  2DB5               	goto	u3335
 12233  05B3  084F               	movf	??_recv_read_registers_res,w
 12234  05B4  0255               	subwf	recv_read_registers_res@i,w
 12235  05B5                     u3335:
 12236  05B5  1803               	btfsc	3,0
 12237  05B6  2DD2               	goto	l5265
 12238                           
 12239                           ;nanomodbus.c: 432:         uint16_t reg = get_2(nmbs);
 12240  05B7  0140               	movlb	0	; select bank0
 12241  05B8  0858               	movf	recv_read_registers_res@nmbs,w
 12242  05B9  318B  23C6  3185   	fcall	_get_2
 12243  05BC  0821               	movf	?_get_2+1,w
 12244  05BD  00D4               	movwf	recv_read_registers_res@reg+1
 12245  05BE  0820               	movf	?_get_2,w
 12246  05BF  00D3               	movwf	recv_read_registers_res@reg
 12247                           
 12248                           ;nanomodbus.c: 433:         if (registers)
 12249  05C0  084E               	movf	recv_read_registers_res@registers,w
 12250  05C1  1903               	btfsc	3,2
 12251  05C2  2DCD               	goto	l5261
 12252                           
 12253                           ;nanomodbus.c: 434:             registers[i] = reg;
 12254  05C3  3555               	lslf	recv_read_registers_res@i,w
 12255  05C4  074E               	addwf	recv_read_registers_res@registers,w
 12256  05C5  00CF               	movwf	??_recv_read_registers_res
 12257  05C6  084F               	movf	??_recv_read_registers_res,w
 12258  05C7  0086               	movwf	6
 12259  05C8  0187               	clrf	7
 12260  05C9  0853               	movf	recv_read_registers_res@reg,w
 12261  05CA  3FC0               	movwi [0]fsr1
 12262  05CB  0854               	movf	recv_read_registers_res@reg+1,w
 12263  05CC  3FC1               	movwi [1]fsr1
 12264  05CD                     l5261:
 12265                           
 12266                           ;nanomodbus.c: 436:     }
 12267  05CD  3001               	movlw	1
 12268  05CE  07D5               	addwf	recv_read_registers_res@i,f
 12269  05CF  3000               	movlw	0
 12270  05D0  3DD6               	addwfc	recv_read_registers_res@i+1,f
 12271  05D1  2DA6               	goto	l5263
 12272  05D2                     l5265:
 12273                           
 12274                           ;nanomodbus.c: 438:     err = recv_msg_footer(nmbs);
 12275  05D2  0140               	movlb	0	; select bank0
 12276  05D3  0858               	movf	recv_read_registers_res@nmbs,w
 12277  05D4  318D  25E9  3185   	fcall	_recv_msg_footer
 12278  05D7  00CF               	movwf	??_recv_read_registers_res
 12279  05D8  084F               	movf	??_recv_read_registers_res,w
 12280  05D9  00D9               	movwf	recv_read_registers_res@err
 12281                           
 12282                           ;nanomodbus.c: 439:     if (err != NMBS_ERROR_NONE)
 12283  05DA  0859               	movf	recv_read_registers_res@err,w
 12284  05DB  1D03               	btfss	3,2
 12285  05DC  2D7C               	goto	l5233
 12286                           
 12287                           ;nanomodbus.c: 442:     if (registers_bytes != quantity * 2)
 12288  05DD  084D               	movf	recv_read_registers_res@quantity+1,w
 12289  05DE  00D0               	movwf	??_recv_read_registers_res+1
 12290  05DF  084C               	movf	recv_read_registers_res@quantity,w
 12291  05E0  00CF               	movwf	??_recv_read_registers_res
 12292  05E1  35CF               	lslf	??_recv_read_registers_res,f
 12293  05E2  0DD0               	rlf	??_recv_read_registers_res+1,f
 12294  05E3  0857               	movf	recv_read_registers_res@registers_bytes,w
 12295  05E4  00D1               	movwf	??_recv_read_registers_res+2
 12296  05E5  01D2               	clrf	??_recv_read_registers_res+3
 12297  05E6  0850               	movf	??_recv_read_registers_res+1,w
 12298  05E7  0652               	xorwf	??_recv_read_registers_res+3,w
 12299  05E8  1D03               	skipz
 12300  05E9  2DEC               	goto	u3355
 12301  05EA  084F               	movf	??_recv_read_registers_res,w
 12302  05EB  0651               	xorwf	??_recv_read_registers_res+2,w
 12303  05EC                     u3355:
 12304  05EC  1903               	skipnz
 12305  05ED  2DF0               	goto	l5279
 12306                           
 12307                           ;nanomodbus.c: 443:         return NMBS_ERROR_INVALID_RESPONSE;
 12308  05EE  30FE               	movlw	254
 12309  05EF  0008               	return
 12310  05F0                     l5279:
 12311                           
 12312                           ;nanomodbus.c: 445:     return NMBS_ERROR_NONE;
 12313  05F0  3000               	movlw	0
 12314  05F1  0008               	return
 12315  05F2                     __end_of_recv_read_registers_res:
 12316                           
 12317                           	psect	text22
 12318  044B                     __ptext22:	
 12319 ;; *************** function _recv_res_header *****************
 12320 ;; Defined at:
 12321 ;;		line 318 in file "nanomodbus.c"
 12322 ;; Parameters:    Size  Location     Type
 12323 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12324 ;;		 -> main@nmbs(75), 
 12325 ;; Auto vars:     Size  Location     Type
 12326 ;;  nmbs            1   43[BANK0 ] PTR struct nmbs_t
 12327 ;;		 -> main@nmbs(75), 
 12328 ;;  exception       1   41[BANK0 ] unsigned char 
 12329 ;;  req_transact    2   36[BANK0 ] unsigned short 
 12330 ;;  err             1   42[BANK0 ] enum E10802
 12331 ;;  req_fc          1   40[BANK0 ] unsigned char 
 12332 ;;  first_byte_r    1   39[BANK0 ] _Bool 
 12333 ;;  req_unit_id     1   38[BANK0 ] unsigned char 
 12334 ;; Return value:  Size  Location     Type
 12335 ;;                  1    wreg      enum E10802
 12336 ;; Registers used:
 12337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12338 ;; Tracked objects:
 12339 ;;		On entry : 3F/0
 12340 ;;		On exit  : 3F/0
 12341 ;;		Unchanged: 0/0
 12342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;Total ram usage:       10 bytes
 12348 ;; Hardware stack levels used: 1
 12349 ;; Hardware stack levels required when called: 9
 12350 ;; This function calls:
 12351 ;;		_get_1
 12352 ;;		_recv
 12353 ;;		_recv_msg_footer
 12354 ;;		_recv_msg_header
 12355 ;; This function is called by:
 12356 ;;		_recv_read_registers_res
 12357 ;;		_recv_write_single_coil_res
 12358 ;;		_recv_write_single_register_res
 12359 ;; This function uses a non-reentrant model
 12360 ;;
 12361                           
 12362  044B                     _recv_res_header:	
 12363                           ;psect for function _recv_res_header
 12364                           
 12365                           
 12366                           ;incstack = 0
 12367                           ; Regs used in _recv_res_header: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12368                           ;recv_res_header@nmbs stored from wreg
 12369  044B  00CB               	movwf	recv_res_header@nmbs
 12370                           
 12371                           ;nanomodbus.c: 319:     uint16_t req_transaction_id = nmbs->msg.transaction_id;
 12372  044C  084B               	movf	recv_res_header@nmbs,w
 12373  044D  3E34               	addlw	52
 12374  044E  0086               	movwf	6
 12375  044F  3001               	movlw	1	; select bank2/3
 12376  0450  0087               	movwf	7
 12377  0451  3F40               	moviw [0]fsr1
 12378  0452  00C4               	movwf	recv_res_header@req_transaction_id
 12379  0453  3F41               	moviw [1]fsr1
 12380  0454  00C5               	movwf	recv_res_header@req_transaction_id+1
 12381                           
 12382                           ;nanomodbus.c: 320:     uint8_t req_unit_id = nmbs->msg.unit_id;
 12383  0455  084B               	movf	recv_res_header@nmbs,w
 12384  0456  3E32               	addlw	50
 12385  0457  0086               	movwf	6
 12386  0458  3001               	movlw	1	; select bank2/3
 12387  0459  0087               	movwf	7
 12388  045A  0801               	movf	1,w
 12389  045B  00C2               	movwf	??_recv_res_header
 12390  045C  0842               	movf	??_recv_res_header,w
 12391  045D  00C6               	movwf	recv_res_header@req_unit_id
 12392                           
 12393                           ;nanomodbus.c: 321:     uint8_t req_fc = nmbs->msg.fc;
 12394  045E  084B               	movf	recv_res_header@nmbs,w
 12395  045F  3E33               	addlw	51
 12396  0460  0086               	movwf	6
 12397  0461  3001               	movlw	1	; select bank2/3
 12398  0462  0087               	movwf	7
 12399  0463  0801               	movf	1,w
 12400  0464  00C2               	movwf	??_recv_res_header
 12401  0465  0842               	movf	??_recv_res_header,w
 12402  0466  00C8               	movwf	recv_res_header@req_fc
 12403                           
 12404                           ;nanomodbus.c: 323:     _Bool first_byte_received;;nanomodbus.c: 324:     nmbs_error err
      +                           = recv_msg_header(nmbs, &first_byte_received);
 12405  0467  3047               	movlw	(low (recv_res_header@first_byte_received| 0))& (0+255)
 12406  0468  00C2               	movwf	??_recv_res_header
 12407  0469  0842               	movf	??_recv_res_header,w
 12408  046A  00BA               	movwf	recv_msg_header@first_byte_received
 12409  046B  084B               	movf	recv_res_header@nmbs,w
 12410  046C  318F  2707  3184   	fcall	_recv_msg_header
 12411  046F  00C3               	movwf	??_recv_res_header+1
 12412  0470  0843               	movf	??_recv_res_header+1,w
 12413  0471  00CA               	movwf	recv_res_header@err
 12414                           
 12415                           ;nanomodbus.c: 325:     if (err != NMBS_ERROR_NONE)
 12416  0472  084A               	movf	recv_res_header@err,w
 12417  0473  1903               	btfsc	3,2
 12418  0474  2C77               	goto	l5121
 12419  0475                     l5117:
 12420                           
 12421                           ;nanomodbus.c: 326:         return err;
 12422  0475  084A               	movf	recv_res_header@err,w
 12423  0476  0008               	return
 12424  0477                     l5121:
 12425                           
 12426                           ;nanomodbus.c: 328:     if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 12427  0477  084B               	movf	recv_res_header@nmbs,w
 12428  0478  3E41               	addlw	65
 12429  0479  0086               	movwf	6
 12430  047A  3001               	movlw	1	; select bank2/3
 12431  047B  0087               	movwf	7
 12432  047C  3002               	movlw	2
 12433  047D  0601               	xorwf	1,w
 12434  047E  1D03               	btfss	3,2
 12435  047F  2C93               	goto	l5129
 12436                           
 12437                           ;nanomodbus.c: 329:         if (nmbs->msg.transaction_id != req_transaction_id)
 12438  0480  084B               	movf	recv_res_header@nmbs,w
 12439  0481  3E34               	addlw	52
 12440  0482  0086               	movwf	6
 12441  0483  3001               	movlw	1	; select bank2/3
 12442  0484  0087               	movwf	7
 12443  0485  3F40               	moviw [0]fsr1
 12444  0486  00C2               	movwf	??_recv_res_header
 12445  0487  3F41               	moviw [1]fsr1
 12446  0488  00C3               	movwf	??_recv_res_header+1
 12447  0489  0845               	movf	recv_res_header@req_transaction_id+1,w
 12448  048A  0643               	xorwf	??_recv_res_header+1,w
 12449  048B  1D03               	skipz
 12450  048C  2C8F               	goto	u3155
 12451  048D  0844               	movf	recv_res_header@req_transaction_id,w
 12452  048E  0642               	xorwf	??_recv_res_header,w
 12453  048F                     u3155:
 12454  048F  1903               	skipnz
 12455  0490  2C93               	goto	l5129
 12456                           
 12457                           ;nanomodbus.c: 330:             return NMBS_ERROR_INVALID_TCP_MBAP;
 12458  0491  30FA               	movlw	250
 12459  0492  0008               	return
 12460  0493                     l5129:
 12461                           
 12462                           ;nanomodbus.c: 333:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.
      +                          unit_id != req_unit_id)
 12463  0493  084B               	movf	recv_res_header@nmbs,w
 12464  0494  3E41               	addlw	65
 12465  0495  0086               	movwf	6
 12466  0496  3001               	movlw	1	; select bank2/3
 12467  0497  0087               	movwf	7
 12468  0498  0301               	decf	1,w
 12469  0499  1D03               	btfss	3,2
 12470  049A  2CA6               	goto	l5137
 12471  049B  084B               	movf	recv_res_header@nmbs,w
 12472  049C  3E32               	addlw	50
 12473  049D  0086               	movwf	6
 12474  049E  3001               	movlw	1	; select bank2/3
 12475  049F  0087               	movwf	7
 12476  04A0  0801               	movf	1,w
 12477  04A1  0646               	xorwf	recv_res_header@req_unit_id,w
 12478  04A2  1903               	skipnz
 12479  04A3  2CA6               	goto	l5137
 12480                           
 12481                           ;nanomodbus.c: 334:         return NMBS_ERROR_INVALID_UNIT_ID;
 12482  04A4  30F9               	movlw	249
 12483  04A5  0008               	return
 12484  04A6                     l5137:
 12485                           
 12486                           ;nanomodbus.c: 336:     if (nmbs->msg.fc != req_fc) {
 12487  04A6  084B               	movf	recv_res_header@nmbs,w
 12488  04A7  3E33               	addlw	51
 12489  04A8  0086               	movwf	6
 12490  04A9  3001               	movlw	1	; select bank2/3
 12491  04AA  0087               	movwf	7
 12492  04AB  0801               	movf	1,w
 12493  04AC  0648               	xorwf	recv_res_header@req_fc,w
 12494  04AD  1903               	skipnz
 12495  04AE  2CEA               	goto	l5173
 12496                           
 12497                           ;nanomodbus.c: 337:         if (nmbs->msg.fc - 0x80 == req_fc) {
 12498  04AF  084B               	movf	recv_res_header@nmbs,w
 12499  04B0  3E33               	addlw	51
 12500  04B1  0086               	movwf	6
 12501  04B2  3001               	movlw	1	; select bank2/3
 12502  04B3  0087               	movwf	7
 12503  04B4  0801               	movf	1,w
 12504  04B5  3E80               	addlw	128
 12505  04B6  00C2               	movwf	??_recv_res_header
 12506  04B7  30FF               	movlw	255
 12507  04B8  1803               	skipnc
 12508  04B9  3000               	movlw	0
 12509  04BA  00C3               	movwf	??_recv_res_header+1
 12510  04BB  0848               	movf	recv_res_header@req_fc,w
 12511  04BC  0642               	xorwf	??_recv_res_header,w
 12512  04BD  0443               	iorwf	??_recv_res_header+1,w
 12513  04BE  1D03               	skipz
 12514  04BF  2CE6               	goto	l5161
 12515                           
 12516                           ;nanomodbus.c: 338:             err = recv(nmbs, 1);
 12517  04C0  3001               	movlw	1
 12518  04C1  00B3               	movwf	recv@count
 12519  04C2  3000               	movlw	0
 12520  04C3  00B4               	movwf	recv@count+1
 12521  04C4  084B               	movf	recv_res_header@nmbs,w
 12522  04C5  318B  238F  3184   	fcall	_recv
 12523  04C8  00C2               	movwf	??_recv_res_header
 12524  04C9  0842               	movf	??_recv_res_header,w
 12525  04CA  00CA               	movwf	recv_res_header@err
 12526                           
 12527                           ;nanomodbus.c: 339:             if (err != NMBS_ERROR_NONE)
 12528  04CB  084A               	movf	recv_res_header@err,w
 12529  04CC  1D03               	btfss	3,2
 12530  04CD  2C75               	goto	l5117
 12531                           
 12532                           ;nanomodbus.c: 342:             uint8_t exception = get_1(nmbs);
 12533  04CE  084B               	movf	recv_res_header@nmbs,w
 12534  04CF  3189  217B  3184   	fcall	_get_1
 12535  04D2  00C2               	movwf	??_recv_res_header
 12536  04D3  0842               	movf	??_recv_res_header,w
 12537  04D4  00C9               	movwf	recv_res_header@exception
 12538                           
 12539                           ;nanomodbus.c: 343:             err = recv_msg_footer(nmbs);
 12540  04D5  084B               	movf	recv_res_header@nmbs,w
 12541  04D6  318D  25E9  3184   	fcall	_recv_msg_footer
 12542  04D9  00C2               	movwf	??_recv_res_header
 12543  04DA  0842               	movf	??_recv_res_header,w
 12544  04DB  00CA               	movwf	recv_res_header@err
 12545                           
 12546                           ;nanomodbus.c: 344:             if (err != NMBS_ERROR_NONE)
 12547  04DC  084A               	movf	recv_res_header@err,w
 12548  04DD  1D03               	btfss	3,2
 12549  04DE  2C75               	goto	l5117
 12550                           
 12551                           ;nanomodbus.c: 347:             if (exception < 1 || exception > 4)
 12552  04DF  0849               	movf	recv_res_header@exception,w
 12553  04E0  1903               	btfsc	3,2
 12554  04E1  2CE6               	goto	l5161
 12555  04E2  3005               	movlw	5
 12556  04E3  0249               	subwf	recv_res_header@exception,w
 12557  04E4  1C03               	skipc
 12558  04E5  2CE8               	goto	l5165
 12559  04E6                     l5161:
 12560                           
 12561                           ;nanomodbus.c: 348:                 return NMBS_ERROR_INVALID_RESPONSE;
 12562  04E6  30FE               	movlw	254
 12563  04E7  0008               	return
 12564  04E8                     l5165:
 12565                           
 12566                           ;nanomodbus.c: 351:             return (nmbs_error) exception;
 12567  04E8  0849               	movf	recv_res_header@exception,w
 12568  04E9  0008               	return
 12569  04EA                     l5173:
 12570                           
 12571                           ;nanomodbus.c: 359:     return NMBS_ERROR_NONE;
 12572  04EA  3000               	movlw	0
 12573  04EB  0008               	return
 12574  04EC                     __end_of_recv_res_header:
 12575                           
 12576                           	psect	text23
 12577  0F07                     __ptext23:	
 12578 ;; *************** function _recv_msg_header *****************
 12579 ;; Defined at:
 12580 ;;		line 221 in file "nanomodbus.c"
 12581 ;; Parameters:    Size  Location     Type
 12582 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12583 ;;		 -> main@nmbs(75), 
 12584 ;;  first_byte_r    1   26[BANK0 ] PTR _Bool 
 12585 ;;		 -> nmbs_server_poll@first_byte_received(1), recv_res_header@first_byte_received(1), 
 12586 ;; Auto vars:     Size  Location     Type
 12587 ;;  nmbs            1   29[BANK0 ] PTR struct nmbs_t
 12588 ;;		 -> main@nmbs(75), 
 12589 ;;  err             1   28[BANK0 ] enum E10802
 12590 ;; Return value:  Size  Location     Type
 12591 ;;                  1    wreg      enum E10802
 12592 ;; Registers used:
 12593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12594 ;; Tracked objects:
 12595 ;;		On entry : 3F/0
 12596 ;;		On exit  : 3F/0
 12597 ;;		Unchanged: 0/0
 12598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12599 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12600 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;Total ram usage:        4 bytes
 12604 ;; Hardware stack levels used: 1
 12605 ;; Hardware stack levels required when called: 8
 12606 ;; This function calls:
 12607 ;;		_get_1
 12608 ;;		_msg_state_reset
 12609 ;;		_recv
 12610 ;; This function is called by:
 12611 ;;		_recv_req_header
 12612 ;;		_recv_res_header
 12613 ;; This function uses a non-reentrant model
 12614 ;;
 12615                           
 12616  0F07                     _recv_msg_header:	
 12617                           ;psect for function _recv_msg_header
 12618                           
 12619                           
 12620                           ;incstack = 0
 12621                           ; Regs used in _recv_msg_header: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12622                           ;recv_msg_header@nmbs stored from wreg
 12623  0F07  00BD               	movwf	recv_msg_header@nmbs
 12624                           
 12625                           ;nanomodbus.c: 224:     msg_state_reset(nmbs);
 12626  0F08  083D               	movf	recv_msg_header@nmbs,w
 12627  0F09  318A  227B  318F   	fcall	_msg_state_reset
 12628                           
 12629                           ;nanomodbus.c: 226:     *first_byte_received = 0;
 12630  0F0C  083A               	movf	recv_msg_header@first_byte_received,w
 12631  0F0D  0086               	movwf	6
 12632  0F0E  0187               	clrf	7
 12633  0F0F  0181               	clrf	1
 12634                           
 12635                           ;nanomodbus.c: 228:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 12636  0F10  083D               	movf	recv_msg_header@nmbs,w
 12637  0F11  3E41               	addlw	65
 12638  0F12  0086               	movwf	6
 12639  0F13  3001               	movlw	1	; select bank2/3
 12640  0F14  0087               	movwf	7
 12641  0F15  0301               	decf	1,w
 12642  0F16  1D03               	btfss	3,2
 12643  0F17  2F52               	goto	l5089
 12644                           
 12645                           ;nanomodbus.c: 229:         nmbs_error err = recv(nmbs, 1);
 12646  0F18  3001               	movlw	1
 12647  0F19  00B3               	movwf	recv@count
 12648  0F1A  3000               	movlw	0
 12649  0F1B  00B4               	movwf	recv@count+1
 12650  0F1C  083D               	movf	recv_msg_header@nmbs,w
 12651  0F1D  318B  238F  318F   	fcall	_recv
 12652  0F20  00BB               	movwf	??_recv_msg_header
 12653  0F21  083B               	movf	??_recv_msg_header,w
 12654  0F22  00BC               	movwf	recv_msg_header@err
 12655                           
 12656                           ;nanomodbus.c: 231:         if (err != NMBS_ERROR_NONE)
 12657  0F23  083C               	movf	recv_msg_header@err,w
 12658  0F24  1903               	btfsc	3,2
 12659  0F25  2F28               	goto	l5075
 12660  0F26                     l5071:
 12661                           
 12662                           ;nanomodbus.c: 232:             return err;
 12663  0F26  083C               	movf	recv_msg_header@err,w
 12664  0F27  0008               	return
 12665  0F28                     l5075:
 12666                           
 12667                           ;nanomodbus.c: 234:         *first_byte_received = 1;
 12668  0F28  083A               	movf	recv_msg_header@first_byte_received,w
 12669  0F29  0086               	movwf	6
 12670  0F2A  0187               	clrf	7
 12671  0F2B  0181               	clrf	1
 12672  0F2C  0A81               	incf	1,f
 12673                           
 12674                           ;nanomodbus.c: 236:         nmbs->msg.unit_id = get_1(nmbs);
 12675  0F2D  083D               	movf	recv_msg_header@nmbs,w
 12676  0F2E  3189  217B  318F   	fcall	_get_1
 12677  0F31  00BB               	movwf	??_recv_msg_header
 12678  0F32  083D               	movf	recv_msg_header@nmbs,w
 12679  0F33  3E32               	addlw	50
 12680  0F34  0086               	movwf	6
 12681  0F35  3001               	movlw	1	; select bank2/3
 12682  0F36  0087               	movwf	7
 12683  0F37  083B               	movf	??_recv_msg_header,w
 12684  0F38  0081               	movwf	1
 12685                           
 12686                           ;nanomodbus.c: 238:         err = recv(nmbs, 1);
 12687  0F39  3001               	movlw	1
 12688  0F3A  00B3               	movwf	recv@count
 12689  0F3B  3000               	movlw	0
 12690  0F3C  00B4               	movwf	recv@count+1
 12691  0F3D  083D               	movf	recv_msg_header@nmbs,w
 12692  0F3E  318B  238F  318F   	fcall	_recv
 12693  0F41  00BB               	movwf	??_recv_msg_header
 12694  0F42  083B               	movf	??_recv_msg_header,w
 12695  0F43  00BC               	movwf	recv_msg_header@err
 12696                           
 12697                           ;nanomodbus.c: 239:         if (err != NMBS_ERROR_NONE)
 12698  0F44  083C               	movf	recv_msg_header@err,w
 12699  0F45  1D03               	btfss	3,2
 12700  0F46  2F26               	goto	l5071
 12701                           
 12702                           ;nanomodbus.c: 242:         nmbs->msg.fc = get_1(nmbs);
 12703  0F47  083D               	movf	recv_msg_header@nmbs,w
 12704  0F48  3189  217B         	fcall	_get_1
 12705  0F4A  00BB               	movwf	??_recv_msg_header
 12706  0F4B  083D               	movf	recv_msg_header@nmbs,w
 12707  0F4C  3E33               	addlw	51
 12708  0F4D  0086               	movwf	6
 12709  0F4E  3001               	movlw	1	; select bank2/3
 12710  0F4F  0087               	movwf	7
 12711  0F50  083B               	movf	??_recv_msg_header,w
 12712  0F51  0081               	movwf	1
 12713  0F52                     l5089:
 12714                           
 12715                           ;nanomodbus.c: 245:     return NMBS_ERROR_NONE;
 12716  0F52  3000               	movlw	0
 12717  0F53  0008               	return
 12718  0F54                     __end_of_recv_msg_header:
 12719                           
 12720                           	psect	text24
 12721  0A7B                     __ptext24:	
 12722 ;; *************** function _msg_state_reset *****************
 12723 ;; Defined at:
 12724 ;;		line 75 in file "nanomodbus.c"
 12725 ;; Parameters:    Size  Location     Type
 12726 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12727 ;;		 -> main@nmbs(75), 
 12728 ;; Auto vars:     Size  Location     Type
 12729 ;;  nmbs            1    1[BANK0 ] PTR struct nmbs_t
 12730 ;;		 -> main@nmbs(75), 
 12731 ;; Return value:  Size  Location     Type
 12732 ;;                  1    wreg      void 
 12733 ;; Registers used:
 12734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12735 ;; Tracked objects:
 12736 ;;		On entry : 3F/0
 12737 ;;		On exit  : 3F/0
 12738 ;;		Unchanged: 0/0
 12739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;Total ram usage:        1 bytes
 12745 ;; Hardware stack levels used: 1
 12746 ;; Hardware stack levels required when called: 6
 12747 ;; This function calls:
 12748 ;;		_msg_buf_reset
 12749 ;; This function is called by:
 12750 ;;		_recv_msg_header
 12751 ;;		_nmbs_server_poll
 12752 ;; This function uses a non-reentrant model
 12753 ;;
 12754                           
 12755  0A7B                     _msg_state_reset:	
 12756                           ;psect for function _msg_state_reset
 12757                           
 12758                           
 12759                           ;incstack = 0
 12760                           ; Regs used in _msg_state_reset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12761                           ;msg_state_reset@nmbs stored from wreg
 12762  0A7B  00A1               	movwf	msg_state_reset@nmbs
 12763                           
 12764                           ;nanomodbus.c: 76:     msg_buf_reset(nmbs);
 12765  0A7C  0821               	movf	msg_state_reset@nmbs,w
 12766  0A7D  3197  27D6         	fcall	_msg_buf_reset
 12767                           
 12768                           ;nanomodbus.c: 77:     nmbs->msg.unit_id = 0;
 12769  0A7F  0821               	movf	msg_state_reset@nmbs,w
 12770  0A80  3E32               	addlw	50
 12771  0A81  0086               	movwf	6
 12772  0A82  3001               	movlw	1	; select bank2/3
 12773  0A83  0087               	movwf	7
 12774  0A84  0181               	clrf	1
 12775                           
 12776                           ;nanomodbus.c: 78:     nmbs->msg.fc = 0;
 12777  0A85  0821               	movf	msg_state_reset@nmbs,w
 12778  0A86  3E33               	addlw	51
 12779  0A87  0086               	movwf	6
 12780  0A88  3001               	movlw	1	; select bank2/3
 12781  0A89  0087               	movwf	7
 12782  0A8A  0181               	clrf	1
 12783                           
 12784                           ;nanomodbus.c: 79:     nmbs->msg.transaction_id = 0;
 12785  0A8B  0821               	movf	msg_state_reset@nmbs,w
 12786  0A8C  3E34               	addlw	52
 12787  0A8D  0086               	movwf	6
 12788  0A8E  3001               	movlw	1	; select bank2/3
 12789  0A8F  0087               	movwf	7
 12790  0A90  3000               	movlw	0
 12791  0A91  3FC0               	movwi [0]fsr1
 12792  0A92  3FC1               	movwi [1]fsr1
 12793                           
 12794                           ;nanomodbus.c: 80:     nmbs->msg.broadcast = 0;
 12795  0A93  0821               	movf	msg_state_reset@nmbs,w
 12796  0A94  3E36               	addlw	54
 12797  0A95  0086               	movwf	6
 12798  0A96  3001               	movlw	1	; select bank2/3
 12799  0A97  0087               	movwf	7
 12800  0A98  0181               	clrf	1
 12801                           
 12802                           ;nanomodbus.c: 81:     nmbs->msg.ignored = 0;
 12803  0A99  0821               	movf	msg_state_reset@nmbs,w
 12804  0A9A  3E37               	addlw	55
 12805  0A9B  0086               	movwf	6
 12806  0A9C  3001               	movlw	1	; select bank2/3
 12807  0A9D  0087               	movwf	7
 12808  0A9E  0181               	clrf	1
 12809  0A9F  0008               	return
 12810  0AA0                     __end_of_msg_state_reset:
 12811                           
 12812                           	psect	text25
 12813  097B                     __ptext25:	
 12814 ;; *************** function _get_1 *****************
 12815 ;; Defined at:
 12816 ;;		line 39 in file "nanomodbus.c"
 12817 ;; Parameters:    Size  Location     Type
 12818 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12819 ;;		 -> main@nmbs(75), 
 12820 ;; Auto vars:     Size  Location     Type
 12821 ;;  nmbs            1    3[BANK0 ] PTR struct nmbs_t
 12822 ;;		 -> main@nmbs(75), 
 12823 ;;  result          1    2[BANK0 ] unsigned char 
 12824 ;; Return value:  Size  Location     Type
 12825 ;;                  1    wreg      unsigned char 
 12826 ;; Registers used:
 12827 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12828 ;; Tracked objects:
 12829 ;;		On entry : 3F/0
 12830 ;;		On exit  : 3F/0
 12831 ;;		Unchanged: 0/0
 12832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12834 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12835 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12836 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12837 ;;Total ram usage:        4 bytes
 12838 ;; Hardware stack levels used: 1
 12839 ;; Hardware stack levels required when called: 5
 12840 ;; This function calls:
 12841 ;;		Nothing
 12842 ;; This function is called by:
 12843 ;;		_recv_msg_header
 12844 ;;		_recv_res_header
 12845 ;;		_recv_read_registers_res
 12846 ;; This function uses a non-reentrant model
 12847 ;;
 12848                           
 12849  097B                     _get_1:	
 12850                           ;psect for function _get_1
 12851                           
 12852                           
 12853                           ;incstack = 0
 12854                           ; Regs used in _get_1: [wreg+fsr1l+fsr1h+status,2+status,0]
 12855                           ;get_1@nmbs stored from wreg
 12856  097B  00A3               	movwf	get_1@nmbs
 12857                           
 12858                           ;nanomodbus.c: 40:     uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 12859  097C  0823               	movf	get_1@nmbs,w
 12860  097D  3E30               	addlw	48
 12861  097E  0086               	movwf	6
 12862  097F  3001               	movlw	1	; select bank2/3
 12863  0980  0087               	movwf	7
 12864  0981  0801               	movf	1,w
 12865  0982  0723               	addwf	get_1@nmbs,w
 12866  0983  00A0               	movwf	??_get_1
 12867  0984  0820               	movf	??_get_1,w
 12868  0985  0086               	movwf	6
 12869  0986  3001               	movlw	1	; select bank2/3
 12870  0987  0087               	movwf	7
 12871  0988  0801               	movf	1,w
 12872  0989  00A1               	movwf	??_get_1+1
 12873  098A  0821               	movf	??_get_1+1,w
 12874  098B  00A2               	movwf	get_1@result
 12875                           
 12876                           ;nanomodbus.c: 41:     nmbs->msg.buf_idx++;
 12877  098C  0823               	movf	get_1@nmbs,w
 12878  098D  3E30               	addlw	48
 12879  098E  0086               	movwf	6
 12880  098F  3001               	movlw	1	; select bank2/3
 12881  0990  0087               	movwf	7
 12882  0991  3001               	movlw	1
 12883  0992  0781               	addwf	1,f
 12884  0993  3141               	addfsr 1,1
 12885  0994  1803               	skipnc
 12886  0995  0A81               	incf	1,f
 12887                           
 12888                           ;nanomodbus.c: 42:     return result;
 12889  0996  0822               	movf	get_1@result,w
 12890  0997  0008               	return
 12891  0998                     __end_of_get_1:
 12892                           
 12893                           	psect	text26
 12894  0DE9                     __ptext26:	
 12895 ;; *************** function _recv_msg_footer *****************
 12896 ;; Defined at:
 12897 ;;		line 201 in file "nanomodbus.c"
 12898 ;; Parameters:    Size  Location     Type
 12899 ;;  nmbs            1    wreg     PTR struct nmbs_t
 12900 ;;		 -> main@nmbs(75), 
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;  nmbs            1   33[BANK0 ] PTR struct nmbs_t
 12903 ;;		 -> main@nmbs(75), 
 12904 ;;  recv_crc        2   30[BANK0 ] unsigned short 
 12905 ;;  crc             2   28[BANK0 ] unsigned short 
 12906 ;;  err             1   32[BANK0 ] enum E10802
 12907 ;; Return value:  Size  Location     Type
 12908 ;;                  1    wreg      enum E10802
 12909 ;; Registers used:
 12910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12911 ;; Tracked objects:
 12912 ;;		On entry : 3E/0
 12913 ;;		On exit  : 3F/0
 12914 ;;		Unchanged: 0/0
 12915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12917 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12918 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12920 ;;Total ram usage:        8 bytes
 12921 ;; Hardware stack levels used: 1
 12922 ;; Hardware stack levels required when called: 8
 12923 ;; This function calls:
 12924 ;;		_get_2
 12925 ;;		_nmbs_crc_calc
 12926 ;;		_recv
 12927 ;; This function is called by:
 12928 ;;		_recv_res_header
 12929 ;;		_recv_read_registers_res
 12930 ;;		_recv_write_single_coil_res
 12931 ;;		_recv_write_single_register_res
 12932 ;;		_handle_read_registers
 12933 ;;		_handle_write_single_coil@nanomodbus$F2778
 12934 ;;		_handle_write_single_register@nanomodbus$F2807
 12935 ;; This function uses a non-reentrant model
 12936 ;;
 12937                           
 12938  0DE9                     _recv_msg_footer:	
 12939                           ;psect for function _recv_msg_footer
 12940                           
 12941                           
 12942                           ;incstack = 0
 12943                           ; Regs used in _recv_msg_footer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12944                           ;recv_msg_footer@nmbs stored from wreg
 12945  0DE9  0140               	movlb	0	; select bank0
 12946  0DEA  00C1               	movwf	recv_msg_footer@nmbs
 12947                           
 12948                           ;nanomodbus.c: 204:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 12949  0DEB  0841               	movf	recv_msg_footer@nmbs,w
 12950  0DEC  3E41               	addlw	65
 12951  0DED  0086               	movwf	6
 12952  0DEE  3001               	movlw	1	; select bank2/3
 12953  0DEF  0087               	movwf	7
 12954  0DF0  0301               	decf	1,w
 12955  0DF1  1D03               	btfss	3,2
 12956  0DF2  2E2C               	goto	l5057
 12957                           
 12958                           ;nanomodbus.c: 205:         uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_id
      +                          x);
 12959  0DF3  0841               	movf	recv_msg_footer@nmbs,w
 12960  0DF4  3E30               	addlw	48
 12961  0DF5  0086               	movwf	6
 12962  0DF6  3001               	movlw	1	; select bank2/3
 12963  0DF7  0087               	movwf	7
 12964  0DF8  3F40               	moviw [0]fsr1
 12965  0DF9  00BA               	movwf	??_recv_msg_footer
 12966  0DFA  3F41               	moviw [1]fsr1
 12967  0DFB  00BB               	movwf	??_recv_msg_footer+1
 12968  0DFC  083A               	movf	??_recv_msg_footer,w
 12969  0DFD  00A0               	movwf	nmbs_crc_calc@length
 12970  0DFE  083B               	movf	??_recv_msg_footer+1,w
 12971  0DFF  00A1               	movwf	nmbs_crc_calc@length+1
 12972  0E00  01A2               	clrf	nmbs_crc_calc@length+2
 12973  0E01  01A3               	clrf	nmbs_crc_calc@length+3
 12974  0E02  0841               	movf	recv_msg_footer@nmbs,w
 12975  0E03  318F  27A2  318D   	fcall	_nmbs_crc_calc
 12976  0E06  0821               	movf	?_nmbs_crc_calc+1,w
 12977  0E07  00BD               	movwf	recv_msg_footer@crc+1
 12978  0E08  0820               	movf	?_nmbs_crc_calc,w
 12979  0E09  00BC               	movwf	recv_msg_footer@crc
 12980                           
 12981                           ;nanomodbus.c: 207:         nmbs_error err = recv(nmbs, 2);
 12982  0E0A  3002               	movlw	2
 12983  0E0B  00B3               	movwf	recv@count
 12984  0E0C  3000               	movlw	0
 12985  0E0D  00B4               	movwf	recv@count+1
 12986  0E0E  0841               	movf	recv_msg_footer@nmbs,w
 12987  0E0F  318B  238F  318D   	fcall	_recv
 12988  0E12  00BA               	movwf	??_recv_msg_footer
 12989  0E13  083A               	movf	??_recv_msg_footer,w
 12990  0E14  00C0               	movwf	recv_msg_footer@err
 12991                           
 12992                           ;nanomodbus.c: 208:         if (err != NMBS_ERROR_NONE)
 12993  0E15  0840               	movf	recv_msg_footer@err,w
 12994  0E16  1903               	btfsc	3,2
 12995  0E17  2E1A               	goto	l5049
 12996                           
 12997                           ;nanomodbus.c: 209:             return err;
 12998  0E18  0840               	movf	recv_msg_footer@err,w
 12999  0E19  0008               	return
 13000  0E1A                     l5049:
 13001                           
 13002                           ;nanomodbus.c: 211:         uint16_t recv_crc = get_2(nmbs);
 13003  0E1A  0841               	movf	recv_msg_footer@nmbs,w
 13004  0E1B  318B  23C6  318D   	fcall	_get_2
 13005  0E1E  0821               	movf	?_get_2+1,w
 13006  0E1F  00BF               	movwf	recv_msg_footer@recv_crc+1
 13007  0E20  0820               	movf	?_get_2,w
 13008  0E21  00BE               	movwf	recv_msg_footer@recv_crc
 13009                           
 13010                           ;nanomodbus.c: 213:         if (recv_crc != crc)
 13011  0E22  083D               	movf	recv_msg_footer@crc+1,w
 13012  0E23  063F               	xorwf	recv_msg_footer@recv_crc+1,w
 13013  0E24  1D03               	skipz
 13014  0E25  2E28               	goto	u3065
 13015  0E26  083C               	movf	recv_msg_footer@crc,w
 13016  0E27  063E               	xorwf	recv_msg_footer@recv_crc,w
 13017  0E28                     u3065:
 13018  0E28  1903               	skipnz
 13019  0E29  2E2C               	goto	l5057
 13020                           
 13021                           ;nanomodbus.c: 214:             return NMBS_ERROR_CRC;
 13022  0E2A  30FB               	movlw	251
 13023  0E2B  0008               	return
 13024  0E2C                     l5057:
 13025                           
 13026                           ;nanomodbus.c: 217:     return NMBS_ERROR_NONE;
 13027  0E2C  3000               	movlw	0
 13028  0E2D  0008               	return
 13029  0E2E                     __end_of_recv_msg_footer:
 13030                           
 13031                           	psect	text27
 13032  0B8F                     __ptext27:	
 13033 ;; *************** function _recv *****************
 13034 ;; Defined at:
 13035 ;;		line 166 in file "nanomodbus.c"
 13036 ;; Parameters:    Size  Location     Type
 13037 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13038 ;;		 -> main@nmbs(75), 
 13039 ;;  count           2   19[BANK0 ] unsigned short 
 13040 ;; Auto vars:     Size  Location     Type
 13041 ;;  nmbs            1   25[BANK0 ] PTR struct nmbs_t
 13042 ;;		 -> main@nmbs(75), 
 13043 ;;  ret             1   24[BANK0 ] char 
 13044 ;; Return value:  Size  Location     Type
 13045 ;;                  1    wreg      enum E10802
 13046 ;; Registers used:
 13047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13048 ;; Tracked objects:
 13049 ;;		On entry : 3E/0
 13050 ;;		On exit  : 3F/0
 13051 ;;		Unchanged: 0/0
 13052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;Total ram usage:        7 bytes
 13058 ;; Hardware stack levels used: 1
 13059 ;; Hardware stack levels required when called: 7
 13060 ;; This function calls:
 13061 ;;		_read_serial
 13062 ;; This function is called by:
 13063 ;;		_recv_msg_footer
 13064 ;;		_recv_msg_header
 13065 ;;		_recv_res_header
 13066 ;;		_recv_read_registers_res
 13067 ;;		_recv_write_single_coil_res
 13068 ;;		_recv_write_single_register_res
 13069 ;;		_handle_read_registers
 13070 ;;		_handle_write_single_coil@nanomodbus$F2778
 13071 ;;		_handle_write_single_register@nanomodbus$F2807
 13072 ;; This function uses a non-reentrant model
 13073 ;;
 13074                           
 13075  0B8F                     _recv:	
 13076                           ;psect for function _recv
 13077                           
 13078                           
 13079                           ;incstack = 0
 13080                           ; Regs used in _recv: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13081                           ;recv@nmbs stored from wreg
 13082  0B8F  0140               	movlb	0	; select bank0
 13083  0B90  00B9               	movwf	recv@nmbs
 13084                           
 13085                           ;nanomodbus.c: 167:     int8_t ret =
 13086  0B91  0839               	movf	recv@nmbs,w
 13087  0B92  3E30               	addlw	48
 13088  0B93  0086               	movwf	6
 13089  0B94  3001               	movlw	1	; select bank2/3
 13090  0B95  0087               	movwf	7
 13091  0B96  0839               	movf	recv@nmbs,w
 13092  0B97  0701               	addwf	1,w
 13093  0B98  00B5               	movwf	??_recv
 13094  0B99  0835               	movf	??_recv,w
 13095  0B9A  00A2               	movwf	read_serial@buf
 13096  0B9B  0834               	movf	recv@count+1,w
 13097  0B9C  00A4               	movwf	read_serial@count+1
 13098  0B9D  0833               	movf	recv@count,w
 13099  0B9E  00A3               	movwf	read_serial@count
 13100  0B9F  3000               	movlw	0
 13101  0BA0  00A8               	movwf	read_serial@byte_timeout_ms+3
 13102  0BA1  3000               	movlw	0
 13103  0BA2  00A7               	movwf	read_serial@byte_timeout_ms+2
 13104  0BA3  3027               	movlw	39
 13105  0BA4  00A6               	movwf	read_serial@byte_timeout_ms+1
 13106  0BA5  300F               	movlw	15
 13107  0BA6  00A5               	movwf	read_serial@byte_timeout_ms
 13108  0BA7  0839               	movf	recv@nmbs,w
 13109  0BA8  3E46               	addlw	70
 13110  0BA9  0086               	movwf	6
 13111  0BAA  3001               	movlw	1	; select bank2/3
 13112  0BAB  0087               	movwf	7
 13113  0BAC  0801               	movf	1,w
 13114  0BAD  00B6               	movwf	??_recv+1
 13115  0BAE  0836               	movf	??_recv+1,w
 13116  0BAF  00A9               	movwf	read_serial@arg
 13117  0BB0  0839               	movf	recv@nmbs,w
 13118  0BB1  3E42               	addlw	66
 13119  0BB2  0086               	movwf	6
 13120  0BB3  3001               	movlw	1	; select bank2/3
 13121  0BB4  0087               	movwf	7
 13122  0BB5  3F41               	moviw [1]fsr1
 13123  0BB6  008A               	movwf	10
 13124  0BB7  3F40               	moviw [0]fsr1
 13125  0BB8  000A               	callw
 13126  0BB9  318B               	pagesel	$
 13127  0BBA  0822               	movf	?_read_serial,w
 13128  0BBB  00B7               	movwf	??_recv+2
 13129  0BBC  0837               	movf	??_recv+2,w
 13130  0BBD  00B8               	movwf	recv@ret
 13131                           
 13132                           ;nanomodbus.c: 170:     if (ret == (int8_t)count)
 13133  0BBE  0833               	movf	recv@count,w
 13134  0BBF  0638               	xorwf	recv@ret,w
 13135  0BC0  1D03               	skipz
 13136  0BC1  2BC4               	goto	l5007
 13137                           
 13138                           ;nanomodbus.c: 171:         return NMBS_ERROR_NONE;
 13139  0BC2  3000               	movlw	0
 13140  0BC3  0008               	return
 13141  0BC4                     l5007:
 13142                           
 13143                           ;nanomodbus.c: 180:     return NMBS_ERROR_TRANSPORT;
 13144  0BC4  30FC               	movlw	252
 13145  0BC5  0008               	return
 13146  0BC6                     __end_of_recv:
 13147                           
 13148                           	psect	text28
 13149  0D24                     __ptext28:	
 13150 ;; *************** function _read_serial *****************
 13151 ;; Defined at:
 13152 ;;		line 22 in file "modbus_imp.c"
 13153 ;; Parameters:    Size  Location     Type
 13154 ;;  buf             1    2[BANK0 ] PTR unsigned char 
 13155 ;;		 -> nmbs.msg.buf(48), nmbs.msg(56), main@nmbs(75), 
 13156 ;;  count           2    3[BANK0 ] unsigned short 
 13157 ;;  byte_timeout    4    5[BANK0 ] long 
 13158 ;;  arg             1    9[BANK0 ] PTR void 
 13159 ;;		 -> main@registers(13), 
 13160 ;; Auto vars:     Size  Location     Type
 13161 ;;  charCount       4   15[BANK0 ] long 
 13162 ;;  c               1   14[BANK0 ] unsigned char 
 13163 ;; Return value:  Size  Location     Type
 13164 ;;                  4    2[BANK0 ] long 
 13165 ;; Registers used:
 13166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13167 ;; Tracked objects:
 13168 ;;		On entry : 3F/0
 13169 ;;		On exit  : 3F/0
 13170 ;;		Unchanged: 0/0
 13171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13172 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13175 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13176 ;;Total ram usage:       17 bytes
 13177 ;; Hardware stack levels used: 1
 13178 ;; Hardware stack levels required when called: 6
 13179 ;; This function calls:
 13180 ;;		_EUSART1_Read
 13181 ;; This function is called by:
 13182 ;;		_main
 13183 ;;		_recv
 13184 ;;		_nmbs_server_poll
 13185 ;; This function uses a non-reentrant model
 13186 ;;
 13187                           
 13188  0D24                     _read_serial:	
 13189                           ;psect for function _read_serial
 13190                           
 13191                           
 13192                           ;modbus_imp.c: 24:     int32_t charCount = 0;
 13193                           
 13194                           ;incstack = 0
 13195                           ; Regs used in _read_serial: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13196  0D24  3000               	movlw	0
 13197  0D25  00B2               	movwf	read_serial@charCount+3
 13198  0D26  3000               	movlw	0
 13199  0D27  00B1               	movwf	read_serial@charCount+2
 13200  0D28  3000               	movlw	0
 13201  0D29  00B0               	movwf	read_serial@charCount+1
 13202  0D2A  3000               	movlw	0
 13203  0D2B  00AF               	movwf	read_serial@charCount
 13204  0D2C                     l4913:	
 13205                           ;modbus_imp.c: 25:     uint8_t c;;modbus_imp.c: 27:     while(charCount != count)
 13206                           
 13207                           
 13208                           ;modbus_imp.c: 27:     while(charCount != count)
 13209  0D2C  0823               	movf	read_serial@count,w
 13210  0D2D  00AA               	movwf	??_read_serial
 13211  0D2E  0824               	movf	read_serial@count+1,w
 13212  0D2F  00AB               	movwf	??_read_serial+1
 13213  0D30  01AC               	clrf	??_read_serial+2
 13214  0D31  01AD               	clrf	??_read_serial+3
 13215  0D32  0832               	movf	read_serial@charCount+3,w
 13216  0D33  062D               	xorwf	??_read_serial+3,w
 13217  0D34  1D03               	skipz
 13218  0D35  2D40               	goto	u2915
 13219  0D36  0831               	movf	read_serial@charCount+2,w
 13220  0D37  062C               	xorwf	??_read_serial+2,w
 13221  0D38  1D03               	skipz
 13222  0D39  2D40               	goto	u2915
 13223  0D3A  0830               	movf	read_serial@charCount+1,w
 13224  0D3B  062B               	xorwf	??_read_serial+1,w
 13225  0D3C  1D03               	skipz
 13226  0D3D  2D40               	goto	u2915
 13227  0D3E  082F               	movf	read_serial@charCount,w
 13228  0D3F  062A               	xorwf	??_read_serial,w
 13229  0D40                     u2915:
 13230  0D40  1903               	btfsc	3,2
 13231  0D41  2D5C               	goto	l4915
 13232                           
 13233                           ;modbus_imp.c: 28:     {;modbus_imp.c: 29:             c = EUSART1_Read();
 13234  0D42  3188  207D  318D   	fcall	_EUSART1_Read
 13235  0D45  00AA               	movwf	??_read_serial
 13236  0D46  082A               	movf	??_read_serial,w
 13237  0D47  00AE               	movwf	read_serial@c
 13238                           
 13239                           ;modbus_imp.c: 30:             buf[charCount++] = c;
 13240  0D48  082E               	movf	read_serial@c,w
 13241  0D49  00AA               	movwf	??_read_serial
 13242  0D4A  082F               	movf	read_serial@charCount,w
 13243  0D4B  0722               	addwf	read_serial@buf,w
 13244  0D4C  00AB               	movwf	??_read_serial+1
 13245  0D4D  082B               	movf	??_read_serial+1,w
 13246  0D4E  0086               	movwf	6
 13247  0D4F  3001               	movlw	1	; select bank2/3
 13248  0D50  0087               	movwf	7
 13249  0D51  082A               	movf	??_read_serial,w
 13250  0D52  0081               	movwf	1
 13251  0D53  3001               	movlw	1
 13252  0D54  07AF               	addwf	read_serial@charCount,f
 13253  0D55  3000               	movlw	0
 13254  0D56  3DB0               	addwfc	read_serial@charCount+1,f
 13255  0D57  3000               	movlw	0
 13256  0D58  3DB1               	addwfc	read_serial@charCount+2,f
 13257  0D59  3000               	movlw	0
 13258  0D5A  3DB2               	addwfc	read_serial@charCount+3,f
 13259  0D5B  2D2C               	goto	l4913
 13260  0D5C                     l4915:
 13261                           
 13262                           ;modbus_imp.c: 34:     return charCount;
 13263  0D5C  0832               	movf	read_serial@charCount+3,w
 13264  0D5D  00A5               	movwf	?_read_serial+3
 13265  0D5E  0831               	movf	read_serial@charCount+2,w
 13266  0D5F  00A4               	movwf	?_read_serial+2
 13267  0D60  0830               	movf	read_serial@charCount+1,w
 13268  0D61  00A3               	movwf	?_read_serial+1
 13269  0D62  082F               	movf	read_serial@charCount,w
 13270  0D63  00A2               	movwf	?_read_serial
 13271  0D64  0008               	return
 13272  0D65                     __end_of_read_serial:
 13273                           
 13274                           	psect	text29
 13275  087D                     __ptext29:	
 13276 ;; *************** function _EUSART1_Read *****************
 13277 ;; Defined at:
 13278 ;;		line 238 in file "mcc_generated_files/eusart1.c"
 13279 ;; Parameters:    Size  Location     Type
 13280 ;;		None
 13281 ;; Auto vars:     Size  Location     Type
 13282 ;;  readValue       1    1[BANK0 ] unsigned char 
 13283 ;; Return value:  Size  Location     Type
 13284 ;;                  1    wreg      unsigned char 
 13285 ;; Registers used:
 13286 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13287 ;; Tracked objects:
 13288 ;;		On entry : 3F/0
 13289 ;;		On exit  : 3F/0
 13290 ;;		Unchanged: 0/0
 13291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13296 ;;Total ram usage:        2 bytes
 13297 ;; Hardware stack levels used: 1
 13298 ;; Hardware stack levels required when called: 5
 13299 ;; This function calls:
 13300 ;;		Nothing
 13301 ;; This function is called by:
 13302 ;;		_read_serial
 13303 ;; This function uses a non-reentrant model
 13304 ;;
 13305                           
 13306  087D                     _EUSART1_Read:	
 13307                           ;psect for function _EUSART1_Read
 13308                           
 13309                           
 13310                           ;mcc_generated_files/eusart1.c: 249:     readValue = eusart1RxBuffer[eusart1RxTail];
 13311                           
 13312                           ;incstack = 0
 13313                           ; Regs used in _EUSART1_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 13314  087D  0873               	movf	_eusart1RxTail,w
 13315  087E  3E44               	addlw	(low (_eusart1RxBuffer| (0+256)))& (0+255)
 13316  087F  0086               	movwf	6
 13317  0880  3001               	movlw	1	; select bank2/3
 13318  0881  0087               	movwf	7
 13319  0882  0801               	movf	1,w
 13320  0883  00A0               	movwf	??_EUSART1_Read
 13321  0884  0820               	movf	??_EUSART1_Read,w
 13322  0885  00A1               	movwf	EUSART1_Read@readValue
 13323                           
 13324                           ;mcc_generated_files/eusart1.c: 250:     eusart1RxTail = (eusart1RxTail + 1) % 8;
 13325  0886  0873               	movf	_eusart1RxTail,w	;volatile
 13326  0887  3E01               	addlw	1
 13327  0888  3907               	andlw	7
 13328  0889  00A0               	movwf	??_EUSART1_Read
 13329  088A  0820               	movf	??_EUSART1_Read,w
 13330  088B  00F3               	movwf	_eusart1RxTail	;volatile
 13331                           
 13332                           ;mcc_generated_files/eusart1.c: 255:     return readValue;
 13333  088C  0821               	movf	EUSART1_Read@readValue,w
 13334  088D  0008               	return
 13335  088E                     __end_of_EUSART1_Read:
 13336                           
 13337                           	psect	text30
 13338  0FA2                     __ptext30:	
 13339 ;; *************** function _nmbs_crc_calc *****************
 13340 ;; Defined at:
 13341 ;;		line 148 in file "nanomodbus.c"
 13342 ;; Parameters:    Size  Location     Type
 13343 ;;  data            1    wreg     PTR const unsigned char 
 13344 ;;		 -> nmbs.msg.buf(48), 
 13345 ;;  length          4    0[BANK0 ] unsigned long 
 13346 ;; Auto vars:     Size  Location     Type
 13347 ;;  data            1    8[BANK0 ] PTR const unsigned char 
 13348 ;;		 -> nmbs.msg.buf(48), 
 13349 ;;  j               2   13[BANK0 ] int 
 13350 ;;  i               4    9[BANK0 ] unsigned long 
 13351 ;;  crc             2   15[BANK0 ] unsigned short 
 13352 ;; Return value:  Size  Location     Type
 13353 ;;                  2    0[BANK0 ] unsigned short 
 13354 ;; Registers used:
 13355 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13356 ;; Tracked objects:
 13357 ;;		On entry : 3F/0
 13358 ;;		On exit  : 3F/0
 13359 ;;		Unchanged: 0/0
 13360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13361 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13362 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13363 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13364 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13365 ;;Total ram usage:       17 bytes
 13366 ;; Hardware stack levels used: 1
 13367 ;; Hardware stack levels required when called: 5
 13368 ;; This function calls:
 13369 ;;		Nothing
 13370 ;; This function is called by:
 13371 ;;		_recv_msg_footer
 13372 ;;		_send_msg
 13373 ;; This function uses a non-reentrant model
 13374 ;;
 13375                           
 13376  0FA2                     _nmbs_crc_calc:	
 13377                           ;psect for function _nmbs_crc_calc
 13378                           
 13379                           
 13380                           ;incstack = 0
 13381                           ; Regs used in _nmbs_crc_calc: [wreg+fsr1l+fsr1h+status,2+status,0]
 13382                           ;nmbs_crc_calc@data stored from wreg
 13383  0FA2  00A8               	movwf	nmbs_crc_calc@data
 13384                           
 13385                           ;nanomodbus.c: 149:     uint16_t crc = 0xFFFF;
 13386  0FA3  30FF               	movlw	255
 13387  0FA4  00AF               	movwf	nmbs_crc_calc@crc
 13388  0FA5  30FF               	movlw	255
 13389  0FA6  00B0               	movwf	nmbs_crc_calc@crc+1
 13390                           
 13391                           ;nanomodbus.c: 150:     for (uint32_t i = 0; i < length; i++) {
 13392  0FA7  3000               	movlw	0
 13393  0FA8  00AC               	movwf	nmbs_crc_calc@i+3
 13394  0FA9  3000               	movlw	0
 13395  0FAA  00AB               	movwf	nmbs_crc_calc@i+2
 13396  0FAB  3000               	movlw	0
 13397  0FAC  00AA               	movwf	nmbs_crc_calc@i+1
 13398  0FAD  3000               	movlw	0
 13399  0FAE  00A9               	movwf	nmbs_crc_calc@i
 13400  0FAF                     l991:
 13401  0FAF  0823               	movf	nmbs_crc_calc@length+3,w
 13402  0FB0  022C               	subwf	nmbs_crc_calc@i+3,w
 13403  0FB1  1D03               	skipz
 13404  0FB2  2FBD               	goto	u2995
 13405  0FB3  0822               	movf	nmbs_crc_calc@length+2,w
 13406  0FB4  022B               	subwf	nmbs_crc_calc@i+2,w
 13407  0FB5  1D03               	skipz
 13408  0FB6  2FBD               	goto	u2995
 13409  0FB7  0821               	movf	nmbs_crc_calc@length+1,w
 13410  0FB8  022A               	subwf	nmbs_crc_calc@i+1,w
 13411  0FB9  1D03               	skipz
 13412  0FBA  2FBD               	goto	u2995
 13413  0FBB  0820               	movf	nmbs_crc_calc@length,w
 13414  0FBC  0229               	subwf	nmbs_crc_calc@i,w
 13415  0FBD                     u2995:
 13416  0FBD  1803               	btfsc	3,0
 13417  0FBE  2FF3               	goto	l4995
 13418                           
 13419                           ;nanomodbus.c: 151:         crc ^= (uint16_t) data[i];
 13420  0FBF  0829               	movf	nmbs_crc_calc@i,w
 13421  0FC0  0728               	addwf	nmbs_crc_calc@data,w
 13422  0FC1  00A4               	movwf	??_nmbs_crc_calc
 13423  0FC2  0824               	movf	??_nmbs_crc_calc,w
 13424  0FC3  0086               	movwf	6
 13425  0FC4  3001               	movlw	1	; select bank2/3
 13426  0FC5  0087               	movwf	7
 13427  0FC6  0801               	movf	1,w
 13428  0FC7  00A5               	movwf	??_nmbs_crc_calc+1
 13429  0FC8  01A6               	clrf	??_nmbs_crc_calc+2
 13430  0FC9  0825               	movf	??_nmbs_crc_calc+1,w
 13431  0FCA  06AF               	xorwf	nmbs_crc_calc@crc,f
 13432  0FCB  0826               	movf	??_nmbs_crc_calc+2,w
 13433  0FCC  06B0               	xorwf	nmbs_crc_calc@crc+1,f
 13434                           
 13435                           ;nanomodbus.c: 152:         for (int j = 8; j != 0; j--) {
 13436  0FCD  3008               	movlw	8
 13437  0FCE  00AD               	movwf	nmbs_crc_calc@j
 13438  0FCF  3000               	movlw	0
 13439  0FD0  00AE               	movwf	nmbs_crc_calc@j+1
 13440  0FD1                     l993:
 13441                           
 13442                           ;nanomodbus.c: 153:             if ((crc & 0x0001) != 0) {
 13443  0FD1  1C2F               	btfss	nmbs_crc_calc@crc,0
 13444  0FD2  2FDD               	goto	l4987
 13445                           
 13446                           ;nanomodbus.c: 154:                 crc >>= 1;
 13447  0FD3  3001               	movlw	1
 13448  0FD4                     u2965:
 13449  0FD4  36B0               	lsrf	nmbs_crc_calc@crc+1,f
 13450  0FD5  0CAF               	rrf	nmbs_crc_calc@crc,f
 13451  0FD6  0B89               	decfsz	9,f
 13452  0FD7  2FD4               	goto	u2965
 13453                           
 13454                           ;nanomodbus.c: 155:                 crc ^= 0xA001;
 13455  0FD8  3001               	movlw	1
 13456  0FD9  06AF               	xorwf	nmbs_crc_calc@crc,f
 13457  0FDA  30A0               	movlw	160
 13458  0FDB  06B0               	xorwf	nmbs_crc_calc@crc+1,f
 13459                           
 13460                           ;nanomodbus.c: 156:             }
 13461  0FDC  2FE2               	goto	l4989
 13462  0FDD                     l4987:
 13463                           
 13464                           ;nanomodbus.c: 158:                 crc >>= 1;
 13465  0FDD  3001               	movlw	1
 13466  0FDE                     u2975:
 13467  0FDE  36B0               	lsrf	nmbs_crc_calc@crc+1,f
 13468  0FDF  0CAF               	rrf	nmbs_crc_calc@crc,f
 13469  0FE0  0B89               	decfsz	9,f
 13470  0FE1  2FDE               	goto	u2975
 13471  0FE2                     l4989:
 13472                           
 13473                           ;nanomodbus.c: 159:         }
 13474  0FE2  30FF               	movlw	255
 13475  0FE3  07AD               	addwf	nmbs_crc_calc@j,f
 13476  0FE4  30FF               	movlw	255
 13477  0FE5  3DAE               	addwfc	nmbs_crc_calc@j+1,f
 13478  0FE6  082D               	movf	nmbs_crc_calc@j,w
 13479  0FE7  042E               	iorwf	nmbs_crc_calc@j+1,w
 13480  0FE8  1D03               	btfss	3,2
 13481  0FE9  2FD1               	goto	l993
 13482                           
 13483                           ;nanomodbus.c: 160:     }
 13484  0FEA  3001               	movlw	1
 13485  0FEB  07A9               	addwf	nmbs_crc_calc@i,f
 13486  0FEC  3000               	movlw	0
 13487  0FED  3DAA               	addwfc	nmbs_crc_calc@i+1,f
 13488  0FEE  3000               	movlw	0
 13489  0FEF  3DAB               	addwfc	nmbs_crc_calc@i+2,f
 13490  0FF0  3000               	movlw	0
 13491  0FF1  3DAC               	addwfc	nmbs_crc_calc@i+3,f
 13492  0FF2  2FAF               	goto	l991
 13493  0FF3                     l4995:
 13494                           
 13495                           ;nanomodbus.c: 162:     return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 13496  0FF3  0830               	movf	nmbs_crc_calc@crc+1,w
 13497  0FF4  00A4               	movwf	??_nmbs_crc_calc
 13498  0FF5  01A5               	clrf	??_nmbs_crc_calc+1
 13499  0FF6  082F               	movf	nmbs_crc_calc@crc,w
 13500  0FF7  00A7               	movwf	??_nmbs_crc_calc+3
 13501  0FF8  01A6               	clrf	??_nmbs_crc_calc+2
 13502  0FF9  0824               	movf	??_nmbs_crc_calc,w
 13503  0FFA  0426               	iorwf	??_nmbs_crc_calc+2,w
 13504  0FFB  00A0               	movwf	?_nmbs_crc_calc
 13505  0FFC  0825               	movf	??_nmbs_crc_calc+1,w
 13506  0FFD  0427               	iorwf	??_nmbs_crc_calc+3,w
 13507  0FFE  00A1               	movwf	?_nmbs_crc_calc+1
 13508  0FFF  0008               	return
 13509  1000                     __end_of_nmbs_crc_calc:
 13510                           
 13511                           	psect	text31
 13512  0BC6                     __ptext31:	
 13513 ;; *************** function _get_2 *****************
 13514 ;; Defined at:
 13515 ;;		line 56 in file "nanomodbus.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13518 ;;		 -> main@nmbs(75), 
 13519 ;; Auto vars:     Size  Location     Type
 13520 ;;  nmbs            1   11[BANK0 ] PTR struct nmbs_t
 13521 ;;		 -> main@nmbs(75), 
 13522 ;;  result          2    9[BANK0 ] unsigned short 
 13523 ;; Return value:  Size  Location     Type
 13524 ;;                  2    0[BANK0 ] unsigned short 
 13525 ;; Registers used:
 13526 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13527 ;; Tracked objects:
 13528 ;;		On entry : 3E/0
 13529 ;;		On exit  : 3F/0
 13530 ;;		Unchanged: 0/0
 13531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13532 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;Total ram usage:       12 bytes
 13537 ;; Hardware stack levels used: 1
 13538 ;; Hardware stack levels required when called: 5
 13539 ;; This function calls:
 13540 ;;		Nothing
 13541 ;; This function is called by:
 13542 ;;		_recv_msg_footer
 13543 ;;		_recv_read_registers_res
 13544 ;;		_recv_write_single_coil_res
 13545 ;;		_recv_write_single_register_res
 13546 ;;		_handle_read_registers
 13547 ;;		_handle_write_single_coil@nanomodbus$F2778
 13548 ;;		_handle_write_single_register@nanomodbus$F2807
 13549 ;; This function uses a non-reentrant model
 13550 ;;
 13551                           
 13552  0BC6                     _get_2:	
 13553                           ;psect for function _get_2
 13554                           
 13555                           
 13556                           ;incstack = 0
 13557                           ; Regs used in _get_2: [wreg+fsr1l+fsr1h+status,2+status,0]
 13558                           ;get_2@nmbs stored from wreg
 13559  0BC6  0140               	movlb	0	; select bank0
 13560  0BC7  00AB               	movwf	get_2@nmbs
 13561                           
 13562                           ;nanomodbus.c: 57:     uint16_t result =
 13563  0BC8  082B               	movf	get_2@nmbs,w
 13564  0BC9  3E30               	addlw	48
 13565  0BCA  0086               	movwf	6
 13566  0BCB  3001               	movlw	1	; select bank2/3
 13567  0BCC  0087               	movwf	7
 13568  0BCD  0801               	movf	1,w
 13569  0BCE  072B               	addwf	get_2@nmbs,w
 13570  0BCF  00A2               	movwf	??_get_2
 13571  0BD0  0A22               	incf	??_get_2,w
 13572  0BD1  0086               	movwf	6
 13573  0BD2  3001               	movlw	1	; select bank2/3
 13574  0BD3  0087               	movwf	7
 13575  0BD4  0801               	movf	1,w
 13576  0BD5  00A3               	movwf	??_get_2+1
 13577  0BD6  01A4               	clrf	??_get_2+2
 13578  0BD7  082B               	movf	get_2@nmbs,w
 13579  0BD8  3E30               	addlw	48
 13580  0BD9  0086               	movwf	6
 13581  0BDA  3001               	movlw	1	; select bank2/3
 13582  0BDB  0087               	movwf	7
 13583  0BDC  0801               	movf	1,w
 13584  0BDD  072B               	addwf	get_2@nmbs,w
 13585  0BDE  00A5               	movwf	??_get_2+3
 13586  0BDF  0825               	movf	??_get_2+3,w
 13587  0BE0  0086               	movwf	6
 13588  0BE1  3001               	movlw	1	; select bank2/3
 13589  0BE2  0087               	movwf	7
 13590  0BE3  0801               	movf	1,w
 13591  0BE4  00A6               	movwf	??_get_2+4
 13592  0BE5  01A7               	clrf	??_get_2+5
 13593  0BE6  0826               	movf	??_get_2+4,w
 13594  0BE7  00A7               	movwf	??_get_2+5
 13595  0BE8  01A6               	clrf	??_get_2+4
 13596  0BE9  0823               	movf	??_get_2+1,w
 13597  0BEA  0426               	iorwf	??_get_2+4,w
 13598  0BEB  00A9               	movwf	get_2@result
 13599  0BEC  0824               	movf	??_get_2+2,w
 13600  0BED  0427               	iorwf	??_get_2+5,w
 13601  0BEE  00AA               	movwf	get_2@result+1
 13602                           
 13603                           ;nanomodbus.c: 59:     nmbs->msg.buf_idx += 2;
 13604  0BEF  082B               	movf	get_2@nmbs,w
 13605  0BF0  3E30               	addlw	48
 13606  0BF1  0086               	movwf	6
 13607  0BF2  3001               	movlw	1	; select bank2/3
 13608  0BF3  0087               	movwf	7
 13609  0BF4  3002               	movlw	2
 13610  0BF5  0781               	addwf	1,f
 13611  0BF6  3141               	addfsr 1,1
 13612  0BF7  1803               	skipnc
 13613  0BF8  0A81               	incf	1,f
 13614                           
 13615                           ;nanomodbus.c: 60:     return result;
 13616  0BF9  082A               	movf	get_2@result+1,w
 13617  0BFA  00A1               	movwf	?_get_2+1
 13618  0BFB  0829               	movf	get_2@result,w
 13619  0BFC  00A0               	movwf	?_get_2
 13620  0BFD  0008               	return
 13621  0BFE                     __end_of_get_2:
 13622                           
 13623                           	psect	text32
 13624  17E0                     __ptext32:	
 13625 ;; *************** function _put_res_header *****************
 13626 ;; Defined at:
 13627 ;;		line 300 in file "nanomodbus.c"
 13628 ;; Parameters:    Size  Location     Type
 13629 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13630 ;;		 -> main@nmbs(75), 
 13631 ;;  data_length     2    9[BANK0 ] unsigned short 
 13632 ;; Auto vars:     Size  Location     Type
 13633 ;;  nmbs            1   11[BANK0 ] PTR struct nmbs_t
 13634 ;;		 -> main@nmbs(75), 
 13635 ;; Return value:  Size  Location     Type
 13636 ;;                  1    wreg      void 
 13637 ;; Registers used:
 13638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13639 ;; Tracked objects:
 13640 ;;		On entry : 3E/0
 13641 ;;		On exit  : 3F/0
 13642 ;;		Unchanged: 0/0
 13643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13644 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13647 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13648 ;;Total ram usage:        3 bytes
 13649 ;; Hardware stack levels used: 1
 13650 ;; Hardware stack levels required when called: 7
 13651 ;; This function calls:
 13652 ;;		_put_msg_header
 13653 ;; This function is called by:
 13654 ;;		_handle_read_registers
 13655 ;;		_handle_write_single_coil@nanomodbus$F2778
 13656 ;;		_handle_write_single_register@nanomodbus$F2807
 13657 ;; This function uses a non-reentrant model
 13658 ;;
 13659                           
 13660  17E0                     _put_res_header:	
 13661                           ;psect for function _put_res_header
 13662                           
 13663                           
 13664                           ;incstack = 0
 13665                           ; Regs used in _put_res_header: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13666                           ;put_res_header@nmbs stored from wreg
 13667  17E0  0140               	movlb	0	; select bank0
 13668  17E1  00AB               	movwf	put_res_header@nmbs
 13669                           
 13670                           ;nanomodbus.c: 301:     put_msg_header(nmbs, data_length);
 13671  17E2  082A               	movf	put_res_header@data_length+1,w
 13672  17E3  00A6               	movwf	put_msg_header@data_length+1
 13673  17E4  0829               	movf	put_res_header@data_length,w
 13674  17E5  00A5               	movwf	put_msg_header@data_length
 13675  17E6  082B               	movf	put_res_header@nmbs,w
 13676  17E7  318F  2754         	fcall	_put_msg_header
 13677  17E9  0008               	return
 13678  17EA                     __end_of_put_res_header:
 13679                           
 13680                           	psect	text33
 13681  0F54                     __ptext33:	
 13682 ;; *************** function _put_msg_header *****************
 13683 ;; Defined at:
 13684 ;;		line 249 in file "nanomodbus.c"
 13685 ;; Parameters:    Size  Location     Type
 13686 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13687 ;;		 -> main@nmbs(75), 
 13688 ;;  data_length     2    5[BANK0 ] unsigned short 
 13689 ;; Auto vars:     Size  Location     Type
 13690 ;;  nmbs            1    8[BANK0 ] PTR struct nmbs_t
 13691 ;;		 -> main@nmbs(75), 
 13692 ;; Return value:  Size  Location     Type
 13693 ;;                  1    wreg      void 
 13694 ;; Registers used:
 13695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13696 ;; Tracked objects:
 13697 ;;		On entry : 3F/0
 13698 ;;		On exit  : 3F/0
 13699 ;;		Unchanged: 0/0
 13700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13701 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;Total ram usage:        4 bytes
 13706 ;; Hardware stack levels used: 1
 13707 ;; Hardware stack levels required when called: 6
 13708 ;; This function calls:
 13709 ;;		_msg_buf_reset
 13710 ;;		_put_1
 13711 ;;		_put_2
 13712 ;; This function is called by:
 13713 ;;		_put_res_header
 13714 ;;		_send_exception_msg
 13715 ;; This function uses a non-reentrant model
 13716 ;;
 13717                           
 13718  0F54                     _put_msg_header:	
 13719                           ;psect for function _put_msg_header
 13720                           
 13721                           
 13722                           ;incstack = 0
 13723                           ; Regs used in _put_msg_header: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13724                           ;put_msg_header@nmbs stored from wreg
 13725  0F54  00A8               	movwf	put_msg_header@nmbs
 13726                           
 13727                           ;nanomodbus.c: 250:     msg_buf_reset(nmbs);
 13728  0F55  0828               	movf	put_msg_header@nmbs,w
 13729  0F56  3197  27D6  318F   	fcall	_msg_buf_reset
 13730                           
 13731                           ;nanomodbus.c: 252:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 13732  0F59  0828               	movf	put_msg_header@nmbs,w
 13733  0F5A  3E41               	addlw	65
 13734  0F5B  0086               	movwf	6
 13735  0F5C  3001               	movlw	1	; select bank2/3
 13736  0F5D  0087               	movwf	7
 13737  0F5E  0301               	decf	1,w
 13738  0F5F  1903               	btfsc	3,2
 13739  0F60  2F88               	goto	L6
 13740                           
 13741                           ;nanomodbus.c: 254:     }
 13742                           
 13743                           ;nanomodbus.c: 253:         put_1(nmbs, nmbs->msg.unit_id);
 13744  0F61  0828               	movf	put_msg_header@nmbs,w
 13745  0F62  3E41               	addlw	65
 13746  0F63  0086               	movwf	6
 13747  0F64  3001               	movlw	1	; select bank2/3
 13748  0F65  0087               	movwf	7
 13749  0F66  3002               	movlw	2
 13750  0F67  0601               	xorwf	1,w
 13751  0F68  1D03               	btfss	3,2
 13752  0F69  2F95               	goto	l1024
 13753                           
 13754                           ;nanomodbus.c: 256:         put_2(nmbs, nmbs->msg.transaction_id);
 13755  0F6A  0828               	movf	put_msg_header@nmbs,w
 13756  0F6B  3E34               	addlw	52
 13757  0F6C  0086               	movwf	6
 13758  0F6D  3001               	movlw	1	; select bank2/3
 13759  0F6E  0087               	movwf	7
 13760  0F6F  3F40               	moviw [0]fsr1
 13761  0F70  00A0               	movwf	put_2@data
 13762  0F71  3F41               	moviw [1]fsr1
 13763  0F72  00A1               	movwf	put_2@data+1
 13764  0F73  0828               	movf	put_msg_header@nmbs,w
 13765  0F74  318A  22C7  318F   	fcall	_put_2
 13766                           
 13767                           ;nanomodbus.c: 257:         put_2(nmbs, 0);
 13768  0F77  3000               	movlw	0
 13769  0F78  00A0               	movwf	put_2@data
 13770  0F79  00A1               	movwf	put_2@data+1
 13771  0F7A  0828               	movf	put_msg_header@nmbs,w
 13772  0F7B  318A  22C7  318F   	fcall	_put_2
 13773                           
 13774                           ;nanomodbus.c: 258:         put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 13775  0F7E  0825               	movf	put_msg_header@data_length,w
 13776  0F7F  3E02               	addlw	2
 13777  0F80  00A0               	movwf	put_2@data
 13778  0F81  3000               	movlw	0
 13779  0F82  3D26               	addwfc	put_msg_header@data_length+1,w
 13780  0F83  00A1               	movwf	put_2@data+1
 13781  0F84  0828               	movf	put_msg_header@nmbs,w
 13782  0F85  318A  22C7  318F   	fcall	_put_2
 13783  0F88                     L6:
 13784                           
 13785                           ;nanomodbus.c: 259:         put_1(nmbs, nmbs->msg.unit_id);
 13786  0F88  0828               	movf	put_msg_header@nmbs,w
 13787  0F89  3E32               	addlw	50
 13788  0F8A  0086               	movwf	6
 13789  0F8B  3001               	movlw	1	; select bank2/3
 13790  0F8C  0087               	movwf	7
 13791  0F8D  0801               	movf	1,w
 13792  0F8E  00A7               	movwf	??_put_msg_header
 13793  0F8F  0827               	movf	??_put_msg_header,w
 13794  0F90  00A0               	movwf	put_1@data
 13795  0F91  0828               	movf	put_msg_header@nmbs,w
 13796  0F92  3189  215E  318F   	fcall	_put_1
 13797  0F95                     l1024:
 13798                           
 13799                           ;nanomodbus.c: 262:     put_1(nmbs, nmbs->msg.fc);
 13800  0F95  0828               	movf	put_msg_header@nmbs,w
 13801  0F96  3E33               	addlw	51
 13802  0F97  0086               	movwf	6
 13803  0F98  3001               	movlw	1	; select bank2/3
 13804  0F99  0087               	movwf	7
 13805  0F9A  0801               	movf	1,w
 13806  0F9B  00A7               	movwf	??_put_msg_header
 13807  0F9C  0827               	movf	??_put_msg_header,w
 13808  0F9D  00A0               	movwf	put_1@data
 13809  0F9E  0828               	movf	put_msg_header@nmbs,w
 13810  0F9F  3189  215E         	fcall	_put_1
 13811  0FA1  0008               	return
 13812  0FA2                     __end_of_put_msg_header:
 13813                           
 13814                           	psect	text34
 13815  0AC7                     __ptext34:	
 13816 ;; *************** function _put_2 *****************
 13817 ;; Defined at:
 13818 ;;		line 64 in file "nanomodbus.c"
 13819 ;; Parameters:    Size  Location     Type
 13820 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13821 ;;		 -> main@nmbs(75), 
 13822 ;;  data            2    0[BANK0 ] unsigned short 
 13823 ;; Auto vars:     Size  Location     Type
 13824 ;;  nmbs            1    4[BANK0 ] PTR struct nmbs_t
 13825 ;;		 -> main@nmbs(75), 
 13826 ;; Return value:  Size  Location     Type
 13827 ;;                  1    wreg      void 
 13828 ;; Registers used:
 13829 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13830 ;; Tracked objects:
 13831 ;;		On entry : 3E/0
 13832 ;;		On exit  : 3F/0
 13833 ;;		Unchanged: 0/0
 13834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13835 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13838 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;Total ram usage:        5 bytes
 13840 ;; Hardware stack levels used: 1
 13841 ;; Hardware stack levels required when called: 5
 13842 ;; This function calls:
 13843 ;;		Nothing
 13844 ;; This function is called by:
 13845 ;;		_put_msg_header
 13846 ;;		_send_msg
 13847 ;;		_handle_read_registers
 13848 ;;		_handle_write_single_coil@nanomodbus$F2778
 13849 ;;		_handle_write_single_register@nanomodbus$F2807
 13850 ;; This function uses a non-reentrant model
 13851 ;;
 13852                           
 13853  0AC7                     _put_2:	
 13854                           ;psect for function _put_2
 13855                           
 13856                           
 13857                           ;incstack = 0
 13858                           ; Regs used in _put_2: [wreg+fsr1l+fsr1h+status,2+status,0]
 13859                           ;put_2@nmbs stored from wreg
 13860  0AC7  0140               	movlb	0	; select bank0
 13861  0AC8  00A4               	movwf	put_2@nmbs
 13862                           
 13863                           ;nanomodbus.c: 65:     nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU
      +                          );
 13864  0AC9  0821               	movf	put_2@data+1,w
 13865  0ACA  00A2               	movwf	??_put_2
 13866  0ACB  0824               	movf	put_2@nmbs,w
 13867  0ACC  3E30               	addlw	48
 13868  0ACD  0086               	movwf	6
 13869  0ACE  3001               	movlw	1	; select bank2/3
 13870  0ACF  0087               	movwf	7
 13871  0AD0  0801               	movf	1,w
 13872  0AD1  0724               	addwf	put_2@nmbs,w
 13873  0AD2  00A3               	movwf	??_put_2+1
 13874  0AD3  0823               	movf	??_put_2+1,w
 13875  0AD4  0086               	movwf	6
 13876  0AD5  3001               	movlw	1	; select bank2/3
 13877  0AD6  0087               	movwf	7
 13878  0AD7  0822               	movf	??_put_2,w
 13879  0AD8  0081               	movwf	1
 13880                           
 13881                           ;nanomodbus.c: 66:     nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 13882  0AD9  0820               	movf	put_2@data,w
 13883  0ADA  00A2               	movwf	??_put_2
 13884  0ADB  0824               	movf	put_2@nmbs,w
 13885  0ADC  3E30               	addlw	48
 13886  0ADD  0086               	movwf	6
 13887  0ADE  3001               	movlw	1	; select bank2/3
 13888  0ADF  0087               	movwf	7
 13889  0AE0  0801               	movf	1,w
 13890  0AE1  0724               	addwf	put_2@nmbs,w
 13891  0AE2  00A3               	movwf	??_put_2+1
 13892  0AE3  0A23               	incf	??_put_2+1,w
 13893  0AE4  0086               	movwf	6
 13894  0AE5  3001               	movlw	1	; select bank2/3
 13895  0AE6  0087               	movwf	7
 13896  0AE7  0822               	movf	??_put_2,w
 13897  0AE8  0081               	movwf	1
 13898                           
 13899                           ;nanomodbus.c: 67:     nmbs->msg.buf_idx += 2;
 13900  0AE9  0824               	movf	put_2@nmbs,w
 13901  0AEA  3E30               	addlw	48
 13902  0AEB  0086               	movwf	6
 13903  0AEC  3001               	movlw	1	; select bank2/3
 13904  0AED  0087               	movwf	7
 13905  0AEE  3002               	movlw	2
 13906  0AEF  0781               	addwf	1,f
 13907  0AF0  3141               	addfsr 1,1
 13908  0AF1  1803               	skipnc
 13909  0AF2  0A81               	incf	1,f
 13910  0AF3  0008               	return
 13911  0AF4                     __end_of_put_2:
 13912                           
 13913                           	psect	text35
 13914  095E                     __ptext35:	
 13915 ;; *************** function _put_1 *****************
 13916 ;; Defined at:
 13917 ;;		line 46 in file "nanomodbus.c"
 13918 ;; Parameters:    Size  Location     Type
 13919 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13920 ;;		 -> main@nmbs(75), 
 13921 ;;  data            1    0[BANK0 ] unsigned char 
 13922 ;; Auto vars:     Size  Location     Type
 13923 ;;  nmbs            1    3[BANK0 ] PTR struct nmbs_t
 13924 ;;		 -> main@nmbs(75), 
 13925 ;; Return value:  Size  Location     Type
 13926 ;;                  1    wreg      void 
 13927 ;; Registers used:
 13928 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13929 ;; Tracked objects:
 13930 ;;		On entry : 3E/1
 13931 ;;		On exit  : 3F/0
 13932 ;;		Unchanged: 0/0
 13933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13934 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13936 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;Total ram usage:        4 bytes
 13939 ;; Hardware stack levels used: 1
 13940 ;; Hardware stack levels required when called: 5
 13941 ;; This function calls:
 13942 ;;		Nothing
 13943 ;; This function is called by:
 13944 ;;		_put_msg_header
 13945 ;;		_send_exception_msg
 13946 ;;		_handle_read_registers
 13947 ;; This function uses a non-reentrant model
 13948 ;;
 13949                           
 13950  095E                     _put_1:	
 13951                           ;psect for function _put_1
 13952                           
 13953                           
 13954                           ;incstack = 0
 13955                           ; Regs used in _put_1: [wreg+fsr1l+fsr1h+status,2+status,0]
 13956                           ;put_1@nmbs stored from wreg
 13957  095E  0140               	movlb	0	; select bank0
 13958  095F  00A3               	movwf	put_1@nmbs
 13959                           
 13960                           ;nanomodbus.c: 47:     nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 13961  0960  0820               	movf	put_1@data,w
 13962  0961  00A1               	movwf	??_put_1
 13963  0962  0823               	movf	put_1@nmbs,w
 13964  0963  3E30               	addlw	48
 13965  0964  0086               	movwf	6
 13966  0965  3001               	movlw	1	; select bank2/3
 13967  0966  0087               	movwf	7
 13968  0967  0801               	movf	1,w
 13969  0968  0723               	addwf	put_1@nmbs,w
 13970  0969  00A2               	movwf	??_put_1+1
 13971  096A  0822               	movf	??_put_1+1,w
 13972  096B  0086               	movwf	6
 13973  096C  3001               	movlw	1	; select bank2/3
 13974  096D  0087               	movwf	7
 13975  096E  0821               	movf	??_put_1,w
 13976  096F  0081               	movwf	1
 13977                           
 13978                           ;nanomodbus.c: 48:     nmbs->msg.buf_idx++;
 13979  0970  0823               	movf	put_1@nmbs,w
 13980  0971  3E30               	addlw	48
 13981  0972  0086               	movwf	6
 13982  0973  3001               	movlw	1	; select bank2/3
 13983  0974  0087               	movwf	7
 13984  0975  3001               	movlw	1
 13985  0976  0781               	addwf	1,f
 13986  0977  3141               	addfsr 1,1
 13987  0978  1803               	skipnc
 13988  0979  0A81               	incf	1,f
 13989  097A  0008               	return
 13990  097B                     __end_of_put_1:
 13991                           
 13992                           	psect	text36
 13993  17D6                     __ptext36:	
 13994 ;; *************** function _msg_buf_reset *****************
 13995 ;; Defined at:
 13996 ;;		line 70 in file "nanomodbus.c"
 13997 ;; Parameters:    Size  Location     Type
 13998 ;;  nmbs            1    wreg     PTR struct nmbs_t
 13999 ;;		 -> main@nmbs(75), 
 14000 ;; Auto vars:     Size  Location     Type
 14001 ;;  nmbs            1    0[BANK0 ] PTR struct nmbs_t
 14002 ;;		 -> main@nmbs(75), 
 14003 ;; Return value:  Size  Location     Type
 14004 ;;                  1    wreg      void 
 14005 ;; Registers used:
 14006 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14007 ;; Tracked objects:
 14008 ;;		On entry : 3F/0
 14009 ;;		On exit  : 3F/0
 14010 ;;		Unchanged: 0/0
 14011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14015 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;Total ram usage:        1 bytes
 14017 ;; Hardware stack levels used: 1
 14018 ;; Hardware stack levels required when called: 5
 14019 ;; This function calls:
 14020 ;;		Nothing
 14021 ;; This function is called by:
 14022 ;;		_msg_state_reset
 14023 ;;		_put_msg_header
 14024 ;; This function uses a non-reentrant model
 14025 ;;
 14026                           
 14027  17D6                     _msg_buf_reset:	
 14028                           ;psect for function _msg_buf_reset
 14029                           
 14030                           
 14031                           ;incstack = 0
 14032                           ; Regs used in _msg_buf_reset: [wreg+fsr1l+fsr1h+status,2+status,0]
 14033                           ;msg_buf_reset@nmbs stored from wreg
 14034  17D6  00A0               	movwf	msg_buf_reset@nmbs
 14035                           
 14036                           ;nanomodbus.c: 71:     nmbs->msg.buf_idx = 0;
 14037  17D7  0820               	movf	msg_buf_reset@nmbs,w
 14038  17D8  3E30               	addlw	48
 14039  17D9  0086               	movwf	6
 14040  17DA  3001               	movlw	1	; select bank2/3
 14041  17DB  0087               	movwf	7
 14042  17DC  3000               	movlw	0
 14043  17DD  3FC0               	movwi [0]fsr1
 14044  17DE  3FC1               	movwi [1]fsr1
 14045  17DF  0008               	return
 14046  17E0                     __end_of_msg_buf_reset:
 14047                           
 14048                           	psect	text37
 14049  0C37                     __ptext37:	
 14050 ;; *************** function _handler_read_holding_registers *****************
 14051 ;; Defined at:
 14052 ;;		line 98 in file "modbus_imp.c"
 14053 ;; Parameters:    Size  Location     Type
 14054 ;;  address         2    0[BANK0 ] unsigned short 
 14055 ;;  quantity        2    2[BANK0 ] unsigned short 
 14056 ;;  registers_ou    1    4[BANK0 ] PTR unsigned short 
 14057 ;;		 -> handle_read_registers@regs(64), 
 14058 ;;  unit_id         1    5[BANK0 ] unsigned char 
 14059 ;;  arg             1    6[BANK0 ] PTR void 
 14060 ;;		 -> main@registers(13), 
 14061 ;; Auto vars:     Size  Location     Type
 14062 ;;  i               2   11[BANK0 ] int 
 14063 ;;  server_regis    1   10[BANK0 ] PTR unsigned short 
 14064 ;;		 -> registers.server_holding_register(4), main@registers(13), 
 14065 ;; Return value:  Size  Location     Type
 14066 ;;                  1    wreg      enum E10863
 14067 ;; Registers used:
 14068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 14069 ;; Tracked objects:
 14070 ;;		On entry : 3F/0
 14071 ;;		On exit  : 3F/0
 14072 ;;		Unchanged: 0/0
 14073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14074 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14077 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14078 ;;Total ram usage:       13 bytes
 14079 ;; Hardware stack levels used: 1
 14080 ;; Hardware stack levels required when called: 5
 14081 ;; This function calls:
 14082 ;;		Nothing
 14083 ;; This function is called by:
 14084 ;;		_main
 14085 ;;		_handle_read_registers
 14086 ;; This function uses a non-reentrant model
 14087 ;;
 14088                           
 14089  0C37                     _handler_read_holding_registers:	
 14090                           ;psect for function _handler_read_holding_registers
 14091                           
 14092                           
 14093                           ;modbus_imp.c: 99:   if (address + quantity > 2)
 14094                           
 14095                           ;incstack = 0
 14096                           ; Regs used in _handler_read_holding_registers: [wreg-fsr1h+status,2+status,0]
 14097  0C37  0822               	movf	handler_read_holding_registers@quantity,w
 14098  0C38  0720               	addwf	handler_read_holding_registers@address,w
 14099  0C39  00A7               	movwf	??_handler_read_holding_registers
 14100  0C3A  0823               	movf	handler_read_holding_registers@quantity+1,w
 14101  0C3B  3D21               	addwfc	handler_read_holding_registers@address+1,w
 14102  0C3C  00A8               	movwf	??_handler_read_holding_registers+1
 14103  0C3D  3000               	movlw	0
 14104  0C3E  0228               	subwf	??_handler_read_holding_registers+1,w
 14105  0C3F  3003               	movlw	3
 14106  0C40  1903               	skipnz
 14107  0C41  0227               	subwf	??_handler_read_holding_registers,w
 14108  0C42  1C03               	skipc
 14109  0C43  2C46               	goto	l5203
 14110                           
 14111                           ;modbus_imp.c: 100:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 14112  0C44  3002               	movlw	2
 14113  0C45  0008               	return
 14114  0C46                     l5203:
 14115                           
 14116                           ;modbus_imp.c: 103:   uint16_t* server_registers = (uint16_t *)(&(((mod_bus_registers*) 
      +                          arg)->server_holding_register));
 14117  0C46  0826               	movf	handler_read_holding_registers@arg,w
 14118  0C47  3E09               	addlw	9
 14119  0C48  00A7               	movwf	??_handler_read_holding_registers
 14120  0C49  0827               	movf	??_handler_read_holding_registers,w
 14121  0C4A  00AA               	movwf	handler_read_holding_registers@server_registers
 14122                           
 14123                           ;modbus_imp.c: 104:   for (int i = 0; i < quantity; i++)
 14124  0C4B  01AB               	clrf	handler_read_holding_registers@i
 14125  0C4C  01AC               	clrf	handler_read_holding_registers@i+1
 14126  0C4D                     l5211:
 14127  0C4D  0823               	movf	handler_read_holding_registers@quantity+1,w
 14128  0C4E  022C               	subwf	handler_read_holding_registers@i+1,w
 14129  0C4F  1D03               	skipz
 14130  0C50  2C53               	goto	u3275
 14131  0C51  0822               	movf	handler_read_holding_registers@quantity,w
 14132  0C52  022B               	subwf	handler_read_holding_registers@i,w
 14133  0C53                     u3275:
 14134  0C53  1803               	btfsc	3,0
 14135  0C54  2C6E               	goto	l5213
 14136                           
 14137                           ;modbus_imp.c: 105:     registers_out[i] = server_registers[address + i];
 14138  0C55  352B               	lslf	handler_read_holding_registers@i,w
 14139  0C56  072A               	addwf	handler_read_holding_registers@server_registers,w
 14140  0C57  00A7               	movwf	??_handler_read_holding_registers
 14141  0C58  3520               	lslf	handler_read_holding_registers@address,w
 14142  0C59  0727               	addwf	??_handler_read_holding_registers,w
 14143  0C5A  00A8               	movwf	??_handler_read_holding_registers+1
 14144  0C5B  0828               	movf	??_handler_read_holding_registers+1,w
 14145  0C5C  0086               	movwf	6
 14146  0C5D  3002               	movlw	2	; select bank4/5
 14147  0C5E  0087               	movwf	7
 14148  0C5F  352B               	lslf	handler_read_holding_registers@i,w
 14149  0C60  0724               	addwf	handler_read_holding_registers@registers_out,w
 14150  0C61  00A9               	movwf	??_handler_read_holding_registers+2
 14151  0C62  0829               	movf	??_handler_read_holding_registers+2,w
 14152  0C63  0084               	movwf	4
 14153  0C64  0185               	clrf	5
 14154  0C65  3F40               	moviw [0]fsr1
 14155  0C66  3F80               	movwi [0]fsr0
 14156  0C67  3F41               	moviw [1]fsr1
 14157  0C68  3F81               	movwi [1]fsr0
 14158  0C69  3001               	movlw	1
 14159  0C6A  07AB               	addwf	handler_read_holding_registers@i,f
 14160  0C6B  3000               	movlw	0
 14161  0C6C  3DAC               	addwfc	handler_read_holding_registers@i+1,f
 14162  0C6D  2C4D               	goto	l5211
 14163  0C6E                     l5213:
 14164                           
 14165                           ;modbus_imp.c: 107:   return NMBS_ERROR_NONE;
 14166  0C6E  3000               	movlw	0
 14167  0C6F  0008               	return
 14168  0C70                     __end_of_handler_read_holding_registers:
 14169                           
 14170                           	psect	text38
 14171  0BFE                     __ptext38:	
 14172 ;; *************** function _handler_read_input_registers *****************
 14173 ;; Defined at:
 14174 ;;		line 86 in file "modbus_imp.c"
 14175 ;; Parameters:    Size  Location     Type
 14176 ;;  address         2    0[BANK0 ] unsigned short 
 14177 ;;  quantity        2    2[BANK0 ] unsigned short 
 14178 ;;  registers_ou    1    4[BANK0 ] PTR unsigned short 
 14179 ;;		 -> handle_read_registers@regs(64), 
 14180 ;;  unit_id         1    5[BANK0 ] unsigned char 
 14181 ;;  arg             1    6[BANK0 ] PTR void 
 14182 ;;		 -> main@registers(13), 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;  i               2   11[BANK0 ] int 
 14185 ;;  server_regis    1   10[BANK0 ] PTR unsigned short 
 14186 ;;		 -> registers.server_input_register(8), main@registers(13), 
 14187 ;; Return value:  Size  Location     Type
 14188 ;;                  1    wreg      enum E10863
 14189 ;; Registers used:
 14190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 14191 ;; Tracked objects:
 14192 ;;		On entry : 3F/0
 14193 ;;		On exit  : 3F/0
 14194 ;;		Unchanged: 0/0
 14195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14196 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;Total ram usage:       13 bytes
 14201 ;; Hardware stack levels used: 1
 14202 ;; Hardware stack levels required when called: 5
 14203 ;; This function calls:
 14204 ;;		Nothing
 14205 ;; This function is called by:
 14206 ;;		_main
 14207 ;;		_handle_read_registers
 14208 ;; This function uses a non-reentrant model
 14209 ;;
 14210                           
 14211  0BFE                     _handler_read_input_registers:	
 14212                           ;psect for function _handler_read_input_registers
 14213                           
 14214                           
 14215                           ;modbus_imp.c: 87:   if (address + quantity > 4)
 14216                           
 14217                           ;incstack = 0
 14218                           ; Regs used in _handler_read_input_registers: [wreg-fsr1h+status,2+status,0]
 14219  0BFE  0822               	movf	handler_read_input_registers@quantity,w
 14220  0BFF  0720               	addwf	handler_read_input_registers@address,w
 14221  0C00  00A7               	movwf	??_handler_read_input_registers
 14222  0C01  0823               	movf	handler_read_input_registers@quantity+1,w
 14223  0C02  3D21               	addwfc	handler_read_input_registers@address+1,w
 14224  0C03  00A8               	movwf	??_handler_read_input_registers+1
 14225  0C04  3000               	movlw	0
 14226  0C05  0228               	subwf	??_handler_read_input_registers+1,w
 14227  0C06  3005               	movlw	5
 14228  0C07  1903               	skipnz
 14229  0C08  0227               	subwf	??_handler_read_input_registers,w
 14230  0C09  1C03               	skipc
 14231  0C0A  2C0D               	goto	l5183
 14232                           
 14233                           ;modbus_imp.c: 88:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 14234  0C0B  3002               	movlw	2
 14235  0C0C  0008               	return
 14236  0C0D                     l5183:
 14237                           
 14238                           ;modbus_imp.c: 91:   uint16_t* server_registers = (uint16_t *)(&(((mod_bus_registers*) a
      +                          rg)->server_input_register));
 14239  0C0D  0826               	movf	handler_read_input_registers@arg,w
 14240  0C0E  3E01               	addlw	1
 14241  0C0F  00A7               	movwf	??_handler_read_input_registers
 14242  0C10  0827               	movf	??_handler_read_input_registers,w
 14243  0C11  00AA               	movwf	handler_read_input_registers@server_registers
 14244                           
 14245                           ;modbus_imp.c: 92:   for (int i = 0; i < quantity; i++)
 14246  0C12  01AB               	clrf	handler_read_input_registers@i
 14247  0C13  01AC               	clrf	handler_read_input_registers@i+1
 14248  0C14                     l5191:
 14249  0C14  0823               	movf	handler_read_input_registers@quantity+1,w
 14250  0C15  022C               	subwf	handler_read_input_registers@i+1,w
 14251  0C16  1D03               	skipz
 14252  0C17  2C1A               	goto	u3255
 14253  0C18  0822               	movf	handler_read_input_registers@quantity,w
 14254  0C19  022B               	subwf	handler_read_input_registers@i,w
 14255  0C1A                     u3255:
 14256  0C1A  1803               	btfsc	3,0
 14257  0C1B  2C35               	goto	l5193
 14258                           
 14259                           ;modbus_imp.c: 93:     registers_out[i] = server_registers[address + i];
 14260  0C1C  352B               	lslf	handler_read_input_registers@i,w
 14261  0C1D  072A               	addwf	handler_read_input_registers@server_registers,w
 14262  0C1E  00A7               	movwf	??_handler_read_input_registers
 14263  0C1F  3520               	lslf	handler_read_input_registers@address,w
 14264  0C20  0727               	addwf	??_handler_read_input_registers,w
 14265  0C21  00A8               	movwf	??_handler_read_input_registers+1
 14266  0C22  0828               	movf	??_handler_read_input_registers+1,w
 14267  0C23  0086               	movwf	6
 14268  0C24  3002               	movlw	2	; select bank4/5
 14269  0C25  0087               	movwf	7
 14270  0C26  352B               	lslf	handler_read_input_registers@i,w
 14271  0C27  0724               	addwf	handler_read_input_registers@registers_out,w
 14272  0C28  00A9               	movwf	??_handler_read_input_registers+2
 14273  0C29  0829               	movf	??_handler_read_input_registers+2,w
 14274  0C2A  0084               	movwf	4
 14275  0C2B  0185               	clrf	5
 14276  0C2C  3F40               	moviw [0]fsr1
 14277  0C2D  3F80               	movwi [0]fsr0
 14278  0C2E  3F41               	moviw [1]fsr1
 14279  0C2F  3F81               	movwi [1]fsr0
 14280  0C30  3001               	movlw	1
 14281  0C31  07AB               	addwf	handler_read_input_registers@i,f
 14282  0C32  3000               	movlw	0
 14283  0C33  3DAC               	addwfc	handler_read_input_registers@i+1,f
 14284  0C34  2C14               	goto	l5191
 14285  0C35                     l5193:
 14286                           
 14287                           ;modbus_imp.c: 95:   return NMBS_ERROR_NONE;
 14288  0C35  3000               	movlw	0
 14289  0C36  0008               	return
 14290  0C37                     __end_of_handler_read_input_registers:
 14291                           
 14292                           	psect	text39
 14293  0B58                     __ptext39:	
 14294 ;; *************** function _nmbs_server_create *****************
 14295 ;; Defined at:
 14296 ;;		line 1359 in file "nanomodbus.c"
 14297 ;; Parameters:    Size  Location     Type
 14298 ;;  nmbs            1    wreg     PTR struct nmbs_t
 14299 ;;		 -> main@nmbs(75), 
 14300 ;;  address_rtu     1   12[BANK0 ] unsigned char 
 14301 ;;  platform_con    1   13[BANK0 ] PTR const struct nmbs_pl
 14302 ;;		 -> main@platform_conf(6), 
 14303 ;;  callbacks       1   14[BANK0 ] PTR const struct nmbs_ca
 14304 ;;		 -> main@callbacks(9), 
 14305 ;; Auto vars:     Size  Location     Type
 14306 ;;  nmbs            1   18[BANK0 ] PTR struct nmbs_t
 14307 ;;		 -> main@nmbs(75), 
 14308 ;;  ret             1   17[BANK0 ] enum E10802
 14309 ;; Return value:  Size  Location     Type
 14310 ;;                  1    wreg      enum E10863
 14311 ;; Registers used:
 14312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14313 ;; Tracked objects:
 14314 ;;		On entry : 3F/0
 14315 ;;		On exit  : 3F/0
 14316 ;;		Unchanged: 0/0
 14317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14318 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14320 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14321 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14322 ;;Total ram usage:        7 bytes
 14323 ;; Hardware stack levels used: 1
 14324 ;; Hardware stack levels required when called: 7
 14325 ;; This function calls:
 14326 ;;		_nmbs_create
 14327 ;; This function is called by:
 14328 ;;		_main
 14329 ;; This function uses a non-reentrant model
 14330 ;;
 14331                           
 14332  0B58                     _nmbs_server_create:	
 14333                           ;psect for function _nmbs_server_create
 14334                           
 14335                           
 14336                           ;incstack = 0
 14337                           ; Regs used in _nmbs_server_create: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14338                           ;nmbs_server_create@nmbs stored from wreg
 14339  0B58  00B2               	movwf	nmbs_server_create@nmbs
 14340                           
 14341                           ;nanomodbus.c: 1359: nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, co
      +                          nst nmbs_platform_conf* platform_conf,;nanomodbus.c: 1360:                              
      +                           const nmbs_callbacks* callbacks) {;nanomodbus.c: 1361:     if (platform_conf->transport
      +                           == NMBS_TRANSPORT_RTU && address_rtu == 0)
 14342  0B59  082D               	movf	nmbs_server_create@platform_conf,w
 14343  0B5A  0086               	movwf	6
 14344  0B5B  3001               	movlw	1	; select bank2/3
 14345  0B5C  0087               	movwf	7
 14346  0B5D  0301               	decf	1,w
 14347  0B5E  1D03               	btfss	3,2
 14348  0B5F  2B65               	goto	l5937
 14349  0B60  082C               	movf	nmbs_server_create@address_rtu,w
 14350  0B61  1D03               	btfss	3,2
 14351  0B62  2B65               	goto	l5937
 14352                           
 14353                           ;nanomodbus.c: 1362:         return NMBS_ERROR_INVALID_ARGUMENT;
 14354  0B63  30FF               	movlw	255
 14355  0B64  0008               	return
 14356  0B65                     l5937:
 14357                           
 14358                           ;nanomodbus.c: 1364:     nmbs_error ret = nmbs_create(nmbs, platform_conf);
 14359  0B65  082D               	movf	nmbs_server_create@platform_conf,w
 14360  0B66  00AF               	movwf	??_nmbs_server_create
 14361  0B67  082F               	movf	??_nmbs_server_create,w
 14362  0B68  00A8               	movwf	nmbs_create@platform_conf
 14363  0B69  0832               	movf	nmbs_server_create@nmbs,w
 14364  0B6A  318E  26BD  318B   	fcall	_nmbs_create
 14365  0B6D  00B0               	movwf	??_nmbs_server_create+1
 14366  0B6E  0830               	movf	??_nmbs_server_create+1,w
 14367  0B6F  00B1               	movwf	nmbs_server_create@ret
 14368                           
 14369                           ;nanomodbus.c: 1365:     if (ret != NMBS_ERROR_NONE)
 14370  0B70  0831               	movf	nmbs_server_create@ret,w
 14371  0B71  1903               	btfsc	3,2
 14372  0B72  2B75               	goto	l5945
 14373                           
 14374                           ;nanomodbus.c: 1366:         return ret;
 14375  0B73  0831               	movf	nmbs_server_create@ret,w
 14376  0B74  0008               	return
 14377  0B75                     l5945:
 14378                           
 14379                           ;nanomodbus.c: 1368:     nmbs->address_rtu = address_rtu;
 14380  0B75  082C               	movf	nmbs_server_create@address_rtu,w
 14381  0B76  00AF               	movwf	??_nmbs_server_create
 14382  0B77  0832               	movf	nmbs_server_create@nmbs,w
 14383  0B78  3E47               	addlw	71
 14384  0B79  0086               	movwf	6
 14385  0B7A  3001               	movlw	1	; select bank2/3
 14386  0B7B  0087               	movwf	7
 14387  0B7C  082F               	movf	??_nmbs_server_create,w
 14388  0B7D  0081               	movwf	1
 14389                           
 14390                           ;nanomodbus.c: 1369:     nmbs->callbacks = *callbacks;
 14391  0B7E  082E               	movf	nmbs_server_create@callbacks,w
 14392  0B7F  0086               	movwf	6
 14393  0B80  3001               	movlw	1	; select bank2/3
 14394  0B81  0087               	movwf	7
 14395  0B82  0832               	movf	nmbs_server_create@nmbs,w
 14396  0B83  3E38               	addlw	56
 14397  0B84  0084               	movwf	4
 14398  0B85  3001               	movlw	1	; select bank2/3
 14399  0B86  0085               	movwf	5
 14400  0B87  3009               	movlw	9
 14401  0B88  00AF               	movwf	??_nmbs_server_create
 14402  0B89                     u3940:
 14403  0B89  0016               	moviw fsr1++
 14404  0B8A  001A               	movwi fsr0++
 14405  0B8B  0BAF               	decfsz	??_nmbs_server_create,f
 14406  0B8C  2B89               	goto	u3940
 14407                           
 14408                           ;nanomodbus.c: 1371:     return NMBS_ERROR_NONE;
 14409  0B8D  3000               	movlw	0
 14410  0B8E  0008               	return
 14411  0B8F                     __end_of_nmbs_server_create:
 14412                           
 14413                           	psect	text40
 14414  0EBD                     __ptext40:	
 14415 ;; *************** function _nmbs_create *****************
 14416 ;; Defined at:
 14417 ;;		line 110 in file "nanomodbus.c"
 14418 ;; Parameters:    Size  Location     Type
 14419 ;;  nmbs            1    wreg     PTR struct nmbs_t
 14420 ;;		 -> main@nmbs(75), 
 14421 ;;  platform_con    1    8[BANK0 ] PTR const struct nmbs_pl
 14422 ;;		 -> main@platform_conf(6), 
 14423 ;; Auto vars:     Size  Location     Type
 14424 ;;  nmbs            1   11[BANK0 ] PTR struct nmbs_t
 14425 ;;		 -> main@nmbs(75), 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  1    wreg      enum E10802
 14428 ;; Registers used:
 14429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14430 ;; Tracked objects:
 14431 ;;		On entry : 3F/0
 14432 ;;		On exit  : 3F/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14435 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14439 ;;Total ram usage:        4 bytes
 14440 ;; Hardware stack levels used: 1
 14441 ;; Hardware stack levels required when called: 6
 14442 ;; This function calls:
 14443 ;;		_m_memset
 14444 ;; This function is called by:
 14445 ;;		_nmbs_server_create
 14446 ;; This function uses a non-reentrant model
 14447 ;;
 14448                           
 14449  0EBD                     _nmbs_create:	
 14450                           ;psect for function _nmbs_create
 14451                           
 14452                           
 14453                           ;incstack = 0
 14454                           ; Regs used in _nmbs_create: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14455                           ;nmbs_create@nmbs stored from wreg
 14456  0EBD  00AB               	movwf	nmbs_create@nmbs
 14457                           
 14458                           ;nanomodbus.c: 111:     if (!nmbs)
 14459  0EBE  082B               	movf	nmbs_create@nmbs,w
 14460  0EBF  1903               	btfsc	3,2
 14461  0EC0  2ED2               	goto	l5799
 14462  0EC1  2ED4               	goto	l5803
 14463  0EC2                     l5813:
 14464  0EC2  0828               	movf	nmbs_create@platform_conf,w
 14465  0EC3  0086               	movwf	6
 14466  0EC4  3001               	movlw	1	; select bank2/3
 14467  0EC5  0087               	movwf	7
 14468  0EC6  3002               	movlw	2
 14469  0EC7  0601               	xorwf	1,w
 14470  0EC8  1D03               	btfss	3,2
 14471  0EC9  2ED2               	goto	l5799
 14472  0ECA                     l5819:
 14473                           
 14474                           ;nanomodbus.c: 125:     if (!platform_conf->read || !platform_conf->write)
 14475  0ECA  0A28               	incf	nmbs_create@platform_conf,w
 14476  0ECB  0086               	movwf	6
 14477  0ECC  3001               	movlw	1	; select bank2/3
 14478  0ECD  0087               	movwf	7
 14479  0ECE  0016               	moviw fsr1++
 14480  0ECF  0401               	iorwf	1,w
 14481  0ED0  1D03               	btfss	3,2
 14482  0ED1  2EED               	goto	l5821
 14483  0ED2                     l5799:
 14484                           
 14485                           ;nanomodbus.c: 112:         return NMBS_ERROR_INVALID_ARGUMENT;
 14486  0ED2  30FF               	movlw	255
 14487  0ED3  0008               	return
 14488  0ED4                     l5803:
 14489                           
 14490                           ;nanomodbus.c: 114:     m_memset(nmbs, 0, sizeof(nmbs_t));
 14491  0ED4  082B               	movf	nmbs_create@nmbs,w
 14492  0ED5  00A0               	movwf	m_memset@s
 14493  0ED6  3001               	movlw	1
 14494  0ED7  00A1               	movwf	m_memset@s+1
 14495  0ED8  3000               	movlw	0
 14496  0ED9  00A2               	movwf	m_memset@c
 14497  0EDA  00A3               	movwf	m_memset@c+1
 14498  0EDB  304B               	movlw	75
 14499  0EDC  00A4               	movwf	m_memset@len
 14500  0EDD  3000               	movlw	0
 14501  0EDE  00A5               	movwf	m_memset@len+1
 14502  0EDF  3188  20DC  318E   	fcall	_m_memset
 14503                           
 14504                           ;nanomodbus.c: 119:     if (!platform_conf)
 14505  0EE2  0828               	movf	nmbs_create@platform_conf,w
 14506  0EE3  1903               	btfsc	3,2
 14507  0EE4  2ED2               	goto	l5799
 14508                           
 14509                           ;nanomodbus.c: 122:     if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_c
      +                          onf->transport != NMBS_TRANSPORT_TCP)
 14510  0EE5  0828               	movf	nmbs_create@platform_conf,w
 14511  0EE6  0086               	movwf	6
 14512  0EE7  3001               	movlw	1	; select bank2/3
 14513  0EE8  0087               	movwf	7
 14514  0EE9  0301               	decf	1,w
 14515  0EEA  1D03               	btfss	3,2
 14516  0EEB  2EC2               	goto	l5813
 14517  0EEC  2ECA               	goto	l5819
 14518  0EED                     l5821:
 14519  0EED  0828               	movf	nmbs_create@platform_conf,w
 14520  0EEE  3E03               	addlw	3
 14521  0EEF  0086               	movwf	6
 14522  0EF0  3001               	movlw	1	; select bank2/3
 14523  0EF1  0087               	movwf	7
 14524  0EF2  0016               	moviw fsr1++
 14525  0EF3  0401               	iorwf	1,w
 14526  0EF4  1903               	btfsc	3,2
 14527  0EF5  2ED2               	goto	l5799
 14528                           
 14529                           ;nanomodbus.c: 128:     nmbs->platform = *platform_conf;
 14530  0EF6  0828               	movf	nmbs_create@platform_conf,w
 14531  0EF7  0086               	movwf	6
 14532  0EF8  3001               	movlw	1	; select bank2/3
 14533  0EF9  0087               	movwf	7
 14534  0EFA  082B               	movf	nmbs_create@nmbs,w
 14535  0EFB  3E41               	addlw	65
 14536  0EFC  0084               	movwf	4
 14537  0EFD  3001               	movlw	1	; select bank2/3
 14538  0EFE  0085               	movwf	5
 14539  0EFF  3006               	movlw	6
 14540  0F00  00A9               	movwf	??_nmbs_create
 14541  0F01                     u3840:
 14542  0F01  0016               	moviw fsr1++
 14543  0F02  001A               	movwi fsr0++
 14544  0F03  0BA9               	decfsz	??_nmbs_create,f
 14545  0F04  2F01               	goto	u3840
 14546                           
 14547                           ;nanomodbus.c: 130:     return NMBS_ERROR_NONE;
 14548  0F05  3000               	movlw	0
 14549  0F06  0008               	return
 14550  0F07                     __end_of_nmbs_create:
 14551                           
 14552                           	psect	text41
 14553  0397                     __ptext41:	
 14554 ;; *************** function _is_a_new_value *****************
 14555 ;; Defined at:
 14556 ;;		line 150 in file "main.c"
 14557 ;; Parameters:    Size  Location     Type
 14558 ;;  registers       1    wreg     PTR struct .
 14559 ;;		 -> main@registers(13), 
 14560 ;;  actual_regs     1    9[BANK0 ] PTR struct .
 14561 ;;		 -> main@actual_regs(4), 
 14562 ;;  nmbs            1   10[BANK0 ] PTR struct nmbs_t
 14563 ;;		 -> main@nmbs(75), 
 14564 ;; Auto vars:     Size  Location     Type
 14565 ;;  registers       1   15[BANK0 ] PTR struct .
 14566 ;;		 -> main@registers(13), 
 14567 ;; Return value:  Size  Location     Type
 14568 ;;                  1    wreg      void 
 14569 ;; Registers used:
 14570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14571 ;; Tracked objects:
 14572 ;;		On entry : 3F/0
 14573 ;;		On exit  : 3F/0
 14574 ;;		Unchanged: 0/0
 14575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14576 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;Total ram usage:        7 bytes
 14581 ;; Hardware stack levels used: 1
 14582 ;; Hardware stack levels required when called: 7
 14583 ;; This function calls:
 14584 ;;		_DATAEE_WriteByte
 14585 ;;		_DATAEE_WriteWord
 14586 ;;		_setBaudRateEUSART1
 14587 ;; This function is called by:
 14588 ;;		_main
 14589 ;; This function uses a non-reentrant model
 14590 ;;
 14591                           
 14592  0397                     _is_a_new_value:	
 14593                           ;psect for function _is_a_new_value
 14594                           
 14595                           
 14596                           ;incstack = 0
 14597                           ; Regs used in _is_a_new_value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14598                           ;is_a_new_value@registers stored from wreg
 14599  0397  00AF               	movwf	is_a_new_value@registers
 14600                           
 14601                           ;main.c: 150: void is_a_new_value(mod_bus_registers* registers,holding_register* actual_
      +                          regs,nmbs_t* nmbs );main.c: 151: {;main.c: 152:     if(registers->server_holding_registe
      +                          r.addr_slave != actual_regs->addr_slave)
 14602  0398  0829               	movf	is_a_new_value@actual_regs,w
 14603  0399  0086               	movwf	6
 14604  039A  3001               	movlw	1	; select bank2/3
 14605  039B  0087               	movwf	7
 14606  039C  3F40               	moviw [0]fsr1
 14607  039D  00AB               	movwf	??_is_a_new_value
 14608  039E  3F41               	moviw [1]fsr1
 14609  039F  00AC               	movwf	??_is_a_new_value+1
 14610  03A0  082F               	movf	is_a_new_value@registers,w
 14611  03A1  3E09               	addlw	9
 14612  03A2  0086               	movwf	6
 14613  03A3  3002               	movlw	2	; select bank4/5
 14614  03A4  0087               	movwf	7
 14615  03A5  3F40               	moviw [0]fsr1
 14616  03A6  00AD               	movwf	??_is_a_new_value+2
 14617  03A7  3F41               	moviw [1]fsr1
 14618  03A8  00AE               	movwf	??_is_a_new_value+3
 14619  03A9  082C               	movf	??_is_a_new_value+1,w
 14620  03AA  062E               	xorwf	??_is_a_new_value+3,w
 14621  03AB  1D03               	skipz
 14622  03AC  2BAF               	goto	u4045
 14623  03AD  082B               	movf	??_is_a_new_value,w
 14624  03AE  062D               	xorwf	??_is_a_new_value+2,w
 14625  03AF                     u4045:
 14626  03AF  1903               	skipnz
 14627  03B0  2BFE               	goto	l6011
 14628                           
 14629                           ;main.c: 153:     {;main.c: 154:         if(registers->server_holding_register.addr_slav
      +                          e <=255
 14630  03B1  082F               	movf	is_a_new_value@registers,w
 14631  03B2  3E09               	addlw	9
 14632  03B3  0086               	movwf	6
 14633  03B4  3002               	movlw	2	; select bank4/5
 14634  03B5  0087               	movwf	7
 14635  03B6  3F40               	moviw [0]fsr1
 14636  03B7  00AB               	movwf	??_is_a_new_value
 14637  03B8  3F41               	moviw [1]fsr1
 14638  03B9  00AC               	movwf	??_is_a_new_value+1
 14639  03BA  3001               	movlw	1
 14640  03BB  022C               	subwf	??_is_a_new_value+1,w
 14641  03BC  3000               	movlw	0
 14642  03BD  1903               	skipnz
 14643  03BE  022B               	subwf	??_is_a_new_value,w
 14644  03BF  1803               	skipnc
 14645  03C0  2BF0               	goto	l6009
 14646  03C1  082F               	movf	is_a_new_value@registers,w
 14647  03C2  3E09               	addlw	9
 14648  03C3  0086               	movwf	6
 14649  03C4  3002               	movlw	2	; select bank4/5
 14650  03C5  0087               	movwf	7
 14651  03C6  0016               	moviw fsr1++
 14652  03C7  0401               	iorwf	1,w
 14653  03C8  1903               	btfsc	3,2
 14654  03C9  2BF0               	goto	l6009
 14655                           
 14656                           ;main.c: 156:         {;main.c: 157:             nmbs->address_rtu = registers->server_h
      +                          olding_register.addr_slave;
 14657  03CA  082F               	movf	is_a_new_value@registers,w
 14658  03CB  3E09               	addlw	9
 14659  03CC  0086               	movwf	6
 14660  03CD  3002               	movlw	2	; select bank4/5
 14661  03CE  0087               	movwf	7
 14662  03CF  0801               	movf	1,w
 14663  03D0  00AB               	movwf	??_is_a_new_value
 14664  03D1  082A               	movf	is_a_new_value@nmbs,w
 14665  03D2  3E47               	addlw	71
 14666  03D3  0086               	movwf	6
 14667  03D4  3001               	movlw	1	; select bank2/3
 14668  03D5  0087               	movwf	7
 14669  03D6  082B               	movf	??_is_a_new_value,w
 14670  03D7  0081               	movwf	1
 14671                           
 14672                           ;main.c: 158:             DATAEE_WriteWord(0x7002,registers->server_holding_register.add
      +                          r_slave);
 14673  03D8  3002               	movlw	2
 14674  03D9  00A4               	movwf	DATAEE_WriteWord@bAdd
 14675  03DA  3070               	movlw	112
 14676  03DB  00A5               	movwf	DATAEE_WriteWord@bAdd+1
 14677  03DC  082F               	movf	is_a_new_value@registers,w
 14678  03DD  3E09               	addlw	9
 14679  03DE  0086               	movwf	6
 14680  03DF  3002               	movlw	2	; select bank4/5
 14681  03E0  0087               	movwf	7
 14682  03E1  3F40               	moviw [0]fsr1
 14683  03E2  00A6               	movwf	DATAEE_WriteWord@bData
 14684  03E3  3F41               	moviw [1]fsr1
 14685  03E4                     L7:
 14686  03E4  00A7               	movwf	DATAEE_WriteWord@bData+1
 14687  03E5  3188  20F4  3183   	fcall	_DATAEE_WriteWord
 14688                           
 14689                           ;main.c: 159:             DATAEE_WriteByte(0x7001, 0x00);
 14690  03E8  3001               	movlw	1
 14691  03E9  00A0               	movwf	DATAEE_WriteByte@bAdd
 14692  03EA  3070               	movlw	112
 14693  03EB  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 14694  03EC  01A2               	clrf	DATAEE_WriteByte@bData
 14695  03ED  318A  2237         	fcall	_DATAEE_WriteByte
 14696                           
 14697                           ;main.c: 160:         }
 14698  03EF  0008               	return
 14699  03F0                     l6009:
 14700                           
 14701                           ;main.c: 162:         {;main.c: 163:             registers->server_holding_register.addr
      +                          _slave = actual_regs->addr_slave;
 14702  03F0  0829               	movf	is_a_new_value@actual_regs,w
 14703  03F1  0086               	movwf	6
 14704  03F2  3001               	movlw	1	; select bank2/3
 14705  03F3  0087               	movwf	7
 14706  03F4  082F               	movf	is_a_new_value@registers,w
 14707  03F5  3E09               	addlw	9
 14708  03F6  0084               	movwf	4
 14709  03F7  3002               	movlw	2	; select bank4/5
 14710  03F8  0085               	movwf	5
 14711  03F9  3F40               	moviw [0]fsr1
 14712  03FA  3F80               	movwi [0]fsr0
 14713  03FB  3F41               	moviw [1]fsr1
 14714  03FC  3F81               	movwi [1]fsr0
 14715  03FD  0008               	return
 14716  03FE                     l6011:
 14717  03FE  0829               	movf	is_a_new_value@actual_regs,w
 14718  03FF  3E02               	addlw	2
 14719  0400  0086               	movwf	6
 14720  0401  3001               	movlw	1	; select bank2/3
 14721  0402  0087               	movwf	7
 14722  0403  3F40               	moviw [0]fsr1
 14723  0404  00AB               	movwf	??_is_a_new_value
 14724  0405  3F41               	moviw [1]fsr1
 14725  0406  00AC               	movwf	??_is_a_new_value+1
 14726  0407  082F               	movf	is_a_new_value@registers,w
 14727  0408  3E0B               	addlw	11
 14728  0409  0086               	movwf	6
 14729  040A  3002               	movlw	2	; select bank4/5
 14730  040B  0087               	movwf	7
 14731  040C  3F40               	moviw [0]fsr1
 14732  040D  00AD               	movwf	??_is_a_new_value+2
 14733  040E  3F41               	moviw [1]fsr1
 14734  040F  00AE               	movwf	??_is_a_new_value+3
 14735  0410  082C               	movf	??_is_a_new_value+1,w
 14736  0411  062E               	xorwf	??_is_a_new_value+3,w
 14737  0412  1D03               	skipz
 14738  0413  2C16               	goto	u4075
 14739  0414  082B               	movf	??_is_a_new_value,w
 14740  0415  062D               	xorwf	??_is_a_new_value+2,w
 14741  0416                     u4075:
 14742  0416  1903               	skipnz
 14743  0417  0008               	return
 14744                           
 14745                           ;main.c: 167:     {;main.c: 168:         if(setBaudRateEUSART1(registers->server_holding
      +                          _register.baudrate))
 14746  0418  082F               	movf	is_a_new_value@registers,w
 14747  0419  3E0B               	addlw	11
 14748  041A  0086               	movwf	6
 14749  041B  3002               	movlw	2	; select bank4/5
 14750  041C  0087               	movwf	7
 14751  041D  3F40               	moviw [0]fsr1
 14752  041E  00AB               	movwf	??_is_a_new_value
 14753  041F  3F41               	moviw [1]fsr1
 14754  0420  00AC               	movwf	??_is_a_new_value+1
 14755  0421  082B               	movf	??_is_a_new_value,w
 14756  0422  00A0               	movwf	setBaudRateEUSART1@baudRate
 14757  0423  082C               	movf	??_is_a_new_value+1,w
 14758  0424  00A1               	movwf	setBaudRateEUSART1@baudRate+1
 14759  0425  01A2               	clrf	setBaudRateEUSART1@baudRate+2
 14760  0426  01A3               	clrf	setBaudRateEUSART1@baudRate+3
 14761  0427  3184  24EC  3183   	fcall	_setBaudRateEUSART1
 14762  042A  3A00               	xorlw	0
 14763  042B  1903               	skipnz
 14764  042C  2C3D               	goto	l6017
 14765                           
 14766                           ;main.c: 169:         {;main.c: 170:             registers->server_holding_register.baud
      +                          rate = actual_regs->baudrate;
 14767  042D  0140               	movlb	0	; select bank0
 14768  042E  0829               	movf	is_a_new_value@actual_regs,w
 14769  042F  3E02               	addlw	2
 14770  0430  0086               	movwf	6
 14771  0431  3001               	movlw	1	; select bank2/3
 14772  0432  0087               	movwf	7
 14773  0433  082F               	movf	is_a_new_value@registers,w
 14774  0434  3E0B               	addlw	11
 14775  0435  0084               	movwf	4
 14776  0436  3002               	movlw	2	; select bank4/5
 14777  0437  0085               	movwf	5
 14778  0438  3F40               	moviw [0]fsr1
 14779  0439  3F80               	movwi [0]fsr0
 14780  043A  3F41               	moviw [1]fsr1
 14781  043B  3F81               	movwi [1]fsr0
 14782                           
 14783                           ;main.c: 171:         }
 14784  043C  0008               	return
 14785  043D                     l6017:
 14786                           
 14787                           ;main.c: 173:         {;main.c: 174:             DATAEE_WriteWord(0x7004,registers->serv
      +                          er_holding_register.baudrate);
 14788  043D  3004               	movlw	4
 14789  043E  0140               	movlb	0	; select bank0
 14790  043F  00A4               	movwf	DATAEE_WriteWord@bAdd
 14791  0440  3070               	movlw	112
 14792  0441  00A5               	movwf	DATAEE_WriteWord@bAdd+1
 14793  0442  082F               	movf	is_a_new_value@registers,w
 14794  0443  3E0B               	addlw	11
 14795  0444  0086               	movwf	6
 14796  0445  3002               	movlw	2	; select bank4/5
 14797  0446  0087               	movwf	7
 14798  0447  3F40               	moviw [0]fsr1
 14799  0448  00A6               	movwf	DATAEE_WriteWord@bData
 14800  0449  3F41               	moviw [1]fsr1
 14801  044A  2BE4               	goto	L7
 14802  044B                     __end_of_is_a_new_value:
 14803                           
 14804                           	psect	text42
 14805  04EC                     __ptext42:	
 14806 ;; *************** function _setBaudRateEUSART1 *****************
 14807 ;; Defined at:
 14808 ;;		line 84 in file "mcc_generated_files/eusart1.c"
 14809 ;; Parameters:    Size  Location     Type
 14810 ;;  baudRate        4    0[BANK0 ] unsigned long 
 14811 ;; Auto vars:     Size  Location     Type
 14812 ;;		None
 14813 ;; Return value:  Size  Location     Type
 14814 ;;                  1    wreg      unsigned char 
 14815 ;; Registers used:
 14816 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14817 ;; Tracked objects:
 14818 ;;		On entry : 3F/0
 14819 ;;		On exit  : 3F/2
 14820 ;;		Unchanged: 0/0
 14821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14822 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14825 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14826 ;;Total ram usage:        4 bytes
 14827 ;; Hardware stack levels used: 1
 14828 ;; Hardware stack levels required when called: 5
 14829 ;; This function calls:
 14830 ;;		Nothing
 14831 ;; This function is called by:
 14832 ;;		_main
 14833 ;;		_is_a_new_value
 14834 ;; This function uses a non-reentrant model
 14835 ;;
 14836                           
 14837  04EC                     _setBaudRateEUSART1:	
 14838                           ;psect for function _setBaudRateEUSART1
 14839                           
 14840                           
 14841                           ;mcc_generated_files/eusart1.c: 84: uint8_t setBaudRateEUSART1(uint32_t baudRate);mcc_ge
      +                          nerated_files/eusart1.c: 85: {;mcc_generated_files/eusart1.c: 86:     TX1STAbits.TXEN = 
      +                          0;
 14842                           
 14843                           ;incstack = 0
 14844                           ; Regs used in _setBaudRateEUSART1: [wreg-fsr0h+status,2+status,0]
 14845  04EC  0142               	movlb	2	; select bank2
 14846  04ED  129E               	bcf	30,5	;volatile
 14847                           
 14848                           ;mcc_generated_files/eusart1.c: 87:     RC1STAbits.CREN = 0;
 14849  04EE  121D               	bcf	29,4	;volatile
 14850                           
 14851                           ;mcc_generated_files/eusart1.c: 90:     switch(baudRate)
 14852  04EF  2D2E               	goto	l5637
 14853  04F0                     l5595:
 14854                           
 14855                           ;mcc_generated_files/eusart1.c: 94:              SP1BRGL = 0x40;
 14856  04F0  3040               	movlw	64
 14857  04F1  0142               	movlb	2	; select bank2
 14858  04F2  009B               	movwf	27	;volatile
 14859                           
 14860                           ;mcc_generated_files/eusart1.c: 97:             SP1BRGH = 0x03;
 14861  04F3  3003               	movlw	3
 14862  04F4  009C               	movwf	28	;volatile
 14863                           
 14864                           ;mcc_generated_files/eusart1.c: 100:             TMR1H = 0xDE;
 14865  04F5  30DE               	movlw	222
 14866  04F6  0144               	movlb	4	; select bank4
 14867  04F7  008D               	movwf	13	;volatile
 14868                           
 14869                           ;mcc_generated_files/eusart1.c: 103:             TMR1L = 0xCC;
 14870  04F8  30CC               	movlw	204
 14871  04F9  2D27               	goto	L12
 14872  04FA                     l5597:	
 14873                           ;mcc_generated_files/eusart1.c: 104:             break;
 14874                           
 14875                           
 14876                           ;mcc_generated_files/eusart1.c: 107:             SP1BRGL = 0xCF;
 14877  04FA  30CF               	movlw	207
 14878  04FB  0142               	movlb	2	; select bank2
 14879  04FC  009B               	movwf	27	;volatile
 14880                           
 14881                           ;mcc_generated_files/eusart1.c: 110:             SP1BRGH = 0x00;
 14882  04FD  019C               	clrf	28	;volatile
 14883                           
 14884                           ;mcc_generated_files/eusart1.c: 113:             TMR1H = 0xF7;
 14885  04FE  30F7               	movlw	247
 14886  04FF  0144               	movlb	4	; select bank4
 14887  0500  008D               	movwf	13	;volatile
 14888                           
 14889                           ;mcc_generated_files/eusart1.c: 116:             TMR1L = 0xB3;
 14890  0501  30B3               	movlw	179
 14891  0502  2D27               	goto	L12
 14892  0503                     l5605:	
 14893                           ;mcc_generated_files/eusart1.c: 117:             break;
 14894                           
 14895                           
 14896                           ;mcc_generated_files/eusart1.c: 120:             SP1BRGL = 0x67;
 14897  0503  3067               	movlw	103
 14898  0504  0142               	movlb	2	; select bank2
 14899  0505  009B               	movwf	27	;volatile
 14900                           
 14901                           ;mcc_generated_files/eusart1.c: 122:             SP1BRGH = 0x00;
 14902  0506  019C               	clrf	28	;volatile
 14903                           
 14904                           ;mcc_generated_files/eusart1.c: 125:             TMR1H = 0xFB;
 14905  0507  30FB               	movlw	251
 14906  0508  0144               	movlb	4	; select bank4
 14907  0509  008D               	movwf	13	;volatile
 14908                           
 14909                           ;mcc_generated_files/eusart1.c: 128:             TMR1L = 0xE6;
 14910  050A  30E6               	movlw	230
 14911  050B  2D27               	goto	L12
 14912  050C                     l248:	
 14913                           ;mcc_generated_files/eusart1.c: 130:         case 4800:
 14914                           
 14915                           ;mcc_generated_files/eusart1.c: 129:             break;
 14916                           
 14917                           
 14918                           ;mcc_generated_files/eusart1.c: 132:             SP1BRG = (1000000 / (4 * 4800)) - 1;
 14919  050C  3000               	movlw	0
 14920  050D  0142               	movlb	2	; select bank2
 14921  050E  009C               	movwf	28	;volatile
 14922  050F  3033               	movlw	51
 14923  0510  009B               	movwf	27	;volatile
 14924                           
 14925                           ;mcc_generated_files/eusart1.c: 135:             TMR1H = 0xFD;
 14926  0511  30FD               	movlw	253
 14927  0512  0144               	movlb	4	; select bank4
 14928  0513  008D               	movwf	13	;volatile
 14929                           
 14930                           ;mcc_generated_files/eusart1.c: 138:             TMR1L = 0xF3;
 14931  0514  30F3               	movlw	243
 14932  0515  2D27               	goto	L12
 14933  0516                     l5615:	
 14934                           ;mcc_generated_files/eusart1.c: 139:             break;
 14935                           
 14936                           
 14937                           ;mcc_generated_files/eusart1.c: 142:             SP1BRGL = 0x19;
 14938  0516  3019               	movlw	25
 14939  0517  0142               	movlb	2	; select bank2
 14940  0518  009B               	movwf	27	;volatile
 14941                           
 14942                           ;mcc_generated_files/eusart1.c: 145:             SP1BRGH = 0x00;
 14943  0519  019C               	clrf	28	;volatile
 14944                           
 14945                           ;mcc_generated_files/eusart1.c: 148:             TMR1H = 0xFE;
 14946  051A  30FE               	movlw	254
 14947  051B  0144               	movlb	4	; select bank4
 14948  051C  008D               	movwf	13	;volatile
 14949                           
 14950                           ;mcc_generated_files/eusart1.c: 151:             TMR1L = 0xED;
 14951  051D  30ED               	movlw	237
 14952  051E  2D27               	goto	L12
 14953  051F                     l5623:	
 14954                           ;mcc_generated_files/eusart1.c: 152:             break;
 14955                           
 14956                           
 14957                           ;mcc_generated_files/eusart1.c: 155:             SP1BRGL = 0x0C;
 14958  051F  300C               	movlw	12
 14959  0520  0142               	movlb	2	; select bank2
 14960  0521  009B               	movwf	27	;volatile
 14961                           
 14962                           ;mcc_generated_files/eusart1.c: 158:             SP1BRGH = 0x00;
 14963  0522  019C               	clrf	28	;volatile
 14964                           
 14965                           ;mcc_generated_files/eusart1.c: 161:             TMR1H = 0xFF;
 14966  0523  30FF               	movlw	255
 14967  0524  0144               	movlb	4	; select bank4
 14968  0525  008D               	movwf	13	;volatile
 14969                           
 14970                           ;mcc_generated_files/eusart1.c: 164:             TMR1L = 0x6A;
 14971  0526  306A               	movlw	106
 14972  0527                     L12:
 14973  0527  008C               	movwf	12	;volatile
 14974                           
 14975                           ;mcc_generated_files/eusart1.c: 165:             break;
 14976  0528  2D6B               	goto	l245
 14977  0529                     l251:	
 14978                           ;mcc_generated_files/eusart1.c: 166:         default:
 14979                           
 14980                           
 14981                           ;mcc_generated_files/eusart1.c: 168:             TX1STAbits.TXEN = 1;
 14982  0529  0142               	movlb	2	; select bank2
 14983  052A  169E               	bsf	30,5	;volatile
 14984                           
 14985                           ;mcc_generated_files/eusart1.c: 169:             RC1STAbits.CREN = 1;
 14986  052B  161D               	bsf	29,4	;volatile
 14987                           
 14988                           ;mcc_generated_files/eusart1.c: 170:             return 1;
 14989  052C  3001               	movlw	1
 14990  052D  0008               	return
 14991  052E                     l5637:
 14992                           
 14993                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 14994                           ; Switch size 1, requested type "simple"
 14995                           ; Number of cases is 1, Range of values is 0 to 0
 14996                           ; switch strategies available:
 14997                           ; Name         Instructions Cycles
 14998                           ; simple_byte            4     3 (average)
 14999                           ; direct_byte            8     6 (fixed)
 15000                           ; jumptable            260     6 (fixed)
 15001                           ;	Chosen strategy is simple_byte
 15002  052E  0140               	movlb	0	; select bank0
 15003  052F  0823               	movf	setBaudRateEUSART1@baudRate+3,w
 15004  0530  3A00               	xorlw	0	; case 0
 15005  0531  1903               	skipnz
 15006  0532  2D66               	goto	l6305
 15007  0533  2D29               	goto	l251
 15008  0534                     l6303:
 15009                           
 15010                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
 15011                           ; Switch size 1, requested type "simple"
 15012                           ; Number of cases is 6, Range of values is 1 to 75
 15013                           ; switch strategies available:
 15014                           ; Name         Instructions Cycles
 15015                           ; simple_byte           19    10 (average)
 15016                           ; direct_byte          159     9 (fixed)
 15017                           ; jumptable            263     9 (fixed)
 15018                           ;	Chosen strategy is simple_byte
 15019  0534  0821               	movf	setBaudRateEUSART1@baudRate+1,w
 15020  0535  3A01               	xorlw	1	; case 1
 15021  0536  1903               	skipnz
 15022  0537  2D48               	goto	l6307
 15023  0538  3A05               	xorlw	5	; case 4
 15024  0539  1903               	skipnz
 15025  053A  2D4D               	goto	l6309
 15026  053B  3A0D               	xorlw	13	; case 9
 15027  053C  1903               	skipnz
 15028  053D  2D52               	goto	l6311
 15029  053E  3A1B               	xorlw	27	; case 18
 15030  053F  1903               	skipnz
 15031  0540  2D57               	goto	l6313
 15032  0541  3A37               	xorlw	55	; case 37
 15033  0542  1903               	skipnz
 15034  0543  2D5C               	goto	l6315
 15035  0544  3A6E               	xorlw	110	; case 75
 15036  0545  1903               	skipnz
 15037  0546  2D61               	goto	l6317
 15038  0547  2D29               	goto	l251
 15039  0548                     l6307:
 15040                           
 15041                           ; Switch size 1, requested type "simple"
 15042                           ; Number of cases is 1, Range of values is 44 to 44
 15043                           ; switch strategies available:
 15044                           ; Name         Instructions Cycles
 15045                           ; simple_byte            4     3 (average)
 15046                           ; direct_byte           11     9 (fixed)
 15047                           ; jumptable            263     9 (fixed)
 15048                           ;	Chosen strategy is simple_byte
 15049  0548  0820               	movf	setBaudRateEUSART1@baudRate,w
 15050  0549  3A2C               	xorlw	44	; case 44
 15051  054A  1903               	skipnz
 15052  054B  2CF0               	goto	l5595
 15053  054C  2D29               	goto	l251
 15054  054D                     l6309:
 15055                           
 15056                           ; Switch size 1, requested type "simple"
 15057                           ; Number of cases is 1, Range of values is 176 to 176
 15058                           ; switch strategies available:
 15059                           ; Name         Instructions Cycles
 15060                           ; simple_byte            4     3 (average)
 15061                           ; direct_byte           11     9 (fixed)
 15062                           ; jumptable            263     9 (fixed)
 15063                           ;	Chosen strategy is simple_byte
 15064  054D  0820               	movf	setBaudRateEUSART1@baudRate,w
 15065  054E  3AB0               	xorlw	176	; case 176
 15066  054F  1903               	skipnz
 15067  0550  2CFA               	goto	l5597
 15068  0551  2D29               	goto	l251
 15069  0552                     l6311:
 15070                           
 15071                           ; Switch size 1, requested type "simple"
 15072                           ; Number of cases is 1, Range of values is 96 to 96
 15073                           ; switch strategies available:
 15074                           ; Name         Instructions Cycles
 15075                           ; simple_byte            4     3 (average)
 15076                           ; direct_byte           11     9 (fixed)
 15077                           ; jumptable            263     9 (fixed)
 15078                           ;	Chosen strategy is simple_byte
 15079  0552  0820               	movf	setBaudRateEUSART1@baudRate,w
 15080  0553  3A60               	xorlw	96	; case 96
 15081  0554  1903               	skipnz
 15082  0555  2D03               	goto	l5605
 15083  0556  2D29               	goto	l251
 15084  0557                     l6313:
 15085                           
 15086                           ; Switch size 1, requested type "simple"
 15087                           ; Number of cases is 1, Range of values is 192 to 192
 15088                           ; switch strategies available:
 15089                           ; Name         Instructions Cycles
 15090                           ; simple_byte            4     3 (average)
 15091                           ; direct_byte           11     9 (fixed)
 15092                           ; jumptable            263     9 (fixed)
 15093                           ;	Chosen strategy is simple_byte
 15094  0557  0820               	movf	setBaudRateEUSART1@baudRate,w
 15095  0558  3AC0               	xorlw	192	; case 192
 15096  0559  1903               	skipnz
 15097  055A  2D0C               	goto	l248
 15098  055B  2D29               	goto	l251
 15099  055C                     l6315:
 15100                           
 15101                           ; Switch size 1, requested type "simple"
 15102                           ; Number of cases is 1, Range of values is 128 to 128
 15103                           ; switch strategies available:
 15104                           ; Name         Instructions Cycles
 15105                           ; simple_byte            4     3 (average)
 15106                           ; direct_byte           11     9 (fixed)
 15107                           ; jumptable            263     9 (fixed)
 15108                           ;	Chosen strategy is simple_byte
 15109  055C  0820               	movf	setBaudRateEUSART1@baudRate,w
 15110  055D  3A80               	xorlw	128	; case 128
 15111  055E  1903               	skipnz
 15112  055F  2D16               	goto	l5615
 15113  0560  2D29               	goto	l251
 15114  0561                     l6317:
 15115                           
 15116                           ; Switch size 1, requested type "simple"
 15117                           ; Number of cases is 1, Range of values is 0 to 0
 15118                           ; switch strategies available:
 15119                           ; Name         Instructions Cycles
 15120                           ; simple_byte            4     3 (average)
 15121                           ; direct_byte            8     6 (fixed)
 15122                           ; jumptable            260     6 (fixed)
 15123                           ;	Chosen strategy is simple_byte
 15124  0561  0820               	movf	setBaudRateEUSART1@baudRate,w
 15125  0562  3A00               	xorlw	0	; case 0
 15126  0563  1903               	skipnz
 15127  0564  2D1F               	goto	l5623
 15128  0565  2D29               	goto	l251
 15129  0566                     l6305:
 15130                           
 15131                           ; Switch size 1, requested type "simple"
 15132                           ; Number of cases is 1, Range of values is 0 to 0
 15133                           ; switch strategies available:
 15134                           ; Name         Instructions Cycles
 15135                           ; simple_byte            4     3 (average)
 15136                           ; direct_byte            8     6 (fixed)
 15137                           ; jumptable            260     6 (fixed)
 15138                           ;	Chosen strategy is simple_byte
 15139  0566  0822               	movf	setBaudRateEUSART1@baudRate+2,w
 15140  0567  3A00               	xorlw	0	; case 0
 15141  0568  1903               	skipnz
 15142  0569  2D34               	goto	l6303
 15143  056A  2D29               	goto	l251
 15144  056B                     l245:
 15145                           
 15146                           ;mcc_generated_files/eusart1.c: 172:      TX1STAbits.TXEN = 1;
 15147  056B  0142               	movlb	2	; select bank2
 15148  056C  169E               	bsf	30,5	;volatile
 15149                           
 15150                           ;mcc_generated_files/eusart1.c: 173:      RC1STAbits.CREN = 1;
 15151  056D  161D               	bsf	29,4	;volatile
 15152                           
 15153                           ;mcc_generated_files/eusart1.c: 174:     return 0;
 15154  056E  3000               	movlw	0
 15155  056F  0008               	return
 15156  0570                     __end_of_setBaudRateEUSART1:
 15157                           
 15158                           	psect	text43
 15159  08F4                     __ptext43:	
 15160 ;; *************** function _DATAEE_WriteWord *****************
 15161 ;; Defined at:
 15162 ;;		line 202 in file "mcc_generated_files/memory.c"
 15163 ;; Parameters:    Size  Location     Type
 15164 ;;  bAdd            2    4[BANK0 ] unsigned short 
 15165 ;;  bData           2    6[BANK0 ] unsigned short 
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;		None
 15168 ;; Return value:  Size  Location     Type
 15169 ;;                  1    wreg      void 
 15170 ;; Registers used:
 15171 ;;		wreg, status,2, status,0, pclath, cstack
 15172 ;; Tracked objects:
 15173 ;;		On entry : 3F/0
 15174 ;;		On exit  : 3F/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15177 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;Total ram usage:        5 bytes
 15182 ;; Hardware stack levels used: 1
 15183 ;; Hardware stack levels required when called: 6
 15184 ;; This function calls:
 15185 ;;		_DATAEE_WriteByte
 15186 ;; This function is called by:
 15187 ;;		_main
 15188 ;;		_is_a_new_value
 15189 ;; This function uses a non-reentrant model
 15190 ;;
 15191                           
 15192  08F4                     _DATAEE_WriteWord:	
 15193                           ;psect for function _DATAEE_WriteWord
 15194                           
 15195                           
 15196                           ;mcc_generated_files/memory.c: 202: void DATAEE_WriteWord(uint16_t bAdd, uint16_t bData)
      +                          ;mcc_generated_files/memory.c: 203: {;mcc_generated_files/memory.c: 204:     DATAEE_Writ
      +                          eByte(bAdd, bData & 0xFF);
 15197                           
 15198                           ;incstack = 0
 15199                           ; Regs used in _DATAEE_WriteWord: [wreg+status,2+status,0+pclath+cstack]
 15200  08F4  0825               	movf	DATAEE_WriteWord@bAdd+1,w
 15201  08F5  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 15202  08F6  0824               	movf	DATAEE_WriteWord@bAdd,w
 15203  08F7  00A0               	movwf	DATAEE_WriteByte@bAdd
 15204  08F8  0826               	movf	DATAEE_WriteWord@bData,w
 15205  08F9  00A8               	movwf	??_DATAEE_WriteWord
 15206  08FA  0828               	movf	??_DATAEE_WriteWord,w
 15207  08FB  00A2               	movwf	DATAEE_WriteByte@bData
 15208  08FC  318A  2237  3188   	fcall	_DATAEE_WriteByte
 15209                           
 15210                           ;mcc_generated_files/memory.c: 205:     DATAEE_WriteByte(bAdd + 0x0001, (bData>>8) & 0xF
      +                          F);
 15211  08FF  0824               	movf	DATAEE_WriteWord@bAdd,w
 15212  0900  3E01               	addlw	1
 15213  0901  00A0               	movwf	DATAEE_WriteByte@bAdd
 15214  0902  3000               	movlw	0
 15215  0903  3D25               	addwfc	DATAEE_WriteWord@bAdd+1,w
 15216  0904  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 15217  0905  0827               	movf	DATAEE_WriteWord@bData+1,w
 15218  0906  00A8               	movwf	??_DATAEE_WriteWord
 15219  0907  0828               	movf	??_DATAEE_WriteWord,w
 15220  0908  00A2               	movwf	DATAEE_WriteByte@bData
 15221  0909  318A  2237         	fcall	_DATAEE_WriteByte
 15222  090B  0008               	return
 15223  090C                     __end_of_DATAEE_WriteWord:
 15224                           
 15225                           	psect	text44
 15226  0A37                     __ptext44:	
 15227 ;; *************** function _DATAEE_WriteByte *****************
 15228 ;; Defined at:
 15229 ;;		line 180 in file "mcc_generated_files/memory.c"
 15230 ;; Parameters:    Size  Location     Type
 15231 ;;  bAdd            2    0[BANK0 ] unsigned short 
 15232 ;;  bData           1    2[BANK0 ] unsigned char 
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  1    wreg      void 
 15237 ;; Registers used:
 15238 ;;		wreg, status,2, status,0
 15239 ;; Tracked objects:
 15240 ;;		On entry : 3F/0
 15241 ;;		On exit  : 3F/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15244 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15247 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15248 ;;Total ram usage:        4 bytes
 15249 ;; Hardware stack levels used: 1
 15250 ;; Hardware stack levels required when called: 5
 15251 ;; This function calls:
 15252 ;;		Nothing
 15253 ;; This function is called by:
 15254 ;;		_DATAEE_WriteWord
 15255 ;;		_is_a_new_value
 15256 ;; This function uses a non-reentrant model
 15257 ;;
 15258                           
 15259  0A37                     _DATAEE_WriteByte:	
 15260                           ;psect for function _DATAEE_WriteByte
 15261                           
 15262                           
 15263                           ;mcc_generated_files/memory.c: 180: void DATAEE_WriteByte(uint16_t bAdd, uint8_t bData);
      +                          mcc_generated_files/memory.c: 181: {;mcc_generated_files/memory.c: 182:     uint8_t GIEB
      +                          itValue = INTCONbits.GIE;
 15264                           
 15265                           ;incstack = 0
 15266                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 15267  0A37  3000               	movlw	0
 15268  0A38  1B8B               	btfsc	11,7	;volatile
 15269  0A39  3001               	movlw	1
 15270  0A3A  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
 15271                           
 15272                           ;mcc_generated_files/memory.c: 184:     NVMADRH = ((bAdd >> 8) & 0xFF);
 15273  0A3B  0821               	movf	DATAEE_WriteByte@bAdd+1,w
 15274  0A3C  0150               	movlb	16	; select bank16
 15275  0A3D  009B               	movwf	27	;volatile
 15276                           
 15277                           ;mcc_generated_files/memory.c: 185:     NVMADRL = (bAdd & 0xFF);
 15278  0A3E  0140               	movlb	0	; select bank0
 15279  0A3F  0820               	movf	DATAEE_WriteByte@bAdd,w
 15280  0A40  0150               	movlb	16	; select bank16
 15281  0A41  009A               	movwf	26	;volatile
 15282                           
 15283                           ;mcc_generated_files/memory.c: 186:     NVMDATL = bData;
 15284  0A42  0140               	movlb	0	; select bank0
 15285  0A43  0822               	movf	DATAEE_WriteByte@bData,w
 15286  0A44  0150               	movlb	16	; select bank16
 15287  0A45  009C               	movwf	28	;volatile
 15288                           
 15289                           ;mcc_generated_files/memory.c: 187:     NVMCON1bits.NVMREGS = 1;
 15290  0A46  171E               	bsf	30,6	;volsfr
 15291                           
 15292                           ;mcc_generated_files/memory.c: 188:     NVMCON1bits.WREN = 1;
 15293  0A47  151E               	bsf	30,2	;volsfr
 15294                           
 15295                           ;mcc_generated_files/memory.c: 189:     INTCONbits.GIE = 0;
 15296  0A48  138B               	bcf	11,7	;volatile
 15297                           
 15298                           ;mcc_generated_files/memory.c: 190:     NVMCON2 = 0x55;
 15299  0A49  3055               	movlw	85
 15300  0A4A  009F               	movwf	31	;volsfr
 15301                           
 15302                           ;mcc_generated_files/memory.c: 191:     NVMCON2 = 0xAA;
 15303  0A4B  30AA               	movlw	170
 15304  0A4C  009F               	movwf	31	;volsfr
 15305                           
 15306                           ;mcc_generated_files/memory.c: 192:     NVMCON1bits.WR = 1;
 15307  0A4D  149E               	bsf	30,1	;volsfr
 15308  0A4E                     l573:	
 15309                           ;mcc_generated_files/memory.c: 195:     {;mcc_generated_files/memory.c: 196:     }
 15310                           
 15311                           
 15312                           ;mcc_generated_files/memory.c: 194:     while (NVMCON1bits.WR)
 15313  0A4E  189E               	btfsc	30,1	;volsfr
 15314  0A4F  2A4E               	goto	l573
 15315                           
 15316                           ;mcc_generated_files/memory.c: 198:     NVMCON1bits.WREN = 0;
 15317  0A50  111E               	bcf	30,2	;volsfr
 15318                           
 15319                           ;mcc_generated_files/memory.c: 199:     INTCONbits.GIE = GIEBitValue;
 15320  0A51  0140               	movlb	0	; select bank0
 15321  0A52  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
 15322  0A53  1C03               	skipc
 15323  0A54  138B               	bcf	11,7	;volatile
 15324  0A55  1803               	skipnc
 15325  0A56  178B               	bsf	11,7	;volatile
 15326  0A57  0008               	return
 15327  0A58                     __end_of_DATAEE_WriteByte:
 15328                           
 15329                           	psect	text45
 15330  0A16                     __ptext45:	
 15331 ;; *************** function _getCount *****************
 15332 ;; Defined at:
 15333 ;;		line 15 in file "sensor.c"
 15334 ;; Parameters:    Size  Location     Type
 15335 ;;		None
 15336 ;; Auto vars:     Size  Location     Type
 15337 ;;  result          2   13[BANK0 ] unsigned short 
 15338 ;; Return value:  Size  Location     Type
 15339 ;;                  2   11[BANK0 ] unsigned short 
 15340 ;; Registers used:
 15341 ;;		wreg, status,2, status,0, pclath, cstack
 15342 ;; Tracked objects:
 15343 ;;		On entry : 3B/0
 15344 ;;		On exit  : 3F/0
 15345 ;;		Unchanged: 0/0
 15346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15347 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15351 ;;Total ram usage:        4 bytes
 15352 ;; Hardware stack levels used: 1
 15353 ;; Hardware stack levels required when called: 6
 15354 ;; This function calls:
 15355 ;;		_TMR0_HasOverflowOccured
 15356 ;;		_TMR0_Initialize
 15357 ;;		_TMR0_StartTimer
 15358 ;;		_TMR5_Initialize
 15359 ;;		_TMR5_ReadTimer
 15360 ;;		_TMR5_StartTimer
 15361 ;;		_TMR5_StopTimer
 15362 ;; This function is called by:
 15363 ;;		_main
 15364 ;; This function uses a non-reentrant model
 15365 ;;
 15366                           
 15367  0A16                     _getCount:	
 15368                           ;psect for function _getCount
 15369                           
 15370                           
 15371                           ;sensor.c: 17:     uint16_t result;;sensor.c: 20:     TMR5_StartTimer();
 15372                           
 15373                           ;incstack = 0
 15374                           ; Regs used in _getCount: [wreg+status,2+status,0+pclath+cstack]
 15375  0A16  3197  2775  318A   	fcall	_TMR5_StartTimer
 15376                           
 15377                           ;sensor.c: 21:     TMR0_StartTimer();
 15378  0A19  3197  2772  318A   	fcall	_TMR0_StartTimer
 15379  0A1C                     l6023:	
 15380                           ;sensor.c: 24:     while(!TMR0_HasOverflowOccured())
 15381                           
 15382                           
 15383                           ;sensor.c: 24:     while(!TMR0_HasOverflowOccured())
 15384  0A1C  3197  2787  318A   	fcall	_TMR0_HasOverflowOccured
 15385  0A1F  3A00               	xorlw	0
 15386  0A20  1903               	skipnz
 15387  0A21  2A1C               	goto	l6023
 15388                           
 15389                           ;sensor.c: 28:     TMR5_StopTimer();
 15390  0A22  3197  2778  318A   	fcall	_TMR5_StopTimer
 15391                           
 15392                           ;sensor.c: 30:     result = TMR5_ReadTimer();
 15393  0A25  3189  21F6  318A   	fcall	_TMR5_ReadTimer
 15394  0A28  0821               	movf	?_TMR5_ReadTimer+1,w
 15395  0A29  00AE               	movwf	getCount@result+1
 15396  0A2A  0820               	movf	?_TMR5_ReadTimer,w
 15397  0A2B  00AD               	movwf	getCount@result
 15398                           
 15399                           ;sensor.c: 34:     TMR5_Initialize();
 15400  0A2C  3188  208E  318A   	fcall	_TMR5_Initialize
 15401                           
 15402                           ;sensor.c: 35:     TMR0_Initialize();
 15403  0A2F  3197  27EA         	fcall	_TMR0_Initialize
 15404                           
 15405                           ;sensor.c: 37:     return result;
 15406  0A31  0140               	movlb	0	; select bank0
 15407  0A32  082E               	movf	getCount@result+1,w
 15408  0A33  00AC               	movwf	?_getCount+1
 15409  0A34  082D               	movf	getCount@result,w
 15410  0A35  00AB               	movwf	?_getCount
 15411  0A36  0008               	return
 15412  0A37                     __end_of_getCount:
 15413                           
 15414                           	psect	text46
 15415  1778                     __ptext46:	
 15416 ;; *************** function _TMR5_StopTimer *****************
 15417 ;; Defined at:
 15418 ;;		line 98 in file "mcc_generated_files/tmr5.c"
 15419 ;; Parameters:    Size  Location     Type
 15420 ;;		None
 15421 ;; Auto vars:     Size  Location     Type
 15422 ;;		None
 15423 ;; Return value:  Size  Location     Type
 15424 ;;                  1    wreg      void 
 15425 ;; Registers used:
 15426 ;;		None
 15427 ;; Tracked objects:
 15428 ;;		On entry : 3F/E
 15429 ;;		On exit  : 3F/4
 15430 ;;		Unchanged: 0/0
 15431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15436 ;;Total ram usage:        0 bytes
 15437 ;; Hardware stack levels used: 1
 15438 ;; Hardware stack levels required when called: 5
 15439 ;; This function calls:
 15440 ;;		Nothing
 15441 ;; This function is called by:
 15442 ;;		_getCount
 15443 ;; This function uses a non-reentrant model
 15444 ;;
 15445                           
 15446  1778                     _TMR5_StopTimer:	
 15447                           ;psect for function _TMR5_StopTimer
 15448                           
 15449                           
 15450                           ;mcc_generated_files/tmr5.c: 101:     T5CONbits.TMR5ON = 0;
 15451                           
 15452                           ;incstack = 0
 15453                           ; Regs used in _TMR5_StopTimer: []
 15454  1778  0144               	movlb	4	; select bank4
 15455  1779  101A               	bcf	26,0	;volatile
 15456  177A  0008               	return
 15457  177B                     __end_of_TMR5_StopTimer:
 15458                           
 15459                           	psect	text47
 15460  1775                     __ptext47:	
 15461 ;; *************** function _TMR5_StartTimer *****************
 15462 ;; Defined at:
 15463 ;;		line 92 in file "mcc_generated_files/tmr5.c"
 15464 ;; Parameters:    Size  Location     Type
 15465 ;;		None
 15466 ;; Auto vars:     Size  Location     Type
 15467 ;;		None
 15468 ;; Return value:  Size  Location     Type
 15469 ;;                  1    wreg      void 
 15470 ;; Registers used:
 15471 ;;		None
 15472 ;; Tracked objects:
 15473 ;;		On entry : 3B/0
 15474 ;;		On exit  : 3F/4
 15475 ;;		Unchanged: 0/0
 15476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15481 ;;Total ram usage:        0 bytes
 15482 ;; Hardware stack levels used: 1
 15483 ;; Hardware stack levels required when called: 5
 15484 ;; This function calls:
 15485 ;;		Nothing
 15486 ;; This function is called by:
 15487 ;;		_getCount
 15488 ;; This function uses a non-reentrant model
 15489 ;;
 15490                           
 15491  1775                     _TMR5_StartTimer:	
 15492                           ;psect for function _TMR5_StartTimer
 15493                           
 15494                           
 15495                           ;mcc_generated_files/tmr5.c: 95:     T5CONbits.TMR5ON = 1;
 15496                           
 15497                           ;incstack = 0
 15498                           ; Regs used in _TMR5_StartTimer: []
 15499  1775  0144               	movlb	4	; select bank4
 15500  1776  141A               	bsf	26,0	;volatile
 15501  1777  0008               	return
 15502  1778                     __end_of_TMR5_StartTimer:
 15503                           
 15504                           	psect	text48
 15505  09F6                     __ptext48:	
 15506 ;; *************** function _TMR5_ReadTimer *****************
 15507 ;; Defined at:
 15508 ;;		line 104 in file "mcc_generated_files/tmr5.c"
 15509 ;; Parameters:    Size  Location     Type
 15510 ;;		None
 15511 ;; Auto vars:     Size  Location     Type
 15512 ;;  readVal         2    7[BANK0 ] unsigned short 
 15513 ;;  readValLow      1   10[BANK0 ] unsigned char 
 15514 ;;  readValHigh     1    9[BANK0 ] unsigned char 
 15515 ;; Return value:  Size  Location     Type
 15516 ;;                  2    0[BANK0 ] unsigned short 
 15517 ;; Registers used:
 15518 ;;		wreg
 15519 ;; Tracked objects:
 15520 ;;		On entry : 3F/4
 15521 ;;		On exit  : 3F/0
 15522 ;;		Unchanged: 0/0
 15523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15524 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15525 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15526 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15527 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15528 ;;Total ram usage:       11 bytes
 15529 ;; Hardware stack levels used: 1
 15530 ;; Hardware stack levels required when called: 5
 15531 ;; This function calls:
 15532 ;;		Nothing
 15533 ;; This function is called by:
 15534 ;;		_getCount
 15535 ;; This function uses a non-reentrant model
 15536 ;;
 15537                           
 15538  09F6                     _TMR5_ReadTimer:	
 15539                           ;psect for function _TMR5_ReadTimer
 15540                           
 15541                           
 15542                           ;mcc_generated_files/tmr5.c: 106:     uint16_t readVal;;mcc_generated_files/tmr5.c: 107:
      +                               uint8_t readValHigh;;mcc_generated_files/tmr5.c: 108:     uint8_t readValLow;;mcc_g
      +                          enerated_files/tmr5.c: 110:     T5CONbits.T5RD16 = 1;
 15543                           
 15544                           ;incstack = 0
 15545                           ; Regs used in _TMR5_ReadTimer: [wreg]
 15546  09F6  149A               	bsf	26,1	;volatile
 15547                           
 15548                           ;mcc_generated_files/tmr5.c: 112:     readValLow = TMR5L;
 15549  09F7  0818               	movf	24,w	;volatile
 15550  09F8  0140               	movlb	0	; select bank0
 15551  09F9  00A2               	movwf	??_TMR5_ReadTimer
 15552  09FA  0822               	movf	??_TMR5_ReadTimer,w
 15553  09FB  00AA               	movwf	TMR5_ReadTimer@readValLow
 15554                           
 15555                           ;mcc_generated_files/tmr5.c: 113:     readValHigh = TMR5H;
 15556  09FC  0144               	movlb	4	; select bank4
 15557  09FD  0819               	movf	25,w	;volatile
 15558  09FE  0140               	movlb	0	; select bank0
 15559  09FF  00A2               	movwf	??_TMR5_ReadTimer
 15560  0A00  0822               	movf	??_TMR5_ReadTimer,w
 15561  0A01  00A9               	movwf	TMR5_ReadTimer@readValHigh
 15562                           
 15563                           ;mcc_generated_files/tmr5.c: 115:     readVal = ((uint16_t)readValHigh << 8) | readValLo
      +                          w;
 15564  0A02  082A               	movf	TMR5_ReadTimer@readValLow,w
 15565  0A03  00A2               	movwf	??_TMR5_ReadTimer
 15566  0A04  01A3               	clrf	??_TMR5_ReadTimer+1
 15567  0A05  0829               	movf	TMR5_ReadTimer@readValHigh,w
 15568  0A06  00A4               	movwf	??_TMR5_ReadTimer+2
 15569  0A07  01A5               	clrf	??_TMR5_ReadTimer+3
 15570  0A08  0824               	movf	??_TMR5_ReadTimer+2,w
 15571  0A09  00A5               	movwf	??_TMR5_ReadTimer+3
 15572  0A0A  01A4               	clrf	??_TMR5_ReadTimer+2
 15573  0A0B  0822               	movf	??_TMR5_ReadTimer,w
 15574  0A0C  0424               	iorwf	??_TMR5_ReadTimer+2,w
 15575  0A0D  00A7               	movwf	TMR5_ReadTimer@readVal
 15576  0A0E  0823               	movf	??_TMR5_ReadTimer+1,w
 15577  0A0F  0425               	iorwf	??_TMR5_ReadTimer+3,w
 15578  0A10  00A8               	movwf	TMR5_ReadTimer@readVal+1
 15579                           
 15580                           ;mcc_generated_files/tmr5.c: 117:     return readVal;
 15581  0A11  0828               	movf	TMR5_ReadTimer@readVal+1,w
 15582  0A12  00A1               	movwf	?_TMR5_ReadTimer+1
 15583  0A13  0827               	movf	TMR5_ReadTimer@readVal,w
 15584  0A14  00A0               	movwf	?_TMR5_ReadTimer
 15585  0A15  0008               	return
 15586  0A16                     __end_of_TMR5_ReadTimer:
 15587                           
 15588                           	psect	text49
 15589  1772                     __ptext49:	
 15590 ;; *************** function _TMR0_StartTimer *****************
 15591 ;; Defined at:
 15592 ;;		line 80 in file "mcc_generated_files/tmr0.c"
 15593 ;; Parameters:    Size  Location     Type
 15594 ;;		None
 15595 ;; Auto vars:     Size  Location     Type
 15596 ;;		None
 15597 ;; Return value:  Size  Location     Type
 15598 ;;                  1    wreg      void 
 15599 ;; Registers used:
 15600 ;;		None
 15601 ;; Tracked objects:
 15602 ;;		On entry : 3F/4
 15603 ;;		On exit  : 3F/B
 15604 ;;		Unchanged: 0/0
 15605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15610 ;;Total ram usage:        0 bytes
 15611 ;; Hardware stack levels used: 1
 15612 ;; Hardware stack levels required when called: 5
 15613 ;; This function calls:
 15614 ;;		Nothing
 15615 ;; This function is called by:
 15616 ;;		_getCount
 15617 ;; This function uses a non-reentrant model
 15618 ;;
 15619                           
 15620  1772                     _TMR0_StartTimer:	
 15621                           ;psect for function _TMR0_StartTimer
 15622                           
 15623                           
 15624                           ;mcc_generated_files/tmr0.c: 83:     T0CON0bits.T0EN = 1;
 15625                           
 15626                           ;incstack = 0
 15627                           ; Regs used in _TMR0_StartTimer: []
 15628  1772  014B               	movlb	11	; select bank11
 15629  1773  179E               	bsf	30,7	;volatile
 15630  1774  0008               	return
 15631  1775                     __end_of_TMR0_StartTimer:
 15632                           
 15633                           	psect	text50
 15634  1787                     __ptext50:	
 15635 ;; *************** function _TMR0_HasOverflowOccured *****************
 15636 ;; Defined at:
 15637 ;;		line 114 in file "mcc_generated_files/tmr0.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;		None
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;		None
 15642 ;; Return value:  Size  Location     Type
 15643 ;;                  1    wreg      _Bool 
 15644 ;; Registers used:
 15645 ;;		wreg, status,2, status,0
 15646 ;; Tracked objects:
 15647 ;;		On entry : 30/B
 15648 ;;		On exit  : 3F/E
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;Total ram usage:        0 bytes
 15656 ;; Hardware stack levels used: 1
 15657 ;; Hardware stack levels required when called: 5
 15658 ;; This function calls:
 15659 ;;		Nothing
 15660 ;; This function is called by:
 15661 ;;		_getCount
 15662 ;; This function uses a non-reentrant model
 15663 ;;
 15664                           
 15665  1787                     _TMR0_HasOverflowOccured:	
 15666                           ;psect for function _TMR0_HasOverflowOccured
 15667                           
 15668                           
 15669                           ;mcc_generated_files/tmr0.c: 117:     return(PIR0bits.TMR0IF);
 15670                           
 15671                           ;incstack = 0
 15672                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
 15673  1787  014E               	movlb	14	; select bank14
 15674  1788  0E0C               	swapf	12,w	;volatile
 15675  1789  0C89               	rrf	9,f
 15676  178A  3901               	andlw	1
 15677  178B  0008               	return
 15678  178C                     __end_of_TMR0_HasOverflowOccured:
 15679                           
 15680                           	psect	text51
 15681  08C8                     __ptext51:	
 15682 ;; *************** function _getADCData *****************
 15683 ;; Defined at:
 15684 ;;		line 4 in file "sensor.c"
 15685 ;; Parameters:    Size  Location     Type
 15686 ;;  sensorSelect    1    3[BANK0 ] PTR void 
 15687 ;;		 -> sensor1.sensor_info(11), sensor1(13), 
 15688 ;; Auto vars:     Size  Location     Type
 15689 ;;  result          2    6[BANK0 ] unsigned short 
 15690 ;;  channel         1    8[BANK0 ] enum E10679
 15691 ;; Return value:  Size  Location     Type
 15692 ;;                  2    3[BANK0 ] unsigned short 
 15693 ;; Registers used:
 15694 ;;		wreg, fsr1l, fsr1h, pclath, cstack
 15695 ;; Tracked objects:
 15696 ;;		On entry : 3F/0
 15697 ;;		On exit  : 3F/0
 15698 ;;		Unchanged: 0/0
 15699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15700 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15701 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15703 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15704 ;;Total ram usage:        6 bytes
 15705 ;; Hardware stack levels used: 1
 15706 ;; Hardware stack levels required when called: 6
 15707 ;; This function calls:
 15708 ;;		_ADCC_GetSingleConversion
 15709 ;; This function is called by:
 15710 ;;		_main
 15711 ;; This function uses a non-reentrant model
 15712 ;;
 15713                           
 15714  08C8                     _getADCData:	
 15715                           ;psect for function _getADCData
 15716                           
 15717                           
 15718                           ;sensor.c: 4: uint16_t getADCData(void* sensorSelection);sensor.c: 5: {;sensor.c: 6:    
      +                           uint16_t result;;sensor.c: 7:     adcc_channel_t channel;;sensor.c: 9:     channel = *(
      +                          (adcc_channel_t *) sensorSelection);
 15719                           
 15720                           ;incstack = 0
 15721                           ; Regs used in _getADCData: [wreg+fsr1l+fsr1h+pclath+cstack]
 15722  08C8  0823               	movf	getADCData@sensorSelection,w
 15723  08C9  0086               	movwf	6
 15724  08CA  3002               	movlw	2	; select bank4/5
 15725  08CB  0087               	movwf	7
 15726  08CC  0801               	movf	1,w
 15727  08CD  00A5               	movwf	??_getADCData
 15728  08CE  0825               	movf	??_getADCData,w
 15729  08CF  00A8               	movwf	getADCData@channel
 15730                           
 15731                           ;sensor.c: 10:     result = ADCC_GetSingleConversion(channel);
 15732  08D0  0828               	movf	getADCData@channel,w
 15733  08D1  3188  20A1         	fcall	_ADCC_GetSingleConversion
 15734  08D3  0821               	movf	?_ADCC_GetSingleConversion+1,w
 15735  08D4  00A7               	movwf	getADCData@result+1
 15736  08D5  0820               	movf	?_ADCC_GetSingleConversion,w
 15737  08D6  00A6               	movwf	getADCData@result
 15738                           
 15739                           ;sensor.c: 12:     return result;
 15740  08D7  0827               	movf	getADCData@result+1,w
 15741  08D8  00A4               	movwf	?_getADCData+1
 15742  08D9  0826               	movf	getADCData@result,w
 15743  08DA  00A3               	movwf	?_getADCData
 15744  08DB  0008               	return
 15745  08DC                     __end_of_getADCData:
 15746                           
 15747                           	psect	text52
 15748  08A1                     __ptext52:	
 15749 ;; *************** function _ADCC_GetSingleConversion *****************
 15750 ;; Defined at:
 15751 ;;		line 138 in file "mcc_generated_files/adcc.c"
 15752 ;; Parameters:    Size  Location     Type
 15753 ;;  channel         1    wreg     enum E10330
 15754 ;; Auto vars:     Size  Location     Type
 15755 ;;  channel         1    2[BANK0 ] enum E10330
 15756 ;; Return value:  Size  Location     Type
 15757 ;;                  2    0[BANK0 ] unsigned short 
 15758 ;; Registers used:
 15759 ;;		wreg
 15760 ;; Tracked objects:
 15761 ;;		On entry : 3F/0
 15762 ;;		On exit  : 3F/0
 15763 ;;		Unchanged: 0/0
 15764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15765 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15768 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15769 ;;Total ram usage:        3 bytes
 15770 ;; Hardware stack levels used: 1
 15771 ;; Hardware stack levels required when called: 5
 15772 ;; This function calls:
 15773 ;;		Nothing
 15774 ;; This function is called by:
 15775 ;;		_getADCData
 15776 ;; This function uses a non-reentrant model
 15777 ;;
 15778                           
 15779  08A1                     _ADCC_GetSingleConversion:	
 15780                           ;psect for function _ADCC_GetSingleConversion
 15781                           
 15782                           
 15783                           ;incstack = 0
 15784                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 15785                           ;ADCC_GetSingleConversion@channel stored from wreg
 15786  08A1  00A2               	movwf	ADCC_GetSingleConversion@channel
 15787                           
 15788                           ;mcc_generated_files/adcc.c: 138: adc_result_t ADCC_GetSingleConversion(adcc_channel_t c
      +                          hannel);mcc_generated_files/adcc.c: 139: {;mcc_generated_files/adcc.c: 141:     ADPCH = 
      +                          channel;
 15789  08A2  0822               	movf	ADCC_GetSingleConversion@channel,w
 15790  08A3  0141               	movlb	1	; select bank1
 15791  08A4  009F               	movwf	31	;volatile
 15792                           
 15793                           ;mcc_generated_files/adcc.c: 144:     ADCON0bits.ADON = 1;
 15794  08A5  0142               	movlb	2	; select bank2
 15795  08A6  1791               	bsf	17,7	;volatile
 15796                           
 15797                           ;mcc_generated_files/adcc.c: 147:     ADCON0bits.ADCONT = 0;
 15798  08A7  1311               	bcf	17,6	;volatile
 15799                           
 15800                           ;mcc_generated_files/adcc.c: 150:     ADCON0bits.ADGO = 1;
 15801  08A8  1411               	bsf	17,0	;volatile
 15802  08A9                     l93:	
 15803                           ;mcc_generated_files/adcc.c: 155:     {;mcc_generated_files/adcc.c: 156:     }
 15804                           
 15805                           
 15806                           ;mcc_generated_files/adcc.c: 154:     while (ADCON0bits.ADGO)
 15807  08A9  1811               	btfsc	17,0	;volatile
 15808  08AA  28A9               	goto	l93
 15809                           
 15810                           ;mcc_generated_files/adcc.c: 160:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 15811  08AB  0141               	movlb	1	; select bank1
 15812  08AC  081E               	movf	30,w	;volatile
 15813  08AD  0140               	movlb	0	; select bank0
 15814  08AE  00A1               	movwf	?_ADCC_GetSingleConversion+1
 15815  08AF  0141               	movlb	1	; select bank1
 15816  08B0  081D               	movf	29,w	;volatile
 15817  08B1  0140               	movlb	0	; select bank0
 15818  08B2  00A0               	movwf	?_ADCC_GetSingleConversion
 15819  08B3  0008               	return
 15820  08B4                     __end_of_ADCC_GetSingleConversion:
 15821                           
 15822                           	psect	text53
 15823  17F5                     __ptext53:	
 15824 ;; *************** function _exit *****************
 15825 ;; Defined at:
 15826 ;;		line 8 in file "/opt/microchip/xc8/v2.36/pic/sources/c99/common/exit.c"
 15827 ;; Parameters:    Size  Location     Type
 15828 ;;  code            2   10[BANK0 ] int 
 15829 ;; Auto vars:     Size  Location     Type
 15830 ;;		None
 15831 ;; Return value:  Size  Location     Type
 15832 ;;                  1    wreg      void 
 15833 ;; Registers used:
 15834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15835 ;; Tracked objects:
 15836 ;;		On entry : 0/0
 15837 ;;		On exit  : 3F/0
 15838 ;;		Unchanged: 0/0
 15839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15840 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;Total ram usage:        2 bytes
 15845 ;; Hardware stack levels used: 1
 15846 ;; Hardware stack levels required when called: 7
 15847 ;; This function calls:
 15848 ;;		__Exit
 15849 ;;		___funcs_on_exit
 15850 ;; This function is called by:
 15851 ;;		_main
 15852 ;; This function uses a non-reentrant model
 15853 ;;
 15854                           
 15855  17F5                     _exit:	
 15856                           ;psect for function _exit
 15857                           
 15858                           
 15859                           ;incstack = 0
 15860                           ; Regs used in _exit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15861  17F5  3187  2731  3197   	fcall	___funcs_on_exit
 15862  17F8  0140               	movlb	0	; select bank0
 15863  17F9  082B               	movf	exit@code+1,w
 15864  17FA  00A1               	movwf	__Exit@ec+1
 15865  17FB  082A               	movf	exit@code,w
 15866  17FC  00A0               	movwf	__Exit@ec
 15867  17FD  3197  2765         	fcall	__Exit
 15868  17FF  0008               	return
 15869  1800                     __end_of_exit:
 15870                           
 15871                           	psect	text54
 15872  0731                     __ptext54:	
 15873 ;; *************** function ___funcs_on_exit *****************
 15874 ;; Defined at:
 15875 ;;		line 17 in file "/opt/microchip/xc8/v2.36/pic/sources/c99/common/atexit.c"
 15876 ;; Parameters:    Size  Location     Type
 15877 ;;		None
 15878 ;; Auto vars:     Size  Location     Type
 15879 ;;  arg             2    8[BANK0 ] PTR void 
 15880 ;;		 -> RAM(8192), 
 15881 ;;  func            2    6[BANK0 ] PTR FTN(PTR void ,)void 
 15882 ;;		 -> call(1), 
 15883 ;; Return value:  Size  Location     Type
 15884 ;;                  1    wreg      void 
 15885 ;; Registers used:
 15886 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15887 ;; Tracked objects:
 15888 ;;		On entry : 0/0
 15889 ;;		On exit  : 0/0
 15890 ;;		Unchanged: 0/0
 15891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15893 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15894 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15895 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15896 ;;Total ram usage:        8 bytes
 15897 ;; Hardware stack levels used: 1
 15898 ;; Hardware stack levels required when called: 6
 15899 ;; This function calls:
 15900 ;;		_call
 15901 ;; This function is called by:
 15902 ;;		_exit
 15903 ;; This function uses a non-reentrant model
 15904 ;;
 15905                           
 15906  0731                     ___funcs_on_exit:	
 15907                           ;psect for function ___funcs_on_exit
 15908                           
 15909                           
 15910                           ;incstack = 0
 15911                           ; Regs used in ___funcs_on_exit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15912  0731  2F93               	goto	l5889
 15913  0732                     l5879:
 15914  0732  0142               	movlb	2	; select bank2
 15915  0733  084D               	movf	(_slot+1)^(0+256),w
 15916  0734  0140               	movlb	0	; select bank0
 15917  0735  00A3               	movwf	??___funcs_on_exit+1
 15918  0736  0142               	movlb	2	; select bank2
 15919  0737  084C               	movf	_slot^(0+256),w
 15920  0738  0140               	movlb	0	; select bank0
 15921  0739  00A2               	movwf	??___funcs_on_exit
 15922  073A  35A2               	lslf	??___funcs_on_exit,f
 15923  073B  0DA3               	rlf	??___funcs_on_exit+1,f
 15924  073C  0822               	movf	??___funcs_on_exit,w
 15925  073D  0770               	addwf	_head,w
 15926  073E  00A4               	movwf	??___funcs_on_exit+2
 15927  073F  0823               	movf	??___funcs_on_exit+1,w
 15928  0740  3D71               	addwfc	_head+1,w
 15929  0741  00A5               	movwf	??___funcs_on_exit+3
 15930  0742  0824               	movf	??___funcs_on_exit+2,w
 15931  0743  0086               	movwf	6
 15932  0744  0825               	movf	??___funcs_on_exit+3,w
 15933  0745  0087               	movwf	7
 15934  0746  3142               	addfsr 1,2
 15935  0747  3F40               	moviw [0]fsr1
 15936  0748  00A6               	movwf	___funcs_on_exit@func
 15937  0749  3F41               	moviw [1]fsr1
 15938  074A  00A7               	movwf	___funcs_on_exit@func+1
 15939  074B  0142               	movlb	2	; select bank2
 15940  074C  084D               	movf	(_slot+1)^(0+256),w
 15941  074D  0140               	movlb	0	; select bank0
 15942  074E  00A3               	movwf	??___funcs_on_exit+1
 15943  074F  0142               	movlb	2	; select bank2
 15944  0750  084C               	movf	_slot^(0+256),w
 15945  0751  0140               	movlb	0	; select bank0
 15946  0752  00A2               	movwf	??___funcs_on_exit
 15947  0753  35A2               	lslf	??___funcs_on_exit,f
 15948  0754  0DA3               	rlf	??___funcs_on_exit+1,f
 15949  0755  0822               	movf	??___funcs_on_exit,w
 15950  0756  0770               	addwf	_head,w
 15951  0757  00A4               	movwf	??___funcs_on_exit+2
 15952  0758  0823               	movf	??___funcs_on_exit+1,w
 15953  0759  3D71               	addwfc	_head+1,w
 15954  075A  00A5               	movwf	??___funcs_on_exit+3
 15955  075B  0824               	movf	??___funcs_on_exit+2,w
 15956  075C  3E42               	addlw	66
 15957  075D  0086               	movwf	6
 15958  075E  3000               	movlw	0
 15959  075F  3D25               	addwfc	??___funcs_on_exit+3,w
 15960  0760  0087               	movwf	7
 15961  0761  3F40               	moviw [0]fsr1
 15962  0762  00A8               	movwf	___funcs_on_exit@arg
 15963  0763  3F41               	moviw [1]fsr1
 15964  0764  00A9               	movwf	___funcs_on_exit@arg+1
 15965  0765  0829               	movf	___funcs_on_exit@arg+1,w
 15966  0766  00A1               	movwf	call@p+1
 15967  0767  0828               	movf	___funcs_on_exit@arg,w
 15968  0768  00A0               	movwf	call@p
 15969  0769  0827               	movf	___funcs_on_exit@func+1,w
 15970  076A  008A               	movwf	10
 15971  076B  0826               	movf	___funcs_on_exit@func,w
 15972  076C  000A               	callw
 15973  076D  3187               	pagesel	$
 15974  076E                     l5883:
 15975  076E  0142               	movlb	2	; select bank2
 15976  076F  084D               	movf	(_slot+1)^(0+256),w
 15977  0770  0140               	movlb	0	; select bank0
 15978  0771  00A3               	movwf	??___funcs_on_exit+1
 15979  0772  0142               	movlb	2	; select bank2
 15980  0773  03CC               	decf	_slot^(0+256),f
 15981  0774  0A4C               	incf	_slot^(0+256),w
 15982  0775  0140               	movlb	0	; select bank0
 15983  0776  00A2               	movwf	??___funcs_on_exit
 15984  0777  0142               	movlb	2	; select bank2
 15985  0778  1903               	skipnz
 15986  0779  03CD               	decf	(_slot+1)^(0+256),f
 15987  077A  0140               	movlb	0	; select bank0
 15988  077B  0823               	movf	??___funcs_on_exit+1,w
 15989  077C  3A80               	xorlw	128
 15990  077D  00A4               	movwf	??___funcs_on_exit+2
 15991  077E  3080               	movlw	128
 15992  077F  0224               	subwf	??___funcs_on_exit+2,w
 15993  0780  1D03               	skipz
 15994  0781  2F84               	goto	u3895
 15995  0782  3001               	movlw	1
 15996  0783  0222               	subwf	??___funcs_on_exit,w
 15997  0784                     u3895:
 15998  0784  1803               	skipnc
 15999  0785  2F32               	goto	l5879
 16000  0786  0870               	movf	_head,w
 16001  0787  0086               	movwf	6
 16002  0788  0871               	movf	_head+1,w
 16003  0789  0087               	movwf	7
 16004  078A  3F40               	moviw [0]fsr1
 16005  078B  00F0               	movwf	_head
 16006  078C  3F41               	moviw [1]fsr1
 16007  078D  00F1               	movwf	_head+1
 16008  078E  3020               	movlw	32
 16009  078F  0142               	movlb	2	; select bank2
 16010  0790  00CC               	movwf	_slot^(0+256)
 16011  0791  3000               	movlw	0
 16012  0792  00CD               	movwf	(_slot^(0+256)+1)
 16013  0793                     l5889:
 16014  0793  0870               	movf	_head,w
 16015  0794  0471               	iorwf	_head+1,w
 16016  0795  1903               	btfsc	3,2
 16017  0796  0008               	return
 16018  0797  2F6E               	goto	l5883
 16019  0798                     __end_of___funcs_on_exit:
 16020                           
 16021                           	psect	text55
 16022  1766                     __ptext55:	
 16023 ;; *************** function _call *****************
 16024 ;; Defined at:
 16025 ;;		line 45 in file "/opt/microchip/xc8/v2.36/pic/sources/c99/common/atexit.c"
 16026 ;; Parameters:    Size  Location     Type
 16027 ;;  p               2    0[BANK0 ] PTR void 
 16028 ;;		 -> RAM(8192), 
 16029 ;; Auto vars:     Size  Location     Type
 16030 ;;		None
 16031 ;; Return value:  Size  Location     Type
 16032 ;;                  1    wreg      void 
 16033 ;; Registers used:
 16034 ;;		None
 16035 ;; Tracked objects:
 16036 ;;		On entry : 3F/0
 16037 ;;		On exit  : 3F/0
 16038 ;;		Unchanged: 3F/0
 16039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16040 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16043 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16044 ;;Total ram usage:        2 bytes
 16045 ;; Hardware stack levels used: 1
 16046 ;; Hardware stack levels required when called: 5
 16047 ;; This function calls:
 16048 ;;		Nothing
 16049 ;; This function is called by:
 16050 ;;		___funcs_on_exit
 16051 ;; This function uses a non-reentrant model
 16052 ;;
 16053                           
 16054  1766                     _call:	
 16055                           ;psect for function _call
 16056                           
 16057                           
 16058                           ;incstack = 0
 16059                           ; Regs used in _call: []
 16060  1766  0008               	return
 16061  1767                     __end_of_call:
 16062                           
 16063                           	psect	text56
 16064  1765                     __ptext56:	
 16065 ;; *************** function __Exit *****************
 16066 ;; Defined at:
 16067 ;;		line 7 in file "/opt/microchip/xc8/v2.36/pic/sources/c99/common/_Exit.c"
 16068 ;; Parameters:    Size  Location     Type
 16069 ;;  ec              2    0[BANK0 ] int 
 16070 ;; Auto vars:     Size  Location     Type
 16071 ;;		None
 16072 ;; Return value:  Size  Location     Type
 16073 ;;                  1    wreg      void 
 16074 ;; Registers used:
 16075 ;;		None
 16076 ;; Tracked objects:
 16077 ;;		On entry : 3F/0
 16078 ;;		On exit  : 3F/0
 16079 ;;		Unchanged: 3F/0
 16080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16081 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16084 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16085 ;;Total ram usage:        2 bytes
 16086 ;; Hardware stack levels used: 1
 16087 ;; Hardware stack levels required when called: 5
 16088 ;; This function calls:
 16089 ;;		Nothing
 16090 ;; This function is called by:
 16091 ;;		_exit
 16092 ;; This function uses a non-reentrant model
 16093 ;;
 16094                           
 16095  1765                     __Exit:	
 16096                           ;psect for function __Exit
 16097                           
 16098  1765                     l1789:	
 16099                           ;incstack = 0
 16100                           ; Regs used in __Exit: []
 16101                           
 16102  1765  2F65               	goto	l1789
 16103  1766                     __end_of__Exit:
 16104                           
 16105                           	psect	text57
 16106  0D65                     __ptext57:	
 16107 ;; *************** function _default_values_register *****************
 16108 ;; Defined at:
 16109 ;;		line 123 in file "modbus_imp.c"
 16110 ;; Parameters:    Size  Location     Type
 16111 ;;  registers       1    wreg     PTR struct .
 16112 ;;		 -> main@registers(13), 
 16113 ;; Auto vars:     Size  Location     Type
 16114 ;;  registers       1    8[BANK0 ] PTR struct .
 16115 ;;		 -> main@registers(13), 
 16116 ;; Return value:  Size  Location     Type
 16117 ;;                  1    wreg      void 
 16118 ;; Registers used:
 16119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16120 ;; Tracked objects:
 16121 ;;		On entry : 3F/12
 16122 ;;		On exit  : 3F/0
 16123 ;;		Unchanged: 0/0
 16124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16129 ;;Total ram usage:        1 bytes
 16130 ;; Hardware stack levels used: 1
 16131 ;; Hardware stack levels required when called: 6
 16132 ;; This function calls:
 16133 ;;		_m_memset
 16134 ;; This function is called by:
 16135 ;;		_main
 16136 ;; This function uses a non-reentrant model
 16137 ;;
 16138                           
 16139  0D65                     _default_values_register:	
 16140                           ;psect for function _default_values_register
 16141                           
 16142                           
 16143                           ;incstack = 0
 16144                           ; Regs used in _default_values_register: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16145                           ;default_values_register@registers stored from wreg
 16146  0D65  0140               	movlb	0	; select bank0
 16147  0D66  00A8               	movwf	default_values_register@registers
 16148                           
 16149                           ;modbus_imp.c: 123: void default_values_register(mod_bus_registers* registers);modbus_im
      +                          p.c: 124: {;modbus_imp.c: 125:     registers->server_holding_register.addr_slave = 1;
 16150  0D67  0828               	movf	default_values_register@registers,w
 16151  0D68  3E09               	addlw	9
 16152  0D69  0086               	movwf	6
 16153  0D6A  3002               	movlw	2	; select bank4/5
 16154  0D6B  0087               	movwf	7
 16155  0D6C  3001               	movlw	1
 16156  0D6D  3FC0               	movwi [0]fsr1
 16157  0D6E  3000               	movlw	0
 16158  0D6F  3FC1               	movwi [1]fsr1
 16159                           
 16160                           ;modbus_imp.c: 126:     registers->server_holding_register.baudrate = 9600;
 16161  0D70  0828               	movf	default_values_register@registers,w
 16162  0D71  3E0B               	addlw	11
 16163  0D72  0086               	movwf	6
 16164  0D73  3002               	movlw	2	; select bank4/5
 16165  0D74  0087               	movwf	7
 16166  0D75  3080               	movlw	128
 16167  0D76  3FC0               	movwi [0]fsr1
 16168  0D77  3025               	movlw	37
 16169  0D78  3FC1               	movwi [1]fsr1
 16170                           
 16171                           ;modbus_imp.c: 128:     m_memset(&(registers->server_coils), 0 ,sizeof(registers->server
      +                          _coils));
 16172  0D79  0828               	movf	default_values_register@registers,w
 16173  0D7A  00A0               	movwf	m_memset@s
 16174  0D7B  3002               	movlw	2
 16175  0D7C  00A1               	movwf	m_memset@s+1
 16176  0D7D  3000               	movlw	0
 16177  0D7E  00A2               	movwf	m_memset@c
 16178  0D7F  00A3               	movwf	m_memset@c+1
 16179  0D80  3001               	movlw	1
 16180  0D81  00A4               	movwf	m_memset@len
 16181  0D82  3000               	movlw	0
 16182  0D83  00A5               	movwf	m_memset@len+1
 16183  0D84  3188  20DC  318D   	fcall	_m_memset
 16184                           
 16185                           ;modbus_imp.c: 129:     m_memset(&(registers->server_input_register), 0 ,sizeof(register
      +                          s->server_input_register));
 16186  0D87  0828               	movf	default_values_register@registers,w
 16187  0D88  3E01               	addlw	1
 16188  0D89  00A0               	movwf	m_memset@s
 16189  0D8A  3002               	movlw	2
 16190  0D8B  00A1               	movwf	m_memset@s+1
 16191  0D8C  3000               	movlw	0
 16192  0D8D  00A2               	movwf	m_memset@c
 16193  0D8E  00A3               	movwf	m_memset@c+1
 16194  0D8F  3008               	movlw	8
 16195  0D90  00A4               	movwf	m_memset@len
 16196  0D91  3000               	movlw	0
 16197  0D92  00A5               	movwf	m_memset@len+1
 16198  0D93  3188  20DC         	fcall	_m_memset
 16199                           
 16200                           ;modbus_imp.c: 130:     registers->server_input_register.serial_number = 666;
 16201  0D95  0828               	movf	default_values_register@registers,w
 16202  0D96  3E03               	addlw	3
 16203  0D97  0086               	movwf	6
 16204  0D98  3002               	movlw	2	; select bank4/5
 16205  0D99  0087               	movwf	7
 16206  0D9A  309A               	movlw	154
 16207  0D9B  3FC0               	movwi [0]fsr1
 16208  0D9C  3002               	movlw	2
 16209  0D9D  3FC1               	movwi [1]fsr1
 16210                           
 16211                           ;modbus_imp.c: 131:     registers->server_input_register.sensor_type = 999;
 16212  0D9E  0A28               	incf	default_values_register@registers,w
 16213  0D9F  0086               	movwf	6
 16214  0DA0  3002               	movlw	2	; select bank4/5
 16215  0DA1  0087               	movwf	7
 16216  0DA2  30E7               	movlw	231
 16217  0DA3  3FC0               	movwi [0]fsr1
 16218  0DA4  3003               	movlw	3
 16219  0DA5  3FC1               	movwi [1]fsr1
 16220  0DA6  0008               	return
 16221  0DA7                     __end_of_default_values_register:
 16222                           
 16223                           	psect	text58
 16224  08DC                     __ptext58:	
 16225 ;; *************** function _m_memset *****************
 16226 ;; Defined at:
 16227 ;;		line 101 in file "nanomodbus.c"
 16228 ;; Parameters:    Size  Location     Type
 16229 ;;  s               2    0[BANK0 ] PTR void 
 16230 ;;		 -> registers.server_coils(1), main@nmbs(75), main@registers(13), 
 16231 ;;  c               2    2[BANK0 ] int 
 16232 ;;  len             2    4[BANK0 ] unsigned int 
 16233 ;; Auto vars:     Size  Location     Type
 16234 ;;  p               2    6[BANK0 ] PTR unsigned char 
 16235 ;;		 -> registers.server_coils(1), main@nmbs(75), main@registers(13), 
 16236 ;; Return value:  Size  Location     Type
 16237 ;;                  1    wreg      void 
 16238 ;; Registers used:
 16239 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16240 ;; Tracked objects:
 16241 ;;		On entry : 3F/0
 16242 ;;		On exit  : 3F/0
 16243 ;;		Unchanged: 0/0
 16244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16245 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16248 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16249 ;;Total ram usage:        8 bytes
 16250 ;; Hardware stack levels used: 1
 16251 ;; Hardware stack levels required when called: 5
 16252 ;; This function calls:
 16253 ;;		Nothing
 16254 ;; This function is called by:
 16255 ;;		_main
 16256 ;;		_default_values_register
 16257 ;;		_nmbs_create
 16258 ;; This function uses a non-reentrant model
 16259 ;;
 16260                           
 16261  08DC                     _m_memset:	
 16262                           ;psect for function _m_memset
 16263                           
 16264                           
 16265                           ;nanomodbus.c: 101: void m_memset(void *s, int c, unsigned int len);nanomodbus.c: 102: {
      +                          ;nanomodbus.c: 103:     unsigned char* p=s;
 16266                           
 16267                           ;incstack = 0
 16268                           ; Regs used in _m_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 16269  08DC  0821               	movf	m_memset@s+1,w
 16270  08DD  00A7               	movwf	m_memset@p+1
 16271  08DE  0820               	movf	m_memset@s,w
 16272  08DF  00A6               	movwf	m_memset@p
 16273  08E0                     l5469:	
 16274                           ;nanomodbus.c: 104:     while(len--)
 16275                           
 16276                           
 16277                           ;nanomodbus.c: 104:     while(len--)
 16278  08E0  3001               	movlw	1
 16279  08E1  02A4               	subwf	m_memset@len,f
 16280  08E2  3000               	movlw	0
 16281  08E3  3BA5               	subwfb	m_memset@len+1,f
 16282  08E4  0A24               	incf	m_memset@len,w
 16283  08E5  1903               	btfsc	3,2
 16284  08E6  0A25               	incf	m_memset@len+1,w
 16285  08E7  1903               	btfsc	3,2
 16286  08E8  0008               	return
 16287                           
 16288                           ;nanomodbus.c: 105:     {;nanomodbus.c: 106:         *p++ = (unsigned char)c;
 16289  08E9  0826               	movf	m_memset@p,w
 16290  08EA  0086               	movwf	6
 16291  08EB  0827               	movf	m_memset@p+1,w
 16292  08EC  0087               	movwf	7
 16293  08ED  0822               	movf	m_memset@c,w
 16294  08EE  0081               	movwf	1
 16295  08EF  3001               	movlw	1
 16296  08F0  07A6               	addwf	m_memset@p,f
 16297  08F1  3000               	movlw	0
 16298  08F2  3DA7               	addwfc	m_memset@p+1,f
 16299  08F3  28E0               	goto	l5469
 16300  08F4                     __end_of_m_memset:
 16301                           
 16302                           	psect	text59
 16303  1764                     __ptext59:	
 16304 ;; *************** function _check_error_modbus *****************
 16305 ;; Defined at:
 16306 ;;		line 134 in file "modbus_imp.c"
 16307 ;; Parameters:    Size  Location     Type
 16308 ;;  err             1    wreg     enum E10863
 16309 ;; Auto vars:     Size  Location     Type
 16310 ;;  err             1    0[COMMON] enum E10863
 16311 ;; Return value:  Size  Location     Type
 16312 ;;                  1    wreg      void 
 16313 ;; Registers used:
 16314 ;;		wreg
 16315 ;; Tracked objects:
 16316 ;;		On entry : 3F/1
 16317 ;;		On exit  : 3F/1
 16318 ;;		Unchanged: 3F/0
 16319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16324 ;;Total ram usage:        0 bytes
 16325 ;; Hardware stack levels used: 1
 16326 ;; Hardware stack levels required when called: 5
 16327 ;; This function calls:
 16328 ;;		Nothing
 16329 ;; This function is called by:
 16330 ;;		_main
 16331 ;; This function uses a non-reentrant model
 16332 ;;
 16333                           
 16334  1764                     _check_error_modbus:	
 16335                           ;psect for function _check_error_modbus
 16336                           
 16337                           
 16338                           ;incstack = 0
 16339                           ; Regs used in _check_error_modbus: [wreg]
 16340  1764  0008               	return
 16341  1765                     __end_of_check_error_modbus:
 16342                           
 16343                           	psect	text60
 16344  1783                     __ptext60:	
 16345 ;; *************** function _UART_ClearBuffer *****************
 16346 ;; Defined at:
 16347 ;;		line 350 in file "mcc_generated_files/eusart1.c"
 16348 ;; Parameters:    Size  Location     Type
 16349 ;;		None
 16350 ;; Auto vars:     Size  Location     Type
 16351 ;;		None
 16352 ;; Return value:  Size  Location     Type
 16353 ;;                  1    wreg      void 
 16354 ;; Registers used:
 16355 ;;		status,2
 16356 ;; Tracked objects:
 16357 ;;		On entry : 3F/1
 16358 ;;		On exit  : 3F/1
 16359 ;;		Unchanged: 3F/0
 16360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16365 ;;Total ram usage:        0 bytes
 16366 ;; Hardware stack levels used: 1
 16367 ;; Hardware stack levels required when called: 5
 16368 ;; This function calls:
 16369 ;;		Nothing
 16370 ;; This function is called by:
 16371 ;;		_main
 16372 ;; This function uses a non-reentrant model
 16373 ;;
 16374                           
 16375  1783                     _UART_ClearBuffer:	
 16376                           ;psect for function _UART_ClearBuffer
 16377                           
 16378                           
 16379                           ;mcc_generated_files/eusart1.c: 351:     eusart1RxHead = 0;
 16380                           
 16381                           ;incstack = 0
 16382                           ; Regs used in _UART_ClearBuffer: [status,2]
 16383  1783  01F4               	clrf	_eusart1RxHead	;volatile
 16384                           
 16385                           ;mcc_generated_files/eusart1.c: 352:     eusart1RxTail = 0;
 16386  1784  01F3               	clrf	_eusart1RxTail	;volatile
 16387                           
 16388                           ;mcc_generated_files/eusart1.c: 353:     eusart1RxCount = 0;
 16389  1785  01F2               	clrf	_eusart1RxCount	;volatile
 16390  1786  0008               	return
 16391  1787                     __end_of_UART_ClearBuffer:
 16392                           
 16393                           	psect	text61
 16394  0927                     __ptext61:	
 16395 ;; *************** function _SYSTEM_Initialize *****************
 16396 ;; Defined at:
 16397 ;;		line 50 in file "mcc_generated_files/mcc.c"
 16398 ;; Parameters:    Size  Location     Type
 16399 ;;		None
 16400 ;; Auto vars:     Size  Location     Type
 16401 ;;		None
 16402 ;; Return value:  Size  Location     Type
 16403 ;;                  1    wreg      void 
 16404 ;; Registers used:
 16405 ;;		wreg, status,2, status,0, pclath, cstack
 16406 ;; Tracked objects:
 16407 ;;		On entry : B3F/0
 16408 ;;		On exit  : 3F/E
 16409 ;;		Unchanged: 0/0
 16410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16415 ;;Total ram usage:        0 bytes
 16416 ;; Hardware stack levels used: 1
 16417 ;; Hardware stack levels required when called: 7
 16418 ;; This function calls:
 16419 ;;		_ADCC_Initialize
 16420 ;;		_EUSART1_Initialize
 16421 ;;		_FVR_Initialize
 16422 ;;		_OSCILLATOR_Initialize
 16423 ;;		_PIN_MANAGER_Initialize
 16424 ;;		_PMD_Initialize
 16425 ;;		_TMR0_Initialize
 16426 ;;		_TMR1_Initialize
 16427 ;;		_TMR5_Initialize
 16428 ;; This function is called by:
 16429 ;;		_main
 16430 ;; This function uses a non-reentrant model
 16431 ;;
 16432                           
 16433  0927                     _SYSTEM_Initialize:	
 16434                           ;psect for function _SYSTEM_Initialize
 16435                           
 16436                           
 16437                           ;mcc_generated_files/mcc.c: 52:     PMD_Initialize();
 16438                           
 16439                           ;incstack = 0
 16440                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 16441  0927  3197  27CC  3189   	fcall	_PMD_Initialize
 16442                           
 16443                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
 16444  092A  3189  21D6  3189   	fcall	_PIN_MANAGER_Initialize
 16445                           
 16446                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
 16447  092D  3197  27BA  3189   	fcall	_OSCILLATOR_Initialize
 16448                           
 16449                           ;mcc_generated_files/mcc.c: 55:     FVR_Initialize();
 16450  0930  3197  277F  3189   	fcall	_FVR_Initialize
 16451                           
 16452                           ;mcc_generated_files/mcc.c: 56:     ADCC_Initialize();
 16453  0933  3189  210C  3189   	fcall	_ADCC_Initialize
 16454                           
 16455                           ;mcc_generated_files/mcc.c: 57:     TMR5_Initialize();
 16456  0936  3188  208E  3189   	fcall	_TMR5_Initialize
 16457                           
 16458                           ;mcc_generated_files/mcc.c: 58:     TMR1_Initialize();
 16459  0939  3189  2198  3189   	fcall	_TMR1_Initialize
 16460                           
 16461                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
 16462  093C  3197  27EA  3189   	fcall	_TMR0_Initialize
 16463                           
 16464                           ;mcc_generated_files/mcc.c: 60:     EUSART1_Initialize();
 16465  093F  318A  22F4         	fcall	_EUSART1_Initialize
 16466  0941  0008               	return
 16467  0942                     __end_of_SYSTEM_Initialize:
 16468                           
 16469                           	psect	text62
 16470  088E                     __ptext62:	
 16471 ;; *************** function _TMR5_Initialize *****************
 16472 ;; Defined at:
 16473 ;;		line 63 in file "mcc_generated_files/tmr5.c"
 16474 ;; Parameters:    Size  Location     Type
 16475 ;;		None
 16476 ;; Auto vars:     Size  Location     Type
 16477 ;;		None
 16478 ;; Return value:  Size  Location     Type
 16479 ;;                  1    wreg      void 
 16480 ;; Registers used:
 16481 ;;		wreg, status,2
 16482 ;; Tracked objects:
 16483 ;;		On entry : 3D/0
 16484 ;;		On exit  : 3F/4
 16485 ;;		Unchanged: 0/0
 16486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16491 ;;Total ram usage:        0 bytes
 16492 ;; Hardware stack levels used: 1
 16493 ;; Hardware stack levels required when called: 5
 16494 ;; This function calls:
 16495 ;;		Nothing
 16496 ;; This function is called by:
 16497 ;;		_SYSTEM_Initialize
 16498 ;;		_getCount
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502  088E                     _TMR5_Initialize:	
 16503                           ;psect for function _TMR5_Initialize
 16504                           
 16505                           
 16506                           ;mcc_generated_files/tmr5.c: 68:     T5GCON = 0x00;
 16507                           
 16508                           ;incstack = 0
 16509                           ; Regs used in _TMR5_Initialize: [wreg+status,2]
 16510  088E  0144               	movlb	4	; select bank4
 16511  088F  019B               	clrf	27	;volatile
 16512                           
 16513                           ;mcc_generated_files/tmr5.c: 71:     T5GATE = 0x00;
 16514  0890  019C               	clrf	28	;volatile
 16515                           
 16516                           ;mcc_generated_files/tmr5.c: 74:     T5CLK = 0x00;
 16517  0891  019D               	clrf	29	;volatile
 16518                           
 16519                           ;mcc_generated_files/tmr5.c: 77:     TMR5H = 0x00;
 16520  0892  0199               	clrf	25	;volatile
 16521                           
 16522                           ;mcc_generated_files/tmr5.c: 80:     TMR5L = 0x00;
 16523  0893  0198               	clrf	24	;volatile
 16524                           
 16525                           ;mcc_generated_files/tmr5.c: 83:     PIR4bits.TMR5IF = 0;
 16526  0894  014E               	movlb	14	; select bank14
 16527  0895  1210               	bcf	16,4	;volatile
 16528                           
 16529                           ;mcc_generated_files/tmr5.c: 86:     timer5ReloadVal=(uint16_t)((TMR5H << 8) | TMR5L);
 16530  0896  0144               	movlb	4	; select bank4
 16531  0897  0819               	movf	25,w	;volatile
 16532  0898  0142               	movlb	2	; select bank2
 16533  0899  00E7               	movwf	(_timer5ReloadVal+1)^(0+256)	;volatile
 16534  089A  0144               	movlb	4	; select bank4
 16535  089B  0818               	movf	24,w	;volatile
 16536  089C  0142               	movlb	2	; select bank2
 16537  089D  00E6               	movwf	_timer5ReloadVal^(0+256)	;volatile
 16538                           
 16539                           ;mcc_generated_files/tmr5.c: 89:     T5CON = 0x00;
 16540  089E  0144               	movlb	4	; select bank4
 16541  089F  019A               	clrf	26	;volatile
 16542  08A0  0008               	return
 16543  08A1                     __end_of_TMR5_Initialize:
 16544                           
 16545                           	psect	text63
 16546  0998                     __ptext63:	
 16547 ;; *************** function _TMR1_Initialize *****************
 16548 ;; Defined at:
 16549 ;;		line 69 in file "mcc_generated_files/tmr1.c"
 16550 ;; Parameters:    Size  Location     Type
 16551 ;;		None
 16552 ;; Auto vars:     Size  Location     Type
 16553 ;;		None
 16554 ;; Return value:  Size  Location     Type
 16555 ;;                  1    wreg      void 
 16556 ;; Registers used:
 16557 ;;		wreg, status,2, status,0, pclath, cstack
 16558 ;; Tracked objects:
 16559 ;;		On entry : 3F/4
 16560 ;;		On exit  : 3F/4
 16561 ;;		Unchanged: 0/0
 16562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;Total ram usage:        0 bytes
 16568 ;; Hardware stack levels used: 1
 16569 ;; Hardware stack levels required when called: 6
 16570 ;; This function calls:
 16571 ;;		_TMR1_SetInterruptHandler
 16572 ;; This function is called by:
 16573 ;;		_SYSTEM_Initialize
 16574 ;; This function uses a non-reentrant model
 16575 ;;
 16576                           
 16577  0998                     _TMR1_Initialize:	
 16578                           ;psect for function _TMR1_Initialize
 16579                           
 16580                           
 16581                           ;mcc_generated_files/tmr1.c: 74:     T1GCON = 0x00;
 16582                           
 16583                           ;incstack = 0
 16584                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 16585  0998  018F               	clrf	15	;volatile
 16586                           
 16587                           ;mcc_generated_files/tmr1.c: 77:     T1GATE = 0x00;
 16588  0999  0190               	clrf	16	;volatile
 16589                           
 16590                           ;mcc_generated_files/tmr1.c: 80:     T1CLK = 0x01;
 16591  099A  3001               	movlw	1
 16592  099B  0091               	movwf	17	;volatile
 16593                           
 16594                           ;mcc_generated_files/tmr1.c: 83:     TMR1H = 0xFE;
 16595  099C  30FE               	movlw	254
 16596  099D  008D               	movwf	13	;volatile
 16597                           
 16598                           ;mcc_generated_files/tmr1.c: 86:     TMR1L = 0xED;
 16599  099E  30ED               	movlw	237
 16600  099F  008C               	movwf	12	;volatile
 16601                           
 16602                           ;mcc_generated_files/tmr1.c: 89:     PIR4bits.TMR1IF = 0;
 16603  09A0  014E               	movlb	14	; select bank14
 16604  09A1  1010               	bcf	16,0	;volatile
 16605                           
 16606                           ;mcc_generated_files/tmr1.c: 92:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 16607  09A2  0144               	movlb	4	; select bank4
 16608  09A3  080D               	movf	13,w	;volatile
 16609  09A4  0142               	movlb	2	; select bank2
 16610  09A5  00E5               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
 16611  09A6  0144               	movlb	4	; select bank4
 16612  09A7  080C               	movf	12,w	;volatile
 16613  09A8  0142               	movlb	2	; select bank2
 16614  09A9  00E4               	movwf	_timer1ReloadVal^(0+256)	;volatile
 16615                           
 16616                           ;mcc_generated_files/tmr1.c: 95:     PIE4bits.TMR1IE = 1;
 16617  09AA  014E               	movlb	14	; select bank14
 16618  09AB  141A               	bsf	26,0	;volatile
 16619                           
 16620                           ;mcc_generated_files/tmr1.c: 98:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
 16621  09AC  306E               	movlw	low _TMR1_DefaultInterruptHandler
 16622  09AD  0140               	movlb	0	; select bank0
 16623  09AE  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 16624  09AF  3008               	movlw	high _TMR1_DefaultInterruptHandler
 16625  09B0  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 16626  09B1  3197  27B2         	fcall	_TMR1_SetInterruptHandler
 16627                           
 16628                           ;mcc_generated_files/tmr1.c: 101:     T1CON = 0x01;
 16629  09B3  3001               	movlw	1
 16630  09B4  0144               	movlb	4	; select bank4
 16631  09B5  008E               	movwf	14	;volatile
 16632  09B6  0008               	return
 16633  09B7                     __end_of_TMR1_Initialize:
 16634                           
 16635                           	psect	text64
 16636  17B2                     __ptext64:	
 16637 ;; *************** function _TMR1_SetInterruptHandler *****************
 16638 ;; Defined at:
 16639 ;;		line 183 in file "mcc_generated_files/tmr1.c"
 16640 ;; Parameters:    Size  Location     Type
 16641 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 16642 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 16643 ;; Auto vars:     Size  Location     Type
 16644 ;;		None
 16645 ;; Return value:  Size  Location     Type
 16646 ;;                  1    wreg      void 
 16647 ;; Registers used:
 16648 ;;		wreg
 16649 ;; Tracked objects:
 16650 ;;		On entry : 3F/0
 16651 ;;		On exit  : 3F/2
 16652 ;;		Unchanged: 0/0
 16653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16654 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16658 ;;Total ram usage:        2 bytes
 16659 ;; Hardware stack levels used: 1
 16660 ;; Hardware stack levels required when called: 5
 16661 ;; This function calls:
 16662 ;;		Nothing
 16663 ;; This function is called by:
 16664 ;;		_TMR1_Initialize
 16665 ;; This function uses a non-reentrant model
 16666 ;;
 16667                           
 16668  17B2                     _TMR1_SetInterruptHandler:	
 16669                           ;psect for function _TMR1_SetInterruptHandler
 16670                           
 16671                           
 16672                           ;mcc_generated_files/tmr1.c: 184:     TMR1_InterruptHandler = InterruptHandler;
 16673                           
 16674                           ;incstack = 0
 16675                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 16676  17B2  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 16677  17B3  0142               	movlb	2	; select bank2
 16678  17B4  00E3               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
 16679  17B5  0140               	movlb	0	; select bank0
 16680  17B6  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 16681  17B7  0142               	movlb	2	; select bank2
 16682  17B8  00E2               	movwf	_TMR1_InterruptHandler^(0+256)
 16683  17B9  0008               	return
 16684  17BA                     __end_of_TMR1_SetInterruptHandler:
 16685                           
 16686                           	psect	text65
 16687  17EA                     __ptext65:	
 16688 ;; *************** function _TMR0_Initialize *****************
 16689 ;; Defined at:
 16690 ;;		line 60 in file "mcc_generated_files/tmr0.c"
 16691 ;; Parameters:    Size  Location     Type
 16692 ;;		None
 16693 ;; Auto vars:     Size  Location     Type
 16694 ;;		None
 16695 ;; Return value:  Size  Location     Type
 16696 ;;                  1    wreg      void 
 16697 ;; Registers used:
 16698 ;;		wreg, status,2
 16699 ;; Tracked objects:
 16700 ;;		On entry : 3F/4
 16701 ;;		On exit  : 3F/B
 16702 ;;		Unchanged: 0/0
 16703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;Total ram usage:        0 bytes
 16709 ;; Hardware stack levels used: 1
 16710 ;; Hardware stack levels required when called: 5
 16711 ;; This function calls:
 16712 ;;		Nothing
 16713 ;; This function is called by:
 16714 ;;		_SYSTEM_Initialize
 16715 ;;		_getCount
 16716 ;; This function uses a non-reentrant model
 16717 ;;
 16718                           
 16719  17EA                     _TMR0_Initialize:	
 16720                           ;psect for function _TMR0_Initialize
 16721                           
 16722                           
 16723                           ;mcc_generated_files/tmr0.c: 65:     T0CON1 = 0x4C;
 16724                           
 16725                           ;incstack = 0
 16726                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
 16727  17EA  304C               	movlw	76
 16728  17EB  014B               	movlb	11	; select bank11
 16729  17EC  009F               	movwf	31	;volatile
 16730                           
 16731                           ;mcc_generated_files/tmr0.c: 68:     TMR0H = 0x98;
 16732  17ED  3098               	movlw	152
 16733  17EE  009D               	movwf	29	;volatile
 16734                           
 16735                           ;mcc_generated_files/tmr0.c: 71:     TMR0L = 0x00;
 16736  17EF  019C               	clrf	28	;volatile
 16737                           
 16738                           ;mcc_generated_files/tmr0.c: 74:     PIR0bits.TMR0IF = 0;
 16739  17F0  014E               	movlb	14	; select bank14
 16740  17F1  128C               	bcf	12,5	;volatile
 16741                           
 16742                           ;mcc_generated_files/tmr0.c: 77:     T0CON0 = 0x00;
 16743  17F2  014B               	movlb	11	; select bank11
 16744  17F3  019E               	clrf	30	;volatile
 16745  17F4  0008               	return
 16746  17F5                     __end_of_TMR0_Initialize:
 16747                           
 16748                           	psect	text66
 16749  17CC                     __ptext66:	
 16750 ;; *************** function _PMD_Initialize *****************
 16751 ;; Defined at:
 16752 ;;		line 77 in file "mcc_generated_files/mcc.c"
 16753 ;; Parameters:    Size  Location     Type
 16754 ;;		None
 16755 ;; Auto vars:     Size  Location     Type
 16756 ;;		None
 16757 ;; Return value:  Size  Location     Type
 16758 ;;                  1    wreg      void 
 16759 ;; Registers used:
 16760 ;;		status,2
 16761 ;; Tracked objects:
 16762 ;;		On entry : B3F/0
 16763 ;;		On exit  : B3F/F
 16764 ;;		Unchanged: B00/0
 16765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16770 ;;Total ram usage:        0 bytes
 16771 ;; Hardware stack levels used: 1
 16772 ;; Hardware stack levels required when called: 5
 16773 ;; This function calls:
 16774 ;;		Nothing
 16775 ;; This function is called by:
 16776 ;;		_SYSTEM_Initialize
 16777 ;; This function uses a non-reentrant model
 16778 ;;
 16779                           
 16780  17CC                     _PMD_Initialize:	
 16781                           ;psect for function _PMD_Initialize
 16782                           
 16783                           
 16784                           ;mcc_generated_files/mcc.c: 80:     PMD0 = 0x00;
 16785                           
 16786                           ;incstack = 0
 16787                           ; Regs used in _PMD_Initialize: [status,2]
 16788  17CC  014F               	movlb	15	; select bank15
 16789  17CD  0196               	clrf	22	;volatile
 16790                           
 16791                           ;mcc_generated_files/mcc.c: 82:     PMD1 = 0x00;
 16792  17CE  0197               	clrf	23	;volatile
 16793                           
 16794                           ;mcc_generated_files/mcc.c: 84:     PMD2 = 0x00;
 16795  17CF  0198               	clrf	24	;volatile
 16796                           
 16797                           ;mcc_generated_files/mcc.c: 86:     PMD3 = 0x00;
 16798  17D0  0199               	clrf	25	;volatile
 16799                           
 16800                           ;mcc_generated_files/mcc.c: 88:     PMD4 = 0x00;
 16801  17D1  019A               	clrf	26	;volatile
 16802                           
 16803                           ;mcc_generated_files/mcc.c: 90:     PMD5 = 0x00;
 16804  17D2  019B               	clrf	27	;volatile
 16805                           
 16806                           ;mcc_generated_files/mcc.c: 92:     PMD6 = 0x00;
 16807  17D3  019C               	clrf	28	;volatile
 16808                           
 16809                           ;mcc_generated_files/mcc.c: 94:     PMD7 = 0x00;
 16810  17D4  019D               	clrf	29	;volatile
 16811  17D5  0008               	return
 16812  17D6                     __end_of_PMD_Initialize:
 16813                           
 16814                           	psect	text67
 16815  09D6                     __ptext67:	
 16816 ;; *************** function _PIN_MANAGER_Initialize *****************
 16817 ;; Defined at:
 16818 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 16819 ;; Parameters:    Size  Location     Type
 16820 ;;		None
 16821 ;; Auto vars:     Size  Location     Type
 16822 ;;		None
 16823 ;; Return value:  Size  Location     Type
 16824 ;;                  1    wreg      void 
 16825 ;; Registers used:
 16826 ;;		wreg, status,2
 16827 ;; Tracked objects:
 16828 ;;		On entry : B3F/F
 16829 ;;		On exit  : B3F/3D
 16830 ;;		Unchanged: B00/0
 16831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;Total ram usage:        0 bytes
 16837 ;; Hardware stack levels used: 1
 16838 ;; Hardware stack levels required when called: 5
 16839 ;; This function calls:
 16840 ;;		Nothing
 16841 ;; This function is called by:
 16842 ;;		_SYSTEM_Initialize
 16843 ;; This function uses a non-reentrant model
 16844 ;;
 16845                           
 16846  09D6                     _PIN_MANAGER_Initialize:	
 16847                           ;psect for function _PIN_MANAGER_Initialize
 16848                           
 16849                           
 16850                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 16851                           
 16852                           ;incstack = 0
 16853                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 16854  09D6  0140               	movlb	0	; select bank0
 16855  09D7  0198               	clrf	24	;volatile
 16856                           
 16857                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
 16858  09D8  019A               	clrf	26	;volatile
 16859                           
 16860                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x3F;
 16861  09D9  303F               	movlw	63
 16862  09DA  0092               	movwf	18	;volatile
 16863                           
 16864                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x27;
 16865  09DB  3027               	movlw	39
 16866  09DC  0094               	movwf	20	;volatile
 16867                           
 16868                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x1E;
 16869  09DD  301E               	movlw	30
 16870  09DE  017E               	movlb	62	; select bank62
 16871  09DF  00CE               	movwf	78	;volatile
 16872                           
 16873                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x37;
 16874  09E0  3037               	movlw	55
 16875  09E1  00B8               	movwf	56	;volatile
 16876                           
 16877                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
 16878  09E2  01B9               	clrf	57	;volatile
 16879                           
 16880                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
 16881  09E3  01CF               	clrf	79	;volatile
 16882                           
 16883                           ;mcc_generated_files/pin_manager.c: 84:     ODCONA = 0x00;
 16884  09E4  01BA               	clrf	58	;volatile
 16885                           
 16886                           ;mcc_generated_files/pin_manager.c: 85:     ODCONC = 0x00;
 16887  09E5  01D0               	clrf	80	;volatile
 16888                           
 16889                           ;mcc_generated_files/pin_manager.c: 90:     SLRCONA = 0x37;
 16890  09E6  3037               	movlw	55
 16891  09E7  00BB               	movwf	59	;volatile
 16892                           
 16893                           ;mcc_generated_files/pin_manager.c: 91:     SLRCONC = 0x3F;
 16894  09E8  303F               	movlw	63
 16895  09E9  00D1               	movwf	81	;volatile
 16896                           
 16897                           ;mcc_generated_files/pin_manager.c: 96:     INLVLA = 0x3F;
 16898  09EA  303F               	movlw	63
 16899  09EB  00BC               	movwf	60	;volatile
 16900                           
 16901                           ;mcc_generated_files/pin_manager.c: 97:     INLVLC = 0x3F;
 16902  09EC  303F               	movlw	63
 16903  09ED  00D2               	movwf	82	;volatile
 16904                           
 16905                           ;mcc_generated_files/pin_manager.c: 106:     RC4PPS = 0x0F;
 16906  09EE  300F               	movlw	15
 16907  09EF  00A4               	movwf	36	;volatile
 16908                           
 16909                           ;mcc_generated_files/pin_manager.c: 107:     T5CKIPPS = 0x10;
 16910  09F0  3010               	movlw	16
 16911  09F1  017D               	movlb	61	; select bank61
 16912  09F2  0096               	movwf	22	;volatile
 16913                           
 16914                           ;mcc_generated_files/pin_manager.c: 108:     RX1DTPPS = 0x15;
 16915  09F3  3015               	movlw	21
 16916  09F4  00CB               	movwf	75	;volatile
 16917  09F5  0008               	return
 16918  09F6                     __end_of_PIN_MANAGER_Initialize:
 16919                           
 16920                           	psect	text68
 16921  17BA                     __ptext68:	
 16922 ;; *************** function _OSCILLATOR_Initialize *****************
 16923 ;; Defined at:
 16924 ;;		line 63 in file "mcc_generated_files/mcc.c"
 16925 ;; Parameters:    Size  Location     Type
 16926 ;;		None
 16927 ;; Auto vars:     Size  Location     Type
 16928 ;;		None
 16929 ;; Return value:  Size  Location     Type
 16930 ;;                  1    wreg      void 
 16931 ;; Registers used:
 16932 ;;		wreg, status,2
 16933 ;; Tracked objects:
 16934 ;;		On entry : B3F/3D
 16935 ;;		On exit  : B3F/11
 16936 ;;		Unchanged: B00/0
 16937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;Total ram usage:        0 bytes
 16943 ;; Hardware stack levels used: 1
 16944 ;; Hardware stack levels required when called: 5
 16945 ;; This function calls:
 16946 ;;		Nothing
 16947 ;; This function is called by:
 16948 ;;		_SYSTEM_Initialize
 16949 ;; This function uses a non-reentrant model
 16950 ;;
 16951                           
 16952  17BA                     _OSCILLATOR_Initialize:	
 16953                           ;psect for function _OSCILLATOR_Initialize
 16954                           
 16955                           
 16956                           ;mcc_generated_files/mcc.c: 66:     OSCCON1 = 0x62;
 16957                           
 16958                           ;incstack = 0
 16959                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 16960  17BA  3062               	movlw	98
 16961  17BB  0151               	movlb	17	; select bank17
 16962  17BC  008D               	movwf	13	;volatile
 16963                           
 16964                           ;mcc_generated_files/mcc.c: 68:     OSCCON3 = 0x00;
 16965  17BD  018F               	clrf	15	;volatile
 16966                           
 16967                           ;mcc_generated_files/mcc.c: 70:     OSCEN = 0x00;
 16968  17BE  0191               	clrf	17	;volatile
 16969                           
 16970                           ;mcc_generated_files/mcc.c: 72:     OSCFRQ = 0x02;
 16971  17BF  3002               	movlw	2
 16972  17C0  0093               	movwf	19	;volatile
 16973                           
 16974                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
 16975  17C1  0192               	clrf	18	;volatile
 16976  17C2  0008               	return
 16977  17C3                     __end_of_OSCILLATOR_Initialize:
 16978                           
 16979                           	psect	text69
 16980  177F                     __ptext69:	
 16981 ;; *************** function _FVR_Initialize *****************
 16982 ;; Defined at:
 16983 ;;		line 58 in file "mcc_generated_files/fvr.c"
 16984 ;; Parameters:    Size  Location     Type
 16985 ;;		None
 16986 ;; Auto vars:     Size  Location     Type
 16987 ;;		None
 16988 ;; Return value:  Size  Location     Type
 16989 ;;                  1    wreg      void 
 16990 ;; Registers used:
 16991 ;;		wreg
 16992 ;; Tracked objects:
 16993 ;;		On entry : B3F/11
 16994 ;;		On exit  : B3F/12
 16995 ;;		Unchanged: B00/0
 16996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17001 ;;Total ram usage:        0 bytes
 17002 ;; Hardware stack levels used: 1
 17003 ;; Hardware stack levels required when called: 5
 17004 ;; This function calls:
 17005 ;;		Nothing
 17006 ;; This function is called by:
 17007 ;;		_SYSTEM_Initialize
 17008 ;; This function uses a non-reentrant model
 17009 ;;
 17010                           
 17011  177F                     _FVR_Initialize:	
 17012                           ;psect for function _FVR_Initialize
 17013                           
 17014                           
 17015                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x82;
 17016                           
 17017                           ;incstack = 0
 17018                           ; Regs used in _FVR_Initialize: [wreg]
 17019  177F  3082               	movlw	130
 17020  1780  0152               	movlb	18	; select bank18
 17021  1781  008C               	movwf	12	;volatile
 17022  1782  0008               	return
 17023  1783                     __end_of_FVR_Initialize:
 17024                           
 17025                           	psect	text70
 17026  0AF4                     __ptext70:	
 17027 ;; *************** function _EUSART1_Initialize *****************
 17028 ;; Defined at:
 17029 ;;		line 177 in file "mcc_generated_files/eusart1.c"
 17030 ;; Parameters:    Size  Location     Type
 17031 ;;		None
 17032 ;; Auto vars:     Size  Location     Type
 17033 ;;		None
 17034 ;; Return value:  Size  Location     Type
 17035 ;;                  1    wreg      void 
 17036 ;; Registers used:
 17037 ;;		wreg, status,2, status,0, pclath, cstack
 17038 ;; Tracked objects:
 17039 ;;		On entry : 3F/B
 17040 ;;		On exit  : 3F/E
 17041 ;;		Unchanged: 0/0
 17042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17047 ;;Total ram usage:        0 bytes
 17048 ;; Hardware stack levels used: 1
 17049 ;; Hardware stack levels required when called: 6
 17050 ;; This function calls:
 17051 ;;		_EUSART1_SetErrorHandler
 17052 ;;		_EUSART1_SetFramingErrorHandler
 17053 ;;		_EUSART1_SetOverrunErrorHandler
 17054 ;;		_EUSART1_SetRxInterruptHandler
 17055 ;; This function is called by:
 17056 ;;		_SYSTEM_Initialize
 17057 ;; This function uses a non-reentrant model
 17058 ;;
 17059                           
 17060  0AF4                     _EUSART1_Initialize:	
 17061                           ;psect for function _EUSART1_Initialize
 17062                           
 17063                           
 17064                           ;mcc_generated_files/eusart1.c: 180:     PIE3bits.RC1IE = 0;
 17065                           
 17066                           ;incstack = 0
 17067                           ; Regs used in _EUSART1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 17068  0AF4  014E               	movlb	14	; select bank14
 17069  0AF5  1299               	bcf	25,5	;volatile
 17070                           
 17071                           ;mcc_generated_files/eusart1.c: 181:     EUSART1_SetRxInterruptHandler(EUSART1_Receive_I
      +                          SR);
 17072  0AF6  3025               	movlw	low _EUSART1_Receive_ISR
 17073  0AF7  0140               	movlb	0	; select bank0
 17074  0AF8  00A0               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler
 17075  0AF9  300B               	movlw	high _EUSART1_Receive_ISR
 17076  0AFA  00A1               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler+1
 17077  0AFB  3197  27AA  318A   	fcall	_EUSART1_SetRxInterruptHandler
 17078                           
 17079                           ;mcc_generated_files/eusart1.c: 185:     BAUD1CON = 0x08;
 17080  0AFE  3008               	movlw	8
 17081  0AFF  009F               	movwf	31	;volatile
 17082                           
 17083                           ;mcc_generated_files/eusart1.c: 188:     RC1STA = 0x90;
 17084  0B00  3090               	movlw	144
 17085  0B01  009D               	movwf	29	;volatile
 17086                           
 17087                           ;mcc_generated_files/eusart1.c: 191:     TX1STA = 0x24;
 17088  0B02  3024               	movlw	36
 17089  0B03  009E               	movwf	30	;volatile
 17090                           
 17091                           ;mcc_generated_files/eusart1.c: 194:     SP1BRGL = 0x19;
 17092  0B04  3019               	movlw	25
 17093  0B05  009B               	movwf	27	;volatile
 17094                           
 17095                           ;mcc_generated_files/eusart1.c: 197:     SP1BRGH = 0x00;
 17096  0B06  019C               	clrf	28	;volatile
 17097                           
 17098                           ;mcc_generated_files/eusart1.c: 203:     EUSART1_SetFramingErrorHandler(EUSART1_DefaultF
      +                          ramingErrorHandler);
 17099  0B07  3063               	movlw	low _EUSART1_DefaultFramingErrorHandler
 17100  0B08  0140               	movlb	0	; select bank0
 17101  0B09  00A0               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler
 17102  0B0A  3017               	movlw	high _EUSART1_DefaultFramingErrorHandler
 17103  0B0B  00A1               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler+1
 17104  0B0C  3197  279A  318A   	fcall	_EUSART1_SetFramingErrorHandler
 17105                           
 17106                           ;mcc_generated_files/eusart1.c: 204:     EUSART1_SetOverrunErrorHandler(EUSART1_DefaultO
      +                          verrunErrorHandler);
 17107  0B0F  306F               	movlw	low _EUSART1_DefaultOverrunErrorHandler
 17108  0B10  0140               	movlb	0	; select bank0
 17109  0B11  00A0               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler
 17110  0B12  3017               	movlw	high _EUSART1_DefaultOverrunErrorHandler
 17111  0B13  00A1               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler+1
 17112  0B14  3197  27A2  318A   	fcall	_EUSART1_SetOverrunErrorHandler
 17113                           
 17114                           ;mcc_generated_files/eusart1.c: 205:     EUSART1_SetErrorHandler(EUSART1_DefaultErrorHan
      +                          dler);
 17115  0B17  306C               	movlw	low _EUSART1_DefaultErrorHandler
 17116  0B18  0140               	movlb	0	; select bank0
 17117  0B19  00A0               	movwf	EUSART1_SetErrorHandler@interruptHandler
 17118  0B1A  3017               	movlw	high _EUSART1_DefaultErrorHandler
 17119  0B1B  00A1               	movwf	EUSART1_SetErrorHandler@interruptHandler+1
 17120  0B1C  3197  2792         	fcall	_EUSART1_SetErrorHandler
 17121                           
 17122                           ;mcc_generated_files/eusart1.c: 207:     eusart1RxLastError.status = 0;
 17123  0B1E  01CE               	clrf	_eusart1RxLastError^(0+256)	;volatile
 17124                           
 17125                           ;mcc_generated_files/eusart1.c: 210:     eusart1RxHead = 0;
 17126  0B1F  01F4               	clrf	_eusart1RxHead	;volatile
 17127                           
 17128                           ;mcc_generated_files/eusart1.c: 211:     eusart1RxTail = 0;
 17129  0B20  01F3               	clrf	_eusart1RxTail	;volatile
 17130                           
 17131                           ;mcc_generated_files/eusart1.c: 212:     eusart1RxCount = 0;
 17132  0B21  01F2               	clrf	_eusart1RxCount	;volatile
 17133                           
 17134                           ;mcc_generated_files/eusart1.c: 215:     PIE3bits.RC1IE = 1;
 17135  0B22  014E               	movlb	14	; select bank14
 17136  0B23  1699               	bsf	25,5	;volatile
 17137  0B24  0008               	return
 17138  0B25                     __end_of_EUSART1_Initialize:
 17139                           
 17140                           	psect	text71
 17141  17AA                     __ptext71:	
 17142 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
 17143 ;; Defined at:
 17144 ;;		line 346 in file "mcc_generated_files/eusart1.c"
 17145 ;; Parameters:    Size  Location     Type
 17146 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 17147 ;;		 -> EUSART1_Receive_ISR(1), 
 17148 ;; Auto vars:     Size  Location     Type
 17149 ;;		None
 17150 ;; Return value:  Size  Location     Type
 17151 ;;                  1    wreg      void 
 17152 ;; Registers used:
 17153 ;;		wreg
 17154 ;; Tracked objects:
 17155 ;;		On entry : 3F/0
 17156 ;;		On exit  : 3F/2
 17157 ;;		Unchanged: 0/0
 17158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17159 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17162 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17163 ;;Total ram usage:        2 bytes
 17164 ;; Hardware stack levels used: 1
 17165 ;; Hardware stack levels required when called: 5
 17166 ;; This function calls:
 17167 ;;		Nothing
 17168 ;; This function is called by:
 17169 ;;		_EUSART1_Initialize
 17170 ;; This function uses a non-reentrant model
 17171 ;;
 17172                           
 17173  17AA                     _EUSART1_SetRxInterruptHandler:	
 17174                           ;psect for function _EUSART1_SetRxInterruptHandler
 17175                           
 17176                           
 17177                           ;mcc_generated_files/eusart1.c: 347:     EUSART1_RxDefaultInterruptHandler = interruptHa
      +                          ndler;
 17178                           
 17179                           ;incstack = 0
 17180                           ; Regs used in _EUSART1_SetRxInterruptHandler: [wreg]
 17181  17AA  0821               	movf	EUSART1_SetRxInterruptHandler@interruptHandler+1,w
 17182  17AB  0142               	movlb	2	; select bank2
 17183  17AC  00EF               	movwf	(_EUSART1_RxDefaultInterruptHandler+1)^(0+256)
 17184  17AD  0140               	movlb	0	; select bank0
 17185  17AE  0820               	movf	EUSART1_SetRxInterruptHandler@interruptHandler,w
 17186  17AF  0142               	movlb	2	; select bank2
 17187  17B0  00EE               	movwf	_EUSART1_RxDefaultInterruptHandler^(0+256)
 17188  17B1  0008               	return
 17189  17B2                     __end_of_EUSART1_SetRxInterruptHandler:
 17190                           
 17191                           	psect	text72
 17192  17A2                     __ptext72:	
 17193 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
 17194 ;; Defined at:
 17195 ;;		line 337 in file "mcc_generated_files/eusart1.c"
 17196 ;; Parameters:    Size  Location     Type
 17197 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 17198 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
 17199 ;; Auto vars:     Size  Location     Type
 17200 ;;		None
 17201 ;; Return value:  Size  Location     Type
 17202 ;;                  1    wreg      void 
 17203 ;; Registers used:
 17204 ;;		wreg
 17205 ;; Tracked objects:
 17206 ;;		On entry : 3F/0
 17207 ;;		On exit  : 3F/2
 17208 ;;		Unchanged: 0/0
 17209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17214 ;;Total ram usage:        2 bytes
 17215 ;; Hardware stack levels used: 1
 17216 ;; Hardware stack levels required when called: 5
 17217 ;; This function calls:
 17218 ;;		Nothing
 17219 ;; This function is called by:
 17220 ;;		_EUSART1_Initialize
 17221 ;; This function uses a non-reentrant model
 17222 ;;
 17223                           
 17224  17A2                     _EUSART1_SetOverrunErrorHandler:	
 17225                           ;psect for function _EUSART1_SetOverrunErrorHandler
 17226                           
 17227                           
 17228                           ;mcc_generated_files/eusart1.c: 338:     EUSART1_OverrunErrorHandler = interruptHandler;
 17229                           
 17230                           ;incstack = 0
 17231                           ; Regs used in _EUSART1_SetOverrunErrorHandler: [wreg]
 17232  17A2  0821               	movf	EUSART1_SetOverrunErrorHandler@interruptHandler+1,w
 17233  17A3  0142               	movlb	2	; select bank2
 17234  17A4  00EB               	movwf	(_EUSART1_OverrunErrorHandler+1)^(0+256)
 17235  17A5  0140               	movlb	0	; select bank0
 17236  17A6  0820               	movf	EUSART1_SetOverrunErrorHandler@interruptHandler,w
 17237  17A7  0142               	movlb	2	; select bank2
 17238  17A8  00EA               	movwf	_EUSART1_OverrunErrorHandler^(0+256)
 17239  17A9  0008               	return
 17240  17AA                     __end_of_EUSART1_SetOverrunErrorHandler:
 17241                           
 17242                           	psect	text73
 17243  179A                     __ptext73:	
 17244 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
 17245 ;; Defined at:
 17246 ;;		line 333 in file "mcc_generated_files/eusart1.c"
 17247 ;; Parameters:    Size  Location     Type
 17248 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 17249 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
 17250 ;; Auto vars:     Size  Location     Type
 17251 ;;		None
 17252 ;; Return value:  Size  Location     Type
 17253 ;;                  1    wreg      void 
 17254 ;; Registers used:
 17255 ;;		wreg
 17256 ;; Tracked objects:
 17257 ;;		On entry : 3F/0
 17258 ;;		On exit  : 3F/2
 17259 ;;		Unchanged: 0/0
 17260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17261 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17265 ;;Total ram usage:        2 bytes
 17266 ;; Hardware stack levels used: 1
 17267 ;; Hardware stack levels required when called: 5
 17268 ;; This function calls:
 17269 ;;		Nothing
 17270 ;; This function is called by:
 17271 ;;		_EUSART1_Initialize
 17272 ;; This function uses a non-reentrant model
 17273 ;;
 17274                           
 17275  179A                     _EUSART1_SetFramingErrorHandler:	
 17276                           ;psect for function _EUSART1_SetFramingErrorHandler
 17277                           
 17278                           
 17279                           ;mcc_generated_files/eusart1.c: 334:     EUSART1_FramingErrorHandler = interruptHandler;
 17280                           
 17281                           ;incstack = 0
 17282                           ; Regs used in _EUSART1_SetFramingErrorHandler: [wreg]
 17283  179A  0821               	movf	EUSART1_SetFramingErrorHandler@interruptHandler+1,w
 17284  179B  0142               	movlb	2	; select bank2
 17285  179C  00ED               	movwf	(_EUSART1_FramingErrorHandler+1)^(0+256)
 17286  179D  0140               	movlb	0	; select bank0
 17287  179E  0820               	movf	EUSART1_SetFramingErrorHandler@interruptHandler,w
 17288  179F  0142               	movlb	2	; select bank2
 17289  17A0  00EC               	movwf	_EUSART1_FramingErrorHandler^(0+256)
 17290  17A1  0008               	return
 17291  17A2                     __end_of_EUSART1_SetFramingErrorHandler:
 17292                           
 17293                           	psect	text74
 17294  1792                     __ptext74:	
 17295 ;; *************** function _EUSART1_SetErrorHandler *****************
 17296 ;; Defined at:
 17297 ;;		line 341 in file "mcc_generated_files/eusart1.c"
 17298 ;; Parameters:    Size  Location     Type
 17299 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 17300 ;;		 -> EUSART1_DefaultErrorHandler(1), 
 17301 ;; Auto vars:     Size  Location     Type
 17302 ;;		None
 17303 ;; Return value:  Size  Location     Type
 17304 ;;                  1    wreg      void 
 17305 ;; Registers used:
 17306 ;;		wreg
 17307 ;; Tracked objects:
 17308 ;;		On entry : 3F/0
 17309 ;;		On exit  : 3F/2
 17310 ;;		Unchanged: 0/0
 17311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17312 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;Total ram usage:        2 bytes
 17317 ;; Hardware stack levels used: 1
 17318 ;; Hardware stack levels required when called: 5
 17319 ;; This function calls:
 17320 ;;		Nothing
 17321 ;; This function is called by:
 17322 ;;		_EUSART1_Initialize
 17323 ;; This function uses a non-reentrant model
 17324 ;;
 17325                           
 17326  1792                     _EUSART1_SetErrorHandler:	
 17327                           ;psect for function _EUSART1_SetErrorHandler
 17328                           
 17329                           
 17330                           ;mcc_generated_files/eusart1.c: 342:     EUSART1_ErrorHandler = interruptHandler;
 17331                           
 17332                           ;incstack = 0
 17333                           ; Regs used in _EUSART1_SetErrorHandler: [wreg]
 17334  1792  0821               	movf	EUSART1_SetErrorHandler@interruptHandler+1,w
 17335  1793  0142               	movlb	2	; select bank2
 17336  1794  00E9               	movwf	(_EUSART1_ErrorHandler+1)^(0+256)
 17337  1795  0140               	movlb	0	; select bank0
 17338  1796  0820               	movf	EUSART1_SetErrorHandler@interruptHandler,w
 17339  1797  0142               	movlb	2	; select bank2
 17340  1798  00E8               	movwf	_EUSART1_ErrorHandler^(0+256)
 17341  1799  0008               	return
 17342  179A                     __end_of_EUSART1_SetErrorHandler:
 17343                           
 17344                           	psect	text75
 17345  090C                     __ptext75:	
 17346 ;; *************** function _ADCC_Initialize *****************
 17347 ;; Defined at:
 17348 ;;		line 63 in file "mcc_generated_files/adcc.c"
 17349 ;; Parameters:    Size  Location     Type
 17350 ;;		None
 17351 ;; Auto vars:     Size  Location     Type
 17352 ;;		None
 17353 ;; Return value:  Size  Location     Type
 17354 ;;                  1    wreg      void 
 17355 ;; Registers used:
 17356 ;;		wreg, status,2
 17357 ;; Tracked objects:
 17358 ;;		On entry : B3F/12
 17359 ;;		On exit  : B3F/2
 17360 ;;		Unchanged: B00/0
 17361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17366 ;;Total ram usage:        0 bytes
 17367 ;; Hardware stack levels used: 1
 17368 ;; Hardware stack levels required when called: 5
 17369 ;; This function calls:
 17370 ;;		Nothing
 17371 ;; This function is called by:
 17372 ;;		_SYSTEM_Initialize
 17373 ;; This function uses a non-reentrant model
 17374 ;;
 17375                           
 17376  090C                     _ADCC_Initialize:	
 17377                           ;psect for function _ADCC_Initialize
 17378                           
 17379                           
 17380                           ;mcc_generated_files/adcc.c: 67:     ADLTHL = 0x00;
 17381                           
 17382                           ;incstack = 0
 17383                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 17384  090C  0141               	movlb	1	; select bank1
 17385  090D  018C               	clrf	12	;volatile
 17386                           
 17387                           ;mcc_generated_files/adcc.c: 69:     ADLTHH = 0x00;
 17388  090E  018D               	clrf	13	;volatile
 17389                           
 17390                           ;mcc_generated_files/adcc.c: 71:     ADUTHL = 0x00;
 17391  090F  018E               	clrf	14	;volatile
 17392                           
 17393                           ;mcc_generated_files/adcc.c: 73:     ADUTHH = 0x00;
 17394  0910  018F               	clrf	15	;volatile
 17395                           
 17396                           ;mcc_generated_files/adcc.c: 75:     ADSTPTL = 0x00;
 17397  0911  0192               	clrf	18	;volatile
 17398                           
 17399                           ;mcc_generated_files/adcc.c: 77:     ADSTPTH = 0x00;
 17400  0912  0193               	clrf	19	;volatile
 17401                           
 17402                           ;mcc_generated_files/adcc.c: 79:     ADACCU = 0x00;
 17403  0913  0198               	clrf	24	;volatile
 17404                           
 17405                           ;mcc_generated_files/adcc.c: 81:     ADRPT = 0x00;
 17406  0914  019A               	clrf	26	;volatile
 17407                           
 17408                           ;mcc_generated_files/adcc.c: 83:     ADPCH = 0x00;
 17409  0915  019F               	clrf	31	;volatile
 17410                           
 17411                           ;mcc_generated_files/adcc.c: 85:     ADACQL = 0x00;
 17412  0916  0142               	movlb	2	; select bank2
 17413  0917  018C               	clrf	12	;volatile
 17414                           
 17415                           ;mcc_generated_files/adcc.c: 87:     ADACQH = 0x00;
 17416  0918  018D               	clrf	13	;volatile
 17417                           
 17418                           ;mcc_generated_files/adcc.c: 89:     ADCAP = 0x00;
 17419  0919  018E               	clrf	14	;volatile
 17420                           
 17421                           ;mcc_generated_files/adcc.c: 91:     ADPREL = 0x00;
 17422  091A  018F               	clrf	15	;volatile
 17423                           
 17424                           ;mcc_generated_files/adcc.c: 93:     ADPREH = 0x00;
 17425  091B  0190               	clrf	16	;volatile
 17426                           
 17427                           ;mcc_generated_files/adcc.c: 95:     ADCON1 = 0x00;
 17428  091C  0192               	clrf	18	;volatile
 17429                           
 17430                           ;mcc_generated_files/adcc.c: 97:     ADCON2 = 0x02;
 17431  091D  3002               	movlw	2
 17432  091E  0093               	movwf	19	;volatile
 17433                           
 17434                           ;mcc_generated_files/adcc.c: 99:     ADCON3 = 0x00;
 17435  091F  0194               	clrf	20	;volatile
 17436                           
 17437                           ;mcc_generated_files/adcc.c: 101:     ADSTAT = 0x00;
 17438  0920  0195               	clrf	21	;volatile
 17439                           
 17440                           ;mcc_generated_files/adcc.c: 103:     ADREF = 0x00;
 17441  0921  0196               	clrf	22	;volatile
 17442                           
 17443                           ;mcc_generated_files/adcc.c: 105:     ADACT = 0x00;
 17444  0922  0197               	clrf	23	;volatile
 17445                           
 17446                           ;mcc_generated_files/adcc.c: 107:     ADCLK = 0x00;
 17447  0923  0198               	clrf	24	;volatile
 17448                           
 17449                           ;mcc_generated_files/adcc.c: 109:     ADCON0 = 0x84;
 17450  0924  3084               	movlw	132
 17451  0925  0091               	movwf	17	;volatile
 17452  0926  0008               	return
 17453  0927                     __end_of_ADCC_Initialize:
 17454                           
 17455                           	psect	text76
 17456  178C                     __ptext76:	
 17457 ;; *************** function _FVR_IsOutputReady *****************
 17458 ;; Defined at:
 17459 ;;		line 64 in file "mcc_generated_files/fvr.c"
 17460 ;; Parameters:    Size  Location     Type
 17461 ;;		None
 17462 ;; Auto vars:     Size  Location     Type
 17463 ;;		None
 17464 ;; Return value:  Size  Location     Type
 17465 ;;                  1    wreg      _Bool 
 17466 ;; Registers used:
 17467 ;;		wreg, status,2, status,0
 17468 ;; Tracked objects:
 17469 ;;		On entry : 2D/0
 17470 ;;		On exit  : 3F/12
 17471 ;;		Unchanged: 0/0
 17472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17477 ;;Total ram usage:        0 bytes
 17478 ;; Hardware stack levels used: 1
 17479 ;; Hardware stack levels required when called: 5
 17480 ;; This function calls:
 17481 ;;		Nothing
 17482 ;; This function is called by:
 17483 ;;		_main
 17484 ;; This function uses a non-reentrant model
 17485 ;;
 17486                           
 17487  178C                     _FVR_IsOutputReady:	
 17488                           ;psect for function _FVR_IsOutputReady
 17489                           
 17490                           
 17491                           ;mcc_generated_files/fvr.c: 66:     return (FVRCONbits.FVRRDY);
 17492                           
 17493                           ;incstack = 0
 17494                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
 17495  178C  0152               	movlb	18	; select bank18
 17496  178D  0E0C               	swapf	12,w	;volatile
 17497  178E  0C89               	rrf	9,f
 17498  178F  0C89               	rrf	9,f
 17499  1790  3901               	andlw	1
 17500  1791  0008               	return
 17501  1792                     __end_of_FVR_IsOutputReady:
 17502                           
 17503                           	psect	text77
 17504  0AA0                     __ptext77:	
 17505 ;; *************** function _DATAEE_ReadWord *****************
 17506 ;; Defined at:
 17507 ;;		line 208 in file "mcc_generated_files/memory.c"
 17508 ;; Parameters:    Size  Location     Type
 17509 ;;  bAdd            2    2[BANK0 ] unsigned short 
 17510 ;; Auto vars:     Size  Location     Type
 17511 ;;  high_byte       1   10[BANK0 ] unsigned char 
 17512 ;;  low_byte        1    9[BANK0 ] unsigned char 
 17513 ;; Return value:  Size  Location     Type
 17514 ;;                  2    2[BANK0 ] unsigned short 
 17515 ;; Registers used:
 17516 ;;		wreg, status,2, status,0, pclath, cstack
 17517 ;; Tracked objects:
 17518 ;;		On entry : 3F/0
 17519 ;;		On exit  : 3F/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17522 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;Total ram usage:        9 bytes
 17527 ;; Hardware stack levels used: 1
 17528 ;; Hardware stack levels required when called: 6
 17529 ;; This function calls:
 17530 ;;		_DATAEE_ReadByte
 17531 ;; This function is called by:
 17532 ;;		_main
 17533 ;; This function uses a non-reentrant model
 17534 ;;
 17535                           
 17536  0AA0                     _DATAEE_ReadWord:	
 17537                           ;psect for function _DATAEE_ReadWord
 17538                           
 17539                           
 17540                           ;mcc_generated_files/memory.c: 208: uint16_t DATAEE_ReadWord(uint16_t bAdd);mcc_generate
      +                          d_files/memory.c: 209: {;mcc_generated_files/memory.c: 210:     uint8_t low_byte = DATAE
      +                          E_ReadByte(bAdd);
 17541                           
 17542                           ;incstack = 0
 17543                           ; Regs used in _DATAEE_ReadWord: [wreg+status,2+status,0+pclath+cstack]
 17544  0AA0  0823               	movf	DATAEE_ReadWord@bAdd+1,w
 17545  0AA1  00A1               	movwf	DATAEE_ReadByte@bAdd+1
 17546  0AA2  0822               	movf	DATAEE_ReadWord@bAdd,w
 17547  0AA3  00A0               	movwf	DATAEE_ReadByte@bAdd
 17548  0AA4  3188  2035  318A   	fcall	_DATAEE_ReadByte
 17549  0AA7  0140               	movlb	0	; select bank0
 17550  0AA8  00A4               	movwf	??_DATAEE_ReadWord
 17551  0AA9  0824               	movf	??_DATAEE_ReadWord,w
 17552  0AAA  00A9               	movwf	DATAEE_ReadWord@low_byte
 17553                           
 17554                           ;mcc_generated_files/memory.c: 211:     uint8_t high_byte = DATAEE_ReadByte(bAdd + 0x000
      +                          1);
 17555  0AAB  0822               	movf	DATAEE_ReadWord@bAdd,w
 17556  0AAC  3E01               	addlw	1
 17557  0AAD  00A0               	movwf	DATAEE_ReadByte@bAdd
 17558  0AAE  3000               	movlw	0
 17559  0AAF  3D23               	addwfc	DATAEE_ReadWord@bAdd+1,w
 17560  0AB0  00A1               	movwf	DATAEE_ReadByte@bAdd+1
 17561  0AB1  3188  2035         	fcall	_DATAEE_ReadByte
 17562  0AB3  0140               	movlb	0	; select bank0
 17563  0AB4  00A4               	movwf	??_DATAEE_ReadWord
 17564  0AB5  0824               	movf	??_DATAEE_ReadWord,w
 17565  0AB6  00AA               	movwf	DATAEE_ReadWord@high_byte
 17566                           
 17567                           ;mcc_generated_files/memory.c: 213:     return ( high_byte << 8 | low_byte);
 17568  0AB7  0829               	movf	DATAEE_ReadWord@low_byte,w
 17569  0AB8  00A4               	movwf	??_DATAEE_ReadWord
 17570  0AB9  01A5               	clrf	??_DATAEE_ReadWord+1
 17571  0ABA  082A               	movf	DATAEE_ReadWord@high_byte,w
 17572  0ABB  00A6               	movwf	??_DATAEE_ReadWord+2
 17573  0ABC  01A7               	clrf	??_DATAEE_ReadWord+3
 17574  0ABD  0826               	movf	??_DATAEE_ReadWord+2,w
 17575  0ABE  00A7               	movwf	??_DATAEE_ReadWord+3
 17576  0ABF  01A6               	clrf	??_DATAEE_ReadWord+2
 17577  0AC0  0824               	movf	??_DATAEE_ReadWord,w
 17578  0AC1  0426               	iorwf	??_DATAEE_ReadWord+2,w
 17579  0AC2  00A2               	movwf	?_DATAEE_ReadWord
 17580  0AC3  0825               	movf	??_DATAEE_ReadWord+1,w
 17581  0AC4  0427               	iorwf	??_DATAEE_ReadWord+3,w
 17582  0AC5  00A3               	movwf	?_DATAEE_ReadWord+1
 17583  0AC6  0008               	return
 17584  0AC7                     __end_of_DATAEE_ReadWord:
 17585                           
 17586                           	psect	text78
 17587  0835                     __ptext78:	
 17588 ;; *************** function _DATAEE_ReadByte *****************
 17589 ;; Defined at:
 17590 ;;		line 216 in file "mcc_generated_files/memory.c"
 17591 ;; Parameters:    Size  Location     Type
 17592 ;;  bAdd            2    0[BANK0 ] unsigned short 
 17593 ;; Auto vars:     Size  Location     Type
 17594 ;;		None
 17595 ;; Return value:  Size  Location     Type
 17596 ;;                  1    wreg      unsigned char 
 17597 ;; Registers used:
 17598 ;;		wreg
 17599 ;; Tracked objects:
 17600 ;;		On entry : 3F/0
 17601 ;;		On exit  : 3F/10
 17602 ;;		Unchanged: 0/0
 17603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17604 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17608 ;;Total ram usage:        2 bytes
 17609 ;; Hardware stack levels used: 1
 17610 ;; Hardware stack levels required when called: 5
 17611 ;; This function calls:
 17612 ;;		Nothing
 17613 ;; This function is called by:
 17614 ;;		_DATAEE_ReadWord
 17615 ;;		_main
 17616 ;; This function uses a non-reentrant model
 17617 ;;
 17618                           
 17619  0835                     _DATAEE_ReadByte:	
 17620                           ;psect for function _DATAEE_ReadByte
 17621                           
 17622                           
 17623                           ;mcc_generated_files/memory.c: 216: uint8_t DATAEE_ReadByte(uint16_t bAdd);mcc_generated
      +                          _files/memory.c: 217: {;mcc_generated_files/memory.c: 218:     NVMADRH = ((bAdd >> 8) & 
      +                          0xFF);
 17624                           
 17625                           ;incstack = 0
 17626                           ; Regs used in _DATAEE_ReadByte: [wreg]
 17627  0835  0821               	movf	DATAEE_ReadByte@bAdd+1,w
 17628  0836  0150               	movlb	16	; select bank16
 17629  0837  009B               	movwf	27	;volatile
 17630                           
 17631                           ;mcc_generated_files/memory.c: 219:     NVMADRL = (bAdd & 0xFF);
 17632  0838  0140               	movlb	0	; select bank0
 17633  0839  0820               	movf	DATAEE_ReadByte@bAdd,w
 17634  083A  0150               	movlb	16	; select bank16
 17635  083B  009A               	movwf	26	;volatile
 17636                           
 17637                           ;mcc_generated_files/memory.c: 220:     NVMCON1bits.NVMREGS = 1;
 17638  083C  171E               	bsf	30,6	;volsfr
 17639                           
 17640                           ;mcc_generated_files/memory.c: 221:     NVMCON1bits.RD = 1;
 17641  083D  141E               	bsf	30,0	;volsfr
 17642                           
 17643                           ;mcc_generated_files/memory.c: 222:     __nop();
 17644  083E  0000               	nop
 17645                           
 17646                           ;mcc_generated_files/memory.c: 223:     __nop();
 17647  083F  0000               	nop
 17648                           
 17649                           ;mcc_generated_files/memory.c: 225:     return (NVMDATL);
 17650  0840  0150               	movlb	16	; select bank16
 17651  0841  081C               	movf	28,w	;volatile
 17652  0842  0008               	return
 17653  0843                     __end_of_DATAEE_ReadByte:
 17654                           
 17655                           	psect	intentry
 17656  0004                     __pintentry:	
 17657 ;; *************** function _INTERRUPT_InterruptManager *****************
 17658 ;; Defined at:
 17659 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 17660 ;; Parameters:    Size  Location     Type
 17661 ;;		None
 17662 ;; Auto vars:     Size  Location     Type
 17663 ;;		None
 17664 ;; Return value:  Size  Location     Type
 17665 ;;                  1    wreg      void 
 17666 ;; Registers used:
 17667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17668 ;; Tracked objects:
 17669 ;;		On entry : 0/0
 17670 ;;		On exit  : 0/0
 17671 ;;		Unchanged: 0/0
 17672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17677 ;;Total ram usage:        0 bytes
 17678 ;; Hardware stack levels used: 1
 17679 ;; Hardware stack levels required when called: 4
 17680 ;; This function calls:
 17681 ;;		Absolute function
 17682 ;;		_EUSART1_Receive_ISR
 17683 ;;		_TMR1_ISR
 17684 ;; This function is called by:
 17685 ;;		Interrupt level 1
 17686 ;; This function uses a non-reentrant model
 17687 ;;
 17688                           
 17689  0004                     _INTERRUPT_InterruptManager:
 17690                           
 17691                           ;incstack = 0
 17692  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17693                           
 17694                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17695  0005  3180               	pagesel	$
 17696                           
 17697                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 17698  0006  1F0B               	btfss	11,6	;volatile
 17699  0007  2819               	goto	i1l530
 17700                           
 17701                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1)
 17702  0008  014E               	movlb	14	; select bank14
 17703  0009  181A               	btfsc	26,0	;volatile
 17704  000A  1C10               	btfss	16,0	;volatile
 17705  000B  2810               	goto	i1l525
 17706                           
 17707                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             TMR1_ISR();
 17708  000C  3188  20B4  3180   	fcall	_TMR1_ISR
 17709                           
 17710                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 17711  000F  2819               	goto	i1l530
 17712  0010                     i1l525:	
 17713                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE3bits.RC1IE == 1 && PIR
      +                          3bits.RC1IF == 1)
 17714                           
 17715  0010  1A99               	btfsc	25,5	;volatile
 17716  0011  1E8F               	btfss	15,5	;volatile
 17717  0012  2819               	goto	i1l530
 17718                           
 17719                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART1_RxDefaultInterruptHandler();
 17720  0013  0142               	movlb	2	; select bank2
 17721  0014  086F               	movf	(_EUSART1_RxDefaultInterruptHandler+1)^(0+256),w
 17722  0015  008A               	movwf	10
 17723  0016  086E               	movf	_EUSART1_RxDefaultInterruptHandler^(0+256),w
 17724  0017  000A               	callw
 17725  0018  3180               	pagesel	$
 17726  0019                     i1l530:	
 17727                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 17728                           
 17729                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 17730                           
 17731  0019  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17732  001A  0009               	retfie
 17733  001B                     __end_of_INTERRUPT_InterruptManager:
 17734                           
 17735                           	psect	text80
 17736  08B4                     __ptext80:	
 17737 ;; *************** function _TMR1_ISR *****************
 17738 ;; Defined at:
 17739 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 17740 ;; Parameters:    Size  Location     Type
 17741 ;;		None
 17742 ;; Auto vars:     Size  Location     Type
 17743 ;;		None
 17744 ;; Return value:  Size  Location     Type
 17745 ;;                  1    wreg      void 
 17746 ;; Registers used:
 17747 ;;		wreg, status,2, status,0, pclath, cstack
 17748 ;; Tracked objects:
 17749 ;;		On entry : 3F/E
 17750 ;;		On exit  : 0/0
 17751 ;;		Unchanged: 0/0
 17752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17757 ;;Total ram usage:        0 bytes
 17758 ;; Hardware stack levels used: 1
 17759 ;; Hardware stack levels required when called: 2
 17760 ;; This function calls:
 17761 ;;		Absolute function
 17762 ;;		_TMR1_DefaultInterruptHandler
 17763 ;;		_TMR1_WriteTimer
 17764 ;; This function is called by:
 17765 ;;		_INTERRUPT_InterruptManager
 17766 ;; This function uses a non-reentrant model
 17767 ;;
 17768                           
 17769  08B4                     _TMR1_ISR:	
 17770                           ;psect for function _TMR1_ISR
 17771                           
 17772                           
 17773                           ;mcc_generated_files/tmr1.c: 173:     PIR4bits.TMR1IF = 0;
 17774                           
 17775                           ;incstack = 0
 17776                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 17777  08B4  1010               	bcf	16,0	;volatile
 17778                           
 17779                           ;mcc_generated_files/tmr1.c: 174:     TMR1_WriteTimer(timer1ReloadVal);
 17780  08B5  0142               	movlb	2	; select bank2
 17781  08B6  0865               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 17782  08B7  00F7               	movwf	TMR1_WriteTimer@timerVal+1
 17783  08B8  0864               	movf	_timer1ReloadVal^(0+256),w	;volatile
 17784  08B9  00F6               	movwf	TMR1_WriteTimer@timerVal
 17785  08BA  3188  205F  3188   	fcall	_TMR1_WriteTimer
 17786                           
 17787                           ;mcc_generated_files/tmr1.c: 176:     if(TMR1_InterruptHandler)
 17788  08BD  0142               	movlb	2	; select bank2
 17789  08BE  0862               	movf	_TMR1_InterruptHandler^(0+256),w
 17790  08BF  0463               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 17791  08C0  1903               	btfsc	3,2
 17792  08C1  0008               	return
 17793                           
 17794                           ;mcc_generated_files/tmr1.c: 177:     {;mcc_generated_files/tmr1.c: 178:         TMR1_In
      +                          terruptHandler();
 17795  08C2  0863               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 17796  08C3  008A               	movwf	10
 17797  08C4  0862               	movf	_TMR1_InterruptHandler^(0+256),w
 17798  08C5  000A               	callw
 17799  08C6  3188               	pagesel	$
 17800  08C7  0008               	return
 17801  08C8                     __end_of_TMR1_ISR:
 17802                           
 17803                           	psect	text81
 17804  086E                     __ptext81:	
 17805 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 17806 ;; Defined at:
 17807 ;;		line 187 in file "mcc_generated_files/tmr1.c"
 17808 ;; Parameters:    Size  Location     Type
 17809 ;;		None
 17810 ;; Auto vars:     Size  Location     Type
 17811 ;;		None
 17812 ;; Return value:  Size  Location     Type
 17813 ;;                  1    wreg      void 
 17814 ;; Registers used:
 17815 ;;		wreg, status,2, status,0, pclath, cstack
 17816 ;; Tracked objects:
 17817 ;;		On entry : 3F/2
 17818 ;;		On exit  : 3F/E
 17819 ;;		Unchanged: 0/0
 17820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17824 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17825 ;;Total ram usage:        1 bytes
 17826 ;; Hardware stack levels used: 1
 17827 ;; Hardware stack levels required when called: 1
 17828 ;; This function calls:
 17829 ;;		_TMR1_StopTimer
 17830 ;;		i1_UART_ClearBuffer
 17831 ;; This function is called by:
 17832 ;;		_TMR1_Initialize
 17833 ;;		_TMR1_ISR
 17834 ;; This function uses a non-reentrant model
 17835 ;;
 17836                           
 17837  086E                     _TMR1_DefaultInterruptHandler:	
 17838                           ;psect for function _TMR1_DefaultInterruptHandler
 17839                           
 17840                           
 17841                           ;mcc_generated_files/tmr1.c: 190:     if(uart_expire_time){
 17842                           
 17843                           ;incstack = 0
 17844                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 17845  086E  0875               	movf	_uart_expire_time,w	;volatile
 17846  086F  1903               	btfsc	3,2
 17847  0870  2876               	goto	i1l4323
 17848                           
 17849                           ;mcc_generated_files/tmr1.c: 191:         UART_ClearBuffer();
 17850  0871  3197  277B  3188   	fcall	i1_UART_ClearBuffer
 17851                           
 17852                           ;mcc_generated_files/tmr1.c: 192:         TMR1_StopTimer();
 17853  0874  3197  2769         	fcall	_TMR1_StopTimer
 17854  0876                     i1l4323:
 17855                           
 17856                           ;mcc_generated_files/tmr1.c: 194:     uart_expire_time = 1;
 17857  0876  3001               	movlw	1
 17858  0877  00F6               	movwf	??_TMR1_DefaultInterruptHandler
 17859  0878  0876               	movf	??_TMR1_DefaultInterruptHandler,w
 17860  0879  00F5               	movwf	_uart_expire_time	;volatile
 17861                           
 17862                           ;mcc_generated_files/tmr1.c: 196:     PIR4bits.TMR1IF = 0;
 17863  087A  014E               	movlb	14	; select bank14
 17864  087B  1010               	bcf	16,0	;volatile
 17865  087C  0008               	return
 17866  087D                     __end_of_TMR1_DefaultInterruptHandler:
 17867                           
 17868                           	psect	text82
 17869  177B                     __ptext82:	
 17870 ;; *************** function i1_UART_ClearBuffer *****************
 17871 ;; Defined at:
 17872 ;;		line 350 in file "mcc_generated_files/eusart1.c"
 17873 ;; Parameters:    Size  Location     Type
 17874 ;;		None
 17875 ;; Auto vars:     Size  Location     Type
 17876 ;;		None
 17877 ;; Return value:  Size  Location     Type
 17878 ;;                  1    wreg      void 
 17879 ;; Registers used:
 17880 ;;		status,2
 17881 ;; Tracked objects:
 17882 ;;		On entry : 3F/2
 17883 ;;		On exit  : 3F/2
 17884 ;;		Unchanged: 3F/0
 17885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;Total ram usage:        0 bytes
 17891 ;; Hardware stack levels used: 1
 17892 ;; This function calls:
 17893 ;;		Nothing
 17894 ;; This function is called by:
 17895 ;;		_TMR1_DefaultInterruptHandler
 17896 ;; This function uses a non-reentrant model
 17897 ;;
 17898                           
 17899  177B                     i1_UART_ClearBuffer:	
 17900                           ;psect for function i1_UART_ClearBuffer
 17901                           
 17902                           
 17903                           ;mcc_generated_files/eusart1.c: 351:     eusart1RxHead = 0;
 17904                           
 17905                           ;incstack = 0
 17906                           ; Regs used in i1_UART_ClearBuffer: [status,2]
 17907  177B  01F4               	clrf	_eusart1RxHead	;volatile
 17908                           
 17909                           ;mcc_generated_files/eusart1.c: 352:     eusart1RxTail = 0;
 17910  177C  01F3               	clrf	_eusart1RxTail	;volatile
 17911                           
 17912                           ;mcc_generated_files/eusart1.c: 353:     eusart1RxCount = 0;
 17913  177D  01F2               	clrf	_eusart1RxCount	;volatile
 17914  177E  0008               	return
 17915  177F                     __end_ofi1_UART_ClearBuffer:
 17916                           
 17917                           	psect	text83
 17918  0B25                     __ptext83:	
 17919 ;; *************** function _EUSART1_Receive_ISR *****************
 17920 ;; Defined at:
 17921 ;;		line 270 in file "mcc_generated_files/eusart1.c"
 17922 ;; Parameters:    Size  Location     Type
 17923 ;;		None
 17924 ;; Auto vars:     Size  Location     Type
 17925 ;;		None
 17926 ;; Return value:  Size  Location     Type
 17927 ;;                  1    wreg      void 
 17928 ;; Registers used:
 17929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17930 ;; Tracked objects:
 17931 ;;		On entry : 3F/2
 17932 ;;		On exit  : 0/0
 17933 ;;		Unchanged: 0/0
 17934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17939 ;;Total ram usage:        0 bytes
 17940 ;; Hardware stack levels used: 1
 17941 ;; Hardware stack levels required when called: 3
 17942 ;; This function calls:
 17943 ;;		Absolute function
 17944 ;;		_EUSART1_DefaultErrorHandler
 17945 ;;		_EUSART1_DefaultFramingErrorHandler
 17946 ;;		_EUSART1_DefaultOverrunErrorHandler
 17947 ;;		_EUSART1_RxDataHandler
 17948 ;; This function is called by:
 17949 ;;		_EUSART1_Initialize
 17950 ;;		_INTERRUPT_InterruptManager
 17951 ;; This function uses a non-reentrant model
 17952 ;;
 17953                           
 17954  0B25                     _EUSART1_Receive_ISR:	
 17955                           ;psect for function _EUSART1_Receive_ISR
 17956                           
 17957                           
 17958                           ;mcc_generated_files/eusart1.c: 273:     eusart1RxStatusBuffer[eusart1RxHead].status = 0
      +                          ;
 17959                           
 17960                           ;incstack = 0
 17961                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17962  0B25  0874               	movf	_eusart1RxHead,w	;volatile
 17963  0B26  3E3C               	addlw	(low (_eusart1RxStatusBuffer| (0+256)))& (0+255)
 17964  0B27  0086               	movwf	6
 17965  0B28  3001               	movlw	1	; select bank2/3
 17966  0B29  0087               	movwf	7
 17967  0B2A  0181               	clrf	1
 17968                           
 17969                           ;mcc_generated_files/eusart1.c: 275:     if(RC1STAbits.FERR){
 17970  0B2B  1D1D               	btfss	29,2	;volatile
 17971  0B2C  2B38               	goto	i1l4429
 17972                           
 17973                           ;mcc_generated_files/eusart1.c: 276:         eusart1RxStatusBuffer[eusart1RxHead].ferr =
      +                           1;
 17974  0B2D  0874               	movf	_eusart1RxHead,w	;volatile
 17975  0B2E  3E3C               	addlw	(low (_eusart1RxStatusBuffer| (0+256)))& (0+255)
 17976  0B2F  0086               	movwf	6
 17977  0B30  3001               	movlw	1	; select bank2/3
 17978  0B31  0087               	movwf	7
 17979  0B32  1481               	bsf	1,1
 17980                           
 17981                           ;mcc_generated_files/eusart1.c: 277:         EUSART1_FramingErrorHandler();
 17982  0B33  086D               	movf	(_EUSART1_FramingErrorHandler+1)^(0+256),w
 17983  0B34  008A               	movwf	10
 17984  0B35  086C               	movf	_EUSART1_FramingErrorHandler^(0+256),w
 17985  0B36  000A               	callw
 17986  0B37  318B               	pagesel	$
 17987  0B38                     i1l4429:
 17988                           
 17989                           ;mcc_generated_files/eusart1.c: 280:     if(RC1STAbits.OERR){
 17990  0B38  0142               	movlb	2	; select bank2
 17991  0B39  1C9D               	btfss	29,1	;volatile
 17992  0B3A  2B46               	goto	i1l4435
 17993                           
 17994                           ;mcc_generated_files/eusart1.c: 281:         eusart1RxStatusBuffer[eusart1RxHead].oerr =
      +                           1;
 17995  0B3B  0874               	movf	_eusart1RxHead,w	;volatile
 17996  0B3C  3E3C               	addlw	(low (_eusart1RxStatusBuffer| (0+256)))& (0+255)
 17997  0B3D  0086               	movwf	6
 17998  0B3E  3001               	movlw	1	; select bank2/3
 17999  0B3F  0087               	movwf	7
 18000  0B40  1501               	bsf	1,2
 18001                           
 18002                           ;mcc_generated_files/eusart1.c: 282:         EUSART1_OverrunErrorHandler();
 18003  0B41  086B               	movf	(_EUSART1_OverrunErrorHandler+1)^(0+256),w
 18004  0B42  008A               	movwf	10
 18005  0B43  086A               	movf	_EUSART1_OverrunErrorHandler^(0+256),w
 18006  0B44  000A               	callw
 18007  0B45  318B               	pagesel	$
 18008  0B46                     i1l4435:
 18009                           
 18010                           ;mcc_generated_files/eusart1.c: 285:     if(eusart1RxStatusBuffer[eusart1RxHead].status)
      +                          {
 18011  0B46  0874               	movf	_eusart1RxHead,w	;volatile
 18012  0B47  3E3C               	addlw	(low (_eusart1RxStatusBuffer| (0+256)))& (0+255)
 18013  0B48  0086               	movwf	6
 18014  0B49  3001               	movlw	1	; select bank2/3
 18015  0B4A  0087               	movwf	7
 18016  0B4B  0801               	movf	1,w
 18017  0B4C  1903               	btfsc	3,2
 18018  0B4D  2B55               	goto	i1l4439
 18019                           
 18020                           ;mcc_generated_files/eusart1.c: 286:         EUSART1_ErrorHandler();
 18021  0B4E  0142               	movlb	2	; select bank2
 18022  0B4F  0869               	movf	(_EUSART1_ErrorHandler+1)^(0+256),w
 18023  0B50  008A               	movwf	10
 18024  0B51  0868               	movf	_EUSART1_ErrorHandler^(0+256),w
 18025  0B52  000A               	callw
 18026  0B53  318B               	pagesel	$
 18027                           
 18028                           ;mcc_generated_files/eusart1.c: 287:     } else {
 18029  0B54  0008               	return
 18030  0B55                     i1l4439:
 18031                           
 18032                           ;mcc_generated_files/eusart1.c: 288:         EUSART1_RxDataHandler();
 18033  0B55  318C  24E4         	fcall	_EUSART1_RxDataHandler
 18034  0B57  0008               	return
 18035  0B58                     __end_of_EUSART1_Receive_ISR:
 18036                           
 18037                           	psect	text84
 18038  176F                     __ptext84:	
 18039 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
 18040 ;; Defined at:
 18041 ;;		line 321 in file "mcc_generated_files/eusart1.c"
 18042 ;; Parameters:    Size  Location     Type
 18043 ;;		None
 18044 ;; Auto vars:     Size  Location     Type
 18045 ;;		None
 18046 ;; Return value:  Size  Location     Type
 18047 ;;                  1    wreg      void 
 18048 ;; Registers used:
 18049 ;;		None
 18050 ;; Tracked objects:
 18051 ;;		On entry : 3F/2
 18052 ;;		On exit  : 3F/2
 18053 ;;		Unchanged: 0/0
 18054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18059 ;;Total ram usage:        0 bytes
 18060 ;; Hardware stack levels used: 1
 18061 ;; This function calls:
 18062 ;;		Nothing
 18063 ;; This function is called by:
 18064 ;;		_EUSART1_Initialize
 18065 ;;		_EUSART1_Receive_ISR
 18066 ;; This function uses a non-reentrant model
 18067 ;;
 18068                           
 18069  176F                     _EUSART1_DefaultOverrunErrorHandler:	
 18070                           ;psect for function _EUSART1_DefaultOverrunErrorHandler
 18071                           
 18072                           
 18073                           ;mcc_generated_files/eusart1.c: 324:     RC1STAbits.CREN = 0;
 18074                           
 18075                           ;incstack = 0
 18076                           ; Regs used in _EUSART1_DefaultOverrunErrorHandler: []
 18077  176F  121D               	bcf	29,4	;volatile
 18078                           
 18079                           ;mcc_generated_files/eusart1.c: 325:     RC1STAbits.CREN = 1;
 18080  1770  161D               	bsf	29,4	;volatile
 18081  1771  0008               	return
 18082  1772                     __end_of_EUSART1_DefaultOverrunErrorHandler:
 18083                           
 18084                           	psect	text85
 18085  1763                     __ptext85:	
 18086 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
 18087 ;; Defined at:
 18088 ;;		line 319 in file "mcc_generated_files/eusart1.c"
 18089 ;; Parameters:    Size  Location     Type
 18090 ;;		None
 18091 ;; Auto vars:     Size  Location     Type
 18092 ;;		None
 18093 ;; Return value:  Size  Location     Type
 18094 ;;                  1    wreg      void 
 18095 ;; Registers used:
 18096 ;;		None
 18097 ;; Tracked objects:
 18098 ;;		On entry : 3F/2
 18099 ;;		On exit  : 3F/2
 18100 ;;		Unchanged: 3F/0
 18101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;Total ram usage:        0 bytes
 18107 ;; Hardware stack levels used: 1
 18108 ;; This function calls:
 18109 ;;		Nothing
 18110 ;; This function is called by:
 18111 ;;		_EUSART1_Initialize
 18112 ;;		_EUSART1_Receive_ISR
 18113 ;; This function uses a non-reentrant model
 18114 ;;
 18115                           
 18116  1763                     _EUSART1_DefaultFramingErrorHandler:	
 18117                           ;psect for function _EUSART1_DefaultFramingErrorHandler
 18118                           
 18119                           
 18120                           ;incstack = 0
 18121                           ; Regs used in _EUSART1_DefaultFramingErrorHandler: []
 18122  1763  0008               	return
 18123  1764                     __end_of_EUSART1_DefaultFramingErrorHandler:
 18124                           
 18125                           	psect	text86
 18126  176C                     __ptext86:	
 18127 ;; *************** function _EUSART1_DefaultErrorHandler *****************
 18128 ;; Defined at:
 18129 ;;		line 329 in file "mcc_generated_files/eusart1.c"
 18130 ;; Parameters:    Size  Location     Type
 18131 ;;		None
 18132 ;; Auto vars:     Size  Location     Type
 18133 ;;		None
 18134 ;; Return value:  Size  Location     Type
 18135 ;;                  1    wreg      void 
 18136 ;; Registers used:
 18137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18138 ;; Tracked objects:
 18139 ;;		On entry : 3F/2
 18140 ;;		On exit  : 39/0
 18141 ;;		Unchanged: 0/0
 18142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18147 ;;Total ram usage:        0 bytes
 18148 ;; Hardware stack levels used: 1
 18149 ;; Hardware stack levels required when called: 2
 18150 ;; This function calls:
 18151 ;;		_EUSART1_RxDataHandler
 18152 ;; This function is called by:
 18153 ;;		_EUSART1_Initialize
 18154 ;;		_EUSART1_Receive_ISR
 18155 ;; This function uses a non-reentrant model
 18156 ;;
 18157                           
 18158  176C                     _EUSART1_DefaultErrorHandler:	
 18159                           ;psect for function _EUSART1_DefaultErrorHandler
 18160                           
 18161                           
 18162                           ;mcc_generated_files/eusart1.c: 330:     EUSART1_RxDataHandler();
 18163                           
 18164                           ;incstack = 0
 18165                           ; Regs used in _EUSART1_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 18166  176C  318C  24E4         	fcall	_EUSART1_RxDataHandler
 18167  176E  0008               	return
 18168  176F                     __end_of_EUSART1_DefaultErrorHandler:
 18169                           
 18170                           	psect	text87
 18171  0CE4                     __ptext87:	
 18172 ;; *************** function _EUSART1_RxDataHandler *****************
 18173 ;; Defined at:
 18174 ;;		line 294 in file "mcc_generated_files/eusart1.c"
 18175 ;; Parameters:    Size  Location     Type
 18176 ;;		None
 18177 ;; Auto vars:     Size  Location     Type
 18178 ;;  t               2    4[COMMON] int 
 18179 ;; Return value:  Size  Location     Type
 18180 ;;                  1    wreg      void 
 18181 ;; Registers used:
 18182 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18183 ;; Tracked objects:
 18184 ;;		On entry : 0/2
 18185 ;;		On exit  : 39/0
 18186 ;;		Unchanged: 0/0
 18187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18189 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18190 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18191 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18192 ;;Total ram usage:        4 bytes
 18193 ;; Hardware stack levels used: 1
 18194 ;; Hardware stack levels required when called: 1
 18195 ;; This function calls:
 18196 ;;		_TMR1_StartTimer
 18197 ;;		_TMR1_StopTimer
 18198 ;;		_TMR1_WriteTimer
 18199 ;; This function is called by:
 18200 ;;		_EUSART1_Receive_ISR
 18201 ;;		_EUSART1_DefaultErrorHandler
 18202 ;; This function uses a non-reentrant model
 18203 ;;
 18204                           
 18205  0CE4                     _EUSART1_RxDataHandler:	
 18206                           ;psect for function _EUSART1_RxDataHandler
 18207                           
 18208                           
 18209                           ;mcc_generated_files/eusart1.c: 296:     int t;;mcc_generated_files/eusart1.c: 297:     
      +                          eusart1RxBuffer[eusart1RxHead] = RC1REG;
 18210                           
 18211                           ;incstack = 0
 18212                           ; Regs used in _EUSART1_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18213  0CE4  0142               	movlb	2	; select bank2
 18214  0CE5  0819               	movf	25,w	;volatile
 18215  0CE6  00F8               	movwf	??_EUSART1_RxDataHandler
 18216  0CE7  0874               	movf	_eusart1RxHead,w
 18217  0CE8  3E44               	addlw	(low (_eusart1RxBuffer| (0+256)))& (0+255)
 18218  0CE9  0086               	movwf	6
 18219  0CEA  3001               	movlw	1	; select bank2/3
 18220  0CEB  0087               	movwf	7
 18221  0CEC  0878               	movf	??_EUSART1_RxDataHandler,w
 18222  0CED  0081               	movwf	1
 18223                           
 18224                           ;mcc_generated_files/eusart1.c: 298:     eusart1RxCount++;
 18225  0CEE  3001               	movlw	1
 18226  0CEF  00F8               	movwf	??_EUSART1_RxDataHandler
 18227  0CF0  0878               	movf	??_EUSART1_RxDataHandler,w
 18228  0CF1  07F2               	addwf	_eusart1RxCount,f	;volatile
 18229                           
 18230                           ;mcc_generated_files/eusart1.c: 300:     if(eusart1RxCount == 8)
 18231  0CF2  3008               	movlw	8
 18232  0CF3  0672               	xorwf	_eusart1RxCount,w	;volatile
 18233  0CF4  1D03               	btfss	3,2
 18234  0CF5  2D00               	goto	i1l3939
 18235                           
 18236                           ;mcc_generated_files/eusart1.c: 301:     {;mcc_generated_files/eusart1.c: 302:         e
      +                          usart1PacketFinish++;
 18237  0CF6  3001               	movlw	1
 18238  0CF7  00F8               	movwf	??_EUSART1_RxDataHandler
 18239  0CF8  0878               	movf	??_EUSART1_RxDataHandler,w
 18240  0CF9  0144               	movlb	4	; select bank4
 18241  0CFA  07BA               	addwf	_eusart1PacketFinish^(0+512),f	;volatile
 18242                           
 18243                           ;mcc_generated_files/eusart1.c: 303:         eusart1RxCount = 0;
 18244  0CFB  01F2               	clrf	_eusart1RxCount	;volatile
 18245                           
 18246                           ;mcc_generated_files/eusart1.c: 304:         TMR1_StopTimer();
 18247  0CFC  3197  2769  318C   	fcall	_TMR1_StopTimer
 18248                           
 18249                           ;mcc_generated_files/eusart1.c: 305:     }else if(eusart1RxCount == 1){
 18250  0CFF  2D0C               	goto	i1l3945
 18251  0D00                     i1l3939:
 18252  0D00  0372               	decf	_eusart1RxCount,w	;volatile
 18253  0D01  1D03               	btfss	3,2
 18254  0D02  2D0C               	goto	i1l3945
 18255                           
 18256                           ;mcc_generated_files/eusart1.c: 306:         TMR1_WriteTimer(0);
 18257  0D03  3000               	movlw	0
 18258  0D04  00F6               	movwf	TMR1_WriteTimer@timerVal
 18259  0D05  00F7               	movwf	TMR1_WriteTimer@timerVal+1
 18260  0D06  3188  205F  318C   	fcall	_TMR1_WriteTimer
 18261                           
 18262                           ;mcc_generated_files/eusart1.c: 307:         TMR1_StartTimer();
 18263  0D09  3197  2767  318C   	fcall	_TMR1_StartTimer
 18264  0D0C                     i1l3945:
 18265                           
 18266                           ;mcc_generated_files/eusart1.c: 310:     uart_expire_time = 0;
 18267  0D0C  01F5               	clrf	_uart_expire_time
 18268  0D0D  01F6               	clrf	_uart_expire_time+1
 18269                           
 18270                           ;mcc_generated_files/eusart1.c: 311:     t=eusart1RxHead;
 18271  0D0E  0874               	movf	_eusart1RxHead,w	;volatile
 18272  0D0F  00F8               	movwf	??_EUSART1_RxDataHandler
 18273  0D10  01F9               	clrf	??_EUSART1_RxDataHandler+1
 18274  0D11  0878               	movf	??_EUSART1_RxDataHandler,w
 18275  0D12  00FA               	movwf	EUSART1_RxDataHandler@t
 18276  0D13  0879               	movf	??_EUSART1_RxDataHandler+1,w
 18277  0D14  00FB               	movwf	EUSART1_RxDataHandler@t+1
 18278                           
 18279                           ;mcc_generated_files/eusart1.c: 312:     eusart1RxHead = (eusart1RxHead + 1)% 8;
 18280  0D15  0874               	movf	_eusart1RxHead,w	;volatile
 18281  0D16  3E01               	addlw	1
 18282  0D17  3907               	andlw	7
 18283  0D18  00F8               	movwf	??_EUSART1_RxDataHandler
 18284  0D19  0878               	movf	??_EUSART1_RxDataHandler,w
 18285  0D1A  00F4               	movwf	_eusart1RxHead	;volatile
 18286                           
 18287                           ;mcc_generated_files/eusart1.c: 313:     if(eusart1RxHead == eusart1RxTail)
 18288  0D1B  0874               	movf	_eusart1RxHead,w	;volatile
 18289  0D1C  0673               	xorwf	_eusart1RxTail,w	;volatile
 18290  0D1D  1D03               	skipz
 18291  0D1E  0008               	return
 18292                           
 18293                           ;mcc_generated_files/eusart1.c: 314:     {;mcc_generated_files/eusart1.c: 315:         e
      +                          usart1RxHead = t;
 18294  0D1F  087A               	movf	EUSART1_RxDataHandler@t,w
 18295  0D20  00F8               	movwf	??_EUSART1_RxDataHandler
 18296  0D21  0878               	movf	??_EUSART1_RxDataHandler,w
 18297  0D22  00F4               	movwf	_eusart1RxHead	;volatile
 18298  0D23  0008               	return
 18299  0D24                     __end_of_EUSART1_RxDataHandler:
 18300                           
 18301                           	psect	text88
 18302  085F                     __ptext88:	
 18303 ;; *************** function _TMR1_WriteTimer *****************
 18304 ;; Defined at:
 18305 ;;		line 132 in file "mcc_generated_files/tmr1.c"
 18306 ;; Parameters:    Size  Location     Type
 18307 ;;  timerVal        2    0[COMMON] unsigned short 
 18308 ;; Auto vars:     Size  Location     Type
 18309 ;;		None
 18310 ;; Return value:  Size  Location     Type
 18311 ;;                  1    wreg      void 
 18312 ;; Registers used:
 18313 ;;		wreg
 18314 ;; Tracked objects:
 18315 ;;		On entry : 3F/2
 18316 ;;		On exit  : 3F/4
 18317 ;;		Unchanged: 0/0
 18318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18319 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18322 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18323 ;;Total ram usage:        2 bytes
 18324 ;; Hardware stack levels used: 1
 18325 ;; This function calls:
 18326 ;;		Nothing
 18327 ;; This function is called by:
 18328 ;;		_EUSART1_RxDataHandler
 18329 ;;		_TMR1_ISR
 18330 ;; This function uses a non-reentrant model
 18331 ;;
 18332                           
 18333  085F                     _TMR1_WriteTimer:	
 18334                           ;psect for function _TMR1_WriteTimer
 18335                           
 18336                           
 18337                           ;mcc_generated_files/tmr1.c: 132: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 133: {;mcc_generated_files/tmr1.c: 134:     if (T1CONbits.NOT_SYNC == 1)
 18338                           
 18339                           ;incstack = 0
 18340                           ; Regs used in _TMR1_WriteTimer: [wreg]
 18341  085F  0144               	movlb	4	; select bank4
 18342  0860  1D0E               	btfss	14,2	;volatile
 18343  0861  2869               	goto	i1l3767
 18344                           
 18345                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         T1CONbi
      +                          ts.TMR1ON = 0;
 18346  0862  100E               	bcf	14,0	;volatile
 18347                           
 18348                           ;mcc_generated_files/tmr1.c: 140:         TMR1H = (timerVal >> 8);
 18349  0863  0877               	movf	TMR1_WriteTimer@timerVal+1,w
 18350  0864  008D               	movwf	13	;volatile
 18351                           
 18352                           ;mcc_generated_files/tmr1.c: 141:         TMR1L = timerVal;
 18353  0865  0876               	movf	TMR1_WriteTimer@timerVal,w
 18354  0866  008C               	movwf	12	;volatile
 18355                           
 18356                           ;mcc_generated_files/tmr1.c: 144:         T1CONbits.TMR1ON =1;
 18357  0867  140E               	bsf	14,0	;volatile
 18358                           
 18359                           ;mcc_generated_files/tmr1.c: 145:     }
 18360  0868  0008               	return
 18361  0869                     i1l3767:
 18362                           
 18363                           ;mcc_generated_files/tmr1.c: 147:     {;mcc_generated_files/tmr1.c: 149:         TMR1H =
      +                           (timerVal >> 8);
 18364  0869  0877               	movf	TMR1_WriteTimer@timerVal+1,w
 18365  086A  008D               	movwf	13	;volatile
 18366                           
 18367                           ;mcc_generated_files/tmr1.c: 150:         TMR1L = timerVal;
 18368  086B  0876               	movf	TMR1_WriteTimer@timerVal,w
 18369  086C  008C               	movwf	12	;volatile
 18370  086D  0008               	return
 18371  086E                     __end_of_TMR1_WriteTimer:
 18372                           
 18373                           	psect	text89
 18374  1769                     __ptext89:	
 18375 ;; *************** function _TMR1_StopTimer *****************
 18376 ;; Defined at:
 18377 ;;		line 110 in file "mcc_generated_files/tmr1.c"
 18378 ;; Parameters:    Size  Location     Type
 18379 ;;		None
 18380 ;; Auto vars:     Size  Location     Type
 18381 ;;		None
 18382 ;; Return value:  Size  Location     Type
 18383 ;;                  1    wreg      void 
 18384 ;; Registers used:
 18385 ;;		None
 18386 ;; Tracked objects:
 18387 ;;		On entry : 39/2
 18388 ;;		On exit  : 3F/4
 18389 ;;		Unchanged: 0/0
 18390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;Total ram usage:        0 bytes
 18396 ;; Hardware stack levels used: 1
 18397 ;; This function calls:
 18398 ;;		Nothing
 18399 ;; This function is called by:
 18400 ;;		_EUSART1_RxDataHandler
 18401 ;;		_TMR1_DefaultInterruptHandler
 18402 ;; This function uses a non-reentrant model
 18403 ;;
 18404                           
 18405  1769                     _TMR1_StopTimer:	
 18406                           ;psect for function _TMR1_StopTimer
 18407                           
 18408                           
 18409                           ;mcc_generated_files/tmr1.c: 113:     T1CONbits.TMR1ON = 0;
 18410                           
 18411                           ;incstack = 0
 18412                           ; Regs used in _TMR1_StopTimer: []
 18413  1769  0144               	movlb	4	; select bank4
 18414  176A  100E               	bcf	14,0	;volatile
 18415  176B  0008               	return
 18416  176C                     __end_of_TMR1_StopTimer:
 18417                           
 18418                           	psect	text90
 18419  1767                     __ptext90:	
 18420 ;; *************** function _TMR1_StartTimer *****************
 18421 ;; Defined at:
 18422 ;;		line 104 in file "mcc_generated_files/tmr1.c"
 18423 ;; Parameters:    Size  Location     Type
 18424 ;;		None
 18425 ;; Auto vars:     Size  Location     Type
 18426 ;;		None
 18427 ;; Return value:  Size  Location     Type
 18428 ;;                  1    wreg      void 
 18429 ;; Registers used:
 18430 ;;		None
 18431 ;; Tracked objects:
 18432 ;;		On entry : 3F/4
 18433 ;;		On exit  : 3F/4
 18434 ;;		Unchanged: 0/0
 18435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18440 ;;Total ram usage:        0 bytes
 18441 ;; Hardware stack levels used: 1
 18442 ;; This function calls:
 18443 ;;		Nothing
 18444 ;; This function is called by:
 18445 ;;		_EUSART1_RxDataHandler
 18446 ;; This function uses a non-reentrant model
 18447 ;;
 18448                           
 18449  1767                     _TMR1_StartTimer:	
 18450                           ;psect for function _TMR1_StartTimer
 18451                           
 18452                           
 18453                           ;mcc_generated_files/tmr1.c: 107:     T1CONbits.TMR1ON = 1;
 18454                           
 18455                           ;incstack = 0
 18456                           ; Regs used in _TMR1_StartTimer: []
 18457  1767  140E               	bsf	14,0	;volatile
 18458  1768  0008               	return
 18459  1769                     __end_of_TMR1_StartTimer:
 18460  007E                     btemp	set	126	;btemp
 18461  007E                     int$flags	set	126
 18462  007E                     wtemp0	set	126
 18463  236E                     
 18464                           	psect	idloc
 18465                           
 18466                           ;Config register IDLOC0 @ 0x8000
 18467                           ;	unspecified, using default values
 18468  8000                     	org	32768
 18469  8000  3FFF               	dw	16383
 18470                           
 18471                           ;Config register IDLOC1 @ 0x8001
 18472                           ;	unspecified, using default values
 18473  8001                     	org	32769
 18474  8001  3FFF               	dw	16383
 18475                           
 18476                           ;Config register IDLOC2 @ 0x8002
 18477                           ;	unspecified, using default values
 18478  8002                     	org	32770
 18479  8002  3FFF               	dw	16383
 18480                           
 18481                           ;Config register IDLOC3 @ 0x8003
 18482                           ;	unspecified, using default values
 18483  8003                     	org	32771
 18484  8003  3FFF               	dw	16383
 18485                           
 18486                           	psect	config
 18487                           
 18488                           ;Config register CONFIG1 @ 0x8007
 18489                           ;	External Oscillator mode selection bits
 18490                           ;	FEXTOSC = OFF, Oscillator not enabled
 18491                           ;	Power-up default value for COSC bits
 18492                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
 18493                           ;	Clock Out Enable bit
 18494                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
 18495                           ;	Clock Switch Enable bit
 18496                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 18497                           ;	Fail-Safe Clock Monitor Enable bit
 18498                           ;	FCMEN = ON, FSCM timer enabled
 18499  8007                     	org	32775
 18500  8007  3FEC               	dw	16364
 18501                           
 18502                           ;Config register CONFIG2 @ 0x8008
 18503                           ;	Master Clear Enable bit
 18504                           ;	MCLRE = ON, MCLR pin is Master Clear function
 18505                           ;	Power-up Timer Enable bit
 18506                           ;	PWRTS = OFF, PWRT disabled
 18507                           ;	Low-Power BOR enable bit
 18508                           ;	LPBOREN = OFF, ULPBOR disabled
 18509                           ;	Brown-out reset enable bits
 18510                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
 18511                           ;	Brown-out Reset Voltage Selection
 18512                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 2.45V
 18513                           ;	Zero-cross detect disable
 18514                           ;	ZCDDIS = 0x1, unprogrammed default
 18515                           ;	Peripheral Pin Select one-way control
 18516                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
 18517                           ;	Stack Overflow/Underflow Reset Enable bit
 18518                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
 18519  8008                     	org	32776
 18520  8008  3FFF               	dw	16383
 18521                           
 18522                           ;Config register CONFIG3 @ 0x8009
 18523                           ;	WDT Period Select bits
 18524                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 18525                           ;	WDT operating mode
 18526                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
 18527                           ;	WDT Window Select bits
 18528                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 18529                           ;	WDT input clock selector
 18530                           ;	WDTCCS = SC, Software Control
 18531  8009                     	org	32777
 18532  8009  3F9F               	dw	16287
 18533                           
 18534                           ;Config register CONFIG4 @ 0x800A
 18535                           ;	Boot Block Size Selection bits
 18536                           ;	BBSIZE = BB512, 512 words boot block size
 18537                           ;	Boot Block Enable bit
 18538                           ;	BBEN = OFF, Boot Block disabled
 18539                           ;	SAF Enable bit
 18540                           ;	SAFEN = OFF, SAF disabled
 18541                           ;	Application Block Write Protection bit
 18542                           ;	WRTAPP = OFF, Application Block not write protected
 18543                           ;	Boot Block Write Protection bit
 18544                           ;	WRTB = OFF, Boot Block not write protected
 18545                           ;	Configuration Register Write Protection bit
 18546                           ;	WRTC = OFF, Configuration Register not write protected
 18547                           ;	Data EEPROM write protection bit
 18548                           ;	WRTD = OFF, Data EEPROM NOT write protected
 18549                           ;	Storage Area Flash Write Protection bit
 18550                           ;	WRTSAF = OFF, SAF not write protected
 18551                           ;	Low Voltage Programming Enable bit
 18552                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
 18553  800A                     	org	32778
 18554  800A  3FFF               	dw	16383
 18555                           
 18556                           ;Config register CONFIG5 @ 0x800B
 18557                           ;	UserNVM Program memory code protection bit
 18558                           ;	CP = OFF, UserNVM code protection disabled
 18559  800B                     	org	32779
 18560  800B  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    3
    Data        41
    BSS         91
    Persistent  46
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     78      78
    BANK1            80     79      80
    BANK2            80     19      80
    BANK3            80     75      75
    BANK4            80     13      27
    BANK5            80      0      64
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           78      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    nmbs_server_poll@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    nmbs_server_poll@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    nmbs_server_poll@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    nmbs_server_poll@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    nmbs_server_poll@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    nmbs_server_poll@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    nmbs_server_poll@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    nmbs_server_create@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    nmbs_server_create@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    nmbs_server_create@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    nmbs_server_create@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    nmbs_server_create@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    nmbs_server_create@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    nmbs_server_create@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_req_fc@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_req_fc@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_req_fc@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_req_fc@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_req_fc@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_req_fc@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_req_fc@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_req_header@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_req_header@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_req_header@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_req_header@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_req_header@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_req_header@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_req_header@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    nmbs_create@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    nmbs_create@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    nmbs_create@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    nmbs_create@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    nmbs_create@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    nmbs_create@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    nmbs_create@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_write_single_register@nanomodbus$F2807@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_read_input_registers@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_read_input_registers@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_read_input_registers@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_read_input_registers@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_read_input_registers@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_read_input_registers@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_read_input_registers@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_read_holding_registers@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_read_holding_registers@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_read_holding_registers@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_read_holding_registers@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_read_holding_registers@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_read_holding_registers@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_read_holding_registers@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    handle_read_registers@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_read_registers@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    handle_read_registers@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    handle_read_registers@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    handle_read_registers@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    handle_read_registers@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    handle_read_registers@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_write_single_register_res@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_write_single_register_res@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_write_single_register_res@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_write_single_register_res@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_write_single_register_res@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_write_single_register_res@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_write_single_register_res@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_write_single_register_res@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_write_single_register_res@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_write_single_register_res@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_write_single_register_res@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_write_single_register_res@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_write_single_register_res@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_write_single_register_res@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_write_single_coil_res@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_write_single_coil_res@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_write_single_coil_res@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_write_single_coil_res@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_write_single_coil_res@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_write_single_coil_res@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_write_single_coil_res@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_write_single_coil_res@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_write_single_coil_res@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_write_single_coil_res@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_write_single_coil_res@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_write_single_coil_res@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_write_single_coil_res@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_write_single_coil_res@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_read_registers_res@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_read_registers_res@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_read_registers_res@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_read_registers_res@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_read_registers_res@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_read_registers_res@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_read_registers_res@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_read_registers_res@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_read_registers_res@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_read_registers_res@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_read_registers_res@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_read_registers_res@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_read_registers_res@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_read_registers_res@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    send_exception_msg@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    send_exception_msg@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    send_exception_msg@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    send_exception_msg@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    send_exception_msg@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    send_exception_msg@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    send_exception_msg@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    put_res_header@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    put_res_header@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    put_res_header@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    put_res_header@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    put_res_header@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    put_res_header@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    put_res_header@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    put_res_header@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    put_res_header@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    put_res_header@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    put_res_header@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    put_res_header@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    put_res_header@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    put_res_header@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_res_header@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_res_header@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_res_header@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_res_header@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_res_header@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_res_header@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_res_header@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    send_msg@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    send_msg@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    send_msg@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    send_msg@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    send_msg@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    send_msg@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    send_msg@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    put_msg_header@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    put_msg_header@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    put_msg_header@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    put_msg_header@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    put_msg_header@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    put_msg_header@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    put_msg_header@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_msg_header@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_msg_header@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_msg_header@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_msg_header@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_msg_header@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_msg_header@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_msg_header@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv_msg_footer@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_msg_footer@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv_msg_footer@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv_msg_footer@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv_msg_footer@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv_msg_footer@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv_msg_footer@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    send@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    send@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    send@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    send@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    send@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    send@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    send@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    put_2@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    put_2@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    put_2@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    put_2@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    put_2@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    put_2@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    put_2@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    put_1@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    put_1@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    put_1@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    put_1@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    put_1@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    put_1@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    put_1@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    recv@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    recv@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    recv@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    recv@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    recv@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    recv@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    msg_state_reset@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    msg_state_reset@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    msg_state_reset@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    msg_state_reset@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    msg_state_reset@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    msg_state_reset@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    msg_state_reset@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    get_2@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    get_2@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    get_2@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    get_2@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    get_2@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    get_2@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    get_2@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    get_1@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    get_1@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    get_1@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    get_1@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    get_1@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    get_1@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    get_1@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    msg_buf_reset@nmbs.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    msg_buf_reset@nmbs.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> write_serial(), 

    msg_buf_reset@nmbs.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 0
		 -> read_serial(), 

    msg_buf_reset@nmbs.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_register(), 

    msg_buf_reset@nmbs.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handle_write_single_coil(), 

    msg_buf_reset@nmbs.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_input_registers(), 

    msg_buf_reset@nmbs.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 0
		 -> handler_read_holding_registers(), 

    S1454$0$4	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    S1454$0$2	PTR unsigned short  size(1) Largest target is 64
		 -> handle_read_registers@regs(BANK1[64]), 

    S1454$1$4	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    S1454$1$2	PTR unsigned short  size(1) Largest target is 64
		 -> handle_read_registers@regs(BANK1[64]), 

    read_serial@arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    write_serial@arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    S3356$1$0	PTR void  size(2) Largest target is 8192
		 -> RAM(DATA[8192]), 

    func$0	PTR void  size(2) Largest target is 8192
		 -> RAM(DATA[8192]), 

    func$0	PTR void  size(2) Largest target is 8192
		 -> RAM(DATA[8192]), 

    S1454$3$3	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    S1454$2$3	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    callback$4	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    callback$2	PTR unsigned short  size(1) Largest target is 64
		 -> handle_read_registers@regs(BANK1[64]), 

    S1495$2$3	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    S1495$2$0	PTR const unsigned char  size(1) Largest target is 0

    S1495$1$3	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    S1495$1$0	PTR unsigned char  size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    S1366$1$0	PTR void  size(1) Largest target is 13
		 -> sensor1(BANK4[13]), 

    call@p	PTR void  size(2) Largest target is 8192
		 -> RAM(DATA[8192]), 

    __funcs_on_exit@arg	PTR void  size(2) Largest target is 8192
		 -> RAM(DATA[8192]), 

    head.a	PTR void [32] size(2) Largest target is 8192
		 -> RAM(DATA[8192]), 

    head.f	PTR FTN(PTR void ,)void [32] size(2) Largest target is 1
		 -> call(), 

    head.next	PTR struct fl size(1) Largest target is 0

    head	PTR struct fl size(2) Largest target is 130
		 -> builtin(BIGRAM[130]), builtin.next(BIGRAM[2]), NULL(NULL[0]), 

    __funcs_on_exit@func	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> call(), 

    S3356fl$a	PTR void [32] size(2) Largest target is 8192
		 -> RAM(DATA[8192]), 

    builtin.a	PTR void [32] size(2) Largest target is 8192
		 -> RAM(DATA[8192]), 

    S3356fl$f	PTR FTN(PTR void ,)void [32] size(2) Largest target is 1
		 -> call(), 

    builtin.f	PTR FTN(PTR void ,)void [32] size(2) Largest target is 1
		 -> call(), 

    S3356fl$next	PTR struct fl size(2) Largest target is 0

    builtin.next	PTR struct fl size(2) Largest target is 0

    nmbs_server_poll@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    nmbs_server_poll@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_server_poll@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_server_poll@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_server_poll@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_server_poll@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_server_poll@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_server_poll@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    nmbs_server_create@callbacks	PTR const struct nmbs_callbacks size(1) Largest target is 9
		 -> main@callbacks(BANK2[9]), 

    nmbs_server_create@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    nmbs_server_create@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_server_create@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_server_create@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_server_create@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_server_create@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_server_create@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_server_create@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    nmbs_server_create@platform_conf.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    nmbs_server_create@platform_conf.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_server_create@platform_conf.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_server_create@platform_conf	PTR const struct nmbs_platform_conf size(1) Largest target is 7
		 -> main@platform_conf(BANK2[6]), 

    handle_req_fc@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_req_fc@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_req_fc@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_req_fc@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_req_fc@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_req_fc@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_req_fc@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_req_fc@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    handle_write_single_register@nanomodbus$F2807@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_write_single_register@nanomodbus$F2807@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_write_single_register@nanomodbus$F2807@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_write_single_register@nanomodbus$F2807@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_write_single_coil@nanomodbus$F2778@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    handle_read_input_registers@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_read_input_registers@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_read_input_registers@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_read_input_registers@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_input_registers@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_input_registers@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_input_registers@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_input_registers@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    handle_read_holding_registers@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_read_holding_registers@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_read_holding_registers@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_read_holding_registers@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_holding_registers@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_holding_registers@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_holding_registers@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_holding_registers@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    handle_read_registers@callback	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10802 size(2) Largest target is 1
		 -> handler_read_input_registers(), handler_read_holding_registers(), 

    handle_read_registers@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_read_registers@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_read_registers@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_read_registers@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_registers@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_registers@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_registers@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_registers@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    recv_write_single_register_res@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    recv_write_single_coil_res@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    recv_read_registers_res@registers	PTR unsigned short  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    recv_read_registers_res@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    recv_res_header@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_res_header@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_res_header@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_res_header@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_res_header@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_res_header@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_res_header@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_res_header@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    send_exception_msg@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    send_exception_msg@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    send_exception_msg@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send_exception_msg@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    send_exception_msg@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    send_exception_msg@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    send_exception_msg@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    send_exception_msg@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    put_res_header@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    recv_req_header@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_req_header@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_req_header@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_req_header@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_req_header@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_req_header@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_req_header@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_req_header@first_byte_received	PTR _Bool  size(1) Largest target is 1
		 -> nmbs_server_poll@first_byte_received(BANK0[1]), 

    recv_req_header@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    send_msg@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    send_msg@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    send_msg@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send_msg@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    send_msg@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    send_msg@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    send_msg@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    send_msg@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    put_msg_header@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    put_msg_header@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    put_msg_header@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    put_msg_header@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    put_msg_header@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    put_msg_header@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    put_msg_header@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_msg_header@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    recv_msg_header@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_msg_header@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_msg_header@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_msg_header@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_msg_header@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_msg_header@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_msg_header@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_msg_header@first_byte_received	PTR _Bool  size(1) Largest target is 1
		 -> nmbs_server_poll@first_byte_received(BANK0[1]), recv_res_header@first_byte_received(BANK0[1]), 

    recv_msg_header@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    recv_msg_footer@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv_msg_footer@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_msg_footer@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_msg_footer@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_msg_footer@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_msg_footer@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_msg_footer@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_msg_footer@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    send@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    send@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    send@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    send@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    send@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    send@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    send@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    recv@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    recv@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    nmbs_crc_calc@data	PTR const unsigned char  size(1) Largest target is 48
		 -> nmbs.msg.buf(BANK0[48]), 

    nmbs_set_destination_rtu_address@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    nmbs_set_destination_rtu_address@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_set_destination_rtu_address@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_set_destination_rtu_address@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_set_destination_rtu_address@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_set_destination_rtu_address@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_set_destination_rtu_address@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_create@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    nmbs_create@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_create@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_create@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_create@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_create@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_create@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_create@platform_conf.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    nmbs_create@platform_conf.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_create@platform_conf.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_create@platform_conf	PTR const struct nmbs_platform_conf size(1) Largest target is 7
		 -> main@platform_conf(BANK2[6]), 

    nmbs_create@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    m_memset@s	PTR void  size(2) Largest target is 76
		 -> registers.server_coils(COMMON[1]), main@nmbs(BANK3[75]), main@registers(BANK4[13]), 

    m_memset@p	PTR unsigned char  size(2) Largest target is 76
		 -> registers.server_coils(COMMON[1]), main@nmbs(BANK3[75]), main@registers(BANK4[13]), 

    msg_state_reset@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    msg_state_reset@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    msg_state_reset@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    msg_state_reset@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    msg_state_reset@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    msg_state_reset@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    msg_state_reset@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    msg_state_reset@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    msg_buf_reset@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    msg_buf_reset@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    msg_buf_reset@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    msg_buf_reset@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    msg_buf_reset@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    msg_buf_reset@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    msg_buf_reset@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    msg_buf_reset@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    put_2@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    put_2@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    put_2@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    put_2@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    put_2@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    put_2@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    put_2@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_2@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    get_2@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    get_2@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    get_2@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    get_2@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    get_2@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    get_2@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    get_2@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    get_2@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    discard_1@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    discard_1@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    discard_1@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    discard_1@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    discard_1@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    discard_1@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    discard_1@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_1@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    put_1@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    put_1@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    put_1@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    put_1@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    put_1@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    put_1@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_1@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    get_1@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    get_1@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    get_1@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    get_1@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    get_1@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    get_1@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    get_1@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    get_1@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    default_values_register@registers	PTR struct . size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handler_read_holding_registers@registers_out	PTR unsigned short  size(1) Largest target is 64
		 -> handle_read_registers@regs(BANK1[64]), 

    handler_read_holding_registers@arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handler_read_holding_registers@server_registers	PTR unsigned short  size(1) Largest target is 13
		 -> registers.server_holding_register(COMMON[4]), main@registers(BANK4[13]), 

    handler_read_input_registers@registers_out	PTR unsigned short  size(1) Largest target is 64
		 -> handle_read_registers@regs(BANK1[64]), 

    handler_read_input_registers@arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handler_read_input_registers@server_registers	PTR unsigned short  size(1) Largest target is 13
		 -> registers.server_input_register(COMMON[8]), main@registers(BANK4[13]), 

    handle_write_single_coil@arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    handle_write_single_coil@server_coils	PTR unsigned char [1] size(1) Largest target is 1
		 -> registers.server_coils.coils(COMMON[1]), 

    write_serial@buf	PTR const unsigned char  size(1) Largest target is 48
		 -> nmbs.msg.buf(BANK0[48]), 

    read_serial@buf	PTR unsigned char  size(1) Largest target is 76
		 -> nmbs.msg.buf(BANK0[48]), nmbs.msg(BANK0[56]), main@nmbs(BANK3[75]), 

    getADCData@sensorSelection	PTR void  size(1) Largest target is 13
		 -> sensor1.sensor_info(BANK4[11]), sensor1(BANK4[13]), 

    is_a_new_value@nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    is_a_new_value@nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    is_a_new_value@nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    is_a_new_value@nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    is_a_new_value@nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    is_a_new_value@nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    is_a_new_value@nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    is_a_new_value@nmbs	PTR struct nmbs_t size(1) Largest target is 76
		 -> main@nmbs(BANK3[75]), 

    is_a_new_value@actual_regs	PTR struct . size(1) Largest target is 4
		 -> main@actual_regs(BANK2[4]), 

    is_a_new_value@registers	PTR struct . size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    platform_conf.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    platform_conf.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    platform_conf.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    S1495nmbs_platform_conf$arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    nmbs.platform.arg	PTR void  size(1) Largest target is 13
		 -> main@registers(BANK4[13]), 

    S1495nmbs_platform_conf$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs.platform.write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    S1495nmbs_platform_conf$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs.platform.read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    S1454nmbs_callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs.callbacks.write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    S1454nmbs_callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs.callbacks.write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    S1454nmbs_callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs.callbacks.read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    S1454nmbs_callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs.callbacks.read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10863 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    sensor2.sense	PTR FTN(PTR void ,)unsigned short  size(2) Largest target is 2
		 -> getCount(), getADCData(), 

    S1366$sense	PTR FTN(PTR void ,)unsigned short  size(2) Largest target is 2
		 -> getCount(), getADCData(), 

    sensor1.sense	PTR FTN(PTR void ,)unsigned short  size(2) Largest target is 2
		 -> getCount(), getADCData(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Receive_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultErrorHandler(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _EUSART1_Receive_ISR->_EUSART1_RxDataHandler
    _EUSART1_DefaultErrorHandler->_EUSART1_RxDataHandler
    _EUSART1_RxDataHandler->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _main->_nmbs_server_poll
    _nmbs_server_poll->_handle_req_fc
    _recv_req_header->_recv_msg_header
    _handle_req_fc->_handle_read_holding_registers
    _handle_req_fc->_handle_read_input_registers
    _handle_write_single_register@nanomodbus$F2807->_recv_write_single_register_res
    _recv_write_single_register_res->_recv_res_header
    _handle_write_single_coil@nanomodbus$F2778->_recv_write_single_coil_res
    _recv_write_single_coil_res->_recv_res_header
    _handle_read_input_registers->_handle_read_registers
    _handle_read_holding_registers->_handle_read_registers
    _handle_read_registers->_recv_read_registers_res
    _send_exception_msg->_send_msg
    _send_msg->_send
    _send->_write_serial
    _write_serial->_EUSART1_Write
    _write_serial->_EUSART1_is_tx_ready
    _recv_read_registers_res->_recv_res_header
    _recv_res_header->_recv_msg_footer
    _recv_msg_header->_recv
    _msg_state_reset->_msg_buf_reset
    _recv_msg_footer->_recv
    _recv->_read_serial
    _read_serial->_EUSART1_Read
    _put_res_header->_put_msg_header
    _put_msg_header->_put_2
    _nmbs_server_create->_nmbs_create
    _nmbs_create->_m_memset
    _is_a_new_value->_DATAEE_WriteWord
    _DATAEE_WriteWord->_DATAEE_WriteByte
    _getCount->_TMR5_ReadTimer
    _getADCData->_ADCC_GetSingleConversion
    _exit->___funcs_on_exit
    ___funcs_on_exit->_call
    _default_values_register->_m_memset
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _DATAEE_ReadWord->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handle_read_input_registers->_handle_read_registers
    _handle_read_holding_registers->_handle_read_registers

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               113   113      0  208313
                                             73 BANK1      6     6      0
                                              0 BANK2     19    19      0
                                              0 BANK3     75    75      0
                                              0 BANK4     13    13      0
                    _DATAEE_ReadByte
                    _DATAEE_ReadWord
                   _DATAEE_WriteWord
                  _FVR_IsOutputReady
                  _SYSTEM_Initialize
                    _TxDeviceDisable
                   _UART_ClearBuffer
                 _check_error_modbus
            _default_values_register
                               _exit
                         _getADCData *
                           _getCount *
                     _is_a_new_value
                           _m_memset
                 _nmbs_server_create
                   _nmbs_server_poll
                 _setBaudRateEUSART1
 ---------------------------------------------------------------------------------
 (1) _nmbs_server_poll                                     5     5      0  194913
                                             73 BANK0      5     5      0
                      _handle_req_fc
                    _msg_state_reset
                        _read_serial *
                    _recv_req_header
 ---------------------------------------------------------------------------------
 (2) _recv_req_header                                      5     4      1    4648
                                             30 BANK0      5     4      1
                    _recv_msg_header
 ---------------------------------------------------------------------------------
 (2) _handle_req_fc                                        4     4      0  188537
                                             69 BANK0      4     4      0
      _handle_read_holding_registers
        _handle_read_input_registers
_handle_write_single_coil@nanomodbus
_handle_write_single_register@nanomo
 ---------------------------------------------------------------------------------
 (3) _handle_write_single_register@nanomodbus$F2807        8     8      0   38718
                                             51 BANK0      8     8      0
                              _get_2
                              _put_2
                     _put_res_header
                               _recv
                    _recv_msg_footer
     _recv_write_single_register_res
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _recv_write_single_register_res                      11     7      4   21910
                                             44 BANK0      7     3      4
                              _get_2
                               _recv
                    _recv_msg_footer
                    _recv_res_header
 ---------------------------------------------------------------------------------
 (3) _handle_write_single_coil@nanomodbus$F2778           11    11      0   48394
                                             55 BANK0     10    10      0
                              _get_2
           _handle_write_single_coil *
                              _put_2
                     _put_res_header
                               _recv
                    _recv_msg_footer
         _recv_write_single_coil_res
                 _send_exception_msg
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _recv_write_single_coil_res                          11     7      4   22220
                                             44 BANK0     11     7      4
                              _get_2
                               _recv
                    _recv_msg_footer
                    _recv_res_header
 ---------------------------------------------------------------------------------
 (4) _handle_write_single_coil                            14     9      5     641
                                              0 BANK0     14     9      5
 ---------------------------------------------------------------------------------
 (3) _handle_read_input_registers                          1     1      0   50594
                                             68 BANK0      1     1      0
              _handle_read_registers
 ---------------------------------------------------------------------------------
 (3) _handle_read_holding_registers                        1     1      0   50594
                                             68 BANK0      1     1      0
              _handle_read_registers
 ---------------------------------------------------------------------------------
 (4) _handle_read_registers                               83    81      2   50496
                                             58 BANK0     10     8      2
                                              0 BANK1     73    73      0
                              _get_2
     _handler_read_holding_registers *
       _handler_read_input_registers *
                              _put_1
                              _put_2
                     _put_res_header
                               _recv
                    _recv_msg_footer
            _recv_read_registers_res
                 _send_exception_msg
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _send_exception_msg                                   3     2      1    8040
                                             34 BANK0      3     2      1
                              _put_1
                     _put_msg_header
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _send_msg                                             6     6      0    3226
                                             28 BANK0      6     6      0
                      _nmbs_crc_calc
                              _put_2
                               _send
 ---------------------------------------------------------------------------------
 (5) _send                                                12    10      2     875
                                             16 BANK0     12    10      2
                       _write_serial *
 ---------------------------------------------------------------------------------
 (6) _write_serial                                        15     7      8     467
                                              1 BANK0     15     7      8
                      _EUSART1_Write
                 _EUSART1_is_tx_done
                _EUSART1_is_tx_ready
                    _TxDeviceDisable
                     _TxDeviceEnable
 ---------------------------------------------------------------------------------
 (7) _TxDeviceEnable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TxDeviceDisable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_is_tx_ready                                  1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_is_tx_done                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Write                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _recv_read_registers_res                             14    11      3   22820
                                             44 BANK0     14    11      3
                              _get_1
                              _get_2
                               _recv
                    _recv_msg_footer
                    _recv_res_header
 ---------------------------------------------------------------------------------
 (5) _recv_res_header                                     10    10      0   13183
                                             34 BANK0     10    10      0
                              _get_1
                               _recv
                    _recv_msg_footer
                    _recv_msg_header
 ---------------------------------------------------------------------------------
 (3) _recv_msg_header                                      4     3      1    4178
                                             26 BANK0      4     3      1
                              _get_1
                    _msg_state_reset
                               _recv
 ---------------------------------------------------------------------------------
 (4) _msg_state_reset                                      1     1      0     361
                                              1 BANK0      1     1      0
                      _msg_buf_reset
 ---------------------------------------------------------------------------------
 (4) _get_1                                                4     4      0     343
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) _recv_msg_footer                                      8     8      0    4794
                                             26 BANK0      8     8      0
                              _get_2
                      _nmbs_crc_calc
                               _recv
 ---------------------------------------------------------------------------------
 (4) _recv                                                 7     5      2    2782
                                             19 BANK0      7     5      2
                        _read_serial *
 ---------------------------------------------------------------------------------
 (5) _read_serial                                         17     9      8     752
                                              2 BANK0     17     9      8
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Read                                         2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _nmbs_crc_calc                                       17    13      4     599
                                              0 BANK0     17    13      4
 ---------------------------------------------------------------------------------
 (7) _get_2                                               12    10      2     765
                                              0 BANK0     12    10      2
 ---------------------------------------------------------------------------------
 (4) _put_res_header                                       3     1      2    3337
                                              9 BANK0      3     1      2
                     _put_msg_header
 ---------------------------------------------------------------------------------
 (5) _put_msg_header                                       4     2      2    2897
                                              5 BANK0      4     2      2
                      _msg_buf_reset
                              _put_1
                              _put_2
 ---------------------------------------------------------------------------------
 (5) _put_2                                                5     3      2    1354
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (6) _put_1                                                4     3      1     754
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _msg_buf_reset                                        1     1      0     103
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _handler_read_input_registers                        13     6      7     644
                                              0 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (5) _handler_read_holding_registers                      13     6      7     319
                                              0 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (1) _nmbs_server_create                                   7     4      3    2034
                                             12 BANK0      7     4      3
                        _nmbs_create
 ---------------------------------------------------------------------------------
 (2) _nmbs_create                                          4     3      1    1415
                                              8 BANK0      4     3      1
                           _m_memset
 ---------------------------------------------------------------------------------
 (1) _is_a_new_value                                       7     5      2    3439
                                              9 BANK0      7     5      2
                   _DATAEE_WriteByte
                   _DATAEE_WriteWord
                 _setBaudRateEUSART1
 ---------------------------------------------------------------------------------
 (1) _setBaudRateEUSART1                                   4     0      4     211
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteWord                                     5     1      4    1697
                                              4 BANK0      5     1      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     4     1      3     850
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _getCount                                             4     2      2     136
                                             11 BANK0      4     2      2
            _TMR0_HasOverflowOccured
                    _TMR0_Initialize
                    _TMR0_StartTimer
                    _TMR5_Initialize
                     _TMR5_ReadTimer
                    _TMR5_StartTimer
                     _TMR5_StopTimer
 ---------------------------------------------------------------------------------
 (2) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_ReadTimer                                      11     9      2     102
                                              0 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getADCData                                           6     4      2     195
                                              3 BANK0      6     4      2
           _ADCC_GetSingleConversion
 ---------------------------------------------------------------------------------
 (2) _ADCC_GetSingleConversion                             3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _exit                                                 2     0      2     344
                                             10 BANK0      2     0      2
                              __Exit
                    ___funcs_on_exit
 ---------------------------------------------------------------------------------
 (2) ___funcs_on_exit                                      8     8      0     133
                                              2 BANK0      8     8      0
                               _call *
 ---------------------------------------------------------------------------------
 (3) _call                                                 2     0      2      65
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) __Exit                                                2     0      2      90
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _default_values_register                              1     1      0    1232
                                              8 BANK0      1     1      0
                           _m_memset
 ---------------------------------------------------------------------------------
 (3) _m_memset                                             8     2      6    1010
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _check_error_modbus                                   1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_ClearBuffer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     605
                    _ADCC_Initialize
                 _EUSART1_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     484
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadWord                                      9     7      2     645
                                              2 BANK0      9     7      2
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0     961
                   Absolute function *
                _EUSART1_Receive_ISR *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     305
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (13) _TMR1_DefaultInterruptHandler                        1     1      0       0
                                              0 COMMON     1     1      0
                     _TMR1_StopTimer
                 i1_UART_ClearBuffer
 ---------------------------------------------------------------------------------
 (14) i1_UART_ClearBuffer                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0     656
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART1_DefaultOverrunErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART1_DefaultFramingErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART1_DefaultErrorHandler                         0     0      0     328
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART1_RxDataHandler                               4     4      0     328
                                              2 COMMON     4     4      0
                    _TMR1_StartTimer
                     _TMR1_StopTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (13) _TMR1_WriteTimer                                     2     0      2     305
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (14) _TMR1_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR1_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
   _DATAEE_ReadWord
     _DATAEE_ReadByte
   _DATAEE_WriteWord
     _DATAEE_WriteByte
   _FVR_IsOutputReady
   _SYSTEM_Initialize
     _ADCC_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR5_Initialize
   _TxDeviceDisable
   _UART_ClearBuffer
   _check_error_modbus
   _default_values_register
     _m_memset
   _exit
     __Exit
     ___funcs_on_exit
       _call *
   _getADCData *
     _ADCC_GetSingleConversion
   _getCount *
     _TMR0_HasOverflowOccured
     _TMR0_Initialize
     _TMR0_StartTimer
     _TMR5_Initialize
     _TMR5_ReadTimer
     _TMR5_StartTimer
     _TMR5_StopTimer
   _is_a_new_value *
     _DATAEE_WriteByte
     _DATAEE_WriteWord
     _setBaudRateEUSART1
   _m_memset *
   _nmbs_server_create *
     _nmbs_create
       _m_memset
   _nmbs_server_poll *
     _handle_req_fc
       _handle_read_holding_registers
         _handle_read_registers
           _get_2
           _handler_read_holding_registers *
           _handler_read_input_registers *
           _put_1 *
           _put_2 *
           _put_res_header *
             _put_msg_header
               _msg_buf_reset
               _put_1
               _put_2
           _recv *
             _read_serial *
               _EUSART1_Read
           _recv_msg_footer *
             _get_2
             _nmbs_crc_calc
             _recv
           _recv_read_registers_res *
             _get_1
             _get_2
             _recv
             _recv_msg_footer
             _recv_res_header
               _get_1
               _recv
               _recv_msg_footer
               _recv_msg_header
                 _get_1
                 _msg_state_reset
                   _msg_buf_reset
                 _recv
           _send_exception_msg *
             _put_1
             _put_msg_header
             _send_msg
               _nmbs_crc_calc
               _put_2
               _send
                 _write_serial *
                   _EUSART1_Write
                   _EUSART1_is_tx_done
                   _EUSART1_is_tx_ready
                   _TxDeviceDisable
                   _TxDeviceEnable
           _send_msg *
       _handle_read_input_registers
         _handle_read_registers
       _handle_write_single_coil@nanomodbus$F2778
         _get_2
         _handle_write_single_coil *
         _put_2 *
         _put_res_header *
         _recv *
         _recv_msg_footer *
         _recv_write_single_coil_res *
           _get_2
           _recv
           _recv_msg_footer
           _recv_res_header
         _send_exception_msg *
         _send_msg *
       _handle_write_single_register@nanomodbus$F2807
         _get_2
         _put_2
         _put_res_header
         _recv
         _recv_msg_footer
         _recv_write_single_register_res
           _get_2
           _recv
           _recv_msg_footer
           _recv_res_header
         _send_msg
     _msg_state_reset
     _read_serial *
     _recv_req_header *
       _recv_msg_header
   _setBaudRateEUSART1 *

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
         _TMR1_StartTimer
         _TMR1_StopTimer
         _TMR1_WriteTimer
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _TMR1_ISR *
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
       _TMR1_StopTimer
       i1_UART_ClearBuffer
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     1A0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4E      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4F      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     13      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     4B      4B      12       93.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      D      1B      14       33.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      40      16       80.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              4E      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1A0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Mar 27 10:13:25 2025

                      __end_of_TMR0_HasOverflowOccured 178C  
                             ?_default_values_register 0076  
                                                   l93 08A9  
                               __end_of_FVR_Initialize 1783  
                     recv_read_registers_res@registers 004E  
                   recv_res_header@first_byte_received 0047  
                                                  l251 0529  
                                                  l245 056B  
                                                  l248 050C  
                                                  l275 17C4  
                                                  l573 0A4E  
                                                  l728 0255  
                                                  l991 0FAF  
                                                  l993 0FD1  
                      recv_read_registers_res@quantity 004C  
                                      _timer1ReloadVal 0164  
                                                  wreg 0009  
                       ?_handle_read_holding_registers 0076  
                      handler_read_holding_registers@i 002B  
                                                 l1024 0F95  
                                                 l1029 0C99  
                                                 l1156 0CC4  
                                                 l5007 0BC4  
                                                 l5031 07FA  
                                                 l5023 07DC  
                                                 l5121 0477  
                                                 l6011 03FE  
                                                 l5211 0C4D  
                                                 l5203 0C46  
                                                 l5027 07F8  
                                                 l5213 0C6E  
                                                 l5117 0475  
                                                 l6023 0A1C  
                                                 l5071 0F26  
                                                 l6111 02A4  
                                                 l6017 043D  
                                                 l6009 03F0  
                                                 l5049 0E1A  
                                                 l5057 0E2C  
                                                 l5161 04E6  
                                                 l5137 04A6  
                                                 l5129 0493  
                                                 l5233 057C  
                                                 l5305 0E7F  
                                                 l6105 0288  
                                                 l5075 0F28  
                                                 l5331 0EB3  
                                                 l6115 02A8  
                                                 l1789 1765  
                                                 l5165 04E8  
                                                 l5173 04EA  
                                                 l5261 05CD  
                                                 l5237 057E  
                                                 l5413 0176  
                                                 l5309 0E81  
                                                 l6301 0CD4  
                                                 l6117 02B2  
                                                 l6109 028D  
                                                 l6311 0552  
                                                 l6303 0534  
                                                 l5191 0C14  
                                                 l5183 0C0D  
                                                 l5263 05A6  
                                                 l5415 0192  
                                                 l5423 019E  
                                                 l5351 007A  
                                                 l5327 0EB1  
                                                 l6313 0557  
                                                 l6305 0566  
                                                 l5193 0C35  
                                                 l5089 0F52  
                                                 l5265 05D2  
                                                 l5521 0350  
                                                 l6057 01B5  
                                                 l6315 055C  
                                                 l6307 0548  
                                                 l5427 01AB  
                                                 l5355 007C  
                                                 l6091 0256  
                                                 l6067 01EC  
                                                 l6317 0561  
                                                 l6309 054D  
                                                 l5605 0503  
                                                 l5373 00BA  
                                                 l5525 0358  
                                                 l5509 030E  
                                                 l6069 020B  
                                                 l5623 051F  
                                                 l5615 0516  
                                                 l5279 05F0  
                                                 l5375 00E0  
                                                 l5295 0691  
                                                 l5543 0395  
                                                 l5535 0383  
                                                 l4913 0D2C  
                                                 l5369 00B0  
                                                 l5289 0667  
                                                 l5803 0ED4  
                                                 l4915 0D5C  
                                                 l4931 0E51  
                                                 l5395 0143  
                                                 l5379 00EA  
                                                 l5539 0389  
                                                 l5483 02D1  
                                                 l5563 072F  
                                                 l5469 08E0  
                                                 l5637 052E  
                                                 l5821 0EED  
                                                 l5813 0EC2  
                                                 l4941 0E69  
                                                 l5399 014D  
                                                 l5487 02D3  
                                                 l5559 0723  
                                                 l4937 0E64  
                                                 l5841 0DB8  
                                                 l5595 04F0  
                                                 l5819 0ECA  
                                                 l4939 0E3B  
                                                 l5851 0DE1  
                                                 l5597 04FA  
                                                 l5861 0CB1  
                                                 l5853 0DE7  
                                                 l5863 0CB7  
                                                 l5847 0DCB  
                                                 l5945 0B75  
                                                 l5937 0B65  
                                                 l4889 0825  
                                                 l5865 0CBC  
                                                 l5883 076E  
                                                 l4995 0FF3  
                                                 l4987 0FDD  
                                                 l5859 0CAC  
                                                 l5867 0CC7  
                                                 l4989 0FE2  
                                                 l5869 0CE2  
                                                 l5981 0626  
                                                 l5965 060E  
                                                 l5973 0612  
                                                 l5879 0732  
                                                 l5799 0ED2  
                                                 l5889 0793  
                                                 l5969 0610  
                                                 _LATA 0018  
                                                 u3023 07F4  
                                                 u3015 07D8  
                                                 _LATC 001A  
                                                 u3065 0E28  
                                                 u3155 048F  
                                                 u4045 03AF  
                                                 u3325 05A9  
                                                 u3255 0C1A  
                                                 u3335 05B5  
                                                 u3520 00F6  
                                                 u4075 0416  
                                                 u3275 0C53  
                                                 u3355 05EC  
                                                 u3435 0EAF  
                                                 u3445 0EB9  
                                                 u3384 0686  
                                                 u3385 0685  
                                                 u3394 069B  
                                                 u2915 0D40  
                                                 u3395 0699  
                                                 _PMD0 0796  
                                                 _PMD1 0797  
                                                 u3670 0318  
                                                 _PMD2 0798  
                                                 u3575 017C  
                                                 _PMD3 0799  
                                                 u3840 0F01  
                                                 u3680 0319  
                                                 _PMD4 079A  
                                                 u2945 0E41  
                                                 _PMD5 079B  
                                                 _PMD6 079C  
                                                 _PMD7 079D  
                                                 u3940 0B89  
                                                 u2965 0FD4  
                                                 u2975 0FDE  
                                                 u2995 0FBD  
                                                 u3895 0784  
                      handle_read_input_registers@nmbs 0064  
                                                 _WPUA 1F39  
                                                 _WPUC 1F4F  
                                        _EUSART1_Write 17C3  
                                                 _call 1766  
                                                 _head 0070  
                 handle_write_single_coil@server_coils 002D  
                                                 _main 01AD  
                                                 _exit 17F5  
                                                 _recv 0B8F  
                                        ?_EUSART1_Read 0076  
                                                 _send 0798  
                                      _TMR0_StartTimer 1772  
                                 read_serial@charCount 002F  
                                                 fsr0h 0005  
                                                 _slot 014C  
                                                 fsr1h 0007  
                                                 indf0 0000  
                                                 fsr0l 0004  
                                                 indf1 0001  
                                                 fsr1l 0006  
                                                 btemp 007E  
                                     _nmbs_server_poll 05F2  
                                                 start 001B  
                                      _timer5ReloadVal 0166  
                           ??_TMR1_SetInterruptHandler 0022  
                     ??_handler_read_holding_registers 0027  
                      ?_handler_read_holding_registers 0020  
                                recv_res_header@req_fc 0048  
                   __end_of_recv_write_single_coil_res 0EBD  
                           _recv_write_single_coil_res 0E74  
                                        write_serial@i 002E  
                              __end_of_TMR0_Initialize 17F5  
                                      ?_FVR_Initialize 0076  
                        __end_of_OSCILLATOR_Initialize 17C3  
                                                ?_call 0020  
                                _eusart1RxStatusBuffer 013C  
                                                _ADCAP 010E  
                                                _ADACT 0117  
                                                ?_main 0076  
                                                _ADCLK 0118  
                                                ?_exit 002A  
                                                _ADPCH 009F  
                                                _ADREF 0116  
                                                ?_recv 0033  
                                                ?_send 0030  
                                                _ADRPT 009A  
                             TMR5_ReadTimer@readValLow 002A  
                                      _TMR1_StartTimer 1767  
                                                _T1CLK 0211  
                                                _T1CON 020E  
                                                _T5CLK 021D  
                                                _T5CON 021A  
                                                i1l530 0019  
                                                i1l525 0010  
                                                _OSCEN 0891  
                                                _TMR0H 059D  
                                                _TMR1H 020D  
                                                _TMR0L 059C  
                                                _TMR1L 020C  
                                                _TMR5H 0219  
                                                _TMR5L 0218  
                                       _TxDeviceEnable 0002  
                                                _TRISA 0012  
                                                _TRISC 0014  
                                __end_of_msg_buf_reset 17E0  
                   recv_msg_header@first_byte_received 003A  
                                                __Exit 1765  
                                     __end_of_TMR1_ISR 08C8  
                         ?_handle_read_input_registers 0076  
                                      _DATAEE_ReadByte 0835  
                                                _get_1 097B  
                                                _get_2 0BC6  
                                                call@p 0020  
                                         ?_read_serial 0022  
                                      _DATAEE_ReadWord 0AA0  
                             DATAEE_ReadWord@high_byte 002A  
                                          m_memset@len 0024  
                                                _put_1 095E  
                                                _put_2 0AC7  
                           recv_res_header@req_unit_id 0046  
                                       ?_EUSART1_Write 0076  
                              __end_of_TMR1_Initialize 09B7  
                                                pclath 000A  
                      nmbs_server_create@platform_conf 002D  
                                       ??_EUSART1_Read 0020  
              recv_write_single_register_res@value_req 004E  
                                                status 0003  
                                                wtemp0 007E  
                                   recv_msg_header@err 003C  
           __end_of_EUSART1_DefaultFramingErrorHandler 1764  
                 ??_EUSART1_DefaultFramingErrorHandler 0076  
                  ?_EUSART1_DefaultFramingErrorHandler 0076  
                   _EUSART1_DefaultFramingErrorHandler 1763  
                                      _TMR1_WriteTimer 085F  
                                      _TMR5_Initialize 088E  
                                      __initialization 001D  
                                         ?_nmbs_create 0028  
                                        main@callbacks 0153  
                                TMR5_ReadTimer@readVal 0027  
                                         __end_of_call 1767  
                           __end_of_EUSART1_Initialize 0B25  
                                         __end_of_main 02C2  
                                         __end_of_exit 1800  
                                         __end_of_recv 0BC6  
                                         __end_of_send 07FC  
                          ?_INTERRUPT_InterruptManager 0076  
                                               ??_call 0022  
                               __end_of_TxDeviceEnable 0004  
                                               ??_main 00E9  
                     __end_of_handle_write_single_coil 06CA  
                                               ??_exit 002C  
                                               ??_recv 0035  
                                               ??_send 0032  
                      handle_write_single_coil@address 0020  
                                      _recv_msg_header 0F07  
                                      _recv_req_header 0DA7  
                                      _recv_msg_footer 0DE9  
                               send_exception_msg@nmbs 0044  
                                      _recv_res_header 044B  
                                               ?__Exit 0020  
         handle_write_single_coil@nanomodbus$F2778@err 005F  
                                    write_serial@count 0022  
                               nmbs_server_create@nmbs 0032  
                                               ?_get_1 0076  
                                               ?_get_2 0020  
                              __end_of_TMR0_StartTimer 1775  
                                               _ADACCU 0098  
                                               _ADACQH 010D  
                                               _ADACQL 010C  
                                  nmbs_server_poll@err 006D  
                                               _ADCON0 0111  
                                               _ADCON1 0112  
                                               _ADCON2 0113  
                                               _ADCON3 0114  
                                               _ADLTHH 008D  
                                               _ADLTHL 008C  
                                               _ADRESH 009E  
                                               _ADRESL 009D  
                                               _ADPREH 0110  
                                               _ADPREL 010F  
                                               _ADSTAT 0115  
                                               _ADUTHH 008F  
                                               _ADUTHL 008E  
                                               ?_put_1 0020  
                                               ?_put_2 0020  
                                               _ANSELA 1F38  
                                               _ANSELC 1F4E  
                recv_write_single_coil_res@address_res 0051  
                                               _T0CON0 059E  
                                               _T0CON1 059F  
                                               _T1GATE 0210  
                                               _T1GCON 020F  
                                               _T5GATE 021C  
                                               _T5GCON 021B  
                                               _RC1REG 0119  
                                               _RC1STA 011D  
                              TMR1_WriteTimer@timerVal 0076  
                                               _RC4PPS 1F24  
                                               _ODCONA 1F3A  
                                               _ODCONC 1F50  
                                               i1l4323 0876  
                                               i1l4435 0B46  
                                               i1l4429 0B38  
                                               i1l4439 0B55  
                                               i1l3767 0869  
                                               i1l3945 0D0C  
                                               i1l3939 0D00  
                                               _INLVLA 1F3C  
                                               _INLVLC 1F52  
                                               _FVRCON 090C  
                      handle_write_single_coil@unit_id 0023  
                                               _SP1BRG 011B  
                          recv_read_registers_res@nmbs 0058  
                                               _OSCFRQ 0893  
                                   _send_exception_msg 09B7  
                                               _TX1REG 011A  
                                               _TX1STA 011E  
                                      _TxDeviceDisable 0800  
                                       _put_msg_header 0F54  
                                   recv_req_header@err 0041  
                          handle_read_registers@F11090 02A0  
                                   recv_msg_footer@crc 003C  
                                   recv_msg_footer@err 0040  
                                     __end_of_getCount 0A37  
                                       _put_res_header 17E0  
                                  ?_send_exception_msg 0042  
                 __end_of_TMR1_DefaultInterruptHandler 087D  
                         _TMR1_DefaultInterruptHandler 086E  
                                         _write_serial 0E2E  
                              __end_of_TMR1_StartTimer 1769  
                           __end_of_setBaudRateEUSART1 0570  
                                     __end_of_m_memset 08F4  
                                        main@registers 022D  
                             ?_EUSART1_SetErrorHandler 0020  
                                     ?_TMR0_Initialize 0076  
                                   _nmbs_server_create 0B58  
                     ??_EUSART1_SetOverrunErrorHandler 0022  
                      ?_EUSART1_SetOverrunErrorHandler 0020  
                                      ?_TxDeviceEnable 0076  
                              __end_of_DATAEE_ReadByte 0843  
            handler_read_input_registers@registers_out 0024  
                              __end_of_DATAEE_ReadWord 0AC7  
                                      _TMR5_StartTimer 1775  
                                     __end_of_send_msg 0CAA  
                                      _ADCC_Initialize 090C  
                                       _PMD_Initialize 17CC  
         handler_read_input_registers@server_registers 002A  
                                  ?_nmbs_server_create 002C  
                                 ??_send_exception_msg 0043  
                            ?_ADCC_GetSingleConversion 0020  
                                      ??_EUSART1_Write 0020  
                                 ___funcs_on_exit@func 0026  
             TMR1_SetInterruptHandler@InterruptHandler 0020  
                              __end_of_TMR1_WriteTimer 086E  
                                      _eusart1RxBuffer 0144  
                                     getADCData@result 0026  
     handle_write_single_coil@nanomodbus$F2778@address 005B  
                        handle_write_single_coil@coils 0022  
                                  recv_msg_header@nmbs 003D  
                                     ?_TMR1_Initialize 0076  
                           __end_of_check_error_modbus 1765  
                              __end_of_TMR5_Initialize 08A1  
                                    _SYSTEM_Initialize 0927  
                               __end_of_put_msg_header 0FA2  
                              __end_of__initialization 0063  
                              recv_msg_footer@recv_crc 003E  
                                   ?_SYSTEM_Initialize 0076  
                               __end_of_put_res_header 17EA  
                                   recv_res_header@err 004A  
                                 ??_nmbs_server_create 002F  
                        __end_of_EUSART1_RxDataHandler 0D24  
                            put_res_header@data_length 0029  
                                       __pcstackCOMMON 0076  
                                        __end_of__Exit 1766  
       handle_write_single_coil@nanomodbus$F2778@value 005D  
                                         __pidataBANK2 0942  
                                         __pidataBANK4 0828  
                              __end_of_recv_msg_header 0F54  
                                  ??_SYSTEM_Initialize 0022  
                        __end_of_handle_read_registers 01AD  
                                            ?_TMR1_ISR 0076  
                                        __end_of_get_1 0998  
                                        __end_of_get_2 0BFE  
                        ?_TMR1_DefaultInterruptHandler 0076  
                                 sendSensorData@F10866 012D  
                                     _DATAEE_WriteByte 0A37  
                              __end_of_recv_req_header 0DE9  
                              __end_of_recv_msg_footer 0E2E  
                                     _DATAEE_WriteWord 08F4  
                                        __end_of_put_1 097B  
                                        __end_of_put_2 0AF4  
                              __end_of_recv_res_header 04EC  
                               __end_of_PMD_Initialize 17D6  
                                 __end_of_EUSART1_Read 088E  
                 __end_of_handler_read_input_registers 0C37  
                         _handler_read_input_registers 0BFE  
                             __end_of_nmbs_server_poll 065E  
                                      write_serial@arg 0028  
                                      write_serial@buf 0021  
                                    ??___funcs_on_exit 0022  
                  nmbs_server_poll@first_byte_received 006B  
                                           _getADCData 08C8  
                          __end_of_EUSART1_Receive_ISR 0B58  
                                              ??__Exit 0022  
                                    ??_msg_state_reset 0021  
                                              ??_get_1 0020  
                                              ??_get_2 0022  
                              __end_of_TxDeviceDisable 0803  
                                     ?_TMR0_StartTimer 0076  
                            __end_of_SYSTEM_Initialize 0942  
                                              ??_put_1 0021  
                                              ??_put_2 0022  
                                        _eusart1RxHead 0074  
                                        _eusart1RxTail 0073  
                                       _is_a_new_value 0397  
                                           __pbssBANK1 00EF  
                                           __pbssBANK2 013C  
                                           __pbssBANK4 023A  
                                           __pbssBANK5 02A0  
                      ??_EUSART1_SetRxInterruptHandler 0022  
                                __end_of_handle_req_fc 0CE4  
                                      ?_put_msg_header 0025  
                    recv_write_single_register_res@err 0051  
                            ?_handle_write_single_coil 0020  
                                      ?_put_res_header 0029  
                      __end_of_EUSART1_SetErrorHandler 179A  
                                     ??_FVR_Initialize 0020  
                                           __pmaintext 01AD  
               recv_read_registers_res@registers_bytes 0057  
        handle_write_single_coil@nanomodbus$F2778@nmbs 0060  
                                     ?_TMR1_StartTimer 0076  
                                           ??_TMR1_ISR 0078  
                              __end_of_TMR5_StartTimer 1778  
                          ?_recv_write_single_coil_res 004C  
                              __end_of_ADCC_Initialize 0927  
                                           __pintentry 0004  
                                 nmbs_server_poll@nmbs 006C  
                                              _ADSTPTH 0093  
                                              _ADSTPTL 0092  
                                      ?_PMD_Initialize 0076  
               __end_of_EUSART1_SetFramingErrorHandler 17A2  
                       _EUSART1_SetFramingErrorHandler 179A  
                                     ?_DATAEE_ReadByte 0020  
                                    main@platform_conf 015C  
                                     ?_DATAEE_ReadWord 0022  
                           __end_ofi1_UART_ClearBuffer 177F  
                        ?_handler_read_input_registers 0020  
               __end_of_handler_read_holding_registers 0C70  
                       _handler_read_holding_registers 0C37  
                         ?_EUSART1_DefaultErrorHandler 0076  
                                              _SP1BRGH 011C  
                                              _SP1BRGL 011B  
                     default_values_register@registers 0028  
                                              _OSCCON1 088D  
                                              _OSCCON3 088F  
                                              _NVMADRH 081B  
                                              _NVMADRL 081A  
                                              _OSCTUNE 0892  
                                              _NVMDATL 081C  
                                              _NVMCON2 081F  
                handler_read_holding_registers@address 0020  
                                            ?_getCount 002B  
                                              _SLRCONA 1F3B  
                                              _SLRCONC 1F51  
                               __end_of_is_a_new_value 044B  
                            getADCData@sensorSelection 0023  
                                     ?_TMR1_WriteTimer 0076  
                              _TMR0_HasOverflowOccured 1787  
                                            ?_m_memset 0020  
                                  recv_req_header@nmbs 0042  
                                     ?_TMR5_Initialize 0076  
                                 DATAEE_WriteByte@bAdd 0020  
                                          send_msg@crc 003E  
                                          send_msg@err 0040  
                                    msg_buf_reset@nmbs 0020  
                                  recv_msg_footer@nmbs 0041  
                handler_read_holding_registers@unit_id 0025  
                                            ?_send_msg 0076  
    handle_write_single_register@nanomodbus$F2807@nmbs 005A  
                                    nmbs_crc_calc@data 0028  
     handle_write_single_register@nanomodbus$F2807@err 0055  
                                     ?_recv_msg_header 003A  
                                     ?_recv_req_header 003E  
                                     ?_recv_msg_footer 0076  
                           __end_of_EUSART1_is_tx_done 0800  
                                     ?_recv_res_header 0076  
                                  _EUSART1_is_tx_ready 081B  
                                              _flag_Rx 00EF  
                                              __ptext1 05F2  
                                              __ptext2 0DA7  
                                              __ptext3 0CAA  
                                              __ptext4 06CA  
                                              __ptext5 0A58  
                                              __ptext6 02C2  
                                              __ptext7 0E74  
                                              __ptext8 065E  
                                              __ptext9 0851  
                       ??_TMR1_DefaultInterruptHandler 0076  
                                              _builtin 236E  
                                            _T1CONbits 020E  
                                       nmbs_crc_calc@i 0029  
                                       nmbs_crc_calc@j 002D  
                                _OSCILLATOR_Initialize 17BA  
                                          ?_getADCData 0023  
                                   _EUSART1_Initialize 0AF4  
                             ??_PIN_MANAGER_Initialize 0020  
                            ?_TMR1_SetInterruptHandler 0020  
                                            _T5CONbits 021A  
                                              _sensor1 0220  
                                              _sensor2 0120  
                                           ??_getCount 002D  
                        ??_EUSART1_DefaultErrorHandler 007C  
                                      ?_is_a_new_value 0029  
                                     ?_TxDeviceDisable 0076  
                                 sendSensorInfo@F10861 0135  
                                              main@err 00EE  
                                              clrloop0 0804  
                  recv_write_single_coil_res@value_req 004E  
                  recv_write_single_coil_res@value_res 0053  
                                 end_of_initialization 0063  
                                    handle_req_fc@nmbs 0068  
                                           ??_m_memset 0026  
                                  ?_EUSART1_Initialize 0076  
                                 DATAEE_WriteWord@bAdd 0024  
                                 ?_EUSART1_is_tx_ready 0076  
                                              init_ram 080F  
                          _EUSART1_OverrunErrorHandler 016A  
                                              initloop 0810  
                                              recv@ret 0038  
                              _recv_read_registers_res 0570  
                                              send@ret 0037  
                      handle_read_registers@regs_bytes 00E2  
                                    _FVR_IsOutputReady 178C  
                __end_of_EUSART1_SetRxInterruptHandler 17B2  
                        _EUSART1_SetRxInterruptHandler 17AA  
                                       getCount@result 002D  
                                           ??_send_msg 003C  
                                    getADCData@channel 0028  
                                   ?_FVR_IsOutputReady 0076  
                        nmbs_server_create@address_rtu 002C  
                                     _UART_ClearBuffer 1783  
      __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F2150 1801  
              _NMBS_BROADCAST_ADDRESS@nanomodbus$F2150 1800  
                         handle_read_registers@address 00E0  
      __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F1922 1802  
              _NMBS_BROADCAST_ADDRESS@nanomodbus$F1922 1801  
                                     ??_TxDeviceEnable 0020  
                                        _nmbs_crc_calc 0FA2  
                                     ?_TMR5_StartTimer 0076  
                                     ?_ADCC_Initialize 0076  
                         _handle_write_single_register 0000  
                     __end_of_ADCC_GetSingleConversion 08B4  
                                 ??_EUSART1_Initialize 0022  
                                  ??_FVR_IsOutputReady 0020  
                                         read_serial@c 002E  
                                     main@is_in_memory 00ED  
                              _default_values_register 0D65  
                                   _setBaudRateEUSART1 04EC  
                            ??_TMR0_HasOverflowOccured 0020  
                                  EUSART1_Write@txData 0020  
                             __end_of_DATAEE_WriteByte 0A58  
                             __end_of_DATAEE_WriteWord 090C  
                                ??_EUSART1_is_tx_ready 0020  
                                  ?_setBaudRateEUSART1 0020  
          handler_read_holding_registers@registers_out 0024  
                            handle_read_registers@nmbs 00E8  
                            handle_read_registers@regs 00A0  
                            __end_of_FVR_IsOutputReady 1792  
__end_of_handle_write_single_register@nanomodbus$F2807 0731  
      ??_handle_write_single_register@nanomodbus$F2807 0053  
       ?_handle_write_single_register@nanomodbus$F2807 0076  
        _handle_write_single_register@nanomodbus$F2807 06CA  
                                  recv_res_header@nmbs 004B  
    __end_of_handle_write_single_coil@nanomodbus$F2778 0397  
          ??_handle_write_single_coil@nanomodbus$F2778 0057  
           ?_handle_write_single_coil@nanomodbus$F2778 0076  
            _handle_write_single_coil@nanomodbus$F2778 02C2  
                                         _EUSART1_Read 087D  
                        handle_read_registers@callback 005A  
                                       ?_nmbs_crc_calc 0020  
                                      ___funcs_on_exit 0731  
                                   _check_error_modbus 1764  
                      handler_read_input_registers@arg 0026  
                                      _msg_state_reset 0A7B  
                                 ??_setBaudRateEUSART1 0024  
                                       _TMR1_StopTimer 1769  
                       recv_write_single_coil_res@nmbs 0055  
                               ?_OSCILLATOR_Initialize 0076  
                                  ?_check_error_modbus 0076  
                             recv_res_header@exception 0049  
                   recv_req_header@first_byte_received 003E  
                                    ?_nmbs_server_poll 0076  
                                       _TMR5_ReadTimer 09F6  
                                  start_initialization 001D  
                                        _msg_buf_reset 17D6  
                  __end_of_handle_read_input_registers 085F  
                          _handle_read_input_registers 0851  
                                   ??_nmbs_server_poll 0069  
                                     ??_put_msg_header 0027  
                           read_serial@byte_timeout_ms 0025  
        EUSART1_SetRxInterruptHandler@interruptHandler 0020  
                              DATAEE_ReadWord@low_byte 0029  
                                     ??_put_res_header 002B  
                                __end_of_EUSART1_Write 17CC  
                            ??_recv_read_registers_res 004F  
                                      main@actual_regs 014F  
                        handle_read_registers@quantity 00E5  
                                nmbs_server_create@ret 0031  
                        ??_handle_read_input_registers 0064  
                    recv_write_single_coil_res@address 004C  
                                 ??_check_error_modbus 0020  
                                  DATAEE_ReadByte@bAdd 0020  
                        handler_read_input_registers@i 002B  
                           recv_read_registers_res@err 0059  
                           recv_read_registers_res@reg 0053  
                            put_msg_header@data_length 0025  
                              is_a_new_value@registers 002F  
                                     ??_PMD_Initialize 0020  
                                _EUSART1_RxDataHandler 0CE4  
                                  nmbs_crc_calc@length 0020  
                       ?_EUSART1_SetRxInterruptHandler 0020  
                               __end_of_TMR1_StopTimer 176C  
                                          __pdataBANK2 0120  
                                          __pdataBANK4 0220  
                                   is_a_new_value@nmbs 002A  
                             nmbs_create@platform_conf 0028  
                                _handle_read_registers 0067  
                                  ___funcs_on_exit@arg 0028  
                                       _TMR5_StopTimer 1778  
                               __end_of_TMR5_ReadTimer 0A16  
                                       _eusart1RxCount 0072  
                            ??_default_values_register 0028  
                             _ADCC_GetSingleConversion 08A1  
                                          __pbssBIGRAM 236E  
                                       ?_msg_buf_reset 0076  
                                          __pbssCOMMON 0070  
                    _EUSART1_RxDefaultInterruptHandler 016E  
                                            ___latbits 0002  
                                        __pcstackBANK0 0020  
                                        __pcstackBANK1 00A0  
                                        __pcstackBANK2 014F  
                                        __pcstackBANK3 01A0  
                                        __pcstackBANK4 022D  
                                        ??_read_serial 002A  
                   recv_write_single_register_res@nmbs 0052  
                                  _eusart1PacketFinish 023A  
                     ??_EUSART1_SetFramingErrorHandler 0022  
                      ?_EUSART1_SetFramingErrorHandler 0020  
                                   i1_UART_ClearBuffer 177B  
                                  DATAEE_ReadWord@bAdd 0022  
                              __end_of___funcs_on_exit 0798  
                                            __pnvBANK2 0162  
                                      ??_nmbs_crc_calc 0024  
                              __end_of_msg_state_reset 0AA0  
                               _PIN_MANAGER_Initialize 09D6  
                                        ??_nmbs_create 0029  
                              _EUSART1_is_tx_ready$633 0020  
                                  ?i1_UART_ClearBuffer 0076  
                     __end_of_TMR1_SetInterruptHandler 17BA  
                               _NMBS_BROADCAST_ADDRESS 1802  
                      ADCC_GetSingleConversion@channel 0022  
                                      ?_TMR1_StopTimer 0076  
                               __end_of_TMR5_StopTimer 177B  
                      __end_of_recv_read_registers_res 05F2  
                          send_exception_msg@exception 0042  
                         ??_INTERRUPT_InterruptManager 007C  
                                      ?_TMR5_ReadTimer 0020  
                                     ??_is_a_new_value 002B  
                                             _BAUD1CON 011F  
               __end_of_recv_write_single_register_res 0A7B  
                       _recv_write_single_register_res 0A58  
           __end_of_EUSART1_DefaultOverrunErrorHandler 1772  
                 ??_EUSART1_DefaultOverrunErrorHandler 0076  
                  ?_EUSART1_DefaultOverrunErrorHandler 0076  
                   _EUSART1_DefaultOverrunErrorHandler 176F  
                                 _EUSART1_ErrorHandler 0168  
                                         ??_getADCData 0025  
                                     nmbs_crc_calc@crc 002F  
                              _EUSART1_SetErrorHandler 1792  
                                 ??i1_UART_ClearBuffer 0076  
                             __end_of_UART_ClearBuffer 1787  
                                   _EUSART1_is_tx_done 07FC  
                             _handle_write_single_coil 065E  
                                             _T5CKIPPS 1E96  
                               EUSART1_RxDataHandler@t 007A  
                                  msg_state_reset@nmbs 0021  
                                            get_1@nmbs 0023  
                                            get_2@nmbs 002B  
                                    ??_TMR0_Initialize 0020  
                      __end_of_default_values_register 0DA7  
                                   put_msg_header@nmbs 0028  
              EUSART1_SetErrorHandler@interruptHandler 0020  
                                             _LATCbits 001A  
                                  __end_of_read_serial 0D65  
                                     handle_req_fc@err 0067  
                                  ?_EUSART1_is_tx_done 0076  
                                            clear_ram0 0803  
                                             _PIE3bits 0719  
                                             _PIE4bits 071A  
                                     _uart_expire_time 0075  
                                             _PIR0bits 070C  
                                        ?_write_serial 0021  
                                             _PIR3bits 070F  
                                             _PIR4bits 0710  
                                             _RX1DTPPS 1ECB  
                               ?_EUSART1_RxDataHandler 0076  
                      ??_handle_read_holding_registers 0064  
                                   __end_of_getADCData 08DC  
                               handle_read_registers@i 00E3  
                                             _TMR1_ISR 08B4  
                               ?_handle_read_registers 005A  
                                      ?_TMR5_StopTimer 0076  
                                  __end_of_nmbs_create 0F07  
                                    ??_TMR1_Initialize 0022  
                                           _ADCON0bits 0111  
                            is_a_new_value@actual_regs 0029  
                                      ??_msg_buf_reset 0020  
                                 ??_EUSART1_is_tx_done 0020  
                            TMR5_ReadTimer@readValHigh 0029  
                                DATAEE_WriteByte@bData 0022  
                                         send_msg@nmbs 0041  
                    recv_res_header@req_transaction_id 0044  
                        recv_write_single_coil_res@err 0056  
                                            m_memset@c 0022  
                                            m_memset@p 0026  
                                            m_memset@s 0020  
                                    ?_DATAEE_WriteByte 0020  
                                check_error_modbus@err 0076  
                                    ?_DATAEE_WriteWord 0024  
                                        _handle_req_fc 0CAA  
                                EUSART1_Read@readValue 0021  
                                   ??_DATAEE_WriteByte 0023  
               handler_read_holding_registers@quantity 0022  
                                   ??_DATAEE_WriteWord 0028  
                                     ?___funcs_on_exit 0076  
                                             __Exit@ec 0020  
                                       ??_write_serial 0029  
   handle_write_single_register@nanomodbus$F2807@value 0058  
                                     ?_msg_state_reset 0076  
                              ??_OSCILLATOR_Initialize 0020  
                                    ??_TMR0_StartTimer 0020  
       handler_read_holding_registers@server_registers 002A  
                                            recv@count 0033  
                             _TMR1_SetInterruptHandler 17B2  
                                _TMR1_InterruptHandler 0162  
                            ??_EUSART1_SetErrorHandler 0022  
                  __end_of_EUSART1_DefaultErrorHandler 176F  
                          _EUSART1_DefaultErrorHandler 176C  
                                           _T0CON0bits 059E  
                                            send@count 0030  
                          __end_of_EUSART1_is_tx_ready 0828  
                                             _getCount 0A16  
                                             __ptext10 0843  
                                             __ptext11 0067  
                                             __ptext20 17C3  
                                             __ptext12 09B7  
                                             __ptext21 0570  
                                             __ptext13 0C70  
                                             __ptext30 0FA2  
                                             __ptext22 044B  
                                             __ptext14 0798  
                                             __ptext31 0BC6  
                                             __ptext23 0F07  
                                             __ptext15 0E2E  
                                             __ptext40 0EBD  
                                             __ptext32 17E0  
                                             __ptext24 0A7B  
                                             __ptext16 0002  
                                             __ptext41 0397  
                                             __ptext33 0F54  
                                             __ptext25 097B  
                                             __ptext17 0800  
                                             __ptext50 1787  
                                             __ptext42 04EC  
                                             __ptext34 0AC7  
                                             __ptext26 0DE9  
                                             __ptext18 081B  
                                             __ptext51 08C8  
                                             __ptext43 08F4  
                                             __ptext35 095E  
                                             __ptext27 0B8F  
                                             __ptext19 07FC  
                                             __ptext60 1783  
                                             __ptext52 08A1  
                                             __ptext44 0A37  
                                             __ptext36 17D6  
                                             __ptext28 0D24  
                                             __ptext61 0927  
                                             __ptext53 17F5  
                                             __ptext45 0A16  
                                             __ptext37 0C37  
                                             __ptext29 087D  
                                             __ptext70 0AF4  
                                             __ptext62 088E  
                                             __ptext54 0731  
                                             __ptext46 1778  
                                             __ptext38 0BFE  
                                             __ptext71 17AA  
                                             __ptext63 0998  
                                             __ptext55 1766  
                                             __ptext47 1775  
                                             __ptext39 0B58  
                                             __ptext80 08B4  
                                             __ptext72 17A2  
                                             __ptext64 17B2  
                                             __ptext56 1765  
                                             __ptext48 09F6  
                                             __ptext81 086E  
                                             __ptext73 179A  
                                             __ptext65 17EA  
                                             __ptext57 0D65  
                                             __ptext49 1772  
                                             __ptext90 1767  
                                             __ptext82 177B  
                                             __ptext74 1792  
                                             __ptext66 17CC  
                                             __ptext58 08DC  
                                             __ptext83 0B25  
                                             __ptext75 090C  
                                             __ptext67 09D6  
                                             __ptext59 1764  
                                             __ptext84 176F  
                                             __ptext76 178C  
                                             __ptext68 17BA  
                                             __ptext85 1763  
                                             __ptext77 0AA0  
                                             __ptext69 177F  
                                             __ptext86 176C  
                                             __ptext78 0835  
                                             __ptext87 0CE4  
                                             __ptext88 085F  
                                             __ptext89 1769  
                                          _read_serial 0D24  
                                    ??_TMR1_StartTimer 0076  
                          DATAEE_WriteByte@GIEBitValue 0023  
                                             _m_memset 08DC  
                                       ?_handle_req_fc 0076  
                           setBaudRateEUSART1@baudRate 0020  
                                            put_1@data 0020  
                                            put_2@data 0020  
                recv_write_single_register_res@address 004C  
                                    ??_DATAEE_ReadByte 0022  
                                            put_1@nmbs 0023  
                                            put_2@nmbs 0024  
                                    ??_DATAEE_ReadWord 0024  
                                             _send_msg 0C70  
                                           _RC1STAbits 011D  
       EUSART1_SetOverrunErrorHandler@interruptHandler 0020  
                                          _nmbs_create 0EBD  
                                          get_1@result 0022  
                                          get_2@result 0029  
                           ??_ADCC_GetSingleConversion 0022  
                                             int$flags 007E  
                                      nmbs_create@nmbs 002B  
                         ??_recv_write_single_coil_res 0050  
                          write_serial@byte_timeout_ms 0024  
                   __end_of_INTERRUPT_InterruptManager 001B  
                           _INTERRUPT_InterruptManager 0004  
                                    ??_TMR1_WriteTimer 0078  
                                     read_serial@count 0023  
                        _handle_write_single_coil$1975 002B  
                                             main@nmbs 01A0  
                          _EUSART1_FramingErrorHandler 016C  
                                  _EUSART1_Receive_ISR 0B25  
                __end_of_handle_read_holding_registers 0851  
                        _handle_read_holding_registers 0843  
                    handle_read_holding_registers@nmbs 0064  
                                    ??_TMR5_Initialize 0020  
                             ?_TMR0_HasOverflowOccured 0076  
                           __end_of_send_exception_msg 09D6  
                                           _INTCONbits 000B  
                                          _NVMCON1bits 081E  
                                DATAEE_WriteWord@bData 0026  
                                             exit@code 002A  
                                           _FVRCONbits 090C  
                                             recv@nmbs 0039  
                                    ??_recv_msg_header 003B  
                                             intlevel1 0000  
                          handle_write_single_coil@arg 0024  
                                             send@nmbs 003B  
                                    ??_recv_req_header 003F  
                                    ??_recv_msg_footer 003A  
                    handler_read_holding_registers@arg 0026  
                                 ?_EUSART1_Receive_ISR 0076  
                       ??_handler_read_input_registers 0027  
                                    ??_recv_res_header 0042  
                              ?_PIN_MANAGER_Initialize 0076  
                           __end_of_nmbs_server_create 0B8F  
               __end_of_EUSART1_SetOverrunErrorHandler 17AA  
                       _EUSART1_SetOverrunErrorHandler 17A2  
                      write_serial@number_of_byte_send 002A  
                          nmbs_server_create@callbacks 002E  
                                     ??_TMR1_StopTimer 0076  
 handle_write_single_register@nanomodbus$F2807@address 0056  
                                     ??_TMR5_ReadTimer 0022  
       EUSART1_SetFramingErrorHandler@interruptHandler 0020  
                                    ??_TxDeviceDisable 0020  
                                   _eusart1RxLastError 014E  
                                        __pstringtext1 1800  
                                        __pstringtext2 1801  
                                        __pstringtext3 1802  
                                       _FVR_Initialize 177F  
                             recv_read_registers_res@i 0055  
                           ??_handle_write_single_coil 0025  
                                      _TMR0_Initialize 17EA  
                             handle_read_registers@err 00E7  
                                 __end_of_write_serial 0E74  
                  handler_read_input_registers@address 0020  
                             ?_recv_read_registers_res 004C  
                                       read_serial@arg 0029  
                                       read_serial@buf 0022  
                                           _TX1STAbits 011E  
                                    ?_UART_ClearBuffer 0076  
                                      ??_handle_req_fc 0065  
                                    ??_TMR5_StartTimer 0020  
                                ??_EUSART1_Receive_ISR 007C  
                       __end_of_PIN_MANAGER_Initialize 09F6  
                                    ??_ADCC_Initialize 0020  
                                   ??_UART_ClearBuffer 0020  
                 handler_read_input_registers@quantity 0022  
                     ??_recv_write_single_register_res 0050  
                      ?_recv_write_single_register_res 004C  
                       __end_of_NMBS_BROADCAST_ADDRESS 1803  
                              ??_EUSART1_RxDataHandler 0078  
                                   put_res_header@nmbs 002B  
                  handler_read_input_registers@unit_id 0025  
                                      _TMR1_Initialize 0998  
                                     ??_TMR5_StopTimer 0020  
                              ??_handle_read_registers 005C  
                                __end_of_nmbs_crc_calc 1000  
