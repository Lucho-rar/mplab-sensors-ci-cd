

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Mar 27 09:52:00 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og9 
     1                           	processor	16F18425
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK4,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK5,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	idataBANK6,global,class=CODE,space=0,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     8                           	psect	stringtext2,global,class=STRCODE,space=0,delta=2,noexec
     9                           	psect	stringtext3,global,class=STRCODE,space=0,delta=2,noexec
    10                           	psect	stringtext4,global,class=STRCODE,space=0,delta=2,noexec
    11                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    12                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	nvBANK4,global,class=BANK4,space=1,delta=1,noexec
    14                           	psect	stringtext5,global,class=STRCODE,space=0,delta=2,noexec
    15                           	psect	stringtext6,global,class=STRCODE,space=0,delta=2,noexec
    16                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    20                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,noexec
    21                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,noexec
    22                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1,noexec
    23                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1,noexec
    24                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1,noexec
    25                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1,noexec
    26                           	psect	bssBANK8,global,class=BANK8,space=1,delta=1,noexec
    27                           	psect	inittext,global,class=CODE,space=0,delta=2
    28                           	psect	clrtext,global,class=CODE,space=0,delta=2
    29                           	psect	cstackBANK9,global,class=BANK9,space=1,delta=1,noexec
    30                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    31                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    32                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    36                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    37                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=3
    38                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    39                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    40                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=3
    41                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=3
    42                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    49                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    50                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    54                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    60                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    61                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    62                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    63                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    64                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    65                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    66                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2
    67                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2
    68                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    69                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2
    70                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    71                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    72                           	psect	text36,local,class=CODE,space=0,merge=1,delta=2
    73                           	psect	text37,local,class=CODE,space=0,merge=1,delta=2
    74                           	psect	text38,local,class=CODE,space=0,merge=1,delta=2
    75                           	psect	text39,local,class=CODE,space=0,merge=1,delta=2
    76                           	psect	text40,local,class=CODE,space=0,merge=1,delta=2
    77                           	psect	text41,local,class=CODE,space=0,merge=1,delta=2
    78                           	psect	text42,local,class=CODE,space=0,merge=1,delta=2
    79                           	psect	text43,local,class=CODE,space=0,merge=1,delta=2
    80                           	psect	text44,local,class=CODE,space=0,merge=1,delta=2
    81                           	psect	text45,local,class=CODE,space=0,merge=1,delta=2
    82                           	psect	text46,local,class=CODE,space=0,merge=1,delta=2
    83                           	psect	text47,local,class=CODE,space=0,merge=1,delta=2
    84                           	psect	text48,local,class=CODE,space=0,merge=1,delta=2
    85                           	psect	text49,local,class=CODE,space=0,merge=1,delta=2
    86                           	psect	text50,local,class=CODE,space=0,merge=1,delta=2
    87                           	psect	text51,local,class=CODE,space=0,merge=1,delta=2
    88                           	psect	text52,local,class=CODE,space=0,merge=1,delta=2
    89                           	psect	text53,local,class=CODE,space=0,merge=1,delta=2
    90                           	psect	text54,local,class=CODE,space=0,merge=1,delta=2
    91                           	psect	text55,local,class=CODE,space=0,merge=1,delta=2
    92                           	psect	text56,local,class=CODE,space=0,merge=1,delta=2
    93                           	psect	text57,local,class=CODE,space=0,merge=1,delta=2
    94                           	psect	text58,local,class=CODE,space=0,merge=1,delta=2
    95                           	psect	text59,local,class=CODE,space=0,merge=1,delta=2
    96                           	psect	text60,local,class=CODE,space=0,merge=1,delta=2
    97                           	psect	text61,local,class=CODE,space=0,merge=1,delta=2
    98                           	psect	text62,local,class=CODE,space=0,merge=1,delta=2
    99                           	psect	text63,local,class=CODE,space=0,merge=1,delta=2
   100                           	psect	text64,local,class=CODE,space=0,merge=1,delta=2
   101                           	psect	text65,local,class=CODE,space=0,merge=1,delta=2
   102                           	psect	text66,local,class=CODE,space=0,merge=1,delta=2
   103                           	psect	text67,local,class=CODE,space=0,merge=1,delta=2
   104                           	psect	text68,local,class=CODE,space=0,merge=1,delta=2
   105                           	psect	text69,local,class=CODE,space=0,merge=1,delta=2
   106                           	psect	text70,local,class=CODE,space=0,merge=1,delta=2
   107                           	psect	text71,local,class=CODE,space=0,merge=1,delta=2
   108                           	psect	text72,local,class=CODE,space=0,merge=1,delta=2
   109                           	psect	text73,local,class=CODE,space=0,merge=1,delta=2
   110                           	psect	text74,local,class=CODE,space=0,merge=1,delta=2
   111                           	psect	text75,local,class=CODE,space=0,merge=1,delta=2
   112                           	psect	text76,local,class=CODE,space=0,merge=1,delta=2
   113                           	psect	text77,local,class=CODE,space=0,merge=1,delta=2
   114                           	psect	text78,local,class=CODE,space=0,merge=1,delta=2
   115                           	psect	text79,local,class=CODE,space=0,merge=1,delta=2
   116                           	psect	text80,local,class=CODE,space=0,merge=1,delta=2
   117                           	psect	text81,local,class=CODE,space=0,merge=1,delta=2
   118                           	psect	text82,local,class=CODE,space=0,merge=1,delta=2
   119                           	psect	text83,local,class=CODE,space=0,merge=1,inline,delta=2
   120                           	psect	text84,local,class=CODE,space=0,merge=1,delta=2
   121                           	psect	text85,local,class=CODE,space=0,merge=1,delta=2
   122                           	psect	text86,local,class=CODE,space=0,merge=1,delta=2
   123                           	psect	text87,local,class=CODE,space=0,merge=1,inline,delta=2
   124                           	psect	text88,local,class=CODE,space=0,merge=1,inline,delta=2
   125                           	psect	text89,local,class=CODE,space=0,merge=1,delta=2
   126                           	psect	text90,local,class=CODE,space=0,merge=1,delta=2
   127                           	psect	text91,local,class=CODE,space=0,merge=1,delta=2
   128                           	psect	text92,local,class=CODE,space=0,merge=1,delta=2
   129                           	psect	text93,local,class=CODE,space=0,merge=1,delta=2
   130                           	psect	text94,local,class=CODE,space=0,merge=1,delta=2
   131                           	psect	text95,local,class=CODE,space=0,merge=1,delta=2
   132                           	psect	text96,local,class=CODE,space=0,merge=1,delta=2
   133                           	psect	text97,local,class=CODE,space=0,merge=1,delta=2
   134                           	psect	text98,local,class=CODE,space=0,merge=1,delta=2
   135                           	psect	text99,local,class=CODE,space=0,merge=1,delta=2
   136                           	psect	text100,local,class=CODE,space=0,merge=1,delta=2
   137                           	psect	text101,local,class=CODE,space=0,merge=1,delta=2
   138                           	psect	text102,local,class=CODE,space=0,merge=1,delta=2
   139                           	psect	text103,local,class=CODE,space=0,merge=1,delta=2
   140                           	psect	text104,local,class=CODE,space=0,merge=1,delta=2
   141                           	psect	text105,local,class=CODE,space=0,merge=1,inline,delta=2
   142                           	psect	text106,local,class=CODE,space=0,merge=1,inline,delta=2
   143                           	psect	text107,local,class=CODE,space=0,merge=1,inline,delta=2
   144                           	psect	text108,local,class=CODE,space=0,merge=1,inline,delta=2
   145                           	psect	text109,local,class=CODE,space=0,merge=1,inline,delta=2
   146                           	psect	text110,local,class=CODE,space=0,merge=1,inline,delta=2
   147                           	psect	text111,local,class=CODE,space=0,merge=1,inline,delta=2
   148                           	psect	text112,local,class=CODE,space=0,merge=1,delta=2
   149                           	psect	text113,local,class=CODE,space=0,merge=1,delta=2
   150                           	psect	text114,local,class=CODE,space=0,merge=1,delta=2
   151                           	psect	text115,local,class=CODE,space=0,merge=1,delta=2
   152                           	psect	text116,local,class=CODE,space=0,merge=1,delta=2
   153                           	psect	text117,local,class=CODE,space=0,merge=1,delta=2
   154                           	psect	text118,local,class=CODE,space=0,merge=1,delta=2
   155                           	psect	text119,local,class=CODE,space=0,merge=1,delta=2
   156                           	psect	text120,local,class=CODE,space=0,merge=1,delta=2
   157                           	psect	text121,local,class=CODE,space=0,merge=1,delta=2
   158                           	psect	text122,local,class=CODE,space=0,merge=1,inline,delta=2
   159                           	psect	text123,local,class=CODE,space=0,merge=1,inline,delta=2
   160                           	psect	text124,local,class=CODE,space=0,merge=1,inline,delta=2
   161                           	psect	text125,local,class=CODE,space=0,merge=1,delta=2
   162                           	psect	text126,local,class=CODE,space=0,merge=1,inline,delta=2
   163                           	psect	text127,local,class=CODE,space=0,merge=1,inline,delta=2
   164                           	psect	text128,local,class=CODE,space=0,merge=1,inline,delta=2
   165                           	psect	text129,local,class=CODE,space=0,merge=1,delta=2
   166                           	psect	text130,local,class=CODE,space=0,merge=1,delta=2
   167                           	psect	text131,local,class=CODE,space=0,merge=1,delta=2
   168                           	psect	intentry,global,class=CODE,space=0,delta=2
   169                           	psect	text133,local,class=CODE,space=0,merge=1,delta=2
   170                           	psect	text134,local,class=CODE,space=0,merge=1,delta=2
   171                           	psect	text135,local,class=CODE,space=0,merge=1,delta=2
   172                           	psect	text136,local,class=CODE,space=0,merge=1,delta=2
   173                           	psect	text137,local,class=CODE,space=0,merge=1,delta=2
   174                           	psect	text138,local,class=CODE,space=0,merge=1,delta=2
   175                           	psect	text139,local,class=CODE,space=0,merge=1,delta=2
   176                           	psect	text140,local,class=CODE,space=0,merge=1,delta=2
   177                           	psect	text141,local,class=CODE,space=0,merge=1,delta=2
   178                           	psect	text142,local,class=CODE,space=0,merge=1,delta=2
   179                           	psect	text143,local,class=CODE,space=0,merge=1,delta=2
   180                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   181                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   182                           	dabs	1,0x7E,2
   183     0000                     
   184                           ; Generated 19/07/2022 GMT
   185                           ; 
   186                           ; Copyright © 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
   187                           ; All rights reserved.
   188                           ; 
   189                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   190                           ; 
   191                           ; Redistribution and use in source and binary forms, with or without modification, are
   192                           ; permitted provided that the following conditions are met:
   193                           ; 
   194                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   195                           ;        conditions and the following disclaimer.
   196                           ; 
   197                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   198                           ;        of conditions and the following disclaimer in the documentation and/or other
   199                           ;        materials provided with the distribution. Publication is not required when
   200                           ;        this file is used in an embedded application.
   201                           ; 
   202                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   203                           ;        software without specific prior written permission.
   204                           ; 
   205                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   206                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   207                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   208                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   209                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   210                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   211                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   212                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   213                           ; 
   214                           ; 
   215                           ; Code-generator required, PIC16F18425 Definitions
   216                           ; 
   217                           ; SFR Addresses
   218     0008                     bsr             equ	8
   219     0005                     fsr0h           equ	5
   220     0004                     fsr0l           equ	4
   221     0007                     fsr1h           equ	7
   222     0006                     fsr1l           equ	6
   223     0000                     indf            equ	0
   224     0000                     indf0           equ	0
   225     0001                     indf1           equ	1
   226     000B                     intcon          equ	11
   227     0002                     pc              equ	2
   228     0002                     pcl             equ	2
   229     000A                     pclath          equ	10
   230     0003                     status          equ	3
   231     0009                     wreg            equ	9
   232     0000                     INDF0           equ	0	;# 
   233     0001                     INDF1           equ	1	;# 
   234     0002                     PCL             equ	2	;# 
   235     0003                     STATUS          equ	3	;# 
   236     0004                     FSR0L           equ	4	;# 
   237     0005                     FSR0H           equ	5	;# 
   238     0006                     FSR1L           equ	6	;# 
   239     0007                     FSR1H           equ	7	;# 
   240     0008                     BSR             equ	8	;# 
   241     0009                     WREG            equ	9	;# 
   242     000A                     PCLATH          equ	10	;# 
   243     000B                     INTCON          equ	11	;# 
   244     000C                     PORTA           equ	12	;# 
   245     000E                     PORTC           equ	14	;# 
   246     0012                     TRISA           equ	18	;# 
   247     0014                     TRISC           equ	20	;# 
   248     0018                     LATA            equ	24	;# 
   249     001A                     LATC            equ	26	;# 
   250     008C                     ADLTH           equ	140	;# 
   251     008C                     ADLTHL          equ	140	;# 
   252     008D                     ADLTHH          equ	141	;# 
   253     008E                     ADUTH           equ	142	;# 
   254     008E                     ADUTHL          equ	142	;# 
   255     008F                     ADUTHH          equ	143	;# 
   256     0090                     ADERR           equ	144	;# 
   257     0090                     ADERRL          equ	144	;# 
   258     0091                     ADERRH          equ	145	;# 
   259     0092                     ADSTPT          equ	146	;# 
   260     0092                     ADSTPTL         equ	146	;# 
   261     0093                     ADSTPTH         equ	147	;# 
   262     0094                     ADFLTR          equ	148	;# 
   263     0094                     ADFLTRL         equ	148	;# 
   264     0095                     ADFLTRH         equ	149	;# 
   265     0096                     ADACC           equ	150	;# 
   266     0096                     ADACCL          equ	150	;# 
   267     0097                     ADACCH          equ	151	;# 
   268     0098                     ADACCU          equ	152	;# 
   269     0099                     ADCNT           equ	153	;# 
   270     009A                     ADRPT           equ	154	;# 
   271     009B                     ADPREV          equ	155	;# 
   272     009B                     ADPREVL         equ	155	;# 
   273     009C                     ADPREVH         equ	156	;# 
   274     009D                     ADRES           equ	157	;# 
   275     009D                     ADRESL          equ	157	;# 
   276     009E                     ADRESH          equ	158	;# 
   277     009F                     ADPCH           equ	159	;# 
   278     010C                     ADACQ           equ	268	;# 
   279     010C                     ADACQL          equ	268	;# 
   280     010D                     ADACQH          equ	269	;# 
   281     010E                     ADCAP           equ	270	;# 
   282     010F                     ADPRE           equ	271	;# 
   283     010F                     ADPREL          equ	271	;# 
   284     0110                     ADPREH          equ	272	;# 
   285     0111                     ADCON0          equ	273	;# 
   286     0112                     ADCON1          equ	274	;# 
   287     0113                     ADCON2          equ	275	;# 
   288     0114                     ADCON3          equ	276	;# 
   289     0115                     ADSTAT          equ	277	;# 
   290     0116                     ADREF           equ	278	;# 
   291     0117                     ADACT           equ	279	;# 
   292     0118                     ADCLK           equ	280	;# 
   293     0119                     RC1REG          equ	281	;# 
   294     0119                     RCREG           equ	281	;# 
   295     0119                     RCREG1          equ	281	;# 
   296     011A                     TX1REG          equ	282	;# 
   297     011A                     TXREG1          equ	282	;# 
   298     011A                     TXREG           equ	282	;# 
   299     011B                     SP1BRG          equ	283	;# 
   300     011B                     SP1BRGL         equ	283	;# 
   301     011B                     SPBRG           equ	283	;# 
   302     011B                     SPBRG1          equ	283	;# 
   303     011B                     SPBRGL          equ	283	;# 
   304     011C                     SP1BRGH         equ	284	;# 
   305     011C                     SPBRGH          equ	284	;# 
   306     011C                     SPBRGH1         equ	284	;# 
   307     011D                     RC1STA          equ	285	;# 
   308     011D                     RCSTA1          equ	285	;# 
   309     011D                     RCSTA           equ	285	;# 
   310     011E                     TX1STA          equ	286	;# 
   311     011E                     TXSTA1          equ	286	;# 
   312     011E                     TXSTA           equ	286	;# 
   313     011F                     BAUD1CON        equ	287	;# 
   314     011F                     BAUDCON1        equ	287	;# 
   315     011F                     BAUDCTL1        equ	287	;# 
   316     011F                     BAUDCON         equ	287	;# 
   317     011F                     BAUDCTL         equ	287	;# 
   318     018C                     SSP1BUF         equ	396	;# 
   319     018D                     SSP1ADD         equ	397	;# 
   320     018E                     SSP1MSK         equ	398	;# 
   321     018F                     SSP1STAT        equ	399	;# 
   322     0190                     SSP1CON1        equ	400	;# 
   323     0191                     SSP1CON2        equ	401	;# 
   324     0192                     SSP1CON3        equ	402	;# 
   325     0196                     SSP2BUF         equ	406	;# 
   326     0197                     SSP2ADD         equ	407	;# 
   327     0198                     SSP2MSK         equ	408	;# 
   328     0199                     SSP2STAT        equ	409	;# 
   329     019A                     SSP2CON1        equ	410	;# 
   330     019B                     SSP2CON2        equ	411	;# 
   331     019C                     SSP2CON3        equ	412	;# 
   332     020C                     TMR1L           equ	524	;# 
   333     020D                     TMR1H           equ	525	;# 
   334     020E                     T1CON           equ	526	;# 
   335     020E                     TMR1CON         equ	526	;# 
   336     020F                     T1GCON          equ	527	;# 
   337     020F                     TMR1GCON        equ	527	;# 
   338     0210                     T1GATE          equ	528	;# 
   339     0210                     TMR1GATE        equ	528	;# 
   340     0211                     T1CLK           equ	529	;# 
   341     0211                     TMR1CLK         equ	529	;# 
   342     0212                     TMR3L           equ	530	;# 
   343     0213                     TMR3H           equ	531	;# 
   344     0214                     T3CON           equ	532	;# 
   345     0214                     TMR3CON         equ	532	;# 
   346     0215                     T3GCON          equ	533	;# 
   347     0215                     TMR3GCON        equ	533	;# 
   348     0216                     T3GATE          equ	534	;# 
   349     0216                     TMR3GATE        equ	534	;# 
   350     0217                     T3CLK           equ	535	;# 
   351     0217                     TMR3CLK         equ	535	;# 
   352     0218                     TMR5L           equ	536	;# 
   353     0219                     TMR5H           equ	537	;# 
   354     021A                     T5CON           equ	538	;# 
   355     021A                     TMR5CON         equ	538	;# 
   356     021B                     T5GCON          equ	539	;# 
   357     021B                     TMR5GCON        equ	539	;# 
   358     021C                     T5GATE          equ	540	;# 
   359     021C                     TMR5GATE        equ	540	;# 
   360     021D                     T5CLK           equ	541	;# 
   361     021D                     TMR5CLK         equ	541	;# 
   362     021E                     CCPTMRS0        equ	542	;# 
   363     021F                     CCPTMRS1        equ	543	;# 
   364     028C                     T2TMR           equ	652	;# 
   365     028C                     TMR2            equ	652	;# 
   366     028D                     T2PR            equ	653	;# 
   367     028D                     PR2             equ	653	;# 
   368     028E                     T2CON           equ	654	;# 
   369     028F                     T2HLT           equ	655	;# 
   370     0290                     T2CLKCON        equ	656	;# 
   371     0291                     T2RST           equ	657	;# 
   372     0292                     T4TMR           equ	658	;# 
   373     0292                     TMR4            equ	658	;# 
   374     0293                     T4PR            equ	659	;# 
   375     0293                     PR4             equ	659	;# 
   376     0294                     T4CON           equ	660	;# 
   377     0295                     T4HLT           equ	661	;# 
   378     0296                     T4CLKCON        equ	662	;# 
   379     0297                     T4RST           equ	663	;# 
   380     0298                     T6TMR           equ	664	;# 
   381     0298                     TMR6            equ	664	;# 
   382     0299                     T6PR            equ	665	;# 
   383     0299                     PR6             equ	665	;# 
   384     029A                     T6CON           equ	666	;# 
   385     029B                     T6HLT           equ	667	;# 
   386     029C                     T6CLKCON        equ	668	;# 
   387     029D                     T6RST           equ	669	;# 
   388     029F                     ADCPCON0        equ	671	;# 
   389     030C                     CCPR1           equ	780	;# 
   390     030C                     CCPR1L          equ	780	;# 
   391     030D                     CCPR1H          equ	781	;# 
   392     030E                     CCP1CON         equ	782	;# 
   393     030F                     CCP1CAP         equ	783	;# 
   394     0310                     CCPR2           equ	784	;# 
   395     0310                     CCPR2L          equ	784	;# 
   396     0311                     CCPR2H          equ	785	;# 
   397     0312                     CCP2CON         equ	786	;# 
   398     0313                     CCP2CAP         equ	787	;# 
   399     0314                     CCPR3           equ	788	;# 
   400     0314                     CCPR3L          equ	788	;# 
   401     0315                     CCPR3H          equ	789	;# 
   402     0316                     CCP3CON         equ	790	;# 
   403     0317                     CCP3CAP         equ	791	;# 
   404     0318                     CCPR4           equ	792	;# 
   405     0318                     CCPR4L          equ	792	;# 
   406     0319                     CCPR4H          equ	793	;# 
   407     031A                     CCP4CON         equ	794	;# 
   408     031B                     CCP4CAP         equ	795	;# 
   409     038C                     PWM6DC          equ	908	;# 
   410     038C                     PWM6DCL         equ	908	;# 
   411     038D                     PWM6DCH         equ	909	;# 
   412     038E                     PWM6CON         equ	910	;# 
   413     0390                     PWM7DC          equ	912	;# 
   414     0390                     PWM7DCL         equ	912	;# 
   415     0391                     PWM7DCH         equ	913	;# 
   416     0392                     PWM7CON         equ	914	;# 
   417     048C                     SMT1TMR         equ	1164	;# 
   418     048C                     SMT1TMRL        equ	1164	;# 
   419     048D                     SMT1TMRH        equ	1165	;# 
   420     048E                     SMT1TMRU        equ	1166	;# 
   421     048F                     SMT1CPR         equ	1167	;# 
   422     048F                     SMT1CPRL        equ	1167	;# 
   423     0490                     SMT1CPRH        equ	1168	;# 
   424     0491                     SMT1CPRU        equ	1169	;# 
   425     0492                     SMT1CPW         equ	1170	;# 
   426     0492                     SMT1CPWL        equ	1170	;# 
   427     0493                     SMT1CPWH        equ	1171	;# 
   428     0494                     SMT1CPWU        equ	1172	;# 
   429     0495                     SMT1PR          equ	1173	;# 
   430     0495                     SMT1PRL         equ	1173	;# 
   431     0496                     SMT1PRH         equ	1174	;# 
   432     0497                     SMT1PRU         equ	1175	;# 
   433     0498                     SMT1CON0        equ	1176	;# 
   434     0499                     SMT1CON1        equ	1177	;# 
   435     049A                     SMT1STAT        equ	1178	;# 
   436     049B                     SMT1CLK         equ	1179	;# 
   437     049C                     SMT1SIG         equ	1180	;# 
   438     049D                     SMT1WIN         equ	1181	;# 
   439     058C                     NCO1ACC         equ	1420	;# 
   440     058C                     NCO1ACCL        equ	1420	;# 
   441     058D                     NCO1ACCH        equ	1421	;# 
   442     058E                     NCO1ACCU        equ	1422	;# 
   443     058F                     NCO1INC         equ	1423	;# 
   444     058F                     NCO1INCL        equ	1423	;# 
   445     0590                     NCO1INCH        equ	1424	;# 
   446     0591                     NCO1INCU        equ	1425	;# 
   447     0592                     NCO1CON         equ	1426	;# 
   448     0593                     NCO1CLK         equ	1427	;# 
   449     059C                     TMR0L           equ	1436	;# 
   450     059C                     TMR0            equ	1436	;# 
   451     059D                     TMR0H           equ	1437	;# 
   452     059D                     PR0             equ	1437	;# 
   453     059E                     T0CON0          equ	1438	;# 
   454     059F                     T0CON1          equ	1439	;# 
   455     060C                     CWG1CLK         equ	1548	;# 
   456     060C                     CWG1CLKCON      equ	1548	;# 
   457     060D                     CWG1ISM         equ	1549	;# 
   458     060D                     CWG1DAT         equ	1549	;# 
   459     060E                     CWG1DBR         equ	1550	;# 
   460     060F                     CWG1DBF         equ	1551	;# 
   461     0610                     CWG1CON0        equ	1552	;# 
   462     0611                     CWG1CON1        equ	1553	;# 
   463     0612                     CWG1AS0         equ	1554	;# 
   464     0613                     CWG1AS1         equ	1555	;# 
   465     0614                     CWG1STR         equ	1556	;# 
   466     0616                     CWG2CLK         equ	1558	;# 
   467     0616                     CWG2CLKCON      equ	1558	;# 
   468     0617                     CWG2ISM         equ	1559	;# 
   469     0617                     CWG2DAT         equ	1559	;# 
   470     0618                     CWG2DBR         equ	1560	;# 
   471     0619                     CWG2DBF         equ	1561	;# 
   472     061A                     CWG2CON0        equ	1562	;# 
   473     061B                     CWG2CON1        equ	1563	;# 
   474     061C                     CWG2AS0         equ	1564	;# 
   475     061D                     CWG2AS1         equ	1565	;# 
   476     061E                     CWG2STR         equ	1566	;# 
   477     070C                     PIR0            equ	1804	;# 
   478     070D                     PIR1            equ	1805	;# 
   479     070E                     PIR2            equ	1806	;# 
   480     070F                     PIR3            equ	1807	;# 
   481     0710                     PIR4            equ	1808	;# 
   482     0711                     PIR5            equ	1809	;# 
   483     0712                     PIR6            equ	1810	;# 
   484     0713                     PIR7            equ	1811	;# 
   485     0714                     PIR8            equ	1812	;# 
   486     0716                     PIE0            equ	1814	;# 
   487     0717                     PIE1            equ	1815	;# 
   488     0718                     PIE2            equ	1816	;# 
   489     0719                     PIE3            equ	1817	;# 
   490     071A                     PIE4            equ	1818	;# 
   491     071B                     PIE5            equ	1819	;# 
   492     071C                     PIE6            equ	1820	;# 
   493     071D                     PIE7            equ	1821	;# 
   494     071E                     PIE8            equ	1822	;# 
   495     0796                     PMD0            equ	1942	;# 
   496     0797                     PMD1            equ	1943	;# 
   497     0798                     PMD2            equ	1944	;# 
   498     0799                     PMD3            equ	1945	;# 
   499     079A                     PMD4            equ	1946	;# 
   500     079B                     PMD5            equ	1947	;# 
   501     079C                     PMD6            equ	1948	;# 
   502     079D                     PMD7            equ	1949	;# 
   503     080C                     WDTCON0         equ	2060	;# 
   504     080D                     WDTCON1         equ	2061	;# 
   505     080E                     WDTPSL          equ	2062	;# 
   506     080F                     WDTPSH          equ	2063	;# 
   507     0810                     WDTTMR          equ	2064	;# 
   508     0811                     BORCON          equ	2065	;# 
   509     0812                     VREGCON         equ	2066	;# 
   510     0813                     PCON0           equ	2067	;# 
   511     0814                     PCON1           equ	2068	;# 
   512     081A                     NVMADR          equ	2074	;# 
   513     081A                     NVMADRL         equ	2074	;# 
   514     081B                     NVMADRH         equ	2075	;# 
   515     081C                     NVMDAT          equ	2076	;# 
   516     081C                     NVMDATL         equ	2076	;# 
   517     081D                     NVMDATH         equ	2077	;# 
   518     081E                     NVMCON1         equ	2078	;# 
   519     081F                     NVMCON2         equ	2079	;# 
   520     088C                     CPUDOZE         equ	2188	;# 
   521     088D                     OSCCON1         equ	2189	;# 
   522     088E                     OSCCON2         equ	2190	;# 
   523     088F                     OSCCON3         equ	2191	;# 
   524     0890                     OSCSTAT         equ	2192	;# 
   525     0891                     OSCEN           equ	2193	;# 
   526     0892                     OSCTUNE         equ	2194	;# 
   527     0893                     OSCFRQ          equ	2195	;# 
   528     0895                     CLKRCON         equ	2197	;# 
   529     0896                     CLKRCLK         equ	2198	;# 
   530     0897                     MD1CON0         equ	2199	;# 
   531     0898                     MD1CON1         equ	2200	;# 
   532     0899                     MD1SRC          equ	2201	;# 
   533     089A                     MD1CARL         equ	2202	;# 
   534     089B                     MD1CARH         equ	2203	;# 
   535     090C                     FVRCON          equ	2316	;# 
   536     090E                     DAC1CON0        equ	2318	;# 
   537     090F                     DAC1CON1        equ	2319	;# 
   538     091F                     ZCDCON          equ	2335	;# 
   539     098F                     CMOUT           equ	2447	;# 
   540     098F                     CMSTAT          equ	2447	;# 
   541     0990                     CM1CON0         equ	2448	;# 
   542     0991                     CM1CON1         equ	2449	;# 
   543     0992                     CM1NCH          equ	2450	;# 
   544     0993                     CM1PCH          equ	2451	;# 
   545     0994                     CM2CON0         equ	2452	;# 
   546     0995                     CM2CON1         equ	2453	;# 
   547     0996                     CM2NCH          equ	2454	;# 
   548     0997                     CM2PCH          equ	2455	;# 
   549     1E0F                     CLCDATA         equ	7695	;# 
   550     1E10                     CLC1CON         equ	7696	;# 
   551     1E11                     CLC1POL         equ	7697	;# 
   552     1E12                     CLC1SEL0        equ	7698	;# 
   553     1E13                     CLC1SEL1        equ	7699	;# 
   554     1E14                     CLC1SEL2        equ	7700	;# 
   555     1E15                     CLC1SEL3        equ	7701	;# 
   556     1E16                     CLC1GLS0        equ	7702	;# 
   557     1E17                     CLC1GLS1        equ	7703	;# 
   558     1E18                     CLC1GLS2        equ	7704	;# 
   559     1E19                     CLC1GLS3        equ	7705	;# 
   560     1E1A                     CLC2CON         equ	7706	;# 
   561     1E1B                     CLC2POL         equ	7707	;# 
   562     1E1C                     CLC2SEL0        equ	7708	;# 
   563     1E1D                     CLC2SEL1        equ	7709	;# 
   564     1E1E                     CLC2SEL2        equ	7710	;# 
   565     1E1F                     CLC2SEL3        equ	7711	;# 
   566     1E20                     CLC2GLS0        equ	7712	;# 
   567     1E21                     CLC2GLS1        equ	7713	;# 
   568     1E22                     CLC2GLS2        equ	7714	;# 
   569     1E23                     CLC2GLS3        equ	7715	;# 
   570     1E24                     CLC3CON         equ	7716	;# 
   571     1E25                     CLC3POL         equ	7717	;# 
   572     1E26                     CLC3SEL0        equ	7718	;# 
   573     1E27                     CLC3SEL1        equ	7719	;# 
   574     1E28                     CLC3SEL2        equ	7720	;# 
   575     1E29                     CLC3SEL3        equ	7721	;# 
   576     1E2A                     CLC3GLS0        equ	7722	;# 
   577     1E2B                     CLC3GLS1        equ	7723	;# 
   578     1E2C                     CLC3GLS2        equ	7724	;# 
   579     1E2D                     CLC3GLS3        equ	7725	;# 
   580     1E2E                     CLC4CON         equ	7726	;# 
   581     1E2F                     CLC4POL         equ	7727	;# 
   582     1E30                     CLC4SEL0        equ	7728	;# 
   583     1E31                     CLC4SEL1        equ	7729	;# 
   584     1E32                     CLC4SEL2        equ	7730	;# 
   585     1E33                     CLC4SEL3        equ	7731	;# 
   586     1E34                     CLC4GLS0        equ	7732	;# 
   587     1E35                     CLC4GLS1        equ	7733	;# 
   588     1E36                     CLC4GLS2        equ	7734	;# 
   589     1E37                     CLC4GLS3        equ	7735	;# 
   590     1E8F                     PPSLOCK         equ	7823	;# 
   591     1E90                     INTPPS          equ	7824	;# 
   592     1E91                     T0CKIPPS        equ	7825	;# 
   593     1E92                     T1CKIPPS        equ	7826	;# 
   594     1E93                     T1GPPS          equ	7827	;# 
   595     1E94                     T3CKIPPS        equ	7828	;# 
   596     1E95                     T3GPPS          equ	7829	;# 
   597     1E96                     T5CKIPPS        equ	7830	;# 
   598     1E97                     T5GPPS          equ	7831	;# 
   599     1E9C                     T2INPPS         equ	7836	;# 
   600     1E9D                     T4INPPS         equ	7837	;# 
   601     1E9E                     T6INPPS         equ	7838	;# 
   602     1EA1                     CCP1PPS         equ	7841	;# 
   603     1EA2                     CCP2PPS         equ	7842	;# 
   604     1EA3                     CCP3PPS         equ	7843	;# 
   605     1EA4                     CCP4PPS         equ	7844	;# 
   606     1EA9                     SMT1WINPPS      equ	7849	;# 
   607     1EAA                     SMT1SIGPPS      equ	7850	;# 
   608     1EB1                     CWG1PPS         equ	7857	;# 
   609     1EB2                     CWG2PPS         equ	7858	;# 
   610     1EB8                     MDCARLPPS       equ	7864	;# 
   611     1EB9                     MDCARHPPS       equ	7865	;# 
   612     1EBA                     MDSRCPPS        equ	7866	;# 
   613     1EBB                     CLCIN0PPS       equ	7867	;# 
   614     1EBC                     CLCIN1PPS       equ	7868	;# 
   615     1EBD                     CLCIN2PPS       equ	7869	;# 
   616     1EBE                     CLCIN3PPS       equ	7870	;# 
   617     1EC3                     ADACTPPS        equ	7875	;# 
   618     1EC5                     SSP1CLKPPS      equ	7877	;# 
   619     1EC6                     SSP1DATPPS      equ	7878	;# 
   620     1EC7                     SSP1SSPPS       equ	7879	;# 
   621     1EC8                     SSP2CLKPPS      equ	7880	;# 
   622     1EC9                     SSP2DATPPS      equ	7881	;# 
   623     1ECA                     SSP2SSPPS       equ	7882	;# 
   624     1ECB                     RX1DTPPS        equ	7883	;# 
   625     1ECC                     TX1CKPPS        equ	7884	;# 
   626     1F10                     RA0PPS          equ	7952	;# 
   627     1F11                     RA1PPS          equ	7953	;# 
   628     1F12                     RA2PPS          equ	7954	;# 
   629     1F14                     RA4PPS          equ	7956	;# 
   630     1F15                     RA5PPS          equ	7957	;# 
   631     1F20                     RC0PPS          equ	7968	;# 
   632     1F21                     RC1PPS          equ	7969	;# 
   633     1F22                     RC2PPS          equ	7970	;# 
   634     1F23                     RC3PPS          equ	7971	;# 
   635     1F24                     RC4PPS          equ	7972	;# 
   636     1F25                     RC5PPS          equ	7973	;# 
   637     1F38                     ANSELA          equ	7992	;# 
   638     1F39                     WPUA            equ	7993	;# 
   639     1F3A                     ODCONA          equ	7994	;# 
   640     1F3B                     SLRCONA         equ	7995	;# 
   641     1F3C                     INLVLA          equ	7996	;# 
   642     1F3D                     IOCAP           equ	7997	;# 
   643     1F3E                     IOCAN           equ	7998	;# 
   644     1F3F                     IOCAF           equ	7999	;# 
   645     1F4E                     ANSELC          equ	8014	;# 
   646     1F4F                     WPUC            equ	8015	;# 
   647     1F50                     ODCONC          equ	8016	;# 
   648     1F51                     SLRCONC         equ	8017	;# 
   649     1F52                     INLVLC          equ	8018	;# 
   650     1F53                     IOCCP           equ	8019	;# 
   651     1F54                     IOCCN           equ	8020	;# 
   652     1F55                     IOCCF           equ	8021	;# 
   653     1FE4                     STATUS_SHAD     equ	8164	;# 
   654     1FE5                     WREG_SHAD       equ	8165	;# 
   655     1FE6                     BSR_SHAD        equ	8166	;# 
   656     1FE7                     PCLATH_SHAD     equ	8167	;# 
   657     1FE8                     FSR0_SHAD       equ	8168	;# 
   658     1FE8                     FSR0L_SHAD      equ	8168	;# 
   659     1FE9                     FSR0H_SHAD      equ	8169	;# 
   660     1FEA                     FSR1L_SHAD      equ	8170	;# 
   661     1FEB                     FSR1H_SHAD      equ	8171	;# 
   662     1FED                     STKPTR          equ	8173	;# 
   663     1FEE                     TOSL            equ	8174	;# 
   664     1FEF                     TOSH            equ	8175	;# 
   665     0000                     INDF0           equ	0	;# 
   666     0001                     INDF1           equ	1	;# 
   667     0002                     PCL             equ	2	;# 
   668     0003                     STATUS          equ	3	;# 
   669     0004                     FSR0L           equ	4	;# 
   670     0005                     FSR0H           equ	5	;# 
   671     0006                     FSR1L           equ	6	;# 
   672     0007                     FSR1H           equ	7	;# 
   673     0008                     BSR             equ	8	;# 
   674     0009                     WREG            equ	9	;# 
   675     000A                     PCLATH          equ	10	;# 
   676     000B                     INTCON          equ	11	;# 
   677     000C                     PORTA           equ	12	;# 
   678     000E                     PORTC           equ	14	;# 
   679     0012                     TRISA           equ	18	;# 
   680     0014                     TRISC           equ	20	;# 
   681     0018                     LATA            equ	24	;# 
   682     001A                     LATC            equ	26	;# 
   683     008C                     ADLTH           equ	140	;# 
   684     008C                     ADLTHL          equ	140	;# 
   685     008D                     ADLTHH          equ	141	;# 
   686     008E                     ADUTH           equ	142	;# 
   687     008E                     ADUTHL          equ	142	;# 
   688     008F                     ADUTHH          equ	143	;# 
   689     0090                     ADERR           equ	144	;# 
   690     0090                     ADERRL          equ	144	;# 
   691     0091                     ADERRH          equ	145	;# 
   692     0092                     ADSTPT          equ	146	;# 
   693     0092                     ADSTPTL         equ	146	;# 
   694     0093                     ADSTPTH         equ	147	;# 
   695     0094                     ADFLTR          equ	148	;# 
   696     0094                     ADFLTRL         equ	148	;# 
   697     0095                     ADFLTRH         equ	149	;# 
   698     0096                     ADACC           equ	150	;# 
   699     0096                     ADACCL          equ	150	;# 
   700     0097                     ADACCH          equ	151	;# 
   701     0098                     ADACCU          equ	152	;# 
   702     0099                     ADCNT           equ	153	;# 
   703     009A                     ADRPT           equ	154	;# 
   704     009B                     ADPREV          equ	155	;# 
   705     009B                     ADPREVL         equ	155	;# 
   706     009C                     ADPREVH         equ	156	;# 
   707     009D                     ADRES           equ	157	;# 
   708     009D                     ADRESL          equ	157	;# 
   709     009E                     ADRESH          equ	158	;# 
   710     009F                     ADPCH           equ	159	;# 
   711     010C                     ADACQ           equ	268	;# 
   712     010C                     ADACQL          equ	268	;# 
   713     010D                     ADACQH          equ	269	;# 
   714     010E                     ADCAP           equ	270	;# 
   715     010F                     ADPRE           equ	271	;# 
   716     010F                     ADPREL          equ	271	;# 
   717     0110                     ADPREH          equ	272	;# 
   718     0111                     ADCON0          equ	273	;# 
   719     0112                     ADCON1          equ	274	;# 
   720     0113                     ADCON2          equ	275	;# 
   721     0114                     ADCON3          equ	276	;# 
   722     0115                     ADSTAT          equ	277	;# 
   723     0116                     ADREF           equ	278	;# 
   724     0117                     ADACT           equ	279	;# 
   725     0118                     ADCLK           equ	280	;# 
   726     0119                     RC1REG          equ	281	;# 
   727     0119                     RCREG           equ	281	;# 
   728     0119                     RCREG1          equ	281	;# 
   729     011A                     TX1REG          equ	282	;# 
   730     011A                     TXREG1          equ	282	;# 
   731     011A                     TXREG           equ	282	;# 
   732     011B                     SP1BRG          equ	283	;# 
   733     011B                     SP1BRGL         equ	283	;# 
   734     011B                     SPBRG           equ	283	;# 
   735     011B                     SPBRG1          equ	283	;# 
   736     011B                     SPBRGL          equ	283	;# 
   737     011C                     SP1BRGH         equ	284	;# 
   738     011C                     SPBRGH          equ	284	;# 
   739     011C                     SPBRGH1         equ	284	;# 
   740     011D                     RC1STA          equ	285	;# 
   741     011D                     RCSTA1          equ	285	;# 
   742     011D                     RCSTA           equ	285	;# 
   743     011E                     TX1STA          equ	286	;# 
   744     011E                     TXSTA1          equ	286	;# 
   745     011E                     TXSTA           equ	286	;# 
   746     011F                     BAUD1CON        equ	287	;# 
   747     011F                     BAUDCON1        equ	287	;# 
   748     011F                     BAUDCTL1        equ	287	;# 
   749     011F                     BAUDCON         equ	287	;# 
   750     011F                     BAUDCTL         equ	287	;# 
   751     018C                     SSP1BUF         equ	396	;# 
   752     018D                     SSP1ADD         equ	397	;# 
   753     018E                     SSP1MSK         equ	398	;# 
   754     018F                     SSP1STAT        equ	399	;# 
   755     0190                     SSP1CON1        equ	400	;# 
   756     0191                     SSP1CON2        equ	401	;# 
   757     0192                     SSP1CON3        equ	402	;# 
   758     0196                     SSP2BUF         equ	406	;# 
   759     0197                     SSP2ADD         equ	407	;# 
   760     0198                     SSP2MSK         equ	408	;# 
   761     0199                     SSP2STAT        equ	409	;# 
   762     019A                     SSP2CON1        equ	410	;# 
   763     019B                     SSP2CON2        equ	411	;# 
   764     019C                     SSP2CON3        equ	412	;# 
   765     020C                     TMR1L           equ	524	;# 
   766     020D                     TMR1H           equ	525	;# 
   767     020E                     T1CON           equ	526	;# 
   768     020E                     TMR1CON         equ	526	;# 
   769     020F                     T1GCON          equ	527	;# 
   770     020F                     TMR1GCON        equ	527	;# 
   771     0210                     T1GATE          equ	528	;# 
   772     0210                     TMR1GATE        equ	528	;# 
   773     0211                     T1CLK           equ	529	;# 
   774     0211                     TMR1CLK         equ	529	;# 
   775     0212                     TMR3L           equ	530	;# 
   776     0213                     TMR3H           equ	531	;# 
   777     0214                     T3CON           equ	532	;# 
   778     0214                     TMR3CON         equ	532	;# 
   779     0215                     T3GCON          equ	533	;# 
   780     0215                     TMR3GCON        equ	533	;# 
   781     0216                     T3GATE          equ	534	;# 
   782     0216                     TMR3GATE        equ	534	;# 
   783     0217                     T3CLK           equ	535	;# 
   784     0217                     TMR3CLK         equ	535	;# 
   785     0218                     TMR5L           equ	536	;# 
   786     0219                     TMR5H           equ	537	;# 
   787     021A                     T5CON           equ	538	;# 
   788     021A                     TMR5CON         equ	538	;# 
   789     021B                     T5GCON          equ	539	;# 
   790     021B                     TMR5GCON        equ	539	;# 
   791     021C                     T5GATE          equ	540	;# 
   792     021C                     TMR5GATE        equ	540	;# 
   793     021D                     T5CLK           equ	541	;# 
   794     021D                     TMR5CLK         equ	541	;# 
   795     021E                     CCPTMRS0        equ	542	;# 
   796     021F                     CCPTMRS1        equ	543	;# 
   797     028C                     T2TMR           equ	652	;# 
   798     028C                     TMR2            equ	652	;# 
   799     028D                     T2PR            equ	653	;# 
   800     028D                     PR2             equ	653	;# 
   801     028E                     T2CON           equ	654	;# 
   802     028F                     T2HLT           equ	655	;# 
   803     0290                     T2CLKCON        equ	656	;# 
   804     0291                     T2RST           equ	657	;# 
   805     0292                     T4TMR           equ	658	;# 
   806     0292                     TMR4            equ	658	;# 
   807     0293                     T4PR            equ	659	;# 
   808     0293                     PR4             equ	659	;# 
   809     0294                     T4CON           equ	660	;# 
   810     0295                     T4HLT           equ	661	;# 
   811     0296                     T4CLKCON        equ	662	;# 
   812     0297                     T4RST           equ	663	;# 
   813     0298                     T6TMR           equ	664	;# 
   814     0298                     TMR6            equ	664	;# 
   815     0299                     T6PR            equ	665	;# 
   816     0299                     PR6             equ	665	;# 
   817     029A                     T6CON           equ	666	;# 
   818     029B                     T6HLT           equ	667	;# 
   819     029C                     T6CLKCON        equ	668	;# 
   820     029D                     T6RST           equ	669	;# 
   821     029F                     ADCPCON0        equ	671	;# 
   822     030C                     CCPR1           equ	780	;# 
   823     030C                     CCPR1L          equ	780	;# 
   824     030D                     CCPR1H          equ	781	;# 
   825     030E                     CCP1CON         equ	782	;# 
   826     030F                     CCP1CAP         equ	783	;# 
   827     0310                     CCPR2           equ	784	;# 
   828     0310                     CCPR2L          equ	784	;# 
   829     0311                     CCPR2H          equ	785	;# 
   830     0312                     CCP2CON         equ	786	;# 
   831     0313                     CCP2CAP         equ	787	;# 
   832     0314                     CCPR3           equ	788	;# 
   833     0314                     CCPR3L          equ	788	;# 
   834     0315                     CCPR3H          equ	789	;# 
   835     0316                     CCP3CON         equ	790	;# 
   836     0317                     CCP3CAP         equ	791	;# 
   837     0318                     CCPR4           equ	792	;# 
   838     0318                     CCPR4L          equ	792	;# 
   839     0319                     CCPR4H          equ	793	;# 
   840     031A                     CCP4CON         equ	794	;# 
   841     031B                     CCP4CAP         equ	795	;# 
   842     038C                     PWM6DC          equ	908	;# 
   843     038C                     PWM6DCL         equ	908	;# 
   844     038D                     PWM6DCH         equ	909	;# 
   845     038E                     PWM6CON         equ	910	;# 
   846     0390                     PWM7DC          equ	912	;# 
   847     0390                     PWM7DCL         equ	912	;# 
   848     0391                     PWM7DCH         equ	913	;# 
   849     0392                     PWM7CON         equ	914	;# 
   850     048C                     SMT1TMR         equ	1164	;# 
   851     048C                     SMT1TMRL        equ	1164	;# 
   852     048D                     SMT1TMRH        equ	1165	;# 
   853     048E                     SMT1TMRU        equ	1166	;# 
   854     048F                     SMT1CPR         equ	1167	;# 
   855     048F                     SMT1CPRL        equ	1167	;# 
   856     0490                     SMT1CPRH        equ	1168	;# 
   857     0491                     SMT1CPRU        equ	1169	;# 
   858     0492                     SMT1CPW         equ	1170	;# 
   859     0492                     SMT1CPWL        equ	1170	;# 
   860     0493                     SMT1CPWH        equ	1171	;# 
   861     0494                     SMT1CPWU        equ	1172	;# 
   862     0495                     SMT1PR          equ	1173	;# 
   863     0495                     SMT1PRL         equ	1173	;# 
   864     0496                     SMT1PRH         equ	1174	;# 
   865     0497                     SMT1PRU         equ	1175	;# 
   866     0498                     SMT1CON0        equ	1176	;# 
   867     0499                     SMT1CON1        equ	1177	;# 
   868     049A                     SMT1STAT        equ	1178	;# 
   869     049B                     SMT1CLK         equ	1179	;# 
   870     049C                     SMT1SIG         equ	1180	;# 
   871     049D                     SMT1WIN         equ	1181	;# 
   872     058C                     NCO1ACC         equ	1420	;# 
   873     058C                     NCO1ACCL        equ	1420	;# 
   874     058D                     NCO1ACCH        equ	1421	;# 
   875     058E                     NCO1ACCU        equ	1422	;# 
   876     058F                     NCO1INC         equ	1423	;# 
   877     058F                     NCO1INCL        equ	1423	;# 
   878     0590                     NCO1INCH        equ	1424	;# 
   879     0591                     NCO1INCU        equ	1425	;# 
   880     0592                     NCO1CON         equ	1426	;# 
   881     0593                     NCO1CLK         equ	1427	;# 
   882     059C                     TMR0L           equ	1436	;# 
   883     059C                     TMR0            equ	1436	;# 
   884     059D                     TMR0H           equ	1437	;# 
   885     059D                     PR0             equ	1437	;# 
   886     059E                     T0CON0          equ	1438	;# 
   887     059F                     T0CON1          equ	1439	;# 
   888     060C                     CWG1CLK         equ	1548	;# 
   889     060C                     CWG1CLKCON      equ	1548	;# 
   890     060D                     CWG1ISM         equ	1549	;# 
   891     060D                     CWG1DAT         equ	1549	;# 
   892     060E                     CWG1DBR         equ	1550	;# 
   893     060F                     CWG1DBF         equ	1551	;# 
   894     0610                     CWG1CON0        equ	1552	;# 
   895     0611                     CWG1CON1        equ	1553	;# 
   896     0612                     CWG1AS0         equ	1554	;# 
   897     0613                     CWG1AS1         equ	1555	;# 
   898     0614                     CWG1STR         equ	1556	;# 
   899     0616                     CWG2CLK         equ	1558	;# 
   900     0616                     CWG2CLKCON      equ	1558	;# 
   901     0617                     CWG2ISM         equ	1559	;# 
   902     0617                     CWG2DAT         equ	1559	;# 
   903     0618                     CWG2DBR         equ	1560	;# 
   904     0619                     CWG2DBF         equ	1561	;# 
   905     061A                     CWG2CON0        equ	1562	;# 
   906     061B                     CWG2CON1        equ	1563	;# 
   907     061C                     CWG2AS0         equ	1564	;# 
   908     061D                     CWG2AS1         equ	1565	;# 
   909     061E                     CWG2STR         equ	1566	;# 
   910     070C                     PIR0            equ	1804	;# 
   911     070D                     PIR1            equ	1805	;# 
   912     070E                     PIR2            equ	1806	;# 
   913     070F                     PIR3            equ	1807	;# 
   914     0710                     PIR4            equ	1808	;# 
   915     0711                     PIR5            equ	1809	;# 
   916     0712                     PIR6            equ	1810	;# 
   917     0713                     PIR7            equ	1811	;# 
   918     0714                     PIR8            equ	1812	;# 
   919     0716                     PIE0            equ	1814	;# 
   920     0717                     PIE1            equ	1815	;# 
   921     0718                     PIE2            equ	1816	;# 
   922     0719                     PIE3            equ	1817	;# 
   923     071A                     PIE4            equ	1818	;# 
   924     071B                     PIE5            equ	1819	;# 
   925     071C                     PIE6            equ	1820	;# 
   926     071D                     PIE7            equ	1821	;# 
   927     071E                     PIE8            equ	1822	;# 
   928     0796                     PMD0            equ	1942	;# 
   929     0797                     PMD1            equ	1943	;# 
   930     0798                     PMD2            equ	1944	;# 
   931     0799                     PMD3            equ	1945	;# 
   932     079A                     PMD4            equ	1946	;# 
   933     079B                     PMD5            equ	1947	;# 
   934     079C                     PMD6            equ	1948	;# 
   935     079D                     PMD7            equ	1949	;# 
   936     080C                     WDTCON0         equ	2060	;# 
   937     080D                     WDTCON1         equ	2061	;# 
   938     080E                     WDTPSL          equ	2062	;# 
   939     080F                     WDTPSH          equ	2063	;# 
   940     0810                     WDTTMR          equ	2064	;# 
   941     0811                     BORCON          equ	2065	;# 
   942     0812                     VREGCON         equ	2066	;# 
   943     0813                     PCON0           equ	2067	;# 
   944     0814                     PCON1           equ	2068	;# 
   945     081A                     NVMADR          equ	2074	;# 
   946     081A                     NVMADRL         equ	2074	;# 
   947     081B                     NVMADRH         equ	2075	;# 
   948     081C                     NVMDAT          equ	2076	;# 
   949     081C                     NVMDATL         equ	2076	;# 
   950     081D                     NVMDATH         equ	2077	;# 
   951     081E                     NVMCON1         equ	2078	;# 
   952     081F                     NVMCON2         equ	2079	;# 
   953     088C                     CPUDOZE         equ	2188	;# 
   954     088D                     OSCCON1         equ	2189	;# 
   955     088E                     OSCCON2         equ	2190	;# 
   956     088F                     OSCCON3         equ	2191	;# 
   957     0890                     OSCSTAT         equ	2192	;# 
   958     0891                     OSCEN           equ	2193	;# 
   959     0892                     OSCTUNE         equ	2194	;# 
   960     0893                     OSCFRQ          equ	2195	;# 
   961     0895                     CLKRCON         equ	2197	;# 
   962     0896                     CLKRCLK         equ	2198	;# 
   963     0897                     MD1CON0         equ	2199	;# 
   964     0898                     MD1CON1         equ	2200	;# 
   965     0899                     MD1SRC          equ	2201	;# 
   966     089A                     MD1CARL         equ	2202	;# 
   967     089B                     MD1CARH         equ	2203	;# 
   968     090C                     FVRCON          equ	2316	;# 
   969     090E                     DAC1CON0        equ	2318	;# 
   970     090F                     DAC1CON1        equ	2319	;# 
   971     091F                     ZCDCON          equ	2335	;# 
   972     098F                     CMOUT           equ	2447	;# 
   973     098F                     CMSTAT          equ	2447	;# 
   974     0990                     CM1CON0         equ	2448	;# 
   975     0991                     CM1CON1         equ	2449	;# 
   976     0992                     CM1NCH          equ	2450	;# 
   977     0993                     CM1PCH          equ	2451	;# 
   978     0994                     CM2CON0         equ	2452	;# 
   979     0995                     CM2CON1         equ	2453	;# 
   980     0996                     CM2NCH          equ	2454	;# 
   981     0997                     CM2PCH          equ	2455	;# 
   982     1E0F                     CLCDATA         equ	7695	;# 
   983     1E10                     CLC1CON         equ	7696	;# 
   984     1E11                     CLC1POL         equ	7697	;# 
   985     1E12                     CLC1SEL0        equ	7698	;# 
   986     1E13                     CLC1SEL1        equ	7699	;# 
   987     1E14                     CLC1SEL2        equ	7700	;# 
   988     1E15                     CLC1SEL3        equ	7701	;# 
   989     1E16                     CLC1GLS0        equ	7702	;# 
   990     1E17                     CLC1GLS1        equ	7703	;# 
   991     1E18                     CLC1GLS2        equ	7704	;# 
   992     1E19                     CLC1GLS3        equ	7705	;# 
   993     1E1A                     CLC2CON         equ	7706	;# 
   994     1E1B                     CLC2POL         equ	7707	;# 
   995     1E1C                     CLC2SEL0        equ	7708	;# 
   996     1E1D                     CLC2SEL1        equ	7709	;# 
   997     1E1E                     CLC2SEL2        equ	7710	;# 
   998     1E1F                     CLC2SEL3        equ	7711	;# 
   999     1E20                     CLC2GLS0        equ	7712	;# 
  1000     1E21                     CLC2GLS1        equ	7713	;# 
  1001     1E22                     CLC2GLS2        equ	7714	;# 
  1002     1E23                     CLC2GLS3        equ	7715	;# 
  1003     1E24                     CLC3CON         equ	7716	;# 
  1004     1E25                     CLC3POL         equ	7717	;# 
  1005     1E26                     CLC3SEL0        equ	7718	;# 
  1006     1E27                     CLC3SEL1        equ	7719	;# 
  1007     1E28                     CLC3SEL2        equ	7720	;# 
  1008     1E29                     CLC3SEL3        equ	7721	;# 
  1009     1E2A                     CLC3GLS0        equ	7722	;# 
  1010     1E2B                     CLC3GLS1        equ	7723	;# 
  1011     1E2C                     CLC3GLS2        equ	7724	;# 
  1012     1E2D                     CLC3GLS3        equ	7725	;# 
  1013     1E2E                     CLC4CON         equ	7726	;# 
  1014     1E2F                     CLC4POL         equ	7727	;# 
  1015     1E30                     CLC4SEL0        equ	7728	;# 
  1016     1E31                     CLC4SEL1        equ	7729	;# 
  1017     1E32                     CLC4SEL2        equ	7730	;# 
  1018     1E33                     CLC4SEL3        equ	7731	;# 
  1019     1E34                     CLC4GLS0        equ	7732	;# 
  1020     1E35                     CLC4GLS1        equ	7733	;# 
  1021     1E36                     CLC4GLS2        equ	7734	;# 
  1022     1E37                     CLC4GLS3        equ	7735	;# 
  1023     1E8F                     PPSLOCK         equ	7823	;# 
  1024     1E90                     INTPPS          equ	7824	;# 
  1025     1E91                     T0CKIPPS        equ	7825	;# 
  1026     1E92                     T1CKIPPS        equ	7826	;# 
  1027     1E93                     T1GPPS          equ	7827	;# 
  1028     1E94                     T3CKIPPS        equ	7828	;# 
  1029     1E95                     T3GPPS          equ	7829	;# 
  1030     1E96                     T5CKIPPS        equ	7830	;# 
  1031     1E97                     T5GPPS          equ	7831	;# 
  1032     1E9C                     T2INPPS         equ	7836	;# 
  1033     1E9D                     T4INPPS         equ	7837	;# 
  1034     1E9E                     T6INPPS         equ	7838	;# 
  1035     1EA1                     CCP1PPS         equ	7841	;# 
  1036     1EA2                     CCP2PPS         equ	7842	;# 
  1037     1EA3                     CCP3PPS         equ	7843	;# 
  1038     1EA4                     CCP4PPS         equ	7844	;# 
  1039     1EA9                     SMT1WINPPS      equ	7849	;# 
  1040     1EAA                     SMT1SIGPPS      equ	7850	;# 
  1041     1EB1                     CWG1PPS         equ	7857	;# 
  1042     1EB2                     CWG2PPS         equ	7858	;# 
  1043     1EB8                     MDCARLPPS       equ	7864	;# 
  1044     1EB9                     MDCARHPPS       equ	7865	;# 
  1045     1EBA                     MDSRCPPS        equ	7866	;# 
  1046     1EBB                     CLCIN0PPS       equ	7867	;# 
  1047     1EBC                     CLCIN1PPS       equ	7868	;# 
  1048     1EBD                     CLCIN2PPS       equ	7869	;# 
  1049     1EBE                     CLCIN3PPS       equ	7870	;# 
  1050     1EC3                     ADACTPPS        equ	7875	;# 
  1051     1EC5                     SSP1CLKPPS      equ	7877	;# 
  1052     1EC6                     SSP1DATPPS      equ	7878	;# 
  1053     1EC7                     SSP1SSPPS       equ	7879	;# 
  1054     1EC8                     SSP2CLKPPS      equ	7880	;# 
  1055     1EC9                     SSP2DATPPS      equ	7881	;# 
  1056     1ECA                     SSP2SSPPS       equ	7882	;# 
  1057     1ECB                     RX1DTPPS        equ	7883	;# 
  1058     1ECC                     TX1CKPPS        equ	7884	;# 
  1059     1F10                     RA0PPS          equ	7952	;# 
  1060     1F11                     RA1PPS          equ	7953	;# 
  1061     1F12                     RA2PPS          equ	7954	;# 
  1062     1F14                     RA4PPS          equ	7956	;# 
  1063     1F15                     RA5PPS          equ	7957	;# 
  1064     1F20                     RC0PPS          equ	7968	;# 
  1065     1F21                     RC1PPS          equ	7969	;# 
  1066     1F22                     RC2PPS          equ	7970	;# 
  1067     1F23                     RC3PPS          equ	7971	;# 
  1068     1F24                     RC4PPS          equ	7972	;# 
  1069     1F25                     RC5PPS          equ	7973	;# 
  1070     1F38                     ANSELA          equ	7992	;# 
  1071     1F39                     WPUA            equ	7993	;# 
  1072     1F3A                     ODCONA          equ	7994	;# 
  1073     1F3B                     SLRCONA         equ	7995	;# 
  1074     1F3C                     INLVLA          equ	7996	;# 
  1075     1F3D                     IOCAP           equ	7997	;# 
  1076     1F3E                     IOCAN           equ	7998	;# 
  1077     1F3F                     IOCAF           equ	7999	;# 
  1078     1F4E                     ANSELC          equ	8014	;# 
  1079     1F4F                     WPUC            equ	8015	;# 
  1080     1F50                     ODCONC          equ	8016	;# 
  1081     1F51                     SLRCONC         equ	8017	;# 
  1082     1F52                     INLVLC          equ	8018	;# 
  1083     1F53                     IOCCP           equ	8019	;# 
  1084     1F54                     IOCCN           equ	8020	;# 
  1085     1F55                     IOCCF           equ	8021	;# 
  1086     1FE4                     STATUS_SHAD     equ	8164	;# 
  1087     1FE5                     WREG_SHAD       equ	8165	;# 
  1088     1FE6                     BSR_SHAD        equ	8166	;# 
  1089     1FE7                     PCLATH_SHAD     equ	8167	;# 
  1090     1FE8                     FSR0_SHAD       equ	8168	;# 
  1091     1FE8                     FSR0L_SHAD      equ	8168	;# 
  1092     1FE9                     FSR0H_SHAD      equ	8169	;# 
  1093     1FEA                     FSR1L_SHAD      equ	8170	;# 
  1094     1FEB                     FSR1H_SHAD      equ	8171	;# 
  1095     1FED                     STKPTR          equ	8173	;# 
  1096     1FEE                     TOSL            equ	8174	;# 
  1097     1FEF                     TOSH            equ	8175	;# 
  1098     0000                     INDF0           equ	0	;# 
  1099     0001                     INDF1           equ	1	;# 
  1100     0002                     PCL             equ	2	;# 
  1101     0003                     STATUS          equ	3	;# 
  1102     0004                     FSR0L           equ	4	;# 
  1103     0005                     FSR0H           equ	5	;# 
  1104     0006                     FSR1L           equ	6	;# 
  1105     0007                     FSR1H           equ	7	;# 
  1106     0008                     BSR             equ	8	;# 
  1107     0009                     WREG            equ	9	;# 
  1108     000A                     PCLATH          equ	10	;# 
  1109     000B                     INTCON          equ	11	;# 
  1110     000C                     PORTA           equ	12	;# 
  1111     000E                     PORTC           equ	14	;# 
  1112     0012                     TRISA           equ	18	;# 
  1113     0014                     TRISC           equ	20	;# 
  1114     0018                     LATA            equ	24	;# 
  1115     001A                     LATC            equ	26	;# 
  1116     008C                     ADLTH           equ	140	;# 
  1117     008C                     ADLTHL          equ	140	;# 
  1118     008D                     ADLTHH          equ	141	;# 
  1119     008E                     ADUTH           equ	142	;# 
  1120     008E                     ADUTHL          equ	142	;# 
  1121     008F                     ADUTHH          equ	143	;# 
  1122     0090                     ADERR           equ	144	;# 
  1123     0090                     ADERRL          equ	144	;# 
  1124     0091                     ADERRH          equ	145	;# 
  1125     0092                     ADSTPT          equ	146	;# 
  1126     0092                     ADSTPTL         equ	146	;# 
  1127     0093                     ADSTPTH         equ	147	;# 
  1128     0094                     ADFLTR          equ	148	;# 
  1129     0094                     ADFLTRL         equ	148	;# 
  1130     0095                     ADFLTRH         equ	149	;# 
  1131     0096                     ADACC           equ	150	;# 
  1132     0096                     ADACCL          equ	150	;# 
  1133     0097                     ADACCH          equ	151	;# 
  1134     0098                     ADACCU          equ	152	;# 
  1135     0099                     ADCNT           equ	153	;# 
  1136     009A                     ADRPT           equ	154	;# 
  1137     009B                     ADPREV          equ	155	;# 
  1138     009B                     ADPREVL         equ	155	;# 
  1139     009C                     ADPREVH         equ	156	;# 
  1140     009D                     ADRES           equ	157	;# 
  1141     009D                     ADRESL          equ	157	;# 
  1142     009E                     ADRESH          equ	158	;# 
  1143     009F                     ADPCH           equ	159	;# 
  1144     010C                     ADACQ           equ	268	;# 
  1145     010C                     ADACQL          equ	268	;# 
  1146     010D                     ADACQH          equ	269	;# 
  1147     010E                     ADCAP           equ	270	;# 
  1148     010F                     ADPRE           equ	271	;# 
  1149     010F                     ADPREL          equ	271	;# 
  1150     0110                     ADPREH          equ	272	;# 
  1151     0111                     ADCON0          equ	273	;# 
  1152     0112                     ADCON1          equ	274	;# 
  1153     0113                     ADCON2          equ	275	;# 
  1154     0114                     ADCON3          equ	276	;# 
  1155     0115                     ADSTAT          equ	277	;# 
  1156     0116                     ADREF           equ	278	;# 
  1157     0117                     ADACT           equ	279	;# 
  1158     0118                     ADCLK           equ	280	;# 
  1159     0119                     RC1REG          equ	281	;# 
  1160     0119                     RCREG           equ	281	;# 
  1161     0119                     RCREG1          equ	281	;# 
  1162     011A                     TX1REG          equ	282	;# 
  1163     011A                     TXREG1          equ	282	;# 
  1164     011A                     TXREG           equ	282	;# 
  1165     011B                     SP1BRG          equ	283	;# 
  1166     011B                     SP1BRGL         equ	283	;# 
  1167     011B                     SPBRG           equ	283	;# 
  1168     011B                     SPBRG1          equ	283	;# 
  1169     011B                     SPBRGL          equ	283	;# 
  1170     011C                     SP1BRGH         equ	284	;# 
  1171     011C                     SPBRGH          equ	284	;# 
  1172     011C                     SPBRGH1         equ	284	;# 
  1173     011D                     RC1STA          equ	285	;# 
  1174     011D                     RCSTA1          equ	285	;# 
  1175     011D                     RCSTA           equ	285	;# 
  1176     011E                     TX1STA          equ	286	;# 
  1177     011E                     TXSTA1          equ	286	;# 
  1178     011E                     TXSTA           equ	286	;# 
  1179     011F                     BAUD1CON        equ	287	;# 
  1180     011F                     BAUDCON1        equ	287	;# 
  1181     011F                     BAUDCTL1        equ	287	;# 
  1182     011F                     BAUDCON         equ	287	;# 
  1183     011F                     BAUDCTL         equ	287	;# 
  1184     018C                     SSP1BUF         equ	396	;# 
  1185     018D                     SSP1ADD         equ	397	;# 
  1186     018E                     SSP1MSK         equ	398	;# 
  1187     018F                     SSP1STAT        equ	399	;# 
  1188     0190                     SSP1CON1        equ	400	;# 
  1189     0191                     SSP1CON2        equ	401	;# 
  1190     0192                     SSP1CON3        equ	402	;# 
  1191     0196                     SSP2BUF         equ	406	;# 
  1192     0197                     SSP2ADD         equ	407	;# 
  1193     0198                     SSP2MSK         equ	408	;# 
  1194     0199                     SSP2STAT        equ	409	;# 
  1195     019A                     SSP2CON1        equ	410	;# 
  1196     019B                     SSP2CON2        equ	411	;# 
  1197     019C                     SSP2CON3        equ	412	;# 
  1198     020C                     TMR1L           equ	524	;# 
  1199     020D                     TMR1H           equ	525	;# 
  1200     020E                     T1CON           equ	526	;# 
  1201     020E                     TMR1CON         equ	526	;# 
  1202     020F                     T1GCON          equ	527	;# 
  1203     020F                     TMR1GCON        equ	527	;# 
  1204     0210                     T1GATE          equ	528	;# 
  1205     0210                     TMR1GATE        equ	528	;# 
  1206     0211                     T1CLK           equ	529	;# 
  1207     0211                     TMR1CLK         equ	529	;# 
  1208     0212                     TMR3L           equ	530	;# 
  1209     0213                     TMR3H           equ	531	;# 
  1210     0214                     T3CON           equ	532	;# 
  1211     0214                     TMR3CON         equ	532	;# 
  1212     0215                     T3GCON          equ	533	;# 
  1213     0215                     TMR3GCON        equ	533	;# 
  1214     0216                     T3GATE          equ	534	;# 
  1215     0216                     TMR3GATE        equ	534	;# 
  1216     0217                     T3CLK           equ	535	;# 
  1217     0217                     TMR3CLK         equ	535	;# 
  1218     0218                     TMR5L           equ	536	;# 
  1219     0219                     TMR5H           equ	537	;# 
  1220     021A                     T5CON           equ	538	;# 
  1221     021A                     TMR5CON         equ	538	;# 
  1222     021B                     T5GCON          equ	539	;# 
  1223     021B                     TMR5GCON        equ	539	;# 
  1224     021C                     T5GATE          equ	540	;# 
  1225     021C                     TMR5GATE        equ	540	;# 
  1226     021D                     T5CLK           equ	541	;# 
  1227     021D                     TMR5CLK         equ	541	;# 
  1228     021E                     CCPTMRS0        equ	542	;# 
  1229     021F                     CCPTMRS1        equ	543	;# 
  1230     028C                     T2TMR           equ	652	;# 
  1231     028C                     TMR2            equ	652	;# 
  1232     028D                     T2PR            equ	653	;# 
  1233     028D                     PR2             equ	653	;# 
  1234     028E                     T2CON           equ	654	;# 
  1235     028F                     T2HLT           equ	655	;# 
  1236     0290                     T2CLKCON        equ	656	;# 
  1237     0291                     T2RST           equ	657	;# 
  1238     0292                     T4TMR           equ	658	;# 
  1239     0292                     TMR4            equ	658	;# 
  1240     0293                     T4PR            equ	659	;# 
  1241     0293                     PR4             equ	659	;# 
  1242     0294                     T4CON           equ	660	;# 
  1243     0295                     T4HLT           equ	661	;# 
  1244     0296                     T4CLKCON        equ	662	;# 
  1245     0297                     T4RST           equ	663	;# 
  1246     0298                     T6TMR           equ	664	;# 
  1247     0298                     TMR6            equ	664	;# 
  1248     0299                     T6PR            equ	665	;# 
  1249     0299                     PR6             equ	665	;# 
  1250     029A                     T6CON           equ	666	;# 
  1251     029B                     T6HLT           equ	667	;# 
  1252     029C                     T6CLKCON        equ	668	;# 
  1253     029D                     T6RST           equ	669	;# 
  1254     029F                     ADCPCON0        equ	671	;# 
  1255     030C                     CCPR1           equ	780	;# 
  1256     030C                     CCPR1L          equ	780	;# 
  1257     030D                     CCPR1H          equ	781	;# 
  1258     030E                     CCP1CON         equ	782	;# 
  1259     030F                     CCP1CAP         equ	783	;# 
  1260     0310                     CCPR2           equ	784	;# 
  1261     0310                     CCPR2L          equ	784	;# 
  1262     0311                     CCPR2H          equ	785	;# 
  1263     0312                     CCP2CON         equ	786	;# 
  1264     0313                     CCP2CAP         equ	787	;# 
  1265     0314                     CCPR3           equ	788	;# 
  1266     0314                     CCPR3L          equ	788	;# 
  1267     0315                     CCPR3H          equ	789	;# 
  1268     0316                     CCP3CON         equ	790	;# 
  1269     0317                     CCP3CAP         equ	791	;# 
  1270     0318                     CCPR4           equ	792	;# 
  1271     0318                     CCPR4L          equ	792	;# 
  1272     0319                     CCPR4H          equ	793	;# 
  1273     031A                     CCP4CON         equ	794	;# 
  1274     031B                     CCP4CAP         equ	795	;# 
  1275     038C                     PWM6DC          equ	908	;# 
  1276     038C                     PWM6DCL         equ	908	;# 
  1277     038D                     PWM6DCH         equ	909	;# 
  1278     038E                     PWM6CON         equ	910	;# 
  1279     0390                     PWM7DC          equ	912	;# 
  1280     0390                     PWM7DCL         equ	912	;# 
  1281     0391                     PWM7DCH         equ	913	;# 
  1282     0392                     PWM7CON         equ	914	;# 
  1283     048C                     SMT1TMR         equ	1164	;# 
  1284     048C                     SMT1TMRL        equ	1164	;# 
  1285     048D                     SMT1TMRH        equ	1165	;# 
  1286     048E                     SMT1TMRU        equ	1166	;# 
  1287     048F                     SMT1CPR         equ	1167	;# 
  1288     048F                     SMT1CPRL        equ	1167	;# 
  1289     0490                     SMT1CPRH        equ	1168	;# 
  1290     0491                     SMT1CPRU        equ	1169	;# 
  1291     0492                     SMT1CPW         equ	1170	;# 
  1292     0492                     SMT1CPWL        equ	1170	;# 
  1293     0493                     SMT1CPWH        equ	1171	;# 
  1294     0494                     SMT1CPWU        equ	1172	;# 
  1295     0495                     SMT1PR          equ	1173	;# 
  1296     0495                     SMT1PRL         equ	1173	;# 
  1297     0496                     SMT1PRH         equ	1174	;# 
  1298     0497                     SMT1PRU         equ	1175	;# 
  1299     0498                     SMT1CON0        equ	1176	;# 
  1300     0499                     SMT1CON1        equ	1177	;# 
  1301     049A                     SMT1STAT        equ	1178	;# 
  1302     049B                     SMT1CLK         equ	1179	;# 
  1303     049C                     SMT1SIG         equ	1180	;# 
  1304     049D                     SMT1WIN         equ	1181	;# 
  1305     058C                     NCO1ACC         equ	1420	;# 
  1306     058C                     NCO1ACCL        equ	1420	;# 
  1307     058D                     NCO1ACCH        equ	1421	;# 
  1308     058E                     NCO1ACCU        equ	1422	;# 
  1309     058F                     NCO1INC         equ	1423	;# 
  1310     058F                     NCO1INCL        equ	1423	;# 
  1311     0590                     NCO1INCH        equ	1424	;# 
  1312     0591                     NCO1INCU        equ	1425	;# 
  1313     0592                     NCO1CON         equ	1426	;# 
  1314     0593                     NCO1CLK         equ	1427	;# 
  1315     059C                     TMR0L           equ	1436	;# 
  1316     059C                     TMR0            equ	1436	;# 
  1317     059D                     TMR0H           equ	1437	;# 
  1318     059D                     PR0             equ	1437	;# 
  1319     059E                     T0CON0          equ	1438	;# 
  1320     059F                     T0CON1          equ	1439	;# 
  1321     060C                     CWG1CLK         equ	1548	;# 
  1322     060C                     CWG1CLKCON      equ	1548	;# 
  1323     060D                     CWG1ISM         equ	1549	;# 
  1324     060D                     CWG1DAT         equ	1549	;# 
  1325     060E                     CWG1DBR         equ	1550	;# 
  1326     060F                     CWG1DBF         equ	1551	;# 
  1327     0610                     CWG1CON0        equ	1552	;# 
  1328     0611                     CWG1CON1        equ	1553	;# 
  1329     0612                     CWG1AS0         equ	1554	;# 
  1330     0613                     CWG1AS1         equ	1555	;# 
  1331     0614                     CWG1STR         equ	1556	;# 
  1332     0616                     CWG2CLK         equ	1558	;# 
  1333     0616                     CWG2CLKCON      equ	1558	;# 
  1334     0617                     CWG2ISM         equ	1559	;# 
  1335     0617                     CWG2DAT         equ	1559	;# 
  1336     0618                     CWG2DBR         equ	1560	;# 
  1337     0619                     CWG2DBF         equ	1561	;# 
  1338     061A                     CWG2CON0        equ	1562	;# 
  1339     061B                     CWG2CON1        equ	1563	;# 
  1340     061C                     CWG2AS0         equ	1564	;# 
  1341     061D                     CWG2AS1         equ	1565	;# 
  1342     061E                     CWG2STR         equ	1566	;# 
  1343     070C                     PIR0            equ	1804	;# 
  1344     070D                     PIR1            equ	1805	;# 
  1345     070E                     PIR2            equ	1806	;# 
  1346     070F                     PIR3            equ	1807	;# 
  1347     0710                     PIR4            equ	1808	;# 
  1348     0711                     PIR5            equ	1809	;# 
  1349     0712                     PIR6            equ	1810	;# 
  1350     0713                     PIR7            equ	1811	;# 
  1351     0714                     PIR8            equ	1812	;# 
  1352     0716                     PIE0            equ	1814	;# 
  1353     0717                     PIE1            equ	1815	;# 
  1354     0718                     PIE2            equ	1816	;# 
  1355     0719                     PIE3            equ	1817	;# 
  1356     071A                     PIE4            equ	1818	;# 
  1357     071B                     PIE5            equ	1819	;# 
  1358     071C                     PIE6            equ	1820	;# 
  1359     071D                     PIE7            equ	1821	;# 
  1360     071E                     PIE8            equ	1822	;# 
  1361     0796                     PMD0            equ	1942	;# 
  1362     0797                     PMD1            equ	1943	;# 
  1363     0798                     PMD2            equ	1944	;# 
  1364     0799                     PMD3            equ	1945	;# 
  1365     079A                     PMD4            equ	1946	;# 
  1366     079B                     PMD5            equ	1947	;# 
  1367     079C                     PMD6            equ	1948	;# 
  1368     079D                     PMD7            equ	1949	;# 
  1369     080C                     WDTCON0         equ	2060	;# 
  1370     080D                     WDTCON1         equ	2061	;# 
  1371     080E                     WDTPSL          equ	2062	;# 
  1372     080F                     WDTPSH          equ	2063	;# 
  1373     0810                     WDTTMR          equ	2064	;# 
  1374     0811                     BORCON          equ	2065	;# 
  1375     0812                     VREGCON         equ	2066	;# 
  1376     0813                     PCON0           equ	2067	;# 
  1377     0814                     PCON1           equ	2068	;# 
  1378     081A                     NVMADR          equ	2074	;# 
  1379     081A                     NVMADRL         equ	2074	;# 
  1380     081B                     NVMADRH         equ	2075	;# 
  1381     081C                     NVMDAT          equ	2076	;# 
  1382     081C                     NVMDATL         equ	2076	;# 
  1383     081D                     NVMDATH         equ	2077	;# 
  1384     081E                     NVMCON1         equ	2078	;# 
  1385     081F                     NVMCON2         equ	2079	;# 
  1386     088C                     CPUDOZE         equ	2188	;# 
  1387     088D                     OSCCON1         equ	2189	;# 
  1388     088E                     OSCCON2         equ	2190	;# 
  1389     088F                     OSCCON3         equ	2191	;# 
  1390     0890                     OSCSTAT         equ	2192	;# 
  1391     0891                     OSCEN           equ	2193	;# 
  1392     0892                     OSCTUNE         equ	2194	;# 
  1393     0893                     OSCFRQ          equ	2195	;# 
  1394     0895                     CLKRCON         equ	2197	;# 
  1395     0896                     CLKRCLK         equ	2198	;# 
  1396     0897                     MD1CON0         equ	2199	;# 
  1397     0898                     MD1CON1         equ	2200	;# 
  1398     0899                     MD1SRC          equ	2201	;# 
  1399     089A                     MD1CARL         equ	2202	;# 
  1400     089B                     MD1CARH         equ	2203	;# 
  1401     090C                     FVRCON          equ	2316	;# 
  1402     090E                     DAC1CON0        equ	2318	;# 
  1403     090F                     DAC1CON1        equ	2319	;# 
  1404     091F                     ZCDCON          equ	2335	;# 
  1405     098F                     CMOUT           equ	2447	;# 
  1406     098F                     CMSTAT          equ	2447	;# 
  1407     0990                     CM1CON0         equ	2448	;# 
  1408     0991                     CM1CON1         equ	2449	;# 
  1409     0992                     CM1NCH          equ	2450	;# 
  1410     0993                     CM1PCH          equ	2451	;# 
  1411     0994                     CM2CON0         equ	2452	;# 
  1412     0995                     CM2CON1         equ	2453	;# 
  1413     0996                     CM2NCH          equ	2454	;# 
  1414     0997                     CM2PCH          equ	2455	;# 
  1415     1E0F                     CLCDATA         equ	7695	;# 
  1416     1E10                     CLC1CON         equ	7696	;# 
  1417     1E11                     CLC1POL         equ	7697	;# 
  1418     1E12                     CLC1SEL0        equ	7698	;# 
  1419     1E13                     CLC1SEL1        equ	7699	;# 
  1420     1E14                     CLC1SEL2        equ	7700	;# 
  1421     1E15                     CLC1SEL3        equ	7701	;# 
  1422     1E16                     CLC1GLS0        equ	7702	;# 
  1423     1E17                     CLC1GLS1        equ	7703	;# 
  1424     1E18                     CLC1GLS2        equ	7704	;# 
  1425     1E19                     CLC1GLS3        equ	7705	;# 
  1426     1E1A                     CLC2CON         equ	7706	;# 
  1427     1E1B                     CLC2POL         equ	7707	;# 
  1428     1E1C                     CLC2SEL0        equ	7708	;# 
  1429     1E1D                     CLC2SEL1        equ	7709	;# 
  1430     1E1E                     CLC2SEL2        equ	7710	;# 
  1431     1E1F                     CLC2SEL3        equ	7711	;# 
  1432     1E20                     CLC2GLS0        equ	7712	;# 
  1433     1E21                     CLC2GLS1        equ	7713	;# 
  1434     1E22                     CLC2GLS2        equ	7714	;# 
  1435     1E23                     CLC2GLS3        equ	7715	;# 
  1436     1E24                     CLC3CON         equ	7716	;# 
  1437     1E25                     CLC3POL         equ	7717	;# 
  1438     1E26                     CLC3SEL0        equ	7718	;# 
  1439     1E27                     CLC3SEL1        equ	7719	;# 
  1440     1E28                     CLC3SEL2        equ	7720	;# 
  1441     1E29                     CLC3SEL3        equ	7721	;# 
  1442     1E2A                     CLC3GLS0        equ	7722	;# 
  1443     1E2B                     CLC3GLS1        equ	7723	;# 
  1444     1E2C                     CLC3GLS2        equ	7724	;# 
  1445     1E2D                     CLC3GLS3        equ	7725	;# 
  1446     1E2E                     CLC4CON         equ	7726	;# 
  1447     1E2F                     CLC4POL         equ	7727	;# 
  1448     1E30                     CLC4SEL0        equ	7728	;# 
  1449     1E31                     CLC4SEL1        equ	7729	;# 
  1450     1E32                     CLC4SEL2        equ	7730	;# 
  1451     1E33                     CLC4SEL3        equ	7731	;# 
  1452     1E34                     CLC4GLS0        equ	7732	;# 
  1453     1E35                     CLC4GLS1        equ	7733	;# 
  1454     1E36                     CLC4GLS2        equ	7734	;# 
  1455     1E37                     CLC4GLS3        equ	7735	;# 
  1456     1E8F                     PPSLOCK         equ	7823	;# 
  1457     1E90                     INTPPS          equ	7824	;# 
  1458     1E91                     T0CKIPPS        equ	7825	;# 
  1459     1E92                     T1CKIPPS        equ	7826	;# 
  1460     1E93                     T1GPPS          equ	7827	;# 
  1461     1E94                     T3CKIPPS        equ	7828	;# 
  1462     1E95                     T3GPPS          equ	7829	;# 
  1463     1E96                     T5CKIPPS        equ	7830	;# 
  1464     1E97                     T5GPPS          equ	7831	;# 
  1465     1E9C                     T2INPPS         equ	7836	;# 
  1466     1E9D                     T4INPPS         equ	7837	;# 
  1467     1E9E                     T6INPPS         equ	7838	;# 
  1468     1EA1                     CCP1PPS         equ	7841	;# 
  1469     1EA2                     CCP2PPS         equ	7842	;# 
  1470     1EA3                     CCP3PPS         equ	7843	;# 
  1471     1EA4                     CCP4PPS         equ	7844	;# 
  1472     1EA9                     SMT1WINPPS      equ	7849	;# 
  1473     1EAA                     SMT1SIGPPS      equ	7850	;# 
  1474     1EB1                     CWG1PPS         equ	7857	;# 
  1475     1EB2                     CWG2PPS         equ	7858	;# 
  1476     1EB8                     MDCARLPPS       equ	7864	;# 
  1477     1EB9                     MDCARHPPS       equ	7865	;# 
  1478     1EBA                     MDSRCPPS        equ	7866	;# 
  1479     1EBB                     CLCIN0PPS       equ	7867	;# 
  1480     1EBC                     CLCIN1PPS       equ	7868	;# 
  1481     1EBD                     CLCIN2PPS       equ	7869	;# 
  1482     1EBE                     CLCIN3PPS       equ	7870	;# 
  1483     1EC3                     ADACTPPS        equ	7875	;# 
  1484     1EC5                     SSP1CLKPPS      equ	7877	;# 
  1485     1EC6                     SSP1DATPPS      equ	7878	;# 
  1486     1EC7                     SSP1SSPPS       equ	7879	;# 
  1487     1EC8                     SSP2CLKPPS      equ	7880	;# 
  1488     1EC9                     SSP2DATPPS      equ	7881	;# 
  1489     1ECA                     SSP2SSPPS       equ	7882	;# 
  1490     1ECB                     RX1DTPPS        equ	7883	;# 
  1491     1ECC                     TX1CKPPS        equ	7884	;# 
  1492     1F10                     RA0PPS          equ	7952	;# 
  1493     1F11                     RA1PPS          equ	7953	;# 
  1494     1F12                     RA2PPS          equ	7954	;# 
  1495     1F14                     RA4PPS          equ	7956	;# 
  1496     1F15                     RA5PPS          equ	7957	;# 
  1497     1F20                     RC0PPS          equ	7968	;# 
  1498     1F21                     RC1PPS          equ	7969	;# 
  1499     1F22                     RC2PPS          equ	7970	;# 
  1500     1F23                     RC3PPS          equ	7971	;# 
  1501     1F24                     RC4PPS          equ	7972	;# 
  1502     1F25                     RC5PPS          equ	7973	;# 
  1503     1F38                     ANSELA          equ	7992	;# 
  1504     1F39                     WPUA            equ	7993	;# 
  1505     1F3A                     ODCONA          equ	7994	;# 
  1506     1F3B                     SLRCONA         equ	7995	;# 
  1507     1F3C                     INLVLA          equ	7996	;# 
  1508     1F3D                     IOCAP           equ	7997	;# 
  1509     1F3E                     IOCAN           equ	7998	;# 
  1510     1F3F                     IOCAF           equ	7999	;# 
  1511     1F4E                     ANSELC          equ	8014	;# 
  1512     1F4F                     WPUC            equ	8015	;# 
  1513     1F50                     ODCONC          equ	8016	;# 
  1514     1F51                     SLRCONC         equ	8017	;# 
  1515     1F52                     INLVLC          equ	8018	;# 
  1516     1F53                     IOCCP           equ	8019	;# 
  1517     1F54                     IOCCN           equ	8020	;# 
  1518     1F55                     IOCCF           equ	8021	;# 
  1519     1FE4                     STATUS_SHAD     equ	8164	;# 
  1520     1FE5                     WREG_SHAD       equ	8165	;# 
  1521     1FE6                     BSR_SHAD        equ	8166	;# 
  1522     1FE7                     PCLATH_SHAD     equ	8167	;# 
  1523     1FE8                     FSR0_SHAD       equ	8168	;# 
  1524     1FE8                     FSR0L_SHAD      equ	8168	;# 
  1525     1FE9                     FSR0H_SHAD      equ	8169	;# 
  1526     1FEA                     FSR1L_SHAD      equ	8170	;# 
  1527     1FEB                     FSR1H_SHAD      equ	8171	;# 
  1528     1FED                     STKPTR          equ	8173	;# 
  1529     1FEE                     TOSL            equ	8174	;# 
  1530     1FEF                     TOSH            equ	8175	;# 
  1531     0000                     INDF0           equ	0	;# 
  1532     0001                     INDF1           equ	1	;# 
  1533     0002                     PCL             equ	2	;# 
  1534     0003                     STATUS          equ	3	;# 
  1535     0004                     FSR0L           equ	4	;# 
  1536     0005                     FSR0H           equ	5	;# 
  1537     0006                     FSR1L           equ	6	;# 
  1538     0007                     FSR1H           equ	7	;# 
  1539     0008                     BSR             equ	8	;# 
  1540     0009                     WREG            equ	9	;# 
  1541     000A                     PCLATH          equ	10	;# 
  1542     000B                     INTCON          equ	11	;# 
  1543     000C                     PORTA           equ	12	;# 
  1544     000E                     PORTC           equ	14	;# 
  1545     0012                     TRISA           equ	18	;# 
  1546     0014                     TRISC           equ	20	;# 
  1547     0018                     LATA            equ	24	;# 
  1548     001A                     LATC            equ	26	;# 
  1549     008C                     ADLTH           equ	140	;# 
  1550     008C                     ADLTHL          equ	140	;# 
  1551     008D                     ADLTHH          equ	141	;# 
  1552     008E                     ADUTH           equ	142	;# 
  1553     008E                     ADUTHL          equ	142	;# 
  1554     008F                     ADUTHH          equ	143	;# 
  1555     0090                     ADERR           equ	144	;# 
  1556     0090                     ADERRL          equ	144	;# 
  1557     0091                     ADERRH          equ	145	;# 
  1558     0092                     ADSTPT          equ	146	;# 
  1559     0092                     ADSTPTL         equ	146	;# 
  1560     0093                     ADSTPTH         equ	147	;# 
  1561     0094                     ADFLTR          equ	148	;# 
  1562     0094                     ADFLTRL         equ	148	;# 
  1563     0095                     ADFLTRH         equ	149	;# 
  1564     0096                     ADACC           equ	150	;# 
  1565     0096                     ADACCL          equ	150	;# 
  1566     0097                     ADACCH          equ	151	;# 
  1567     0098                     ADACCU          equ	152	;# 
  1568     0099                     ADCNT           equ	153	;# 
  1569     009A                     ADRPT           equ	154	;# 
  1570     009B                     ADPREV          equ	155	;# 
  1571     009B                     ADPREVL         equ	155	;# 
  1572     009C                     ADPREVH         equ	156	;# 
  1573     009D                     ADRES           equ	157	;# 
  1574     009D                     ADRESL          equ	157	;# 
  1575     009E                     ADRESH          equ	158	;# 
  1576     009F                     ADPCH           equ	159	;# 
  1577     010C                     ADACQ           equ	268	;# 
  1578     010C                     ADACQL          equ	268	;# 
  1579     010D                     ADACQH          equ	269	;# 
  1580     010E                     ADCAP           equ	270	;# 
  1581     010F                     ADPRE           equ	271	;# 
  1582     010F                     ADPREL          equ	271	;# 
  1583     0110                     ADPREH          equ	272	;# 
  1584     0111                     ADCON0          equ	273	;# 
  1585     0112                     ADCON1          equ	274	;# 
  1586     0113                     ADCON2          equ	275	;# 
  1587     0114                     ADCON3          equ	276	;# 
  1588     0115                     ADSTAT          equ	277	;# 
  1589     0116                     ADREF           equ	278	;# 
  1590     0117                     ADACT           equ	279	;# 
  1591     0118                     ADCLK           equ	280	;# 
  1592     0119                     RC1REG          equ	281	;# 
  1593     0119                     RCREG           equ	281	;# 
  1594     0119                     RCREG1          equ	281	;# 
  1595     011A                     TX1REG          equ	282	;# 
  1596     011A                     TXREG1          equ	282	;# 
  1597     011A                     TXREG           equ	282	;# 
  1598     011B                     SP1BRG          equ	283	;# 
  1599     011B                     SP1BRGL         equ	283	;# 
  1600     011B                     SPBRG           equ	283	;# 
  1601     011B                     SPBRG1          equ	283	;# 
  1602     011B                     SPBRGL          equ	283	;# 
  1603     011C                     SP1BRGH         equ	284	;# 
  1604     011C                     SPBRGH          equ	284	;# 
  1605     011C                     SPBRGH1         equ	284	;# 
  1606     011D                     RC1STA          equ	285	;# 
  1607     011D                     RCSTA1          equ	285	;# 
  1608     011D                     RCSTA           equ	285	;# 
  1609     011E                     TX1STA          equ	286	;# 
  1610     011E                     TXSTA1          equ	286	;# 
  1611     011E                     TXSTA           equ	286	;# 
  1612     011F                     BAUD1CON        equ	287	;# 
  1613     011F                     BAUDCON1        equ	287	;# 
  1614     011F                     BAUDCTL1        equ	287	;# 
  1615     011F                     BAUDCON         equ	287	;# 
  1616     011F                     BAUDCTL         equ	287	;# 
  1617     018C                     SSP1BUF         equ	396	;# 
  1618     018D                     SSP1ADD         equ	397	;# 
  1619     018E                     SSP1MSK         equ	398	;# 
  1620     018F                     SSP1STAT        equ	399	;# 
  1621     0190                     SSP1CON1        equ	400	;# 
  1622     0191                     SSP1CON2        equ	401	;# 
  1623     0192                     SSP1CON3        equ	402	;# 
  1624     0196                     SSP2BUF         equ	406	;# 
  1625     0197                     SSP2ADD         equ	407	;# 
  1626     0198                     SSP2MSK         equ	408	;# 
  1627     0199                     SSP2STAT        equ	409	;# 
  1628     019A                     SSP2CON1        equ	410	;# 
  1629     019B                     SSP2CON2        equ	411	;# 
  1630     019C                     SSP2CON3        equ	412	;# 
  1631     020C                     TMR1L           equ	524	;# 
  1632     020D                     TMR1H           equ	525	;# 
  1633     020E                     T1CON           equ	526	;# 
  1634     020E                     TMR1CON         equ	526	;# 
  1635     020F                     T1GCON          equ	527	;# 
  1636     020F                     TMR1GCON        equ	527	;# 
  1637     0210                     T1GATE          equ	528	;# 
  1638     0210                     TMR1GATE        equ	528	;# 
  1639     0211                     T1CLK           equ	529	;# 
  1640     0211                     TMR1CLK         equ	529	;# 
  1641     0212                     TMR3L           equ	530	;# 
  1642     0213                     TMR3H           equ	531	;# 
  1643     0214                     T3CON           equ	532	;# 
  1644     0214                     TMR3CON         equ	532	;# 
  1645     0215                     T3GCON          equ	533	;# 
  1646     0215                     TMR3GCON        equ	533	;# 
  1647     0216                     T3GATE          equ	534	;# 
  1648     0216                     TMR3GATE        equ	534	;# 
  1649     0217                     T3CLK           equ	535	;# 
  1650     0217                     TMR3CLK         equ	535	;# 
  1651     0218                     TMR5L           equ	536	;# 
  1652     0219                     TMR5H           equ	537	;# 
  1653     021A                     T5CON           equ	538	;# 
  1654     021A                     TMR5CON         equ	538	;# 
  1655     021B                     T5GCON          equ	539	;# 
  1656     021B                     TMR5GCON        equ	539	;# 
  1657     021C                     T5GATE          equ	540	;# 
  1658     021C                     TMR5GATE        equ	540	;# 
  1659     021D                     T5CLK           equ	541	;# 
  1660     021D                     TMR5CLK         equ	541	;# 
  1661     021E                     CCPTMRS0        equ	542	;# 
  1662     021F                     CCPTMRS1        equ	543	;# 
  1663     028C                     T2TMR           equ	652	;# 
  1664     028C                     TMR2            equ	652	;# 
  1665     028D                     T2PR            equ	653	;# 
  1666     028D                     PR2             equ	653	;# 
  1667     028E                     T2CON           equ	654	;# 
  1668     028F                     T2HLT           equ	655	;# 
  1669     0290                     T2CLKCON        equ	656	;# 
  1670     0291                     T2RST           equ	657	;# 
  1671     0292                     T4TMR           equ	658	;# 
  1672     0292                     TMR4            equ	658	;# 
  1673     0293                     T4PR            equ	659	;# 
  1674     0293                     PR4             equ	659	;# 
  1675     0294                     T4CON           equ	660	;# 
  1676     0295                     T4HLT           equ	661	;# 
  1677     0296                     T4CLKCON        equ	662	;# 
  1678     0297                     T4RST           equ	663	;# 
  1679     0298                     T6TMR           equ	664	;# 
  1680     0298                     TMR6            equ	664	;# 
  1681     0299                     T6PR            equ	665	;# 
  1682     0299                     PR6             equ	665	;# 
  1683     029A                     T6CON           equ	666	;# 
  1684     029B                     T6HLT           equ	667	;# 
  1685     029C                     T6CLKCON        equ	668	;# 
  1686     029D                     T6RST           equ	669	;# 
  1687     029F                     ADCPCON0        equ	671	;# 
  1688     030C                     CCPR1           equ	780	;# 
  1689     030C                     CCPR1L          equ	780	;# 
  1690     030D                     CCPR1H          equ	781	;# 
  1691     030E                     CCP1CON         equ	782	;# 
  1692     030F                     CCP1CAP         equ	783	;# 
  1693     0310                     CCPR2           equ	784	;# 
  1694     0310                     CCPR2L          equ	784	;# 
  1695     0311                     CCPR2H          equ	785	;# 
  1696     0312                     CCP2CON         equ	786	;# 
  1697     0313                     CCP2CAP         equ	787	;# 
  1698     0314                     CCPR3           equ	788	;# 
  1699     0314                     CCPR3L          equ	788	;# 
  1700     0315                     CCPR3H          equ	789	;# 
  1701     0316                     CCP3CON         equ	790	;# 
  1702     0317                     CCP3CAP         equ	791	;# 
  1703     0318                     CCPR4           equ	792	;# 
  1704     0318                     CCPR4L          equ	792	;# 
  1705     0319                     CCPR4H          equ	793	;# 
  1706     031A                     CCP4CON         equ	794	;# 
  1707     031B                     CCP4CAP         equ	795	;# 
  1708     038C                     PWM6DC          equ	908	;# 
  1709     038C                     PWM6DCL         equ	908	;# 
  1710     038D                     PWM6DCH         equ	909	;# 
  1711     038E                     PWM6CON         equ	910	;# 
  1712     0390                     PWM7DC          equ	912	;# 
  1713     0390                     PWM7DCL         equ	912	;# 
  1714     0391                     PWM7DCH         equ	913	;# 
  1715     0392                     PWM7CON         equ	914	;# 
  1716     048C                     SMT1TMR         equ	1164	;# 
  1717     048C                     SMT1TMRL        equ	1164	;# 
  1718     048D                     SMT1TMRH        equ	1165	;# 
  1719     048E                     SMT1TMRU        equ	1166	;# 
  1720     048F                     SMT1CPR         equ	1167	;# 
  1721     048F                     SMT1CPRL        equ	1167	;# 
  1722     0490                     SMT1CPRH        equ	1168	;# 
  1723     0491                     SMT1CPRU        equ	1169	;# 
  1724     0492                     SMT1CPW         equ	1170	;# 
  1725     0492                     SMT1CPWL        equ	1170	;# 
  1726     0493                     SMT1CPWH        equ	1171	;# 
  1727     0494                     SMT1CPWU        equ	1172	;# 
  1728     0495                     SMT1PR          equ	1173	;# 
  1729     0495                     SMT1PRL         equ	1173	;# 
  1730     0496                     SMT1PRH         equ	1174	;# 
  1731     0497                     SMT1PRU         equ	1175	;# 
  1732     0498                     SMT1CON0        equ	1176	;# 
  1733     0499                     SMT1CON1        equ	1177	;# 
  1734     049A                     SMT1STAT        equ	1178	;# 
  1735     049B                     SMT1CLK         equ	1179	;# 
  1736     049C                     SMT1SIG         equ	1180	;# 
  1737     049D                     SMT1WIN         equ	1181	;# 
  1738     058C                     NCO1ACC         equ	1420	;# 
  1739     058C                     NCO1ACCL        equ	1420	;# 
  1740     058D                     NCO1ACCH        equ	1421	;# 
  1741     058E                     NCO1ACCU        equ	1422	;# 
  1742     058F                     NCO1INC         equ	1423	;# 
  1743     058F                     NCO1INCL        equ	1423	;# 
  1744     0590                     NCO1INCH        equ	1424	;# 
  1745     0591                     NCO1INCU        equ	1425	;# 
  1746     0592                     NCO1CON         equ	1426	;# 
  1747     0593                     NCO1CLK         equ	1427	;# 
  1748     059C                     TMR0L           equ	1436	;# 
  1749     059C                     TMR0            equ	1436	;# 
  1750     059D                     TMR0H           equ	1437	;# 
  1751     059D                     PR0             equ	1437	;# 
  1752     059E                     T0CON0          equ	1438	;# 
  1753     059F                     T0CON1          equ	1439	;# 
  1754     060C                     CWG1CLK         equ	1548	;# 
  1755     060C                     CWG1CLKCON      equ	1548	;# 
  1756     060D                     CWG1ISM         equ	1549	;# 
  1757     060D                     CWG1DAT         equ	1549	;# 
  1758     060E                     CWG1DBR         equ	1550	;# 
  1759     060F                     CWG1DBF         equ	1551	;# 
  1760     0610                     CWG1CON0        equ	1552	;# 
  1761     0611                     CWG1CON1        equ	1553	;# 
  1762     0612                     CWG1AS0         equ	1554	;# 
  1763     0613                     CWG1AS1         equ	1555	;# 
  1764     0614                     CWG1STR         equ	1556	;# 
  1765     0616                     CWG2CLK         equ	1558	;# 
  1766     0616                     CWG2CLKCON      equ	1558	;# 
  1767     0617                     CWG2ISM         equ	1559	;# 
  1768     0617                     CWG2DAT         equ	1559	;# 
  1769     0618                     CWG2DBR         equ	1560	;# 
  1770     0619                     CWG2DBF         equ	1561	;# 
  1771     061A                     CWG2CON0        equ	1562	;# 
  1772     061B                     CWG2CON1        equ	1563	;# 
  1773     061C                     CWG2AS0         equ	1564	;# 
  1774     061D                     CWG2AS1         equ	1565	;# 
  1775     061E                     CWG2STR         equ	1566	;# 
  1776     070C                     PIR0            equ	1804	;# 
  1777     070D                     PIR1            equ	1805	;# 
  1778     070E                     PIR2            equ	1806	;# 
  1779     070F                     PIR3            equ	1807	;# 
  1780     0710                     PIR4            equ	1808	;# 
  1781     0711                     PIR5            equ	1809	;# 
  1782     0712                     PIR6            equ	1810	;# 
  1783     0713                     PIR7            equ	1811	;# 
  1784     0714                     PIR8            equ	1812	;# 
  1785     0716                     PIE0            equ	1814	;# 
  1786     0717                     PIE1            equ	1815	;# 
  1787     0718                     PIE2            equ	1816	;# 
  1788     0719                     PIE3            equ	1817	;# 
  1789     071A                     PIE4            equ	1818	;# 
  1790     071B                     PIE5            equ	1819	;# 
  1791     071C                     PIE6            equ	1820	;# 
  1792     071D                     PIE7            equ	1821	;# 
  1793     071E                     PIE8            equ	1822	;# 
  1794     0796                     PMD0            equ	1942	;# 
  1795     0797                     PMD1            equ	1943	;# 
  1796     0798                     PMD2            equ	1944	;# 
  1797     0799                     PMD3            equ	1945	;# 
  1798     079A                     PMD4            equ	1946	;# 
  1799     079B                     PMD5            equ	1947	;# 
  1800     079C                     PMD6            equ	1948	;# 
  1801     079D                     PMD7            equ	1949	;# 
  1802     080C                     WDTCON0         equ	2060	;# 
  1803     080D                     WDTCON1         equ	2061	;# 
  1804     080E                     WDTPSL          equ	2062	;# 
  1805     080F                     WDTPSH          equ	2063	;# 
  1806     0810                     WDTTMR          equ	2064	;# 
  1807     0811                     BORCON          equ	2065	;# 
  1808     0812                     VREGCON         equ	2066	;# 
  1809     0813                     PCON0           equ	2067	;# 
  1810     0814                     PCON1           equ	2068	;# 
  1811     081A                     NVMADR          equ	2074	;# 
  1812     081A                     NVMADRL         equ	2074	;# 
  1813     081B                     NVMADRH         equ	2075	;# 
  1814     081C                     NVMDAT          equ	2076	;# 
  1815     081C                     NVMDATL         equ	2076	;# 
  1816     081D                     NVMDATH         equ	2077	;# 
  1817     081E                     NVMCON1         equ	2078	;# 
  1818     081F                     NVMCON2         equ	2079	;# 
  1819     088C                     CPUDOZE         equ	2188	;# 
  1820     088D                     OSCCON1         equ	2189	;# 
  1821     088E                     OSCCON2         equ	2190	;# 
  1822     088F                     OSCCON3         equ	2191	;# 
  1823     0890                     OSCSTAT         equ	2192	;# 
  1824     0891                     OSCEN           equ	2193	;# 
  1825     0892                     OSCTUNE         equ	2194	;# 
  1826     0893                     OSCFRQ          equ	2195	;# 
  1827     0895                     CLKRCON         equ	2197	;# 
  1828     0896                     CLKRCLK         equ	2198	;# 
  1829     0897                     MD1CON0         equ	2199	;# 
  1830     0898                     MD1CON1         equ	2200	;# 
  1831     0899                     MD1SRC          equ	2201	;# 
  1832     089A                     MD1CARL         equ	2202	;# 
  1833     089B                     MD1CARH         equ	2203	;# 
  1834     090C                     FVRCON          equ	2316	;# 
  1835     090E                     DAC1CON0        equ	2318	;# 
  1836     090F                     DAC1CON1        equ	2319	;# 
  1837     091F                     ZCDCON          equ	2335	;# 
  1838     098F                     CMOUT           equ	2447	;# 
  1839     098F                     CMSTAT          equ	2447	;# 
  1840     0990                     CM1CON0         equ	2448	;# 
  1841     0991                     CM1CON1         equ	2449	;# 
  1842     0992                     CM1NCH          equ	2450	;# 
  1843     0993                     CM1PCH          equ	2451	;# 
  1844     0994                     CM2CON0         equ	2452	;# 
  1845     0995                     CM2CON1         equ	2453	;# 
  1846     0996                     CM2NCH          equ	2454	;# 
  1847     0997                     CM2PCH          equ	2455	;# 
  1848     1E0F                     CLCDATA         equ	7695	;# 
  1849     1E10                     CLC1CON         equ	7696	;# 
  1850     1E11                     CLC1POL         equ	7697	;# 
  1851     1E12                     CLC1SEL0        equ	7698	;# 
  1852     1E13                     CLC1SEL1        equ	7699	;# 
  1853     1E14                     CLC1SEL2        equ	7700	;# 
  1854     1E15                     CLC1SEL3        equ	7701	;# 
  1855     1E16                     CLC1GLS0        equ	7702	;# 
  1856     1E17                     CLC1GLS1        equ	7703	;# 
  1857     1E18                     CLC1GLS2        equ	7704	;# 
  1858     1E19                     CLC1GLS3        equ	7705	;# 
  1859     1E1A                     CLC2CON         equ	7706	;# 
  1860     1E1B                     CLC2POL         equ	7707	;# 
  1861     1E1C                     CLC2SEL0        equ	7708	;# 
  1862     1E1D                     CLC2SEL1        equ	7709	;# 
  1863     1E1E                     CLC2SEL2        equ	7710	;# 
  1864     1E1F                     CLC2SEL3        equ	7711	;# 
  1865     1E20                     CLC2GLS0        equ	7712	;# 
  1866     1E21                     CLC2GLS1        equ	7713	;# 
  1867     1E22                     CLC2GLS2        equ	7714	;# 
  1868     1E23                     CLC2GLS3        equ	7715	;# 
  1869     1E24                     CLC3CON         equ	7716	;# 
  1870     1E25                     CLC3POL         equ	7717	;# 
  1871     1E26                     CLC3SEL0        equ	7718	;# 
  1872     1E27                     CLC3SEL1        equ	7719	;# 
  1873     1E28                     CLC3SEL2        equ	7720	;# 
  1874     1E29                     CLC3SEL3        equ	7721	;# 
  1875     1E2A                     CLC3GLS0        equ	7722	;# 
  1876     1E2B                     CLC3GLS1        equ	7723	;# 
  1877     1E2C                     CLC3GLS2        equ	7724	;# 
  1878     1E2D                     CLC3GLS3        equ	7725	;# 
  1879     1E2E                     CLC4CON         equ	7726	;# 
  1880     1E2F                     CLC4POL         equ	7727	;# 
  1881     1E30                     CLC4SEL0        equ	7728	;# 
  1882     1E31                     CLC4SEL1        equ	7729	;# 
  1883     1E32                     CLC4SEL2        equ	7730	;# 
  1884     1E33                     CLC4SEL3        equ	7731	;# 
  1885     1E34                     CLC4GLS0        equ	7732	;# 
  1886     1E35                     CLC4GLS1        equ	7733	;# 
  1887     1E36                     CLC4GLS2        equ	7734	;# 
  1888     1E37                     CLC4GLS3        equ	7735	;# 
  1889     1E8F                     PPSLOCK         equ	7823	;# 
  1890     1E90                     INTPPS          equ	7824	;# 
  1891     1E91                     T0CKIPPS        equ	7825	;# 
  1892     1E92                     T1CKIPPS        equ	7826	;# 
  1893     1E93                     T1GPPS          equ	7827	;# 
  1894     1E94                     T3CKIPPS        equ	7828	;# 
  1895     1E95                     T3GPPS          equ	7829	;# 
  1896     1E96                     T5CKIPPS        equ	7830	;# 
  1897     1E97                     T5GPPS          equ	7831	;# 
  1898     1E9C                     T2INPPS         equ	7836	;# 
  1899     1E9D                     T4INPPS         equ	7837	;# 
  1900     1E9E                     T6INPPS         equ	7838	;# 
  1901     1EA1                     CCP1PPS         equ	7841	;# 
  1902     1EA2                     CCP2PPS         equ	7842	;# 
  1903     1EA3                     CCP3PPS         equ	7843	;# 
  1904     1EA4                     CCP4PPS         equ	7844	;# 
  1905     1EA9                     SMT1WINPPS      equ	7849	;# 
  1906     1EAA                     SMT1SIGPPS      equ	7850	;# 
  1907     1EB1                     CWG1PPS         equ	7857	;# 
  1908     1EB2                     CWG2PPS         equ	7858	;# 
  1909     1EB8                     MDCARLPPS       equ	7864	;# 
  1910     1EB9                     MDCARHPPS       equ	7865	;# 
  1911     1EBA                     MDSRCPPS        equ	7866	;# 
  1912     1EBB                     CLCIN0PPS       equ	7867	;# 
  1913     1EBC                     CLCIN1PPS       equ	7868	;# 
  1914     1EBD                     CLCIN2PPS       equ	7869	;# 
  1915     1EBE                     CLCIN3PPS       equ	7870	;# 
  1916     1EC3                     ADACTPPS        equ	7875	;# 
  1917     1EC5                     SSP1CLKPPS      equ	7877	;# 
  1918     1EC6                     SSP1DATPPS      equ	7878	;# 
  1919     1EC7                     SSP1SSPPS       equ	7879	;# 
  1920     1EC8                     SSP2CLKPPS      equ	7880	;# 
  1921     1EC9                     SSP2DATPPS      equ	7881	;# 
  1922     1ECA                     SSP2SSPPS       equ	7882	;# 
  1923     1ECB                     RX1DTPPS        equ	7883	;# 
  1924     1ECC                     TX1CKPPS        equ	7884	;# 
  1925     1F10                     RA0PPS          equ	7952	;# 
  1926     1F11                     RA1PPS          equ	7953	;# 
  1927     1F12                     RA2PPS          equ	7954	;# 
  1928     1F14                     RA4PPS          equ	7956	;# 
  1929     1F15                     RA5PPS          equ	7957	;# 
  1930     1F20                     RC0PPS          equ	7968	;# 
  1931     1F21                     RC1PPS          equ	7969	;# 
  1932     1F22                     RC2PPS          equ	7970	;# 
  1933     1F23                     RC3PPS          equ	7971	;# 
  1934     1F24                     RC4PPS          equ	7972	;# 
  1935     1F25                     RC5PPS          equ	7973	;# 
  1936     1F38                     ANSELA          equ	7992	;# 
  1937     1F39                     WPUA            equ	7993	;# 
  1938     1F3A                     ODCONA          equ	7994	;# 
  1939     1F3B                     SLRCONA         equ	7995	;# 
  1940     1F3C                     INLVLA          equ	7996	;# 
  1941     1F3D                     IOCAP           equ	7997	;# 
  1942     1F3E                     IOCAN           equ	7998	;# 
  1943     1F3F                     IOCAF           equ	7999	;# 
  1944     1F4E                     ANSELC          equ	8014	;# 
  1945     1F4F                     WPUC            equ	8015	;# 
  1946     1F50                     ODCONC          equ	8016	;# 
  1947     1F51                     SLRCONC         equ	8017	;# 
  1948     1F52                     INLVLC          equ	8018	;# 
  1949     1F53                     IOCCP           equ	8019	;# 
  1950     1F54                     IOCCN           equ	8020	;# 
  1951     1F55                     IOCCF           equ	8021	;# 
  1952     1FE4                     STATUS_SHAD     equ	8164	;# 
  1953     1FE5                     WREG_SHAD       equ	8165	;# 
  1954     1FE6                     BSR_SHAD        equ	8166	;# 
  1955     1FE7                     PCLATH_SHAD     equ	8167	;# 
  1956     1FE8                     FSR0_SHAD       equ	8168	;# 
  1957     1FE8                     FSR0L_SHAD      equ	8168	;# 
  1958     1FE9                     FSR0H_SHAD      equ	8169	;# 
  1959     1FEA                     FSR1L_SHAD      equ	8170	;# 
  1960     1FEB                     FSR1H_SHAD      equ	8171	;# 
  1961     1FED                     STKPTR          equ	8173	;# 
  1962     1FEE                     TOSL            equ	8174	;# 
  1963     1FEF                     TOSH            equ	8175	;# 
  1964     0000                     INDF0           equ	0	;# 
  1965     0001                     INDF1           equ	1	;# 
  1966     0002                     PCL             equ	2	;# 
  1967     0003                     STATUS          equ	3	;# 
  1968     0004                     FSR0L           equ	4	;# 
  1969     0005                     FSR0H           equ	5	;# 
  1970     0006                     FSR1L           equ	6	;# 
  1971     0007                     FSR1H           equ	7	;# 
  1972     0008                     BSR             equ	8	;# 
  1973     0009                     WREG            equ	9	;# 
  1974     000A                     PCLATH          equ	10	;# 
  1975     000B                     INTCON          equ	11	;# 
  1976     000C                     PORTA           equ	12	;# 
  1977     000E                     PORTC           equ	14	;# 
  1978     0012                     TRISA           equ	18	;# 
  1979     0014                     TRISC           equ	20	;# 
  1980     0018                     LATA            equ	24	;# 
  1981     001A                     LATC            equ	26	;# 
  1982     008C                     ADLTH           equ	140	;# 
  1983     008C                     ADLTHL          equ	140	;# 
  1984     008D                     ADLTHH          equ	141	;# 
  1985     008E                     ADUTH           equ	142	;# 
  1986     008E                     ADUTHL          equ	142	;# 
  1987     008F                     ADUTHH          equ	143	;# 
  1988     0090                     ADERR           equ	144	;# 
  1989     0090                     ADERRL          equ	144	;# 
  1990     0091                     ADERRH          equ	145	;# 
  1991     0092                     ADSTPT          equ	146	;# 
  1992     0092                     ADSTPTL         equ	146	;# 
  1993     0093                     ADSTPTH         equ	147	;# 
  1994     0094                     ADFLTR          equ	148	;# 
  1995     0094                     ADFLTRL         equ	148	;# 
  1996     0095                     ADFLTRH         equ	149	;# 
  1997     0096                     ADACC           equ	150	;# 
  1998     0096                     ADACCL          equ	150	;# 
  1999     0097                     ADACCH          equ	151	;# 
  2000     0098                     ADACCU          equ	152	;# 
  2001     0099                     ADCNT           equ	153	;# 
  2002     009A                     ADRPT           equ	154	;# 
  2003     009B                     ADPREV          equ	155	;# 
  2004     009B                     ADPREVL         equ	155	;# 
  2005     009C                     ADPREVH         equ	156	;# 
  2006     009D                     ADRES           equ	157	;# 
  2007     009D                     ADRESL          equ	157	;# 
  2008     009E                     ADRESH          equ	158	;# 
  2009     009F                     ADPCH           equ	159	;# 
  2010     010C                     ADACQ           equ	268	;# 
  2011     010C                     ADACQL          equ	268	;# 
  2012     010D                     ADACQH          equ	269	;# 
  2013     010E                     ADCAP           equ	270	;# 
  2014     010F                     ADPRE           equ	271	;# 
  2015     010F                     ADPREL          equ	271	;# 
  2016     0110                     ADPREH          equ	272	;# 
  2017     0111                     ADCON0          equ	273	;# 
  2018     0112                     ADCON1          equ	274	;# 
  2019     0113                     ADCON2          equ	275	;# 
  2020     0114                     ADCON3          equ	276	;# 
  2021     0115                     ADSTAT          equ	277	;# 
  2022     0116                     ADREF           equ	278	;# 
  2023     0117                     ADACT           equ	279	;# 
  2024     0118                     ADCLK           equ	280	;# 
  2025     0119                     RC1REG          equ	281	;# 
  2026     0119                     RCREG           equ	281	;# 
  2027     0119                     RCREG1          equ	281	;# 
  2028     011A                     TX1REG          equ	282	;# 
  2029     011A                     TXREG1          equ	282	;# 
  2030     011A                     TXREG           equ	282	;# 
  2031     011B                     SP1BRG          equ	283	;# 
  2032     011B                     SP1BRGL         equ	283	;# 
  2033     011B                     SPBRG           equ	283	;# 
  2034     011B                     SPBRG1          equ	283	;# 
  2035     011B                     SPBRGL          equ	283	;# 
  2036     011C                     SP1BRGH         equ	284	;# 
  2037     011C                     SPBRGH          equ	284	;# 
  2038     011C                     SPBRGH1         equ	284	;# 
  2039     011D                     RC1STA          equ	285	;# 
  2040     011D                     RCSTA1          equ	285	;# 
  2041     011D                     RCSTA           equ	285	;# 
  2042     011E                     TX1STA          equ	286	;# 
  2043     011E                     TXSTA1          equ	286	;# 
  2044     011E                     TXSTA           equ	286	;# 
  2045     011F                     BAUD1CON        equ	287	;# 
  2046     011F                     BAUDCON1        equ	287	;# 
  2047     011F                     BAUDCTL1        equ	287	;# 
  2048     011F                     BAUDCON         equ	287	;# 
  2049     011F                     BAUDCTL         equ	287	;# 
  2050     018C                     SSP1BUF         equ	396	;# 
  2051     018D                     SSP1ADD         equ	397	;# 
  2052     018E                     SSP1MSK         equ	398	;# 
  2053     018F                     SSP1STAT        equ	399	;# 
  2054     0190                     SSP1CON1        equ	400	;# 
  2055     0191                     SSP1CON2        equ	401	;# 
  2056     0192                     SSP1CON3        equ	402	;# 
  2057     0196                     SSP2BUF         equ	406	;# 
  2058     0197                     SSP2ADD         equ	407	;# 
  2059     0198                     SSP2MSK         equ	408	;# 
  2060     0199                     SSP2STAT        equ	409	;# 
  2061     019A                     SSP2CON1        equ	410	;# 
  2062     019B                     SSP2CON2        equ	411	;# 
  2063     019C                     SSP2CON3        equ	412	;# 
  2064     020C                     TMR1L           equ	524	;# 
  2065     020D                     TMR1H           equ	525	;# 
  2066     020E                     T1CON           equ	526	;# 
  2067     020E                     TMR1CON         equ	526	;# 
  2068     020F                     T1GCON          equ	527	;# 
  2069     020F                     TMR1GCON        equ	527	;# 
  2070     0210                     T1GATE          equ	528	;# 
  2071     0210                     TMR1GATE        equ	528	;# 
  2072     0211                     T1CLK           equ	529	;# 
  2073     0211                     TMR1CLK         equ	529	;# 
  2074     0212                     TMR3L           equ	530	;# 
  2075     0213                     TMR3H           equ	531	;# 
  2076     0214                     T3CON           equ	532	;# 
  2077     0214                     TMR3CON         equ	532	;# 
  2078     0215                     T3GCON          equ	533	;# 
  2079     0215                     TMR3GCON        equ	533	;# 
  2080     0216                     T3GATE          equ	534	;# 
  2081     0216                     TMR3GATE        equ	534	;# 
  2082     0217                     T3CLK           equ	535	;# 
  2083     0217                     TMR3CLK         equ	535	;# 
  2084     0218                     TMR5L           equ	536	;# 
  2085     0219                     TMR5H           equ	537	;# 
  2086     021A                     T5CON           equ	538	;# 
  2087     021A                     TMR5CON         equ	538	;# 
  2088     021B                     T5GCON          equ	539	;# 
  2089     021B                     TMR5GCON        equ	539	;# 
  2090     021C                     T5GATE          equ	540	;# 
  2091     021C                     TMR5GATE        equ	540	;# 
  2092     021D                     T5CLK           equ	541	;# 
  2093     021D                     TMR5CLK         equ	541	;# 
  2094     021E                     CCPTMRS0        equ	542	;# 
  2095     021F                     CCPTMRS1        equ	543	;# 
  2096     028C                     T2TMR           equ	652	;# 
  2097     028C                     TMR2            equ	652	;# 
  2098     028D                     T2PR            equ	653	;# 
  2099     028D                     PR2             equ	653	;# 
  2100     028E                     T2CON           equ	654	;# 
  2101     028F                     T2HLT           equ	655	;# 
  2102     0290                     T2CLKCON        equ	656	;# 
  2103     0291                     T2RST           equ	657	;# 
  2104     0292                     T4TMR           equ	658	;# 
  2105     0292                     TMR4            equ	658	;# 
  2106     0293                     T4PR            equ	659	;# 
  2107     0293                     PR4             equ	659	;# 
  2108     0294                     T4CON           equ	660	;# 
  2109     0295                     T4HLT           equ	661	;# 
  2110     0296                     T4CLKCON        equ	662	;# 
  2111     0297                     T4RST           equ	663	;# 
  2112     0298                     T6TMR           equ	664	;# 
  2113     0298                     TMR6            equ	664	;# 
  2114     0299                     T6PR            equ	665	;# 
  2115     0299                     PR6             equ	665	;# 
  2116     029A                     T6CON           equ	666	;# 
  2117     029B                     T6HLT           equ	667	;# 
  2118     029C                     T6CLKCON        equ	668	;# 
  2119     029D                     T6RST           equ	669	;# 
  2120     029F                     ADCPCON0        equ	671	;# 
  2121     030C                     CCPR1           equ	780	;# 
  2122     030C                     CCPR1L          equ	780	;# 
  2123     030D                     CCPR1H          equ	781	;# 
  2124     030E                     CCP1CON         equ	782	;# 
  2125     030F                     CCP1CAP         equ	783	;# 
  2126     0310                     CCPR2           equ	784	;# 
  2127     0310                     CCPR2L          equ	784	;# 
  2128     0311                     CCPR2H          equ	785	;# 
  2129     0312                     CCP2CON         equ	786	;# 
  2130     0313                     CCP2CAP         equ	787	;# 
  2131     0314                     CCPR3           equ	788	;# 
  2132     0314                     CCPR3L          equ	788	;# 
  2133     0315                     CCPR3H          equ	789	;# 
  2134     0316                     CCP3CON         equ	790	;# 
  2135     0317                     CCP3CAP         equ	791	;# 
  2136     0318                     CCPR4           equ	792	;# 
  2137     0318                     CCPR4L          equ	792	;# 
  2138     0319                     CCPR4H          equ	793	;# 
  2139     031A                     CCP4CON         equ	794	;# 
  2140     031B                     CCP4CAP         equ	795	;# 
  2141     038C                     PWM6DC          equ	908	;# 
  2142     038C                     PWM6DCL         equ	908	;# 
  2143     038D                     PWM6DCH         equ	909	;# 
  2144     038E                     PWM6CON         equ	910	;# 
  2145     0390                     PWM7DC          equ	912	;# 
  2146     0390                     PWM7DCL         equ	912	;# 
  2147     0391                     PWM7DCH         equ	913	;# 
  2148     0392                     PWM7CON         equ	914	;# 
  2149     048C                     SMT1TMR         equ	1164	;# 
  2150     048C                     SMT1TMRL        equ	1164	;# 
  2151     048D                     SMT1TMRH        equ	1165	;# 
  2152     048E                     SMT1TMRU        equ	1166	;# 
  2153     048F                     SMT1CPR         equ	1167	;# 
  2154     048F                     SMT1CPRL        equ	1167	;# 
  2155     0490                     SMT1CPRH        equ	1168	;# 
  2156     0491                     SMT1CPRU        equ	1169	;# 
  2157     0492                     SMT1CPW         equ	1170	;# 
  2158     0492                     SMT1CPWL        equ	1170	;# 
  2159     0493                     SMT1CPWH        equ	1171	;# 
  2160     0494                     SMT1CPWU        equ	1172	;# 
  2161     0495                     SMT1PR          equ	1173	;# 
  2162     0495                     SMT1PRL         equ	1173	;# 
  2163     0496                     SMT1PRH         equ	1174	;# 
  2164     0497                     SMT1PRU         equ	1175	;# 
  2165     0498                     SMT1CON0        equ	1176	;# 
  2166     0499                     SMT1CON1        equ	1177	;# 
  2167     049A                     SMT1STAT        equ	1178	;# 
  2168     049B                     SMT1CLK         equ	1179	;# 
  2169     049C                     SMT1SIG         equ	1180	;# 
  2170     049D                     SMT1WIN         equ	1181	;# 
  2171     058C                     NCO1ACC         equ	1420	;# 
  2172     058C                     NCO1ACCL        equ	1420	;# 
  2173     058D                     NCO1ACCH        equ	1421	;# 
  2174     058E                     NCO1ACCU        equ	1422	;# 
  2175     058F                     NCO1INC         equ	1423	;# 
  2176     058F                     NCO1INCL        equ	1423	;# 
  2177     0590                     NCO1INCH        equ	1424	;# 
  2178     0591                     NCO1INCU        equ	1425	;# 
  2179     0592                     NCO1CON         equ	1426	;# 
  2180     0593                     NCO1CLK         equ	1427	;# 
  2181     059C                     TMR0L           equ	1436	;# 
  2182     059C                     TMR0            equ	1436	;# 
  2183     059D                     TMR0H           equ	1437	;# 
  2184     059D                     PR0             equ	1437	;# 
  2185     059E                     T0CON0          equ	1438	;# 
  2186     059F                     T0CON1          equ	1439	;# 
  2187     060C                     CWG1CLK         equ	1548	;# 
  2188     060C                     CWG1CLKCON      equ	1548	;# 
  2189     060D                     CWG1ISM         equ	1549	;# 
  2190     060D                     CWG1DAT         equ	1549	;# 
  2191     060E                     CWG1DBR         equ	1550	;# 
  2192     060F                     CWG1DBF         equ	1551	;# 
  2193     0610                     CWG1CON0        equ	1552	;# 
  2194     0611                     CWG1CON1        equ	1553	;# 
  2195     0612                     CWG1AS0         equ	1554	;# 
  2196     0613                     CWG1AS1         equ	1555	;# 
  2197     0614                     CWG1STR         equ	1556	;# 
  2198     0616                     CWG2CLK         equ	1558	;# 
  2199     0616                     CWG2CLKCON      equ	1558	;# 
  2200     0617                     CWG2ISM         equ	1559	;# 
  2201     0617                     CWG2DAT         equ	1559	;# 
  2202     0618                     CWG2DBR         equ	1560	;# 
  2203     0619                     CWG2DBF         equ	1561	;# 
  2204     061A                     CWG2CON0        equ	1562	;# 
  2205     061B                     CWG2CON1        equ	1563	;# 
  2206     061C                     CWG2AS0         equ	1564	;# 
  2207     061D                     CWG2AS1         equ	1565	;# 
  2208     061E                     CWG2STR         equ	1566	;# 
  2209     070C                     PIR0            equ	1804	;# 
  2210     070D                     PIR1            equ	1805	;# 
  2211     070E                     PIR2            equ	1806	;# 
  2212     070F                     PIR3            equ	1807	;# 
  2213     0710                     PIR4            equ	1808	;# 
  2214     0711                     PIR5            equ	1809	;# 
  2215     0712                     PIR6            equ	1810	;# 
  2216     0713                     PIR7            equ	1811	;# 
  2217     0714                     PIR8            equ	1812	;# 
  2218     0716                     PIE0            equ	1814	;# 
  2219     0717                     PIE1            equ	1815	;# 
  2220     0718                     PIE2            equ	1816	;# 
  2221     0719                     PIE3            equ	1817	;# 
  2222     071A                     PIE4            equ	1818	;# 
  2223     071B                     PIE5            equ	1819	;# 
  2224     071C                     PIE6            equ	1820	;# 
  2225     071D                     PIE7            equ	1821	;# 
  2226     071E                     PIE8            equ	1822	;# 
  2227     0796                     PMD0            equ	1942	;# 
  2228     0797                     PMD1            equ	1943	;# 
  2229     0798                     PMD2            equ	1944	;# 
  2230     0799                     PMD3            equ	1945	;# 
  2231     079A                     PMD4            equ	1946	;# 
  2232     079B                     PMD5            equ	1947	;# 
  2233     079C                     PMD6            equ	1948	;# 
  2234     079D                     PMD7            equ	1949	;# 
  2235     080C                     WDTCON0         equ	2060	;# 
  2236     080D                     WDTCON1         equ	2061	;# 
  2237     080E                     WDTPSL          equ	2062	;# 
  2238     080F                     WDTPSH          equ	2063	;# 
  2239     0810                     WDTTMR          equ	2064	;# 
  2240     0811                     BORCON          equ	2065	;# 
  2241     0812                     VREGCON         equ	2066	;# 
  2242     0813                     PCON0           equ	2067	;# 
  2243     0814                     PCON1           equ	2068	;# 
  2244     081A                     NVMADR          equ	2074	;# 
  2245     081A                     NVMADRL         equ	2074	;# 
  2246     081B                     NVMADRH         equ	2075	;# 
  2247     081C                     NVMDAT          equ	2076	;# 
  2248     081C                     NVMDATL         equ	2076	;# 
  2249     081D                     NVMDATH         equ	2077	;# 
  2250     081E                     NVMCON1         equ	2078	;# 
  2251     081F                     NVMCON2         equ	2079	;# 
  2252     088C                     CPUDOZE         equ	2188	;# 
  2253     088D                     OSCCON1         equ	2189	;# 
  2254     088E                     OSCCON2         equ	2190	;# 
  2255     088F                     OSCCON3         equ	2191	;# 
  2256     0890                     OSCSTAT         equ	2192	;# 
  2257     0891                     OSCEN           equ	2193	;# 
  2258     0892                     OSCTUNE         equ	2194	;# 
  2259     0893                     OSCFRQ          equ	2195	;# 
  2260     0895                     CLKRCON         equ	2197	;# 
  2261     0896                     CLKRCLK         equ	2198	;# 
  2262     0897                     MD1CON0         equ	2199	;# 
  2263     0898                     MD1CON1         equ	2200	;# 
  2264     0899                     MD1SRC          equ	2201	;# 
  2265     089A                     MD1CARL         equ	2202	;# 
  2266     089B                     MD1CARH         equ	2203	;# 
  2267     090C                     FVRCON          equ	2316	;# 
  2268     090E                     DAC1CON0        equ	2318	;# 
  2269     090F                     DAC1CON1        equ	2319	;# 
  2270     091F                     ZCDCON          equ	2335	;# 
  2271     098F                     CMOUT           equ	2447	;# 
  2272     098F                     CMSTAT          equ	2447	;# 
  2273     0990                     CM1CON0         equ	2448	;# 
  2274     0991                     CM1CON1         equ	2449	;# 
  2275     0992                     CM1NCH          equ	2450	;# 
  2276     0993                     CM1PCH          equ	2451	;# 
  2277     0994                     CM2CON0         equ	2452	;# 
  2278     0995                     CM2CON1         equ	2453	;# 
  2279     0996                     CM2NCH          equ	2454	;# 
  2280     0997                     CM2PCH          equ	2455	;# 
  2281     1E0F                     CLCDATA         equ	7695	;# 
  2282     1E10                     CLC1CON         equ	7696	;# 
  2283     1E11                     CLC1POL         equ	7697	;# 
  2284     1E12                     CLC1SEL0        equ	7698	;# 
  2285     1E13                     CLC1SEL1        equ	7699	;# 
  2286     1E14                     CLC1SEL2        equ	7700	;# 
  2287     1E15                     CLC1SEL3        equ	7701	;# 
  2288     1E16                     CLC1GLS0        equ	7702	;# 
  2289     1E17                     CLC1GLS1        equ	7703	;# 
  2290     1E18                     CLC1GLS2        equ	7704	;# 
  2291     1E19                     CLC1GLS3        equ	7705	;# 
  2292     1E1A                     CLC2CON         equ	7706	;# 
  2293     1E1B                     CLC2POL         equ	7707	;# 
  2294     1E1C                     CLC2SEL0        equ	7708	;# 
  2295     1E1D                     CLC2SEL1        equ	7709	;# 
  2296     1E1E                     CLC2SEL2        equ	7710	;# 
  2297     1E1F                     CLC2SEL3        equ	7711	;# 
  2298     1E20                     CLC2GLS0        equ	7712	;# 
  2299     1E21                     CLC2GLS1        equ	7713	;# 
  2300     1E22                     CLC2GLS2        equ	7714	;# 
  2301     1E23                     CLC2GLS3        equ	7715	;# 
  2302     1E24                     CLC3CON         equ	7716	;# 
  2303     1E25                     CLC3POL         equ	7717	;# 
  2304     1E26                     CLC3SEL0        equ	7718	;# 
  2305     1E27                     CLC3SEL1        equ	7719	;# 
  2306     1E28                     CLC3SEL2        equ	7720	;# 
  2307     1E29                     CLC3SEL3        equ	7721	;# 
  2308     1E2A                     CLC3GLS0        equ	7722	;# 
  2309     1E2B                     CLC3GLS1        equ	7723	;# 
  2310     1E2C                     CLC3GLS2        equ	7724	;# 
  2311     1E2D                     CLC3GLS3        equ	7725	;# 
  2312     1E2E                     CLC4CON         equ	7726	;# 
  2313     1E2F                     CLC4POL         equ	7727	;# 
  2314     1E30                     CLC4SEL0        equ	7728	;# 
  2315     1E31                     CLC4SEL1        equ	7729	;# 
  2316     1E32                     CLC4SEL2        equ	7730	;# 
  2317     1E33                     CLC4SEL3        equ	7731	;# 
  2318     1E34                     CLC4GLS0        equ	7732	;# 
  2319     1E35                     CLC4GLS1        equ	7733	;# 
  2320     1E36                     CLC4GLS2        equ	7734	;# 
  2321     1E37                     CLC4GLS3        equ	7735	;# 
  2322     1E8F                     PPSLOCK         equ	7823	;# 
  2323     1E90                     INTPPS          equ	7824	;# 
  2324     1E91                     T0CKIPPS        equ	7825	;# 
  2325     1E92                     T1CKIPPS        equ	7826	;# 
  2326     1E93                     T1GPPS          equ	7827	;# 
  2327     1E94                     T3CKIPPS        equ	7828	;# 
  2328     1E95                     T3GPPS          equ	7829	;# 
  2329     1E96                     T5CKIPPS        equ	7830	;# 
  2330     1E97                     T5GPPS          equ	7831	;# 
  2331     1E9C                     T2INPPS         equ	7836	;# 
  2332     1E9D                     T4INPPS         equ	7837	;# 
  2333     1E9E                     T6INPPS         equ	7838	;# 
  2334     1EA1                     CCP1PPS         equ	7841	;# 
  2335     1EA2                     CCP2PPS         equ	7842	;# 
  2336     1EA3                     CCP3PPS         equ	7843	;# 
  2337     1EA4                     CCP4PPS         equ	7844	;# 
  2338     1EA9                     SMT1WINPPS      equ	7849	;# 
  2339     1EAA                     SMT1SIGPPS      equ	7850	;# 
  2340     1EB1                     CWG1PPS         equ	7857	;# 
  2341     1EB2                     CWG2PPS         equ	7858	;# 
  2342     1EB8                     MDCARLPPS       equ	7864	;# 
  2343     1EB9                     MDCARHPPS       equ	7865	;# 
  2344     1EBA                     MDSRCPPS        equ	7866	;# 
  2345     1EBB                     CLCIN0PPS       equ	7867	;# 
  2346     1EBC                     CLCIN1PPS       equ	7868	;# 
  2347     1EBD                     CLCIN2PPS       equ	7869	;# 
  2348     1EBE                     CLCIN3PPS       equ	7870	;# 
  2349     1EC3                     ADACTPPS        equ	7875	;# 
  2350     1EC5                     SSP1CLKPPS      equ	7877	;# 
  2351     1EC6                     SSP1DATPPS      equ	7878	;# 
  2352     1EC7                     SSP1SSPPS       equ	7879	;# 
  2353     1EC8                     SSP2CLKPPS      equ	7880	;# 
  2354     1EC9                     SSP2DATPPS      equ	7881	;# 
  2355     1ECA                     SSP2SSPPS       equ	7882	;# 
  2356     1ECB                     RX1DTPPS        equ	7883	;# 
  2357     1ECC                     TX1CKPPS        equ	7884	;# 
  2358     1F10                     RA0PPS          equ	7952	;# 
  2359     1F11                     RA1PPS          equ	7953	;# 
  2360     1F12                     RA2PPS          equ	7954	;# 
  2361     1F14                     RA4PPS          equ	7956	;# 
  2362     1F15                     RA5PPS          equ	7957	;# 
  2363     1F20                     RC0PPS          equ	7968	;# 
  2364     1F21                     RC1PPS          equ	7969	;# 
  2365     1F22                     RC2PPS          equ	7970	;# 
  2366     1F23                     RC3PPS          equ	7971	;# 
  2367     1F24                     RC4PPS          equ	7972	;# 
  2368     1F25                     RC5PPS          equ	7973	;# 
  2369     1F38                     ANSELA          equ	7992	;# 
  2370     1F39                     WPUA            equ	7993	;# 
  2371     1F3A                     ODCONA          equ	7994	;# 
  2372     1F3B                     SLRCONA         equ	7995	;# 
  2373     1F3C                     INLVLA          equ	7996	;# 
  2374     1F3D                     IOCAP           equ	7997	;# 
  2375     1F3E                     IOCAN           equ	7998	;# 
  2376     1F3F                     IOCAF           equ	7999	;# 
  2377     1F4E                     ANSELC          equ	8014	;# 
  2378     1F4F                     WPUC            equ	8015	;# 
  2379     1F50                     ODCONC          equ	8016	;# 
  2380     1F51                     SLRCONC         equ	8017	;# 
  2381     1F52                     INLVLC          equ	8018	;# 
  2382     1F53                     IOCCP           equ	8019	;# 
  2383     1F54                     IOCCN           equ	8020	;# 
  2384     1F55                     IOCCF           equ	8021	;# 
  2385     1FE4                     STATUS_SHAD     equ	8164	;# 
  2386     1FE5                     WREG_SHAD       equ	8165	;# 
  2387     1FE6                     BSR_SHAD        equ	8166	;# 
  2388     1FE7                     PCLATH_SHAD     equ	8167	;# 
  2389     1FE8                     FSR0_SHAD       equ	8168	;# 
  2390     1FE8                     FSR0L_SHAD      equ	8168	;# 
  2391     1FE9                     FSR0H_SHAD      equ	8169	;# 
  2392     1FEA                     FSR1L_SHAD      equ	8170	;# 
  2393     1FEB                     FSR1H_SHAD      equ	8171	;# 
  2394     1FED                     STKPTR          equ	8173	;# 
  2395     1FEE                     TOSL            equ	8174	;# 
  2396     1FEF                     TOSH            equ	8175	;# 
  2397     0000                     INDF0           equ	0	;# 
  2398     0001                     INDF1           equ	1	;# 
  2399     0002                     PCL             equ	2	;# 
  2400     0003                     STATUS          equ	3	;# 
  2401     0004                     FSR0L           equ	4	;# 
  2402     0005                     FSR0H           equ	5	;# 
  2403     0006                     FSR1L           equ	6	;# 
  2404     0007                     FSR1H           equ	7	;# 
  2405     0008                     BSR             equ	8	;# 
  2406     0009                     WREG            equ	9	;# 
  2407     000A                     PCLATH          equ	10	;# 
  2408     000B                     INTCON          equ	11	;# 
  2409     000C                     PORTA           equ	12	;# 
  2410     000E                     PORTC           equ	14	;# 
  2411     0012                     TRISA           equ	18	;# 
  2412     0014                     TRISC           equ	20	;# 
  2413     0018                     LATA            equ	24	;# 
  2414     001A                     LATC            equ	26	;# 
  2415     008C                     ADLTH           equ	140	;# 
  2416     008C                     ADLTHL          equ	140	;# 
  2417     008D                     ADLTHH          equ	141	;# 
  2418     008E                     ADUTH           equ	142	;# 
  2419     008E                     ADUTHL          equ	142	;# 
  2420     008F                     ADUTHH          equ	143	;# 
  2421     0090                     ADERR           equ	144	;# 
  2422     0090                     ADERRL          equ	144	;# 
  2423     0091                     ADERRH          equ	145	;# 
  2424     0092                     ADSTPT          equ	146	;# 
  2425     0092                     ADSTPTL         equ	146	;# 
  2426     0093                     ADSTPTH         equ	147	;# 
  2427     0094                     ADFLTR          equ	148	;# 
  2428     0094                     ADFLTRL         equ	148	;# 
  2429     0095                     ADFLTRH         equ	149	;# 
  2430     0096                     ADACC           equ	150	;# 
  2431     0096                     ADACCL          equ	150	;# 
  2432     0097                     ADACCH          equ	151	;# 
  2433     0098                     ADACCU          equ	152	;# 
  2434     0099                     ADCNT           equ	153	;# 
  2435     009A                     ADRPT           equ	154	;# 
  2436     009B                     ADPREV          equ	155	;# 
  2437     009B                     ADPREVL         equ	155	;# 
  2438     009C                     ADPREVH         equ	156	;# 
  2439     009D                     ADRES           equ	157	;# 
  2440     009D                     ADRESL          equ	157	;# 
  2441     009E                     ADRESH          equ	158	;# 
  2442     009F                     ADPCH           equ	159	;# 
  2443     010C                     ADACQ           equ	268	;# 
  2444     010C                     ADACQL          equ	268	;# 
  2445     010D                     ADACQH          equ	269	;# 
  2446     010E                     ADCAP           equ	270	;# 
  2447     010F                     ADPRE           equ	271	;# 
  2448     010F                     ADPREL          equ	271	;# 
  2449     0110                     ADPREH          equ	272	;# 
  2450     0111                     ADCON0          equ	273	;# 
  2451     0112                     ADCON1          equ	274	;# 
  2452     0113                     ADCON2          equ	275	;# 
  2453     0114                     ADCON3          equ	276	;# 
  2454     0115                     ADSTAT          equ	277	;# 
  2455     0116                     ADREF           equ	278	;# 
  2456     0117                     ADACT           equ	279	;# 
  2457     0118                     ADCLK           equ	280	;# 
  2458     0119                     RC1REG          equ	281	;# 
  2459     0119                     RCREG           equ	281	;# 
  2460     0119                     RCREG1          equ	281	;# 
  2461     011A                     TX1REG          equ	282	;# 
  2462     011A                     TXREG1          equ	282	;# 
  2463     011A                     TXREG           equ	282	;# 
  2464     011B                     SP1BRG          equ	283	;# 
  2465     011B                     SP1BRGL         equ	283	;# 
  2466     011B                     SPBRG           equ	283	;# 
  2467     011B                     SPBRG1          equ	283	;# 
  2468     011B                     SPBRGL          equ	283	;# 
  2469     011C                     SP1BRGH         equ	284	;# 
  2470     011C                     SPBRGH          equ	284	;# 
  2471     011C                     SPBRGH1         equ	284	;# 
  2472     011D                     RC1STA          equ	285	;# 
  2473     011D                     RCSTA1          equ	285	;# 
  2474     011D                     RCSTA           equ	285	;# 
  2475     011E                     TX1STA          equ	286	;# 
  2476     011E                     TXSTA1          equ	286	;# 
  2477     011E                     TXSTA           equ	286	;# 
  2478     011F                     BAUD1CON        equ	287	;# 
  2479     011F                     BAUDCON1        equ	287	;# 
  2480     011F                     BAUDCTL1        equ	287	;# 
  2481     011F                     BAUDCON         equ	287	;# 
  2482     011F                     BAUDCTL         equ	287	;# 
  2483     018C                     SSP1BUF         equ	396	;# 
  2484     018D                     SSP1ADD         equ	397	;# 
  2485     018E                     SSP1MSK         equ	398	;# 
  2486     018F                     SSP1STAT        equ	399	;# 
  2487     0190                     SSP1CON1        equ	400	;# 
  2488     0191                     SSP1CON2        equ	401	;# 
  2489     0192                     SSP1CON3        equ	402	;# 
  2490     0196                     SSP2BUF         equ	406	;# 
  2491     0197                     SSP2ADD         equ	407	;# 
  2492     0198                     SSP2MSK         equ	408	;# 
  2493     0199                     SSP2STAT        equ	409	;# 
  2494     019A                     SSP2CON1        equ	410	;# 
  2495     019B                     SSP2CON2        equ	411	;# 
  2496     019C                     SSP2CON3        equ	412	;# 
  2497     020C                     TMR1L           equ	524	;# 
  2498     020D                     TMR1H           equ	525	;# 
  2499     020E                     T1CON           equ	526	;# 
  2500     020E                     TMR1CON         equ	526	;# 
  2501     020F                     T1GCON          equ	527	;# 
  2502     020F                     TMR1GCON        equ	527	;# 
  2503     0210                     T1GATE          equ	528	;# 
  2504     0210                     TMR1GATE        equ	528	;# 
  2505     0211                     T1CLK           equ	529	;# 
  2506     0211                     TMR1CLK         equ	529	;# 
  2507     0212                     TMR3L           equ	530	;# 
  2508     0213                     TMR3H           equ	531	;# 
  2509     0214                     T3CON           equ	532	;# 
  2510     0214                     TMR3CON         equ	532	;# 
  2511     0215                     T3GCON          equ	533	;# 
  2512     0215                     TMR3GCON        equ	533	;# 
  2513     0216                     T3GATE          equ	534	;# 
  2514     0216                     TMR3GATE        equ	534	;# 
  2515     0217                     T3CLK           equ	535	;# 
  2516     0217                     TMR3CLK         equ	535	;# 
  2517     0218                     TMR5L           equ	536	;# 
  2518     0219                     TMR5H           equ	537	;# 
  2519     021A                     T5CON           equ	538	;# 
  2520     021A                     TMR5CON         equ	538	;# 
  2521     021B                     T5GCON          equ	539	;# 
  2522     021B                     TMR5GCON        equ	539	;# 
  2523     021C                     T5GATE          equ	540	;# 
  2524     021C                     TMR5GATE        equ	540	;# 
  2525     021D                     T5CLK           equ	541	;# 
  2526     021D                     TMR5CLK         equ	541	;# 
  2527     021E                     CCPTMRS0        equ	542	;# 
  2528     021F                     CCPTMRS1        equ	543	;# 
  2529     028C                     T2TMR           equ	652	;# 
  2530     028C                     TMR2            equ	652	;# 
  2531     028D                     T2PR            equ	653	;# 
  2532     028D                     PR2             equ	653	;# 
  2533     028E                     T2CON           equ	654	;# 
  2534     028F                     T2HLT           equ	655	;# 
  2535     0290                     T2CLKCON        equ	656	;# 
  2536     0291                     T2RST           equ	657	;# 
  2537     0292                     T4TMR           equ	658	;# 
  2538     0292                     TMR4            equ	658	;# 
  2539     0293                     T4PR            equ	659	;# 
  2540     0293                     PR4             equ	659	;# 
  2541     0294                     T4CON           equ	660	;# 
  2542     0295                     T4HLT           equ	661	;# 
  2543     0296                     T4CLKCON        equ	662	;# 
  2544     0297                     T4RST           equ	663	;# 
  2545     0298                     T6TMR           equ	664	;# 
  2546     0298                     TMR6            equ	664	;# 
  2547     0299                     T6PR            equ	665	;# 
  2548     0299                     PR6             equ	665	;# 
  2549     029A                     T6CON           equ	666	;# 
  2550     029B                     T6HLT           equ	667	;# 
  2551     029C                     T6CLKCON        equ	668	;# 
  2552     029D                     T6RST           equ	669	;# 
  2553     029F                     ADCPCON0        equ	671	;# 
  2554     030C                     CCPR1           equ	780	;# 
  2555     030C                     CCPR1L          equ	780	;# 
  2556     030D                     CCPR1H          equ	781	;# 
  2557     030E                     CCP1CON         equ	782	;# 
  2558     030F                     CCP1CAP         equ	783	;# 
  2559     0310                     CCPR2           equ	784	;# 
  2560     0310                     CCPR2L          equ	784	;# 
  2561     0311                     CCPR2H          equ	785	;# 
  2562     0312                     CCP2CON         equ	786	;# 
  2563     0313                     CCP2CAP         equ	787	;# 
  2564     0314                     CCPR3           equ	788	;# 
  2565     0314                     CCPR3L          equ	788	;# 
  2566     0315                     CCPR3H          equ	789	;# 
  2567     0316                     CCP3CON         equ	790	;# 
  2568     0317                     CCP3CAP         equ	791	;# 
  2569     0318                     CCPR4           equ	792	;# 
  2570     0318                     CCPR4L          equ	792	;# 
  2571     0319                     CCPR4H          equ	793	;# 
  2572     031A                     CCP4CON         equ	794	;# 
  2573     031B                     CCP4CAP         equ	795	;# 
  2574     038C                     PWM6DC          equ	908	;# 
  2575     038C                     PWM6DCL         equ	908	;# 
  2576     038D                     PWM6DCH         equ	909	;# 
  2577     038E                     PWM6CON         equ	910	;# 
  2578     0390                     PWM7DC          equ	912	;# 
  2579     0390                     PWM7DCL         equ	912	;# 
  2580     0391                     PWM7DCH         equ	913	;# 
  2581     0392                     PWM7CON         equ	914	;# 
  2582     048C                     SMT1TMR         equ	1164	;# 
  2583     048C                     SMT1TMRL        equ	1164	;# 
  2584     048D                     SMT1TMRH        equ	1165	;# 
  2585     048E                     SMT1TMRU        equ	1166	;# 
  2586     048F                     SMT1CPR         equ	1167	;# 
  2587     048F                     SMT1CPRL        equ	1167	;# 
  2588     0490                     SMT1CPRH        equ	1168	;# 
  2589     0491                     SMT1CPRU        equ	1169	;# 
  2590     0492                     SMT1CPW         equ	1170	;# 
  2591     0492                     SMT1CPWL        equ	1170	;# 
  2592     0493                     SMT1CPWH        equ	1171	;# 
  2593     0494                     SMT1CPWU        equ	1172	;# 
  2594     0495                     SMT1PR          equ	1173	;# 
  2595     0495                     SMT1PRL         equ	1173	;# 
  2596     0496                     SMT1PRH         equ	1174	;# 
  2597     0497                     SMT1PRU         equ	1175	;# 
  2598     0498                     SMT1CON0        equ	1176	;# 
  2599     0499                     SMT1CON1        equ	1177	;# 
  2600     049A                     SMT1STAT        equ	1178	;# 
  2601     049B                     SMT1CLK         equ	1179	;# 
  2602     049C                     SMT1SIG         equ	1180	;# 
  2603     049D                     SMT1WIN         equ	1181	;# 
  2604     058C                     NCO1ACC         equ	1420	;# 
  2605     058C                     NCO1ACCL        equ	1420	;# 
  2606     058D                     NCO1ACCH        equ	1421	;# 
  2607     058E                     NCO1ACCU        equ	1422	;# 
  2608     058F                     NCO1INC         equ	1423	;# 
  2609     058F                     NCO1INCL        equ	1423	;# 
  2610     0590                     NCO1INCH        equ	1424	;# 
  2611     0591                     NCO1INCU        equ	1425	;# 
  2612     0592                     NCO1CON         equ	1426	;# 
  2613     0593                     NCO1CLK         equ	1427	;# 
  2614     059C                     TMR0L           equ	1436	;# 
  2615     059C                     TMR0            equ	1436	;# 
  2616     059D                     TMR0H           equ	1437	;# 
  2617     059D                     PR0             equ	1437	;# 
  2618     059E                     T0CON0          equ	1438	;# 
  2619     059F                     T0CON1          equ	1439	;# 
  2620     060C                     CWG1CLK         equ	1548	;# 
  2621     060C                     CWG1CLKCON      equ	1548	;# 
  2622     060D                     CWG1ISM         equ	1549	;# 
  2623     060D                     CWG1DAT         equ	1549	;# 
  2624     060E                     CWG1DBR         equ	1550	;# 
  2625     060F                     CWG1DBF         equ	1551	;# 
  2626     0610                     CWG1CON0        equ	1552	;# 
  2627     0611                     CWG1CON1        equ	1553	;# 
  2628     0612                     CWG1AS0         equ	1554	;# 
  2629     0613                     CWG1AS1         equ	1555	;# 
  2630     0614                     CWG1STR         equ	1556	;# 
  2631     0616                     CWG2CLK         equ	1558	;# 
  2632     0616                     CWG2CLKCON      equ	1558	;# 
  2633     0617                     CWG2ISM         equ	1559	;# 
  2634     0617                     CWG2DAT         equ	1559	;# 
  2635     0618                     CWG2DBR         equ	1560	;# 
  2636     0619                     CWG2DBF         equ	1561	;# 
  2637     061A                     CWG2CON0        equ	1562	;# 
  2638     061B                     CWG2CON1        equ	1563	;# 
  2639     061C                     CWG2AS0         equ	1564	;# 
  2640     061D                     CWG2AS1         equ	1565	;# 
  2641     061E                     CWG2STR         equ	1566	;# 
  2642     070C                     PIR0            equ	1804	;# 
  2643     070D                     PIR1            equ	1805	;# 
  2644     070E                     PIR2            equ	1806	;# 
  2645     070F                     PIR3            equ	1807	;# 
  2646     0710                     PIR4            equ	1808	;# 
  2647     0711                     PIR5            equ	1809	;# 
  2648     0712                     PIR6            equ	1810	;# 
  2649     0713                     PIR7            equ	1811	;# 
  2650     0714                     PIR8            equ	1812	;# 
  2651     0716                     PIE0            equ	1814	;# 
  2652     0717                     PIE1            equ	1815	;# 
  2653     0718                     PIE2            equ	1816	;# 
  2654     0719                     PIE3            equ	1817	;# 
  2655     071A                     PIE4            equ	1818	;# 
  2656     071B                     PIE5            equ	1819	;# 
  2657     071C                     PIE6            equ	1820	;# 
  2658     071D                     PIE7            equ	1821	;# 
  2659     071E                     PIE8            equ	1822	;# 
  2660     0796                     PMD0            equ	1942	;# 
  2661     0797                     PMD1            equ	1943	;# 
  2662     0798                     PMD2            equ	1944	;# 
  2663     0799                     PMD3            equ	1945	;# 
  2664     079A                     PMD4            equ	1946	;# 
  2665     079B                     PMD5            equ	1947	;# 
  2666     079C                     PMD6            equ	1948	;# 
  2667     079D                     PMD7            equ	1949	;# 
  2668     080C                     WDTCON0         equ	2060	;# 
  2669     080D                     WDTCON1         equ	2061	;# 
  2670     080E                     WDTPSL          equ	2062	;# 
  2671     080F                     WDTPSH          equ	2063	;# 
  2672     0810                     WDTTMR          equ	2064	;# 
  2673     0811                     BORCON          equ	2065	;# 
  2674     0812                     VREGCON         equ	2066	;# 
  2675     0813                     PCON0           equ	2067	;# 
  2676     0814                     PCON1           equ	2068	;# 
  2677     081A                     NVMADR          equ	2074	;# 
  2678     081A                     NVMADRL         equ	2074	;# 
  2679     081B                     NVMADRH         equ	2075	;# 
  2680     081C                     NVMDAT          equ	2076	;# 
  2681     081C                     NVMDATL         equ	2076	;# 
  2682     081D                     NVMDATH         equ	2077	;# 
  2683     081E                     NVMCON1         equ	2078	;# 
  2684     081F                     NVMCON2         equ	2079	;# 
  2685     088C                     CPUDOZE         equ	2188	;# 
  2686     088D                     OSCCON1         equ	2189	;# 
  2687     088E                     OSCCON2         equ	2190	;# 
  2688     088F                     OSCCON3         equ	2191	;# 
  2689     0890                     OSCSTAT         equ	2192	;# 
  2690     0891                     OSCEN           equ	2193	;# 
  2691     0892                     OSCTUNE         equ	2194	;# 
  2692     0893                     OSCFRQ          equ	2195	;# 
  2693     0895                     CLKRCON         equ	2197	;# 
  2694     0896                     CLKRCLK         equ	2198	;# 
  2695     0897                     MD1CON0         equ	2199	;# 
  2696     0898                     MD1CON1         equ	2200	;# 
  2697     0899                     MD1SRC          equ	2201	;# 
  2698     089A                     MD1CARL         equ	2202	;# 
  2699     089B                     MD1CARH         equ	2203	;# 
  2700     090C                     FVRCON          equ	2316	;# 
  2701     090E                     DAC1CON0        equ	2318	;# 
  2702     090F                     DAC1CON1        equ	2319	;# 
  2703     091F                     ZCDCON          equ	2335	;# 
  2704     098F                     CMOUT           equ	2447	;# 
  2705     098F                     CMSTAT          equ	2447	;# 
  2706     0990                     CM1CON0         equ	2448	;# 
  2707     0991                     CM1CON1         equ	2449	;# 
  2708     0992                     CM1NCH          equ	2450	;# 
  2709     0993                     CM1PCH          equ	2451	;# 
  2710     0994                     CM2CON0         equ	2452	;# 
  2711     0995                     CM2CON1         equ	2453	;# 
  2712     0996                     CM2NCH          equ	2454	;# 
  2713     0997                     CM2PCH          equ	2455	;# 
  2714     1E0F                     CLCDATA         equ	7695	;# 
  2715     1E10                     CLC1CON         equ	7696	;# 
  2716     1E11                     CLC1POL         equ	7697	;# 
  2717     1E12                     CLC1SEL0        equ	7698	;# 
  2718     1E13                     CLC1SEL1        equ	7699	;# 
  2719     1E14                     CLC1SEL2        equ	7700	;# 
  2720     1E15                     CLC1SEL3        equ	7701	;# 
  2721     1E16                     CLC1GLS0        equ	7702	;# 
  2722     1E17                     CLC1GLS1        equ	7703	;# 
  2723     1E18                     CLC1GLS2        equ	7704	;# 
  2724     1E19                     CLC1GLS3        equ	7705	;# 
  2725     1E1A                     CLC2CON         equ	7706	;# 
  2726     1E1B                     CLC2POL         equ	7707	;# 
  2727     1E1C                     CLC2SEL0        equ	7708	;# 
  2728     1E1D                     CLC2SEL1        equ	7709	;# 
  2729     1E1E                     CLC2SEL2        equ	7710	;# 
  2730     1E1F                     CLC2SEL3        equ	7711	;# 
  2731     1E20                     CLC2GLS0        equ	7712	;# 
  2732     1E21                     CLC2GLS1        equ	7713	;# 
  2733     1E22                     CLC2GLS2        equ	7714	;# 
  2734     1E23                     CLC2GLS3        equ	7715	;# 
  2735     1E24                     CLC3CON         equ	7716	;# 
  2736     1E25                     CLC3POL         equ	7717	;# 
  2737     1E26                     CLC3SEL0        equ	7718	;# 
  2738     1E27                     CLC3SEL1        equ	7719	;# 
  2739     1E28                     CLC3SEL2        equ	7720	;# 
  2740     1E29                     CLC3SEL3        equ	7721	;# 
  2741     1E2A                     CLC3GLS0        equ	7722	;# 
  2742     1E2B                     CLC3GLS1        equ	7723	;# 
  2743     1E2C                     CLC3GLS2        equ	7724	;# 
  2744     1E2D                     CLC3GLS3        equ	7725	;# 
  2745     1E2E                     CLC4CON         equ	7726	;# 
  2746     1E2F                     CLC4POL         equ	7727	;# 
  2747     1E30                     CLC4SEL0        equ	7728	;# 
  2748     1E31                     CLC4SEL1        equ	7729	;# 
  2749     1E32                     CLC4SEL2        equ	7730	;# 
  2750     1E33                     CLC4SEL3        equ	7731	;# 
  2751     1E34                     CLC4GLS0        equ	7732	;# 
  2752     1E35                     CLC4GLS1        equ	7733	;# 
  2753     1E36                     CLC4GLS2        equ	7734	;# 
  2754     1E37                     CLC4GLS3        equ	7735	;# 
  2755     1E8F                     PPSLOCK         equ	7823	;# 
  2756     1E90                     INTPPS          equ	7824	;# 
  2757     1E91                     T0CKIPPS        equ	7825	;# 
  2758     1E92                     T1CKIPPS        equ	7826	;# 
  2759     1E93                     T1GPPS          equ	7827	;# 
  2760     1E94                     T3CKIPPS        equ	7828	;# 
  2761     1E95                     T3GPPS          equ	7829	;# 
  2762     1E96                     T5CKIPPS        equ	7830	;# 
  2763     1E97                     T5GPPS          equ	7831	;# 
  2764     1E9C                     T2INPPS         equ	7836	;# 
  2765     1E9D                     T4INPPS         equ	7837	;# 
  2766     1E9E                     T6INPPS         equ	7838	;# 
  2767     1EA1                     CCP1PPS         equ	7841	;# 
  2768     1EA2                     CCP2PPS         equ	7842	;# 
  2769     1EA3                     CCP3PPS         equ	7843	;# 
  2770     1EA4                     CCP4PPS         equ	7844	;# 
  2771     1EA9                     SMT1WINPPS      equ	7849	;# 
  2772     1EAA                     SMT1SIGPPS      equ	7850	;# 
  2773     1EB1                     CWG1PPS         equ	7857	;# 
  2774     1EB2                     CWG2PPS         equ	7858	;# 
  2775     1EB8                     MDCARLPPS       equ	7864	;# 
  2776     1EB9                     MDCARHPPS       equ	7865	;# 
  2777     1EBA                     MDSRCPPS        equ	7866	;# 
  2778     1EBB                     CLCIN0PPS       equ	7867	;# 
  2779     1EBC                     CLCIN1PPS       equ	7868	;# 
  2780     1EBD                     CLCIN2PPS       equ	7869	;# 
  2781     1EBE                     CLCIN3PPS       equ	7870	;# 
  2782     1EC3                     ADACTPPS        equ	7875	;# 
  2783     1EC5                     SSP1CLKPPS      equ	7877	;# 
  2784     1EC6                     SSP1DATPPS      equ	7878	;# 
  2785     1EC7                     SSP1SSPPS       equ	7879	;# 
  2786     1EC8                     SSP2CLKPPS      equ	7880	;# 
  2787     1EC9                     SSP2DATPPS      equ	7881	;# 
  2788     1ECA                     SSP2SSPPS       equ	7882	;# 
  2789     1ECB                     RX1DTPPS        equ	7883	;# 
  2790     1ECC                     TX1CKPPS        equ	7884	;# 
  2791     1F10                     RA0PPS          equ	7952	;# 
  2792     1F11                     RA1PPS          equ	7953	;# 
  2793     1F12                     RA2PPS          equ	7954	;# 
  2794     1F14                     RA4PPS          equ	7956	;# 
  2795     1F15                     RA5PPS          equ	7957	;# 
  2796     1F20                     RC0PPS          equ	7968	;# 
  2797     1F21                     RC1PPS          equ	7969	;# 
  2798     1F22                     RC2PPS          equ	7970	;# 
  2799     1F23                     RC3PPS          equ	7971	;# 
  2800     1F24                     RC4PPS          equ	7972	;# 
  2801     1F25                     RC5PPS          equ	7973	;# 
  2802     1F38                     ANSELA          equ	7992	;# 
  2803     1F39                     WPUA            equ	7993	;# 
  2804     1F3A                     ODCONA          equ	7994	;# 
  2805     1F3B                     SLRCONA         equ	7995	;# 
  2806     1F3C                     INLVLA          equ	7996	;# 
  2807     1F3D                     IOCAP           equ	7997	;# 
  2808     1F3E                     IOCAN           equ	7998	;# 
  2809     1F3F                     IOCAF           equ	7999	;# 
  2810     1F4E                     ANSELC          equ	8014	;# 
  2811     1F4F                     WPUC            equ	8015	;# 
  2812     1F50                     ODCONC          equ	8016	;# 
  2813     1F51                     SLRCONC         equ	8017	;# 
  2814     1F52                     INLVLC          equ	8018	;# 
  2815     1F53                     IOCCP           equ	8019	;# 
  2816     1F54                     IOCCN           equ	8020	;# 
  2817     1F55                     IOCCF           equ	8021	;# 
  2818     1FE4                     STATUS_SHAD     equ	8164	;# 
  2819     1FE5                     WREG_SHAD       equ	8165	;# 
  2820     1FE6                     BSR_SHAD        equ	8166	;# 
  2821     1FE7                     PCLATH_SHAD     equ	8167	;# 
  2822     1FE8                     FSR0_SHAD       equ	8168	;# 
  2823     1FE8                     FSR0L_SHAD      equ	8168	;# 
  2824     1FE9                     FSR0H_SHAD      equ	8169	;# 
  2825     1FEA                     FSR1L_SHAD      equ	8170	;# 
  2826     1FEB                     FSR1H_SHAD      equ	8171	;# 
  2827     1FED                     STKPTR          equ	8173	;# 
  2828     1FEE                     TOSL            equ	8174	;# 
  2829     1FEF                     TOSH            equ	8175	;# 
  2830     0000                     INDF0           equ	0	;# 
  2831     0001                     INDF1           equ	1	;# 
  2832     0002                     PCL             equ	2	;# 
  2833     0003                     STATUS          equ	3	;# 
  2834     0004                     FSR0L           equ	4	;# 
  2835     0005                     FSR0H           equ	5	;# 
  2836     0006                     FSR1L           equ	6	;# 
  2837     0007                     FSR1H           equ	7	;# 
  2838     0008                     BSR             equ	8	;# 
  2839     0009                     WREG            equ	9	;# 
  2840     000A                     PCLATH          equ	10	;# 
  2841     000B                     INTCON          equ	11	;# 
  2842     000C                     PORTA           equ	12	;# 
  2843     000E                     PORTC           equ	14	;# 
  2844     0012                     TRISA           equ	18	;# 
  2845     0014                     TRISC           equ	20	;# 
  2846     0018                     LATA            equ	24	;# 
  2847     001A                     LATC            equ	26	;# 
  2848     008C                     ADLTH           equ	140	;# 
  2849     008C                     ADLTHL          equ	140	;# 
  2850     008D                     ADLTHH          equ	141	;# 
  2851     008E                     ADUTH           equ	142	;# 
  2852     008E                     ADUTHL          equ	142	;# 
  2853     008F                     ADUTHH          equ	143	;# 
  2854     0090                     ADERR           equ	144	;# 
  2855     0090                     ADERRL          equ	144	;# 
  2856     0091                     ADERRH          equ	145	;# 
  2857     0092                     ADSTPT          equ	146	;# 
  2858     0092                     ADSTPTL         equ	146	;# 
  2859     0093                     ADSTPTH         equ	147	;# 
  2860     0094                     ADFLTR          equ	148	;# 
  2861     0094                     ADFLTRL         equ	148	;# 
  2862     0095                     ADFLTRH         equ	149	;# 
  2863     0096                     ADACC           equ	150	;# 
  2864     0096                     ADACCL          equ	150	;# 
  2865     0097                     ADACCH          equ	151	;# 
  2866     0098                     ADACCU          equ	152	;# 
  2867     0099                     ADCNT           equ	153	;# 
  2868     009A                     ADRPT           equ	154	;# 
  2869     009B                     ADPREV          equ	155	;# 
  2870     009B                     ADPREVL         equ	155	;# 
  2871     009C                     ADPREVH         equ	156	;# 
  2872     009D                     ADRES           equ	157	;# 
  2873     009D                     ADRESL          equ	157	;# 
  2874     009E                     ADRESH          equ	158	;# 
  2875     009F                     ADPCH           equ	159	;# 
  2876     010C                     ADACQ           equ	268	;# 
  2877     010C                     ADACQL          equ	268	;# 
  2878     010D                     ADACQH          equ	269	;# 
  2879     010E                     ADCAP           equ	270	;# 
  2880     010F                     ADPRE           equ	271	;# 
  2881     010F                     ADPREL          equ	271	;# 
  2882     0110                     ADPREH          equ	272	;# 
  2883     0111                     ADCON0          equ	273	;# 
  2884     0112                     ADCON1          equ	274	;# 
  2885     0113                     ADCON2          equ	275	;# 
  2886     0114                     ADCON3          equ	276	;# 
  2887     0115                     ADSTAT          equ	277	;# 
  2888     0116                     ADREF           equ	278	;# 
  2889     0117                     ADACT           equ	279	;# 
  2890     0118                     ADCLK           equ	280	;# 
  2891     0119                     RC1REG          equ	281	;# 
  2892     0119                     RCREG           equ	281	;# 
  2893     0119                     RCREG1          equ	281	;# 
  2894     011A                     TX1REG          equ	282	;# 
  2895     011A                     TXREG1          equ	282	;# 
  2896     011A                     TXREG           equ	282	;# 
  2897     011B                     SP1BRG          equ	283	;# 
  2898     011B                     SP1BRGL         equ	283	;# 
  2899     011B                     SPBRG           equ	283	;# 
  2900     011B                     SPBRG1          equ	283	;# 
  2901     011B                     SPBRGL          equ	283	;# 
  2902     011C                     SP1BRGH         equ	284	;# 
  2903     011C                     SPBRGH          equ	284	;# 
  2904     011C                     SPBRGH1         equ	284	;# 
  2905     011D                     RC1STA          equ	285	;# 
  2906     011D                     RCSTA1          equ	285	;# 
  2907     011D                     RCSTA           equ	285	;# 
  2908     011E                     TX1STA          equ	286	;# 
  2909     011E                     TXSTA1          equ	286	;# 
  2910     011E                     TXSTA           equ	286	;# 
  2911     011F                     BAUD1CON        equ	287	;# 
  2912     011F                     BAUDCON1        equ	287	;# 
  2913     011F                     BAUDCTL1        equ	287	;# 
  2914     011F                     BAUDCON         equ	287	;# 
  2915     011F                     BAUDCTL         equ	287	;# 
  2916     018C                     SSP1BUF         equ	396	;# 
  2917     018D                     SSP1ADD         equ	397	;# 
  2918     018E                     SSP1MSK         equ	398	;# 
  2919     018F                     SSP1STAT        equ	399	;# 
  2920     0190                     SSP1CON1        equ	400	;# 
  2921     0191                     SSP1CON2        equ	401	;# 
  2922     0192                     SSP1CON3        equ	402	;# 
  2923     0196                     SSP2BUF         equ	406	;# 
  2924     0197                     SSP2ADD         equ	407	;# 
  2925     0198                     SSP2MSK         equ	408	;# 
  2926     0199                     SSP2STAT        equ	409	;# 
  2927     019A                     SSP2CON1        equ	410	;# 
  2928     019B                     SSP2CON2        equ	411	;# 
  2929     019C                     SSP2CON3        equ	412	;# 
  2930     020C                     TMR1L           equ	524	;# 
  2931     020D                     TMR1H           equ	525	;# 
  2932     020E                     T1CON           equ	526	;# 
  2933     020E                     TMR1CON         equ	526	;# 
  2934     020F                     T1GCON          equ	527	;# 
  2935     020F                     TMR1GCON        equ	527	;# 
  2936     0210                     T1GATE          equ	528	;# 
  2937     0210                     TMR1GATE        equ	528	;# 
  2938     0211                     T1CLK           equ	529	;# 
  2939     0211                     TMR1CLK         equ	529	;# 
  2940     0212                     TMR3L           equ	530	;# 
  2941     0213                     TMR3H           equ	531	;# 
  2942     0214                     T3CON           equ	532	;# 
  2943     0214                     TMR3CON         equ	532	;# 
  2944     0215                     T3GCON          equ	533	;# 
  2945     0215                     TMR3GCON        equ	533	;# 
  2946     0216                     T3GATE          equ	534	;# 
  2947     0216                     TMR3GATE        equ	534	;# 
  2948     0217                     T3CLK           equ	535	;# 
  2949     0217                     TMR3CLK         equ	535	;# 
  2950     0218                     TMR5L           equ	536	;# 
  2951     0219                     TMR5H           equ	537	;# 
  2952     021A                     T5CON           equ	538	;# 
  2953     021A                     TMR5CON         equ	538	;# 
  2954     021B                     T5GCON          equ	539	;# 
  2955     021B                     TMR5GCON        equ	539	;# 
  2956     021C                     T5GATE          equ	540	;# 
  2957     021C                     TMR5GATE        equ	540	;# 
  2958     021D                     T5CLK           equ	541	;# 
  2959     021D                     TMR5CLK         equ	541	;# 
  2960     021E                     CCPTMRS0        equ	542	;# 
  2961     021F                     CCPTMRS1        equ	543	;# 
  2962     028C                     T2TMR           equ	652	;# 
  2963     028C                     TMR2            equ	652	;# 
  2964     028D                     T2PR            equ	653	;# 
  2965     028D                     PR2             equ	653	;# 
  2966     028E                     T2CON           equ	654	;# 
  2967     028F                     T2HLT           equ	655	;# 
  2968     0290                     T2CLKCON        equ	656	;# 
  2969     0291                     T2RST           equ	657	;# 
  2970     0292                     T4TMR           equ	658	;# 
  2971     0292                     TMR4            equ	658	;# 
  2972     0293                     T4PR            equ	659	;# 
  2973     0293                     PR4             equ	659	;# 
  2974     0294                     T4CON           equ	660	;# 
  2975     0295                     T4HLT           equ	661	;# 
  2976     0296                     T4CLKCON        equ	662	;# 
  2977     0297                     T4RST           equ	663	;# 
  2978     0298                     T6TMR           equ	664	;# 
  2979     0298                     TMR6            equ	664	;# 
  2980     0299                     T6PR            equ	665	;# 
  2981     0299                     PR6             equ	665	;# 
  2982     029A                     T6CON           equ	666	;# 
  2983     029B                     T6HLT           equ	667	;# 
  2984     029C                     T6CLKCON        equ	668	;# 
  2985     029D                     T6RST           equ	669	;# 
  2986     029F                     ADCPCON0        equ	671	;# 
  2987     030C                     CCPR1           equ	780	;# 
  2988     030C                     CCPR1L          equ	780	;# 
  2989     030D                     CCPR1H          equ	781	;# 
  2990     030E                     CCP1CON         equ	782	;# 
  2991     030F                     CCP1CAP         equ	783	;# 
  2992     0310                     CCPR2           equ	784	;# 
  2993     0310                     CCPR2L          equ	784	;# 
  2994     0311                     CCPR2H          equ	785	;# 
  2995     0312                     CCP2CON         equ	786	;# 
  2996     0313                     CCP2CAP         equ	787	;# 
  2997     0314                     CCPR3           equ	788	;# 
  2998     0314                     CCPR3L          equ	788	;# 
  2999     0315                     CCPR3H          equ	789	;# 
  3000     0316                     CCP3CON         equ	790	;# 
  3001     0317                     CCP3CAP         equ	791	;# 
  3002     0318                     CCPR4           equ	792	;# 
  3003     0318                     CCPR4L          equ	792	;# 
  3004     0319                     CCPR4H          equ	793	;# 
  3005     031A                     CCP4CON         equ	794	;# 
  3006     031B                     CCP4CAP         equ	795	;# 
  3007     038C                     PWM6DC          equ	908	;# 
  3008     038C                     PWM6DCL         equ	908	;# 
  3009     038D                     PWM6DCH         equ	909	;# 
  3010     038E                     PWM6CON         equ	910	;# 
  3011     0390                     PWM7DC          equ	912	;# 
  3012     0390                     PWM7DCL         equ	912	;# 
  3013     0391                     PWM7DCH         equ	913	;# 
  3014     0392                     PWM7CON         equ	914	;# 
  3015     048C                     SMT1TMR         equ	1164	;# 
  3016     048C                     SMT1TMRL        equ	1164	;# 
  3017     048D                     SMT1TMRH        equ	1165	;# 
  3018     048E                     SMT1TMRU        equ	1166	;# 
  3019     048F                     SMT1CPR         equ	1167	;# 
  3020     048F                     SMT1CPRL        equ	1167	;# 
  3021     0490                     SMT1CPRH        equ	1168	;# 
  3022     0491                     SMT1CPRU        equ	1169	;# 
  3023     0492                     SMT1CPW         equ	1170	;# 
  3024     0492                     SMT1CPWL        equ	1170	;# 
  3025     0493                     SMT1CPWH        equ	1171	;# 
  3026     0494                     SMT1CPWU        equ	1172	;# 
  3027     0495                     SMT1PR          equ	1173	;# 
  3028     0495                     SMT1PRL         equ	1173	;# 
  3029     0496                     SMT1PRH         equ	1174	;# 
  3030     0497                     SMT1PRU         equ	1175	;# 
  3031     0498                     SMT1CON0        equ	1176	;# 
  3032     0499                     SMT1CON1        equ	1177	;# 
  3033     049A                     SMT1STAT        equ	1178	;# 
  3034     049B                     SMT1CLK         equ	1179	;# 
  3035     049C                     SMT1SIG         equ	1180	;# 
  3036     049D                     SMT1WIN         equ	1181	;# 
  3037     058C                     NCO1ACC         equ	1420	;# 
  3038     058C                     NCO1ACCL        equ	1420	;# 
  3039     058D                     NCO1ACCH        equ	1421	;# 
  3040     058E                     NCO1ACCU        equ	1422	;# 
  3041     058F                     NCO1INC         equ	1423	;# 
  3042     058F                     NCO1INCL        equ	1423	;# 
  3043     0590                     NCO1INCH        equ	1424	;# 
  3044     0591                     NCO1INCU        equ	1425	;# 
  3045     0592                     NCO1CON         equ	1426	;# 
  3046     0593                     NCO1CLK         equ	1427	;# 
  3047     059C                     TMR0L           equ	1436	;# 
  3048     059C                     TMR0            equ	1436	;# 
  3049     059D                     TMR0H           equ	1437	;# 
  3050     059D                     PR0             equ	1437	;# 
  3051     059E                     T0CON0          equ	1438	;# 
  3052     059F                     T0CON1          equ	1439	;# 
  3053     060C                     CWG1CLK         equ	1548	;# 
  3054     060C                     CWG1CLKCON      equ	1548	;# 
  3055     060D                     CWG1ISM         equ	1549	;# 
  3056     060D                     CWG1DAT         equ	1549	;# 
  3057     060E                     CWG1DBR         equ	1550	;# 
  3058     060F                     CWG1DBF         equ	1551	;# 
  3059     0610                     CWG1CON0        equ	1552	;# 
  3060     0611                     CWG1CON1        equ	1553	;# 
  3061     0612                     CWG1AS0         equ	1554	;# 
  3062     0613                     CWG1AS1         equ	1555	;# 
  3063     0614                     CWG1STR         equ	1556	;# 
  3064     0616                     CWG2CLK         equ	1558	;# 
  3065     0616                     CWG2CLKCON      equ	1558	;# 
  3066     0617                     CWG2ISM         equ	1559	;# 
  3067     0617                     CWG2DAT         equ	1559	;# 
  3068     0618                     CWG2DBR         equ	1560	;# 
  3069     0619                     CWG2DBF         equ	1561	;# 
  3070     061A                     CWG2CON0        equ	1562	;# 
  3071     061B                     CWG2CON1        equ	1563	;# 
  3072     061C                     CWG2AS0         equ	1564	;# 
  3073     061D                     CWG2AS1         equ	1565	;# 
  3074     061E                     CWG2STR         equ	1566	;# 
  3075     070C                     PIR0            equ	1804	;# 
  3076     070D                     PIR1            equ	1805	;# 
  3077     070E                     PIR2            equ	1806	;# 
  3078     070F                     PIR3            equ	1807	;# 
  3079     0710                     PIR4            equ	1808	;# 
  3080     0711                     PIR5            equ	1809	;# 
  3081     0712                     PIR6            equ	1810	;# 
  3082     0713                     PIR7            equ	1811	;# 
  3083     0714                     PIR8            equ	1812	;# 
  3084     0716                     PIE0            equ	1814	;# 
  3085     0717                     PIE1            equ	1815	;# 
  3086     0718                     PIE2            equ	1816	;# 
  3087     0719                     PIE3            equ	1817	;# 
  3088     071A                     PIE4            equ	1818	;# 
  3089     071B                     PIE5            equ	1819	;# 
  3090     071C                     PIE6            equ	1820	;# 
  3091     071D                     PIE7            equ	1821	;# 
  3092     071E                     PIE8            equ	1822	;# 
  3093     0796                     PMD0            equ	1942	;# 
  3094     0797                     PMD1            equ	1943	;# 
  3095     0798                     PMD2            equ	1944	;# 
  3096     0799                     PMD3            equ	1945	;# 
  3097     079A                     PMD4            equ	1946	;# 
  3098     079B                     PMD5            equ	1947	;# 
  3099     079C                     PMD6            equ	1948	;# 
  3100     079D                     PMD7            equ	1949	;# 
  3101     080C                     WDTCON0         equ	2060	;# 
  3102     080D                     WDTCON1         equ	2061	;# 
  3103     080E                     WDTPSL          equ	2062	;# 
  3104     080F                     WDTPSH          equ	2063	;# 
  3105     0810                     WDTTMR          equ	2064	;# 
  3106     0811                     BORCON          equ	2065	;# 
  3107     0812                     VREGCON         equ	2066	;# 
  3108     0813                     PCON0           equ	2067	;# 
  3109     0814                     PCON1           equ	2068	;# 
  3110     081A                     NVMADR          equ	2074	;# 
  3111     081A                     NVMADRL         equ	2074	;# 
  3112     081B                     NVMADRH         equ	2075	;# 
  3113     081C                     NVMDAT          equ	2076	;# 
  3114     081C                     NVMDATL         equ	2076	;# 
  3115     081D                     NVMDATH         equ	2077	;# 
  3116     081E                     NVMCON1         equ	2078	;# 
  3117     081F                     NVMCON2         equ	2079	;# 
  3118     088C                     CPUDOZE         equ	2188	;# 
  3119     088D                     OSCCON1         equ	2189	;# 
  3120     088E                     OSCCON2         equ	2190	;# 
  3121     088F                     OSCCON3         equ	2191	;# 
  3122     0890                     OSCSTAT         equ	2192	;# 
  3123     0891                     OSCEN           equ	2193	;# 
  3124     0892                     OSCTUNE         equ	2194	;# 
  3125     0893                     OSCFRQ          equ	2195	;# 
  3126     0895                     CLKRCON         equ	2197	;# 
  3127     0896                     CLKRCLK         equ	2198	;# 
  3128     0897                     MD1CON0         equ	2199	;# 
  3129     0898                     MD1CON1         equ	2200	;# 
  3130     0899                     MD1SRC          equ	2201	;# 
  3131     089A                     MD1CARL         equ	2202	;# 
  3132     089B                     MD1CARH         equ	2203	;# 
  3133     090C                     FVRCON          equ	2316	;# 
  3134     090E                     DAC1CON0        equ	2318	;# 
  3135     090F                     DAC1CON1        equ	2319	;# 
  3136     091F                     ZCDCON          equ	2335	;# 
  3137     098F                     CMOUT           equ	2447	;# 
  3138     098F                     CMSTAT          equ	2447	;# 
  3139     0990                     CM1CON0         equ	2448	;# 
  3140     0991                     CM1CON1         equ	2449	;# 
  3141     0992                     CM1NCH          equ	2450	;# 
  3142     0993                     CM1PCH          equ	2451	;# 
  3143     0994                     CM2CON0         equ	2452	;# 
  3144     0995                     CM2CON1         equ	2453	;# 
  3145     0996                     CM2NCH          equ	2454	;# 
  3146     0997                     CM2PCH          equ	2455	;# 
  3147     1E0F                     CLCDATA         equ	7695	;# 
  3148     1E10                     CLC1CON         equ	7696	;# 
  3149     1E11                     CLC1POL         equ	7697	;# 
  3150     1E12                     CLC1SEL0        equ	7698	;# 
  3151     1E13                     CLC1SEL1        equ	7699	;# 
  3152     1E14                     CLC1SEL2        equ	7700	;# 
  3153     1E15                     CLC1SEL3        equ	7701	;# 
  3154     1E16                     CLC1GLS0        equ	7702	;# 
  3155     1E17                     CLC1GLS1        equ	7703	;# 
  3156     1E18                     CLC1GLS2        equ	7704	;# 
  3157     1E19                     CLC1GLS3        equ	7705	;# 
  3158     1E1A                     CLC2CON         equ	7706	;# 
  3159     1E1B                     CLC2POL         equ	7707	;# 
  3160     1E1C                     CLC2SEL0        equ	7708	;# 
  3161     1E1D                     CLC2SEL1        equ	7709	;# 
  3162     1E1E                     CLC2SEL2        equ	7710	;# 
  3163     1E1F                     CLC2SEL3        equ	7711	;# 
  3164     1E20                     CLC2GLS0        equ	7712	;# 
  3165     1E21                     CLC2GLS1        equ	7713	;# 
  3166     1E22                     CLC2GLS2        equ	7714	;# 
  3167     1E23                     CLC2GLS3        equ	7715	;# 
  3168     1E24                     CLC3CON         equ	7716	;# 
  3169     1E25                     CLC3POL         equ	7717	;# 
  3170     1E26                     CLC3SEL0        equ	7718	;# 
  3171     1E27                     CLC3SEL1        equ	7719	;# 
  3172     1E28                     CLC3SEL2        equ	7720	;# 
  3173     1E29                     CLC3SEL3        equ	7721	;# 
  3174     1E2A                     CLC3GLS0        equ	7722	;# 
  3175     1E2B                     CLC3GLS1        equ	7723	;# 
  3176     1E2C                     CLC3GLS2        equ	7724	;# 
  3177     1E2D                     CLC3GLS3        equ	7725	;# 
  3178     1E2E                     CLC4CON         equ	7726	;# 
  3179     1E2F                     CLC4POL         equ	7727	;# 
  3180     1E30                     CLC4SEL0        equ	7728	;# 
  3181     1E31                     CLC4SEL1        equ	7729	;# 
  3182     1E32                     CLC4SEL2        equ	7730	;# 
  3183     1E33                     CLC4SEL3        equ	7731	;# 
  3184     1E34                     CLC4GLS0        equ	7732	;# 
  3185     1E35                     CLC4GLS1        equ	7733	;# 
  3186     1E36                     CLC4GLS2        equ	7734	;# 
  3187     1E37                     CLC4GLS3        equ	7735	;# 
  3188     1E8F                     PPSLOCK         equ	7823	;# 
  3189     1E90                     INTPPS          equ	7824	;# 
  3190     1E91                     T0CKIPPS        equ	7825	;# 
  3191     1E92                     T1CKIPPS        equ	7826	;# 
  3192     1E93                     T1GPPS          equ	7827	;# 
  3193     1E94                     T3CKIPPS        equ	7828	;# 
  3194     1E95                     T3GPPS          equ	7829	;# 
  3195     1E96                     T5CKIPPS        equ	7830	;# 
  3196     1E97                     T5GPPS          equ	7831	;# 
  3197     1E9C                     T2INPPS         equ	7836	;# 
  3198     1E9D                     T4INPPS         equ	7837	;# 
  3199     1E9E                     T6INPPS         equ	7838	;# 
  3200     1EA1                     CCP1PPS         equ	7841	;# 
  3201     1EA2                     CCP2PPS         equ	7842	;# 
  3202     1EA3                     CCP3PPS         equ	7843	;# 
  3203     1EA4                     CCP4PPS         equ	7844	;# 
  3204     1EA9                     SMT1WINPPS      equ	7849	;# 
  3205     1EAA                     SMT1SIGPPS      equ	7850	;# 
  3206     1EB1                     CWG1PPS         equ	7857	;# 
  3207     1EB2                     CWG2PPS         equ	7858	;# 
  3208     1EB8                     MDCARLPPS       equ	7864	;# 
  3209     1EB9                     MDCARHPPS       equ	7865	;# 
  3210     1EBA                     MDSRCPPS        equ	7866	;# 
  3211     1EBB                     CLCIN0PPS       equ	7867	;# 
  3212     1EBC                     CLCIN1PPS       equ	7868	;# 
  3213     1EBD                     CLCIN2PPS       equ	7869	;# 
  3214     1EBE                     CLCIN3PPS       equ	7870	;# 
  3215     1EC3                     ADACTPPS        equ	7875	;# 
  3216     1EC5                     SSP1CLKPPS      equ	7877	;# 
  3217     1EC6                     SSP1DATPPS      equ	7878	;# 
  3218     1EC7                     SSP1SSPPS       equ	7879	;# 
  3219     1EC8                     SSP2CLKPPS      equ	7880	;# 
  3220     1EC9                     SSP2DATPPS      equ	7881	;# 
  3221     1ECA                     SSP2SSPPS       equ	7882	;# 
  3222     1ECB                     RX1DTPPS        equ	7883	;# 
  3223     1ECC                     TX1CKPPS        equ	7884	;# 
  3224     1F10                     RA0PPS          equ	7952	;# 
  3225     1F11                     RA1PPS          equ	7953	;# 
  3226     1F12                     RA2PPS          equ	7954	;# 
  3227     1F14                     RA4PPS          equ	7956	;# 
  3228     1F15                     RA5PPS          equ	7957	;# 
  3229     1F20                     RC0PPS          equ	7968	;# 
  3230     1F21                     RC1PPS          equ	7969	;# 
  3231     1F22                     RC2PPS          equ	7970	;# 
  3232     1F23                     RC3PPS          equ	7971	;# 
  3233     1F24                     RC4PPS          equ	7972	;# 
  3234     1F25                     RC5PPS          equ	7973	;# 
  3235     1F38                     ANSELA          equ	7992	;# 
  3236     1F39                     WPUA            equ	7993	;# 
  3237     1F3A                     ODCONA          equ	7994	;# 
  3238     1F3B                     SLRCONA         equ	7995	;# 
  3239     1F3C                     INLVLA          equ	7996	;# 
  3240     1F3D                     IOCAP           equ	7997	;# 
  3241     1F3E                     IOCAN           equ	7998	;# 
  3242     1F3F                     IOCAF           equ	7999	;# 
  3243     1F4E                     ANSELC          equ	8014	;# 
  3244     1F4F                     WPUC            equ	8015	;# 
  3245     1F50                     ODCONC          equ	8016	;# 
  3246     1F51                     SLRCONC         equ	8017	;# 
  3247     1F52                     INLVLC          equ	8018	;# 
  3248     1F53                     IOCCP           equ	8019	;# 
  3249     1F54                     IOCCN           equ	8020	;# 
  3250     1F55                     IOCCF           equ	8021	;# 
  3251     1FE4                     STATUS_SHAD     equ	8164	;# 
  3252     1FE5                     WREG_SHAD       equ	8165	;# 
  3253     1FE6                     BSR_SHAD        equ	8166	;# 
  3254     1FE7                     PCLATH_SHAD     equ	8167	;# 
  3255     1FE8                     FSR0_SHAD       equ	8168	;# 
  3256     1FE8                     FSR0L_SHAD      equ	8168	;# 
  3257     1FE9                     FSR0H_SHAD      equ	8169	;# 
  3258     1FEA                     FSR1L_SHAD      equ	8170	;# 
  3259     1FEB                     FSR1H_SHAD      equ	8171	;# 
  3260     1FED                     STKPTR          equ	8173	;# 
  3261     1FEE                     TOSL            equ	8174	;# 
  3262     1FEF                     TOSH            equ	8175	;# 
  3263     0000                     INDF0           equ	0	;# 
  3264     0001                     INDF1           equ	1	;# 
  3265     0002                     PCL             equ	2	;# 
  3266     0003                     STATUS          equ	3	;# 
  3267     0004                     FSR0L           equ	4	;# 
  3268     0005                     FSR0H           equ	5	;# 
  3269     0006                     FSR1L           equ	6	;# 
  3270     0007                     FSR1H           equ	7	;# 
  3271     0008                     BSR             equ	8	;# 
  3272     0009                     WREG            equ	9	;# 
  3273     000A                     PCLATH          equ	10	;# 
  3274     000B                     INTCON          equ	11	;# 
  3275     000C                     PORTA           equ	12	;# 
  3276     000E                     PORTC           equ	14	;# 
  3277     0012                     TRISA           equ	18	;# 
  3278     0014                     TRISC           equ	20	;# 
  3279     0018                     LATA            equ	24	;# 
  3280     001A                     LATC            equ	26	;# 
  3281     008C                     ADLTH           equ	140	;# 
  3282     008C                     ADLTHL          equ	140	;# 
  3283     008D                     ADLTHH          equ	141	;# 
  3284     008E                     ADUTH           equ	142	;# 
  3285     008E                     ADUTHL          equ	142	;# 
  3286     008F                     ADUTHH          equ	143	;# 
  3287     0090                     ADERR           equ	144	;# 
  3288     0090                     ADERRL          equ	144	;# 
  3289     0091                     ADERRH          equ	145	;# 
  3290     0092                     ADSTPT          equ	146	;# 
  3291     0092                     ADSTPTL         equ	146	;# 
  3292     0093                     ADSTPTH         equ	147	;# 
  3293     0094                     ADFLTR          equ	148	;# 
  3294     0094                     ADFLTRL         equ	148	;# 
  3295     0095                     ADFLTRH         equ	149	;# 
  3296     0096                     ADACC           equ	150	;# 
  3297     0096                     ADACCL          equ	150	;# 
  3298     0097                     ADACCH          equ	151	;# 
  3299     0098                     ADACCU          equ	152	;# 
  3300     0099                     ADCNT           equ	153	;# 
  3301     009A                     ADRPT           equ	154	;# 
  3302     009B                     ADPREV          equ	155	;# 
  3303     009B                     ADPREVL         equ	155	;# 
  3304     009C                     ADPREVH         equ	156	;# 
  3305     009D                     ADRES           equ	157	;# 
  3306     009D                     ADRESL          equ	157	;# 
  3307     009E                     ADRESH          equ	158	;# 
  3308     009F                     ADPCH           equ	159	;# 
  3309     010C                     ADACQ           equ	268	;# 
  3310     010C                     ADACQL          equ	268	;# 
  3311     010D                     ADACQH          equ	269	;# 
  3312     010E                     ADCAP           equ	270	;# 
  3313     010F                     ADPRE           equ	271	;# 
  3314     010F                     ADPREL          equ	271	;# 
  3315     0110                     ADPREH          equ	272	;# 
  3316     0111                     ADCON0          equ	273	;# 
  3317     0112                     ADCON1          equ	274	;# 
  3318     0113                     ADCON2          equ	275	;# 
  3319     0114                     ADCON3          equ	276	;# 
  3320     0115                     ADSTAT          equ	277	;# 
  3321     0116                     ADREF           equ	278	;# 
  3322     0117                     ADACT           equ	279	;# 
  3323     0118                     ADCLK           equ	280	;# 
  3324     0119                     RC1REG          equ	281	;# 
  3325     0119                     RCREG           equ	281	;# 
  3326     0119                     RCREG1          equ	281	;# 
  3327     011A                     TX1REG          equ	282	;# 
  3328     011A                     TXREG1          equ	282	;# 
  3329     011A                     TXREG           equ	282	;# 
  3330     011B                     SP1BRG          equ	283	;# 
  3331     011B                     SP1BRGL         equ	283	;# 
  3332     011B                     SPBRG           equ	283	;# 
  3333     011B                     SPBRG1          equ	283	;# 
  3334     011B                     SPBRGL          equ	283	;# 
  3335     011C                     SP1BRGH         equ	284	;# 
  3336     011C                     SPBRGH          equ	284	;# 
  3337     011C                     SPBRGH1         equ	284	;# 
  3338     011D                     RC1STA          equ	285	;# 
  3339     011D                     RCSTA1          equ	285	;# 
  3340     011D                     RCSTA           equ	285	;# 
  3341     011E                     TX1STA          equ	286	;# 
  3342     011E                     TXSTA1          equ	286	;# 
  3343     011E                     TXSTA           equ	286	;# 
  3344     011F                     BAUD1CON        equ	287	;# 
  3345     011F                     BAUDCON1        equ	287	;# 
  3346     011F                     BAUDCTL1        equ	287	;# 
  3347     011F                     BAUDCON         equ	287	;# 
  3348     011F                     BAUDCTL         equ	287	;# 
  3349     018C                     SSP1BUF         equ	396	;# 
  3350     018D                     SSP1ADD         equ	397	;# 
  3351     018E                     SSP1MSK         equ	398	;# 
  3352     018F                     SSP1STAT        equ	399	;# 
  3353     0190                     SSP1CON1        equ	400	;# 
  3354     0191                     SSP1CON2        equ	401	;# 
  3355     0192                     SSP1CON3        equ	402	;# 
  3356     0196                     SSP2BUF         equ	406	;# 
  3357     0197                     SSP2ADD         equ	407	;# 
  3358     0198                     SSP2MSK         equ	408	;# 
  3359     0199                     SSP2STAT        equ	409	;# 
  3360     019A                     SSP2CON1        equ	410	;# 
  3361     019B                     SSP2CON2        equ	411	;# 
  3362     019C                     SSP2CON3        equ	412	;# 
  3363     020C                     TMR1L           equ	524	;# 
  3364     020D                     TMR1H           equ	525	;# 
  3365     020E                     T1CON           equ	526	;# 
  3366     020E                     TMR1CON         equ	526	;# 
  3367     020F                     T1GCON          equ	527	;# 
  3368     020F                     TMR1GCON        equ	527	;# 
  3369     0210                     T1GATE          equ	528	;# 
  3370     0210                     TMR1GATE        equ	528	;# 
  3371     0211                     T1CLK           equ	529	;# 
  3372     0211                     TMR1CLK         equ	529	;# 
  3373     0212                     TMR3L           equ	530	;# 
  3374     0213                     TMR3H           equ	531	;# 
  3375     0214                     T3CON           equ	532	;# 
  3376     0214                     TMR3CON         equ	532	;# 
  3377     0215                     T3GCON          equ	533	;# 
  3378     0215                     TMR3GCON        equ	533	;# 
  3379     0216                     T3GATE          equ	534	;# 
  3380     0216                     TMR3GATE        equ	534	;# 
  3381     0217                     T3CLK           equ	535	;# 
  3382     0217                     TMR3CLK         equ	535	;# 
  3383     0218                     TMR5L           equ	536	;# 
  3384     0219                     TMR5H           equ	537	;# 
  3385     021A                     T5CON           equ	538	;# 
  3386     021A                     TMR5CON         equ	538	;# 
  3387     021B                     T5GCON          equ	539	;# 
  3388     021B                     TMR5GCON        equ	539	;# 
  3389     021C                     T5GATE          equ	540	;# 
  3390     021C                     TMR5GATE        equ	540	;# 
  3391     021D                     T5CLK           equ	541	;# 
  3392     021D                     TMR5CLK         equ	541	;# 
  3393     021E                     CCPTMRS0        equ	542	;# 
  3394     021F                     CCPTMRS1        equ	543	;# 
  3395     028C                     T2TMR           equ	652	;# 
  3396     028C                     TMR2            equ	652	;# 
  3397     028D                     T2PR            equ	653	;# 
  3398     028D                     PR2             equ	653	;# 
  3399     028E                     T2CON           equ	654	;# 
  3400     028F                     T2HLT           equ	655	;# 
  3401     0290                     T2CLKCON        equ	656	;# 
  3402     0291                     T2RST           equ	657	;# 
  3403     0292                     T4TMR           equ	658	;# 
  3404     0292                     TMR4            equ	658	;# 
  3405     0293                     T4PR            equ	659	;# 
  3406     0293                     PR4             equ	659	;# 
  3407     0294                     T4CON           equ	660	;# 
  3408     0295                     T4HLT           equ	661	;# 
  3409     0296                     T4CLKCON        equ	662	;# 
  3410     0297                     T4RST           equ	663	;# 
  3411     0298                     T6TMR           equ	664	;# 
  3412     0298                     TMR6            equ	664	;# 
  3413     0299                     T6PR            equ	665	;# 
  3414     0299                     PR6             equ	665	;# 
  3415     029A                     T6CON           equ	666	;# 
  3416     029B                     T6HLT           equ	667	;# 
  3417     029C                     T6CLKCON        equ	668	;# 
  3418     029D                     T6RST           equ	669	;# 
  3419     029F                     ADCPCON0        equ	671	;# 
  3420     030C                     CCPR1           equ	780	;# 
  3421     030C                     CCPR1L          equ	780	;# 
  3422     030D                     CCPR1H          equ	781	;# 
  3423     030E                     CCP1CON         equ	782	;# 
  3424     030F                     CCP1CAP         equ	783	;# 
  3425     0310                     CCPR2           equ	784	;# 
  3426     0310                     CCPR2L          equ	784	;# 
  3427     0311                     CCPR2H          equ	785	;# 
  3428     0312                     CCP2CON         equ	786	;# 
  3429     0313                     CCP2CAP         equ	787	;# 
  3430     0314                     CCPR3           equ	788	;# 
  3431     0314                     CCPR3L          equ	788	;# 
  3432     0315                     CCPR3H          equ	789	;# 
  3433     0316                     CCP3CON         equ	790	;# 
  3434     0317                     CCP3CAP         equ	791	;# 
  3435     0318                     CCPR4           equ	792	;# 
  3436     0318                     CCPR4L          equ	792	;# 
  3437     0319                     CCPR4H          equ	793	;# 
  3438     031A                     CCP4CON         equ	794	;# 
  3439     031B                     CCP4CAP         equ	795	;# 
  3440     038C                     PWM6DC          equ	908	;# 
  3441     038C                     PWM6DCL         equ	908	;# 
  3442     038D                     PWM6DCH         equ	909	;# 
  3443     038E                     PWM6CON         equ	910	;# 
  3444     0390                     PWM7DC          equ	912	;# 
  3445     0390                     PWM7DCL         equ	912	;# 
  3446     0391                     PWM7DCH         equ	913	;# 
  3447     0392                     PWM7CON         equ	914	;# 
  3448     048C                     SMT1TMR         equ	1164	;# 
  3449     048C                     SMT1TMRL        equ	1164	;# 
  3450     048D                     SMT1TMRH        equ	1165	;# 
  3451     048E                     SMT1TMRU        equ	1166	;# 
  3452     048F                     SMT1CPR         equ	1167	;# 
  3453     048F                     SMT1CPRL        equ	1167	;# 
  3454     0490                     SMT1CPRH        equ	1168	;# 
  3455     0491                     SMT1CPRU        equ	1169	;# 
  3456     0492                     SMT1CPW         equ	1170	;# 
  3457     0492                     SMT1CPWL        equ	1170	;# 
  3458     0493                     SMT1CPWH        equ	1171	;# 
  3459     0494                     SMT1CPWU        equ	1172	;# 
  3460     0495                     SMT1PR          equ	1173	;# 
  3461     0495                     SMT1PRL         equ	1173	;# 
  3462     0496                     SMT1PRH         equ	1174	;# 
  3463     0497                     SMT1PRU         equ	1175	;# 
  3464     0498                     SMT1CON0        equ	1176	;# 
  3465     0499                     SMT1CON1        equ	1177	;# 
  3466     049A                     SMT1STAT        equ	1178	;# 
  3467     049B                     SMT1CLK         equ	1179	;# 
  3468     049C                     SMT1SIG         equ	1180	;# 
  3469     049D                     SMT1WIN         equ	1181	;# 
  3470     058C                     NCO1ACC         equ	1420	;# 
  3471     058C                     NCO1ACCL        equ	1420	;# 
  3472     058D                     NCO1ACCH        equ	1421	;# 
  3473     058E                     NCO1ACCU        equ	1422	;# 
  3474     058F                     NCO1INC         equ	1423	;# 
  3475     058F                     NCO1INCL        equ	1423	;# 
  3476     0590                     NCO1INCH        equ	1424	;# 
  3477     0591                     NCO1INCU        equ	1425	;# 
  3478     0592                     NCO1CON         equ	1426	;# 
  3479     0593                     NCO1CLK         equ	1427	;# 
  3480     059C                     TMR0L           equ	1436	;# 
  3481     059C                     TMR0            equ	1436	;# 
  3482     059D                     TMR0H           equ	1437	;# 
  3483     059D                     PR0             equ	1437	;# 
  3484     059E                     T0CON0          equ	1438	;# 
  3485     059F                     T0CON1          equ	1439	;# 
  3486     060C                     CWG1CLK         equ	1548	;# 
  3487     060C                     CWG1CLKCON      equ	1548	;# 
  3488     060D                     CWG1ISM         equ	1549	;# 
  3489     060D                     CWG1DAT         equ	1549	;# 
  3490     060E                     CWG1DBR         equ	1550	;# 
  3491     060F                     CWG1DBF         equ	1551	;# 
  3492     0610                     CWG1CON0        equ	1552	;# 
  3493     0611                     CWG1CON1        equ	1553	;# 
  3494     0612                     CWG1AS0         equ	1554	;# 
  3495     0613                     CWG1AS1         equ	1555	;# 
  3496     0614                     CWG1STR         equ	1556	;# 
  3497     0616                     CWG2CLK         equ	1558	;# 
  3498     0616                     CWG2CLKCON      equ	1558	;# 
  3499     0617                     CWG2ISM         equ	1559	;# 
  3500     0617                     CWG2DAT         equ	1559	;# 
  3501     0618                     CWG2DBR         equ	1560	;# 
  3502     0619                     CWG2DBF         equ	1561	;# 
  3503     061A                     CWG2CON0        equ	1562	;# 
  3504     061B                     CWG2CON1        equ	1563	;# 
  3505     061C                     CWG2AS0         equ	1564	;# 
  3506     061D                     CWG2AS1         equ	1565	;# 
  3507     061E                     CWG2STR         equ	1566	;# 
  3508     070C                     PIR0            equ	1804	;# 
  3509     070D                     PIR1            equ	1805	;# 
  3510     070E                     PIR2            equ	1806	;# 
  3511     070F                     PIR3            equ	1807	;# 
  3512     0710                     PIR4            equ	1808	;# 
  3513     0711                     PIR5            equ	1809	;# 
  3514     0712                     PIR6            equ	1810	;# 
  3515     0713                     PIR7            equ	1811	;# 
  3516     0714                     PIR8            equ	1812	;# 
  3517     0716                     PIE0            equ	1814	;# 
  3518     0717                     PIE1            equ	1815	;# 
  3519     0718                     PIE2            equ	1816	;# 
  3520     0719                     PIE3            equ	1817	;# 
  3521     071A                     PIE4            equ	1818	;# 
  3522     071B                     PIE5            equ	1819	;# 
  3523     071C                     PIE6            equ	1820	;# 
  3524     071D                     PIE7            equ	1821	;# 
  3525     071E                     PIE8            equ	1822	;# 
  3526     0796                     PMD0            equ	1942	;# 
  3527     0797                     PMD1            equ	1943	;# 
  3528     0798                     PMD2            equ	1944	;# 
  3529     0799                     PMD3            equ	1945	;# 
  3530     079A                     PMD4            equ	1946	;# 
  3531     079B                     PMD5            equ	1947	;# 
  3532     079C                     PMD6            equ	1948	;# 
  3533     079D                     PMD7            equ	1949	;# 
  3534     080C                     WDTCON0         equ	2060	;# 
  3535     080D                     WDTCON1         equ	2061	;# 
  3536     080E                     WDTPSL          equ	2062	;# 
  3537     080F                     WDTPSH          equ	2063	;# 
  3538     0810                     WDTTMR          equ	2064	;# 
  3539     0811                     BORCON          equ	2065	;# 
  3540     0812                     VREGCON         equ	2066	;# 
  3541     0813                     PCON0           equ	2067	;# 
  3542     0814                     PCON1           equ	2068	;# 
  3543     081A                     NVMADR          equ	2074	;# 
  3544     081A                     NVMADRL         equ	2074	;# 
  3545     081B                     NVMADRH         equ	2075	;# 
  3546     081C                     NVMDAT          equ	2076	;# 
  3547     081C                     NVMDATL         equ	2076	;# 
  3548     081D                     NVMDATH         equ	2077	;# 
  3549     081E                     NVMCON1         equ	2078	;# 
  3550     081F                     NVMCON2         equ	2079	;# 
  3551     088C                     CPUDOZE         equ	2188	;# 
  3552     088D                     OSCCON1         equ	2189	;# 
  3553     088E                     OSCCON2         equ	2190	;# 
  3554     088F                     OSCCON3         equ	2191	;# 
  3555     0890                     OSCSTAT         equ	2192	;# 
  3556     0891                     OSCEN           equ	2193	;# 
  3557     0892                     OSCTUNE         equ	2194	;# 
  3558     0893                     OSCFRQ          equ	2195	;# 
  3559     0895                     CLKRCON         equ	2197	;# 
  3560     0896                     CLKRCLK         equ	2198	;# 
  3561     0897                     MD1CON0         equ	2199	;# 
  3562     0898                     MD1CON1         equ	2200	;# 
  3563     0899                     MD1SRC          equ	2201	;# 
  3564     089A                     MD1CARL         equ	2202	;# 
  3565     089B                     MD1CARH         equ	2203	;# 
  3566     090C                     FVRCON          equ	2316	;# 
  3567     090E                     DAC1CON0        equ	2318	;# 
  3568     090F                     DAC1CON1        equ	2319	;# 
  3569     091F                     ZCDCON          equ	2335	;# 
  3570     098F                     CMOUT           equ	2447	;# 
  3571     098F                     CMSTAT          equ	2447	;# 
  3572     0990                     CM1CON0         equ	2448	;# 
  3573     0991                     CM1CON1         equ	2449	;# 
  3574     0992                     CM1NCH          equ	2450	;# 
  3575     0993                     CM1PCH          equ	2451	;# 
  3576     0994                     CM2CON0         equ	2452	;# 
  3577     0995                     CM2CON1         equ	2453	;# 
  3578     0996                     CM2NCH          equ	2454	;# 
  3579     0997                     CM2PCH          equ	2455	;# 
  3580     1E0F                     CLCDATA         equ	7695	;# 
  3581     1E10                     CLC1CON         equ	7696	;# 
  3582     1E11                     CLC1POL         equ	7697	;# 
  3583     1E12                     CLC1SEL0        equ	7698	;# 
  3584     1E13                     CLC1SEL1        equ	7699	;# 
  3585     1E14                     CLC1SEL2        equ	7700	;# 
  3586     1E15                     CLC1SEL3        equ	7701	;# 
  3587     1E16                     CLC1GLS0        equ	7702	;# 
  3588     1E17                     CLC1GLS1        equ	7703	;# 
  3589     1E18                     CLC1GLS2        equ	7704	;# 
  3590     1E19                     CLC1GLS3        equ	7705	;# 
  3591     1E1A                     CLC2CON         equ	7706	;# 
  3592     1E1B                     CLC2POL         equ	7707	;# 
  3593     1E1C                     CLC2SEL0        equ	7708	;# 
  3594     1E1D                     CLC2SEL1        equ	7709	;# 
  3595     1E1E                     CLC2SEL2        equ	7710	;# 
  3596     1E1F                     CLC2SEL3        equ	7711	;# 
  3597     1E20                     CLC2GLS0        equ	7712	;# 
  3598     1E21                     CLC2GLS1        equ	7713	;# 
  3599     1E22                     CLC2GLS2        equ	7714	;# 
  3600     1E23                     CLC2GLS3        equ	7715	;# 
  3601     1E24                     CLC3CON         equ	7716	;# 
  3602     1E25                     CLC3POL         equ	7717	;# 
  3603     1E26                     CLC3SEL0        equ	7718	;# 
  3604     1E27                     CLC3SEL1        equ	7719	;# 
  3605     1E28                     CLC3SEL2        equ	7720	;# 
  3606     1E29                     CLC3SEL3        equ	7721	;# 
  3607     1E2A                     CLC3GLS0        equ	7722	;# 
  3608     1E2B                     CLC3GLS1        equ	7723	;# 
  3609     1E2C                     CLC3GLS2        equ	7724	;# 
  3610     1E2D                     CLC3GLS3        equ	7725	;# 
  3611     1E2E                     CLC4CON         equ	7726	;# 
  3612     1E2F                     CLC4POL         equ	7727	;# 
  3613     1E30                     CLC4SEL0        equ	7728	;# 
  3614     1E31                     CLC4SEL1        equ	7729	;# 
  3615     1E32                     CLC4SEL2        equ	7730	;# 
  3616     1E33                     CLC4SEL3        equ	7731	;# 
  3617     1E34                     CLC4GLS0        equ	7732	;# 
  3618     1E35                     CLC4GLS1        equ	7733	;# 
  3619     1E36                     CLC4GLS2        equ	7734	;# 
  3620     1E37                     CLC4GLS3        equ	7735	;# 
  3621     1E8F                     PPSLOCK         equ	7823	;# 
  3622     1E90                     INTPPS          equ	7824	;# 
  3623     1E91                     T0CKIPPS        equ	7825	;# 
  3624     1E92                     T1CKIPPS        equ	7826	;# 
  3625     1E93                     T1GPPS          equ	7827	;# 
  3626     1E94                     T3CKIPPS        equ	7828	;# 
  3627     1E95                     T3GPPS          equ	7829	;# 
  3628     1E96                     T5CKIPPS        equ	7830	;# 
  3629     1E97                     T5GPPS          equ	7831	;# 
  3630     1E9C                     T2INPPS         equ	7836	;# 
  3631     1E9D                     T4INPPS         equ	7837	;# 
  3632     1E9E                     T6INPPS         equ	7838	;# 
  3633     1EA1                     CCP1PPS         equ	7841	;# 
  3634     1EA2                     CCP2PPS         equ	7842	;# 
  3635     1EA3                     CCP3PPS         equ	7843	;# 
  3636     1EA4                     CCP4PPS         equ	7844	;# 
  3637     1EA9                     SMT1WINPPS      equ	7849	;# 
  3638     1EAA                     SMT1SIGPPS      equ	7850	;# 
  3639     1EB1                     CWG1PPS         equ	7857	;# 
  3640     1EB2                     CWG2PPS         equ	7858	;# 
  3641     1EB8                     MDCARLPPS       equ	7864	;# 
  3642     1EB9                     MDCARHPPS       equ	7865	;# 
  3643     1EBA                     MDSRCPPS        equ	7866	;# 
  3644     1EBB                     CLCIN0PPS       equ	7867	;# 
  3645     1EBC                     CLCIN1PPS       equ	7868	;# 
  3646     1EBD                     CLCIN2PPS       equ	7869	;# 
  3647     1EBE                     CLCIN3PPS       equ	7870	;# 
  3648     1EC3                     ADACTPPS        equ	7875	;# 
  3649     1EC5                     SSP1CLKPPS      equ	7877	;# 
  3650     1EC6                     SSP1DATPPS      equ	7878	;# 
  3651     1EC7                     SSP1SSPPS       equ	7879	;# 
  3652     1EC8                     SSP2CLKPPS      equ	7880	;# 
  3653     1EC9                     SSP2DATPPS      equ	7881	;# 
  3654     1ECA                     SSP2SSPPS       equ	7882	;# 
  3655     1ECB                     RX1DTPPS        equ	7883	;# 
  3656     1ECC                     TX1CKPPS        equ	7884	;# 
  3657     1F10                     RA0PPS          equ	7952	;# 
  3658     1F11                     RA1PPS          equ	7953	;# 
  3659     1F12                     RA2PPS          equ	7954	;# 
  3660     1F14                     RA4PPS          equ	7956	;# 
  3661     1F15                     RA5PPS          equ	7957	;# 
  3662     1F20                     RC0PPS          equ	7968	;# 
  3663     1F21                     RC1PPS          equ	7969	;# 
  3664     1F22                     RC2PPS          equ	7970	;# 
  3665     1F23                     RC3PPS          equ	7971	;# 
  3666     1F24                     RC4PPS          equ	7972	;# 
  3667     1F25                     RC5PPS          equ	7973	;# 
  3668     1F38                     ANSELA          equ	7992	;# 
  3669     1F39                     WPUA            equ	7993	;# 
  3670     1F3A                     ODCONA          equ	7994	;# 
  3671     1F3B                     SLRCONA         equ	7995	;# 
  3672     1F3C                     INLVLA          equ	7996	;# 
  3673     1F3D                     IOCAP           equ	7997	;# 
  3674     1F3E                     IOCAN           equ	7998	;# 
  3675     1F3F                     IOCAF           equ	7999	;# 
  3676     1F4E                     ANSELC          equ	8014	;# 
  3677     1F4F                     WPUC            equ	8015	;# 
  3678     1F50                     ODCONC          equ	8016	;# 
  3679     1F51                     SLRCONC         equ	8017	;# 
  3680     1F52                     INLVLC          equ	8018	;# 
  3681     1F53                     IOCCP           equ	8019	;# 
  3682     1F54                     IOCCN           equ	8020	;# 
  3683     1F55                     IOCCF           equ	8021	;# 
  3684     1FE4                     STATUS_SHAD     equ	8164	;# 
  3685     1FE5                     WREG_SHAD       equ	8165	;# 
  3686     1FE6                     BSR_SHAD        equ	8166	;# 
  3687     1FE7                     PCLATH_SHAD     equ	8167	;# 
  3688     1FE8                     FSR0_SHAD       equ	8168	;# 
  3689     1FE8                     FSR0L_SHAD      equ	8168	;# 
  3690     1FE9                     FSR0H_SHAD      equ	8169	;# 
  3691     1FEA                     FSR1L_SHAD      equ	8170	;# 
  3692     1FEB                     FSR1H_SHAD      equ	8171	;# 
  3693     1FED                     STKPTR          equ	8173	;# 
  3694     1FEE                     TOSL            equ	8174	;# 
  3695     1FEF                     TOSH            equ	8175	;# 
  3696     0000                     INDF0           equ	0	;# 
  3697     0001                     INDF1           equ	1	;# 
  3698     0002                     PCL             equ	2	;# 
  3699     0003                     STATUS          equ	3	;# 
  3700     0004                     FSR0L           equ	4	;# 
  3701     0005                     FSR0H           equ	5	;# 
  3702     0006                     FSR1L           equ	6	;# 
  3703     0007                     FSR1H           equ	7	;# 
  3704     0008                     BSR             equ	8	;# 
  3705     0009                     WREG            equ	9	;# 
  3706     000A                     PCLATH          equ	10	;# 
  3707     000B                     INTCON          equ	11	;# 
  3708     000C                     PORTA           equ	12	;# 
  3709     000E                     PORTC           equ	14	;# 
  3710     0012                     TRISA           equ	18	;# 
  3711     0014                     TRISC           equ	20	;# 
  3712     0018                     LATA            equ	24	;# 
  3713     001A                     LATC            equ	26	;# 
  3714     008C                     ADLTH           equ	140	;# 
  3715     008C                     ADLTHL          equ	140	;# 
  3716     008D                     ADLTHH          equ	141	;# 
  3717     008E                     ADUTH           equ	142	;# 
  3718     008E                     ADUTHL          equ	142	;# 
  3719     008F                     ADUTHH          equ	143	;# 
  3720     0090                     ADERR           equ	144	;# 
  3721     0090                     ADERRL          equ	144	;# 
  3722     0091                     ADERRH          equ	145	;# 
  3723     0092                     ADSTPT          equ	146	;# 
  3724     0092                     ADSTPTL         equ	146	;# 
  3725     0093                     ADSTPTH         equ	147	;# 
  3726     0094                     ADFLTR          equ	148	;# 
  3727     0094                     ADFLTRL         equ	148	;# 
  3728     0095                     ADFLTRH         equ	149	;# 
  3729     0096                     ADACC           equ	150	;# 
  3730     0096                     ADACCL          equ	150	;# 
  3731     0097                     ADACCH          equ	151	;# 
  3732     0098                     ADACCU          equ	152	;# 
  3733     0099                     ADCNT           equ	153	;# 
  3734     009A                     ADRPT           equ	154	;# 
  3735     009B                     ADPREV          equ	155	;# 
  3736     009B                     ADPREVL         equ	155	;# 
  3737     009C                     ADPREVH         equ	156	;# 
  3738     009D                     ADRES           equ	157	;# 
  3739     009D                     ADRESL          equ	157	;# 
  3740     009E                     ADRESH          equ	158	;# 
  3741     009F                     ADPCH           equ	159	;# 
  3742     010C                     ADACQ           equ	268	;# 
  3743     010C                     ADACQL          equ	268	;# 
  3744     010D                     ADACQH          equ	269	;# 
  3745     010E                     ADCAP           equ	270	;# 
  3746     010F                     ADPRE           equ	271	;# 
  3747     010F                     ADPREL          equ	271	;# 
  3748     0110                     ADPREH          equ	272	;# 
  3749     0111                     ADCON0          equ	273	;# 
  3750     0112                     ADCON1          equ	274	;# 
  3751     0113                     ADCON2          equ	275	;# 
  3752     0114                     ADCON3          equ	276	;# 
  3753     0115                     ADSTAT          equ	277	;# 
  3754     0116                     ADREF           equ	278	;# 
  3755     0117                     ADACT           equ	279	;# 
  3756     0118                     ADCLK           equ	280	;# 
  3757     0119                     RC1REG          equ	281	;# 
  3758     0119                     RCREG           equ	281	;# 
  3759     0119                     RCREG1          equ	281	;# 
  3760     011A                     TX1REG          equ	282	;# 
  3761     011A                     TXREG1          equ	282	;# 
  3762     011A                     TXREG           equ	282	;# 
  3763     011B                     SP1BRG          equ	283	;# 
  3764     011B                     SP1BRGL         equ	283	;# 
  3765     011B                     SPBRG           equ	283	;# 
  3766     011B                     SPBRG1          equ	283	;# 
  3767     011B                     SPBRGL          equ	283	;# 
  3768     011C                     SP1BRGH         equ	284	;# 
  3769     011C                     SPBRGH          equ	284	;# 
  3770     011C                     SPBRGH1         equ	284	;# 
  3771     011D                     RC1STA          equ	285	;# 
  3772     011D                     RCSTA1          equ	285	;# 
  3773     011D                     RCSTA           equ	285	;# 
  3774     011E                     TX1STA          equ	286	;# 
  3775     011E                     TXSTA1          equ	286	;# 
  3776     011E                     TXSTA           equ	286	;# 
  3777     011F                     BAUD1CON        equ	287	;# 
  3778     011F                     BAUDCON1        equ	287	;# 
  3779     011F                     BAUDCTL1        equ	287	;# 
  3780     011F                     BAUDCON         equ	287	;# 
  3781     011F                     BAUDCTL         equ	287	;# 
  3782     018C                     SSP1BUF         equ	396	;# 
  3783     018D                     SSP1ADD         equ	397	;# 
  3784     018E                     SSP1MSK         equ	398	;# 
  3785     018F                     SSP1STAT        equ	399	;# 
  3786     0190                     SSP1CON1        equ	400	;# 
  3787     0191                     SSP1CON2        equ	401	;# 
  3788     0192                     SSP1CON3        equ	402	;# 
  3789     0196                     SSP2BUF         equ	406	;# 
  3790     0197                     SSP2ADD         equ	407	;# 
  3791     0198                     SSP2MSK         equ	408	;# 
  3792     0199                     SSP2STAT        equ	409	;# 
  3793     019A                     SSP2CON1        equ	410	;# 
  3794     019B                     SSP2CON2        equ	411	;# 
  3795     019C                     SSP2CON3        equ	412	;# 
  3796     020C                     TMR1L           equ	524	;# 
  3797     020D                     TMR1H           equ	525	;# 
  3798     020E                     T1CON           equ	526	;# 
  3799     020E                     TMR1CON         equ	526	;# 
  3800     020F                     T1GCON          equ	527	;# 
  3801     020F                     TMR1GCON        equ	527	;# 
  3802     0210                     T1GATE          equ	528	;# 
  3803     0210                     TMR1GATE        equ	528	;# 
  3804     0211                     T1CLK           equ	529	;# 
  3805     0211                     TMR1CLK         equ	529	;# 
  3806     0212                     TMR3L           equ	530	;# 
  3807     0213                     TMR3H           equ	531	;# 
  3808     0214                     T3CON           equ	532	;# 
  3809     0214                     TMR3CON         equ	532	;# 
  3810     0215                     T3GCON          equ	533	;# 
  3811     0215                     TMR3GCON        equ	533	;# 
  3812     0216                     T3GATE          equ	534	;# 
  3813     0216                     TMR3GATE        equ	534	;# 
  3814     0217                     T3CLK           equ	535	;# 
  3815     0217                     TMR3CLK         equ	535	;# 
  3816     0218                     TMR5L           equ	536	;# 
  3817     0219                     TMR5H           equ	537	;# 
  3818     021A                     T5CON           equ	538	;# 
  3819     021A                     TMR5CON         equ	538	;# 
  3820     021B                     T5GCON          equ	539	;# 
  3821     021B                     TMR5GCON        equ	539	;# 
  3822     021C                     T5GATE          equ	540	;# 
  3823     021C                     TMR5GATE        equ	540	;# 
  3824     021D                     T5CLK           equ	541	;# 
  3825     021D                     TMR5CLK         equ	541	;# 
  3826     021E                     CCPTMRS0        equ	542	;# 
  3827     021F                     CCPTMRS1        equ	543	;# 
  3828     028C                     T2TMR           equ	652	;# 
  3829     028C                     TMR2            equ	652	;# 
  3830     028D                     T2PR            equ	653	;# 
  3831     028D                     PR2             equ	653	;# 
  3832     028E                     T2CON           equ	654	;# 
  3833     028F                     T2HLT           equ	655	;# 
  3834     0290                     T2CLKCON        equ	656	;# 
  3835     0291                     T2RST           equ	657	;# 
  3836     0292                     T4TMR           equ	658	;# 
  3837     0292                     TMR4            equ	658	;# 
  3838     0293                     T4PR            equ	659	;# 
  3839     0293                     PR4             equ	659	;# 
  3840     0294                     T4CON           equ	660	;# 
  3841     0295                     T4HLT           equ	661	;# 
  3842     0296                     T4CLKCON        equ	662	;# 
  3843     0297                     T4RST           equ	663	;# 
  3844     0298                     T6TMR           equ	664	;# 
  3845     0298                     TMR6            equ	664	;# 
  3846     0299                     T6PR            equ	665	;# 
  3847     0299                     PR6             equ	665	;# 
  3848     029A                     T6CON           equ	666	;# 
  3849     029B                     T6HLT           equ	667	;# 
  3850     029C                     T6CLKCON        equ	668	;# 
  3851     029D                     T6RST           equ	669	;# 
  3852     029F                     ADCPCON0        equ	671	;# 
  3853     030C                     CCPR1           equ	780	;# 
  3854     030C                     CCPR1L          equ	780	;# 
  3855     030D                     CCPR1H          equ	781	;# 
  3856     030E                     CCP1CON         equ	782	;# 
  3857     030F                     CCP1CAP         equ	783	;# 
  3858     0310                     CCPR2           equ	784	;# 
  3859     0310                     CCPR2L          equ	784	;# 
  3860     0311                     CCPR2H          equ	785	;# 
  3861     0312                     CCP2CON         equ	786	;# 
  3862     0313                     CCP2CAP         equ	787	;# 
  3863     0314                     CCPR3           equ	788	;# 
  3864     0314                     CCPR3L          equ	788	;# 
  3865     0315                     CCPR3H          equ	789	;# 
  3866     0316                     CCP3CON         equ	790	;# 
  3867     0317                     CCP3CAP         equ	791	;# 
  3868     0318                     CCPR4           equ	792	;# 
  3869     0318                     CCPR4L          equ	792	;# 
  3870     0319                     CCPR4H          equ	793	;# 
  3871     031A                     CCP4CON         equ	794	;# 
  3872     031B                     CCP4CAP         equ	795	;# 
  3873     038C                     PWM6DC          equ	908	;# 
  3874     038C                     PWM6DCL         equ	908	;# 
  3875     038D                     PWM6DCH         equ	909	;# 
  3876     038E                     PWM6CON         equ	910	;# 
  3877     0390                     PWM7DC          equ	912	;# 
  3878     0390                     PWM7DCL         equ	912	;# 
  3879     0391                     PWM7DCH         equ	913	;# 
  3880     0392                     PWM7CON         equ	914	;# 
  3881     048C                     SMT1TMR         equ	1164	;# 
  3882     048C                     SMT1TMRL        equ	1164	;# 
  3883     048D                     SMT1TMRH        equ	1165	;# 
  3884     048E                     SMT1TMRU        equ	1166	;# 
  3885     048F                     SMT1CPR         equ	1167	;# 
  3886     048F                     SMT1CPRL        equ	1167	;# 
  3887     0490                     SMT1CPRH        equ	1168	;# 
  3888     0491                     SMT1CPRU        equ	1169	;# 
  3889     0492                     SMT1CPW         equ	1170	;# 
  3890     0492                     SMT1CPWL        equ	1170	;# 
  3891     0493                     SMT1CPWH        equ	1171	;# 
  3892     0494                     SMT1CPWU        equ	1172	;# 
  3893     0495                     SMT1PR          equ	1173	;# 
  3894     0495                     SMT1PRL         equ	1173	;# 
  3895     0496                     SMT1PRH         equ	1174	;# 
  3896     0497                     SMT1PRU         equ	1175	;# 
  3897     0498                     SMT1CON0        equ	1176	;# 
  3898     0499                     SMT1CON1        equ	1177	;# 
  3899     049A                     SMT1STAT        equ	1178	;# 
  3900     049B                     SMT1CLK         equ	1179	;# 
  3901     049C                     SMT1SIG         equ	1180	;# 
  3902     049D                     SMT1WIN         equ	1181	;# 
  3903     058C                     NCO1ACC         equ	1420	;# 
  3904     058C                     NCO1ACCL        equ	1420	;# 
  3905     058D                     NCO1ACCH        equ	1421	;# 
  3906     058E                     NCO1ACCU        equ	1422	;# 
  3907     058F                     NCO1INC         equ	1423	;# 
  3908     058F                     NCO1INCL        equ	1423	;# 
  3909     0590                     NCO1INCH        equ	1424	;# 
  3910     0591                     NCO1INCU        equ	1425	;# 
  3911     0592                     NCO1CON         equ	1426	;# 
  3912     0593                     NCO1CLK         equ	1427	;# 
  3913     059C                     TMR0L           equ	1436	;# 
  3914     059C                     TMR0            equ	1436	;# 
  3915     059D                     TMR0H           equ	1437	;# 
  3916     059D                     PR0             equ	1437	;# 
  3917     059E                     T0CON0          equ	1438	;# 
  3918     059F                     T0CON1          equ	1439	;# 
  3919     060C                     CWG1CLK         equ	1548	;# 
  3920     060C                     CWG1CLKCON      equ	1548	;# 
  3921     060D                     CWG1ISM         equ	1549	;# 
  3922     060D                     CWG1DAT         equ	1549	;# 
  3923     060E                     CWG1DBR         equ	1550	;# 
  3924     060F                     CWG1DBF         equ	1551	;# 
  3925     0610                     CWG1CON0        equ	1552	;# 
  3926     0611                     CWG1CON1        equ	1553	;# 
  3927     0612                     CWG1AS0         equ	1554	;# 
  3928     0613                     CWG1AS1         equ	1555	;# 
  3929     0614                     CWG1STR         equ	1556	;# 
  3930     0616                     CWG2CLK         equ	1558	;# 
  3931     0616                     CWG2CLKCON      equ	1558	;# 
  3932     0617                     CWG2ISM         equ	1559	;# 
  3933     0617                     CWG2DAT         equ	1559	;# 
  3934     0618                     CWG2DBR         equ	1560	;# 
  3935     0619                     CWG2DBF         equ	1561	;# 
  3936     061A                     CWG2CON0        equ	1562	;# 
  3937     061B                     CWG2CON1        equ	1563	;# 
  3938     061C                     CWG2AS0         equ	1564	;# 
  3939     061D                     CWG2AS1         equ	1565	;# 
  3940     061E                     CWG2STR         equ	1566	;# 
  3941     070C                     PIR0            equ	1804	;# 
  3942     070D                     PIR1            equ	1805	;# 
  3943     070E                     PIR2            equ	1806	;# 
  3944     070F                     PIR3            equ	1807	;# 
  3945     0710                     PIR4            equ	1808	;# 
  3946     0711                     PIR5            equ	1809	;# 
  3947     0712                     PIR6            equ	1810	;# 
  3948     0713                     PIR7            equ	1811	;# 
  3949     0714                     PIR8            equ	1812	;# 
  3950     0716                     PIE0            equ	1814	;# 
  3951     0717                     PIE1            equ	1815	;# 
  3952     0718                     PIE2            equ	1816	;# 
  3953     0719                     PIE3            equ	1817	;# 
  3954     071A                     PIE4            equ	1818	;# 
  3955     071B                     PIE5            equ	1819	;# 
  3956     071C                     PIE6            equ	1820	;# 
  3957     071D                     PIE7            equ	1821	;# 
  3958     071E                     PIE8            equ	1822	;# 
  3959     0796                     PMD0            equ	1942	;# 
  3960     0797                     PMD1            equ	1943	;# 
  3961     0798                     PMD2            equ	1944	;# 
  3962     0799                     PMD3            equ	1945	;# 
  3963     079A                     PMD4            equ	1946	;# 
  3964     079B                     PMD5            equ	1947	;# 
  3965     079C                     PMD6            equ	1948	;# 
  3966     079D                     PMD7            equ	1949	;# 
  3967     080C                     WDTCON0         equ	2060	;# 
  3968     080D                     WDTCON1         equ	2061	;# 
  3969     080E                     WDTPSL          equ	2062	;# 
  3970     080F                     WDTPSH          equ	2063	;# 
  3971     0810                     WDTTMR          equ	2064	;# 
  3972     0811                     BORCON          equ	2065	;# 
  3973     0812                     VREGCON         equ	2066	;# 
  3974     0813                     PCON0           equ	2067	;# 
  3975     0814                     PCON1           equ	2068	;# 
  3976     081A                     NVMADR          equ	2074	;# 
  3977     081A                     NVMADRL         equ	2074	;# 
  3978     081B                     NVMADRH         equ	2075	;# 
  3979     081C                     NVMDAT          equ	2076	;# 
  3980     081C                     NVMDATL         equ	2076	;# 
  3981     081D                     NVMDATH         equ	2077	;# 
  3982     081E                     NVMCON1         equ	2078	;# 
  3983     081F                     NVMCON2         equ	2079	;# 
  3984     088C                     CPUDOZE         equ	2188	;# 
  3985     088D                     OSCCON1         equ	2189	;# 
  3986     088E                     OSCCON2         equ	2190	;# 
  3987     088F                     OSCCON3         equ	2191	;# 
  3988     0890                     OSCSTAT         equ	2192	;# 
  3989     0891                     OSCEN           equ	2193	;# 
  3990     0892                     OSCTUNE         equ	2194	;# 
  3991     0893                     OSCFRQ          equ	2195	;# 
  3992     0895                     CLKRCON         equ	2197	;# 
  3993     0896                     CLKRCLK         equ	2198	;# 
  3994     0897                     MD1CON0         equ	2199	;# 
  3995     0898                     MD1CON1         equ	2200	;# 
  3996     0899                     MD1SRC          equ	2201	;# 
  3997     089A                     MD1CARL         equ	2202	;# 
  3998     089B                     MD1CARH         equ	2203	;# 
  3999     090C                     FVRCON          equ	2316	;# 
  4000     090E                     DAC1CON0        equ	2318	;# 
  4001     090F                     DAC1CON1        equ	2319	;# 
  4002     091F                     ZCDCON          equ	2335	;# 
  4003     098F                     CMOUT           equ	2447	;# 
  4004     098F                     CMSTAT          equ	2447	;# 
  4005     0990                     CM1CON0         equ	2448	;# 
  4006     0991                     CM1CON1         equ	2449	;# 
  4007     0992                     CM1NCH          equ	2450	;# 
  4008     0993                     CM1PCH          equ	2451	;# 
  4009     0994                     CM2CON0         equ	2452	;# 
  4010     0995                     CM2CON1         equ	2453	;# 
  4011     0996                     CM2NCH          equ	2454	;# 
  4012     0997                     CM2PCH          equ	2455	;# 
  4013     1E0F                     CLCDATA         equ	7695	;# 
  4014     1E10                     CLC1CON         equ	7696	;# 
  4015     1E11                     CLC1POL         equ	7697	;# 
  4016     1E12                     CLC1SEL0        equ	7698	;# 
  4017     1E13                     CLC1SEL1        equ	7699	;# 
  4018     1E14                     CLC1SEL2        equ	7700	;# 
  4019     1E15                     CLC1SEL3        equ	7701	;# 
  4020     1E16                     CLC1GLS0        equ	7702	;# 
  4021     1E17                     CLC1GLS1        equ	7703	;# 
  4022     1E18                     CLC1GLS2        equ	7704	;# 
  4023     1E19                     CLC1GLS3        equ	7705	;# 
  4024     1E1A                     CLC2CON         equ	7706	;# 
  4025     1E1B                     CLC2POL         equ	7707	;# 
  4026     1E1C                     CLC2SEL0        equ	7708	;# 
  4027     1E1D                     CLC2SEL1        equ	7709	;# 
  4028     1E1E                     CLC2SEL2        equ	7710	;# 
  4029     1E1F                     CLC2SEL3        equ	7711	;# 
  4030     1E20                     CLC2GLS0        equ	7712	;# 
  4031     1E21                     CLC2GLS1        equ	7713	;# 
  4032     1E22                     CLC2GLS2        equ	7714	;# 
  4033     1E23                     CLC2GLS3        equ	7715	;# 
  4034     1E24                     CLC3CON         equ	7716	;# 
  4035     1E25                     CLC3POL         equ	7717	;# 
  4036     1E26                     CLC3SEL0        equ	7718	;# 
  4037     1E27                     CLC3SEL1        equ	7719	;# 
  4038     1E28                     CLC3SEL2        equ	7720	;# 
  4039     1E29                     CLC3SEL3        equ	7721	;# 
  4040     1E2A                     CLC3GLS0        equ	7722	;# 
  4041     1E2B                     CLC3GLS1        equ	7723	;# 
  4042     1E2C                     CLC3GLS2        equ	7724	;# 
  4043     1E2D                     CLC3GLS3        equ	7725	;# 
  4044     1E2E                     CLC4CON         equ	7726	;# 
  4045     1E2F                     CLC4POL         equ	7727	;# 
  4046     1E30                     CLC4SEL0        equ	7728	;# 
  4047     1E31                     CLC4SEL1        equ	7729	;# 
  4048     1E32                     CLC4SEL2        equ	7730	;# 
  4049     1E33                     CLC4SEL3        equ	7731	;# 
  4050     1E34                     CLC4GLS0        equ	7732	;# 
  4051     1E35                     CLC4GLS1        equ	7733	;# 
  4052     1E36                     CLC4GLS2        equ	7734	;# 
  4053     1E37                     CLC4GLS3        equ	7735	;# 
  4054     1E8F                     PPSLOCK         equ	7823	;# 
  4055     1E90                     INTPPS          equ	7824	;# 
  4056     1E91                     T0CKIPPS        equ	7825	;# 
  4057     1E92                     T1CKIPPS        equ	7826	;# 
  4058     1E93                     T1GPPS          equ	7827	;# 
  4059     1E94                     T3CKIPPS        equ	7828	;# 
  4060     1E95                     T3GPPS          equ	7829	;# 
  4061     1E96                     T5CKIPPS        equ	7830	;# 
  4062     1E97                     T5GPPS          equ	7831	;# 
  4063     1E9C                     T2INPPS         equ	7836	;# 
  4064     1E9D                     T4INPPS         equ	7837	;# 
  4065     1E9E                     T6INPPS         equ	7838	;# 
  4066     1EA1                     CCP1PPS         equ	7841	;# 
  4067     1EA2                     CCP2PPS         equ	7842	;# 
  4068     1EA3                     CCP3PPS         equ	7843	;# 
  4069     1EA4                     CCP4PPS         equ	7844	;# 
  4070     1EA9                     SMT1WINPPS      equ	7849	;# 
  4071     1EAA                     SMT1SIGPPS      equ	7850	;# 
  4072     1EB1                     CWG1PPS         equ	7857	;# 
  4073     1EB2                     CWG2PPS         equ	7858	;# 
  4074     1EB8                     MDCARLPPS       equ	7864	;# 
  4075     1EB9                     MDCARHPPS       equ	7865	;# 
  4076     1EBA                     MDSRCPPS        equ	7866	;# 
  4077     1EBB                     CLCIN0PPS       equ	7867	;# 
  4078     1EBC                     CLCIN1PPS       equ	7868	;# 
  4079     1EBD                     CLCIN2PPS       equ	7869	;# 
  4080     1EBE                     CLCIN3PPS       equ	7870	;# 
  4081     1EC3                     ADACTPPS        equ	7875	;# 
  4082     1EC5                     SSP1CLKPPS      equ	7877	;# 
  4083     1EC6                     SSP1DATPPS      equ	7878	;# 
  4084     1EC7                     SSP1SSPPS       equ	7879	;# 
  4085     1EC8                     SSP2CLKPPS      equ	7880	;# 
  4086     1EC9                     SSP2DATPPS      equ	7881	;# 
  4087     1ECA                     SSP2SSPPS       equ	7882	;# 
  4088     1ECB                     RX1DTPPS        equ	7883	;# 
  4089     1ECC                     TX1CKPPS        equ	7884	;# 
  4090     1F10                     RA0PPS          equ	7952	;# 
  4091     1F11                     RA1PPS          equ	7953	;# 
  4092     1F12                     RA2PPS          equ	7954	;# 
  4093     1F14                     RA4PPS          equ	7956	;# 
  4094     1F15                     RA5PPS          equ	7957	;# 
  4095     1F20                     RC0PPS          equ	7968	;# 
  4096     1F21                     RC1PPS          equ	7969	;# 
  4097     1F22                     RC2PPS          equ	7970	;# 
  4098     1F23                     RC3PPS          equ	7971	;# 
  4099     1F24                     RC4PPS          equ	7972	;# 
  4100     1F25                     RC5PPS          equ	7973	;# 
  4101     1F38                     ANSELA          equ	7992	;# 
  4102     1F39                     WPUA            equ	7993	;# 
  4103     1F3A                     ODCONA          equ	7994	;# 
  4104     1F3B                     SLRCONA         equ	7995	;# 
  4105     1F3C                     INLVLA          equ	7996	;# 
  4106     1F3D                     IOCAP           equ	7997	;# 
  4107     1F3E                     IOCAN           equ	7998	;# 
  4108     1F3F                     IOCAF           equ	7999	;# 
  4109     1F4E                     ANSELC          equ	8014	;# 
  4110     1F4F                     WPUC            equ	8015	;# 
  4111     1F50                     ODCONC          equ	8016	;# 
  4112     1F51                     SLRCONC         equ	8017	;# 
  4113     1F52                     INLVLC          equ	8018	;# 
  4114     1F53                     IOCCP           equ	8019	;# 
  4115     1F54                     IOCCN           equ	8020	;# 
  4116     1F55                     IOCCF           equ	8021	;# 
  4117     1FE4                     STATUS_SHAD     equ	8164	;# 
  4118     1FE5                     WREG_SHAD       equ	8165	;# 
  4119     1FE6                     BSR_SHAD        equ	8166	;# 
  4120     1FE7                     PCLATH_SHAD     equ	8167	;# 
  4121     1FE8                     FSR0_SHAD       equ	8168	;# 
  4122     1FE8                     FSR0L_SHAD      equ	8168	;# 
  4123     1FE9                     FSR0H_SHAD      equ	8169	;# 
  4124     1FEA                     FSR1L_SHAD      equ	8170	;# 
  4125     1FEB                     FSR1H_SHAD      equ	8171	;# 
  4126     1FED                     STKPTR          equ	8173	;# 
  4127     1FEE                     TOSL            equ	8174	;# 
  4128     1FEF                     TOSH            equ	8175	;# 
  4129     0000                     INDF0           equ	0	;# 
  4130     0001                     INDF1           equ	1	;# 
  4131     0002                     PCL             equ	2	;# 
  4132     0003                     STATUS          equ	3	;# 
  4133     0004                     FSR0L           equ	4	;# 
  4134     0005                     FSR0H           equ	5	;# 
  4135     0006                     FSR1L           equ	6	;# 
  4136     0007                     FSR1H           equ	7	;# 
  4137     0008                     BSR             equ	8	;# 
  4138     0009                     WREG            equ	9	;# 
  4139     000A                     PCLATH          equ	10	;# 
  4140     000B                     INTCON          equ	11	;# 
  4141     000C                     PORTA           equ	12	;# 
  4142     000E                     PORTC           equ	14	;# 
  4143     0012                     TRISA           equ	18	;# 
  4144     0014                     TRISC           equ	20	;# 
  4145     0018                     LATA            equ	24	;# 
  4146     001A                     LATC            equ	26	;# 
  4147     008C                     ADLTH           equ	140	;# 
  4148     008C                     ADLTHL          equ	140	;# 
  4149     008D                     ADLTHH          equ	141	;# 
  4150     008E                     ADUTH           equ	142	;# 
  4151     008E                     ADUTHL          equ	142	;# 
  4152     008F                     ADUTHH          equ	143	;# 
  4153     0090                     ADERR           equ	144	;# 
  4154     0090                     ADERRL          equ	144	;# 
  4155     0091                     ADERRH          equ	145	;# 
  4156     0092                     ADSTPT          equ	146	;# 
  4157     0092                     ADSTPTL         equ	146	;# 
  4158     0093                     ADSTPTH         equ	147	;# 
  4159     0094                     ADFLTR          equ	148	;# 
  4160     0094                     ADFLTRL         equ	148	;# 
  4161     0095                     ADFLTRH         equ	149	;# 
  4162     0096                     ADACC           equ	150	;# 
  4163     0096                     ADACCL          equ	150	;# 
  4164     0097                     ADACCH          equ	151	;# 
  4165     0098                     ADACCU          equ	152	;# 
  4166     0099                     ADCNT           equ	153	;# 
  4167     009A                     ADRPT           equ	154	;# 
  4168     009B                     ADPREV          equ	155	;# 
  4169     009B                     ADPREVL         equ	155	;# 
  4170     009C                     ADPREVH         equ	156	;# 
  4171     009D                     ADRES           equ	157	;# 
  4172     009D                     ADRESL          equ	157	;# 
  4173     009E                     ADRESH          equ	158	;# 
  4174     009F                     ADPCH           equ	159	;# 
  4175     010C                     ADACQ           equ	268	;# 
  4176     010C                     ADACQL          equ	268	;# 
  4177     010D                     ADACQH          equ	269	;# 
  4178     010E                     ADCAP           equ	270	;# 
  4179     010F                     ADPRE           equ	271	;# 
  4180     010F                     ADPREL          equ	271	;# 
  4181     0110                     ADPREH          equ	272	;# 
  4182     0111                     ADCON0          equ	273	;# 
  4183     0112                     ADCON1          equ	274	;# 
  4184     0113                     ADCON2          equ	275	;# 
  4185     0114                     ADCON3          equ	276	;# 
  4186     0115                     ADSTAT          equ	277	;# 
  4187     0116                     ADREF           equ	278	;# 
  4188     0117                     ADACT           equ	279	;# 
  4189     0118                     ADCLK           equ	280	;# 
  4190     0119                     RC1REG          equ	281	;# 
  4191     0119                     RCREG           equ	281	;# 
  4192     0119                     RCREG1          equ	281	;# 
  4193     011A                     TX1REG          equ	282	;# 
  4194     011A                     TXREG1          equ	282	;# 
  4195     011A                     TXREG           equ	282	;# 
  4196     011B                     SP1BRG          equ	283	;# 
  4197     011B                     SP1BRGL         equ	283	;# 
  4198     011B                     SPBRG           equ	283	;# 
  4199     011B                     SPBRG1          equ	283	;# 
  4200     011B                     SPBRGL          equ	283	;# 
  4201     011C                     SP1BRGH         equ	284	;# 
  4202     011C                     SPBRGH          equ	284	;# 
  4203     011C                     SPBRGH1         equ	284	;# 
  4204     011D                     RC1STA          equ	285	;# 
  4205     011D                     RCSTA1          equ	285	;# 
  4206     011D                     RCSTA           equ	285	;# 
  4207     011E                     TX1STA          equ	286	;# 
  4208     011E                     TXSTA1          equ	286	;# 
  4209     011E                     TXSTA           equ	286	;# 
  4210     011F                     BAUD1CON        equ	287	;# 
  4211     011F                     BAUDCON1        equ	287	;# 
  4212     011F                     BAUDCTL1        equ	287	;# 
  4213     011F                     BAUDCON         equ	287	;# 
  4214     011F                     BAUDCTL         equ	287	;# 
  4215     018C                     SSP1BUF         equ	396	;# 
  4216     018D                     SSP1ADD         equ	397	;# 
  4217     018E                     SSP1MSK         equ	398	;# 
  4218     018F                     SSP1STAT        equ	399	;# 
  4219     0190                     SSP1CON1        equ	400	;# 
  4220     0191                     SSP1CON2        equ	401	;# 
  4221     0192                     SSP1CON3        equ	402	;# 
  4222     0196                     SSP2BUF         equ	406	;# 
  4223     0197                     SSP2ADD         equ	407	;# 
  4224     0198                     SSP2MSK         equ	408	;# 
  4225     0199                     SSP2STAT        equ	409	;# 
  4226     019A                     SSP2CON1        equ	410	;# 
  4227     019B                     SSP2CON2        equ	411	;# 
  4228     019C                     SSP2CON3        equ	412	;# 
  4229     020C                     TMR1L           equ	524	;# 
  4230     020D                     TMR1H           equ	525	;# 
  4231     020E                     T1CON           equ	526	;# 
  4232     020E                     TMR1CON         equ	526	;# 
  4233     020F                     T1GCON          equ	527	;# 
  4234     020F                     TMR1GCON        equ	527	;# 
  4235     0210                     T1GATE          equ	528	;# 
  4236     0210                     TMR1GATE        equ	528	;# 
  4237     0211                     T1CLK           equ	529	;# 
  4238     0211                     TMR1CLK         equ	529	;# 
  4239     0212                     TMR3L           equ	530	;# 
  4240     0213                     TMR3H           equ	531	;# 
  4241     0214                     T3CON           equ	532	;# 
  4242     0214                     TMR3CON         equ	532	;# 
  4243     0215                     T3GCON          equ	533	;# 
  4244     0215                     TMR3GCON        equ	533	;# 
  4245     0216                     T3GATE          equ	534	;# 
  4246     0216                     TMR3GATE        equ	534	;# 
  4247     0217                     T3CLK           equ	535	;# 
  4248     0217                     TMR3CLK         equ	535	;# 
  4249     0218                     TMR5L           equ	536	;# 
  4250     0219                     TMR5H           equ	537	;# 
  4251     021A                     T5CON           equ	538	;# 
  4252     021A                     TMR5CON         equ	538	;# 
  4253     021B                     T5GCON          equ	539	;# 
  4254     021B                     TMR5GCON        equ	539	;# 
  4255     021C                     T5GATE          equ	540	;# 
  4256     021C                     TMR5GATE        equ	540	;# 
  4257     021D                     T5CLK           equ	541	;# 
  4258     021D                     TMR5CLK         equ	541	;# 
  4259     021E                     CCPTMRS0        equ	542	;# 
  4260     021F                     CCPTMRS1        equ	543	;# 
  4261     028C                     T2TMR           equ	652	;# 
  4262     028C                     TMR2            equ	652	;# 
  4263     028D                     T2PR            equ	653	;# 
  4264     028D                     PR2             equ	653	;# 
  4265     028E                     T2CON           equ	654	;# 
  4266     028F                     T2HLT           equ	655	;# 
  4267     0290                     T2CLKCON        equ	656	;# 
  4268     0291                     T2RST           equ	657	;# 
  4269     0292                     T4TMR           equ	658	;# 
  4270     0292                     TMR4            equ	658	;# 
  4271     0293                     T4PR            equ	659	;# 
  4272     0293                     PR4             equ	659	;# 
  4273     0294                     T4CON           equ	660	;# 
  4274     0295                     T4HLT           equ	661	;# 
  4275     0296                     T4CLKCON        equ	662	;# 
  4276     0297                     T4RST           equ	663	;# 
  4277     0298                     T6TMR           equ	664	;# 
  4278     0298                     TMR6            equ	664	;# 
  4279     0299                     T6PR            equ	665	;# 
  4280     0299                     PR6             equ	665	;# 
  4281     029A                     T6CON           equ	666	;# 
  4282     029B                     T6HLT           equ	667	;# 
  4283     029C                     T6CLKCON        equ	668	;# 
  4284     029D                     T6RST           equ	669	;# 
  4285     029F                     ADCPCON0        equ	671	;# 
  4286     030C                     CCPR1           equ	780	;# 
  4287     030C                     CCPR1L          equ	780	;# 
  4288     030D                     CCPR1H          equ	781	;# 
  4289     030E                     CCP1CON         equ	782	;# 
  4290     030F                     CCP1CAP         equ	783	;# 
  4291     0310                     CCPR2           equ	784	;# 
  4292     0310                     CCPR2L          equ	784	;# 
  4293     0311                     CCPR2H          equ	785	;# 
  4294     0312                     CCP2CON         equ	786	;# 
  4295     0313                     CCP2CAP         equ	787	;# 
  4296     0314                     CCPR3           equ	788	;# 
  4297     0314                     CCPR3L          equ	788	;# 
  4298     0315                     CCPR3H          equ	789	;# 
  4299     0316                     CCP3CON         equ	790	;# 
  4300     0317                     CCP3CAP         equ	791	;# 
  4301     0318                     CCPR4           equ	792	;# 
  4302     0318                     CCPR4L          equ	792	;# 
  4303     0319                     CCPR4H          equ	793	;# 
  4304     031A                     CCP4CON         equ	794	;# 
  4305     031B                     CCP4CAP         equ	795	;# 
  4306     038C                     PWM6DC          equ	908	;# 
  4307     038C                     PWM6DCL         equ	908	;# 
  4308     038D                     PWM6DCH         equ	909	;# 
  4309     038E                     PWM6CON         equ	910	;# 
  4310     0390                     PWM7DC          equ	912	;# 
  4311     0390                     PWM7DCL         equ	912	;# 
  4312     0391                     PWM7DCH         equ	913	;# 
  4313     0392                     PWM7CON         equ	914	;# 
  4314     048C                     SMT1TMR         equ	1164	;# 
  4315     048C                     SMT1TMRL        equ	1164	;# 
  4316     048D                     SMT1TMRH        equ	1165	;# 
  4317     048E                     SMT1TMRU        equ	1166	;# 
  4318     048F                     SMT1CPR         equ	1167	;# 
  4319     048F                     SMT1CPRL        equ	1167	;# 
  4320     0490                     SMT1CPRH        equ	1168	;# 
  4321     0491                     SMT1CPRU        equ	1169	;# 
  4322     0492                     SMT1CPW         equ	1170	;# 
  4323     0492                     SMT1CPWL        equ	1170	;# 
  4324     0493                     SMT1CPWH        equ	1171	;# 
  4325     0494                     SMT1CPWU        equ	1172	;# 
  4326     0495                     SMT1PR          equ	1173	;# 
  4327     0495                     SMT1PRL         equ	1173	;# 
  4328     0496                     SMT1PRH         equ	1174	;# 
  4329     0497                     SMT1PRU         equ	1175	;# 
  4330     0498                     SMT1CON0        equ	1176	;# 
  4331     0499                     SMT1CON1        equ	1177	;# 
  4332     049A                     SMT1STAT        equ	1178	;# 
  4333     049B                     SMT1CLK         equ	1179	;# 
  4334     049C                     SMT1SIG         equ	1180	;# 
  4335     049D                     SMT1WIN         equ	1181	;# 
  4336     058C                     NCO1ACC         equ	1420	;# 
  4337     058C                     NCO1ACCL        equ	1420	;# 
  4338     058D                     NCO1ACCH        equ	1421	;# 
  4339     058E                     NCO1ACCU        equ	1422	;# 
  4340     058F                     NCO1INC         equ	1423	;# 
  4341     058F                     NCO1INCL        equ	1423	;# 
  4342     0590                     NCO1INCH        equ	1424	;# 
  4343     0591                     NCO1INCU        equ	1425	;# 
  4344     0592                     NCO1CON         equ	1426	;# 
  4345     0593                     NCO1CLK         equ	1427	;# 
  4346     059C                     TMR0L           equ	1436	;# 
  4347     059C                     TMR0            equ	1436	;# 
  4348     059D                     TMR0H           equ	1437	;# 
  4349     059D                     PR0             equ	1437	;# 
  4350     059E                     T0CON0          equ	1438	;# 
  4351     059F                     T0CON1          equ	1439	;# 
  4352     060C                     CWG1CLK         equ	1548	;# 
  4353     060C                     CWG1CLKCON      equ	1548	;# 
  4354     060D                     CWG1ISM         equ	1549	;# 
  4355     060D                     CWG1DAT         equ	1549	;# 
  4356     060E                     CWG1DBR         equ	1550	;# 
  4357     060F                     CWG1DBF         equ	1551	;# 
  4358     0610                     CWG1CON0        equ	1552	;# 
  4359     0611                     CWG1CON1        equ	1553	;# 
  4360     0612                     CWG1AS0         equ	1554	;# 
  4361     0613                     CWG1AS1         equ	1555	;# 
  4362     0614                     CWG1STR         equ	1556	;# 
  4363     0616                     CWG2CLK         equ	1558	;# 
  4364     0616                     CWG2CLKCON      equ	1558	;# 
  4365     0617                     CWG2ISM         equ	1559	;# 
  4366     0617                     CWG2DAT         equ	1559	;# 
  4367     0618                     CWG2DBR         equ	1560	;# 
  4368     0619                     CWG2DBF         equ	1561	;# 
  4369     061A                     CWG2CON0        equ	1562	;# 
  4370     061B                     CWG2CON1        equ	1563	;# 
  4371     061C                     CWG2AS0         equ	1564	;# 
  4372     061D                     CWG2AS1         equ	1565	;# 
  4373     061E                     CWG2STR         equ	1566	;# 
  4374     070C                     PIR0            equ	1804	;# 
  4375     070D                     PIR1            equ	1805	;# 
  4376     070E                     PIR2            equ	1806	;# 
  4377     070F                     PIR3            equ	1807	;# 
  4378     0710                     PIR4            equ	1808	;# 
  4379     0711                     PIR5            equ	1809	;# 
  4380     0712                     PIR6            equ	1810	;# 
  4381     0713                     PIR7            equ	1811	;# 
  4382     0714                     PIR8            equ	1812	;# 
  4383     0716                     PIE0            equ	1814	;# 
  4384     0717                     PIE1            equ	1815	;# 
  4385     0718                     PIE2            equ	1816	;# 
  4386     0719                     PIE3            equ	1817	;# 
  4387     071A                     PIE4            equ	1818	;# 
  4388     071B                     PIE5            equ	1819	;# 
  4389     071C                     PIE6            equ	1820	;# 
  4390     071D                     PIE7            equ	1821	;# 
  4391     071E                     PIE8            equ	1822	;# 
  4392     0796                     PMD0            equ	1942	;# 
  4393     0797                     PMD1            equ	1943	;# 
  4394     0798                     PMD2            equ	1944	;# 
  4395     0799                     PMD3            equ	1945	;# 
  4396     079A                     PMD4            equ	1946	;# 
  4397     079B                     PMD5            equ	1947	;# 
  4398     079C                     PMD6            equ	1948	;# 
  4399     079D                     PMD7            equ	1949	;# 
  4400     080C                     WDTCON0         equ	2060	;# 
  4401     080D                     WDTCON1         equ	2061	;# 
  4402     080E                     WDTPSL          equ	2062	;# 
  4403     080F                     WDTPSH          equ	2063	;# 
  4404     0810                     WDTTMR          equ	2064	;# 
  4405     0811                     BORCON          equ	2065	;# 
  4406     0812                     VREGCON         equ	2066	;# 
  4407     0813                     PCON0           equ	2067	;# 
  4408     0814                     PCON1           equ	2068	;# 
  4409     081A                     NVMADR          equ	2074	;# 
  4410     081A                     NVMADRL         equ	2074	;# 
  4411     081B                     NVMADRH         equ	2075	;# 
  4412     081C                     NVMDAT          equ	2076	;# 
  4413     081C                     NVMDATL         equ	2076	;# 
  4414     081D                     NVMDATH         equ	2077	;# 
  4415     081E                     NVMCON1         equ	2078	;# 
  4416     081F                     NVMCON2         equ	2079	;# 
  4417     088C                     CPUDOZE         equ	2188	;# 
  4418     088D                     OSCCON1         equ	2189	;# 
  4419     088E                     OSCCON2         equ	2190	;# 
  4420     088F                     OSCCON3         equ	2191	;# 
  4421     0890                     OSCSTAT         equ	2192	;# 
  4422     0891                     OSCEN           equ	2193	;# 
  4423     0892                     OSCTUNE         equ	2194	;# 
  4424     0893                     OSCFRQ          equ	2195	;# 
  4425     0895                     CLKRCON         equ	2197	;# 
  4426     0896                     CLKRCLK         equ	2198	;# 
  4427     0897                     MD1CON0         equ	2199	;# 
  4428     0898                     MD1CON1         equ	2200	;# 
  4429     0899                     MD1SRC          equ	2201	;# 
  4430     089A                     MD1CARL         equ	2202	;# 
  4431     089B                     MD1CARH         equ	2203	;# 
  4432     090C                     FVRCON          equ	2316	;# 
  4433     090E                     DAC1CON0        equ	2318	;# 
  4434     090F                     DAC1CON1        equ	2319	;# 
  4435     091F                     ZCDCON          equ	2335	;# 
  4436     098F                     CMOUT           equ	2447	;# 
  4437     098F                     CMSTAT          equ	2447	;# 
  4438     0990                     CM1CON0         equ	2448	;# 
  4439     0991                     CM1CON1         equ	2449	;# 
  4440     0992                     CM1NCH          equ	2450	;# 
  4441     0993                     CM1PCH          equ	2451	;# 
  4442     0994                     CM2CON0         equ	2452	;# 
  4443     0995                     CM2CON1         equ	2453	;# 
  4444     0996                     CM2NCH          equ	2454	;# 
  4445     0997                     CM2PCH          equ	2455	;# 
  4446     1E0F                     CLCDATA         equ	7695	;# 
  4447     1E10                     CLC1CON         equ	7696	;# 
  4448     1E11                     CLC1POL         equ	7697	;# 
  4449     1E12                     CLC1SEL0        equ	7698	;# 
  4450     1E13                     CLC1SEL1        equ	7699	;# 
  4451     1E14                     CLC1SEL2        equ	7700	;# 
  4452     1E15                     CLC1SEL3        equ	7701	;# 
  4453     1E16                     CLC1GLS0        equ	7702	;# 
  4454     1E17                     CLC1GLS1        equ	7703	;# 
  4455     1E18                     CLC1GLS2        equ	7704	;# 
  4456     1E19                     CLC1GLS3        equ	7705	;# 
  4457     1E1A                     CLC2CON         equ	7706	;# 
  4458     1E1B                     CLC2POL         equ	7707	;# 
  4459     1E1C                     CLC2SEL0        equ	7708	;# 
  4460     1E1D                     CLC2SEL1        equ	7709	;# 
  4461     1E1E                     CLC2SEL2        equ	7710	;# 
  4462     1E1F                     CLC2SEL3        equ	7711	;# 
  4463     1E20                     CLC2GLS0        equ	7712	;# 
  4464     1E21                     CLC2GLS1        equ	7713	;# 
  4465     1E22                     CLC2GLS2        equ	7714	;# 
  4466     1E23                     CLC2GLS3        equ	7715	;# 
  4467     1E24                     CLC3CON         equ	7716	;# 
  4468     1E25                     CLC3POL         equ	7717	;# 
  4469     1E26                     CLC3SEL0        equ	7718	;# 
  4470     1E27                     CLC3SEL1        equ	7719	;# 
  4471     1E28                     CLC3SEL2        equ	7720	;# 
  4472     1E29                     CLC3SEL3        equ	7721	;# 
  4473     1E2A                     CLC3GLS0        equ	7722	;# 
  4474     1E2B                     CLC3GLS1        equ	7723	;# 
  4475     1E2C                     CLC3GLS2        equ	7724	;# 
  4476     1E2D                     CLC3GLS3        equ	7725	;# 
  4477     1E2E                     CLC4CON         equ	7726	;# 
  4478     1E2F                     CLC4POL         equ	7727	;# 
  4479     1E30                     CLC4SEL0        equ	7728	;# 
  4480     1E31                     CLC4SEL1        equ	7729	;# 
  4481     1E32                     CLC4SEL2        equ	7730	;# 
  4482     1E33                     CLC4SEL3        equ	7731	;# 
  4483     1E34                     CLC4GLS0        equ	7732	;# 
  4484     1E35                     CLC4GLS1        equ	7733	;# 
  4485     1E36                     CLC4GLS2        equ	7734	;# 
  4486     1E37                     CLC4GLS3        equ	7735	;# 
  4487     1E8F                     PPSLOCK         equ	7823	;# 
  4488     1E90                     INTPPS          equ	7824	;# 
  4489     1E91                     T0CKIPPS        equ	7825	;# 
  4490     1E92                     T1CKIPPS        equ	7826	;# 
  4491     1E93                     T1GPPS          equ	7827	;# 
  4492     1E94                     T3CKIPPS        equ	7828	;# 
  4493     1E95                     T3GPPS          equ	7829	;# 
  4494     1E96                     T5CKIPPS        equ	7830	;# 
  4495     1E97                     T5GPPS          equ	7831	;# 
  4496     1E9C                     T2INPPS         equ	7836	;# 
  4497     1E9D                     T4INPPS         equ	7837	;# 
  4498     1E9E                     T6INPPS         equ	7838	;# 
  4499     1EA1                     CCP1PPS         equ	7841	;# 
  4500     1EA2                     CCP2PPS         equ	7842	;# 
  4501     1EA3                     CCP3PPS         equ	7843	;# 
  4502     1EA4                     CCP4PPS         equ	7844	;# 
  4503     1EA9                     SMT1WINPPS      equ	7849	;# 
  4504     1EAA                     SMT1SIGPPS      equ	7850	;# 
  4505     1EB1                     CWG1PPS         equ	7857	;# 
  4506     1EB2                     CWG2PPS         equ	7858	;# 
  4507     1EB8                     MDCARLPPS       equ	7864	;# 
  4508     1EB9                     MDCARHPPS       equ	7865	;# 
  4509     1EBA                     MDSRCPPS        equ	7866	;# 
  4510     1EBB                     CLCIN0PPS       equ	7867	;# 
  4511     1EBC                     CLCIN1PPS       equ	7868	;# 
  4512     1EBD                     CLCIN2PPS       equ	7869	;# 
  4513     1EBE                     CLCIN3PPS       equ	7870	;# 
  4514     1EC3                     ADACTPPS        equ	7875	;# 
  4515     1EC5                     SSP1CLKPPS      equ	7877	;# 
  4516     1EC6                     SSP1DATPPS      equ	7878	;# 
  4517     1EC7                     SSP1SSPPS       equ	7879	;# 
  4518     1EC8                     SSP2CLKPPS      equ	7880	;# 
  4519     1EC9                     SSP2DATPPS      equ	7881	;# 
  4520     1ECA                     SSP2SSPPS       equ	7882	;# 
  4521     1ECB                     RX1DTPPS        equ	7883	;# 
  4522     1ECC                     TX1CKPPS        equ	7884	;# 
  4523     1F10                     RA0PPS          equ	7952	;# 
  4524     1F11                     RA1PPS          equ	7953	;# 
  4525     1F12                     RA2PPS          equ	7954	;# 
  4526     1F14                     RA4PPS          equ	7956	;# 
  4527     1F15                     RA5PPS          equ	7957	;# 
  4528     1F20                     RC0PPS          equ	7968	;# 
  4529     1F21                     RC1PPS          equ	7969	;# 
  4530     1F22                     RC2PPS          equ	7970	;# 
  4531     1F23                     RC3PPS          equ	7971	;# 
  4532     1F24                     RC4PPS          equ	7972	;# 
  4533     1F25                     RC5PPS          equ	7973	;# 
  4534     1F38                     ANSELA          equ	7992	;# 
  4535     1F39                     WPUA            equ	7993	;# 
  4536     1F3A                     ODCONA          equ	7994	;# 
  4537     1F3B                     SLRCONA         equ	7995	;# 
  4538     1F3C                     INLVLA          equ	7996	;# 
  4539     1F3D                     IOCAP           equ	7997	;# 
  4540     1F3E                     IOCAN           equ	7998	;# 
  4541     1F3F                     IOCAF           equ	7999	;# 
  4542     1F4E                     ANSELC          equ	8014	;# 
  4543     1F4F                     WPUC            equ	8015	;# 
  4544     1F50                     ODCONC          equ	8016	;# 
  4545     1F51                     SLRCONC         equ	8017	;# 
  4546     1F52                     INLVLC          equ	8018	;# 
  4547     1F53                     IOCCP           equ	8019	;# 
  4548     1F54                     IOCCN           equ	8020	;# 
  4549     1F55                     IOCCF           equ	8021	;# 
  4550     1FE4                     STATUS_SHAD     equ	8164	;# 
  4551     1FE5                     WREG_SHAD       equ	8165	;# 
  4552     1FE6                     BSR_SHAD        equ	8166	;# 
  4553     1FE7                     PCLATH_SHAD     equ	8167	;# 
  4554     1FE8                     FSR0_SHAD       equ	8168	;# 
  4555     1FE8                     FSR0L_SHAD      equ	8168	;# 
  4556     1FE9                     FSR0H_SHAD      equ	8169	;# 
  4557     1FEA                     FSR1L_SHAD      equ	8170	;# 
  4558     1FEB                     FSR1H_SHAD      equ	8171	;# 
  4559     1FED                     STKPTR          equ	8173	;# 
  4560     1FEE                     TOSL            equ	8174	;# 
  4561     1FEF                     TOSH            equ	8175	;# 
  4562     0000                     INDF0           equ	0	;# 
  4563     0001                     INDF1           equ	1	;# 
  4564     0002                     PCL             equ	2	;# 
  4565     0003                     STATUS          equ	3	;# 
  4566     0004                     FSR0L           equ	4	;# 
  4567     0005                     FSR0H           equ	5	;# 
  4568     0006                     FSR1L           equ	6	;# 
  4569     0007                     FSR1H           equ	7	;# 
  4570     0008                     BSR             equ	8	;# 
  4571     0009                     WREG            equ	9	;# 
  4572     000A                     PCLATH          equ	10	;# 
  4573     000B                     INTCON          equ	11	;# 
  4574     000C                     PORTA           equ	12	;# 
  4575     000E                     PORTC           equ	14	;# 
  4576     0012                     TRISA           equ	18	;# 
  4577     0014                     TRISC           equ	20	;# 
  4578     0018                     LATA            equ	24	;# 
  4579     001A                     LATC            equ	26	;# 
  4580     008C                     ADLTH           equ	140	;# 
  4581     008C                     ADLTHL          equ	140	;# 
  4582     008D                     ADLTHH          equ	141	;# 
  4583     008E                     ADUTH           equ	142	;# 
  4584     008E                     ADUTHL          equ	142	;# 
  4585     008F                     ADUTHH          equ	143	;# 
  4586     0090                     ADERR           equ	144	;# 
  4587     0090                     ADERRL          equ	144	;# 
  4588     0091                     ADERRH          equ	145	;# 
  4589     0092                     ADSTPT          equ	146	;# 
  4590     0092                     ADSTPTL         equ	146	;# 
  4591     0093                     ADSTPTH         equ	147	;# 
  4592     0094                     ADFLTR          equ	148	;# 
  4593     0094                     ADFLTRL         equ	148	;# 
  4594     0095                     ADFLTRH         equ	149	;# 
  4595     0096                     ADACC           equ	150	;# 
  4596     0096                     ADACCL          equ	150	;# 
  4597     0097                     ADACCH          equ	151	;# 
  4598     0098                     ADACCU          equ	152	;# 
  4599     0099                     ADCNT           equ	153	;# 
  4600     009A                     ADRPT           equ	154	;# 
  4601     009B                     ADPREV          equ	155	;# 
  4602     009B                     ADPREVL         equ	155	;# 
  4603     009C                     ADPREVH         equ	156	;# 
  4604     009D                     ADRES           equ	157	;# 
  4605     009D                     ADRESL          equ	157	;# 
  4606     009E                     ADRESH          equ	158	;# 
  4607     009F                     ADPCH           equ	159	;# 
  4608     010C                     ADACQ           equ	268	;# 
  4609     010C                     ADACQL          equ	268	;# 
  4610     010D                     ADACQH          equ	269	;# 
  4611     010E                     ADCAP           equ	270	;# 
  4612     010F                     ADPRE           equ	271	;# 
  4613     010F                     ADPREL          equ	271	;# 
  4614     0110                     ADPREH          equ	272	;# 
  4615     0111                     ADCON0          equ	273	;# 
  4616     0112                     ADCON1          equ	274	;# 
  4617     0113                     ADCON2          equ	275	;# 
  4618     0114                     ADCON3          equ	276	;# 
  4619     0115                     ADSTAT          equ	277	;# 
  4620     0116                     ADREF           equ	278	;# 
  4621     0117                     ADACT           equ	279	;# 
  4622     0118                     ADCLK           equ	280	;# 
  4623     0119                     RC1REG          equ	281	;# 
  4624     0119                     RCREG           equ	281	;# 
  4625     0119                     RCREG1          equ	281	;# 
  4626     011A                     TX1REG          equ	282	;# 
  4627     011A                     TXREG1          equ	282	;# 
  4628     011A                     TXREG           equ	282	;# 
  4629     011B                     SP1BRG          equ	283	;# 
  4630     011B                     SP1BRGL         equ	283	;# 
  4631     011B                     SPBRG           equ	283	;# 
  4632     011B                     SPBRG1          equ	283	;# 
  4633     011B                     SPBRGL          equ	283	;# 
  4634     011C                     SP1BRGH         equ	284	;# 
  4635     011C                     SPBRGH          equ	284	;# 
  4636     011C                     SPBRGH1         equ	284	;# 
  4637     011D                     RC1STA          equ	285	;# 
  4638     011D                     RCSTA1          equ	285	;# 
  4639     011D                     RCSTA           equ	285	;# 
  4640     011E                     TX1STA          equ	286	;# 
  4641     011E                     TXSTA1          equ	286	;# 
  4642     011E                     TXSTA           equ	286	;# 
  4643     011F                     BAUD1CON        equ	287	;# 
  4644     011F                     BAUDCON1        equ	287	;# 
  4645     011F                     BAUDCTL1        equ	287	;# 
  4646     011F                     BAUDCON         equ	287	;# 
  4647     011F                     BAUDCTL         equ	287	;# 
  4648     018C                     SSP1BUF         equ	396	;# 
  4649     018D                     SSP1ADD         equ	397	;# 
  4650     018E                     SSP1MSK         equ	398	;# 
  4651     018F                     SSP1STAT        equ	399	;# 
  4652     0190                     SSP1CON1        equ	400	;# 
  4653     0191                     SSP1CON2        equ	401	;# 
  4654     0192                     SSP1CON3        equ	402	;# 
  4655     0196                     SSP2BUF         equ	406	;# 
  4656     0197                     SSP2ADD         equ	407	;# 
  4657     0198                     SSP2MSK         equ	408	;# 
  4658     0199                     SSP2STAT        equ	409	;# 
  4659     019A                     SSP2CON1        equ	410	;# 
  4660     019B                     SSP2CON2        equ	411	;# 
  4661     019C                     SSP2CON3        equ	412	;# 
  4662     020C                     TMR1L           equ	524	;# 
  4663     020D                     TMR1H           equ	525	;# 
  4664     020E                     T1CON           equ	526	;# 
  4665     020E                     TMR1CON         equ	526	;# 
  4666     020F                     T1GCON          equ	527	;# 
  4667     020F                     TMR1GCON        equ	527	;# 
  4668     0210                     T1GATE          equ	528	;# 
  4669     0210                     TMR1GATE        equ	528	;# 
  4670     0211                     T1CLK           equ	529	;# 
  4671     0211                     TMR1CLK         equ	529	;# 
  4672     0212                     TMR3L           equ	530	;# 
  4673     0213                     TMR3H           equ	531	;# 
  4674     0214                     T3CON           equ	532	;# 
  4675     0214                     TMR3CON         equ	532	;# 
  4676     0215                     T3GCON          equ	533	;# 
  4677     0215                     TMR3GCON        equ	533	;# 
  4678     0216                     T3GATE          equ	534	;# 
  4679     0216                     TMR3GATE        equ	534	;# 
  4680     0217                     T3CLK           equ	535	;# 
  4681     0217                     TMR3CLK         equ	535	;# 
  4682     0218                     TMR5L           equ	536	;# 
  4683     0219                     TMR5H           equ	537	;# 
  4684     021A                     T5CON           equ	538	;# 
  4685     021A                     TMR5CON         equ	538	;# 
  4686     021B                     T5GCON          equ	539	;# 
  4687     021B                     TMR5GCON        equ	539	;# 
  4688     021C                     T5GATE          equ	540	;# 
  4689     021C                     TMR5GATE        equ	540	;# 
  4690     021D                     T5CLK           equ	541	;# 
  4691     021D                     TMR5CLK         equ	541	;# 
  4692     021E                     CCPTMRS0        equ	542	;# 
  4693     021F                     CCPTMRS1        equ	543	;# 
  4694     028C                     T2TMR           equ	652	;# 
  4695     028C                     TMR2            equ	652	;# 
  4696     028D                     T2PR            equ	653	;# 
  4697     028D                     PR2             equ	653	;# 
  4698     028E                     T2CON           equ	654	;# 
  4699     028F                     T2HLT           equ	655	;# 
  4700     0290                     T2CLKCON        equ	656	;# 
  4701     0291                     T2RST           equ	657	;# 
  4702     0292                     T4TMR           equ	658	;# 
  4703     0292                     TMR4            equ	658	;# 
  4704     0293                     T4PR            equ	659	;# 
  4705     0293                     PR4             equ	659	;# 
  4706     0294                     T4CON           equ	660	;# 
  4707     0295                     T4HLT           equ	661	;# 
  4708     0296                     T4CLKCON        equ	662	;# 
  4709     0297                     T4RST           equ	663	;# 
  4710     0298                     T6TMR           equ	664	;# 
  4711     0298                     TMR6            equ	664	;# 
  4712     0299                     T6PR            equ	665	;# 
  4713     0299                     PR6             equ	665	;# 
  4714     029A                     T6CON           equ	666	;# 
  4715     029B                     T6HLT           equ	667	;# 
  4716     029C                     T6CLKCON        equ	668	;# 
  4717     029D                     T6RST           equ	669	;# 
  4718     029F                     ADCPCON0        equ	671	;# 
  4719     030C                     CCPR1           equ	780	;# 
  4720     030C                     CCPR1L          equ	780	;# 
  4721     030D                     CCPR1H          equ	781	;# 
  4722     030E                     CCP1CON         equ	782	;# 
  4723     030F                     CCP1CAP         equ	783	;# 
  4724     0310                     CCPR2           equ	784	;# 
  4725     0310                     CCPR2L          equ	784	;# 
  4726     0311                     CCPR2H          equ	785	;# 
  4727     0312                     CCP2CON         equ	786	;# 
  4728     0313                     CCP2CAP         equ	787	;# 
  4729     0314                     CCPR3           equ	788	;# 
  4730     0314                     CCPR3L          equ	788	;# 
  4731     0315                     CCPR3H          equ	789	;# 
  4732     0316                     CCP3CON         equ	790	;# 
  4733     0317                     CCP3CAP         equ	791	;# 
  4734     0318                     CCPR4           equ	792	;# 
  4735     0318                     CCPR4L          equ	792	;# 
  4736     0319                     CCPR4H          equ	793	;# 
  4737     031A                     CCP4CON         equ	794	;# 
  4738     031B                     CCP4CAP         equ	795	;# 
  4739     038C                     PWM6DC          equ	908	;# 
  4740     038C                     PWM6DCL         equ	908	;# 
  4741     038D                     PWM6DCH         equ	909	;# 
  4742     038E                     PWM6CON         equ	910	;# 
  4743     0390                     PWM7DC          equ	912	;# 
  4744     0390                     PWM7DCL         equ	912	;# 
  4745     0391                     PWM7DCH         equ	913	;# 
  4746     0392                     PWM7CON         equ	914	;# 
  4747     048C                     SMT1TMR         equ	1164	;# 
  4748     048C                     SMT1TMRL        equ	1164	;# 
  4749     048D                     SMT1TMRH        equ	1165	;# 
  4750     048E                     SMT1TMRU        equ	1166	;# 
  4751     048F                     SMT1CPR         equ	1167	;# 
  4752     048F                     SMT1CPRL        equ	1167	;# 
  4753     0490                     SMT1CPRH        equ	1168	;# 
  4754     0491                     SMT1CPRU        equ	1169	;# 
  4755     0492                     SMT1CPW         equ	1170	;# 
  4756     0492                     SMT1CPWL        equ	1170	;# 
  4757     0493                     SMT1CPWH        equ	1171	;# 
  4758     0494                     SMT1CPWU        equ	1172	;# 
  4759     0495                     SMT1PR          equ	1173	;# 
  4760     0495                     SMT1PRL         equ	1173	;# 
  4761     0496                     SMT1PRH         equ	1174	;# 
  4762     0497                     SMT1PRU         equ	1175	;# 
  4763     0498                     SMT1CON0        equ	1176	;# 
  4764     0499                     SMT1CON1        equ	1177	;# 
  4765     049A                     SMT1STAT        equ	1178	;# 
  4766     049B                     SMT1CLK         equ	1179	;# 
  4767     049C                     SMT1SIG         equ	1180	;# 
  4768     049D                     SMT1WIN         equ	1181	;# 
  4769     058C                     NCO1ACC         equ	1420	;# 
  4770     058C                     NCO1ACCL        equ	1420	;# 
  4771     058D                     NCO1ACCH        equ	1421	;# 
  4772     058E                     NCO1ACCU        equ	1422	;# 
  4773     058F                     NCO1INC         equ	1423	;# 
  4774     058F                     NCO1INCL        equ	1423	;# 
  4775     0590                     NCO1INCH        equ	1424	;# 
  4776     0591                     NCO1INCU        equ	1425	;# 
  4777     0592                     NCO1CON         equ	1426	;# 
  4778     0593                     NCO1CLK         equ	1427	;# 
  4779     059C                     TMR0L           equ	1436	;# 
  4780     059C                     TMR0            equ	1436	;# 
  4781     059D                     TMR0H           equ	1437	;# 
  4782     059D                     PR0             equ	1437	;# 
  4783     059E                     T0CON0          equ	1438	;# 
  4784     059F                     T0CON1          equ	1439	;# 
  4785     060C                     CWG1CLK         equ	1548	;# 
  4786     060C                     CWG1CLKCON      equ	1548	;# 
  4787     060D                     CWG1ISM         equ	1549	;# 
  4788     060D                     CWG1DAT         equ	1549	;# 
  4789     060E                     CWG1DBR         equ	1550	;# 
  4790     060F                     CWG1DBF         equ	1551	;# 
  4791     0610                     CWG1CON0        equ	1552	;# 
  4792     0611                     CWG1CON1        equ	1553	;# 
  4793     0612                     CWG1AS0         equ	1554	;# 
  4794     0613                     CWG1AS1         equ	1555	;# 
  4795     0614                     CWG1STR         equ	1556	;# 
  4796     0616                     CWG2CLK         equ	1558	;# 
  4797     0616                     CWG2CLKCON      equ	1558	;# 
  4798     0617                     CWG2ISM         equ	1559	;# 
  4799     0617                     CWG2DAT         equ	1559	;# 
  4800     0618                     CWG2DBR         equ	1560	;# 
  4801     0619                     CWG2DBF         equ	1561	;# 
  4802     061A                     CWG2CON0        equ	1562	;# 
  4803     061B                     CWG2CON1        equ	1563	;# 
  4804     061C                     CWG2AS0         equ	1564	;# 
  4805     061D                     CWG2AS1         equ	1565	;# 
  4806     061E                     CWG2STR         equ	1566	;# 
  4807     070C                     PIR0            equ	1804	;# 
  4808     070D                     PIR1            equ	1805	;# 
  4809     070E                     PIR2            equ	1806	;# 
  4810     070F                     PIR3            equ	1807	;# 
  4811     0710                     PIR4            equ	1808	;# 
  4812     0711                     PIR5            equ	1809	;# 
  4813     0712                     PIR6            equ	1810	;# 
  4814     0713                     PIR7            equ	1811	;# 
  4815     0714                     PIR8            equ	1812	;# 
  4816     0716                     PIE0            equ	1814	;# 
  4817     0717                     PIE1            equ	1815	;# 
  4818     0718                     PIE2            equ	1816	;# 
  4819     0719                     PIE3            equ	1817	;# 
  4820     071A                     PIE4            equ	1818	;# 
  4821     071B                     PIE5            equ	1819	;# 
  4822     071C                     PIE6            equ	1820	;# 
  4823     071D                     PIE7            equ	1821	;# 
  4824     071E                     PIE8            equ	1822	;# 
  4825     0796                     PMD0            equ	1942	;# 
  4826     0797                     PMD1            equ	1943	;# 
  4827     0798                     PMD2            equ	1944	;# 
  4828     0799                     PMD3            equ	1945	;# 
  4829     079A                     PMD4            equ	1946	;# 
  4830     079B                     PMD5            equ	1947	;# 
  4831     079C                     PMD6            equ	1948	;# 
  4832     079D                     PMD7            equ	1949	;# 
  4833     080C                     WDTCON0         equ	2060	;# 
  4834     080D                     WDTCON1         equ	2061	;# 
  4835     080E                     WDTPSL          equ	2062	;# 
  4836     080F                     WDTPSH          equ	2063	;# 
  4837     0810                     WDTTMR          equ	2064	;# 
  4838     0811                     BORCON          equ	2065	;# 
  4839     0812                     VREGCON         equ	2066	;# 
  4840     0813                     PCON0           equ	2067	;# 
  4841     0814                     PCON1           equ	2068	;# 
  4842     081A                     NVMADR          equ	2074	;# 
  4843     081A                     NVMADRL         equ	2074	;# 
  4844     081B                     NVMADRH         equ	2075	;# 
  4845     081C                     NVMDAT          equ	2076	;# 
  4846     081C                     NVMDATL         equ	2076	;# 
  4847     081D                     NVMDATH         equ	2077	;# 
  4848     081E                     NVMCON1         equ	2078	;# 
  4849     081F                     NVMCON2         equ	2079	;# 
  4850     088C                     CPUDOZE         equ	2188	;# 
  4851     088D                     OSCCON1         equ	2189	;# 
  4852     088E                     OSCCON2         equ	2190	;# 
  4853     088F                     OSCCON3         equ	2191	;# 
  4854     0890                     OSCSTAT         equ	2192	;# 
  4855     0891                     OSCEN           equ	2193	;# 
  4856     0892                     OSCTUNE         equ	2194	;# 
  4857     0893                     OSCFRQ          equ	2195	;# 
  4858     0895                     CLKRCON         equ	2197	;# 
  4859     0896                     CLKRCLK         equ	2198	;# 
  4860     0897                     MD1CON0         equ	2199	;# 
  4861     0898                     MD1CON1         equ	2200	;# 
  4862     0899                     MD1SRC          equ	2201	;# 
  4863     089A                     MD1CARL         equ	2202	;# 
  4864     089B                     MD1CARH         equ	2203	;# 
  4865     090C                     FVRCON          equ	2316	;# 
  4866     090E                     DAC1CON0        equ	2318	;# 
  4867     090F                     DAC1CON1        equ	2319	;# 
  4868     091F                     ZCDCON          equ	2335	;# 
  4869     098F                     CMOUT           equ	2447	;# 
  4870     098F                     CMSTAT          equ	2447	;# 
  4871     0990                     CM1CON0         equ	2448	;# 
  4872     0991                     CM1CON1         equ	2449	;# 
  4873     0992                     CM1NCH          equ	2450	;# 
  4874     0993                     CM1PCH          equ	2451	;# 
  4875     0994                     CM2CON0         equ	2452	;# 
  4876     0995                     CM2CON1         equ	2453	;# 
  4877     0996                     CM2NCH          equ	2454	;# 
  4878     0997                     CM2PCH          equ	2455	;# 
  4879     1E0F                     CLCDATA         equ	7695	;# 
  4880     1E10                     CLC1CON         equ	7696	;# 
  4881     1E11                     CLC1POL         equ	7697	;# 
  4882     1E12                     CLC1SEL0        equ	7698	;# 
  4883     1E13                     CLC1SEL1        equ	7699	;# 
  4884     1E14                     CLC1SEL2        equ	7700	;# 
  4885     1E15                     CLC1SEL3        equ	7701	;# 
  4886     1E16                     CLC1GLS0        equ	7702	;# 
  4887     1E17                     CLC1GLS1        equ	7703	;# 
  4888     1E18                     CLC1GLS2        equ	7704	;# 
  4889     1E19                     CLC1GLS3        equ	7705	;# 
  4890     1E1A                     CLC2CON         equ	7706	;# 
  4891     1E1B                     CLC2POL         equ	7707	;# 
  4892     1E1C                     CLC2SEL0        equ	7708	;# 
  4893     1E1D                     CLC2SEL1        equ	7709	;# 
  4894     1E1E                     CLC2SEL2        equ	7710	;# 
  4895     1E1F                     CLC2SEL3        equ	7711	;# 
  4896     1E20                     CLC2GLS0        equ	7712	;# 
  4897     1E21                     CLC2GLS1        equ	7713	;# 
  4898     1E22                     CLC2GLS2        equ	7714	;# 
  4899     1E23                     CLC2GLS3        equ	7715	;# 
  4900     1E24                     CLC3CON         equ	7716	;# 
  4901     1E25                     CLC3POL         equ	7717	;# 
  4902     1E26                     CLC3SEL0        equ	7718	;# 
  4903     1E27                     CLC3SEL1        equ	7719	;# 
  4904     1E28                     CLC3SEL2        equ	7720	;# 
  4905     1E29                     CLC3SEL3        equ	7721	;# 
  4906     1E2A                     CLC3GLS0        equ	7722	;# 
  4907     1E2B                     CLC3GLS1        equ	7723	;# 
  4908     1E2C                     CLC3GLS2        equ	7724	;# 
  4909     1E2D                     CLC3GLS3        equ	7725	;# 
  4910     1E2E                     CLC4CON         equ	7726	;# 
  4911     1E2F                     CLC4POL         equ	7727	;# 
  4912     1E30                     CLC4SEL0        equ	7728	;# 
  4913     1E31                     CLC4SEL1        equ	7729	;# 
  4914     1E32                     CLC4SEL2        equ	7730	;# 
  4915     1E33                     CLC4SEL3        equ	7731	;# 
  4916     1E34                     CLC4GLS0        equ	7732	;# 
  4917     1E35                     CLC4GLS1        equ	7733	;# 
  4918     1E36                     CLC4GLS2        equ	7734	;# 
  4919     1E37                     CLC4GLS3        equ	7735	;# 
  4920     1E8F                     PPSLOCK         equ	7823	;# 
  4921     1E90                     INTPPS          equ	7824	;# 
  4922     1E91                     T0CKIPPS        equ	7825	;# 
  4923     1E92                     T1CKIPPS        equ	7826	;# 
  4924     1E93                     T1GPPS          equ	7827	;# 
  4925     1E94                     T3CKIPPS        equ	7828	;# 
  4926     1E95                     T3GPPS          equ	7829	;# 
  4927     1E96                     T5CKIPPS        equ	7830	;# 
  4928     1E97                     T5GPPS          equ	7831	;# 
  4929     1E9C                     T2INPPS         equ	7836	;# 
  4930     1E9D                     T4INPPS         equ	7837	;# 
  4931     1E9E                     T6INPPS         equ	7838	;# 
  4932     1EA1                     CCP1PPS         equ	7841	;# 
  4933     1EA2                     CCP2PPS         equ	7842	;# 
  4934     1EA3                     CCP3PPS         equ	7843	;# 
  4935     1EA4                     CCP4PPS         equ	7844	;# 
  4936     1EA9                     SMT1WINPPS      equ	7849	;# 
  4937     1EAA                     SMT1SIGPPS      equ	7850	;# 
  4938     1EB1                     CWG1PPS         equ	7857	;# 
  4939     1EB2                     CWG2PPS         equ	7858	;# 
  4940     1EB8                     MDCARLPPS       equ	7864	;# 
  4941     1EB9                     MDCARHPPS       equ	7865	;# 
  4942     1EBA                     MDSRCPPS        equ	7866	;# 
  4943     1EBB                     CLCIN0PPS       equ	7867	;# 
  4944     1EBC                     CLCIN1PPS       equ	7868	;# 
  4945     1EBD                     CLCIN2PPS       equ	7869	;# 
  4946     1EBE                     CLCIN3PPS       equ	7870	;# 
  4947     1EC3                     ADACTPPS        equ	7875	;# 
  4948     1EC5                     SSP1CLKPPS      equ	7877	;# 
  4949     1EC6                     SSP1DATPPS      equ	7878	;# 
  4950     1EC7                     SSP1SSPPS       equ	7879	;# 
  4951     1EC8                     SSP2CLKPPS      equ	7880	;# 
  4952     1EC9                     SSP2DATPPS      equ	7881	;# 
  4953     1ECA                     SSP2SSPPS       equ	7882	;# 
  4954     1ECB                     RX1DTPPS        equ	7883	;# 
  4955     1ECC                     TX1CKPPS        equ	7884	;# 
  4956     1F10                     RA0PPS          equ	7952	;# 
  4957     1F11                     RA1PPS          equ	7953	;# 
  4958     1F12                     RA2PPS          equ	7954	;# 
  4959     1F14                     RA4PPS          equ	7956	;# 
  4960     1F15                     RA5PPS          equ	7957	;# 
  4961     1F20                     RC0PPS          equ	7968	;# 
  4962     1F21                     RC1PPS          equ	7969	;# 
  4963     1F22                     RC2PPS          equ	7970	;# 
  4964     1F23                     RC3PPS          equ	7971	;# 
  4965     1F24                     RC4PPS          equ	7972	;# 
  4966     1F25                     RC5PPS          equ	7973	;# 
  4967     1F38                     ANSELA          equ	7992	;# 
  4968     1F39                     WPUA            equ	7993	;# 
  4969     1F3A                     ODCONA          equ	7994	;# 
  4970     1F3B                     SLRCONA         equ	7995	;# 
  4971     1F3C                     INLVLA          equ	7996	;# 
  4972     1F3D                     IOCAP           equ	7997	;# 
  4973     1F3E                     IOCAN           equ	7998	;# 
  4974     1F3F                     IOCAF           equ	7999	;# 
  4975     1F4E                     ANSELC          equ	8014	;# 
  4976     1F4F                     WPUC            equ	8015	;# 
  4977     1F50                     ODCONC          equ	8016	;# 
  4978     1F51                     SLRCONC         equ	8017	;# 
  4979     1F52                     INLVLC          equ	8018	;# 
  4980     1F53                     IOCCP           equ	8019	;# 
  4981     1F54                     IOCCN           equ	8020	;# 
  4982     1F55                     IOCCF           equ	8021	;# 
  4983     1FE4                     STATUS_SHAD     equ	8164	;# 
  4984     1FE5                     WREG_SHAD       equ	8165	;# 
  4985     1FE6                     BSR_SHAD        equ	8166	;# 
  4986     1FE7                     PCLATH_SHAD     equ	8167	;# 
  4987     1FE8                     FSR0_SHAD       equ	8168	;# 
  4988     1FE8                     FSR0L_SHAD      equ	8168	;# 
  4989     1FE9                     FSR0H_SHAD      equ	8169	;# 
  4990     1FEA                     FSR1L_SHAD      equ	8170	;# 
  4991     1FEB                     FSR1H_SHAD      equ	8171	;# 
  4992     1FED                     STKPTR          equ	8173	;# 
  4993     1FEE                     TOSL            equ	8174	;# 
  4994     1FEF                     TOSH            equ	8175	;# 
  4995     0000                     INDF0           equ	0	;# 
  4996     0001                     INDF1           equ	1	;# 
  4997     0002                     PCL             equ	2	;# 
  4998     0003                     STATUS          equ	3	;# 
  4999     0004                     FSR0L           equ	4	;# 
  5000     0005                     FSR0H           equ	5	;# 
  5001     0006                     FSR1L           equ	6	;# 
  5002     0007                     FSR1H           equ	7	;# 
  5003     0008                     BSR             equ	8	;# 
  5004     0009                     WREG            equ	9	;# 
  5005     000A                     PCLATH          equ	10	;# 
  5006     000B                     INTCON          equ	11	;# 
  5007     000C                     PORTA           equ	12	;# 
  5008     000E                     PORTC           equ	14	;# 
  5009     0012                     TRISA           equ	18	;# 
  5010     0014                     TRISC           equ	20	;# 
  5011     0018                     LATA            equ	24	;# 
  5012     001A                     LATC            equ	26	;# 
  5013     008C                     ADLTH           equ	140	;# 
  5014     008C                     ADLTHL          equ	140	;# 
  5015     008D                     ADLTHH          equ	141	;# 
  5016     008E                     ADUTH           equ	142	;# 
  5017     008E                     ADUTHL          equ	142	;# 
  5018     008F                     ADUTHH          equ	143	;# 
  5019     0090                     ADERR           equ	144	;# 
  5020     0090                     ADERRL          equ	144	;# 
  5021     0091                     ADERRH          equ	145	;# 
  5022     0092                     ADSTPT          equ	146	;# 
  5023     0092                     ADSTPTL         equ	146	;# 
  5024     0093                     ADSTPTH         equ	147	;# 
  5025     0094                     ADFLTR          equ	148	;# 
  5026     0094                     ADFLTRL         equ	148	;# 
  5027     0095                     ADFLTRH         equ	149	;# 
  5028     0096                     ADACC           equ	150	;# 
  5029     0096                     ADACCL          equ	150	;# 
  5030     0097                     ADACCH          equ	151	;# 
  5031     0098                     ADACCU          equ	152	;# 
  5032     0099                     ADCNT           equ	153	;# 
  5033     009A                     ADRPT           equ	154	;# 
  5034     009B                     ADPREV          equ	155	;# 
  5035     009B                     ADPREVL         equ	155	;# 
  5036     009C                     ADPREVH         equ	156	;# 
  5037     009D                     ADRES           equ	157	;# 
  5038     009D                     ADRESL          equ	157	;# 
  5039     009E                     ADRESH          equ	158	;# 
  5040     009F                     ADPCH           equ	159	;# 
  5041     010C                     ADACQ           equ	268	;# 
  5042     010C                     ADACQL          equ	268	;# 
  5043     010D                     ADACQH          equ	269	;# 
  5044     010E                     ADCAP           equ	270	;# 
  5045     010F                     ADPRE           equ	271	;# 
  5046     010F                     ADPREL          equ	271	;# 
  5047     0110                     ADPREH          equ	272	;# 
  5048     0111                     ADCON0          equ	273	;# 
  5049     0112                     ADCON1          equ	274	;# 
  5050     0113                     ADCON2          equ	275	;# 
  5051     0114                     ADCON3          equ	276	;# 
  5052     0115                     ADSTAT          equ	277	;# 
  5053     0116                     ADREF           equ	278	;# 
  5054     0117                     ADACT           equ	279	;# 
  5055     0118                     ADCLK           equ	280	;# 
  5056     0119                     RC1REG          equ	281	;# 
  5057     0119                     RCREG           equ	281	;# 
  5058     0119                     RCREG1          equ	281	;# 
  5059     011A                     TX1REG          equ	282	;# 
  5060     011A                     TXREG1          equ	282	;# 
  5061     011A                     TXREG           equ	282	;# 
  5062     011B                     SP1BRG          equ	283	;# 
  5063     011B                     SP1BRGL         equ	283	;# 
  5064     011B                     SPBRG           equ	283	;# 
  5065     011B                     SPBRG1          equ	283	;# 
  5066     011B                     SPBRGL          equ	283	;# 
  5067     011C                     SP1BRGH         equ	284	;# 
  5068     011C                     SPBRGH          equ	284	;# 
  5069     011C                     SPBRGH1         equ	284	;# 
  5070     011D                     RC1STA          equ	285	;# 
  5071     011D                     RCSTA1          equ	285	;# 
  5072     011D                     RCSTA           equ	285	;# 
  5073     011E                     TX1STA          equ	286	;# 
  5074     011E                     TXSTA1          equ	286	;# 
  5075     011E                     TXSTA           equ	286	;# 
  5076     011F                     BAUD1CON        equ	287	;# 
  5077     011F                     BAUDCON1        equ	287	;# 
  5078     011F                     BAUDCTL1        equ	287	;# 
  5079     011F                     BAUDCON         equ	287	;# 
  5080     011F                     BAUDCTL         equ	287	;# 
  5081     018C                     SSP1BUF         equ	396	;# 
  5082     018D                     SSP1ADD         equ	397	;# 
  5083     018E                     SSP1MSK         equ	398	;# 
  5084     018F                     SSP1STAT        equ	399	;# 
  5085     0190                     SSP1CON1        equ	400	;# 
  5086     0191                     SSP1CON2        equ	401	;# 
  5087     0192                     SSP1CON3        equ	402	;# 
  5088     0196                     SSP2BUF         equ	406	;# 
  5089     0197                     SSP2ADD         equ	407	;# 
  5090     0198                     SSP2MSK         equ	408	;# 
  5091     0199                     SSP2STAT        equ	409	;# 
  5092     019A                     SSP2CON1        equ	410	;# 
  5093     019B                     SSP2CON2        equ	411	;# 
  5094     019C                     SSP2CON3        equ	412	;# 
  5095     020C                     TMR1L           equ	524	;# 
  5096     020D                     TMR1H           equ	525	;# 
  5097     020E                     T1CON           equ	526	;# 
  5098     020E                     TMR1CON         equ	526	;# 
  5099     020F                     T1GCON          equ	527	;# 
  5100     020F                     TMR1GCON        equ	527	;# 
  5101     0210                     T1GATE          equ	528	;# 
  5102     0210                     TMR1GATE        equ	528	;# 
  5103     0211                     T1CLK           equ	529	;# 
  5104     0211                     TMR1CLK         equ	529	;# 
  5105     0212                     TMR3L           equ	530	;# 
  5106     0213                     TMR3H           equ	531	;# 
  5107     0214                     T3CON           equ	532	;# 
  5108     0214                     TMR3CON         equ	532	;# 
  5109     0215                     T3GCON          equ	533	;# 
  5110     0215                     TMR3GCON        equ	533	;# 
  5111     0216                     T3GATE          equ	534	;# 
  5112     0216                     TMR3GATE        equ	534	;# 
  5113     0217                     T3CLK           equ	535	;# 
  5114     0217                     TMR3CLK         equ	535	;# 
  5115     0218                     TMR5L           equ	536	;# 
  5116     0219                     TMR5H           equ	537	;# 
  5117     021A                     T5CON           equ	538	;# 
  5118     021A                     TMR5CON         equ	538	;# 
  5119     021B                     T5GCON          equ	539	;# 
  5120     021B                     TMR5GCON        equ	539	;# 
  5121     021C                     T5GATE          equ	540	;# 
  5122     021C                     TMR5GATE        equ	540	;# 
  5123     021D                     T5CLK           equ	541	;# 
  5124     021D                     TMR5CLK         equ	541	;# 
  5125     021E                     CCPTMRS0        equ	542	;# 
  5126     021F                     CCPTMRS1        equ	543	;# 
  5127     028C                     T2TMR           equ	652	;# 
  5128     028C                     TMR2            equ	652	;# 
  5129     028D                     T2PR            equ	653	;# 
  5130     028D                     PR2             equ	653	;# 
  5131     028E                     T2CON           equ	654	;# 
  5132     028F                     T2HLT           equ	655	;# 
  5133     0290                     T2CLKCON        equ	656	;# 
  5134     0291                     T2RST           equ	657	;# 
  5135     0292                     T4TMR           equ	658	;# 
  5136     0292                     TMR4            equ	658	;# 
  5137     0293                     T4PR            equ	659	;# 
  5138     0293                     PR4             equ	659	;# 
  5139     0294                     T4CON           equ	660	;# 
  5140     0295                     T4HLT           equ	661	;# 
  5141     0296                     T4CLKCON        equ	662	;# 
  5142     0297                     T4RST           equ	663	;# 
  5143     0298                     T6TMR           equ	664	;# 
  5144     0298                     TMR6            equ	664	;# 
  5145     0299                     T6PR            equ	665	;# 
  5146     0299                     PR6             equ	665	;# 
  5147     029A                     T6CON           equ	666	;# 
  5148     029B                     T6HLT           equ	667	;# 
  5149     029C                     T6CLKCON        equ	668	;# 
  5150     029D                     T6RST           equ	669	;# 
  5151     029F                     ADCPCON0        equ	671	;# 
  5152     030C                     CCPR1           equ	780	;# 
  5153     030C                     CCPR1L          equ	780	;# 
  5154     030D                     CCPR1H          equ	781	;# 
  5155     030E                     CCP1CON         equ	782	;# 
  5156     030F                     CCP1CAP         equ	783	;# 
  5157     0310                     CCPR2           equ	784	;# 
  5158     0310                     CCPR2L          equ	784	;# 
  5159     0311                     CCPR2H          equ	785	;# 
  5160     0312                     CCP2CON         equ	786	;# 
  5161     0313                     CCP2CAP         equ	787	;# 
  5162     0314                     CCPR3           equ	788	;# 
  5163     0314                     CCPR3L          equ	788	;# 
  5164     0315                     CCPR3H          equ	789	;# 
  5165     0316                     CCP3CON         equ	790	;# 
  5166     0317                     CCP3CAP         equ	791	;# 
  5167     0318                     CCPR4           equ	792	;# 
  5168     0318                     CCPR4L          equ	792	;# 
  5169     0319                     CCPR4H          equ	793	;# 
  5170     031A                     CCP4CON         equ	794	;# 
  5171     031B                     CCP4CAP         equ	795	;# 
  5172     038C                     PWM6DC          equ	908	;# 
  5173     038C                     PWM6DCL         equ	908	;# 
  5174     038D                     PWM6DCH         equ	909	;# 
  5175     038E                     PWM6CON         equ	910	;# 
  5176     0390                     PWM7DC          equ	912	;# 
  5177     0390                     PWM7DCL         equ	912	;# 
  5178     0391                     PWM7DCH         equ	913	;# 
  5179     0392                     PWM7CON         equ	914	;# 
  5180     048C                     SMT1TMR         equ	1164	;# 
  5181     048C                     SMT1TMRL        equ	1164	;# 
  5182     048D                     SMT1TMRH        equ	1165	;# 
  5183     048E                     SMT1TMRU        equ	1166	;# 
  5184     048F                     SMT1CPR         equ	1167	;# 
  5185     048F                     SMT1CPRL        equ	1167	;# 
  5186     0490                     SMT1CPRH        equ	1168	;# 
  5187     0491                     SMT1CPRU        equ	1169	;# 
  5188     0492                     SMT1CPW         equ	1170	;# 
  5189     0492                     SMT1CPWL        equ	1170	;# 
  5190     0493                     SMT1CPWH        equ	1171	;# 
  5191     0494                     SMT1CPWU        equ	1172	;# 
  5192     0495                     SMT1PR          equ	1173	;# 
  5193     0495                     SMT1PRL         equ	1173	;# 
  5194     0496                     SMT1PRH         equ	1174	;# 
  5195     0497                     SMT1PRU         equ	1175	;# 
  5196     0498                     SMT1CON0        equ	1176	;# 
  5197     0499                     SMT1CON1        equ	1177	;# 
  5198     049A                     SMT1STAT        equ	1178	;# 
  5199     049B                     SMT1CLK         equ	1179	;# 
  5200     049C                     SMT1SIG         equ	1180	;# 
  5201     049D                     SMT1WIN         equ	1181	;# 
  5202     058C                     NCO1ACC         equ	1420	;# 
  5203     058C                     NCO1ACCL        equ	1420	;# 
  5204     058D                     NCO1ACCH        equ	1421	;# 
  5205     058E                     NCO1ACCU        equ	1422	;# 
  5206     058F                     NCO1INC         equ	1423	;# 
  5207     058F                     NCO1INCL        equ	1423	;# 
  5208     0590                     NCO1INCH        equ	1424	;# 
  5209     0591                     NCO1INCU        equ	1425	;# 
  5210     0592                     NCO1CON         equ	1426	;# 
  5211     0593                     NCO1CLK         equ	1427	;# 
  5212     059C                     TMR0L           equ	1436	;# 
  5213     059C                     TMR0            equ	1436	;# 
  5214     059D                     TMR0H           equ	1437	;# 
  5215     059D                     PR0             equ	1437	;# 
  5216     059E                     T0CON0          equ	1438	;# 
  5217     059F                     T0CON1          equ	1439	;# 
  5218     060C                     CWG1CLK         equ	1548	;# 
  5219     060C                     CWG1CLKCON      equ	1548	;# 
  5220     060D                     CWG1ISM         equ	1549	;# 
  5221     060D                     CWG1DAT         equ	1549	;# 
  5222     060E                     CWG1DBR         equ	1550	;# 
  5223     060F                     CWG1DBF         equ	1551	;# 
  5224     0610                     CWG1CON0        equ	1552	;# 
  5225     0611                     CWG1CON1        equ	1553	;# 
  5226     0612                     CWG1AS0         equ	1554	;# 
  5227     0613                     CWG1AS1         equ	1555	;# 
  5228     0614                     CWG1STR         equ	1556	;# 
  5229     0616                     CWG2CLK         equ	1558	;# 
  5230     0616                     CWG2CLKCON      equ	1558	;# 
  5231     0617                     CWG2ISM         equ	1559	;# 
  5232     0617                     CWG2DAT         equ	1559	;# 
  5233     0618                     CWG2DBR         equ	1560	;# 
  5234     0619                     CWG2DBF         equ	1561	;# 
  5235     061A                     CWG2CON0        equ	1562	;# 
  5236     061B                     CWG2CON1        equ	1563	;# 
  5237     061C                     CWG2AS0         equ	1564	;# 
  5238     061D                     CWG2AS1         equ	1565	;# 
  5239     061E                     CWG2STR         equ	1566	;# 
  5240     070C                     PIR0            equ	1804	;# 
  5241     070D                     PIR1            equ	1805	;# 
  5242     070E                     PIR2            equ	1806	;# 
  5243     070F                     PIR3            equ	1807	;# 
  5244     0710                     PIR4            equ	1808	;# 
  5245     0711                     PIR5            equ	1809	;# 
  5246     0712                     PIR6            equ	1810	;# 
  5247     0713                     PIR7            equ	1811	;# 
  5248     0714                     PIR8            equ	1812	;# 
  5249     0716                     PIE0            equ	1814	;# 
  5250     0717                     PIE1            equ	1815	;# 
  5251     0718                     PIE2            equ	1816	;# 
  5252     0719                     PIE3            equ	1817	;# 
  5253     071A                     PIE4            equ	1818	;# 
  5254     071B                     PIE5            equ	1819	;# 
  5255     071C                     PIE6            equ	1820	;# 
  5256     071D                     PIE7            equ	1821	;# 
  5257     071E                     PIE8            equ	1822	;# 
  5258     0796                     PMD0            equ	1942	;# 
  5259     0797                     PMD1            equ	1943	;# 
  5260     0798                     PMD2            equ	1944	;# 
  5261     0799                     PMD3            equ	1945	;# 
  5262     079A                     PMD4            equ	1946	;# 
  5263     079B                     PMD5            equ	1947	;# 
  5264     079C                     PMD6            equ	1948	;# 
  5265     079D                     PMD7            equ	1949	;# 
  5266     080C                     WDTCON0         equ	2060	;# 
  5267     080D                     WDTCON1         equ	2061	;# 
  5268     080E                     WDTPSL          equ	2062	;# 
  5269     080F                     WDTPSH          equ	2063	;# 
  5270     0810                     WDTTMR          equ	2064	;# 
  5271     0811                     BORCON          equ	2065	;# 
  5272     0812                     VREGCON         equ	2066	;# 
  5273     0813                     PCON0           equ	2067	;# 
  5274     0814                     PCON1           equ	2068	;# 
  5275     081A                     NVMADR          equ	2074	;# 
  5276     081A                     NVMADRL         equ	2074	;# 
  5277     081B                     NVMADRH         equ	2075	;# 
  5278     081C                     NVMDAT          equ	2076	;# 
  5279     081C                     NVMDATL         equ	2076	;# 
  5280     081D                     NVMDATH         equ	2077	;# 
  5281     081E                     NVMCON1         equ	2078	;# 
  5282     081F                     NVMCON2         equ	2079	;# 
  5283     088C                     CPUDOZE         equ	2188	;# 
  5284     088D                     OSCCON1         equ	2189	;# 
  5285     088E                     OSCCON2         equ	2190	;# 
  5286     088F                     OSCCON3         equ	2191	;# 
  5287     0890                     OSCSTAT         equ	2192	;# 
  5288     0891                     OSCEN           equ	2193	;# 
  5289     0892                     OSCTUNE         equ	2194	;# 
  5290     0893                     OSCFRQ          equ	2195	;# 
  5291     0895                     CLKRCON         equ	2197	;# 
  5292     0896                     CLKRCLK         equ	2198	;# 
  5293     0897                     MD1CON0         equ	2199	;# 
  5294     0898                     MD1CON1         equ	2200	;# 
  5295     0899                     MD1SRC          equ	2201	;# 
  5296     089A                     MD1CARL         equ	2202	;# 
  5297     089B                     MD1CARH         equ	2203	;# 
  5298     090C                     FVRCON          equ	2316	;# 
  5299     090E                     DAC1CON0        equ	2318	;# 
  5300     090F                     DAC1CON1        equ	2319	;# 
  5301     091F                     ZCDCON          equ	2335	;# 
  5302     098F                     CMOUT           equ	2447	;# 
  5303     098F                     CMSTAT          equ	2447	;# 
  5304     0990                     CM1CON0         equ	2448	;# 
  5305     0991                     CM1CON1         equ	2449	;# 
  5306     0992                     CM1NCH          equ	2450	;# 
  5307     0993                     CM1PCH          equ	2451	;# 
  5308     0994                     CM2CON0         equ	2452	;# 
  5309     0995                     CM2CON1         equ	2453	;# 
  5310     0996                     CM2NCH          equ	2454	;# 
  5311     0997                     CM2PCH          equ	2455	;# 
  5312     1E0F                     CLCDATA         equ	7695	;# 
  5313     1E10                     CLC1CON         equ	7696	;# 
  5314     1E11                     CLC1POL         equ	7697	;# 
  5315     1E12                     CLC1SEL0        equ	7698	;# 
  5316     1E13                     CLC1SEL1        equ	7699	;# 
  5317     1E14                     CLC1SEL2        equ	7700	;# 
  5318     1E15                     CLC1SEL3        equ	7701	;# 
  5319     1E16                     CLC1GLS0        equ	7702	;# 
  5320     1E17                     CLC1GLS1        equ	7703	;# 
  5321     1E18                     CLC1GLS2        equ	7704	;# 
  5322     1E19                     CLC1GLS3        equ	7705	;# 
  5323     1E1A                     CLC2CON         equ	7706	;# 
  5324     1E1B                     CLC2POL         equ	7707	;# 
  5325     1E1C                     CLC2SEL0        equ	7708	;# 
  5326     1E1D                     CLC2SEL1        equ	7709	;# 
  5327     1E1E                     CLC2SEL2        equ	7710	;# 
  5328     1E1F                     CLC2SEL3        equ	7711	;# 
  5329     1E20                     CLC2GLS0        equ	7712	;# 
  5330     1E21                     CLC2GLS1        equ	7713	;# 
  5331     1E22                     CLC2GLS2        equ	7714	;# 
  5332     1E23                     CLC2GLS3        equ	7715	;# 
  5333     1E24                     CLC3CON         equ	7716	;# 
  5334     1E25                     CLC3POL         equ	7717	;# 
  5335     1E26                     CLC3SEL0        equ	7718	;# 
  5336     1E27                     CLC3SEL1        equ	7719	;# 
  5337     1E28                     CLC3SEL2        equ	7720	;# 
  5338     1E29                     CLC3SEL3        equ	7721	;# 
  5339     1E2A                     CLC3GLS0        equ	7722	;# 
  5340     1E2B                     CLC3GLS1        equ	7723	;# 
  5341     1E2C                     CLC3GLS2        equ	7724	;# 
  5342     1E2D                     CLC3GLS3        equ	7725	;# 
  5343     1E2E                     CLC4CON         equ	7726	;# 
  5344     1E2F                     CLC4POL         equ	7727	;# 
  5345     1E30                     CLC4SEL0        equ	7728	;# 
  5346     1E31                     CLC4SEL1        equ	7729	;# 
  5347     1E32                     CLC4SEL2        equ	7730	;# 
  5348     1E33                     CLC4SEL3        equ	7731	;# 
  5349     1E34                     CLC4GLS0        equ	7732	;# 
  5350     1E35                     CLC4GLS1        equ	7733	;# 
  5351     1E36                     CLC4GLS2        equ	7734	;# 
  5352     1E37                     CLC4GLS3        equ	7735	;# 
  5353     1E8F                     PPSLOCK         equ	7823	;# 
  5354     1E90                     INTPPS          equ	7824	;# 
  5355     1E91                     T0CKIPPS        equ	7825	;# 
  5356     1E92                     T1CKIPPS        equ	7826	;# 
  5357     1E93                     T1GPPS          equ	7827	;# 
  5358     1E94                     T3CKIPPS        equ	7828	;# 
  5359     1E95                     T3GPPS          equ	7829	;# 
  5360     1E96                     T5CKIPPS        equ	7830	;# 
  5361     1E97                     T5GPPS          equ	7831	;# 
  5362     1E9C                     T2INPPS         equ	7836	;# 
  5363     1E9D                     T4INPPS         equ	7837	;# 
  5364     1E9E                     T6INPPS         equ	7838	;# 
  5365     1EA1                     CCP1PPS         equ	7841	;# 
  5366     1EA2                     CCP2PPS         equ	7842	;# 
  5367     1EA3                     CCP3PPS         equ	7843	;# 
  5368     1EA4                     CCP4PPS         equ	7844	;# 
  5369     1EA9                     SMT1WINPPS      equ	7849	;# 
  5370     1EAA                     SMT1SIGPPS      equ	7850	;# 
  5371     1EB1                     CWG1PPS         equ	7857	;# 
  5372     1EB2                     CWG2PPS         equ	7858	;# 
  5373     1EB8                     MDCARLPPS       equ	7864	;# 
  5374     1EB9                     MDCARHPPS       equ	7865	;# 
  5375     1EBA                     MDSRCPPS        equ	7866	;# 
  5376     1EBB                     CLCIN0PPS       equ	7867	;# 
  5377     1EBC                     CLCIN1PPS       equ	7868	;# 
  5378     1EBD                     CLCIN2PPS       equ	7869	;# 
  5379     1EBE                     CLCIN3PPS       equ	7870	;# 
  5380     1EC3                     ADACTPPS        equ	7875	;# 
  5381     1EC5                     SSP1CLKPPS      equ	7877	;# 
  5382     1EC6                     SSP1DATPPS      equ	7878	;# 
  5383     1EC7                     SSP1SSPPS       equ	7879	;# 
  5384     1EC8                     SSP2CLKPPS      equ	7880	;# 
  5385     1EC9                     SSP2DATPPS      equ	7881	;# 
  5386     1ECA                     SSP2SSPPS       equ	7882	;# 
  5387     1ECB                     RX1DTPPS        equ	7883	;# 
  5388     1ECC                     TX1CKPPS        equ	7884	;# 
  5389     1F10                     RA0PPS          equ	7952	;# 
  5390     1F11                     RA1PPS          equ	7953	;# 
  5391     1F12                     RA2PPS          equ	7954	;# 
  5392     1F14                     RA4PPS          equ	7956	;# 
  5393     1F15                     RA5PPS          equ	7957	;# 
  5394     1F20                     RC0PPS          equ	7968	;# 
  5395     1F21                     RC1PPS          equ	7969	;# 
  5396     1F22                     RC2PPS          equ	7970	;# 
  5397     1F23                     RC3PPS          equ	7971	;# 
  5398     1F24                     RC4PPS          equ	7972	;# 
  5399     1F25                     RC5PPS          equ	7973	;# 
  5400     1F38                     ANSELA          equ	7992	;# 
  5401     1F39                     WPUA            equ	7993	;# 
  5402     1F3A                     ODCONA          equ	7994	;# 
  5403     1F3B                     SLRCONA         equ	7995	;# 
  5404     1F3C                     INLVLA          equ	7996	;# 
  5405     1F3D                     IOCAP           equ	7997	;# 
  5406     1F3E                     IOCAN           equ	7998	;# 
  5407     1F3F                     IOCAF           equ	7999	;# 
  5408     1F4E                     ANSELC          equ	8014	;# 
  5409     1F4F                     WPUC            equ	8015	;# 
  5410     1F50                     ODCONC          equ	8016	;# 
  5411     1F51                     SLRCONC         equ	8017	;# 
  5412     1F52                     INLVLC          equ	8018	;# 
  5413     1F53                     IOCCP           equ	8019	;# 
  5414     1F54                     IOCCN           equ	8020	;# 
  5415     1F55                     IOCCF           equ	8021	;# 
  5416     1FE4                     STATUS_SHAD     equ	8164	;# 
  5417     1FE5                     WREG_SHAD       equ	8165	;# 
  5418     1FE6                     BSR_SHAD        equ	8166	;# 
  5419     1FE7                     PCLATH_SHAD     equ	8167	;# 
  5420     1FE8                     FSR0_SHAD       equ	8168	;# 
  5421     1FE8                     FSR0L_SHAD      equ	8168	;# 
  5422     1FE9                     FSR0H_SHAD      equ	8169	;# 
  5423     1FEA                     FSR1L_SHAD      equ	8170	;# 
  5424     1FEB                     FSR1H_SHAD      equ	8171	;# 
  5425     1FED                     STKPTR          equ	8173	;# 
  5426     1FEE                     TOSL            equ	8174	;# 
  5427     1FEF                     TOSH            equ	8175	;# 
  5428     0000                     INDF0           equ	0	;# 
  5429     0001                     INDF1           equ	1	;# 
  5430     0002                     PCL             equ	2	;# 
  5431     0003                     STATUS          equ	3	;# 
  5432     0004                     FSR0L           equ	4	;# 
  5433     0005                     FSR0H           equ	5	;# 
  5434     0006                     FSR1L           equ	6	;# 
  5435     0007                     FSR1H           equ	7	;# 
  5436     0008                     BSR             equ	8	;# 
  5437     0009                     WREG            equ	9	;# 
  5438     000A                     PCLATH          equ	10	;# 
  5439     000B                     INTCON          equ	11	;# 
  5440     000C                     PORTA           equ	12	;# 
  5441     000E                     PORTC           equ	14	;# 
  5442     0012                     TRISA           equ	18	;# 
  5443     0014                     TRISC           equ	20	;# 
  5444     0018                     LATA            equ	24	;# 
  5445     001A                     LATC            equ	26	;# 
  5446     008C                     ADLTH           equ	140	;# 
  5447     008C                     ADLTHL          equ	140	;# 
  5448     008D                     ADLTHH          equ	141	;# 
  5449     008E                     ADUTH           equ	142	;# 
  5450     008E                     ADUTHL          equ	142	;# 
  5451     008F                     ADUTHH          equ	143	;# 
  5452     0090                     ADERR           equ	144	;# 
  5453     0090                     ADERRL          equ	144	;# 
  5454     0091                     ADERRH          equ	145	;# 
  5455     0092                     ADSTPT          equ	146	;# 
  5456     0092                     ADSTPTL         equ	146	;# 
  5457     0093                     ADSTPTH         equ	147	;# 
  5458     0094                     ADFLTR          equ	148	;# 
  5459     0094                     ADFLTRL         equ	148	;# 
  5460     0095                     ADFLTRH         equ	149	;# 
  5461     0096                     ADACC           equ	150	;# 
  5462     0096                     ADACCL          equ	150	;# 
  5463     0097                     ADACCH          equ	151	;# 
  5464     0098                     ADACCU          equ	152	;# 
  5465     0099                     ADCNT           equ	153	;# 
  5466     009A                     ADRPT           equ	154	;# 
  5467     009B                     ADPREV          equ	155	;# 
  5468     009B                     ADPREVL         equ	155	;# 
  5469     009C                     ADPREVH         equ	156	;# 
  5470     009D                     ADRES           equ	157	;# 
  5471     009D                     ADRESL          equ	157	;# 
  5472     009E                     ADRESH          equ	158	;# 
  5473     009F                     ADPCH           equ	159	;# 
  5474     010C                     ADACQ           equ	268	;# 
  5475     010C                     ADACQL          equ	268	;# 
  5476     010D                     ADACQH          equ	269	;# 
  5477     010E                     ADCAP           equ	270	;# 
  5478     010F                     ADPRE           equ	271	;# 
  5479     010F                     ADPREL          equ	271	;# 
  5480     0110                     ADPREH          equ	272	;# 
  5481     0111                     ADCON0          equ	273	;# 
  5482     0112                     ADCON1          equ	274	;# 
  5483     0113                     ADCON2          equ	275	;# 
  5484     0114                     ADCON3          equ	276	;# 
  5485     0115                     ADSTAT          equ	277	;# 
  5486     0116                     ADREF           equ	278	;# 
  5487     0117                     ADACT           equ	279	;# 
  5488     0118                     ADCLK           equ	280	;# 
  5489     0119                     RC1REG          equ	281	;# 
  5490     0119                     RCREG           equ	281	;# 
  5491     0119                     RCREG1          equ	281	;# 
  5492     011A                     TX1REG          equ	282	;# 
  5493     011A                     TXREG1          equ	282	;# 
  5494     011A                     TXREG           equ	282	;# 
  5495     011B                     SP1BRG          equ	283	;# 
  5496     011B                     SP1BRGL         equ	283	;# 
  5497     011B                     SPBRG           equ	283	;# 
  5498     011B                     SPBRG1          equ	283	;# 
  5499     011B                     SPBRGL          equ	283	;# 
  5500     011C                     SP1BRGH         equ	284	;# 
  5501     011C                     SPBRGH          equ	284	;# 
  5502     011C                     SPBRGH1         equ	284	;# 
  5503     011D                     RC1STA          equ	285	;# 
  5504     011D                     RCSTA1          equ	285	;# 
  5505     011D                     RCSTA           equ	285	;# 
  5506     011E                     TX1STA          equ	286	;# 
  5507     011E                     TXSTA1          equ	286	;# 
  5508     011E                     TXSTA           equ	286	;# 
  5509     011F                     BAUD1CON        equ	287	;# 
  5510     011F                     BAUDCON1        equ	287	;# 
  5511     011F                     BAUDCTL1        equ	287	;# 
  5512     011F                     BAUDCON         equ	287	;# 
  5513     011F                     BAUDCTL         equ	287	;# 
  5514     018C                     SSP1BUF         equ	396	;# 
  5515     018D                     SSP1ADD         equ	397	;# 
  5516     018E                     SSP1MSK         equ	398	;# 
  5517     018F                     SSP1STAT        equ	399	;# 
  5518     0190                     SSP1CON1        equ	400	;# 
  5519     0191                     SSP1CON2        equ	401	;# 
  5520     0192                     SSP1CON3        equ	402	;# 
  5521     0196                     SSP2BUF         equ	406	;# 
  5522     0197                     SSP2ADD         equ	407	;# 
  5523     0198                     SSP2MSK         equ	408	;# 
  5524     0199                     SSP2STAT        equ	409	;# 
  5525     019A                     SSP2CON1        equ	410	;# 
  5526     019B                     SSP2CON2        equ	411	;# 
  5527     019C                     SSP2CON3        equ	412	;# 
  5528     020C                     TMR1L           equ	524	;# 
  5529     020D                     TMR1H           equ	525	;# 
  5530     020E                     T1CON           equ	526	;# 
  5531     020E                     TMR1CON         equ	526	;# 
  5532     020F                     T1GCON          equ	527	;# 
  5533     020F                     TMR1GCON        equ	527	;# 
  5534     0210                     T1GATE          equ	528	;# 
  5535     0210                     TMR1GATE        equ	528	;# 
  5536     0211                     T1CLK           equ	529	;# 
  5537     0211                     TMR1CLK         equ	529	;# 
  5538     0212                     TMR3L           equ	530	;# 
  5539     0213                     TMR3H           equ	531	;# 
  5540     0214                     T3CON           equ	532	;# 
  5541     0214                     TMR3CON         equ	532	;# 
  5542     0215                     T3GCON          equ	533	;# 
  5543     0215                     TMR3GCON        equ	533	;# 
  5544     0216                     T3GATE          equ	534	;# 
  5545     0216                     TMR3GATE        equ	534	;# 
  5546     0217                     T3CLK           equ	535	;# 
  5547     0217                     TMR3CLK         equ	535	;# 
  5548     0218                     TMR5L           equ	536	;# 
  5549     0219                     TMR5H           equ	537	;# 
  5550     021A                     T5CON           equ	538	;# 
  5551     021A                     TMR5CON         equ	538	;# 
  5552     021B                     T5GCON          equ	539	;# 
  5553     021B                     TMR5GCON        equ	539	;# 
  5554     021C                     T5GATE          equ	540	;# 
  5555     021C                     TMR5GATE        equ	540	;# 
  5556     021D                     T5CLK           equ	541	;# 
  5557     021D                     TMR5CLK         equ	541	;# 
  5558     021E                     CCPTMRS0        equ	542	;# 
  5559     021F                     CCPTMRS1        equ	543	;# 
  5560     028C                     T2TMR           equ	652	;# 
  5561     028C                     TMR2            equ	652	;# 
  5562     028D                     T2PR            equ	653	;# 
  5563     028D                     PR2             equ	653	;# 
  5564     028E                     T2CON           equ	654	;# 
  5565     028F                     T2HLT           equ	655	;# 
  5566     0290                     T2CLKCON        equ	656	;# 
  5567     0291                     T2RST           equ	657	;# 
  5568     0292                     T4TMR           equ	658	;# 
  5569     0292                     TMR4            equ	658	;# 
  5570     0293                     T4PR            equ	659	;# 
  5571     0293                     PR4             equ	659	;# 
  5572     0294                     T4CON           equ	660	;# 
  5573     0295                     T4HLT           equ	661	;# 
  5574     0296                     T4CLKCON        equ	662	;# 
  5575     0297                     T4RST           equ	663	;# 
  5576     0298                     T6TMR           equ	664	;# 
  5577     0298                     TMR6            equ	664	;# 
  5578     0299                     T6PR            equ	665	;# 
  5579     0299                     PR6             equ	665	;# 
  5580     029A                     T6CON           equ	666	;# 
  5581     029B                     T6HLT           equ	667	;# 
  5582     029C                     T6CLKCON        equ	668	;# 
  5583     029D                     T6RST           equ	669	;# 
  5584     029F                     ADCPCON0        equ	671	;# 
  5585     030C                     CCPR1           equ	780	;# 
  5586     030C                     CCPR1L          equ	780	;# 
  5587     030D                     CCPR1H          equ	781	;# 
  5588     030E                     CCP1CON         equ	782	;# 
  5589     030F                     CCP1CAP         equ	783	;# 
  5590     0310                     CCPR2           equ	784	;# 
  5591     0310                     CCPR2L          equ	784	;# 
  5592     0311                     CCPR2H          equ	785	;# 
  5593     0312                     CCP2CON         equ	786	;# 
  5594     0313                     CCP2CAP         equ	787	;# 
  5595     0314                     CCPR3           equ	788	;# 
  5596     0314                     CCPR3L          equ	788	;# 
  5597     0315                     CCPR3H          equ	789	;# 
  5598     0316                     CCP3CON         equ	790	;# 
  5599     0317                     CCP3CAP         equ	791	;# 
  5600     0318                     CCPR4           equ	792	;# 
  5601     0318                     CCPR4L          equ	792	;# 
  5602     0319                     CCPR4H          equ	793	;# 
  5603     031A                     CCP4CON         equ	794	;# 
  5604     031B                     CCP4CAP         equ	795	;# 
  5605     038C                     PWM6DC          equ	908	;# 
  5606     038C                     PWM6DCL         equ	908	;# 
  5607     038D                     PWM6DCH         equ	909	;# 
  5608     038E                     PWM6CON         equ	910	;# 
  5609     0390                     PWM7DC          equ	912	;# 
  5610     0390                     PWM7DCL         equ	912	;# 
  5611     0391                     PWM7DCH         equ	913	;# 
  5612     0392                     PWM7CON         equ	914	;# 
  5613     048C                     SMT1TMR         equ	1164	;# 
  5614     048C                     SMT1TMRL        equ	1164	;# 
  5615     048D                     SMT1TMRH        equ	1165	;# 
  5616     048E                     SMT1TMRU        equ	1166	;# 
  5617     048F                     SMT1CPR         equ	1167	;# 
  5618     048F                     SMT1CPRL        equ	1167	;# 
  5619     0490                     SMT1CPRH        equ	1168	;# 
  5620     0491                     SMT1CPRU        equ	1169	;# 
  5621     0492                     SMT1CPW         equ	1170	;# 
  5622     0492                     SMT1CPWL        equ	1170	;# 
  5623     0493                     SMT1CPWH        equ	1171	;# 
  5624     0494                     SMT1CPWU        equ	1172	;# 
  5625     0495                     SMT1PR          equ	1173	;# 
  5626     0495                     SMT1PRL         equ	1173	;# 
  5627     0496                     SMT1PRH         equ	1174	;# 
  5628     0497                     SMT1PRU         equ	1175	;# 
  5629     0498                     SMT1CON0        equ	1176	;# 
  5630     0499                     SMT1CON1        equ	1177	;# 
  5631     049A                     SMT1STAT        equ	1178	;# 
  5632     049B                     SMT1CLK         equ	1179	;# 
  5633     049C                     SMT1SIG         equ	1180	;# 
  5634     049D                     SMT1WIN         equ	1181	;# 
  5635     058C                     NCO1ACC         equ	1420	;# 
  5636     058C                     NCO1ACCL        equ	1420	;# 
  5637     058D                     NCO1ACCH        equ	1421	;# 
  5638     058E                     NCO1ACCU        equ	1422	;# 
  5639     058F                     NCO1INC         equ	1423	;# 
  5640     058F                     NCO1INCL        equ	1423	;# 
  5641     0590                     NCO1INCH        equ	1424	;# 
  5642     0591                     NCO1INCU        equ	1425	;# 
  5643     0592                     NCO1CON         equ	1426	;# 
  5644     0593                     NCO1CLK         equ	1427	;# 
  5645     059C                     TMR0L           equ	1436	;# 
  5646     059C                     TMR0            equ	1436	;# 
  5647     059D                     TMR0H           equ	1437	;# 
  5648     059D                     PR0             equ	1437	;# 
  5649     059E                     T0CON0          equ	1438	;# 
  5650     059F                     T0CON1          equ	1439	;# 
  5651     060C                     CWG1CLK         equ	1548	;# 
  5652     060C                     CWG1CLKCON      equ	1548	;# 
  5653     060D                     CWG1ISM         equ	1549	;# 
  5654     060D                     CWG1DAT         equ	1549	;# 
  5655     060E                     CWG1DBR         equ	1550	;# 
  5656     060F                     CWG1DBF         equ	1551	;# 
  5657     0610                     CWG1CON0        equ	1552	;# 
  5658     0611                     CWG1CON1        equ	1553	;# 
  5659     0612                     CWG1AS0         equ	1554	;# 
  5660     0613                     CWG1AS1         equ	1555	;# 
  5661     0614                     CWG1STR         equ	1556	;# 
  5662     0616                     CWG2CLK         equ	1558	;# 
  5663     0616                     CWG2CLKCON      equ	1558	;# 
  5664     0617                     CWG2ISM         equ	1559	;# 
  5665     0617                     CWG2DAT         equ	1559	;# 
  5666     0618                     CWG2DBR         equ	1560	;# 
  5667     0619                     CWG2DBF         equ	1561	;# 
  5668     061A                     CWG2CON0        equ	1562	;# 
  5669     061B                     CWG2CON1        equ	1563	;# 
  5670     061C                     CWG2AS0         equ	1564	;# 
  5671     061D                     CWG2AS1         equ	1565	;# 
  5672     061E                     CWG2STR         equ	1566	;# 
  5673     070C                     PIR0            equ	1804	;# 
  5674     070D                     PIR1            equ	1805	;# 
  5675     070E                     PIR2            equ	1806	;# 
  5676     070F                     PIR3            equ	1807	;# 
  5677     0710                     PIR4            equ	1808	;# 
  5678     0711                     PIR5            equ	1809	;# 
  5679     0712                     PIR6            equ	1810	;# 
  5680     0713                     PIR7            equ	1811	;# 
  5681     0714                     PIR8            equ	1812	;# 
  5682     0716                     PIE0            equ	1814	;# 
  5683     0717                     PIE1            equ	1815	;# 
  5684     0718                     PIE2            equ	1816	;# 
  5685     0719                     PIE3            equ	1817	;# 
  5686     071A                     PIE4            equ	1818	;# 
  5687     071B                     PIE5            equ	1819	;# 
  5688     071C                     PIE6            equ	1820	;# 
  5689     071D                     PIE7            equ	1821	;# 
  5690     071E                     PIE8            equ	1822	;# 
  5691     0796                     PMD0            equ	1942	;# 
  5692     0797                     PMD1            equ	1943	;# 
  5693     0798                     PMD2            equ	1944	;# 
  5694     0799                     PMD3            equ	1945	;# 
  5695     079A                     PMD4            equ	1946	;# 
  5696     079B                     PMD5            equ	1947	;# 
  5697     079C                     PMD6            equ	1948	;# 
  5698     079D                     PMD7            equ	1949	;# 
  5699     080C                     WDTCON0         equ	2060	;# 
  5700     080D                     WDTCON1         equ	2061	;# 
  5701     080E                     WDTPSL          equ	2062	;# 
  5702     080F                     WDTPSH          equ	2063	;# 
  5703     0810                     WDTTMR          equ	2064	;# 
  5704     0811                     BORCON          equ	2065	;# 
  5705     0812                     VREGCON         equ	2066	;# 
  5706     0813                     PCON0           equ	2067	;# 
  5707     0814                     PCON1           equ	2068	;# 
  5708     081A                     NVMADR          equ	2074	;# 
  5709     081A                     NVMADRL         equ	2074	;# 
  5710     081B                     NVMADRH         equ	2075	;# 
  5711     081C                     NVMDAT          equ	2076	;# 
  5712     081C                     NVMDATL         equ	2076	;# 
  5713     081D                     NVMDATH         equ	2077	;# 
  5714     081E                     NVMCON1         equ	2078	;# 
  5715     081F                     NVMCON2         equ	2079	;# 
  5716     088C                     CPUDOZE         equ	2188	;# 
  5717     088D                     OSCCON1         equ	2189	;# 
  5718     088E                     OSCCON2         equ	2190	;# 
  5719     088F                     OSCCON3         equ	2191	;# 
  5720     0890                     OSCSTAT         equ	2192	;# 
  5721     0891                     OSCEN           equ	2193	;# 
  5722     0892                     OSCTUNE         equ	2194	;# 
  5723     0893                     OSCFRQ          equ	2195	;# 
  5724     0895                     CLKRCON         equ	2197	;# 
  5725     0896                     CLKRCLK         equ	2198	;# 
  5726     0897                     MD1CON0         equ	2199	;# 
  5727     0898                     MD1CON1         equ	2200	;# 
  5728     0899                     MD1SRC          equ	2201	;# 
  5729     089A                     MD1CARL         equ	2202	;# 
  5730     089B                     MD1CARH         equ	2203	;# 
  5731     090C                     FVRCON          equ	2316	;# 
  5732     090E                     DAC1CON0        equ	2318	;# 
  5733     090F                     DAC1CON1        equ	2319	;# 
  5734     091F                     ZCDCON          equ	2335	;# 
  5735     098F                     CMOUT           equ	2447	;# 
  5736     098F                     CMSTAT          equ	2447	;# 
  5737     0990                     CM1CON0         equ	2448	;# 
  5738     0991                     CM1CON1         equ	2449	;# 
  5739     0992                     CM1NCH          equ	2450	;# 
  5740     0993                     CM1PCH          equ	2451	;# 
  5741     0994                     CM2CON0         equ	2452	;# 
  5742     0995                     CM2CON1         equ	2453	;# 
  5743     0996                     CM2NCH          equ	2454	;# 
  5744     0997                     CM2PCH          equ	2455	;# 
  5745     1E0F                     CLCDATA         equ	7695	;# 
  5746     1E10                     CLC1CON         equ	7696	;# 
  5747     1E11                     CLC1POL         equ	7697	;# 
  5748     1E12                     CLC1SEL0        equ	7698	;# 
  5749     1E13                     CLC1SEL1        equ	7699	;# 
  5750     1E14                     CLC1SEL2        equ	7700	;# 
  5751     1E15                     CLC1SEL3        equ	7701	;# 
  5752     1E16                     CLC1GLS0        equ	7702	;# 
  5753     1E17                     CLC1GLS1        equ	7703	;# 
  5754     1E18                     CLC1GLS2        equ	7704	;# 
  5755     1E19                     CLC1GLS3        equ	7705	;# 
  5756     1E1A                     CLC2CON         equ	7706	;# 
  5757     1E1B                     CLC2POL         equ	7707	;# 
  5758     1E1C                     CLC2SEL0        equ	7708	;# 
  5759     1E1D                     CLC2SEL1        equ	7709	;# 
  5760     1E1E                     CLC2SEL2        equ	7710	;# 
  5761     1E1F                     CLC2SEL3        equ	7711	;# 
  5762     1E20                     CLC2GLS0        equ	7712	;# 
  5763     1E21                     CLC2GLS1        equ	7713	;# 
  5764     1E22                     CLC2GLS2        equ	7714	;# 
  5765     1E23                     CLC2GLS3        equ	7715	;# 
  5766     1E24                     CLC3CON         equ	7716	;# 
  5767     1E25                     CLC3POL         equ	7717	;# 
  5768     1E26                     CLC3SEL0        equ	7718	;# 
  5769     1E27                     CLC3SEL1        equ	7719	;# 
  5770     1E28                     CLC3SEL2        equ	7720	;# 
  5771     1E29                     CLC3SEL3        equ	7721	;# 
  5772     1E2A                     CLC3GLS0        equ	7722	;# 
  5773     1E2B                     CLC3GLS1        equ	7723	;# 
  5774     1E2C                     CLC3GLS2        equ	7724	;# 
  5775     1E2D                     CLC3GLS3        equ	7725	;# 
  5776     1E2E                     CLC4CON         equ	7726	;# 
  5777     1E2F                     CLC4POL         equ	7727	;# 
  5778     1E30                     CLC4SEL0        equ	7728	;# 
  5779     1E31                     CLC4SEL1        equ	7729	;# 
  5780     1E32                     CLC4SEL2        equ	7730	;# 
  5781     1E33                     CLC4SEL3        equ	7731	;# 
  5782     1E34                     CLC4GLS0        equ	7732	;# 
  5783     1E35                     CLC4GLS1        equ	7733	;# 
  5784     1E36                     CLC4GLS2        equ	7734	;# 
  5785     1E37                     CLC4GLS3        equ	7735	;# 
  5786     1E8F                     PPSLOCK         equ	7823	;# 
  5787     1E90                     INTPPS          equ	7824	;# 
  5788     1E91                     T0CKIPPS        equ	7825	;# 
  5789     1E92                     T1CKIPPS        equ	7826	;# 
  5790     1E93                     T1GPPS          equ	7827	;# 
  5791     1E94                     T3CKIPPS        equ	7828	;# 
  5792     1E95                     T3GPPS          equ	7829	;# 
  5793     1E96                     T5CKIPPS        equ	7830	;# 
  5794     1E97                     T5GPPS          equ	7831	;# 
  5795     1E9C                     T2INPPS         equ	7836	;# 
  5796     1E9D                     T4INPPS         equ	7837	;# 
  5797     1E9E                     T6INPPS         equ	7838	;# 
  5798     1EA1                     CCP1PPS         equ	7841	;# 
  5799     1EA2                     CCP2PPS         equ	7842	;# 
  5800     1EA3                     CCP3PPS         equ	7843	;# 
  5801     1EA4                     CCP4PPS         equ	7844	;# 
  5802     1EA9                     SMT1WINPPS      equ	7849	;# 
  5803     1EAA                     SMT1SIGPPS      equ	7850	;# 
  5804     1EB1                     CWG1PPS         equ	7857	;# 
  5805     1EB2                     CWG2PPS         equ	7858	;# 
  5806     1EB8                     MDCARLPPS       equ	7864	;# 
  5807     1EB9                     MDCARHPPS       equ	7865	;# 
  5808     1EBA                     MDSRCPPS        equ	7866	;# 
  5809     1EBB                     CLCIN0PPS       equ	7867	;# 
  5810     1EBC                     CLCIN1PPS       equ	7868	;# 
  5811     1EBD                     CLCIN2PPS       equ	7869	;# 
  5812     1EBE                     CLCIN3PPS       equ	7870	;# 
  5813     1EC3                     ADACTPPS        equ	7875	;# 
  5814     1EC5                     SSP1CLKPPS      equ	7877	;# 
  5815     1EC6                     SSP1DATPPS      equ	7878	;# 
  5816     1EC7                     SSP1SSPPS       equ	7879	;# 
  5817     1EC8                     SSP2CLKPPS      equ	7880	;# 
  5818     1EC9                     SSP2DATPPS      equ	7881	;# 
  5819     1ECA                     SSP2SSPPS       equ	7882	;# 
  5820     1ECB                     RX1DTPPS        equ	7883	;# 
  5821     1ECC                     TX1CKPPS        equ	7884	;# 
  5822     1F10                     RA0PPS          equ	7952	;# 
  5823     1F11                     RA1PPS          equ	7953	;# 
  5824     1F12                     RA2PPS          equ	7954	;# 
  5825     1F14                     RA4PPS          equ	7956	;# 
  5826     1F15                     RA5PPS          equ	7957	;# 
  5827     1F20                     RC0PPS          equ	7968	;# 
  5828     1F21                     RC1PPS          equ	7969	;# 
  5829     1F22                     RC2PPS          equ	7970	;# 
  5830     1F23                     RC3PPS          equ	7971	;# 
  5831     1F24                     RC4PPS          equ	7972	;# 
  5832     1F25                     RC5PPS          equ	7973	;# 
  5833     1F38                     ANSELA          equ	7992	;# 
  5834     1F39                     WPUA            equ	7993	;# 
  5835     1F3A                     ODCONA          equ	7994	;# 
  5836     1F3B                     SLRCONA         equ	7995	;# 
  5837     1F3C                     INLVLA          equ	7996	;# 
  5838     1F3D                     IOCAP           equ	7997	;# 
  5839     1F3E                     IOCAN           equ	7998	;# 
  5840     1F3F                     IOCAF           equ	7999	;# 
  5841     1F4E                     ANSELC          equ	8014	;# 
  5842     1F4F                     WPUC            equ	8015	;# 
  5843     1F50                     ODCONC          equ	8016	;# 
  5844     1F51                     SLRCONC         equ	8017	;# 
  5845     1F52                     INLVLC          equ	8018	;# 
  5846     1F53                     IOCCP           equ	8019	;# 
  5847     1F54                     IOCCN           equ	8020	;# 
  5848     1F55                     IOCCF           equ	8021	;# 
  5849     1FE4                     STATUS_SHAD     equ	8164	;# 
  5850     1FE5                     WREG_SHAD       equ	8165	;# 
  5851     1FE6                     BSR_SHAD        equ	8166	;# 
  5852     1FE7                     PCLATH_SHAD     equ	8167	;# 
  5853     1FE8                     FSR0_SHAD       equ	8168	;# 
  5854     1FE8                     FSR0L_SHAD      equ	8168	;# 
  5855     1FE9                     FSR0H_SHAD      equ	8169	;# 
  5856     1FEA                     FSR1L_SHAD      equ	8170	;# 
  5857     1FEB                     FSR1H_SHAD      equ	8171	;# 
  5858     1FED                     STKPTR          equ	8173	;# 
  5859     1FEE                     TOSL            equ	8174	;# 
  5860     1FEF                     TOSH            equ	8175	;# 
  5861     0000                     INDF0           equ	0	;# 
  5862     0001                     INDF1           equ	1	;# 
  5863     0002                     PCL             equ	2	;# 
  5864     0003                     STATUS          equ	3	;# 
  5865     0004                     FSR0L           equ	4	;# 
  5866     0005                     FSR0H           equ	5	;# 
  5867     0006                     FSR1L           equ	6	;# 
  5868     0007                     FSR1H           equ	7	;# 
  5869     0008                     BSR             equ	8	;# 
  5870     0009                     WREG            equ	9	;# 
  5871     000A                     PCLATH          equ	10	;# 
  5872     000B                     INTCON          equ	11	;# 
  5873     000C                     PORTA           equ	12	;# 
  5874     000E                     PORTC           equ	14	;# 
  5875     0012                     TRISA           equ	18	;# 
  5876     0014                     TRISC           equ	20	;# 
  5877     0018                     LATA            equ	24	;# 
  5878     001A                     LATC            equ	26	;# 
  5879     008C                     ADLTH           equ	140	;# 
  5880     008C                     ADLTHL          equ	140	;# 
  5881     008D                     ADLTHH          equ	141	;# 
  5882     008E                     ADUTH           equ	142	;# 
  5883     008E                     ADUTHL          equ	142	;# 
  5884     008F                     ADUTHH          equ	143	;# 
  5885     0090                     ADERR           equ	144	;# 
  5886     0090                     ADERRL          equ	144	;# 
  5887     0091                     ADERRH          equ	145	;# 
  5888     0092                     ADSTPT          equ	146	;# 
  5889     0092                     ADSTPTL         equ	146	;# 
  5890     0093                     ADSTPTH         equ	147	;# 
  5891     0094                     ADFLTR          equ	148	;# 
  5892     0094                     ADFLTRL         equ	148	;# 
  5893     0095                     ADFLTRH         equ	149	;# 
  5894     0096                     ADACC           equ	150	;# 
  5895     0096                     ADACCL          equ	150	;# 
  5896     0097                     ADACCH          equ	151	;# 
  5897     0098                     ADACCU          equ	152	;# 
  5898     0099                     ADCNT           equ	153	;# 
  5899     009A                     ADRPT           equ	154	;# 
  5900     009B                     ADPREV          equ	155	;# 
  5901     009B                     ADPREVL         equ	155	;# 
  5902     009C                     ADPREVH         equ	156	;# 
  5903     009D                     ADRES           equ	157	;# 
  5904     009D                     ADRESL          equ	157	;# 
  5905     009E                     ADRESH          equ	158	;# 
  5906     009F                     ADPCH           equ	159	;# 
  5907     010C                     ADACQ           equ	268	;# 
  5908     010C                     ADACQL          equ	268	;# 
  5909     010D                     ADACQH          equ	269	;# 
  5910     010E                     ADCAP           equ	270	;# 
  5911     010F                     ADPRE           equ	271	;# 
  5912     010F                     ADPREL          equ	271	;# 
  5913     0110                     ADPREH          equ	272	;# 
  5914     0111                     ADCON0          equ	273	;# 
  5915     0112                     ADCON1          equ	274	;# 
  5916     0113                     ADCON2          equ	275	;# 
  5917     0114                     ADCON3          equ	276	;# 
  5918     0115                     ADSTAT          equ	277	;# 
  5919     0116                     ADREF           equ	278	;# 
  5920     0117                     ADACT           equ	279	;# 
  5921     0118                     ADCLK           equ	280	;# 
  5922     0119                     RC1REG          equ	281	;# 
  5923     0119                     RCREG           equ	281	;# 
  5924     0119                     RCREG1          equ	281	;# 
  5925     011A                     TX1REG          equ	282	;# 
  5926     011A                     TXREG1          equ	282	;# 
  5927     011A                     TXREG           equ	282	;# 
  5928     011B                     SP1BRG          equ	283	;# 
  5929     011B                     SP1BRGL         equ	283	;# 
  5930     011B                     SPBRG           equ	283	;# 
  5931     011B                     SPBRG1          equ	283	;# 
  5932     011B                     SPBRGL          equ	283	;# 
  5933     011C                     SP1BRGH         equ	284	;# 
  5934     011C                     SPBRGH          equ	284	;# 
  5935     011C                     SPBRGH1         equ	284	;# 
  5936     011D                     RC1STA          equ	285	;# 
  5937     011D                     RCSTA1          equ	285	;# 
  5938     011D                     RCSTA           equ	285	;# 
  5939     011E                     TX1STA          equ	286	;# 
  5940     011E                     TXSTA1          equ	286	;# 
  5941     011E                     TXSTA           equ	286	;# 
  5942     011F                     BAUD1CON        equ	287	;# 
  5943     011F                     BAUDCON1        equ	287	;# 
  5944     011F                     BAUDCTL1        equ	287	;# 
  5945     011F                     BAUDCON         equ	287	;# 
  5946     011F                     BAUDCTL         equ	287	;# 
  5947     018C                     SSP1BUF         equ	396	;# 
  5948     018D                     SSP1ADD         equ	397	;# 
  5949     018E                     SSP1MSK         equ	398	;# 
  5950     018F                     SSP1STAT        equ	399	;# 
  5951     0190                     SSP1CON1        equ	400	;# 
  5952     0191                     SSP1CON2        equ	401	;# 
  5953     0192                     SSP1CON3        equ	402	;# 
  5954     0196                     SSP2BUF         equ	406	;# 
  5955     0197                     SSP2ADD         equ	407	;# 
  5956     0198                     SSP2MSK         equ	408	;# 
  5957     0199                     SSP2STAT        equ	409	;# 
  5958     019A                     SSP2CON1        equ	410	;# 
  5959     019B                     SSP2CON2        equ	411	;# 
  5960     019C                     SSP2CON3        equ	412	;# 
  5961     020C                     TMR1L           equ	524	;# 
  5962     020D                     TMR1H           equ	525	;# 
  5963     020E                     T1CON           equ	526	;# 
  5964     020E                     TMR1CON         equ	526	;# 
  5965     020F                     T1GCON          equ	527	;# 
  5966     020F                     TMR1GCON        equ	527	;# 
  5967     0210                     T1GATE          equ	528	;# 
  5968     0210                     TMR1GATE        equ	528	;# 
  5969     0211                     T1CLK           equ	529	;# 
  5970     0211                     TMR1CLK         equ	529	;# 
  5971     0212                     TMR3L           equ	530	;# 
  5972     0213                     TMR3H           equ	531	;# 
  5973     0214                     T3CON           equ	532	;# 
  5974     0214                     TMR3CON         equ	532	;# 
  5975     0215                     T3GCON          equ	533	;# 
  5976     0215                     TMR3GCON        equ	533	;# 
  5977     0216                     T3GATE          equ	534	;# 
  5978     0216                     TMR3GATE        equ	534	;# 
  5979     0217                     T3CLK           equ	535	;# 
  5980     0217                     TMR3CLK         equ	535	;# 
  5981     0218                     TMR5L           equ	536	;# 
  5982     0219                     TMR5H           equ	537	;# 
  5983     021A                     T5CON           equ	538	;# 
  5984     021A                     TMR5CON         equ	538	;# 
  5985     021B                     T5GCON          equ	539	;# 
  5986     021B                     TMR5GCON        equ	539	;# 
  5987     021C                     T5GATE          equ	540	;# 
  5988     021C                     TMR5GATE        equ	540	;# 
  5989     021D                     T5CLK           equ	541	;# 
  5990     021D                     TMR5CLK         equ	541	;# 
  5991     021E                     CCPTMRS0        equ	542	;# 
  5992     021F                     CCPTMRS1        equ	543	;# 
  5993     028C                     T2TMR           equ	652	;# 
  5994     028C                     TMR2            equ	652	;# 
  5995     028D                     T2PR            equ	653	;# 
  5996     028D                     PR2             equ	653	;# 
  5997     028E                     T2CON           equ	654	;# 
  5998     028F                     T2HLT           equ	655	;# 
  5999     0290                     T2CLKCON        equ	656	;# 
  6000     0291                     T2RST           equ	657	;# 
  6001     0292                     T4TMR           equ	658	;# 
  6002     0292                     TMR4            equ	658	;# 
  6003     0293                     T4PR            equ	659	;# 
  6004     0293                     PR4             equ	659	;# 
  6005     0294                     T4CON           equ	660	;# 
  6006     0295                     T4HLT           equ	661	;# 
  6007     0296                     T4CLKCON        equ	662	;# 
  6008     0297                     T4RST           equ	663	;# 
  6009     0298                     T6TMR           equ	664	;# 
  6010     0298                     TMR6            equ	664	;# 
  6011     0299                     T6PR            equ	665	;# 
  6012     0299                     PR6             equ	665	;# 
  6013     029A                     T6CON           equ	666	;# 
  6014     029B                     T6HLT           equ	667	;# 
  6015     029C                     T6CLKCON        equ	668	;# 
  6016     029D                     T6RST           equ	669	;# 
  6017     029F                     ADCPCON0        equ	671	;# 
  6018     030C                     CCPR1           equ	780	;# 
  6019     030C                     CCPR1L          equ	780	;# 
  6020     030D                     CCPR1H          equ	781	;# 
  6021     030E                     CCP1CON         equ	782	;# 
  6022     030F                     CCP1CAP         equ	783	;# 
  6023     0310                     CCPR2           equ	784	;# 
  6024     0310                     CCPR2L          equ	784	;# 
  6025     0311                     CCPR2H          equ	785	;# 
  6026     0312                     CCP2CON         equ	786	;# 
  6027     0313                     CCP2CAP         equ	787	;# 
  6028     0314                     CCPR3           equ	788	;# 
  6029     0314                     CCPR3L          equ	788	;# 
  6030     0315                     CCPR3H          equ	789	;# 
  6031     0316                     CCP3CON         equ	790	;# 
  6032     0317                     CCP3CAP         equ	791	;# 
  6033     0318                     CCPR4           equ	792	;# 
  6034     0318                     CCPR4L          equ	792	;# 
  6035     0319                     CCPR4H          equ	793	;# 
  6036     031A                     CCP4CON         equ	794	;# 
  6037     031B                     CCP4CAP         equ	795	;# 
  6038     038C                     PWM6DC          equ	908	;# 
  6039     038C                     PWM6DCL         equ	908	;# 
  6040     038D                     PWM6DCH         equ	909	;# 
  6041     038E                     PWM6CON         equ	910	;# 
  6042     0390                     PWM7DC          equ	912	;# 
  6043     0390                     PWM7DCL         equ	912	;# 
  6044     0391                     PWM7DCH         equ	913	;# 
  6045     0392                     PWM7CON         equ	914	;# 
  6046     048C                     SMT1TMR         equ	1164	;# 
  6047     048C                     SMT1TMRL        equ	1164	;# 
  6048     048D                     SMT1TMRH        equ	1165	;# 
  6049     048E                     SMT1TMRU        equ	1166	;# 
  6050     048F                     SMT1CPR         equ	1167	;# 
  6051     048F                     SMT1CPRL        equ	1167	;# 
  6052     0490                     SMT1CPRH        equ	1168	;# 
  6053     0491                     SMT1CPRU        equ	1169	;# 
  6054     0492                     SMT1CPW         equ	1170	;# 
  6055     0492                     SMT1CPWL        equ	1170	;# 
  6056     0493                     SMT1CPWH        equ	1171	;# 
  6057     0494                     SMT1CPWU        equ	1172	;# 
  6058     0495                     SMT1PR          equ	1173	;# 
  6059     0495                     SMT1PRL         equ	1173	;# 
  6060     0496                     SMT1PRH         equ	1174	;# 
  6061     0497                     SMT1PRU         equ	1175	;# 
  6062     0498                     SMT1CON0        equ	1176	;# 
  6063     0499                     SMT1CON1        equ	1177	;# 
  6064     049A                     SMT1STAT        equ	1178	;# 
  6065     049B                     SMT1CLK         equ	1179	;# 
  6066     049C                     SMT1SIG         equ	1180	;# 
  6067     049D                     SMT1WIN         equ	1181	;# 
  6068     058C                     NCO1ACC         equ	1420	;# 
  6069     058C                     NCO1ACCL        equ	1420	;# 
  6070     058D                     NCO1ACCH        equ	1421	;# 
  6071     058E                     NCO1ACCU        equ	1422	;# 
  6072     058F                     NCO1INC         equ	1423	;# 
  6073     058F                     NCO1INCL        equ	1423	;# 
  6074     0590                     NCO1INCH        equ	1424	;# 
  6075     0591                     NCO1INCU        equ	1425	;# 
  6076     0592                     NCO1CON         equ	1426	;# 
  6077     0593                     NCO1CLK         equ	1427	;# 
  6078     059C                     TMR0L           equ	1436	;# 
  6079     059C                     TMR0            equ	1436	;# 
  6080     059D                     TMR0H           equ	1437	;# 
  6081     059D                     PR0             equ	1437	;# 
  6082     059E                     T0CON0          equ	1438	;# 
  6083     059F                     T0CON1          equ	1439	;# 
  6084     060C                     CWG1CLK         equ	1548	;# 
  6085     060C                     CWG1CLKCON      equ	1548	;# 
  6086     060D                     CWG1ISM         equ	1549	;# 
  6087     060D                     CWG1DAT         equ	1549	;# 
  6088     060E                     CWG1DBR         equ	1550	;# 
  6089     060F                     CWG1DBF         equ	1551	;# 
  6090     0610                     CWG1CON0        equ	1552	;# 
  6091     0611                     CWG1CON1        equ	1553	;# 
  6092     0612                     CWG1AS0         equ	1554	;# 
  6093     0613                     CWG1AS1         equ	1555	;# 
  6094     0614                     CWG1STR         equ	1556	;# 
  6095     0616                     CWG2CLK         equ	1558	;# 
  6096     0616                     CWG2CLKCON      equ	1558	;# 
  6097     0617                     CWG2ISM         equ	1559	;# 
  6098     0617                     CWG2DAT         equ	1559	;# 
  6099     0618                     CWG2DBR         equ	1560	;# 
  6100     0619                     CWG2DBF         equ	1561	;# 
  6101     061A                     CWG2CON0        equ	1562	;# 
  6102     061B                     CWG2CON1        equ	1563	;# 
  6103     061C                     CWG2AS0         equ	1564	;# 
  6104     061D                     CWG2AS1         equ	1565	;# 
  6105     061E                     CWG2STR         equ	1566	;# 
  6106     070C                     PIR0            equ	1804	;# 
  6107     070D                     PIR1            equ	1805	;# 
  6108     070E                     PIR2            equ	1806	;# 
  6109     070F                     PIR3            equ	1807	;# 
  6110     0710                     PIR4            equ	1808	;# 
  6111     0711                     PIR5            equ	1809	;# 
  6112     0712                     PIR6            equ	1810	;# 
  6113     0713                     PIR7            equ	1811	;# 
  6114     0714                     PIR8            equ	1812	;# 
  6115     0716                     PIE0            equ	1814	;# 
  6116     0717                     PIE1            equ	1815	;# 
  6117     0718                     PIE2            equ	1816	;# 
  6118     0719                     PIE3            equ	1817	;# 
  6119     071A                     PIE4            equ	1818	;# 
  6120     071B                     PIE5            equ	1819	;# 
  6121     071C                     PIE6            equ	1820	;# 
  6122     071D                     PIE7            equ	1821	;# 
  6123     071E                     PIE8            equ	1822	;# 
  6124     0796                     PMD0            equ	1942	;# 
  6125     0797                     PMD1            equ	1943	;# 
  6126     0798                     PMD2            equ	1944	;# 
  6127     0799                     PMD3            equ	1945	;# 
  6128     079A                     PMD4            equ	1946	;# 
  6129     079B                     PMD5            equ	1947	;# 
  6130     079C                     PMD6            equ	1948	;# 
  6131     079D                     PMD7            equ	1949	;# 
  6132     080C                     WDTCON0         equ	2060	;# 
  6133     080D                     WDTCON1         equ	2061	;# 
  6134     080E                     WDTPSL          equ	2062	;# 
  6135     080F                     WDTPSH          equ	2063	;# 
  6136     0810                     WDTTMR          equ	2064	;# 
  6137     0811                     BORCON          equ	2065	;# 
  6138     0812                     VREGCON         equ	2066	;# 
  6139     0813                     PCON0           equ	2067	;# 
  6140     0814                     PCON1           equ	2068	;# 
  6141     081A                     NVMADR          equ	2074	;# 
  6142     081A                     NVMADRL         equ	2074	;# 
  6143     081B                     NVMADRH         equ	2075	;# 
  6144     081C                     NVMDAT          equ	2076	;# 
  6145     081C                     NVMDATL         equ	2076	;# 
  6146     081D                     NVMDATH         equ	2077	;# 
  6147     081E                     NVMCON1         equ	2078	;# 
  6148     081F                     NVMCON2         equ	2079	;# 
  6149     088C                     CPUDOZE         equ	2188	;# 
  6150     088D                     OSCCON1         equ	2189	;# 
  6151     088E                     OSCCON2         equ	2190	;# 
  6152     088F                     OSCCON3         equ	2191	;# 
  6153     0890                     OSCSTAT         equ	2192	;# 
  6154     0891                     OSCEN           equ	2193	;# 
  6155     0892                     OSCTUNE         equ	2194	;# 
  6156     0893                     OSCFRQ          equ	2195	;# 
  6157     0895                     CLKRCON         equ	2197	;# 
  6158     0896                     CLKRCLK         equ	2198	;# 
  6159     0897                     MD1CON0         equ	2199	;# 
  6160     0898                     MD1CON1         equ	2200	;# 
  6161     0899                     MD1SRC          equ	2201	;# 
  6162     089A                     MD1CARL         equ	2202	;# 
  6163     089B                     MD1CARH         equ	2203	;# 
  6164     090C                     FVRCON          equ	2316	;# 
  6165     090E                     DAC1CON0        equ	2318	;# 
  6166     090F                     DAC1CON1        equ	2319	;# 
  6167     091F                     ZCDCON          equ	2335	;# 
  6168     098F                     CMOUT           equ	2447	;# 
  6169     098F                     CMSTAT          equ	2447	;# 
  6170     0990                     CM1CON0         equ	2448	;# 
  6171     0991                     CM1CON1         equ	2449	;# 
  6172     0992                     CM1NCH          equ	2450	;# 
  6173     0993                     CM1PCH          equ	2451	;# 
  6174     0994                     CM2CON0         equ	2452	;# 
  6175     0995                     CM2CON1         equ	2453	;# 
  6176     0996                     CM2NCH          equ	2454	;# 
  6177     0997                     CM2PCH          equ	2455	;# 
  6178     1E0F                     CLCDATA         equ	7695	;# 
  6179     1E10                     CLC1CON         equ	7696	;# 
  6180     1E11                     CLC1POL         equ	7697	;# 
  6181     1E12                     CLC1SEL0        equ	7698	;# 
  6182     1E13                     CLC1SEL1        equ	7699	;# 
  6183     1E14                     CLC1SEL2        equ	7700	;# 
  6184     1E15                     CLC1SEL3        equ	7701	;# 
  6185     1E16                     CLC1GLS0        equ	7702	;# 
  6186     1E17                     CLC1GLS1        equ	7703	;# 
  6187     1E18                     CLC1GLS2        equ	7704	;# 
  6188     1E19                     CLC1GLS3        equ	7705	;# 
  6189     1E1A                     CLC2CON         equ	7706	;# 
  6190     1E1B                     CLC2POL         equ	7707	;# 
  6191     1E1C                     CLC2SEL0        equ	7708	;# 
  6192     1E1D                     CLC2SEL1        equ	7709	;# 
  6193     1E1E                     CLC2SEL2        equ	7710	;# 
  6194     1E1F                     CLC2SEL3        equ	7711	;# 
  6195     1E20                     CLC2GLS0        equ	7712	;# 
  6196     1E21                     CLC2GLS1        equ	7713	;# 
  6197     1E22                     CLC2GLS2        equ	7714	;# 
  6198     1E23                     CLC2GLS3        equ	7715	;# 
  6199     1E24                     CLC3CON         equ	7716	;# 
  6200     1E25                     CLC3POL         equ	7717	;# 
  6201     1E26                     CLC3SEL0        equ	7718	;# 
  6202     1E27                     CLC3SEL1        equ	7719	;# 
  6203     1E28                     CLC3SEL2        equ	7720	;# 
  6204     1E29                     CLC3SEL3        equ	7721	;# 
  6205     1E2A                     CLC3GLS0        equ	7722	;# 
  6206     1E2B                     CLC3GLS1        equ	7723	;# 
  6207     1E2C                     CLC3GLS2        equ	7724	;# 
  6208     1E2D                     CLC3GLS3        equ	7725	;# 
  6209     1E2E                     CLC4CON         equ	7726	;# 
  6210     1E2F                     CLC4POL         equ	7727	;# 
  6211     1E30                     CLC4SEL0        equ	7728	;# 
  6212     1E31                     CLC4SEL1        equ	7729	;# 
  6213     1E32                     CLC4SEL2        equ	7730	;# 
  6214     1E33                     CLC4SEL3        equ	7731	;# 
  6215     1E34                     CLC4GLS0        equ	7732	;# 
  6216     1E35                     CLC4GLS1        equ	7733	;# 
  6217     1E36                     CLC4GLS2        equ	7734	;# 
  6218     1E37                     CLC4GLS3        equ	7735	;# 
  6219     1E8F                     PPSLOCK         equ	7823	;# 
  6220     1E90                     INTPPS          equ	7824	;# 
  6221     1E91                     T0CKIPPS        equ	7825	;# 
  6222     1E92                     T1CKIPPS        equ	7826	;# 
  6223     1E93                     T1GPPS          equ	7827	;# 
  6224     1E94                     T3CKIPPS        equ	7828	;# 
  6225     1E95                     T3GPPS          equ	7829	;# 
  6226     1E96                     T5CKIPPS        equ	7830	;# 
  6227     1E97                     T5GPPS          equ	7831	;# 
  6228     1E9C                     T2INPPS         equ	7836	;# 
  6229     1E9D                     T4INPPS         equ	7837	;# 
  6230     1E9E                     T6INPPS         equ	7838	;# 
  6231     1EA1                     CCP1PPS         equ	7841	;# 
  6232     1EA2                     CCP2PPS         equ	7842	;# 
  6233     1EA3                     CCP3PPS         equ	7843	;# 
  6234     1EA4                     CCP4PPS         equ	7844	;# 
  6235     1EA9                     SMT1WINPPS      equ	7849	;# 
  6236     1EAA                     SMT1SIGPPS      equ	7850	;# 
  6237     1EB1                     CWG1PPS         equ	7857	;# 
  6238     1EB2                     CWG2PPS         equ	7858	;# 
  6239     1EB8                     MDCARLPPS       equ	7864	;# 
  6240     1EB9                     MDCARHPPS       equ	7865	;# 
  6241     1EBA                     MDSRCPPS        equ	7866	;# 
  6242     1EBB                     CLCIN0PPS       equ	7867	;# 
  6243     1EBC                     CLCIN1PPS       equ	7868	;# 
  6244     1EBD                     CLCIN2PPS       equ	7869	;# 
  6245     1EBE                     CLCIN3PPS       equ	7870	;# 
  6246     1EC3                     ADACTPPS        equ	7875	;# 
  6247     1EC5                     SSP1CLKPPS      equ	7877	;# 
  6248     1EC6                     SSP1DATPPS      equ	7878	;# 
  6249     1EC7                     SSP1SSPPS       equ	7879	;# 
  6250     1EC8                     SSP2CLKPPS      equ	7880	;# 
  6251     1EC9                     SSP2DATPPS      equ	7881	;# 
  6252     1ECA                     SSP2SSPPS       equ	7882	;# 
  6253     1ECB                     RX1DTPPS        equ	7883	;# 
  6254     1ECC                     TX1CKPPS        equ	7884	;# 
  6255     1F10                     RA0PPS          equ	7952	;# 
  6256     1F11                     RA1PPS          equ	7953	;# 
  6257     1F12                     RA2PPS          equ	7954	;# 
  6258     1F14                     RA4PPS          equ	7956	;# 
  6259     1F15                     RA5PPS          equ	7957	;# 
  6260     1F20                     RC0PPS          equ	7968	;# 
  6261     1F21                     RC1PPS          equ	7969	;# 
  6262     1F22                     RC2PPS          equ	7970	;# 
  6263     1F23                     RC3PPS          equ	7971	;# 
  6264     1F24                     RC4PPS          equ	7972	;# 
  6265     1F25                     RC5PPS          equ	7973	;# 
  6266     1F38                     ANSELA          equ	7992	;# 
  6267     1F39                     WPUA            equ	7993	;# 
  6268     1F3A                     ODCONA          equ	7994	;# 
  6269     1F3B                     SLRCONA         equ	7995	;# 
  6270     1F3C                     INLVLA          equ	7996	;# 
  6271     1F3D                     IOCAP           equ	7997	;# 
  6272     1F3E                     IOCAN           equ	7998	;# 
  6273     1F3F                     IOCAF           equ	7999	;# 
  6274     1F4E                     ANSELC          equ	8014	;# 
  6275     1F4F                     WPUC            equ	8015	;# 
  6276     1F50                     ODCONC          equ	8016	;# 
  6277     1F51                     SLRCONC         equ	8017	;# 
  6278     1F52                     INLVLC          equ	8018	;# 
  6279     1F53                     IOCCP           equ	8019	;# 
  6280     1F54                     IOCCN           equ	8020	;# 
  6281     1F55                     IOCCF           equ	8021	;# 
  6282     1FE4                     STATUS_SHAD     equ	8164	;# 
  6283     1FE5                     WREG_SHAD       equ	8165	;# 
  6284     1FE6                     BSR_SHAD        equ	8166	;# 
  6285     1FE7                     PCLATH_SHAD     equ	8167	;# 
  6286     1FE8                     FSR0_SHAD       equ	8168	;# 
  6287     1FE8                     FSR0L_SHAD      equ	8168	;# 
  6288     1FE9                     FSR0H_SHAD      equ	8169	;# 
  6289     1FEA                     FSR1L_SHAD      equ	8170	;# 
  6290     1FEB                     FSR1H_SHAD      equ	8171	;# 
  6291     1FED                     STKPTR          equ	8173	;# 
  6292     1FEE                     TOSL            equ	8174	;# 
  6293     1FEF                     TOSH            equ	8175	;# 
  6294     0000                     INDF0           equ	0	;# 
  6295     0001                     INDF1           equ	1	;# 
  6296     0002                     PCL             equ	2	;# 
  6297     0003                     STATUS          equ	3	;# 
  6298     0004                     FSR0L           equ	4	;# 
  6299     0005                     FSR0H           equ	5	;# 
  6300     0006                     FSR1L           equ	6	;# 
  6301     0007                     FSR1H           equ	7	;# 
  6302     0008                     BSR             equ	8	;# 
  6303     0009                     WREG            equ	9	;# 
  6304     000A                     PCLATH          equ	10	;# 
  6305     000B                     INTCON          equ	11	;# 
  6306     000C                     PORTA           equ	12	;# 
  6307     000E                     PORTC           equ	14	;# 
  6308     0012                     TRISA           equ	18	;# 
  6309     0014                     TRISC           equ	20	;# 
  6310     0018                     LATA            equ	24	;# 
  6311     001A                     LATC            equ	26	;# 
  6312     008C                     ADLTH           equ	140	;# 
  6313     008C                     ADLTHL          equ	140	;# 
  6314     008D                     ADLTHH          equ	141	;# 
  6315     008E                     ADUTH           equ	142	;# 
  6316     008E                     ADUTHL          equ	142	;# 
  6317     008F                     ADUTHH          equ	143	;# 
  6318     0090                     ADERR           equ	144	;# 
  6319     0090                     ADERRL          equ	144	;# 
  6320     0091                     ADERRH          equ	145	;# 
  6321     0092                     ADSTPT          equ	146	;# 
  6322     0092                     ADSTPTL         equ	146	;# 
  6323     0093                     ADSTPTH         equ	147	;# 
  6324     0094                     ADFLTR          equ	148	;# 
  6325     0094                     ADFLTRL         equ	148	;# 
  6326     0095                     ADFLTRH         equ	149	;# 
  6327     0096                     ADACC           equ	150	;# 
  6328     0096                     ADACCL          equ	150	;# 
  6329     0097                     ADACCH          equ	151	;# 
  6330     0098                     ADACCU          equ	152	;# 
  6331     0099                     ADCNT           equ	153	;# 
  6332     009A                     ADRPT           equ	154	;# 
  6333     009B                     ADPREV          equ	155	;# 
  6334     009B                     ADPREVL         equ	155	;# 
  6335     009C                     ADPREVH         equ	156	;# 
  6336     009D                     ADRES           equ	157	;# 
  6337     009D                     ADRESL          equ	157	;# 
  6338     009E                     ADRESH          equ	158	;# 
  6339     009F                     ADPCH           equ	159	;# 
  6340     010C                     ADACQ           equ	268	;# 
  6341     010C                     ADACQL          equ	268	;# 
  6342     010D                     ADACQH          equ	269	;# 
  6343     010E                     ADCAP           equ	270	;# 
  6344     010F                     ADPRE           equ	271	;# 
  6345     010F                     ADPREL          equ	271	;# 
  6346     0110                     ADPREH          equ	272	;# 
  6347     0111                     ADCON0          equ	273	;# 
  6348     0112                     ADCON1          equ	274	;# 
  6349     0113                     ADCON2          equ	275	;# 
  6350     0114                     ADCON3          equ	276	;# 
  6351     0115                     ADSTAT          equ	277	;# 
  6352     0116                     ADREF           equ	278	;# 
  6353     0117                     ADACT           equ	279	;# 
  6354     0118                     ADCLK           equ	280	;# 
  6355     0119                     RC1REG          equ	281	;# 
  6356     0119                     RCREG           equ	281	;# 
  6357     0119                     RCREG1          equ	281	;# 
  6358     011A                     TX1REG          equ	282	;# 
  6359     011A                     TXREG1          equ	282	;# 
  6360     011A                     TXREG           equ	282	;# 
  6361     011B                     SP1BRG          equ	283	;# 
  6362     011B                     SP1BRGL         equ	283	;# 
  6363     011B                     SPBRG           equ	283	;# 
  6364     011B                     SPBRG1          equ	283	;# 
  6365     011B                     SPBRGL          equ	283	;# 
  6366     011C                     SP1BRGH         equ	284	;# 
  6367     011C                     SPBRGH          equ	284	;# 
  6368     011C                     SPBRGH1         equ	284	;# 
  6369     011D                     RC1STA          equ	285	;# 
  6370     011D                     RCSTA1          equ	285	;# 
  6371     011D                     RCSTA           equ	285	;# 
  6372     011E                     TX1STA          equ	286	;# 
  6373     011E                     TXSTA1          equ	286	;# 
  6374     011E                     TXSTA           equ	286	;# 
  6375     011F                     BAUD1CON        equ	287	;# 
  6376     011F                     BAUDCON1        equ	287	;# 
  6377     011F                     BAUDCTL1        equ	287	;# 
  6378     011F                     BAUDCON         equ	287	;# 
  6379     011F                     BAUDCTL         equ	287	;# 
  6380     018C                     SSP1BUF         equ	396	;# 
  6381     018D                     SSP1ADD         equ	397	;# 
  6382     018E                     SSP1MSK         equ	398	;# 
  6383     018F                     SSP1STAT        equ	399	;# 
  6384     0190                     SSP1CON1        equ	400	;# 
  6385     0191                     SSP1CON2        equ	401	;# 
  6386     0192                     SSP1CON3        equ	402	;# 
  6387     0196                     SSP2BUF         equ	406	;# 
  6388     0197                     SSP2ADD         equ	407	;# 
  6389     0198                     SSP2MSK         equ	408	;# 
  6390     0199                     SSP2STAT        equ	409	;# 
  6391     019A                     SSP2CON1        equ	410	;# 
  6392     019B                     SSP2CON2        equ	411	;# 
  6393     019C                     SSP2CON3        equ	412	;# 
  6394     020C                     TMR1L           equ	524	;# 
  6395     020D                     TMR1H           equ	525	;# 
  6396     020E                     T1CON           equ	526	;# 
  6397     020E                     TMR1CON         equ	526	;# 
  6398     020F                     T1GCON          equ	527	;# 
  6399     020F                     TMR1GCON        equ	527	;# 
  6400     0210                     T1GATE          equ	528	;# 
  6401     0210                     TMR1GATE        equ	528	;# 
  6402     0211                     T1CLK           equ	529	;# 
  6403     0211                     TMR1CLK         equ	529	;# 
  6404     0212                     TMR3L           equ	530	;# 
  6405     0213                     TMR3H           equ	531	;# 
  6406     0214                     T3CON           equ	532	;# 
  6407     0214                     TMR3CON         equ	532	;# 
  6408     0215                     T3GCON          equ	533	;# 
  6409     0215                     TMR3GCON        equ	533	;# 
  6410     0216                     T3GATE          equ	534	;# 
  6411     0216                     TMR3GATE        equ	534	;# 
  6412     0217                     T3CLK           equ	535	;# 
  6413     0217                     TMR3CLK         equ	535	;# 
  6414     0218                     TMR5L           equ	536	;# 
  6415     0219                     TMR5H           equ	537	;# 
  6416     021A                     T5CON           equ	538	;# 
  6417     021A                     TMR5CON         equ	538	;# 
  6418     021B                     T5GCON          equ	539	;# 
  6419     021B                     TMR5GCON        equ	539	;# 
  6420     021C                     T5GATE          equ	540	;# 
  6421     021C                     TMR5GATE        equ	540	;# 
  6422     021D                     T5CLK           equ	541	;# 
  6423     021D                     TMR5CLK         equ	541	;# 
  6424     021E                     CCPTMRS0        equ	542	;# 
  6425     021F                     CCPTMRS1        equ	543	;# 
  6426     028C                     T2TMR           equ	652	;# 
  6427     028C                     TMR2            equ	652	;# 
  6428     028D                     T2PR            equ	653	;# 
  6429     028D                     PR2             equ	653	;# 
  6430     028E                     T2CON           equ	654	;# 
  6431     028F                     T2HLT           equ	655	;# 
  6432     0290                     T2CLKCON        equ	656	;# 
  6433     0291                     T2RST           equ	657	;# 
  6434     0292                     T4TMR           equ	658	;# 
  6435     0292                     TMR4            equ	658	;# 
  6436     0293                     T4PR            equ	659	;# 
  6437     0293                     PR4             equ	659	;# 
  6438     0294                     T4CON           equ	660	;# 
  6439     0295                     T4HLT           equ	661	;# 
  6440     0296                     T4CLKCON        equ	662	;# 
  6441     0297                     T4RST           equ	663	;# 
  6442     0298                     T6TMR           equ	664	;# 
  6443     0298                     TMR6            equ	664	;# 
  6444     0299                     T6PR            equ	665	;# 
  6445     0299                     PR6             equ	665	;# 
  6446     029A                     T6CON           equ	666	;# 
  6447     029B                     T6HLT           equ	667	;# 
  6448     029C                     T6CLKCON        equ	668	;# 
  6449     029D                     T6RST           equ	669	;# 
  6450     029F                     ADCPCON0        equ	671	;# 
  6451     030C                     CCPR1           equ	780	;# 
  6452     030C                     CCPR1L          equ	780	;# 
  6453     030D                     CCPR1H          equ	781	;# 
  6454     030E                     CCP1CON         equ	782	;# 
  6455     030F                     CCP1CAP         equ	783	;# 
  6456     0310                     CCPR2           equ	784	;# 
  6457     0310                     CCPR2L          equ	784	;# 
  6458     0311                     CCPR2H          equ	785	;# 
  6459     0312                     CCP2CON         equ	786	;# 
  6460     0313                     CCP2CAP         equ	787	;# 
  6461     0314                     CCPR3           equ	788	;# 
  6462     0314                     CCPR3L          equ	788	;# 
  6463     0315                     CCPR3H          equ	789	;# 
  6464     0316                     CCP3CON         equ	790	;# 
  6465     0317                     CCP3CAP         equ	791	;# 
  6466     0318                     CCPR4           equ	792	;# 
  6467     0318                     CCPR4L          equ	792	;# 
  6468     0319                     CCPR4H          equ	793	;# 
  6469     031A                     CCP4CON         equ	794	;# 
  6470     031B                     CCP4CAP         equ	795	;# 
  6471     038C                     PWM6DC          equ	908	;# 
  6472     038C                     PWM6DCL         equ	908	;# 
  6473     038D                     PWM6DCH         equ	909	;# 
  6474     038E                     PWM6CON         equ	910	;# 
  6475     0390                     PWM7DC          equ	912	;# 
  6476     0390                     PWM7DCL         equ	912	;# 
  6477     0391                     PWM7DCH         equ	913	;# 
  6478     0392                     PWM7CON         equ	914	;# 
  6479     048C                     SMT1TMR         equ	1164	;# 
  6480     048C                     SMT1TMRL        equ	1164	;# 
  6481     048D                     SMT1TMRH        equ	1165	;# 
  6482     048E                     SMT1TMRU        equ	1166	;# 
  6483     048F                     SMT1CPR         equ	1167	;# 
  6484     048F                     SMT1CPRL        equ	1167	;# 
  6485     0490                     SMT1CPRH        equ	1168	;# 
  6486     0491                     SMT1CPRU        equ	1169	;# 
  6487     0492                     SMT1CPW         equ	1170	;# 
  6488     0492                     SMT1CPWL        equ	1170	;# 
  6489     0493                     SMT1CPWH        equ	1171	;# 
  6490     0494                     SMT1CPWU        equ	1172	;# 
  6491     0495                     SMT1PR          equ	1173	;# 
  6492     0495                     SMT1PRL         equ	1173	;# 
  6493     0496                     SMT1PRH         equ	1174	;# 
  6494     0497                     SMT1PRU         equ	1175	;# 
  6495     0498                     SMT1CON0        equ	1176	;# 
  6496     0499                     SMT1CON1        equ	1177	;# 
  6497     049A                     SMT1STAT        equ	1178	;# 
  6498     049B                     SMT1CLK         equ	1179	;# 
  6499     049C                     SMT1SIG         equ	1180	;# 
  6500     049D                     SMT1WIN         equ	1181	;# 
  6501     058C                     NCO1ACC         equ	1420	;# 
  6502     058C                     NCO1ACCL        equ	1420	;# 
  6503     058D                     NCO1ACCH        equ	1421	;# 
  6504     058E                     NCO1ACCU        equ	1422	;# 
  6505     058F                     NCO1INC         equ	1423	;# 
  6506     058F                     NCO1INCL        equ	1423	;# 
  6507     0590                     NCO1INCH        equ	1424	;# 
  6508     0591                     NCO1INCU        equ	1425	;# 
  6509     0592                     NCO1CON         equ	1426	;# 
  6510     0593                     NCO1CLK         equ	1427	;# 
  6511     059C                     TMR0L           equ	1436	;# 
  6512     059C                     TMR0            equ	1436	;# 
  6513     059D                     TMR0H           equ	1437	;# 
  6514     059D                     PR0             equ	1437	;# 
  6515     059E                     T0CON0          equ	1438	;# 
  6516     059F                     T0CON1          equ	1439	;# 
  6517     060C                     CWG1CLK         equ	1548	;# 
  6518     060C                     CWG1CLKCON      equ	1548	;# 
  6519     060D                     CWG1ISM         equ	1549	;# 
  6520     060D                     CWG1DAT         equ	1549	;# 
  6521     060E                     CWG1DBR         equ	1550	;# 
  6522     060F                     CWG1DBF         equ	1551	;# 
  6523     0610                     CWG1CON0        equ	1552	;# 
  6524     0611                     CWG1CON1        equ	1553	;# 
  6525     0612                     CWG1AS0         equ	1554	;# 
  6526     0613                     CWG1AS1         equ	1555	;# 
  6527     0614                     CWG1STR         equ	1556	;# 
  6528     0616                     CWG2CLK         equ	1558	;# 
  6529     0616                     CWG2CLKCON      equ	1558	;# 
  6530     0617                     CWG2ISM         equ	1559	;# 
  6531     0617                     CWG2DAT         equ	1559	;# 
  6532     0618                     CWG2DBR         equ	1560	;# 
  6533     0619                     CWG2DBF         equ	1561	;# 
  6534     061A                     CWG2CON0        equ	1562	;# 
  6535     061B                     CWG2CON1        equ	1563	;# 
  6536     061C                     CWG2AS0         equ	1564	;# 
  6537     061D                     CWG2AS1         equ	1565	;# 
  6538     061E                     CWG2STR         equ	1566	;# 
  6539     070C                     PIR0            equ	1804	;# 
  6540     070D                     PIR1            equ	1805	;# 
  6541     070E                     PIR2            equ	1806	;# 
  6542     070F                     PIR3            equ	1807	;# 
  6543     0710                     PIR4            equ	1808	;# 
  6544     0711                     PIR5            equ	1809	;# 
  6545     0712                     PIR6            equ	1810	;# 
  6546     0713                     PIR7            equ	1811	;# 
  6547     0714                     PIR8            equ	1812	;# 
  6548     0716                     PIE0            equ	1814	;# 
  6549     0717                     PIE1            equ	1815	;# 
  6550     0718                     PIE2            equ	1816	;# 
  6551     0719                     PIE3            equ	1817	;# 
  6552     071A                     PIE4            equ	1818	;# 
  6553     071B                     PIE5            equ	1819	;# 
  6554     071C                     PIE6            equ	1820	;# 
  6555     071D                     PIE7            equ	1821	;# 
  6556     071E                     PIE8            equ	1822	;# 
  6557     0796                     PMD0            equ	1942	;# 
  6558     0797                     PMD1            equ	1943	;# 
  6559     0798                     PMD2            equ	1944	;# 
  6560     0799                     PMD3            equ	1945	;# 
  6561     079A                     PMD4            equ	1946	;# 
  6562     079B                     PMD5            equ	1947	;# 
  6563     079C                     PMD6            equ	1948	;# 
  6564     079D                     PMD7            equ	1949	;# 
  6565     080C                     WDTCON0         equ	2060	;# 
  6566     080D                     WDTCON1         equ	2061	;# 
  6567     080E                     WDTPSL          equ	2062	;# 
  6568     080F                     WDTPSH          equ	2063	;# 
  6569     0810                     WDTTMR          equ	2064	;# 
  6570     0811                     BORCON          equ	2065	;# 
  6571     0812                     VREGCON         equ	2066	;# 
  6572     0813                     PCON0           equ	2067	;# 
  6573     0814                     PCON1           equ	2068	;# 
  6574     081A                     NVMADR          equ	2074	;# 
  6575     081A                     NVMADRL         equ	2074	;# 
  6576     081B                     NVMADRH         equ	2075	;# 
  6577     081C                     NVMDAT          equ	2076	;# 
  6578     081C                     NVMDATL         equ	2076	;# 
  6579     081D                     NVMDATH         equ	2077	;# 
  6580     081E                     NVMCON1         equ	2078	;# 
  6581     081F                     NVMCON2         equ	2079	;# 
  6582     088C                     CPUDOZE         equ	2188	;# 
  6583     088D                     OSCCON1         equ	2189	;# 
  6584     088E                     OSCCON2         equ	2190	;# 
  6585     088F                     OSCCON3         equ	2191	;# 
  6586     0890                     OSCSTAT         equ	2192	;# 
  6587     0891                     OSCEN           equ	2193	;# 
  6588     0892                     OSCTUNE         equ	2194	;# 
  6589     0893                     OSCFRQ          equ	2195	;# 
  6590     0895                     CLKRCON         equ	2197	;# 
  6591     0896                     CLKRCLK         equ	2198	;# 
  6592     0897                     MD1CON0         equ	2199	;# 
  6593     0898                     MD1CON1         equ	2200	;# 
  6594     0899                     MD1SRC          equ	2201	;# 
  6595     089A                     MD1CARL         equ	2202	;# 
  6596     089B                     MD1CARH         equ	2203	;# 
  6597     090C                     FVRCON          equ	2316	;# 
  6598     090E                     DAC1CON0        equ	2318	;# 
  6599     090F                     DAC1CON1        equ	2319	;# 
  6600     091F                     ZCDCON          equ	2335	;# 
  6601     098F                     CMOUT           equ	2447	;# 
  6602     098F                     CMSTAT          equ	2447	;# 
  6603     0990                     CM1CON0         equ	2448	;# 
  6604     0991                     CM1CON1         equ	2449	;# 
  6605     0992                     CM1NCH          equ	2450	;# 
  6606     0993                     CM1PCH          equ	2451	;# 
  6607     0994                     CM2CON0         equ	2452	;# 
  6608     0995                     CM2CON1         equ	2453	;# 
  6609     0996                     CM2NCH          equ	2454	;# 
  6610     0997                     CM2PCH          equ	2455	;# 
  6611     1E0F                     CLCDATA         equ	7695	;# 
  6612     1E10                     CLC1CON         equ	7696	;# 
  6613     1E11                     CLC1POL         equ	7697	;# 
  6614     1E12                     CLC1SEL0        equ	7698	;# 
  6615     1E13                     CLC1SEL1        equ	7699	;# 
  6616     1E14                     CLC1SEL2        equ	7700	;# 
  6617     1E15                     CLC1SEL3        equ	7701	;# 
  6618     1E16                     CLC1GLS0        equ	7702	;# 
  6619     1E17                     CLC1GLS1        equ	7703	;# 
  6620     1E18                     CLC1GLS2        equ	7704	;# 
  6621     1E19                     CLC1GLS3        equ	7705	;# 
  6622     1E1A                     CLC2CON         equ	7706	;# 
  6623     1E1B                     CLC2POL         equ	7707	;# 
  6624     1E1C                     CLC2SEL0        equ	7708	;# 
  6625     1E1D                     CLC2SEL1        equ	7709	;# 
  6626     1E1E                     CLC2SEL2        equ	7710	;# 
  6627     1E1F                     CLC2SEL3        equ	7711	;# 
  6628     1E20                     CLC2GLS0        equ	7712	;# 
  6629     1E21                     CLC2GLS1        equ	7713	;# 
  6630     1E22                     CLC2GLS2        equ	7714	;# 
  6631     1E23                     CLC2GLS3        equ	7715	;# 
  6632     1E24                     CLC3CON         equ	7716	;# 
  6633     1E25                     CLC3POL         equ	7717	;# 
  6634     1E26                     CLC3SEL0        equ	7718	;# 
  6635     1E27                     CLC3SEL1        equ	7719	;# 
  6636     1E28                     CLC3SEL2        equ	7720	;# 
  6637     1E29                     CLC3SEL3        equ	7721	;# 
  6638     1E2A                     CLC3GLS0        equ	7722	;# 
  6639     1E2B                     CLC3GLS1        equ	7723	;# 
  6640     1E2C                     CLC3GLS2        equ	7724	;# 
  6641     1E2D                     CLC3GLS3        equ	7725	;# 
  6642     1E2E                     CLC4CON         equ	7726	;# 
  6643     1E2F                     CLC4POL         equ	7727	;# 
  6644     1E30                     CLC4SEL0        equ	7728	;# 
  6645     1E31                     CLC4SEL1        equ	7729	;# 
  6646     1E32                     CLC4SEL2        equ	7730	;# 
  6647     1E33                     CLC4SEL3        equ	7731	;# 
  6648     1E34                     CLC4GLS0        equ	7732	;# 
  6649     1E35                     CLC4GLS1        equ	7733	;# 
  6650     1E36                     CLC4GLS2        equ	7734	;# 
  6651     1E37                     CLC4GLS3        equ	7735	;# 
  6652     1E8F                     PPSLOCK         equ	7823	;# 
  6653     1E90                     INTPPS          equ	7824	;# 
  6654     1E91                     T0CKIPPS        equ	7825	;# 
  6655     1E92                     T1CKIPPS        equ	7826	;# 
  6656     1E93                     T1GPPS          equ	7827	;# 
  6657     1E94                     T3CKIPPS        equ	7828	;# 
  6658     1E95                     T3GPPS          equ	7829	;# 
  6659     1E96                     T5CKIPPS        equ	7830	;# 
  6660     1E97                     T5GPPS          equ	7831	;# 
  6661     1E9C                     T2INPPS         equ	7836	;# 
  6662     1E9D                     T4INPPS         equ	7837	;# 
  6663     1E9E                     T6INPPS         equ	7838	;# 
  6664     1EA1                     CCP1PPS         equ	7841	;# 
  6665     1EA2                     CCP2PPS         equ	7842	;# 
  6666     1EA3                     CCP3PPS         equ	7843	;# 
  6667     1EA4                     CCP4PPS         equ	7844	;# 
  6668     1EA9                     SMT1WINPPS      equ	7849	;# 
  6669     1EAA                     SMT1SIGPPS      equ	7850	;# 
  6670     1EB1                     CWG1PPS         equ	7857	;# 
  6671     1EB2                     CWG2PPS         equ	7858	;# 
  6672     1EB8                     MDCARLPPS       equ	7864	;# 
  6673     1EB9                     MDCARHPPS       equ	7865	;# 
  6674     1EBA                     MDSRCPPS        equ	7866	;# 
  6675     1EBB                     CLCIN0PPS       equ	7867	;# 
  6676     1EBC                     CLCIN1PPS       equ	7868	;# 
  6677     1EBD                     CLCIN2PPS       equ	7869	;# 
  6678     1EBE                     CLCIN3PPS       equ	7870	;# 
  6679     1EC3                     ADACTPPS        equ	7875	;# 
  6680     1EC5                     SSP1CLKPPS      equ	7877	;# 
  6681     1EC6                     SSP1DATPPS      equ	7878	;# 
  6682     1EC7                     SSP1SSPPS       equ	7879	;# 
  6683     1EC8                     SSP2CLKPPS      equ	7880	;# 
  6684     1EC9                     SSP2DATPPS      equ	7881	;# 
  6685     1ECA                     SSP2SSPPS       equ	7882	;# 
  6686     1ECB                     RX1DTPPS        equ	7883	;# 
  6687     1ECC                     TX1CKPPS        equ	7884	;# 
  6688     1F10                     RA0PPS          equ	7952	;# 
  6689     1F11                     RA1PPS          equ	7953	;# 
  6690     1F12                     RA2PPS          equ	7954	;# 
  6691     1F14                     RA4PPS          equ	7956	;# 
  6692     1F15                     RA5PPS          equ	7957	;# 
  6693     1F20                     RC0PPS          equ	7968	;# 
  6694     1F21                     RC1PPS          equ	7969	;# 
  6695     1F22                     RC2PPS          equ	7970	;# 
  6696     1F23                     RC3PPS          equ	7971	;# 
  6697     1F24                     RC4PPS          equ	7972	;# 
  6698     1F25                     RC5PPS          equ	7973	;# 
  6699     1F38                     ANSELA          equ	7992	;# 
  6700     1F39                     WPUA            equ	7993	;# 
  6701     1F3A                     ODCONA          equ	7994	;# 
  6702     1F3B                     SLRCONA         equ	7995	;# 
  6703     1F3C                     INLVLA          equ	7996	;# 
  6704     1F3D                     IOCAP           equ	7997	;# 
  6705     1F3E                     IOCAN           equ	7998	;# 
  6706     1F3F                     IOCAF           equ	7999	;# 
  6707     1F4E                     ANSELC          equ	8014	;# 
  6708     1F4F                     WPUC            equ	8015	;# 
  6709     1F50                     ODCONC          equ	8016	;# 
  6710     1F51                     SLRCONC         equ	8017	;# 
  6711     1F52                     INLVLC          equ	8018	;# 
  6712     1F53                     IOCCP           equ	8019	;# 
  6713     1F54                     IOCCN           equ	8020	;# 
  6714     1F55                     IOCCF           equ	8021	;# 
  6715     1FE4                     STATUS_SHAD     equ	8164	;# 
  6716     1FE5                     WREG_SHAD       equ	8165	;# 
  6717     1FE6                     BSR_SHAD        equ	8166	;# 
  6718     1FE7                     PCLATH_SHAD     equ	8167	;# 
  6719     1FE8                     FSR0_SHAD       equ	8168	;# 
  6720     1FE8                     FSR0L_SHAD      equ	8168	;# 
  6721     1FE9                     FSR0H_SHAD      equ	8169	;# 
  6722     1FEA                     FSR1L_SHAD      equ	8170	;# 
  6723     1FEB                     FSR1H_SHAD      equ	8171	;# 
  6724     1FED                     STKPTR          equ	8173	;# 
  6725     1FEE                     TOSL            equ	8174	;# 
  6726     1FEF                     TOSH            equ	8175	;# 
  6727     0000                     INDF0           equ	0	;# 
  6728     0001                     INDF1           equ	1	;# 
  6729     0002                     PCL             equ	2	;# 
  6730     0003                     STATUS          equ	3	;# 
  6731     0004                     FSR0L           equ	4	;# 
  6732     0005                     FSR0H           equ	5	;# 
  6733     0006                     FSR1L           equ	6	;# 
  6734     0007                     FSR1H           equ	7	;# 
  6735     0008                     BSR             equ	8	;# 
  6736     0009                     WREG            equ	9	;# 
  6737     000A                     PCLATH          equ	10	;# 
  6738     000B                     INTCON          equ	11	;# 
  6739     000C                     PORTA           equ	12	;# 
  6740     000E                     PORTC           equ	14	;# 
  6741     0012                     TRISA           equ	18	;# 
  6742     0014                     TRISC           equ	20	;# 
  6743     0018                     LATA            equ	24	;# 
  6744     001A                     LATC            equ	26	;# 
  6745     008C                     ADLTH           equ	140	;# 
  6746     008C                     ADLTHL          equ	140	;# 
  6747     008D                     ADLTHH          equ	141	;# 
  6748     008E                     ADUTH           equ	142	;# 
  6749     008E                     ADUTHL          equ	142	;# 
  6750     008F                     ADUTHH          equ	143	;# 
  6751     0090                     ADERR           equ	144	;# 
  6752     0090                     ADERRL          equ	144	;# 
  6753     0091                     ADERRH          equ	145	;# 
  6754     0092                     ADSTPT          equ	146	;# 
  6755     0092                     ADSTPTL         equ	146	;# 
  6756     0093                     ADSTPTH         equ	147	;# 
  6757     0094                     ADFLTR          equ	148	;# 
  6758     0094                     ADFLTRL         equ	148	;# 
  6759     0095                     ADFLTRH         equ	149	;# 
  6760     0096                     ADACC           equ	150	;# 
  6761     0096                     ADACCL          equ	150	;# 
  6762     0097                     ADACCH          equ	151	;# 
  6763     0098                     ADACCU          equ	152	;# 
  6764     0099                     ADCNT           equ	153	;# 
  6765     009A                     ADRPT           equ	154	;# 
  6766     009B                     ADPREV          equ	155	;# 
  6767     009B                     ADPREVL         equ	155	;# 
  6768     009C                     ADPREVH         equ	156	;# 
  6769     009D                     ADRES           equ	157	;# 
  6770     009D                     ADRESL          equ	157	;# 
  6771     009E                     ADRESH          equ	158	;# 
  6772     009F                     ADPCH           equ	159	;# 
  6773     010C                     ADACQ           equ	268	;# 
  6774     010C                     ADACQL          equ	268	;# 
  6775     010D                     ADACQH          equ	269	;# 
  6776     010E                     ADCAP           equ	270	;# 
  6777     010F                     ADPRE           equ	271	;# 
  6778     010F                     ADPREL          equ	271	;# 
  6779     0110                     ADPREH          equ	272	;# 
  6780     0111                     ADCON0          equ	273	;# 
  6781     0112                     ADCON1          equ	274	;# 
  6782     0113                     ADCON2          equ	275	;# 
  6783     0114                     ADCON3          equ	276	;# 
  6784     0115                     ADSTAT          equ	277	;# 
  6785     0116                     ADREF           equ	278	;# 
  6786     0117                     ADACT           equ	279	;# 
  6787     0118                     ADCLK           equ	280	;# 
  6788     0119                     RC1REG          equ	281	;# 
  6789     0119                     RCREG           equ	281	;# 
  6790     0119                     RCREG1          equ	281	;# 
  6791     011A                     TX1REG          equ	282	;# 
  6792     011A                     TXREG1          equ	282	;# 
  6793     011A                     TXREG           equ	282	;# 
  6794     011B                     SP1BRG          equ	283	;# 
  6795     011B                     SP1BRGL         equ	283	;# 
  6796     011B                     SPBRG           equ	283	;# 
  6797     011B                     SPBRG1          equ	283	;# 
  6798     011B                     SPBRGL          equ	283	;# 
  6799     011C                     SP1BRGH         equ	284	;# 
  6800     011C                     SPBRGH          equ	284	;# 
  6801     011C                     SPBRGH1         equ	284	;# 
  6802     011D                     RC1STA          equ	285	;# 
  6803     011D                     RCSTA1          equ	285	;# 
  6804     011D                     RCSTA           equ	285	;# 
  6805     011E                     TX1STA          equ	286	;# 
  6806     011E                     TXSTA1          equ	286	;# 
  6807     011E                     TXSTA           equ	286	;# 
  6808     011F                     BAUD1CON        equ	287	;# 
  6809     011F                     BAUDCON1        equ	287	;# 
  6810     011F                     BAUDCTL1        equ	287	;# 
  6811     011F                     BAUDCON         equ	287	;# 
  6812     011F                     BAUDCTL         equ	287	;# 
  6813     018C                     SSP1BUF         equ	396	;# 
  6814     018D                     SSP1ADD         equ	397	;# 
  6815     018E                     SSP1MSK         equ	398	;# 
  6816     018F                     SSP1STAT        equ	399	;# 
  6817     0190                     SSP1CON1        equ	400	;# 
  6818     0191                     SSP1CON2        equ	401	;# 
  6819     0192                     SSP1CON3        equ	402	;# 
  6820     0196                     SSP2BUF         equ	406	;# 
  6821     0197                     SSP2ADD         equ	407	;# 
  6822     0198                     SSP2MSK         equ	408	;# 
  6823     0199                     SSP2STAT        equ	409	;# 
  6824     019A                     SSP2CON1        equ	410	;# 
  6825     019B                     SSP2CON2        equ	411	;# 
  6826     019C                     SSP2CON3        equ	412	;# 
  6827     020C                     TMR1L           equ	524	;# 
  6828     020D                     TMR1H           equ	525	;# 
  6829     020E                     T1CON           equ	526	;# 
  6830     020E                     TMR1CON         equ	526	;# 
  6831     020F                     T1GCON          equ	527	;# 
  6832     020F                     TMR1GCON        equ	527	;# 
  6833     0210                     T1GATE          equ	528	;# 
  6834     0210                     TMR1GATE        equ	528	;# 
  6835     0211                     T1CLK           equ	529	;# 
  6836     0211                     TMR1CLK         equ	529	;# 
  6837     0212                     TMR3L           equ	530	;# 
  6838     0213                     TMR3H           equ	531	;# 
  6839     0214                     T3CON           equ	532	;# 
  6840     0214                     TMR3CON         equ	532	;# 
  6841     0215                     T3GCON          equ	533	;# 
  6842     0215                     TMR3GCON        equ	533	;# 
  6843     0216                     T3GATE          equ	534	;# 
  6844     0216                     TMR3GATE        equ	534	;# 
  6845     0217                     T3CLK           equ	535	;# 
  6846     0217                     TMR3CLK         equ	535	;# 
  6847     0218                     TMR5L           equ	536	;# 
  6848     0219                     TMR5H           equ	537	;# 
  6849     021A                     T5CON           equ	538	;# 
  6850     021A                     TMR5CON         equ	538	;# 
  6851     021B                     T5GCON          equ	539	;# 
  6852     021B                     TMR5GCON        equ	539	;# 
  6853     021C                     T5GATE          equ	540	;# 
  6854     021C                     TMR5GATE        equ	540	;# 
  6855     021D                     T5CLK           equ	541	;# 
  6856     021D                     TMR5CLK         equ	541	;# 
  6857     021E                     CCPTMRS0        equ	542	;# 
  6858     021F                     CCPTMRS1        equ	543	;# 
  6859     028C                     T2TMR           equ	652	;# 
  6860     028C                     TMR2            equ	652	;# 
  6861     028D                     T2PR            equ	653	;# 
  6862     028D                     PR2             equ	653	;# 
  6863     028E                     T2CON           equ	654	;# 
  6864     028F                     T2HLT           equ	655	;# 
  6865     0290                     T2CLKCON        equ	656	;# 
  6866     0291                     T2RST           equ	657	;# 
  6867     0292                     T4TMR           equ	658	;# 
  6868     0292                     TMR4            equ	658	;# 
  6869     0293                     T4PR            equ	659	;# 
  6870     0293                     PR4             equ	659	;# 
  6871     0294                     T4CON           equ	660	;# 
  6872     0295                     T4HLT           equ	661	;# 
  6873     0296                     T4CLKCON        equ	662	;# 
  6874     0297                     T4RST           equ	663	;# 
  6875     0298                     T6TMR           equ	664	;# 
  6876     0298                     TMR6            equ	664	;# 
  6877     0299                     T6PR            equ	665	;# 
  6878     0299                     PR6             equ	665	;# 
  6879     029A                     T6CON           equ	666	;# 
  6880     029B                     T6HLT           equ	667	;# 
  6881     029C                     T6CLKCON        equ	668	;# 
  6882     029D                     T6RST           equ	669	;# 
  6883     029F                     ADCPCON0        equ	671	;# 
  6884     030C                     CCPR1           equ	780	;# 
  6885     030C                     CCPR1L          equ	780	;# 
  6886     030D                     CCPR1H          equ	781	;# 
  6887     030E                     CCP1CON         equ	782	;# 
  6888     030F                     CCP1CAP         equ	783	;# 
  6889     0310                     CCPR2           equ	784	;# 
  6890     0310                     CCPR2L          equ	784	;# 
  6891     0311                     CCPR2H          equ	785	;# 
  6892     0312                     CCP2CON         equ	786	;# 
  6893     0313                     CCP2CAP         equ	787	;# 
  6894     0314                     CCPR3           equ	788	;# 
  6895     0314                     CCPR3L          equ	788	;# 
  6896     0315                     CCPR3H          equ	789	;# 
  6897     0316                     CCP3CON         equ	790	;# 
  6898     0317                     CCP3CAP         equ	791	;# 
  6899     0318                     CCPR4           equ	792	;# 
  6900     0318                     CCPR4L          equ	792	;# 
  6901     0319                     CCPR4H          equ	793	;# 
  6902     031A                     CCP4CON         equ	794	;# 
  6903     031B                     CCP4CAP         equ	795	;# 
  6904     038C                     PWM6DC          equ	908	;# 
  6905     038C                     PWM6DCL         equ	908	;# 
  6906     038D                     PWM6DCH         equ	909	;# 
  6907     038E                     PWM6CON         equ	910	;# 
  6908     0390                     PWM7DC          equ	912	;# 
  6909     0390                     PWM7DCL         equ	912	;# 
  6910     0391                     PWM7DCH         equ	913	;# 
  6911     0392                     PWM7CON         equ	914	;# 
  6912     048C                     SMT1TMR         equ	1164	;# 
  6913     048C                     SMT1TMRL        equ	1164	;# 
  6914     048D                     SMT1TMRH        equ	1165	;# 
  6915     048E                     SMT1TMRU        equ	1166	;# 
  6916     048F                     SMT1CPR         equ	1167	;# 
  6917     048F                     SMT1CPRL        equ	1167	;# 
  6918     0490                     SMT1CPRH        equ	1168	;# 
  6919     0491                     SMT1CPRU        equ	1169	;# 
  6920     0492                     SMT1CPW         equ	1170	;# 
  6921     0492                     SMT1CPWL        equ	1170	;# 
  6922     0493                     SMT1CPWH        equ	1171	;# 
  6923     0494                     SMT1CPWU        equ	1172	;# 
  6924     0495                     SMT1PR          equ	1173	;# 
  6925     0495                     SMT1PRL         equ	1173	;# 
  6926     0496                     SMT1PRH         equ	1174	;# 
  6927     0497                     SMT1PRU         equ	1175	;# 
  6928     0498                     SMT1CON0        equ	1176	;# 
  6929     0499                     SMT1CON1        equ	1177	;# 
  6930     049A                     SMT1STAT        equ	1178	;# 
  6931     049B                     SMT1CLK         equ	1179	;# 
  6932     049C                     SMT1SIG         equ	1180	;# 
  6933     049D                     SMT1WIN         equ	1181	;# 
  6934     058C                     NCO1ACC         equ	1420	;# 
  6935     058C                     NCO1ACCL        equ	1420	;# 
  6936     058D                     NCO1ACCH        equ	1421	;# 
  6937     058E                     NCO1ACCU        equ	1422	;# 
  6938     058F                     NCO1INC         equ	1423	;# 
  6939     058F                     NCO1INCL        equ	1423	;# 
  6940     0590                     NCO1INCH        equ	1424	;# 
  6941     0591                     NCO1INCU        equ	1425	;# 
  6942     0592                     NCO1CON         equ	1426	;# 
  6943     0593                     NCO1CLK         equ	1427	;# 
  6944     059C                     TMR0L           equ	1436	;# 
  6945     059C                     TMR0            equ	1436	;# 
  6946     059D                     TMR0H           equ	1437	;# 
  6947     059D                     PR0             equ	1437	;# 
  6948     059E                     T0CON0          equ	1438	;# 
  6949     059F                     T0CON1          equ	1439	;# 
  6950     060C                     CWG1CLK         equ	1548	;# 
  6951     060C                     CWG1CLKCON      equ	1548	;# 
  6952     060D                     CWG1ISM         equ	1549	;# 
  6953     060D                     CWG1DAT         equ	1549	;# 
  6954     060E                     CWG1DBR         equ	1550	;# 
  6955     060F                     CWG1DBF         equ	1551	;# 
  6956     0610                     CWG1CON0        equ	1552	;# 
  6957     0611                     CWG1CON1        equ	1553	;# 
  6958     0612                     CWG1AS0         equ	1554	;# 
  6959     0613                     CWG1AS1         equ	1555	;# 
  6960     0614                     CWG1STR         equ	1556	;# 
  6961     0616                     CWG2CLK         equ	1558	;# 
  6962     0616                     CWG2CLKCON      equ	1558	;# 
  6963     0617                     CWG2ISM         equ	1559	;# 
  6964     0617                     CWG2DAT         equ	1559	;# 
  6965     0618                     CWG2DBR         equ	1560	;# 
  6966     0619                     CWG2DBF         equ	1561	;# 
  6967     061A                     CWG2CON0        equ	1562	;# 
  6968     061B                     CWG2CON1        equ	1563	;# 
  6969     061C                     CWG2AS0         equ	1564	;# 
  6970     061D                     CWG2AS1         equ	1565	;# 
  6971     061E                     CWG2STR         equ	1566	;# 
  6972     070C                     PIR0            equ	1804	;# 
  6973     070D                     PIR1            equ	1805	;# 
  6974     070E                     PIR2            equ	1806	;# 
  6975     070F                     PIR3            equ	1807	;# 
  6976     0710                     PIR4            equ	1808	;# 
  6977     0711                     PIR5            equ	1809	;# 
  6978     0712                     PIR6            equ	1810	;# 
  6979     0713                     PIR7            equ	1811	;# 
  6980     0714                     PIR8            equ	1812	;# 
  6981     0716                     PIE0            equ	1814	;# 
  6982     0717                     PIE1            equ	1815	;# 
  6983     0718                     PIE2            equ	1816	;# 
  6984     0719                     PIE3            equ	1817	;# 
  6985     071A                     PIE4            equ	1818	;# 
  6986     071B                     PIE5            equ	1819	;# 
  6987     071C                     PIE6            equ	1820	;# 
  6988     071D                     PIE7            equ	1821	;# 
  6989     071E                     PIE8            equ	1822	;# 
  6990     0796                     PMD0            equ	1942	;# 
  6991     0797                     PMD1            equ	1943	;# 
  6992     0798                     PMD2            equ	1944	;# 
  6993     0799                     PMD3            equ	1945	;# 
  6994     079A                     PMD4            equ	1946	;# 
  6995     079B                     PMD5            equ	1947	;# 
  6996     079C                     PMD6            equ	1948	;# 
  6997     079D                     PMD7            equ	1949	;# 
  6998     080C                     WDTCON0         equ	2060	;# 
  6999     080D                     WDTCON1         equ	2061	;# 
  7000     080E                     WDTPSL          equ	2062	;# 
  7001     080F                     WDTPSH          equ	2063	;# 
  7002     0810                     WDTTMR          equ	2064	;# 
  7003     0811                     BORCON          equ	2065	;# 
  7004     0812                     VREGCON         equ	2066	;# 
  7005     0813                     PCON0           equ	2067	;# 
  7006     0814                     PCON1           equ	2068	;# 
  7007     081A                     NVMADR          equ	2074	;# 
  7008     081A                     NVMADRL         equ	2074	;# 
  7009     081B                     NVMADRH         equ	2075	;# 
  7010     081C                     NVMDAT          equ	2076	;# 
  7011     081C                     NVMDATL         equ	2076	;# 
  7012     081D                     NVMDATH         equ	2077	;# 
  7013     081E                     NVMCON1         equ	2078	;# 
  7014     081F                     NVMCON2         equ	2079	;# 
  7015     088C                     CPUDOZE         equ	2188	;# 
  7016     088D                     OSCCON1         equ	2189	;# 
  7017     088E                     OSCCON2         equ	2190	;# 
  7018     088F                     OSCCON3         equ	2191	;# 
  7019     0890                     OSCSTAT         equ	2192	;# 
  7020     0891                     OSCEN           equ	2193	;# 
  7021     0892                     OSCTUNE         equ	2194	;# 
  7022     0893                     OSCFRQ          equ	2195	;# 
  7023     0895                     CLKRCON         equ	2197	;# 
  7024     0896                     CLKRCLK         equ	2198	;# 
  7025     0897                     MD1CON0         equ	2199	;# 
  7026     0898                     MD1CON1         equ	2200	;# 
  7027     0899                     MD1SRC          equ	2201	;# 
  7028     089A                     MD1CARL         equ	2202	;# 
  7029     089B                     MD1CARH         equ	2203	;# 
  7030     090C                     FVRCON          equ	2316	;# 
  7031     090E                     DAC1CON0        equ	2318	;# 
  7032     090F                     DAC1CON1        equ	2319	;# 
  7033     091F                     ZCDCON          equ	2335	;# 
  7034     098F                     CMOUT           equ	2447	;# 
  7035     098F                     CMSTAT          equ	2447	;# 
  7036     0990                     CM1CON0         equ	2448	;# 
  7037     0991                     CM1CON1         equ	2449	;# 
  7038     0992                     CM1NCH          equ	2450	;# 
  7039     0993                     CM1PCH          equ	2451	;# 
  7040     0994                     CM2CON0         equ	2452	;# 
  7041     0995                     CM2CON1         equ	2453	;# 
  7042     0996                     CM2NCH          equ	2454	;# 
  7043     0997                     CM2PCH          equ	2455	;# 
  7044     1E0F                     CLCDATA         equ	7695	;# 
  7045     1E10                     CLC1CON         equ	7696	;# 
  7046     1E11                     CLC1POL         equ	7697	;# 
  7047     1E12                     CLC1SEL0        equ	7698	;# 
  7048     1E13                     CLC1SEL1        equ	7699	;# 
  7049     1E14                     CLC1SEL2        equ	7700	;# 
  7050     1E15                     CLC1SEL3        equ	7701	;# 
  7051     1E16                     CLC1GLS0        equ	7702	;# 
  7052     1E17                     CLC1GLS1        equ	7703	;# 
  7053     1E18                     CLC1GLS2        equ	7704	;# 
  7054     1E19                     CLC1GLS3        equ	7705	;# 
  7055     1E1A                     CLC2CON         equ	7706	;# 
  7056     1E1B                     CLC2POL         equ	7707	;# 
  7057     1E1C                     CLC2SEL0        equ	7708	;# 
  7058     1E1D                     CLC2SEL1        equ	7709	;# 
  7059     1E1E                     CLC2SEL2        equ	7710	;# 
  7060     1E1F                     CLC2SEL3        equ	7711	;# 
  7061     1E20                     CLC2GLS0        equ	7712	;# 
  7062     1E21                     CLC2GLS1        equ	7713	;# 
  7063     1E22                     CLC2GLS2        equ	7714	;# 
  7064     1E23                     CLC2GLS3        equ	7715	;# 
  7065     1E24                     CLC3CON         equ	7716	;# 
  7066     1E25                     CLC3POL         equ	7717	;# 
  7067     1E26                     CLC3SEL0        equ	7718	;# 
  7068     1E27                     CLC3SEL1        equ	7719	;# 
  7069     1E28                     CLC3SEL2        equ	7720	;# 
  7070     1E29                     CLC3SEL3        equ	7721	;# 
  7071     1E2A                     CLC3GLS0        equ	7722	;# 
  7072     1E2B                     CLC3GLS1        equ	7723	;# 
  7073     1E2C                     CLC3GLS2        equ	7724	;# 
  7074     1E2D                     CLC3GLS3        equ	7725	;# 
  7075     1E2E                     CLC4CON         equ	7726	;# 
  7076     1E2F                     CLC4POL         equ	7727	;# 
  7077     1E30                     CLC4SEL0        equ	7728	;# 
  7078     1E31                     CLC4SEL1        equ	7729	;# 
  7079     1E32                     CLC4SEL2        equ	7730	;# 
  7080     1E33                     CLC4SEL3        equ	7731	;# 
  7081     1E34                     CLC4GLS0        equ	7732	;# 
  7082     1E35                     CLC4GLS1        equ	7733	;# 
  7083     1E36                     CLC4GLS2        equ	7734	;# 
  7084     1E37                     CLC4GLS3        equ	7735	;# 
  7085     1E8F                     PPSLOCK         equ	7823	;# 
  7086     1E90                     INTPPS          equ	7824	;# 
  7087     1E91                     T0CKIPPS        equ	7825	;# 
  7088     1E92                     T1CKIPPS        equ	7826	;# 
  7089     1E93                     T1GPPS          equ	7827	;# 
  7090     1E94                     T3CKIPPS        equ	7828	;# 
  7091     1E95                     T3GPPS          equ	7829	;# 
  7092     1E96                     T5CKIPPS        equ	7830	;# 
  7093     1E97                     T5GPPS          equ	7831	;# 
  7094     1E9C                     T2INPPS         equ	7836	;# 
  7095     1E9D                     T4INPPS         equ	7837	;# 
  7096     1E9E                     T6INPPS         equ	7838	;# 
  7097     1EA1                     CCP1PPS         equ	7841	;# 
  7098     1EA2                     CCP2PPS         equ	7842	;# 
  7099     1EA3                     CCP3PPS         equ	7843	;# 
  7100     1EA4                     CCP4PPS         equ	7844	;# 
  7101     1EA9                     SMT1WINPPS      equ	7849	;# 
  7102     1EAA                     SMT1SIGPPS      equ	7850	;# 
  7103     1EB1                     CWG1PPS         equ	7857	;# 
  7104     1EB2                     CWG2PPS         equ	7858	;# 
  7105     1EB8                     MDCARLPPS       equ	7864	;# 
  7106     1EB9                     MDCARHPPS       equ	7865	;# 
  7107     1EBA                     MDSRCPPS        equ	7866	;# 
  7108     1EBB                     CLCIN0PPS       equ	7867	;# 
  7109     1EBC                     CLCIN1PPS       equ	7868	;# 
  7110     1EBD                     CLCIN2PPS       equ	7869	;# 
  7111     1EBE                     CLCIN3PPS       equ	7870	;# 
  7112     1EC3                     ADACTPPS        equ	7875	;# 
  7113     1EC5                     SSP1CLKPPS      equ	7877	;# 
  7114     1EC6                     SSP1DATPPS      equ	7878	;# 
  7115     1EC7                     SSP1SSPPS       equ	7879	;# 
  7116     1EC8                     SSP2CLKPPS      equ	7880	;# 
  7117     1EC9                     SSP2DATPPS      equ	7881	;# 
  7118     1ECA                     SSP2SSPPS       equ	7882	;# 
  7119     1ECB                     RX1DTPPS        equ	7883	;# 
  7120     1ECC                     TX1CKPPS        equ	7884	;# 
  7121     1F10                     RA0PPS          equ	7952	;# 
  7122     1F11                     RA1PPS          equ	7953	;# 
  7123     1F12                     RA2PPS          equ	7954	;# 
  7124     1F14                     RA4PPS          equ	7956	;# 
  7125     1F15                     RA5PPS          equ	7957	;# 
  7126     1F20                     RC0PPS          equ	7968	;# 
  7127     1F21                     RC1PPS          equ	7969	;# 
  7128     1F22                     RC2PPS          equ	7970	;# 
  7129     1F23                     RC3PPS          equ	7971	;# 
  7130     1F24                     RC4PPS          equ	7972	;# 
  7131     1F25                     RC5PPS          equ	7973	;# 
  7132     1F38                     ANSELA          equ	7992	;# 
  7133     1F39                     WPUA            equ	7993	;# 
  7134     1F3A                     ODCONA          equ	7994	;# 
  7135     1F3B                     SLRCONA         equ	7995	;# 
  7136     1F3C                     INLVLA          equ	7996	;# 
  7137     1F3D                     IOCAP           equ	7997	;# 
  7138     1F3E                     IOCAN           equ	7998	;# 
  7139     1F3F                     IOCAF           equ	7999	;# 
  7140     1F4E                     ANSELC          equ	8014	;# 
  7141     1F4F                     WPUC            equ	8015	;# 
  7142     1F50                     ODCONC          equ	8016	;# 
  7143     1F51                     SLRCONC         equ	8017	;# 
  7144     1F52                     INLVLC          equ	8018	;# 
  7145     1F53                     IOCCP           equ	8019	;# 
  7146     1F54                     IOCCN           equ	8020	;# 
  7147     1F55                     IOCCF           equ	8021	;# 
  7148     1FE4                     STATUS_SHAD     equ	8164	;# 
  7149     1FE5                     WREG_SHAD       equ	8165	;# 
  7150     1FE6                     BSR_SHAD        equ	8166	;# 
  7151     1FE7                     PCLATH_SHAD     equ	8167	;# 
  7152     1FE8                     FSR0_SHAD       equ	8168	;# 
  7153     1FE8                     FSR0L_SHAD      equ	8168	;# 
  7154     1FE9                     FSR0H_SHAD      equ	8169	;# 
  7155     1FEA                     FSR1L_SHAD      equ	8170	;# 
  7156     1FEB                     FSR1H_SHAD      equ	8171	;# 
  7157     1FED                     STKPTR          equ	8173	;# 
  7158     1FEE                     TOSL            equ	8174	;# 
  7159     1FEF                     TOSH            equ	8175	;# 
  7160                           
  7161                           	psect	idataBANK4
  7162     143E                     __pidataBANK4:
  7163                           
  7164                           ;initializer for _coeff_reg
  7165     143E  3430               	retlw	48
  7166     143F  3431               	retlw	49
  7167     1440  3432               	retlw	50
  7168     1441  3433               	retlw	51
  7169     1442  3434               	retlw	52
  7170     1443  3435               	retlw	53
  7171     1444  3436               	retlw	54
  7172     1445  3437               	retlw	55
  7173     1446  3438               	retlw	56
  7174     1447  3439               	retlw	57
  7175     1448  3441               	retlw	65
  7176     1449  3442               	retlw	66
  7177     144A  3443               	retlw	67
  7178     144B  3444               	retlw	68
  7179     144C  3445               	retlw	69
  7180     144D  3446               	retlw	70
  7181     144E  3447               	retlw	71
  7182     144F  3448               	retlw	72
  7183     1450  3449               	retlw	73
  7184     1451  344A               	retlw	74
  7185     1452  344B               	retlw	75
  7186     1453  344C               	retlw	76
  7187     1454  344D               	retlw	77
  7188     1455  344E               	retlw	78
  7189     1456  344F               	retlw	79
  7190     1457  3450               	retlw	80
  7191                           
  7192                           	psect	idataBANK5
  7193     08DA                     __pidataBANK5:
  7194                           
  7195                           ;initializer for _sensor2
  7196     08DA  3448               	retlw	72
  7197     08DB  3455               	retlw	85
  7198     08DC  3430               	retlw	48
  7199     08DD  3430               	retlw	48
  7200     08DE  3432               	retlw	50
  7201     08DF  3430               	retlw	48
  7202     08E0  3430               	retlw	48
  7203     08E1  3432               	retlw	50
  7204     08E2  3400               	retlw	0
  7205     08E3  3400               	retlw	0
  7206     08E4  3405               	retlw	5
  7207     08E5  34C3               	retlw	low _getADCData
  7208     08E6  3412               	retlw	high _getADCData
  7209                           
  7210                           ;initializer for sendSensorData24bits@F10979
  7211     08E7  344C               	retlw	76
  7212     08E8  343E               	retlw	62
  7213     08E9  3400               	retlw	0
  7214     08EA  3400               	retlw	0
  7215     08EB  3400               	retlw	0
  7216     08EC  3400               	retlw	0
  7217     08ED  3400               	retlw	0
  7218     08EE  3400               	retlw	0
  7219     08EF  3400               	retlw	0
  7220     08F0  3400               	retlw	0
  7221     08F1  3400               	retlw	0
  7222                           
  7223                           ;initializer for sendSensorData@F10975
  7224     08F2  344C               	retlw	76
  7225     08F3  343E               	retlw	62
  7226     08F4  3400               	retlw	0
  7227     08F5  3400               	retlw	0
  7228     08F6  3400               	retlw	0
  7229     08F7  3400               	retlw	0
  7230     08F8  3400               	retlw	0
  7231     08F9  3400               	retlw	0
  7232                           
  7233                           ;initializer for sendSensorCoeff@F10969
  7234     08FA  344C               	retlw	76
  7235     08FB  343E               	retlw	62
  7236     08FC  3400               	retlw	0
  7237     08FD  3400               	retlw	0
  7238     08FE  3400               	retlw	0
  7239     08FF  3400               	retlw	0
  7240     0900  3400               	retlw	0
  7241     0901  3400               	retlw	0
  7242                           
  7243                           ;initializer for sendSensorInfo@F10964
  7244     0902  344C               	retlw	76
  7245     0903  343E               	retlw	62
  7246     0904  3454               	retlw	84
  7247     0905  3445               	retlw	69
  7248     0906  3430               	retlw	48
  7249     0907  3430               	retlw	48
  7250     0908  3431               	retlw	49
  7251                           
  7252                           ;initializer for _sensor1
  7253     0909  3454               	retlw	84
  7254     090A  3445               	retlw	69
  7255     090B  3430               	retlw	48
  7256     090C  3430               	retlw	48
  7257     090D  3431               	retlw	49
  7258     090E  3430               	retlw	48
  7259     090F  3430               	retlw	48
  7260     0910  3431               	retlw	49
  7261     0911  3400               	retlw	0
  7262     0912  3400               	retlw	0
  7263     0913  3405               	retlw	5
  7264     0914  34C3               	retlw	low _getADCData
  7265     0915  3412               	retlw	high _getADCData
  7266                           
  7267                           	psect	idataBANK6
  7268     1424                     __pidataBANK6:
  7269                           
  7270                           ;initializer for _sensor4
  7271     1424  3454               	retlw	84
  7272     1425  3445               	retlw	69
  7273     1426  3430               	retlw	48
  7274     1427  3430               	retlw	48
  7275     1428  3438               	retlw	56
  7276     1429  3430               	retlw	48
  7277     142A  3430               	retlw	48
  7278     142B  3438               	retlw	56
  7279     142C  3400               	retlw	0
  7280     142D  3400               	retlw	0
  7281     142E  3400               	retlw	0
  7282     142F  3400               	retlw	0
  7283     1430  3400               	retlw	0
  7284                           
  7285                           ;initializer for _sensor3
  7286     1431  3450               	retlw	80
  7287     1432  3441               	retlw	65
  7288     1433  3430               	retlw	48
  7289     1434  3430               	retlw	48
  7290     1435  3437               	retlw	55
  7291     1436  3430               	retlw	48
  7292     1437  3430               	retlw	48
  7293     1438  3437               	retlw	55
  7294     1439  3400               	retlw	0
  7295     143A  3400               	retlw	0
  7296     143B  3400               	retlw	0
  7297     143C  3400               	retlw	0
  7298     143D  3400               	retlw	0
  7299                           
  7300                           	psect	stringtext1
  7301     1826                     __pstringtext1:
  7302     1826                     _fsmStateTable:
  7303     1826  346A               	retlw	low _I2C1_DO_IDLE
  7304     1827  3411               	retlw	high _I2C1_DO_IDLE
  7305     1828  349F               	retlw	low _I2C1_DO_SEND_ADR_READ
  7306     1829  3411               	retlw	high _I2C1_DO_SEND_ADR_READ
  7307     182A  3498               	retlw	low _I2C1_DO_SEND_ADR_WRITE
  7308     182B  3411               	retlw	high _I2C1_DO_SEND_ADR_WRITE
  7309     182C  34D6               	retlw	low _I2C1_DO_TX
  7310     182D  340B               	retlw	high _I2C1_DO_TX
  7311     182E  3416               	retlw	low _I2C1_DO_RX
  7312     182F  3409               	retlw	high _I2C1_DO_RX
  7313     1830  3486               	retlw	low _I2C1_DO_RCEN
  7314     1831  3411               	retlw	high _I2C1_DO_RCEN
  7315     1832  342F               	retlw	low _I2C1_DO_TX_EMPTY
  7316     1833  3416               	retlw	high _I2C1_DO_TX_EMPTY
  7317     1834  3436               	retlw	low _I2C1_DO_SEND_RESTART_READ
  7318     1835  3411               	retlw	high _I2C1_DO_SEND_RESTART_READ
  7319     1836  343A               	retlw	low _I2C1_DO_SEND_RESTART_WRITE
  7320     1837  3411               	retlw	high _I2C1_DO_SEND_RESTART_WRITE
  7321     1838  343E               	retlw	low _I2C1_DO_SEND_RESTART
  7322     1839  3411               	retlw	high _I2C1_DO_SEND_RESTART
  7323     183A  3442               	retlw	low _I2C1_DO_SEND_STOP
  7324     183B  3411               	retlw	high _I2C1_DO_SEND_STOP
  7325     183C  3446               	retlw	low _I2C1_DO_RX_ACK
  7326     183D  3411               	retlw	high _I2C1_DO_RX_ACK
  7327     183E  344A               	retlw	low _I2C1_DO_RX_NACK_STOP
  7328     183F  3411               	retlw	high _I2C1_DO_RX_NACK_STOP
  7329     1840  344E               	retlw	low _I2C1_DO_RX_NACK_RESTART
  7330     1841  3411               	retlw	high _I2C1_DO_RX_NACK_RESTART
  7331     1842  346F               	retlw	low _I2C1_DO_RESET
  7332     1843  3411               	retlw	high _I2C1_DO_RESET
  7333     1844  3400               	retlw	low _I2C1_DO_ADDRESS_NACK
  7334     1845  3408               	retlw	high _I2C1_DO_ADDRESS_NACK
  7335     1846                     __end_of_fsmStateTable:
  7336                           
  7337                           	psect	stringtext2
  7338     1846                     __pstringtext2:
  7339     1846                     _NMBS_BROADCAST_ADDRESS@nanomodbus$F3032:
  7340     1846  3400               	retlw	0
  7341     1847                     __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F3032:
  7342                           
  7343                           	psect	stringtext3
  7344     1847                     __pstringtext3:
  7345     1847                     _NMBS_BROADCAST_ADDRESS@nanomodbus$F2768:
  7346     1847  3400               	retlw	0
  7347     1848                     __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F2768:
  7348                           
  7349                           	psect	stringtext4
  7350     1848                     __pstringtext4:
  7351     1848                     _NMBS_BROADCAST_ADDRESS:
  7352     1848  3400               	retlw	0
  7353     1849                     __end_of_NMBS_BROADCAST_ADDRESS:
  7354                           
  7355                           	psect	nvBANK2
  7356     016A                     __pnvBANK2:
  7357     016A                     _TMR1_InterruptHandler:
  7358     016A                     	ds	2
  7359     016C                     _EUSART1_RxDefaultInterruptHandler:
  7360     016C                     	ds	2
  7361                           
  7362                           	psect	nvBANK3
  7363     01A7                     __pnvBANK3:
  7364     01A7                     _EUSART1_FramingErrorHandler:
  7365     01A7                     	ds	2
  7366                           
  7367                           	psect	nvBANK4
  7368     0267                     __pnvBANK4:
  7369     0267                     _EUSART1_ErrorHandler:
  7370     0267                     	ds	2
  7371     0269                     _EUSART1_OverrunErrorHandler:
  7372     0269                     	ds	2
  7373     001A                     _LATCbits       set	26
  7374     000B                     _INTCONbits     set	11
  7375     0014                     _TRISC          set	20
  7376     0012                     _TRISA          set	18
  7377     001A                     _LATC           set	26
  7378     0018                     _LATA           set	24
  7379     009D                     _ADRESL         set	157
  7380     009E                     _ADRESH         set	158
  7381     009F                     _ADPCH          set	159
  7382     009A                     _ADRPT          set	154
  7383     0098                     _ADACCU         set	152
  7384     0093                     _ADSTPTH        set	147
  7385     0092                     _ADSTPTL        set	146
  7386     008F                     _ADUTHH         set	143
  7387     008E                     _ADUTHL         set	142
  7388     008D                     _ADLTHH         set	141
  7389     008C                     _ADLTHL         set	140
  7390     011B                     _SP1BRG         set	283
  7391     0119                     _RC1REG         set	281
  7392     011A                     _TX1REG         set	282
  7393     011E                     _TX1STA         set	286
  7394     011D                     _RC1STA         set	285
  7395     011F                     _BAUD1CON       set	287
  7396     011C                     _SP1BRGH        set	284
  7397     011B                     _SP1BRGL        set	283
  7398     011D                     _RC1STAbits     set	285
  7399     011E                     _TX1STAbits     set	286
  7400     0111                     _ADCON0bits     set	273
  7401     0111                     _ADCON0         set	273
  7402     0118                     _ADCLK          set	280
  7403     0117                     _ADACT          set	279
  7404     0116                     _ADREF          set	278
  7405     0115                     _ADSTAT         set	277
  7406     0114                     _ADCON3         set	276
  7407     0113                     _ADCON2         set	275
  7408     0112                     _ADCON1         set	274
  7409     0110                     _ADPREH         set	272
  7410     010F                     _ADPREL         set	271
  7411     010E                     _ADCAP          set	270
  7412     010D                     _ADACQH         set	269
  7413     010C                     _ADACQL         set	268
  7414     0191                     _SSP1CON2bits   set	401
  7415     018C                     _SSP1BUF        set	396
  7416     0190                     _SSP1CON1bits   set	400
  7417     018D                     _SSP1ADD        set	397
  7418     0191                     _SSP1CON2       set	401
  7419     0190                     _SSP1CON1       set	400
  7420     018F                     _SSP1STAT       set	399
  7421     020E                     _T1CONbits      set	526
  7422     020E                     _T1CON          set	526
  7423     0211                     _T1CLK          set	529
  7424     0210                     _T1GATE         set	528
  7425     020F                     _T1GCON         set	527
  7426     020C                     _TMR1L          set	524
  7427     020D                     _TMR1H          set	525
  7428     0710                     _PIR4bits       set	1808
  7429     071A                     _PIE4bits       set	1818
  7430     070F                     _PIR3bits       set	1807
  7431     0719                     _PIE3bits       set	1817
  7432     079D                     _PMD7           set	1949
  7433     079C                     _PMD6           set	1948
  7434     079B                     _PMD5           set	1947
  7435     079A                     _PMD4           set	1946
  7436     0799                     _PMD3           set	1945
  7437     0798                     _PMD2           set	1944
  7438     0797                     _PMD1           set	1943
  7439     0796                     _PMD0           set	1942
  7440     081F                     _NVMCON2        set	2079
  7441     081E                     _NVMCON1bits    set	2078
  7442     081C                     _NVMDATL        set	2076
  7443     081A                     _NVMADRL        set	2074
  7444     081B                     _NVMADRH        set	2075
  7445     0892                     _OSCTUNE        set	2194
  7446     0893                     _OSCFRQ         set	2195
  7447     0891                     _OSCEN          set	2193
  7448     088F                     _OSCCON3        set	2191
  7449     088D                     _OSCCON1        set	2189
  7450     090C                     _FVRCONbits     set	2316
  7451     090C                     _FVRCON         set	2316
  7452     1ECB                     _RX1DTPPS       set	7883
  7453     1EC6                     _SSP1DATPPS     set	7878
  7454     1EC5                     _SSP1CLKPPS     set	7877
  7455     1F24                     _RC4PPS         set	7972
  7456     1F21                     _RC1PPS         set	7969
  7457     1F20                     _RC0PPS         set	7968
  7458     1F52                     _INLVLC         set	8018
  7459     1F3C                     _INLVLA         set	7996
  7460     1F51                     _SLRCONC        set	8017
  7461     1F3B                     _SLRCONA        set	7995
  7462     1F50                     _ODCONC         set	8016
  7463     1F3A                     _ODCONA         set	7994
  7464     1F4F                     _WPUC           set	8015
  7465     1F39                     _WPUA           set	7993
  7466     1F38                     _ANSELA         set	7992
  7467     1F4E                     _ANSELC         set	8014
  7468                           
  7469                           	psect	stringtext5
  7470     1800                     __pstringtext5:
  7471     1800                     STR_1:
  7472     1800  3445               	retlw	69	;'E'
  7473     1801  3472               	retlw	114	;'r'
  7474     1802  3472               	retlw	114	;'r'
  7475     1803  346F               	retlw	111	;'o'
  7476     1804  3472               	retlw	114	;'r'
  7477     1805  3420               	retlw	32	;' '
  7478     1806  3465               	retlw	101	;'e'
  7479     1807  346E               	retlw	110	;'n'
  7480     1808  3420               	retlw	32	;' '
  7481     1809  346C               	retlw	108	;'l'
  7482     180A  3461               	retlw	97	;'a'
  7483     180B  3420               	retlw	32	;' '
  7484     180C  3463               	retlw	99	;'c'
  7485     180D  3472               	retlw	114	;'r'
  7486     180E  3465               	retlw	101	;'e'
  7487     180F  3461               	retlw	97	;'a'
  7488     1810  3463               	retlw	99	;'c'
  7489     1811  3469               	retlw	105	;'i'
  7490     1812  346F               	retlw	111	;'o'
  7491     1813  346E               	retlw	110	;'n'
  7492     1814  3420               	retlw	32	;' '
  7493     1815  3464               	retlw	100	;'d'
  7494     1816  3465               	retlw	101	;'e'
  7495     1817  3420               	retlw	32	;' '
  7496     1818  346C               	retlw	108	;'l'
  7497     1819  3461               	retlw	97	;'a'
  7498     181A  3420               	retlw	32	;' '
  7499     181B  3469               	retlw	105	;'i'
  7500     181C  346E               	retlw	110	;'n'
  7501     181D  3473               	retlw	115	;'s'
  7502     181E  3474               	retlw	116	;'t'
  7503     181F  3461               	retlw	97	;'a'
  7504     1820  346E               	retlw	110	;'n'
  7505     1821  3463               	retlw	99	;'c'
  7506     1822  3469               	retlw	105	;'i'
  7507     1823  3461               	retlw	97	;'a'
  7508     1824  340A               	retlw	10
  7509     1825  3400               	retlw	0
  7510                           
  7511                           	psect	stringtext6
  7512     0000                     __pstringtext6:
  7513                           
  7514                           	psect	cinit
  7515     001D                     start_initialization:	
  7516                           ; #config settings
  7517                           
  7518     001D                     __initialization:
  7519                           
  7520                           ; Initialize objects allocated to BANK4
  7521     001D  303E               	movlw	low __pidataBANK4
  7522     001E  0084               	movwf	4
  7523     001F  3094               	movlw	(high __pidataBANK4)| (0+128)
  7524     0020  0085               	movwf	5
  7525     0021  304D               	movlw	low __pdataBANK4
  7526     0022  0086               	movwf	6
  7527     0023  3002               	movlw	high __pdataBANK4
  7528     0024  0087               	movwf	7
  7529     0025  301A               	movlw	26
  7530     0026  3191  2192  3180   	fcall	init_ram
  7531                           
  7532                           ; Initialize objects allocated to BANK5
  7533     0029  30DA               	movlw	low __pidataBANK5
  7534     002A  0084               	movwf	4
  7535     002B  3088               	movlw	(high __pidataBANK5)| (0+128)
  7536     002C  0085               	movwf	5
  7537     002D  30A0               	movlw	low __pdataBANK5
  7538     002E  0086               	movwf	6
  7539     002F  3002               	movlw	high __pdataBANK5
  7540     0030  0087               	movwf	7
  7541     0031  303C               	movlw	60
  7542     0032  3191  2192  3180   	fcall	init_ram
  7543                           
  7544                           ; Initialize objects allocated to BANK6
  7545     0035  3024               	movlw	low __pidataBANK6
  7546     0036  0084               	movwf	4
  7547     0037  3094               	movlw	(high __pidataBANK6)| (0+128)
  7548     0038  0085               	movwf	5
  7549     0039  3020               	movlw	low __pdataBANK6
  7550     003A  0086               	movwf	6
  7551     003B  3003               	movlw	high __pdataBANK6
  7552     003C  0087               	movwf	7
  7553     003D  301A               	movlw	26
  7554     003E  3191  2192  3180   	fcall	init_ram
  7555                           
  7556                           ; Clear objects allocated to COMMON
  7557     0041  01F0               	clrf	__pbssCOMMON& (0+127)
  7558     0042  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  7559     0043  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  7560     0044  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  7561     0045  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  7562     0046  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  7563                           
  7564                           ; Clear objects allocated to BANK2
  7565     0047  3020               	movlw	low __pbssBANK2
  7566     0048  0084               	movwf	4
  7567     0049  3001               	movlw	high __pbssBANK2
  7568     004A  0085               	movwf	5
  7569     004B  303C               	movlw	60
  7570     004C  3191  218C  3180   	fcall	clear_ram0
  7571                           
  7572                           ; Clear objects allocated to BANK3
  7573     004F  0143               	movlb	3	; select bank3
  7574     0050  01A9               	clrf	__pbssBANK3& (0+127)
  7575                           
  7576                           ; Clear objects allocated to BANK5
  7577     0051  30DC               	movlw	low __pbssBANK5
  7578     0052  0084               	movwf	4
  7579     0053  3002               	movlw	high __pbssBANK5
  7580     0054  0085               	movwf	5
  7581     0055  3008               	movlw	8
  7582     0056  3191  218C  3180   	fcall	clear_ram0
  7583                           
  7584                           ; Clear objects allocated to BANK6
  7585     0059  303A               	movlw	low __pbssBANK6
  7586     005A  0084               	movwf	4
  7587     005B  3003               	movlw	high __pbssBANK6
  7588     005C  0085               	movwf	5
  7589     005D  3018               	movlw	24
  7590     005E  3191  218C  3180   	fcall	clear_ram0
  7591                           
  7592                           ; Clear objects allocated to BANK7
  7593     0061  30A0               	movlw	low __pbssBANK7
  7594     0062  0084               	movwf	4
  7595     0063  3003               	movlw	high __pbssBANK7
  7596     0064  0085               	movwf	5
  7597     0065  3020               	movlw	32
  7598     0066  3191  218C  3180   	fcall	clear_ram0
  7599                           
  7600                           ; Clear objects allocated to BANK8
  7601     0069  3020               	movlw	low __pbssBANK8
  7602     006A  0084               	movwf	4
  7603     006B  3004               	movlw	high __pbssBANK8
  7604     006C  0085               	movwf	5
  7605     006D  3040               	movlw	64
  7606     006E  3191  218C         	fcall	clear_ram0
  7607     0070                     end_of_initialization:	
  7608                           ;End of C runtime variable initialization code
  7609                           
  7610     0070                     __end_of__initialization:
  7611     0070  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  7612     0071  0140               	movlb	0
  7613     0072  3180  2874         	ljmp	_main	;jump to C main() function
  7614                           
  7615                           	psect	bssCOMMON
  7616     0070                     __pbssCOMMON:
  7617     0070                     _eusart1RxLastError:
  7618     0070                     	ds	1
  7619     0071                     _eusart1RxCount:
  7620     0071                     	ds	1
  7621     0072                     _eusart1RxTail:
  7622     0072                     	ds	1
  7623     0073                     _eusart1RxHead:
  7624     0073                     	ds	1
  7625     0074                     _uart_expire_time:
  7626     0074                     	ds	1
  7627     0075                     _flag_Rx:
  7628     0075                     	ds	1
  7629                           
  7630                           	psect	bssBANK2
  7631     0120                     __pbssBANK2:
  7632     0120                     _I2C1_Status:
  7633     0120                     	ds	30
  7634     013E                     _eusart1RxStatusBuffer:
  7635     013E                     	ds	8
  7636     0146                     _eusart1RxBuffer:
  7637     0146                     	ds	8
  7638     014E                     _t_fine:
  7639     014E                     	ds	4
  7640     0152                     getBMP280Data@F10963:
  7641     0152                     	ds	3
  7642     0155                     _width:
  7643     0155                     	ds	2
  7644     0157                     _prec:
  7645     0157                     	ds	2
  7646     0159                     _timer1ReloadVal:
  7647     0159                     	ds	2
  7648     015B                     _flags:
  7649     015B                     	ds	1
  7650                           
  7651                           	psect	bssBANK3
  7652     01A9                     __pbssBANK3:
  7653     01A9                     _eusart1PacketFinish:
  7654     01A9                     	ds	1
  7655                           
  7656                           	psect	dataBANK4
  7657     024D                     __pdataBANK4:
  7658     024D                     _coeff_reg:
  7659     024D                     	ds	26
  7660                           
  7661                           	psect	bssBANK5
  7662     02DC                     __pbssBANK5:
  7663     02DC                     _BuffReg:
  7664     02DC                     	ds	8
  7665                           
  7666                           	psect	dataBANK5
  7667     02A0                     __pdataBANK5:
  7668     02A0                     _sensor2:
  7669     02A0                     	ds	13
  7670     02AD                     sendSensorData24bits@F10979:
  7671     02AD                     	ds	11
  7672     02B8                     sendSensorData@F10975:
  7673     02B8                     	ds	8
  7674     02C0                     sendSensorCoeff@F10969:
  7675     02C0                     	ds	8
  7676     02C8                     sendSensorInfo@F10964:
  7677     02C8                     	ds	7
  7678     02CF                     _sensor1:
  7679     02CF                     	ds	13
  7680                           
  7681                           	psect	bssBANK6
  7682     033A                     __pbssBANK6:
  7683     033A                     _dig:
  7684     033A                     	ds	24
  7685                           
  7686                           	psect	dataBANK6
  7687     0320                     __pdataBANK6:
  7688     0320                     _sensor4:
  7689     0320                     	ds	13
  7690     032D                     _sensor3:
  7691     032D                     	ds	13
  7692                           
  7693                           	psect	bssBANK7
  7694     03A0                     __pbssBANK7:
  7695     03A0                     _dbuf:
  7696     03A0                     	ds	32
  7697                           
  7698                           	psect	bssBANK8
  7699     0420                     __pbssBANK8:
  7700     0420                     handle_read_registers@F11145:
  7701     0420                     	ds	64
  7702                           
  7703                           	psect	inittext
  7704     1192                     init_ram:
  7705     1192  00FE               	movwf	126
  7706     1193                     initloop:
  7707     1193  0012               	moviw fsr0++
  7708     1194  001E               	movwi fsr1++
  7709     1195  0BFE               	decfsz	126,f
  7710     1196  2993               	goto	initloop
  7711     1197  3400               	retlw	0
  7712                           
  7713                           	psect	clrtext
  7714     118C                     clear_ram0:	
  7715                           ;	Called with FSR0 containing the base address, and
  7716                           ;	WREG with the size to clear
  7717                           
  7718     118C  0064               	clrwdt	;clear the watchdog before getting into this loop
  7719     118D                     clrloop0:
  7720     118D  0180               	clrf	0	;clear RAM location pointed to by FSR
  7721     118E  3101               	addfsr 0,1
  7722     118F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  7723     1190  298D               	goto	clrloop0	;have we reached the end yet?
  7724     1191  3400               	retlw	0	;all done for this memory range, return
  7725                           
  7726                           	psect	cstackBANK9
  7727     04A0                     __pcstackBANK9:
  7728     04A0                     main@nmbs:
  7729                           
  7730                           ; 76 bytes @ 0x0
  7731     04A0                     	ds	76
  7732                           
  7733                           	psect	cstackBANK4
  7734     0220                     __pcstackBANK4:
  7735     0220                     main@registers:
  7736                           
  7737                           ; 45 bytes @ 0x0
  7738     0220                     	ds	45
  7739                           
  7740                           	psect	cstackBANK3
  7741     01A0                     __pcstackBANK3:
  7742     01A0                     main@platform_conf:
  7743                           
  7744                           ; 7 bytes @ 0x0
  7745     01A0                     	ds	7
  7746                           
  7747                           	psect	cstackBANK2
  7748     015C                     __pcstackBANK2:
  7749     015C                     main@actual_regs:
  7750                           
  7751                           ; 4 bytes @ 0x0
  7752     015C                     	ds	4
  7753     0160                     main@err:
  7754                           
  7755                           ; 1 bytes @ 0x4
  7756     0160                     	ds	1
  7757     0161                     main@callbacks:
  7758                           
  7759                           ; 9 bytes @ 0x5
  7760     0161                     	ds	9
  7761                           
  7762                           	psect	cstackBANK1
  7763     00A0                     __pcstackBANK1:
  7764     00A0                     handle_read_registers@regs:
  7765                           
  7766                           ; 64 bytes @ 0x0
  7767     00A0                     	ds	64
  7768     00E0                     handle_read_registers@address:
  7769                           
  7770                           ; 2 bytes @ 0x40
  7771     00E0                     	ds	2
  7772     00E2                     handle_read_registers@regs_bytes:
  7773                           
  7774                           ; 1 bytes @ 0x42
  7775     00E2                     	ds	1
  7776     00E3                     handle_read_registers@i:
  7777                           
  7778                           ; 2 bytes @ 0x43
  7779     00E3                     	ds	2
  7780     00E5                     handle_read_registers@quantity:
  7781                           
  7782                           ; 2 bytes @ 0x45
  7783     00E5                     	ds	2
  7784     00E7                     handle_read_registers@err:
  7785                           
  7786                           ; 1 bytes @ 0x47
  7787     00E7                     	ds	1
  7788     00E8                     nmbs_server_poll@first_byte_received:
  7789                           
  7790                           ; 1 bytes @ 0x48
  7791     00E8                     	ds	1
  7792     00E9                     nmbs_server_poll@err:
  7793                           
  7794                           ; 1 bytes @ 0x49
  7795     00E9                     	ds	1
  7796     00EA                     ??_main:
  7797                           
  7798                           ; 1 bytes @ 0x4A
  7799     00EA                     	ds	3
  7800     00ED                     main@is_in_memory:
  7801                           
  7802                           ; 1 bytes @ 0x4D
  7803     00ED                     	ds	1
  7804                           
  7805                           	psect	cstackCOMMON
  7806     0076                     __pcstackCOMMON:
  7807     0076                     ?_I2C1_Open:
  7808     0076                     ?_I2C1_MasterWrite:	
  7809                           ; 1 bytes @ 0x0
  7810                           
  7811     0076                     ?_I2C1_Close:	
  7812                           ; 1 bytes @ 0x0
  7813                           
  7814     0076                     ?_I2C1_MasterRead:	
  7815                           ; 1 bytes @ 0x0
  7816                           
  7817     0076                     ?_EUSART1_Receive_ISR:	
  7818                           ; 1 bytes @ 0x0
  7819                           
  7820     0076                     ?_EUSART1_DefaultFramingErrorHandler:	
  7821                           ; 1 bytes @ 0x0
  7822                           
  7823     0076                     ?_EUSART1_DefaultOverrunErrorHandler:	
  7824                           ; 1 bytes @ 0x0
  7825                           
  7826     0076                     ?_EUSART1_DefaultErrorHandler:	
  7827                           ; 1 bytes @ 0x0
  7828                           
  7829     0076                     ?_EUSART1_RxDataHandler:	
  7830                           ; 1 bytes @ 0x0
  7831                           
  7832     0076                     ?_TMR1_StopTimer:	
  7833                           ; 1 bytes @ 0x0
  7834                           
  7835     0076                     ?_TMR1_WriteTimer:	
  7836                           ; 1 bytes @ 0x0
  7837                           
  7838     0076                     ?_TMR1_StartTimer:	
  7839                           ; 1 bytes @ 0x0
  7840                           
  7841     0076                     ?_PMD_Initialize:	
  7842                           ; 1 bytes @ 0x0
  7843                           
  7844     0076                     ?_I2C1_Initialize:	
  7845                           ; 1 bytes @ 0x0
  7846                           
  7847     0076                     ?_PIN_MANAGER_Initialize:	
  7848                           ; 1 bytes @ 0x0
  7849                           
  7850     0076                     ?_OSCILLATOR_Initialize:	
  7851                           ; 1 bytes @ 0x0
  7852                           
  7853     0076                     ?_FVR_Initialize:	
  7854                           ; 1 bytes @ 0x0
  7855                           
  7856     0076                     ?_TMR1_Initialize:	
  7857                           ; 1 bytes @ 0x0
  7858                           
  7859     0076                     ?_I2C1_DO_IDLE:	
  7860                           ; 1 bytes @ 0x0
  7861                           
  7862     0076                     ?_I2C1_DO_SEND_ADR_READ:	
  7863                           ; 1 bytes @ 0x0
  7864                           
  7865     0076                     ?_I2C1_DO_SEND_ADR_WRITE:	
  7866                           ; 1 bytes @ 0x0
  7867                           
  7868     0076                     ?_I2C1_DO_TX:	
  7869                           ; 1 bytes @ 0x0
  7870                           
  7871     0076                     ?_I2C1_DO_RX:	
  7872                           ; 1 bytes @ 0x0
  7873                           
  7874     0076                     ?_I2C1_DO_RCEN:	
  7875                           ; 1 bytes @ 0x0
  7876                           
  7877     0076                     ?_I2C1_DO_TX_EMPTY:	
  7878                           ; 1 bytes @ 0x0
  7879                           
  7880     0076                     ?_I2C1_DO_SEND_RESTART_READ:	
  7881                           ; 1 bytes @ 0x0
  7882                           
  7883     0076                     ?_I2C1_DO_SEND_RESTART_WRITE:	
  7884                           ; 1 bytes @ 0x0
  7885                           
  7886     0076                     ?_I2C1_DO_SEND_RESTART:	
  7887                           ; 1 bytes @ 0x0
  7888                           
  7889     0076                     ?_I2C1_DO_SEND_STOP:	
  7890                           ; 1 bytes @ 0x0
  7891                           
  7892     0076                     ?_I2C1_DO_RX_ACK:	
  7893                           ; 1 bytes @ 0x0
  7894                           
  7895     0076                     ?_I2C1_DO_RX_NACK_STOP:	
  7896                           ; 1 bytes @ 0x0
  7897                           
  7898     0076                     ?_I2C1_DO_RX_NACK_RESTART:	
  7899                           ; 1 bytes @ 0x0
  7900                           
  7901     0076                     ?_I2C1_DO_RESET:	
  7902                           ; 1 bytes @ 0x0
  7903                           
  7904     0076                     ?_I2C1_DO_ADDRESS_NACK:	
  7905                           ; 1 bytes @ 0x0
  7906                           
  7907     0076                     ?_I2C1_MasterClearIrq:	
  7908                           ; 1 bytes @ 0x0
  7909                           
  7910     0076                     ?_I2C1_MasterOpen:	
  7911                           ; 1 bytes @ 0x0
  7912                           
  7913     0076                     ?_I2C1_MasterDisableIrq:	
  7914                           ; 1 bytes @ 0x0
  7915                           
  7916     0076                     ?_I2C1_MasterClose:	
  7917                           ; 1 bytes @ 0x0
  7918                           
  7919     0076                     ?_I2C1_MasterStart:	
  7920                           ; 1 bytes @ 0x0
  7921                           
  7922     0076                     ?_I2C1_Poller:	
  7923                           ; 1 bytes @ 0x0
  7924                           
  7925     0076                     ?_I2C1_MasterWaitForEvent:	
  7926                           ; 1 bytes @ 0x0
  7927                           
  7928     0076                     ?_I2C1_MasterFsm:	
  7929                           ; 1 bytes @ 0x0
  7930                           
  7931     0076                     ?_I2C1_MasterIsNack:	
  7932                           ; 1 bytes @ 0x0
  7933                           
  7934     0076                     ?_I2C1_MasterSendTxData:	
  7935                           ; 1 bytes @ 0x0
  7936                           
  7937     0076                     ?_I2C1_MasterGetRxData:	
  7938                           ; 1 bytes @ 0x0
  7939                           
  7940     0076                     ?_I2C1_MasterSendAck:	
  7941                           ; 1 bytes @ 0x0
  7942                           
  7943     0076                     ?_I2C1_MasterStartRx:	
  7944                           ; 1 bytes @ 0x0
  7945                           
  7946     0076                     ?_I2C1_MasterSetIrq:	
  7947                           ; 1 bytes @ 0x0
  7948                           
  7949     0076                     ?_I2C1_MasterEnableRestart:	
  7950                           ; 1 bytes @ 0x0
  7951                           
  7952     0076                     ?_I2C1_MasterStop:	
  7953                           ; 1 bytes @ 0x0
  7954                           
  7955     0076                     ?_I2C1_MasterSendNack:	
  7956                           ; 1 bytes @ 0x0
  7957                           
  7958     0076                     ?_TMR1_ISR:	
  7959                           ; 1 bytes @ 0x0
  7960                           
  7961     0076                     ?_TMR1_DefaultInterruptHandler:	
  7962                           ; 1 bytes @ 0x0
  7963                           
  7964     0076                     ?_TxDeviceDisable:	
  7965                           ; 1 bytes @ 0x0
  7966                           
  7967     0076                     ?_InitBMP280:	
  7968                           ; 1 bytes @ 0x0
  7969                           
  7970     0076                     ?_check_error_modbus:	
  7971                           ; 1 bytes @ 0x0
  7972                           
  7973     0076                     ?_TxDeviceEnable:	
  7974                           ; 1 bytes @ 0x0
  7975                           
  7976     0076                     ?_putch:	
  7977                           ; 1 bytes @ 0x0
  7978                           
  7979     0076                     ?_ADCC_Initialize:	
  7980                           ; 1 bytes @ 0x0
  7981                           
  7982     0076                     ?_EUSART1_Initialize:	
  7983                           ; 1 bytes @ 0x0
  7984                           
  7985     0076                     ?_EUSART1_is_tx_ready:	
  7986                           ; 1 bytes @ 0x0
  7987                           
  7988     0076                     ?_EUSART1_is_tx_done:	
  7989                           ; 1 bytes @ 0x0
  7990                           
  7991     0076                     ?_EUSART1_Read:	
  7992                           ; 1 bytes @ 0x0
  7993                           
  7994     0076                     ?_EUSART1_Write:	
  7995                           ; 1 bytes @ 0x0
  7996                           
  7997     0076                     ?_UART_ClearBuffer:	
  7998                           ; 1 bytes @ 0x0
  7999                           
  8000     0076                     ?_SYSTEM_Initialize:	
  8001                           ; 1 bytes @ 0x0
  8002                           
  8003     0076                     ?_FVR_IsOutputReady:	
  8004                           ; 1 bytes @ 0x0
  8005                           
  8006     0076                     ?_I2C1_MasterOperation:	
  8007                           ; 1 bytes @ 0x0
  8008                           
  8009     0076                     ?_INTERRUPT_InterruptManager:	
  8010                           ; 1 bytes @ 0x0
  8011                           
  8012     0076                     ?_main:	
  8013                           ; 1 bytes @ 0x0
  8014                           
  8015     0076                     ?_readBMP280:	
  8016                           ; 1 bytes @ 0x0
  8017                           
  8018     0076                     ?i1_UART_ClearBuffer:	
  8019                           ; 1 bytes @ 0x0
  8020                           
  8021     0076                     check_error_modbus@err:	
  8022                           ; 1 bytes @ 0x0
  8023                           
  8024     0076                     putch@c:	
  8025                           ; 1 bytes @ 0x0
  8026                           
  8027     0076                     TMR1_WriteTimer@timerVal:	
  8028                           ; 1 bytes @ 0x0
  8029                           
  8030     0076                     ??_EUSART1_DefaultFramingErrorHandler:	
  8031                           ; 2 bytes @ 0x0
  8032                           
  8033     0076                     ??_EUSART1_DefaultOverrunErrorHandler:	
  8034                           ; 1 bytes @ 0x0
  8035                           
  8036     0076                     ??_TMR1_StopTimer:	
  8037                           ; 1 bytes @ 0x0
  8038                           
  8039     0076                     ??_TMR1_StartTimer:	
  8040                           ; 1 bytes @ 0x0
  8041                           
  8042     0076                     ??_TMR1_DefaultInterruptHandler:	
  8043                           ; 1 bytes @ 0x0
  8044                           
  8045     0076                     ??i1_UART_ClearBuffer:	
  8046                           ; 1 bytes @ 0x0
  8047                           
  8048                           
  8049                           ; 1 bytes @ 0x0
  8050     0076                     	ds	2
  8051     0078                     ??_EUSART1_RxDataHandler:
  8052     0078                     ??_TMR1_WriteTimer:	
  8053                           ; 1 bytes @ 0x2
  8054                           
  8055     0078                     ??_TMR1_ISR:	
  8056                           ; 1 bytes @ 0x2
  8057                           
  8058                           
  8059                           ; 1 bytes @ 0x2
  8060     0078                     	ds	2
  8061     007A                     EUSART1_RxDataHandler@t:
  8062                           
  8063                           ; 2 bytes @ 0x4
  8064     007A                     	ds	2
  8065     007C                     ??_EUSART1_Receive_ISR:
  8066     007C                     ??_EUSART1_DefaultErrorHandler:	
  8067                           ; 1 bytes @ 0x6
  8068                           
  8069     007C                     ??_INTERRUPT_InterruptManager:	
  8070                           ; 1 bytes @ 0x6
  8071                           
  8072                           
  8073                           	psect	cstackBANK0
  8074     0020                     __pcstackBANK0:	
  8075                           ; 1 bytes @ 0x6
  8076                           
  8077     0020                     ?_I2C1_SetBuffer:
  8078     0020                     ?_EUSART1_SetRxInterruptHandler:	
  8079                           ; 1 bytes @ 0x0
  8080                           
  8081     0020                     ?_EUSART1_SetFramingErrorHandler:	
  8082                           ; 1 bytes @ 0x0
  8083                           
  8084     0020                     ?_EUSART1_SetOverrunErrorHandler:	
  8085                           ; 1 bytes @ 0x0
  8086                           
  8087     0020                     ?_EUSART1_SetErrorHandler:	
  8088                           ; 1 bytes @ 0x0
  8089                           
  8090     0020                     ?_I2C1_SetCallback:	
  8091                           ; 1 bytes @ 0x0
  8092                           
  8093     0020                     ?_DATAEE_ReadByte:	
  8094                           ; 1 bytes @ 0x0
  8095                           
  8096     0020                     ?_TMR1_SetInterruptHandler:	
  8097                           ; 1 bytes @ 0x0
  8098                           
  8099     0020                     ?_handler_read_holding_registers:	
  8100                           ; 1 bytes @ 0x0
  8101                           
  8102     0020                     ?_handler_read_input_registers:	
  8103                           ; 1 bytes @ 0x0
  8104                           
  8105     0020                     ?_handle_write_single_coil:	
  8106                           ; 1 bytes @ 0x0
  8107                           
  8108     0020                     ?_handle_write_single_register:	
  8109                           ; 1 bytes @ 0x0
  8110                           
  8111     0020                     ?_m_memset:	
  8112                           ; 1 bytes @ 0x0
  8113                           
  8114     0020                     ?_adjustBMP280coeff:	
  8115                           ; 1 bytes @ 0x0
  8116                           
  8117     0020                     ?_setBaudRateEUSART1:	
  8118                           ; 1 bytes @ 0x0
  8119                           
  8120     0020                     ?_DATAEE_WriteByte:	
  8121                           ; 1 bytes @ 0x0
  8122                           
  8123     0020                     ?_get_1:	
  8124                           ; 1 bytes @ 0x0
  8125                           
  8126     0020                     ?_put_1:	
  8127                           ; 1 bytes @ 0x0
  8128                           
  8129     0020                     ?_put_2:	
  8130                           ; 1 bytes @ 0x0
  8131                           
  8132     0020                     ?_msg_buf_reset:	
  8133                           ; 1 bytes @ 0x0
  8134                           
  8135     0020                     ?_fputc:	
  8136                           ; 1 bytes @ 0x0
  8137                           
  8138     0020                     ?_ADCC_GetSingleConversion:	
  8139                           ; 2 bytes @ 0x0
  8140                           
  8141     0020                     ?_get_2:	
  8142                           ; 2 bytes @ 0x0
  8143                           
  8144     0020                     ?_nmbs_crc_calc:	
  8145                           ; 2 bytes @ 0x0
  8146                           
  8147     0020                     _EUSART1_is_tx_ready$765:	
  8148                           ; 2 bytes @ 0x0
  8149                           
  8150     0020                     EUSART1_Read@readValue:	
  8151                           ; 1 bytes @ 0x0
  8152                           
  8153     0020                     EUSART1_Write@txData:	
  8154                           ; 1 bytes @ 0x0
  8155                           
  8156     0020                     I2C1_Open@address:	
  8157                           ; 1 bytes @ 0x0
  8158                           
  8159     0020                     I2C1_Close@returnValue:	
  8160                           ; 1 bytes @ 0x0
  8161                           
  8162     0020                     I2C1_MasterSendTxData@data:	
  8163                           ; 1 bytes @ 0x0
  8164                           
  8165     0020                     EUSART1_SetFramingErrorHandler@interruptHandler:	
  8166                           ; 1 bytes @ 0x0
  8167                           
  8168     0020                     EUSART1_SetOverrunErrorHandler@interruptHandler:	
  8169                           ; 2 bytes @ 0x0
  8170                           
  8171     0020                     EUSART1_SetErrorHandler@interruptHandler:	
  8172                           ; 2 bytes @ 0x0
  8173                           
  8174     0020                     EUSART1_SetRxInterruptHandler@interruptHandler:	
  8175                           ; 2 bytes @ 0x0
  8176                           
  8177     0020                     I2C1_SetBuffer@buffer:	
  8178                           ; 2 bytes @ 0x0
  8179                           
  8180     0020                     I2C1_SetCallback@cb:	
  8181                           ; 2 bytes @ 0x0
  8182                           
  8183     0020                     DATAEE_WriteByte@bAdd:	
  8184                           ; 2 bytes @ 0x0
  8185                           
  8186     0020                     DATAEE_ReadByte@bAdd:	
  8187                           ; 2 bytes @ 0x0
  8188                           
  8189     0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  8190                           ; 2 bytes @ 0x0
  8191                           
  8192     0020                     adjustBMP280coeff@coeff_buff:	
  8193                           ; 2 bytes @ 0x0
  8194                           
  8195     0020                     handle_write_single_coil@address:	
  8196                           ; 2 bytes @ 0x0
  8197                           
  8198     0020                     handler_read_input_registers@address:	
  8199                           ; 2 bytes @ 0x0
  8200                           
  8201     0020                     handler_read_holding_registers@address:	
  8202                           ; 2 bytes @ 0x0
  8203                           
  8204     0020                     handle_write_single_register@address:	
  8205                           ; 2 bytes @ 0x0
  8206                           
  8207     0020                     get_1@nmbs:	
  8208                           ; 2 bytes @ 0x0
  8209                           
  8210     0020                     put_1@nmbs:	
  8211                           ; 2 bytes @ 0x0
  8212                           
  8213     0020                     get_2@nmbs:	
  8214                           ; 2 bytes @ 0x0
  8215                           
  8216     0020                     put_2@nmbs:	
  8217                           ; 2 bytes @ 0x0
  8218                           
  8219     0020                     msg_buf_reset@nmbs:	
  8220                           ; 2 bytes @ 0x0
  8221                           
  8222     0020                     m_memset@s:	
  8223                           ; 2 bytes @ 0x0
  8224                           
  8225     0020                     nmbs_crc_calc@data:	
  8226                           ; 2 bytes @ 0x0
  8227                           
  8228     0020                     fputc@c:	
  8229                           ; 2 bytes @ 0x0
  8230                           
  8231     0020                     setBaudRateEUSART1@baudRate:	
  8232                           ; 2 bytes @ 0x0
  8233                           
  8234     0020                     ??_I2C1_Open:	
  8235                           ; 4 bytes @ 0x0
  8236                           
  8237     0020                     ??_I2C1_Close:	
  8238                           ; 1 bytes @ 0x0
  8239                           
  8240     0020                     ??_PMD_Initialize:	
  8241                           ; 1 bytes @ 0x0
  8242                           
  8243     0020                     ??_I2C1_Initialize:	
  8244                           ; 1 bytes @ 0x0
  8245                           
  8246     0020                     ??_PIN_MANAGER_Initialize:	
  8247                           ; 1 bytes @ 0x0
  8248                           
  8249     0020                     ??_OSCILLATOR_Initialize:	
  8250                           ; 1 bytes @ 0x0
  8251                           
  8252     0020                     ??_FVR_Initialize:	
  8253                           ; 1 bytes @ 0x0
  8254                           
  8255     0020                     ??_I2C1_DO_IDLE:	
  8256                           ; 1 bytes @ 0x0
  8257                           
  8258     0020                     ??_I2C1_DO_SEND_ADR_READ:	
  8259                           ; 1 bytes @ 0x0
  8260                           
  8261     0020                     ??_I2C1_DO_RCEN:	
  8262                           ; 1 bytes @ 0x0
  8263                           
  8264     0020                     ??_I2C1_DO_SEND_RESTART_READ:	
  8265                           ; 1 bytes @ 0x0
  8266                           
  8267     0020                     ??_I2C1_DO_SEND_RESTART_WRITE:	
  8268                           ; 1 bytes @ 0x0
  8269                           
  8270     0020                     ??_I2C1_DO_SEND_RESTART:	
  8271                           ; 1 bytes @ 0x0
  8272                           
  8273     0020                     ??_I2C1_DO_SEND_STOP:	
  8274                           ; 1 bytes @ 0x0
  8275                           
  8276     0020                     ??_I2C1_DO_RX_ACK:	
  8277                           ; 1 bytes @ 0x0
  8278                           
  8279     0020                     ??_I2C1_DO_RX_NACK_STOP:	
  8280                           ; 1 bytes @ 0x0
  8281                           
  8282     0020                     ??_I2C1_DO_RX_NACK_RESTART:	
  8283                           ; 1 bytes @ 0x0
  8284                           
  8285     0020                     ??_I2C1_DO_RESET:	
  8286                           ; 1 bytes @ 0x0
  8287                           
  8288     0020                     ??_I2C1_MasterClearIrq:	
  8289                           ; 1 bytes @ 0x0
  8290                           
  8291     0020                     ??_I2C1_MasterOpen:	
  8292                           ; 1 bytes @ 0x0
  8293                           
  8294     0020                     ??_I2C1_MasterDisableIrq:	
  8295                           ; 1 bytes @ 0x0
  8296                           
  8297     0020                     ??_I2C1_MasterClose:	
  8298                           ; 1 bytes @ 0x0
  8299                           
  8300     0020                     ??_I2C1_MasterStart:	
  8301                           ; 1 bytes @ 0x0
  8302                           
  8303     0020                     ??_I2C1_MasterWaitForEvent:	
  8304                           ; 1 bytes @ 0x0
  8305                           
  8306     0020                     ??_I2C1_MasterIsNack:	
  8307                           ; 1 bytes @ 0x0
  8308                           
  8309     0020                     ??_I2C1_MasterSendTxData:	
  8310                           ; 1 bytes @ 0x0
  8311                           
  8312     0020                     ??_I2C1_MasterGetRxData:	
  8313                           ; 1 bytes @ 0x0
  8314                           
  8315     0020                     ??_I2C1_MasterSendAck:	
  8316                           ; 1 bytes @ 0x0
  8317                           
  8318     0020                     ??_I2C1_MasterStartRx:	
  8319                           ; 1 bytes @ 0x0
  8320                           
  8321     0020                     ??_I2C1_MasterSetIrq:	
  8322                           ; 1 bytes @ 0x0
  8323                           
  8324     0020                     ??_I2C1_MasterEnableRestart:	
  8325                           ; 1 bytes @ 0x0
  8326                           
  8327     0020                     ??_I2C1_MasterStop:	
  8328                           ; 1 bytes @ 0x0
  8329                           
  8330     0020                     ??_I2C1_MasterSendNack:	
  8331                           ; 1 bytes @ 0x0
  8332                           
  8333     0020                     ??_TxDeviceDisable:	
  8334                           ; 1 bytes @ 0x0
  8335                           
  8336     0020                     ??_check_error_modbus:	
  8337                           ; 1 bytes @ 0x0
  8338                           
  8339     0020                     ??_TxDeviceEnable:	
  8340                           ; 1 bytes @ 0x0
  8341                           
  8342     0020                     ??_putch:	
  8343                           ; 1 bytes @ 0x0
  8344                           
  8345     0020                     ??_ADCC_Initialize:	
  8346                           ; 1 bytes @ 0x0
  8347                           
  8348     0020                     ??_EUSART1_is_tx_ready:	
  8349                           ; 1 bytes @ 0x0
  8350                           
  8351     0020                     ??_EUSART1_is_tx_done:	
  8352                           ; 1 bytes @ 0x0
  8353                           
  8354     0020                     ??_EUSART1_Read:	
  8355                           ; 1 bytes @ 0x0
  8356                           
  8357     0020                     ??_EUSART1_Write:	
  8358                           ; 1 bytes @ 0x0
  8359                           
  8360     0020                     ??_UART_ClearBuffer:	
  8361                           ; 1 bytes @ 0x0
  8362                           
  8363     0020                     ??_FVR_IsOutputReady:	
  8364                           ; 1 bytes @ 0x0
  8365                           
  8366                           
  8367                           ; 1 bytes @ 0x0
  8368     0020                     	ds	1
  8369     0021                     ?_read_serial:
  8370     0021                     ?_write_serial:	
  8371                           ; 4 bytes @ 0x1
  8372                           
  8373     0021                     I2C1_Open@returnValue:	
  8374                           ; 4 bytes @ 0x1
  8375                           
  8376     0021                     read_serial@buf:	
  8377                           ; 1 bytes @ 0x1
  8378                           
  8379     0021                     write_serial@buf:	
  8380                           ; 2 bytes @ 0x1
  8381                           
  8382     0021                     ??_I2C1_DO_SEND_ADR_WRITE:	
  8383                           ; 2 bytes @ 0x1
  8384                           
  8385                           
  8386                           ; 1 bytes @ 0x1
  8387     0021                     	ds	1
  8388     0022                     ?_msg_state_reset:
  8389     0022                     ?_DATAEE_ReadWord:	
  8390                           ; 1 bytes @ 0x2
  8391                           
  8392     0022                     ADCC_GetSingleConversion@channel:	
  8393                           ; 2 bytes @ 0x2
  8394                           
  8395     0022                     I2C1_SetCallback@ptr:	
  8396                           ; 1 bytes @ 0x2
  8397                           
  8398     0022                     DATAEE_WriteByte@bData:	
  8399                           ; 1 bytes @ 0x2
  8400                           
  8401     0022                     handle_write_single_coil@coils:	
  8402                           ; 1 bytes @ 0x2
  8403                           
  8404     0022                     get_1@result:	
  8405                           ; 1 bytes @ 0x2
  8406                           
  8407     0022                     put_1@data:	
  8408                           ; 1 bytes @ 0x2
  8409                           
  8410     0022                     I2C1_SetBuffer@bufferSize:	
  8411                           ; 1 bytes @ 0x2
  8412                           
  8413     0022                     DATAEE_ReadWord@bAdd:	
  8414                           ; 2 bytes @ 0x2
  8415                           
  8416     0022                     handler_read_input_registers@quantity:	
  8417                           ; 2 bytes @ 0x2
  8418                           
  8419     0022                     handler_read_holding_registers@quantity:	
  8420                           ; 2 bytes @ 0x2
  8421                           
  8422     0022                     handle_write_single_register@registers:	
  8423                           ; 2 bytes @ 0x2
  8424                           
  8425     0022                     put_2@data:	
  8426                           ; 2 bytes @ 0x2
  8427                           
  8428     0022                     msg_state_reset@nmbs:	
  8429                           ; 2 bytes @ 0x2
  8430                           
  8431     0022                     m_memset@c:	
  8432                           ; 2 bytes @ 0x2
  8433                           
  8434     0022                     fputc@fp:	
  8435                           ; 2 bytes @ 0x2
  8436                           
  8437     0022                     nmbs_crc_calc@length:	
  8438                           ; 2 bytes @ 0x2
  8439                           
  8440     0022                     ??_EUSART1_SetRxInterruptHandler:	
  8441                           ; 4 bytes @ 0x2
  8442                           
  8443     0022                     ??_EUSART1_SetFramingErrorHandler:	
  8444                           ; 1 bytes @ 0x2
  8445                           
  8446     0022                     ??_EUSART1_SetOverrunErrorHandler:	
  8447                           ; 1 bytes @ 0x2
  8448                           
  8449     0022                     ??_EUSART1_SetErrorHandler:	
  8450                           ; 1 bytes @ 0x2
  8451                           
  8452     0022                     ??_TMR1_Initialize:	
  8453                           ; 1 bytes @ 0x2
  8454                           
  8455     0022                     ??_DATAEE_ReadByte:	
  8456                           ; 1 bytes @ 0x2
  8457                           
  8458     0022                     ??_TMR1_SetInterruptHandler:	
  8459                           ; 1 bytes @ 0x2
  8460                           
  8461     0022                     ??_adjustBMP280coeff:	
  8462                           ; 1 bytes @ 0x2
  8463                           
  8464     0022                     ??_ADCC_GetSingleConversion:	
  8465                           ; 1 bytes @ 0x2
  8466                           
  8467     0022                     ??_EUSART1_Initialize:	
  8468                           ; 1 bytes @ 0x2
  8469                           
  8470     0022                     ??_SYSTEM_Initialize:	
  8471                           ; 1 bytes @ 0x2
  8472                           
  8473     0022                     ??_get_1:	
  8474                           ; 1 bytes @ 0x2
  8475                           
  8476     0022                     ??_get_2:	
  8477                           ; 1 bytes @ 0x2
  8478                           
  8479     0022                     ??_msg_buf_reset:	
  8480                           ; 1 bytes @ 0x2
  8481                           
  8482                           
  8483                           ; 1 bytes @ 0x2
  8484     0022                     	ds	1
  8485     0023                     ?_getADCData:
  8486     0023                     DATAEE_WriteByte@GIEBitValue:	
  8487                           ; 2 bytes @ 0x3
  8488                           
  8489     0023                     handle_write_single_coil@unit_id:	
  8490                           ; 1 bytes @ 0x3
  8491                           
  8492     0023                     getADCData@sensorSelection:	
  8493                           ; 1 bytes @ 0x3
  8494                           
  8495     0023                     read_serial@count:	
  8496                           ; 2 bytes @ 0x3
  8497                           
  8498     0023                     write_serial@count:	
  8499                           ; 2 bytes @ 0x3
  8500                           
  8501     0023                     ??_I2C1_SetCallback:	
  8502                           ; 2 bytes @ 0x3
  8503                           
  8504     0023                     ??_DATAEE_WriteByte:	
  8505                           ; 1 bytes @ 0x3
  8506                           
  8507     0023                     ??_put_1:	
  8508                           ; 1 bytes @ 0x3
  8509                           
  8510                           
  8511                           ; 1 bytes @ 0x3
  8512     0023                     	ds	1
  8513     0024                     ?_DATAEE_WriteWord:
  8514     0024                     handler_read_input_registers@registers_out:	
  8515                           ; 1 bytes @ 0x4
  8516                           
  8517     0024                     handler_read_holding_registers@registers_out:	
  8518                           ; 1 bytes @ 0x4
  8519                           
  8520     0024                     handle_write_single_register@unit_id:	
  8521                           ; 1 bytes @ 0x4
  8522                           
  8523     0024                     DATAEE_WriteWord@bAdd:	
  8524                           ; 1 bytes @ 0x4
  8525                           
  8526     0024                     handle_write_single_coil@arg:	
  8527                           ; 2 bytes @ 0x4
  8528                           
  8529     0024                     m_memset@len:	
  8530                           ; 2 bytes @ 0x4
  8531                           
  8532     0024                     ??_I2C1_SetBuffer:	
  8533                           ; 2 bytes @ 0x4
  8534                           
  8535     0024                     ??_fputc:	
  8536                           ; 1 bytes @ 0x4
  8537                           
  8538     0024                     ??_setBaudRateEUSART1:	
  8539                           ; 1 bytes @ 0x4
  8540                           
  8541     0024                     ??_DATAEE_ReadWord:	
  8542                           ; 1 bytes @ 0x4
  8543                           
  8544     0024                     ??_put_2:	
  8545                           ; 1 bytes @ 0x4
  8546                           
  8547     0024                     ??_msg_state_reset:	
  8548                           ; 1 bytes @ 0x4
  8549                           
  8550                           
  8551                           ; 1 bytes @ 0x4
  8552     0024                     	ds	1
  8553     0025                     I2C1_SetCallback@idx:
  8554     0025                     handler_read_input_registers@unit_id:	
  8555                           ; 1 bytes @ 0x5
  8556                           
  8557     0025                     handler_read_holding_registers@unit_id:	
  8558                           ; 1 bytes @ 0x5
  8559                           
  8560     0025                     getADCData@result:	
  8561                           ; 1 bytes @ 0x5
  8562                           
  8563     0025                     handle_write_single_register@arg:	
  8564                           ; 2 bytes @ 0x5
  8565                           
  8566     0025                     read_serial@byte_timeout_ms:	
  8567                           ; 2 bytes @ 0x5
  8568                           
  8569     0025                     write_serial@byte_timeout_ms:	
  8570                           ; 4 bytes @ 0x5
  8571                           
  8572     0025                     ??_getADCData:	
  8573                           ; 4 bytes @ 0x5
  8574                           
  8575                           
  8576                           ; 1 bytes @ 0x5
  8577     0025                     	ds	1
  8578     0026                     ?_I2C1_SetDataCompleteCallback:
  8579     0026                     ?_I2C1_SetAddressNackCallback:	
  8580                           ; 1 bytes @ 0x6
  8581                           
  8582     0026                     ?_put_msg_header:	
  8583                           ; 1 bytes @ 0x6
  8584                           
  8585     0026                     I2C1_SetDataCompleteCallback@cb:	
  8586                           ; 1 bytes @ 0x6
  8587                           
  8588     0026                     I2C1_SetAddressNackCallback@cb:	
  8589                           ; 2 bytes @ 0x6
  8590                           
  8591     0026                     DATAEE_WriteWord@bData:	
  8592                           ; 2 bytes @ 0x6
  8593                           
  8594     0026                     handler_read_input_registers@arg:	
  8595                           ; 2 bytes @ 0x6
  8596                           
  8597     0026                     handler_read_holding_registers@arg:	
  8598                           ; 2 bytes @ 0x6
  8599                           
  8600     0026                     m_memset@p:	
  8601                           ; 2 bytes @ 0x6
  8602                           
  8603     0026                     put_msg_header@nmbs:	
  8604                           ; 2 bytes @ 0x6
  8605                           
  8606     0026                     ??_handle_write_single_coil:	
  8607                           ; 2 bytes @ 0x6
  8608                           
  8609     0026                     ??_m_memset:	
  8610                           ; 1 bytes @ 0x6
  8611                           
  8612     0026                     ??_nmbs_crc_calc:	
  8613                           ; 1 bytes @ 0x6
  8614                           
  8615                           
  8616                           ; 1 bytes @ 0x6
  8617     0026                     	ds	1
  8618     0027                     getADCData@channel:
  8619     0027                     ??_handle_write_single_register:	
  8620                           ; 1 bytes @ 0x7
  8621                           
  8622                           
  8623                           ; 1 bytes @ 0x7
  8624     0027                     	ds	1
  8625     0028                     ?_is_a_new_value:
  8626     0028                     ?_nmbs_create:	
  8627                           ; 1 bytes @ 0x8
  8628                           
  8629     0028                     I2C1_SetDataCompleteCallback@ptr:	
  8630                           ; 1 bytes @ 0x8
  8631                           
  8632     0028                     I2C1_SetAddressNackCallback@ptr:	
  8633                           ; 1 bytes @ 0x8
  8634                           
  8635     0028                     is_a_new_value@registers:	
  8636                           ; 2 bytes @ 0x8
  8637                           
  8638     0028                     nmbs_create@nmbs:	
  8639                           ; 2 bytes @ 0x8
  8640                           
  8641     0028                     put_msg_header@data_length:	
  8642                           ; 2 bytes @ 0x8
  8643                           
  8644     0028                     ??_handler_read_holding_registers:	
  8645                           ; 2 bytes @ 0x8
  8646                           
  8647     0028                     ??_handler_read_input_registers:	
  8648                           ; 1 bytes @ 0x8
  8649                           
  8650     0028                     ??_DATAEE_WriteWord:	
  8651                           ; 1 bytes @ 0x8
  8652                           
  8653                           
  8654                           ; 1 bytes @ 0x8
  8655     0028                     	ds	1
  8656     0029                     ?_rd1RegCompleteHandler:
  8657     0029                     ?_rd2RegCompleteHandler:	
  8658                           ; 1 bytes @ 0x9
  8659                           
  8660     0029                     ?_wr1RegCompleteHandler:	
  8661                           ; 1 bytes @ 0x9
  8662                           
  8663     0029                     ?_wr2RegCompleteHandler:	
  8664                           ; 1 bytes @ 0x9
  8665                           
  8666     0029                     ?_rdBlkRegCompleteHandler:	
  8667                           ; 1 bytes @ 0x9
  8668                           
  8669     0029                     ?_I2C1_CallbackReturnStop:	
  8670                           ; 1 bytes @ 0x9
  8671                           
  8672     0029                     ?_I2C1_CallbackReturnReset:	
  8673                           ; 1 bytes @ 0x9
  8674                           
  8675     0029                     ?_vfpfcnvrt:	
  8676                           ; 1 bytes @ 0x9
  8677                           
  8678     0029                     rd1RegCompleteHandler@ptr:	
  8679                           ; 1 bytes @ 0x9
  8680                           
  8681     0029                     rd2RegCompleteHandler@ptr:	
  8682                           ; 1 bytes @ 0x9
  8683                           
  8684     0029                     wr1RegCompleteHandler@ptr:	
  8685                           ; 1 bytes @ 0x9
  8686                           
  8687     0029                     wr2RegCompleteHandler@ptr:	
  8688                           ; 1 bytes @ 0x9
  8689                           
  8690     0029                     rdBlkRegCompleteHandler@ptr:	
  8691                           ; 1 bytes @ 0x9
  8692                           
  8693     0029                     I2C1_CallbackReturnStop@funPtr:	
  8694                           ; 1 bytes @ 0x9
  8695                           
  8696     0029                     I2C1_CallbackReturnReset@funPtr:	
  8697                           ; 1 bytes @ 0x9
  8698                           
  8699     0029                     DATAEE_ReadWord@low_byte:	
  8700                           ; 1 bytes @ 0x9
  8701                           
  8702     0029                     handle_write_single_register@server_registers:	
  8703                           ; 1 bytes @ 0x9
  8704                           
  8705     0029                     read_serial@arg:	
  8706                           ; 1 bytes @ 0x9
  8707                           
  8708     0029                     write_serial@arg:	
  8709                           ; 2 bytes @ 0x9
  8710                           
  8711     0029                     get_2@result:	
  8712                           ; 2 bytes @ 0x9
  8713                           
  8714     0029                     vfpfcnvrt@fp:	
  8715                           ; 2 bytes @ 0x9
  8716                           
  8717     0029                     ??_I2C1_SetDataCompleteCallback:	
  8718                           ; 2 bytes @ 0x9
  8719                           
  8720                           
  8721                           ; 1 bytes @ 0x9
  8722     0029                     	ds	1
  8723     002A                     ?_put_res_header:
  8724     002A                     DATAEE_ReadWord@high_byte:	
  8725                           ; 1 bytes @ 0xA
  8726                           
  8727     002A                     is_a_new_value@actual_regs:	
  8728                           ; 1 bytes @ 0xA
  8729                           
  8730     002A                     nmbs_create@platform_conf:	
  8731                           ; 2 bytes @ 0xA
  8732                           
  8733     002A                     put_res_header@nmbs:	
  8734                           ; 2 bytes @ 0xA
  8735                           
  8736     002A                     nmbs_crc_calc@i:	
  8737                           ; 2 bytes @ 0xA
  8738                           
  8739     002A                     ??_rd1RegCompleteHandler:	
  8740                           ; 4 bytes @ 0xA
  8741                           
  8742     002A                     ??_I2C1_SetAddressNackCallback:	
  8743                           ; 1 bytes @ 0xA
  8744                           
  8745     002A                     ??_rd2RegCompleteHandler:	
  8746                           ; 1 bytes @ 0xA
  8747                           
  8748     002A                     ??_wr1RegCompleteHandler:	
  8749                           ; 1 bytes @ 0xA
  8750                           
  8751     002A                     ??_wr2RegCompleteHandler:	
  8752                           ; 1 bytes @ 0xA
  8753                           
  8754     002A                     ??_rdBlkRegCompleteHandler:	
  8755                           ; 1 bytes @ 0xA
  8756                           
  8757     002A                     ??_I2C1_DO_TX:	
  8758                           ; 1 bytes @ 0xA
  8759                           
  8760     002A                     ??_I2C1_DO_RX:	
  8761                           ; 1 bytes @ 0xA
  8762                           
  8763     002A                     ??_I2C1_DO_TX_EMPTY:	
  8764                           ; 1 bytes @ 0xA
  8765                           
  8766     002A                     ??_I2C1_DO_ADDRESS_NACK:	
  8767                           ; 1 bytes @ 0xA
  8768                           
  8769     002A                     ??_I2C1_CallbackReturnStop:	
  8770                           ; 1 bytes @ 0xA
  8771                           
  8772     002A                     ??_I2C1_CallbackReturnReset:	
  8773                           ; 1 bytes @ 0xA
  8774                           
  8775     002A                     ??_put_msg_header:	
  8776                           ; 1 bytes @ 0xA
  8777                           
  8778                           
  8779                           ; 1 bytes @ 0xA
  8780     002A                     	ds	1
  8781     002B                     handler_read_input_registers@server_registers:
  8782     002B                     handler_read_holding_registers@server_registers:	
  8783                           ; 1 bytes @ 0xB
  8784                           
  8785     002B                     vfpfcnvrt@fmt:	
  8786                           ; 1 bytes @ 0xB
  8787                           
  8788     002B                     _handle_write_single_coil$2833:	
  8789                           ; 1 bytes @ 0xB
  8790                           
  8791     002B                     write_serial@number_of_byte_send:	
  8792                           ; 2 bytes @ 0xB
  8793                           
  8794     002B                     ??_read_serial:	
  8795                           ; 4 bytes @ 0xB
  8796                           
  8797     002B                     ??_write_serial:	
  8798                           ; 1 bytes @ 0xB
  8799                           
  8800                           
  8801                           ; 1 bytes @ 0xB
  8802     002B                     	ds	1
  8803     002C                     vfpfcnvrt@ap:
  8804     002C                     is_a_new_value@nmbs:	
  8805                           ; 1 bytes @ 0xC
  8806                           
  8807     002C                     handler_read_input_registers@i:	
  8808                           ; 2 bytes @ 0xC
  8809                           
  8810     002C                     handler_read_holding_registers@i:	
  8811                           ; 2 bytes @ 0xC
  8812                           
  8813     002C                     put_res_header@data_length:	
  8814                           ; 2 bytes @ 0xC
  8815                           
  8816     002C                     ??_I2C1_MasterFsm:	
  8817                           ; 2 bytes @ 0xC
  8818                           
  8819     002C                     ??_nmbs_create:	
  8820                           ; 1 bytes @ 0xC
  8821                           
  8822                           
  8823                           ; 1 bytes @ 0xC
  8824     002C                     	ds	1
  8825     002D                     handle_write_single_coil@server_coils:
  8826     002D                     ??_vfpfcnvrt:	
  8827                           ; 2 bytes @ 0xD
  8828                           
  8829                           
  8830                           ; 1 bytes @ 0xD
  8831     002D                     	ds	1
  8832     002E                     ?_nmbs_server_create:
  8833     002E                     I2C1_MasterOperation@read:	
  8834                           ; 1 bytes @ 0xE
  8835                           
  8836     002E                     nmbs_crc_calc@j:	
  8837                           ; 1 bytes @ 0xE
  8838                           
  8839     002E                     nmbs_server_create@nmbs:	
  8840                           ; 2 bytes @ 0xE
  8841                           
  8842     002E                     ??_I2C1_Poller:	
  8843                           ; 2 bytes @ 0xE
  8844                           
  8845     002E                     ??_is_a_new_value:	
  8846                           ; 1 bytes @ 0xE
  8847                           
  8848     002E                     ??_I2C1_MasterOperation:	
  8849                           ; 1 bytes @ 0xE
  8850                           
  8851     002E                     ??_put_res_header:	
  8852                           ; 1 bytes @ 0xE
  8853                           
  8854                           
  8855                           ; 1 bytes @ 0xE
  8856     002E                     	ds	1
  8857     002F                     I2C1_MasterOperation@returnValue:
  8858     002F                     read_serial@c:	
  8859                           ; 1 bytes @ 0xF
  8860                           
  8861     002F                     write_serial@i:	
  8862                           ; 1 bytes @ 0xF
  8863                           
  8864                           
  8865                           ; 2 bytes @ 0xF
  8866     002F                     	ds	1
  8867     0030                     ?_I2C1_WriteNBytes:
  8868     0030                     ?_I2C1_ReadNBytes:	
  8869                           ; 1 bytes @ 0x10
  8870                           
  8871     0030                     I2C1_WriteNBytes@data:	
  8872                           ; 1 bytes @ 0x10
  8873                           
  8874     0030                     I2C1_ReadNBytes@data:	
  8875                           ; 1 bytes @ 0x10
  8876                           
  8877     0030                     nmbs_server_create@address_rtu:	
  8878                           ; 1 bytes @ 0x10
  8879                           
  8880     0030                     nmbs_crc_calc@crc:	
  8881                           ; 1 bytes @ 0x10
  8882                           
  8883     0030                     read_serial@charCount:	
  8884                           ; 2 bytes @ 0x10
  8885                           
  8886     0030                     ??_I2C1_MasterWrite:	
  8887                           ; 4 bytes @ 0x10
  8888                           
  8889     0030                     ??_I2C1_MasterRead:	
  8890                           ; 1 bytes @ 0x10
  8891                           
  8892                           
  8893                           ; 1 bytes @ 0x10
  8894     0030                     	ds	1
  8895     0031                     ?_send:
  8896     0031                     ?_vfprintf:	
  8897                           ; 1 bytes @ 0x11
  8898                           
  8899     0031                     I2C1_WriteNBytes@len:	
  8900                           ; 2 bytes @ 0x11
  8901                           
  8902     0031                     I2C1_ReadNBytes@len:	
  8903                           ; 2 bytes @ 0x11
  8904                           
  8905     0031                     send@nmbs:	
  8906                           ; 2 bytes @ 0x11
  8907                           
  8908     0031                     nmbs_server_create@platform_conf:	
  8909                           ; 2 bytes @ 0x11
  8910                           
  8911     0031                     vfprintf@fp:	
  8912                           ; 2 bytes @ 0x11
  8913                           
  8914                           
  8915                           ; 2 bytes @ 0x11
  8916     0031                     	ds	2
  8917     0033                     I2C1_WriteNBytes@address:
  8918     0033                     I2C1_ReadNBytes@address:	
  8919                           ; 1 bytes @ 0x13
  8920                           
  8921     0033                     send@count:	
  8922                           ; 1 bytes @ 0x13
  8923                           
  8924     0033                     nmbs_server_create@callbacks:	
  8925                           ; 2 bytes @ 0x13
  8926                           
  8927     0033                     vfprintf@fmt:	
  8928                           ; 2 bytes @ 0x13
  8929                           
  8930     0033                     ??_I2C1_WriteNBytes:	
  8931                           ; 2 bytes @ 0x13
  8932                           
  8933     0033                     ??_I2C1_ReadNBytes:	
  8934                           ; 1 bytes @ 0x13
  8935                           
  8936                           
  8937                           ; 1 bytes @ 0x13
  8938     0033                     	ds	1
  8939     0034                     ?_writeBMP280:
  8940     0034                     ?_recv:	
  8941                           ; 1 bytes @ 0x14
  8942                           
  8943     0034                     ?_getSHTC3Data:	
  8944                           ; 1 bytes @ 0x14
  8945                           
  8946     0034                     readBMP280@pRxbuffer:	
  8947                           ; 2 bytes @ 0x14
  8948                           
  8949     0034                     writeBMP280@regdata:	
  8950                           ; 1 bytes @ 0x14
  8951                           
  8952     0034                     recv@nmbs:	
  8953                           ; 1 bytes @ 0x14
  8954                           
  8955     0034                     ??_readBMP280:	
  8956                           ; 2 bytes @ 0x14
  8957                           
  8958                           
  8959                           ; 1 bytes @ 0x14
  8960     0034                     	ds	1
  8961     0035                     readBMP280@pTxbuffer:
  8962     0035                     writeBMP280@regadd:	
  8963                           ; 1 bytes @ 0x15
  8964                           
  8965     0035                     vfprintf@ap:	
  8966                           ; 1 bytes @ 0x15
  8967                           
  8968     0035                     ??_nmbs_server_create:	
  8969                           ; 1 bytes @ 0x15
  8970                           
  8971     0035                     ??_writeBMP280:	
  8972                           ; 1 bytes @ 0x15
  8973                           
  8974     0035                     ??_send:	
  8975                           ; 1 bytes @ 0x15
  8976                           
  8977                           
  8978                           ; 1 bytes @ 0x15
  8979     0035                     	ds	1
  8980     0036                     readBMP280@regadd:
  8981     0036                     writeBMP280@pTxbuffer:	
  8982                           ; 1 bytes @ 0x16
  8983                           
  8984     0036                     nmbs_server_create@ret:	
  8985                           ; 1 bytes @ 0x16
  8986                           
  8987     0036                     recv@count:	
  8988                           ; 1 bytes @ 0x16
  8989                           
  8990     0036                     ??_getSHTC3Data:	
  8991                           ; 2 bytes @ 0x16
  8992                           
  8993     0036                     ??_vfprintf:	
  8994                           ; 1 bytes @ 0x16
  8995                           
  8996                           
  8997                           ; 1 bytes @ 0x16
  8998     0036                     	ds	1
  8999     0037                     readBMP280@ret:
  9000     0037                     writeBMP280@Txbuffer:	
  9001                           ; 1 bytes @ 0x17
  9002                           
  9003     0037                     vfprintf@cfmt:	
  9004                           ; 2 bytes @ 0x17
  9005                           
  9006                           
  9007                           ; 2 bytes @ 0x17
  9008     0037                     	ds	1
  9009     0038                     ?_readBMP280coeff:
  9010     0038                     recv@ret:	
  9011                           ; 1 bytes @ 0x18
  9012                           
  9013     0038                     readBMP280coeff@coeff_buff:	
  9014                           ; 1 bytes @ 0x18
  9015                           
  9016     0038                     ??_recv:	
  9017                           ; 2 bytes @ 0x18
  9018                           
  9019                           
  9020                           ; 1 bytes @ 0x18
  9021     0038                     	ds	1
  9022     0039                     ?_recv_msg_footer:
  9023     0039                     ?_recv_msg_header:	
  9024                           ; 1 bytes @ 0x19
  9025                           
  9026     0039                     ?_printf:	
  9027                           ; 1 bytes @ 0x19
  9028                           
  9029     0039                     ?_getBMP280Data:	
  9030                           ; 2 bytes @ 0x19
  9031                           
  9032     0039                     getSHTC3Data@result:	
  9033                           ; 3 bytes @ 0x19
  9034                           
  9035     0039                     recv_msg_footer@nmbs:	
  9036                           ; 2 bytes @ 0x19
  9037                           
  9038     0039                     recv_msg_header@nmbs:	
  9039                           ; 2 bytes @ 0x19
  9040                           
  9041     0039                     printf@fmt:	
  9042                           ; 2 bytes @ 0x19
  9043                           
  9044     0039                     ??_InitBMP280:	
  9045                           ; 2 bytes @ 0x19
  9046                           
  9047                           
  9048                           ; 1 bytes @ 0x19
  9049     0039                     	ds	1
  9050     003A                     send@ret:
  9051     003A                     ??_readBMP280coeff:	
  9052                           ; 4 bytes @ 0x1A
  9053                           
  9054                           
  9055                           ; 1 bytes @ 0x1A
  9056     003A                     	ds	1
  9057     003B                     readBMP280coeff@Txbuffer:
  9058     003B                     recv_msg_header@first_byte_received:	
  9059                           ; 1 bytes @ 0x1B
  9060                           
  9061     003B                     printf@ap:	
  9062                           ; 1 bytes @ 0x1B
  9063                           
  9064     003B                     getSHTC3Data@Rxbuffer:	
  9065                           ; 1 bytes @ 0x1B
  9066                           
  9067     003B                     ??_printf:	
  9068                           ; 2 bytes @ 0x1B
  9069                           
  9070     003B                     ??_recv_msg_footer:	
  9071                           ; 1 bytes @ 0x1B
  9072                           
  9073                           
  9074                           ; 1 bytes @ 0x1B
  9075     003B                     	ds	1
  9076     003C                     readBMP280coeff@i:
  9077     003C                     ??_getBMP280Data:	
  9078                           ; 1 bytes @ 0x1C
  9079                           
  9080     003C                     ??_recv_msg_header:	
  9081                           ; 1 bytes @ 0x1C
  9082                           
  9083                           
  9084                           ; 1 bytes @ 0x1C
  9085     003C                     	ds	1
  9086     003D                     ?_default_values_register:
  9087     003D                     getSHTC3Data@Txbuffer:	
  9088                           ; 1 bytes @ 0x1D
  9089                           
  9090     003D                     default_values_register@registers:	
  9091                           ; 2 bytes @ 0x1D
  9092                           
  9093     003D                     recv_msg_footer@crc:	
  9094                           ; 2 bytes @ 0x1D
  9095                           
  9096                           
  9097                           ; 2 bytes @ 0x1D
  9098     003D                     	ds	1
  9099     003E                     ?_send_msg:
  9100     003E                     send_msg@nmbs:	
  9101                           ; 1 bytes @ 0x1E
  9102                           
  9103                           
  9104                           ; 2 bytes @ 0x1E
  9105     003E                     	ds	1
  9106     003F                     getSHTC3Data@pbuffer:
  9107     003F                     recv_msg_header@err:	
  9108                           ; 1 bytes @ 0x1F
  9109                           
  9110     003F                     recv_msg_footer@recv_crc:	
  9111                           ; 1 bytes @ 0x1F
  9112                           
  9113     003F                     getBMP280Data@Rxbuffer:	
  9114                           ; 2 bytes @ 0x1F
  9115                           
  9116     003F                     ??_default_values_register:	
  9117                           ; 3 bytes @ 0x1F
  9118                           
  9119                           
  9120                           ; 1 bytes @ 0x1F
  9121     003F                     	ds	1
  9122     0040                     ?_recv_req_header:
  9123     0040                     recv_req_header@nmbs:	
  9124                           ; 1 bytes @ 0x20
  9125                           
  9126     0040                     ??_send_msg:	
  9127                           ; 2 bytes @ 0x20
  9128                           
  9129                           
  9130                           ; 1 bytes @ 0x20
  9131     0040                     	ds	1
  9132     0041                     recv_msg_footer@err:
  9133                           
  9134                           ; 1 bytes @ 0x21
  9135     0041                     	ds	1
  9136     0042                     ?_recv_res_header:
  9137     0042                     getBMP280Data@Txbuffer:	
  9138                           ; 1 bytes @ 0x22
  9139                           
  9140     0042                     recv_req_header@first_byte_received:	
  9141                           ; 1 bytes @ 0x22
  9142                           
  9143     0042                     send_msg@crc:	
  9144                           ; 1 bytes @ 0x22
  9145                           
  9146     0042                     recv_res_header@nmbs:	
  9147                           ; 2 bytes @ 0x22
  9148                           
  9149                           
  9150                           ; 2 bytes @ 0x22
  9151     0042                     	ds	1
  9152     0043                     getBMP280Data@param:
  9153     0043                     recv_req_header@err:	
  9154                           ; 1 bytes @ 0x23
  9155                           
  9156     0043                     ??_recv_req_header:	
  9157                           ; 1 bytes @ 0x23
  9158                           
  9159                           
  9160                           ; 1 bytes @ 0x23
  9161     0043                     	ds	1
  9162     0044                     send_msg@err:
  9163     0044                     getBMP280Data@i:	
  9164                           ; 1 bytes @ 0x24
  9165                           
  9166     0044                     ??_recv_res_header:	
  9167                           ; 2 bytes @ 0x24
  9168                           
  9169                           
  9170                           ; 1 bytes @ 0x24
  9171     0044                     	ds	1
  9172     0045                     ?_send_exception_msg:
  9173     0045                     send_exception_msg@nmbs:	
  9174                           ; 1 bytes @ 0x25
  9175                           
  9176                           
  9177                           ; 2 bytes @ 0x25
  9178     0045                     	ds	1
  9179     0046                     getBMP280Data@i_2696:
  9180     0046                     recv_res_header@req_transaction_id:	
  9181                           ; 1 bytes @ 0x26
  9182                           
  9183                           
  9184                           ; 2 bytes @ 0x26
  9185     0046                     	ds	1
  9186     0047                     send_exception_msg@exception:
  9187     0047                     getBMP280Data@ret:	
  9188                           ; 1 bytes @ 0x27
  9189                           
  9190                           
  9191                           ; 3 bytes @ 0x27
  9192     0047                     	ds	1
  9193     0048                     recv_res_header@req_unit_id:
  9194     0048                     ??_send_exception_msg:	
  9195                           ; 1 bytes @ 0x28
  9196                           
  9197                           
  9198                           ; 1 bytes @ 0x28
  9199     0048                     	ds	1
  9200     0049                     recv_res_header@first_byte_received:
  9201                           
  9202                           ; 1 bytes @ 0x29
  9203     0049                     	ds	1
  9204     004A                     recv_res_header@req_fc:
  9205                           
  9206                           ; 1 bytes @ 0x2A
  9207     004A                     	ds	1
  9208     004B                     recv_res_header@exception:
  9209                           
  9210                           ; 1 bytes @ 0x2B
  9211     004B                     	ds	1
  9212     004C                     recv_res_header@err:
  9213                           
  9214                           ; 1 bytes @ 0x2C
  9215     004C                     	ds	1
  9216     004D                     ?_recv_read_registers_res:
  9217     004D                     ?_recv_write_single_coil_res:	
  9218                           ; 1 bytes @ 0x2D
  9219                           
  9220     004D                     ?_recv_write_single_register_res:	
  9221                           ; 1 bytes @ 0x2D
  9222                           
  9223     004D                     recv_read_registers_res@nmbs:	
  9224                           ; 1 bytes @ 0x2D
  9225                           
  9226     004D                     recv_write_single_coil_res@nmbs:	
  9227                           ; 2 bytes @ 0x2D
  9228                           
  9229     004D                     recv_write_single_register_res@nmbs:	
  9230                           ; 2 bytes @ 0x2D
  9231                           
  9232                           
  9233                           ; 2 bytes @ 0x2D
  9234     004D                     	ds	2
  9235     004F                     recv_read_registers_res@quantity:
  9236     004F                     recv_write_single_coil_res@address:	
  9237                           ; 2 bytes @ 0x2F
  9238                           
  9239     004F                     recv_write_single_register_res@address:	
  9240                           ; 2 bytes @ 0x2F
  9241                           
  9242                           
  9243                           ; 2 bytes @ 0x2F
  9244     004F                     	ds	2
  9245     0051                     recv_read_registers_res@registers:
  9246     0051                     recv_write_single_coil_res@value_req:	
  9247                           ; 2 bytes @ 0x31
  9248                           
  9249     0051                     recv_write_single_register_res@value_req:	
  9250                           ; 2 bytes @ 0x31
  9251                           
  9252                           
  9253                           ; 2 bytes @ 0x31
  9254     0051                     	ds	2
  9255     0053                     ?_handle_write_single_register@nanomodbus$F3873:
  9256     0053                     recv_write_single_coil_res@address_res:	
  9257                           ; 1 bytes @ 0x33
  9258                           
  9259     0053                     handle_write_single_register@nanomodbus$F3873@nmbs:	
  9260                           ; 2 bytes @ 0x33
  9261                           
  9262     0053                     ??_recv_read_registers_res:	
  9263                           ; 2 bytes @ 0x33
  9264                           
  9265     0053                     ??_recv_write_single_coil_res:	
  9266                           ; 1 bytes @ 0x33
  9267                           
  9268     0053                     ??_recv_write_single_register_res:	
  9269                           ; 1 bytes @ 0x33
  9270                           
  9271                           
  9272                           ; 1 bytes @ 0x33
  9273     0053                     	ds	2
  9274     0055                     recv_write_single_coil_res@value_res:
  9275     0055                     ??_handle_write_single_register@nanomodbus$F3873:	
  9276                           ; 2 bytes @ 0x35
  9277                           
  9278                           
  9279                           ; 1 bytes @ 0x35
  9280     0055                     	ds	2
  9281     0057                     recv_write_single_coil_res@err:
  9282     0057                     recv_read_registers_res@reg:	
  9283                           ; 1 bytes @ 0x37
  9284                           
  9285     0057                     handle_write_single_register@nanomodbus$F3873@address:	
  9286                           ; 2 bytes @ 0x37
  9287                           
  9288                           
  9289                           ; 2 bytes @ 0x37
  9290     0057                     	ds	1
  9291     0058                     ?_handle_write_single_coil@nanomodbus$F3828:
  9292     0058                     handle_write_single_coil@nanomodbus$F3828@nmbs:	
  9293                           ; 1 bytes @ 0x38
  9294                           
  9295                           
  9296                           ; 2 bytes @ 0x38
  9297     0058                     	ds	1
  9298     0059                     recv_read_registers_res@i:
  9299     0059                     handle_write_single_register@nanomodbus$F3873@value:	
  9300                           ; 2 bytes @ 0x39
  9301                           
  9302                           
  9303                           ; 2 bytes @ 0x39
  9304     0059                     	ds	1
  9305     005A                     ??_handle_write_single_coil@nanomodbus$F3828:
  9306                           
  9307                           ; 1 bytes @ 0x3A
  9308     005A                     	ds	1
  9309     005B                     recv_read_registers_res@registers_bytes:
  9310                           
  9311                           ; 1 bytes @ 0x3B
  9312     005B                     	ds	1
  9313     005C                     recv_read_registers_res@err:
  9314     005C                     handle_write_single_coil@nanomodbus$F3828@address:	
  9315                           ; 1 bytes @ 0x3C
  9316                           
  9317                           
  9318                           ; 2 bytes @ 0x3C
  9319     005C                     	ds	1
  9320     005D                     ?_handle_read_registers:
  9321     005D                     handle_read_registers@nmbs:	
  9322                           ; 1 bytes @ 0x3D
  9323                           
  9324                           
  9325                           ; 2 bytes @ 0x3D
  9326     005D                     	ds	1
  9327     005E                     handle_write_single_coil@nanomodbus$F3828@value:
  9328                           
  9329                           ; 2 bytes @ 0x3E
  9330     005E                     	ds	1
  9331     005F                     handle_read_registers@callback:
  9332                           
  9333                           ; 2 bytes @ 0x3F
  9334     005F                     	ds	1
  9335     0060                     handle_write_single_coil@nanomodbus$F3828@err:
  9336                           
  9337                           ; 1 bytes @ 0x40
  9338     0060                     	ds	1
  9339     0061                     ??_handle_read_registers:
  9340                           
  9341                           ; 1 bytes @ 0x41
  9342     0061                     	ds	8
  9343     0069                     ?_handle_read_holding_registers:
  9344     0069                     ?_handle_read_input_registers:	
  9345                           ; 1 bytes @ 0x49
  9346                           
  9347     0069                     handle_read_holding_registers@nmbs:	
  9348                           ; 1 bytes @ 0x49
  9349                           
  9350     0069                     handle_read_input_registers@nmbs:	
  9351                           ; 2 bytes @ 0x49
  9352                           
  9353                           
  9354                           ; 2 bytes @ 0x49
  9355     0069                     	ds	2
  9356     006B                     ?_handle_req_fc:
  9357     006B                     handle_req_fc@nmbs:	
  9358                           ; 1 bytes @ 0x4B
  9359                           
  9360     006B                     ??_handle_read_holding_registers:	
  9361                           ; 2 bytes @ 0x4B
  9362                           
  9363     006B                     ??_handle_read_input_registers:	
  9364                           ; 1 bytes @ 0x4B
  9365                           
  9366                           
  9367                           ; 1 bytes @ 0x4B
  9368     006B                     	ds	2
  9369     006D                     handle_req_fc@err:
  9370     006D                     ??_handle_req_fc:	
  9371                           ; 1 bytes @ 0x4D
  9372                           
  9373                           
  9374                           ; 1 bytes @ 0x4D
  9375     006D                     	ds	1
  9376     006E                     ?_nmbs_server_poll:
  9377     006E                     nmbs_server_poll@nmbs:	
  9378                           ; 1 bytes @ 0x4E
  9379                           
  9380                           
  9381                           ; 2 bytes @ 0x4E
  9382     006E                     	ds	2
  9383     0070                     ??_nmbs_server_poll:
  9384                           
  9385                           	psect	maintext
  9386     0074                     __pmaintext:	
  9387                           ; 1 bytes @ 0x50
  9388 ;;
  9389 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  9390 ;;
  9391 ;; *************** function _main *****************
  9392 ;; Defined at:
  9393 ;;		line 87 in file "main.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;		None
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;  nmbs           76    0[BANK9 ] struct nmbs_t
  9398 ;;  registers      45    0[BANK4 ] struct .
  9399 ;;  callbacks       9    5[BANK2 ] struct nmbs_callbacks
  9400 ;;  platform_con    7    0[BANK3 ] struct nmbs_platform_con
  9401 ;;  packet          6    0        struct .
  9402 ;;  actual_regs     4    0[BANK2 ] struct .
  9403 ;;  err             1    4[BANK2 ] enum E10966
  9404 ;;  is_in_memory    1   77[BANK1 ] unsigned char 
  9405 ;; Return value:  Size  Location     Type
  9406 ;;                  1    wreg      void 
  9407 ;; Registers used:
  9408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9409 ;; Tracked objects:
  9410 ;;		On entry : B3F/0
  9411 ;;		On exit  : 3F/0
  9412 ;;		Unchanged: 0/0
  9413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;      Locals:         0       0       1      14       7      45       0       0       0       0      76       0       
      +0       0
  9416 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Totals:         0       0       4      14       7      45       0       0       0       0      76       0       
      +0       0
  9418 ;;Total ram usage:      146 bytes
  9419 ;; Hardware stack levels required when called: 17
  9420 ;; This function calls:
  9421 ;;		_DATAEE_ReadByte
  9422 ;;		_DATAEE_ReadWord
  9423 ;;		_DATAEE_WriteWord
  9424 ;;		_FVR_IsOutputReady
  9425 ;;		_InitBMP280
  9426 ;;		_SYSTEM_Initialize
  9427 ;;		_TxDeviceDisable
  9428 ;;		_UART_ClearBuffer
  9429 ;;		_check_error_modbus
  9430 ;;		_default_values_register
  9431 ;;		_getADCData
  9432 ;;		_getBMP280Data
  9433 ;;		_getSHTC3Data
  9434 ;;		_is_a_new_value
  9435 ;;		_m_memset
  9436 ;;		_nmbs_server_create
  9437 ;;		_nmbs_server_poll
  9438 ;;		_printf
  9439 ;;		_setBaudRateEUSART1
  9440 ;; This function is called by:
  9441 ;;		Startup code after reset
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445     0074                     _main:	
  9446                           ;psect for function _main
  9447                           
  9448                           
  9449                           ;main.c: 89:     cmd_packet_t packet;;main.c: 92:     SYSTEM_Initialize();
  9450                           
  9451                           ;incstack = 0
  9452 ;; hardware stack exceeded
  9453                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9454     0074  3193  238C  3180   	fcall	_SYSTEM_Initialize
  9455                           
  9456                           ;main.c: 93:     TxDeviceDisable();
  9457     0077  3191  2123  3180   	fcall	_TxDeviceDisable
  9458                           
  9459                           ;main.c: 94:     (INTCONbits.GIE = 1);
  9460     007A  178B               	bsf	11,7	;volatile
  9461                           
  9462                           ;main.c: 95:     (INTCONbits.PEIE = 1);
  9463     007B  170B               	bsf	11,6	;volatile
  9464                           
  9465                           ;main.c: 96:     InitBMP280();
  9466     007C  3192  2227  3180   	fcall	_InitBMP280
  9467     007F                     l8239:	
  9468                           ;main.c: 98:     while(!FVR_IsOutputReady());
  9469                           
  9470     007F  3191  2174  3180   	fcall	_FVR_IsOutputReady
  9471     0082  3A00               	xorlw	0
  9472     0083  1903               	skipnz
  9473     0084  287F               	goto	l8239
  9474                           
  9475                           ;main.c: 100:     mod_bus_registers registers;;main.c: 101:     default_values_register(
      +                          &registers);
  9476     0085  3020               	movlw	low main@registers
  9477     0086  0140               	movlb	0	; select bank0
  9478     0087  00BD               	movwf	default_values_register@registers
  9479     0088  3002               	movlw	high main@registers
  9480     0089  00BE               	movwf	default_values_register@registers+1
  9481     008A  318B  233C  3180   	fcall	_default_values_register
  9482                           
  9483                           ;main.c: 103:     uint8_t is_in_memory = DATAEE_ReadByte(0x7001);
  9484     008D  3001               	movlw	1
  9485     008E  0140               	movlb	0	; select bank0
  9486     008F  00A0               	movwf	DATAEE_ReadByte@bAdd
  9487     0090  3070               	movlw	112
  9488     0091  00A1               	movwf	DATAEE_ReadByte@bAdd+1
  9489     0092  3192  2264  3180   	fcall	_DATAEE_ReadByte
  9490     0095  0141               	movlb	1	; select bank1
  9491     0096  00ED               	movwf	main@is_in_memory^(0+128)
  9492                           
  9493                           ;main.c: 105:     if (is_in_memory == 0x00)
  9494     0097  086D               	movf	main@is_in_memory^(0+128),w
  9495     0098  1D03               	btfss	3,2
  9496     0099  28B9               	goto	l8249
  9497                           
  9498                           ;main.c: 106:     {;main.c: 107:         registers.server_holding_register.addr_slave = 
      +                          DATAEE_ReadWord(0x7002);
  9499     009A  3002               	movlw	2
  9500     009B  0140               	movlb	0	; select bank0
  9501     009C  00A2               	movwf	DATAEE_ReadWord@bAdd
  9502     009D  3070               	movlw	112
  9503     009E  00A3               	movwf	DATAEE_ReadWord@bAdd+1
  9504     009F  3195  2524  3180   	fcall	_DATAEE_ReadWord
  9505     00A2  0823               	movf	?_DATAEE_ReadWord+1,w
  9506     00A3  0144               	movlb	4	; select bank4
  9507     00A4  00CA               	movwf	((main@registers+1)^(0+512)+41)
  9508     00A5  0140               	movlb	0	; select bank0
  9509     00A6  0822               	movf	?_DATAEE_ReadWord,w
  9510     00A7  0144               	movlb	4	; select bank4
  9511     00A8  00C9               	movwf	(main@registers^(0+512)+41)
  9512                           
  9513                           ;main.c: 108:         registers.server_holding_register.baudrate = DATAEE_ReadWord(0x700
      +                          4);
  9514     00A9  3004               	movlw	4
  9515     00AA  0140               	movlb	0	; select bank0
  9516     00AB  00A2               	movwf	DATAEE_ReadWord@bAdd
  9517     00AC  3070               	movlw	112
  9518     00AD  00A3               	movwf	DATAEE_ReadWord@bAdd+1
  9519     00AE  3195  2524  3180   	fcall	_DATAEE_ReadWord
  9520     00B1  0823               	movf	?_DATAEE_ReadWord+1,w
  9521     00B2  0144               	movlb	4	; select bank4
  9522     00B3  00CC               	movwf	((main@registers+1)^(0+512)+43)
  9523     00B4  0140               	movlb	0	; select bank0
  9524     00B5  0822               	movf	?_DATAEE_ReadWord,w
  9525     00B6  0144               	movlb	4	; select bank4
  9526     00B7  00CB               	movwf	(main@registers^(0+512)+43)
  9527                           
  9528                           ;main.c: 109:     }
  9529     00B8  28D8               	goto	l8251
  9530     00B9                     l8249:
  9531                           
  9532                           ;main.c: 111:     {;main.c: 112:         DATAEE_WriteWord(0x7002,registers.server_holdin
      +                          g_register.addr_slave);
  9533     00B9  3002               	movlw	2
  9534     00BA  0140               	movlb	0	; select bank0
  9535     00BB  00A4               	movwf	DATAEE_WriteWord@bAdd
  9536     00BC  3070               	movlw	112
  9537     00BD  00A5               	movwf	DATAEE_WriteWord@bAdd+1
  9538     00BE  0144               	movlb	4	; select bank4
  9539     00BF  084A               	movf	((main@registers+1)^(0+512)+41),w
  9540     00C0  0140               	movlb	0	; select bank0
  9541     00C1  00A7               	movwf	DATAEE_WriteWord@bData+1
  9542     00C2  0144               	movlb	4	; select bank4
  9543     00C3  0849               	movf	(main@registers^(0+512)+41),w
  9544     00C4  0140               	movlb	0	; select bank0
  9545     00C5  00A6               	movwf	DATAEE_WriteWord@bData
  9546     00C6  3193  234C  3180   	fcall	_DATAEE_WriteWord
  9547                           
  9548                           ;main.c: 113:         DATAEE_WriteWord(0x7004,registers.server_holding_register.baudrate
      +                          );
  9549     00C9  3004               	movlw	4
  9550     00CA  00A4               	movwf	DATAEE_WriteWord@bAdd
  9551     00CB  3070               	movlw	112
  9552     00CC  00A5               	movwf	DATAEE_WriteWord@bAdd+1
  9553     00CD  0144               	movlb	4	; select bank4
  9554     00CE  084C               	movf	((main@registers+1)^(0+512)+43),w
  9555     00CF  0140               	movlb	0	; select bank0
  9556     00D0  00A7               	movwf	DATAEE_WriteWord@bData+1
  9557     00D1  0144               	movlb	4	; select bank4
  9558     00D2  084B               	movf	(main@registers^(0+512)+43),w
  9559     00D3  0140               	movlb	0	; select bank0
  9560     00D4  00A6               	movwf	DATAEE_WriteWord@bData
  9561     00D5  3193  234C  3180   	fcall	_DATAEE_WriteWord
  9562     00D8                     l8251:
  9563                           
  9564                           ;main.c: 115:     setBaudRateEUSART1(registers.server_holding_register.baudrate);
  9565     00D8  0144               	movlb	4	; select bank4
  9566     00D9  084B               	movf	(main@registers^(0+512)+43),w
  9567     00DA  0140               	movlb	0	; select bank0
  9568     00DB  00A0               	movwf	setBaudRateEUSART1@baudRate
  9569     00DC  0144               	movlb	4	; select bank4
  9570     00DD  084C               	movf	((main@registers+1)^(0+512)+43),w
  9571     00DE  0140               	movlb	0	; select bank0
  9572     00DF  00A1               	movwf	setBaudRateEUSART1@baudRate+1
  9573     00E0  01A2               	clrf	setBaudRateEUSART1@baudRate+2
  9574     00E1  01A3               	clrf	setBaudRateEUSART1@baudRate+3
  9575     00E2  3187  2754  3180   	fcall	_setBaudRateEUSART1
  9576                           
  9577                           ;main.c: 117:     nmbs_t nmbs;;main.c: 119:     nmbs_platform_conf platform_conf;;main.c
      +                          : 120:     platform_conf.transport = NMBS_TRANSPORT_RTU;
  9578     00E5  3001               	movlw	1
  9579     00E6  0143               	movlb	3	; select bank3
  9580     00E7  00A0               	movwf	main@platform_conf^(0+384)
  9581                           
  9582                           ;main.c: 121:     platform_conf.read = read_serial;
  9583     00E8  3029               	movlw	low _read_serial
  9584     00E9  00A1               	movwf	(main@platform_conf^(0+384)+1)
  9585     00EA  3008               	movlw	high _read_serial
  9586     00EB  00A2               	movwf	(main@platform_conf^(0+384)+2)
  9587                           
  9588                           ;main.c: 122:     platform_conf.write = write_serial;
  9589     00EC  3022               	movlw	low _write_serial
  9590     00ED  00A3               	movwf	(main@platform_conf^(0+384)+3)
  9591     00EE  300A               	movlw	high _write_serial
  9592     00EF  00A4               	movwf	(main@platform_conf^(0+384)+4)
  9593                           
  9594                           ;main.c: 123:     platform_conf.arg = &(registers);
  9595     00F0  3020               	movlw	low main@registers
  9596     00F1  00A5               	movwf	(main@platform_conf^(0+384)+5)
  9597     00F2  3002               	movlw	high main@registers
  9598     00F3  00A6               	movwf	(main@platform_conf^(0+384)+6)
  9599                           
  9600                           ;main.c: 125:     nmbs_callbacks callbacks;;main.c: 126:     callbacks.read_holding_regi
      +                          sters = handler_read_holding_registers;
  9601     00F4  30DE               	movlw	low _handler_read_holding_registers
  9602     00F5  0142               	movlb	2	; select bank2
  9603     00F6  00E1               	movwf	main@callbacks^(0+256)
  9604     00F7  3009               	movlw	high _handler_read_holding_registers
  9605     00F8  00E2               	movwf	(main@callbacks^(0+256)+1)
  9606                           
  9607                           ;main.c: 127:     callbacks.read_input_registers = handler_read_input_registers;
  9608     00F9  309A               	movlw	low _handler_read_input_registers
  9609     00FA  00E3               	movwf	(main@callbacks^(0+256)+2)
  9610     00FB  3009               	movlw	high _handler_read_input_registers
  9611     00FC  00E4               	movwf	(main@callbacks^(0+256)+3)
  9612                           
  9613                           ;main.c: 129:     callbacks.write_single_coil = handle_write_single_coil;
  9614     00FD  309C               	movlw	low _handle_write_single_coil
  9615     00FE  00E5               	movwf	(main@callbacks^(0+256)+4)
  9616     00FF  300E               	movlw	high _handle_write_single_coil
  9617     0100  00E6               	movwf	(main@callbacks^(0+256)+5)
  9618                           
  9619                           ;main.c: 130:     callbacks.write_single_register = handle_write_single_register;
  9620     0101  30B5               	movlw	low _handle_write_single_register
  9621     0102  00E7               	movwf	(main@callbacks^(0+256)+6)
  9622     0103  3015               	movlw	high _handle_write_single_register
  9623     0104  00E8               	movwf	(main@callbacks^(0+256)+7)
  9624                           
  9625                           ;main.c: 132:     nmbs_error err = nmbs_server_create(&nmbs, registers.server_holding_re
      +                          gister.addr_slave, &platform_conf, &callbacks);
  9626     0105  30A0               	movlw	low main@nmbs
  9627     0106  0140               	movlb	0	; select bank0
  9628     0107  00AE               	movwf	nmbs_server_create@nmbs
  9629     0108  3004               	movlw	high main@nmbs
  9630     0109  00AF               	movwf	nmbs_server_create@nmbs+1
  9631     010A  0144               	movlb	4	; select bank4
  9632     010B  0849               	movf	(main@registers^(0+512)+41),w
  9633     010C  0140               	movlb	0	; select bank0
  9634     010D  00B0               	movwf	nmbs_server_create@address_rtu
  9635     010E  30A0               	movlw	low main@platform_conf
  9636     010F  00B1               	movwf	nmbs_server_create@platform_conf
  9637     0110  3001               	movlw	high main@platform_conf
  9638     0111  00B2               	movwf	nmbs_server_create@platform_conf+1
  9639     0112  3061               	movlw	low main@callbacks
  9640     0113  00B3               	movwf	nmbs_server_create@callbacks
  9641     0114  3001               	movlw	high main@callbacks
  9642     0115  00B4               	movwf	nmbs_server_create@callbacks+1
  9643     0116  3197  2792  3180   	fcall	_nmbs_server_create
  9644     0119  0142               	movlb	2	; select bank2
  9645     011A  00E0               	movwf	main@err^(0+256)
  9646                           
  9647                           ;main.c: 133:     if (err != NMBS_ERROR_NONE) {
  9648     011B  0860               	movf	main@err^(0+256),w
  9649     011C  1D03               	btfss	3,2
  9650     011D                     l1079:	
  9651                           ;main.c: 134:       while(1){};
  9652                           
  9653     011D  291D               	goto	l1079
  9654     011E                     l8275:
  9655                           
  9656                           ;main.c: 141:     {;main.c: 142:         actual_regs= registers.server_holding_register;
  9657     011E  3049               	movlw	low (main@registers+41)
  9658     011F  0086               	movwf	6
  9659     0120  3002               	movlw	high (main@registers+41)
  9660     0121  0087               	movwf	7
  9661     0122  3F40               	moviw [0]fsr1
  9662     0123  0142               	movlb	2	; select bank2
  9663     0124  00DC               	movwf	main@actual_regs^(0+256)
  9664     0125  3F41               	moviw [1]fsr1
  9665     0126  00DD               	movwf	(main@actual_regs+1)^(0+256)
  9666     0127  3F42               	moviw [2]fsr1
  9667     0128  00DE               	movwf	(main@actual_regs+2)^(0+256)
  9668     0129  3F43               	moviw [3]fsr1
  9669     012A  00DF               	movwf	(main@actual_regs+3)^(0+256)
  9670                           
  9671                           ;main.c: 143:         if(eusart1PacketFinish)
  9672     012B  0143               	movlb	3	; select bank3
  9673     012C  0829               	movf	_eusart1PacketFinish^(0+384),w	;volatile
  9674     012D  1903               	btfsc	3,2
  9675     012E  2952               	goto	l8289
  9676                           
  9677                           ;main.c: 144:         {;main.c: 145:             eusart1PacketFinish--;
  9678     012F  3001               	movlw	1
  9679     0130  02A9               	subwf	_eusart1PacketFinish^(0+384),f	;volatile
  9680                           
  9681                           ;main.c: 147:             err = nmbs_server_poll(&nmbs);
  9682     0131  30A0               	movlw	low main@nmbs
  9683     0132  0140               	movlb	0	; select bank0
  9684     0133  00EE               	movwf	nmbs_server_poll@nmbs
  9685     0134  3004               	movlw	high main@nmbs
  9686     0135  00EF               	movwf	nmbs_server_poll@nmbs+1
  9687     0136  318F  2703  3180   	fcall	_nmbs_server_poll
  9688     0139  0142               	movlb	2	; select bank2
  9689     013A  00E0               	movwf	main@err^(0+256)
  9690                           
  9691                           ;main.c: 149:             check_error_modbus(err);
  9692     013B  0860               	movf	main@err^(0+256),w
  9693     013C  3190  20FB  3180   	fcall	_check_error_modbus
  9694                           
  9695                           ;main.c: 150:             UART_ClearBuffer();
  9696     013F  3191  215E  3180   	fcall	_UART_ClearBuffer
  9697                           
  9698                           ;main.c: 151:             is_a_new_value(&registers,&actual_regs,&nmbs);
  9699     0142  3020               	movlw	low main@registers
  9700     0143  0140               	movlb	0	; select bank0
  9701     0144  00A8               	movwf	is_a_new_value@registers
  9702     0145  3002               	movlw	high main@registers
  9703     0146  00A9               	movwf	is_a_new_value@registers+1
  9704     0147  305C               	movlw	low main@actual_regs
  9705     0148  00AA               	movwf	is_a_new_value@actual_regs
  9706     0149  3001               	movlw	high main@actual_regs
  9707     014A  00AB               	movwf	is_a_new_value@actual_regs+1
  9708     014B  30A0               	movlw	low main@nmbs
  9709     014C  00AC               	movwf	is_a_new_value@nmbs
  9710     014D  3004               	movlw	high main@nmbs
  9711     014E  00AD               	movwf	is_a_new_value@nmbs+1
  9712     014F  3184  242C  3180   	fcall	_is_a_new_value
  9713     0152                     l8289:
  9714                           
  9715                           ;main.c: 153:         if(((_Bool) ((registers.server_coils.coils)[(0) / 8] & (0x1 << ((0
      +                          ) % 8)))) || ((_Bool) ((registers.server_coils.coils)[(1) / 8] & (0x1 << ((1) % 8)))))
  9716     0152  0144               	movlb	4	; select bank4
  9717     0153  1820               	btfsc	main@registers^(0+512),0
  9718     0154  2957               	goto	l8293
  9719     0155  1CA0               	btfss	main@registers^(0+512),1
  9720     0156  296D               	goto	l8295
  9721     0157                     l8293:
  9722                           
  9723                           ;main.c: 154:         {;main.c: 155:             registers.server_input_register.sensor1
      +                          _value = sensor1.sense(&sensor1.sensor_info.ADCChannel);
  9724     0157  30D9               	movlw	low (_sensor1+10)
  9725     0158  0140               	movlb	0	; select bank0
  9726     0159  00A3               	movwf	getADCData@sensorSelection
  9727     015A  3002               	movlw	high (_sensor1+10)
  9728     015B  00A4               	movwf	getADCData@sensorSelection+1
  9729     015C  30CF               	movlw	low _sensor1
  9730     015D  0086               	movwf	6
  9731     015E  3002               	movlw	high _sensor1
  9732     015F  0087               	movwf	7
  9733     0160  314B               	addfsr 1,11
  9734     0161  3F41               	moviw [1]fsr1
  9735     0162  008A               	movwf	10
  9736     0163  3F40               	moviw [0]fsr1
  9737     0164  000A               	callw
  9738     0165  3180               	pagesel	$
  9739     0166  0824               	movf	?_getADCData+1,w
  9740     0167  0144               	movlb	4	; select bank4
  9741     0168  00A6               	movwf	((main@registers+1)^(0+512)+5)
  9742     0169  0140               	movlb	0	; select bank0
  9743     016A  0823               	movf	?_getADCData,w
  9744     016B  0144               	movlb	4	; select bank4
  9745     016C  00A5               	movwf	(main@registers^(0+512)+5)
  9746     016D                     l8295:
  9747                           
  9748                           ;main.c: 157:         if(((_Bool) ((registers.server_coils.coils)[(0) / 8] & (0x1 << ((0
      +                          ) % 8)))) || ((_Bool) ((registers.server_coils.coils)[(2) / 8] & (0x1 << ((2) % 8)))))
  9749     016D  1820               	btfsc	main@registers^(0+512),0
  9750     016E  2971               	goto	l8299
  9751     016F  1D20               	btfss	main@registers^(0+512),2
  9752     0170  297B               	goto	l8301
  9753     0171                     l8299:
  9754                           
  9755                           ;main.c: 158:         {;main.c: 159:             registers.server_input_register.sensor2
      +                          _value = getSHTC3Data();
  9756     0171  318C  2475  3180   	fcall	_getSHTC3Data
  9757     0174  0835               	movf	?_getSHTC3Data+1,w
  9758     0175  0144               	movlb	4	; select bank4
  9759     0176  00A8               	movwf	((main@registers+1)^(0+512)+7)
  9760     0177  0140               	movlb	0	; select bank0
  9761     0178  0834               	movf	?_getSHTC3Data,w
  9762     0179  0144               	movlb	4	; select bank4
  9763     017A  00A7               	movwf	(main@registers^(0+512)+7)
  9764     017B                     l8301:
  9765                           
  9766                           ;main.c: 161:         if(((_Bool) ((registers.server_coils.coils)[(0) / 8] & (0x1 << ((0
      +                          ) % 8)))) || ((_Bool) ((registers.server_coils.coils)[(3) / 8] & (0x1 << ((3) % 8)))))
  9767     017B  1820               	btfsc	main@registers^(0+512),0
  9768     017C  297F               	goto	l8305
  9769     017D  1DA0               	btfss	main@registers^(0+512),3
  9770     017E  29A8               	goto	l8307
  9771     017F                     l8305:
  9772                           
  9773                           ;main.c: 162:         {;main.c: 163:             registers.server_input_register.sensor3
      +                          _valueL = (uint16_t)(getBMP280Data(PRES) & 0xFFFF);;
  9774     017F  3001               	movlw	1
  9775     0180  3186  2632  3180   	fcall	_getBMP280Data
  9776     0183  083A               	movf	?_getBMP280Data+1,w
  9777     0184  0144               	movlb	4	; select bank4
  9778     0185  00AC               	movwf	((main@registers+1)^(0+512)+11)
  9779     0186  0140               	movlb	0	; select bank0
  9780     0187  0839               	movf	?_getBMP280Data,w
  9781     0188  0144               	movlb	4	; select bank4
  9782     0189  00AB               	movwf	(main@registers^(0+512)+11)
  9783                           
  9784                           ;main.c: 164:             registers.server_input_register.sensor3_valueH = (uint16_t)((g
      +                          etBMP280Data(PRES) >> 16) & 0xFF);
  9785     018A  3001               	movlw	1
  9786     018B  3186  2632  3180   	fcall	_getBMP280Data
  9787     018E  0839               	movf	?_getBMP280Data,w
  9788     018F  0141               	movlb	1	; select bank1
  9789     0190  00EA               	movwf	??_main^(0+128)
  9790     0191  0140               	movlb	0	; select bank0
  9791     0192  083A               	movf	?_getBMP280Data+1,w
  9792     0193  0141               	movlb	1	; select bank1
  9793     0194  00EB               	movwf	(??_main^(0+128)+1)
  9794     0195  0140               	movlb	0	; select bank0
  9795     0196  083B               	movf	?_getBMP280Data+2,w
  9796     0197  0141               	movlb	1	; select bank1
  9797     0198  00EC               	movwf	(??_main^(0+128)+2)
  9798     0199  3010               	movlw	16
  9799     019A                     u5375:
  9800     019A  36EC               	lsrf	(??_main^(0+128)+2),f
  9801     019B  0CEB               	rrf	(??_main^(0+128)+1),f
  9802     019C  0CEA               	rrf	??_main^(0+128),f
  9803     019D  0B89               	decfsz	9,f
  9804     019E  299A               	goto	u5375
  9805     019F  30FF               	movlw	255
  9806     01A0  056A               	andwf	??_main^(0+128),w
  9807     01A1  0144               	movlb	4	; select bank4
  9808     01A2  00A9               	movwf	(main@registers^(0+512)+9)
  9809     01A3  3000               	movlw	0
  9810     01A4  0141               	movlb	1	; select bank1
  9811     01A5  056B               	andwf	(??_main^(0+128)+1),w
  9812     01A6  0144               	movlb	4	; select bank4
  9813     01A7  00AA               	movwf	((main@registers+1)^(0+512)+9)
  9814     01A8                     l8307:
  9815                           
  9816                           ;main.c: 167:         if(((_Bool) ((registers.server_coils.coils)[(0) / 8] & (0x1 << ((0
      +                          ) % 8)))) || ((_Bool) ((registers.server_coils.coils)[(4) / 8] & (0x1 << ((4) % 8)))))
  9817     01A8  1820               	btfsc	main@registers^(0+512),0
  9818     01A9  29AC               	goto	l8311
  9819     01AA  1E20               	btfss	main@registers^(0+512),4
  9820     01AB  29D5               	goto	l8313
  9821     01AC                     l8311:
  9822                           
  9823                           ;main.c: 168:         {;main.c: 169:             registers.server_input_register.sensor4
      +                          _valueL = (uint16_t)(getBMP280Data(TEMP) & 0xFFFF);;
  9824     01AC  3000               	movlw	0
  9825     01AD  3186  2632  3180   	fcall	_getBMP280Data
  9826     01B0  083A               	movf	?_getBMP280Data+1,w
  9827     01B1  0144               	movlb	4	; select bank4
  9828     01B2  00B0               	movwf	((main@registers+1)^(0+512)+15)
  9829     01B3  0140               	movlb	0	; select bank0
  9830     01B4  0839               	movf	?_getBMP280Data,w
  9831     01B5  0144               	movlb	4	; select bank4
  9832     01B6  00AF               	movwf	(main@registers^(0+512)+15)
  9833                           
  9834                           ;main.c: 170:             registers.server_input_register.sensor4_valueH = (uint16_t)((g
      +                          etBMP280Data(TEMP) >> 16) & 0xFF);
  9835     01B7  3000               	movlw	0
  9836     01B8  3186  2632  3180   	fcall	_getBMP280Data
  9837     01BB  0839               	movf	?_getBMP280Data,w
  9838     01BC  0141               	movlb	1	; select bank1
  9839     01BD  00EA               	movwf	??_main^(0+128)
  9840     01BE  0140               	movlb	0	; select bank0
  9841     01BF  083A               	movf	?_getBMP280Data+1,w
  9842     01C0  0141               	movlb	1	; select bank1
  9843     01C1  00EB               	movwf	(??_main^(0+128)+1)
  9844     01C2  0140               	movlb	0	; select bank0
  9845     01C3  083B               	movf	?_getBMP280Data+2,w
  9846     01C4  0141               	movlb	1	; select bank1
  9847     01C5  00EC               	movwf	(??_main^(0+128)+2)
  9848     01C6  3010               	movlw	16
  9849     01C7                     u5405:
  9850     01C7  36EC               	lsrf	(??_main^(0+128)+2),f
  9851     01C8  0CEB               	rrf	(??_main^(0+128)+1),f
  9852     01C9  0CEA               	rrf	??_main^(0+128),f
  9853     01CA  0B89               	decfsz	9,f
  9854     01CB  29C7               	goto	u5405
  9855     01CC  30FF               	movlw	255
  9856     01CD  056A               	andwf	??_main^(0+128),w
  9857     01CE  0144               	movlb	4	; select bank4
  9858     01CF  00AD               	movwf	(main@registers^(0+512)+13)
  9859     01D0  3000               	movlw	0
  9860     01D1  0141               	movlb	1	; select bank1
  9861     01D2  056B               	andwf	(??_main^(0+128)+1),w
  9862     01D3  0144               	movlb	4	; select bank4
  9863     01D4  00AE               	movwf	((main@registers+1)^(0+512)+13)
  9864     01D5                     l8313:
  9865                           
  9866                           ;main.c: 172:         m_memset(registers.server_coils.coils, 0, sizeof(registers.server_
      +                          coils.coils));
  9867     01D5  3020               	movlw	low main@registers
  9868     01D6  0140               	movlb	0	; select bank0
  9869     01D7  00A0               	movwf	m_memset@s
  9870     01D8  3002               	movlw	high main@registers
  9871     01D9  00A1               	movwf	m_memset@s+1
  9872     01DA  3000               	movlw	0
  9873     01DB  00A2               	movwf	m_memset@c
  9874     01DC  00A3               	movwf	m_memset@c+1
  9875     01DD  3001               	movlw	1
  9876     01DE  00A4               	movwf	m_memset@len
  9877     01DF  3000               	movlw	0
  9878     01E0  00A5               	movwf	m_memset@len+1
  9879     01E1  3193  23A4  3180   	fcall	_m_memset
  9880     01E4  291E               	goto	l8275
  9881     01E5                     __end_of_main:
  9882                           
  9883                           	psect	text1
  9884     1281                     __ptext1:	
  9885 ;; *************** function _printf *****************
  9886 ;; Defined at:
  9887 ;;		line 5 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/printf.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;  fmt             2   25[BANK0 ] PTR const unsigned char 
  9890 ;;		 -> STR_1(38), 
  9891 ;; Auto vars:     Size  Location     Type
  9892 ;;  ret             2    0        int 
  9893 ;;  ap              1   27[BANK0 ] PTR void [1]
  9894 ;;		 -> ?_printf(2), 
  9895 ;; Return value:  Size  Location     Type
  9896 ;;                  2   25[BANK0 ] int 
  9897 ;; Registers used:
  9898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9899 ;; Tracked objects:
  9900 ;;		On entry : 0/0
  9901 ;;		On exit  : 3F/0
  9902 ;;		Unchanged: 0/0
  9903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9904 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;Total ram usage:        3 bytes
  9909 ;; Hardware stack levels used: 1
  9910 ;; Hardware stack levels required when called: 9
  9911 ;; This function calls:
  9912 ;;		_vfprintf
  9913 ;; This function is called by:
  9914 ;;		_main
  9915 ;; This function uses a non-reentrant model
  9916 ;;
  9917                           
  9918     1281                     _printf:	
  9919                           ;psect for function _printf
  9920                           
  9921                           
  9922                           ;incstack = 0
  9923                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9924     1281  303B               	movlw	(low ((?_printf| 0+2)))& (0+255)
  9925     1282  0140               	movlb	0	; select bank0
  9926     1283  00BB               	movwf	printf@ap
  9927     1284  3000               	movlw	0
  9928     1285  00B1               	movwf	vfprintf@fp
  9929     1286  00B2               	movwf	vfprintf@fp+1
  9930     1287  083A               	movf	printf@fmt+1,w
  9931     1288  00B4               	movwf	vfprintf@fmt+1
  9932     1289  0839               	movf	printf@fmt,w
  9933     128A  00B3               	movwf	vfprintf@fmt
  9934     128B  303B               	movlw	(low (printf@ap| 0))& (0+255)
  9935     128C  00B5               	movwf	vfprintf@ap
  9936     128D  3194  240A         	fcall	_vfprintf
  9937     128F  0008               	return
  9938     1290                     __end_of_printf:
  9939                           
  9940                           	psect	text2
  9941     140A                     __ptext2:	
  9942 ;; *************** function _vfprintf *****************
  9943 ;; Defined at:
  9944 ;;		line 1817 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;  fp              2   17[BANK0 ] PTR struct _IO_FILE
  9947 ;;		 -> NULL(0), 
  9948 ;;  fmt             2   19[BANK0 ] PTR const unsigned char 
  9949 ;;		 -> STR_1(38), 
  9950 ;;  ap              1   21[BANK0 ] PTR PTR void 
  9951 ;;		 -> printf@ap(1), 
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  cfmt            2   23[BANK0 ] PTR unsigned char 
  9954 ;;		 -> STR_1(38), 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  2   17[BANK0 ] int 
  9957 ;; Registers used:
  9958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9959 ;; Tracked objects:
  9960 ;;		On entry : 3F/0
  9961 ;;		On exit  : 3F/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9964 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;Total ram usage:        8 bytes
  9969 ;; Hardware stack levels used: 1
  9970 ;; Hardware stack levels required when called: 8
  9971 ;; This function calls:
  9972 ;;		_vfpfcnvrt
  9973 ;; This function is called by:
  9974 ;;		_printf
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978     140A                     _vfprintf:	
  9979                           ;psect for function _vfprintf
  9980                           
  9981                           
  9982                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1817: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1
      +                          818: {;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1820:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1822:     cfmt = (char *)fmt;
  9983                           
  9984                           ;incstack = 0
  9985                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9986     140A  0834               	movf	vfprintf@fmt+1,w
  9987     140B  00B8               	movwf	vfprintf@cfmt+1
  9988     140C  0833               	movf	vfprintf@fmt,w
  9989     140D  00B7               	movwf	vfprintf@cfmt
  9990     140E                     l8013:	
  9991                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1826:     while (*cfmt) {
  9992                           
  9993                           
  9994                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1826:     while (*cfmt) {
  9995     140E  0837               	movf	vfprintf@cfmt,w
  9996     140F  0084               	movwf	4
  9997     1410  0838               	movf	vfprintf@cfmt+1,w
  9998     1411  0085               	movwf	5
  9999     1412  0012               	moviw fsr0++
 10000     1413  1903               	btfsc	3,2
 10001     1414  2C21               	goto	l8015
 10002                           
 10003                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1830:    vfpfcnvrt(fp, &cfmt,
      +                           ap);
 10004     1415  0832               	movf	vfprintf@fp+1,w
 10005     1416  00AA               	movwf	vfpfcnvrt@fp+1
 10006     1417  0831               	movf	vfprintf@fp,w
 10007     1418  00A9               	movwf	vfpfcnvrt@fp
 10008     1419  3037               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 10009     141A  00AB               	movwf	vfpfcnvrt@fmt
 10010     141B  0835               	movf	vfprintf@ap,w
 10011     141C  00AC               	movwf	vfpfcnvrt@ap
 10012     141D  318A  2266  3194   	fcall	_vfpfcnvrt
 10013     1420  2C0E               	goto	l8013
 10014     1421                     l8015:
 10015                           
 10016                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1835:  return 0;
 10017     1421  01B1               	clrf	?_vfprintf
 10018     1422  01B2               	clrf	?_vfprintf+1
 10019     1423  0008               	return
 10020     1424                     __end_of_vfprintf:
 10021                           
 10022                           	psect	text3
 10023     0A66                     __ptext3:	
 10024 ;; *************** function _vfpfcnvrt *****************
 10025 ;; Defined at:
 10026 ;;		line 1177 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;  fp              2    9[BANK0 ] PTR struct _IO_FILE
 10029 ;;		 -> NULL(0), 
 10030 ;;  fmt             1   11[BANK0 ] PTR PTR unsigned char 
 10031 ;;		 -> vfprintf@cfmt(2), 
 10032 ;;  ap              1   12[BANK0 ] PTR PTR void 
 10033 ;;		 -> printf@ap(1), 
 10034 ;; Auto vars:     Size  Location     Type
 10035 ;;  cp              2    0        PTR unsigned char 
 10036 ;;  done            1    0        _Bool 
 10037 ;;  c               1    0        unsigned char 
 10038 ;; Return value:  Size  Location     Type
 10039 ;;                  1    wreg      void 
 10040 ;; Registers used:
 10041 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10042 ;; Tracked objects:
 10043 ;;		On entry : 3F/0
 10044 ;;		On exit  : 3F/0
 10045 ;;		Unchanged: 0/0
 10046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10047 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;Total ram usage:        8 bytes
 10052 ;; Hardware stack levels used: 1
 10053 ;; Hardware stack levels required when called: 7
 10054 ;; This function calls:
 10055 ;;		_fputc
 10056 ;; This function is called by:
 10057 ;;		_vfprintf
 10058 ;; This function uses a non-reentrant model
 10059 ;;
 10060                           
 10061     0A66                     _vfpfcnvrt:	
 10062                           ;psect for function _vfpfcnvrt
 10063                           
 10064                           
 10065                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1177: vfpfcnvrt(FILE *fp, cha
      +                          r *fmt[], va_list ap);/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1178: {;
      +                          /opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1179:     char c, *cp;;/opt/mi
      +                          crochip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1180:     _Bool done;;/opt/microchip/
      +                          xc8/v2.50/pic/sources/c99/common/doprnt.c: 1201:     if ((*fmt)[0] == '%') {
 10066                           
 10067                           ;incstack = 0
 10068                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10069     0A66  082B               	movf	vfpfcnvrt@fmt,w
 10070     0A67  0086               	movwf	6
 10071     0A68  0187               	clrf	7
 10072     0A69  3F40               	moviw [0]fsr1
 10073     0A6A  00AD               	movwf	??_vfpfcnvrt
 10074     0A6B  3F41               	moviw [1]fsr1
 10075     0A6C  00AE               	movwf	??_vfpfcnvrt+1
 10076     0A6D  082D               	movf	??_vfpfcnvrt,w
 10077     0A6E  0084               	movwf	4
 10078     0A6F  082E               	movf	??_vfpfcnvrt+1,w
 10079     0A70  0085               	movwf	5
 10080     0A71  0012               	moviw fsr0++
 10081     0A72  3A25               	xorlw	37
 10082     0A73  1D03               	btfss	3,2
 10083     0A74  2A90               	goto	l7717
 10084                           
 10085                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1202:         ++*fmt;
 10086     0A75  082B               	movf	vfpfcnvrt@fmt,w
 10087     0A76  0086               	movwf	6
 10088     0A77  0187               	clrf	7
 10089     0A78  3001               	movlw	1
 10090     0A79  0781               	addwf	1,f
 10091     0A7A  3141               	addfsr 1,1
 10092     0A7B  1803               	skipnc
 10093     0A7C  0A81               	incf	1,f
 10094                           
 10095                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1204:         flags = width =
      +                           0;
 10096     0A7D  0142               	movlb	2	; select bank2
 10097     0A7E  01D5               	clrf	_width^(0+256)
 10098     0A7F  01D6               	clrf	(_width+1)^(0+256)
 10099     0A80  3000               	movlw	0
 10100     0A81  00DB               	movwf	_flags^(0+256)
 10101                           
 10102                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1205:         prec = -1;
 10103     0A82  30FF               	movlw	255
 10104     0A83  00D7               	movwf	_prec^(0+256)
 10105     0A84  30FF               	movlw	255
 10106     0A85  00D8               	movwf	(_prec^(0+256)+1)
 10107     0A86                     l7713:
 10108                           
 10109                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1806:         ++*fmt;
 10110     0A86  0140               	movlb	0	; select bank0
 10111     0A87  082B               	movf	vfpfcnvrt@fmt,w
 10112     0A88  0086               	movwf	6
 10113     0A89  0187               	clrf	7
 10114     0A8A  3001               	movlw	1
 10115     0A8B  0781               	addwf	1,f
 10116     0A8C  3141               	addfsr 1,1
 10117     0A8D  1803               	skipnc
 10118     0A8E  0A81               	incf	1,f
 10119     0A8F  0008               	return
 10120     0A90                     l7717:
 10121                           
 10122                           ;/opt/microchip/xc8/v2.50/pic/sources/c99/common/doprnt.c: 1811:     fputc((int)(*fmt)[0
      +                          ], fp);
 10123     0A90  082B               	movf	vfpfcnvrt@fmt,w
 10124     0A91  0086               	movwf	6
 10125     0A92  0187               	clrf	7
 10126     0A93  3F40               	moviw [0]fsr1
 10127     0A94  00AD               	movwf	??_vfpfcnvrt
 10128     0A95  3F41               	moviw [1]fsr1
 10129     0A96  00AE               	movwf	??_vfpfcnvrt+1
 10130     0A97  082D               	movf	??_vfpfcnvrt,w
 10131     0A98  0084               	movwf	4
 10132     0A99  082E               	movf	??_vfpfcnvrt+1,w
 10133     0A9A  0085               	movwf	5
 10134     0A9B  0800               	movf	0,w	;code access
 10135     0A9C  00AF               	movwf	??_vfpfcnvrt+2
 10136     0A9D  01B0               	clrf	??_vfpfcnvrt+3
 10137     0A9E  082F               	movf	??_vfpfcnvrt+2,w
 10138     0A9F  00A0               	movwf	fputc@c
 10139     0AA0  0830               	movf	??_vfpfcnvrt+3,w
 10140     0AA1  00A1               	movwf	fputc@c+1
 10141     0AA2  082A               	movf	vfpfcnvrt@fp+1,w
 10142     0AA3  00A3               	movwf	fputc@fp+1
 10143     0AA4  0829               	movf	vfpfcnvrt@fp,w
 10144     0AA5  00A2               	movwf	fputc@fp
 10145     0AA6  318C  24C7  318A   	fcall	_fputc
 10146     0AA9  2A86               	goto	l7713
 10147     0AAA                     __end_of_vfpfcnvrt:
 10148                           
 10149                           	psect	text4
 10150     0CC7                     __ptext4:	
 10151 ;; *************** function _fputc *****************
 10152 ;; Defined at:
 10153 ;;		line 8 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/nf_fputc.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;  c               2    0[BANK0 ] int 
 10156 ;;  fp              2    2[BANK0 ] PTR struct _IO_FILE
 10157 ;;		 -> NULL(0), 
 10158 ;; Auto vars:     Size  Location     Type
 10159 ;;		None
 10160 ;; Return value:  Size  Location     Type
 10161 ;;                  2    0[BANK0 ] int 
 10162 ;; Registers used:
 10163 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10164 ;; Tracked objects:
 10165 ;;		On entry : 3F/0
 10166 ;;		On exit  : 0/0
 10167 ;;		Unchanged: 0/0
 10168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10169 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10172 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10173 ;;Total ram usage:        9 bytes
 10174 ;; Hardware stack levels used: 1
 10175 ;; Hardware stack levels required when called: 6
 10176 ;; This function calls:
 10177 ;;		_putch
 10178 ;; This function is called by:
 10179 ;;		_vfpfcnvrt
 10180 ;; This function uses a non-reentrant model
 10181 ;;
 10182                           
 10183     0CC7                     _fputc:	
 10184                           ;psect for function _fputc
 10185                           
 10186                           
 10187                           ;incstack = 0
 10188                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10189     0CC7  0822               	movf	fputc@fp,w
 10190     0CC8  0423               	iorwf	fputc@fp+1,w
 10191     0CC9  1903               	btfsc	3,2
 10192     0CCA  2CCF               	goto	l7541
 10193     0CCB  0822               	movf	fputc@fp,w
 10194     0CCC  0423               	iorwf	fputc@fp+1,w
 10195     0CCD  1D03               	btfss	3,2
 10196     0CCE  2CD3               	goto	l7543
 10197     0CCF                     l7541:
 10198     0CCF  0820               	movf	fputc@c,w
 10199     0CD0  3190  20FC         	fcall	_putch
 10200     0CD2  0008               	return
 10201     0CD3                     l7543:
 10202     0CD3  0822               	movf	fputc@fp,w
 10203     0CD4  0086               	movwf	6
 10204     0CD5  0823               	movf	fputc@fp+1,w
 10205     0CD6  0087               	movwf	7
 10206     0CD7  3149               	addfsr 1,9
 10207     0CD8  0016               	moviw fsr1++
 10208     0CD9  0401               	iorwf	1,w
 10209     0CDA  1903               	btfsc	3,2
 10210     0CDB  2CFA               	goto	l7547
 10211     0CDC  0822               	movf	fputc@fp,w
 10212     0CDD  0086               	movwf	6
 10213     0CDE  0823               	movf	fputc@fp+1,w
 10214     0CDF  0087               	movwf	7
 10215     0CE0  3149               	addfsr 1,9
 10216     0CE1  3F40               	moviw [0]fsr1
 10217     0CE2  00A4               	movwf	??_fputc
 10218     0CE3  3F41               	moviw [1]fsr1
 10219     0CE4  00A5               	movwf	??_fputc+1
 10220     0CE5  0822               	movf	fputc@fp,w
 10221     0CE6  0086               	movwf	6
 10222     0CE7  0823               	movf	fputc@fp+1,w
 10223     0CE8  0087               	movwf	7
 10224     0CE9  3142               	addfsr 1,2
 10225     0CEA  3F40               	moviw [0]fsr1
 10226     0CEB  00A6               	movwf	??_fputc+2
 10227     0CEC  3F41               	moviw [1]fsr1
 10228     0CED  00A7               	movwf	??_fputc+3
 10229     0CEE  0827               	movf	??_fputc+3,w
 10230     0CEF  3A80               	xorlw	128
 10231     0CF0  00A8               	movwf	??_fputc+4
 10232     0CF1  0825               	movf	??_fputc+1,w
 10233     0CF2  3A80               	xorlw	128
 10234     0CF3  0228               	subwf	??_fputc+4,w
 10235     0CF4  1D03               	skipz
 10236     0CF5  2CF8               	goto	u4685
 10237     0CF6  0824               	movf	??_fputc,w
 10238     0CF7  0226               	subwf	??_fputc+2,w
 10239     0CF8                     u4685:
 10240     0CF8  1803               	skipnc
 10241     0CF9  0008               	return
 10242     0CFA                     l7547:
 10243     0CFA  0140               	movlb	0	; select bank0
 10244     0CFB  0822               	movf	fputc@fp,w
 10245     0CFC  0086               	movwf	6
 10246     0CFD  0823               	movf	fputc@fp+1,w
 10247     0CFE  0087               	movwf	7
 10248     0CFF  3142               	addfsr 1,2
 10249     0D00  0822               	movf	fputc@fp,w
 10250     0D01  0084               	movwf	4
 10251     0D02  0823               	movf	fputc@fp+1,w
 10252     0D03  0085               	movwf	5
 10253     0D04  3F00               	moviw [0]fsr0
 10254     0D05  00A4               	movwf	??_fputc
 10255     0D06  3F01               	moviw [1]fsr0
 10256     0D07  00A5               	movwf	??_fputc+1
 10257     0D08  3F40               	moviw [0]fsr1
 10258     0D09  0724               	addwf	??_fputc,w
 10259     0D0A  0084               	movwf	4
 10260     0D0B  3F41               	moviw [1]fsr1
 10261     0D0C  3D25               	addwfc	??_fputc+1,w
 10262     0D0D  0085               	movwf	5
 10263     0D0E  0820               	movf	fputc@c,w
 10264     0D0F  0080               	movwf	0
 10265     0D10  0822               	movf	fputc@fp,w
 10266     0D11  0086               	movwf	6
 10267     0D12  0823               	movf	fputc@fp+1,w
 10268     0D13  0087               	movwf	7
 10269     0D14  3142               	addfsr 1,2
 10270     0D15  3001               	movlw	1
 10271     0D16  0781               	addwf	1,f
 10272     0D17  3141               	addfsr 1,1
 10273     0D18  1803               	skipnc
 10274     0D19  0A81               	incf	1,f
 10275     0D1A  0008               	return
 10276     0D1B                     __end_of_fputc:
 10277                           
 10278                           	psect	text5
 10279     10FC                     __ptext5:	
 10280 ;; *************** function _putch *****************
 10281 ;; Defined at:
 10282 ;;		line 7 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/putch.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;  c               1    wreg     unsigned char 
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;  c               1    0[COMMON] unsigned char 
 10287 ;; Return value:  Size  Location     Type
 10288 ;;                  1    wreg      void 
 10289 ;; Registers used:
 10290 ;;		wreg
 10291 ;; Tracked objects:
 10292 ;;		On entry : 3F/0
 10293 ;;		On exit  : 3F/0
 10294 ;;		Unchanged: 3F/0
 10295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;Total ram usage:        0 bytes
 10301 ;; Hardware stack levels used: 1
 10302 ;; Hardware stack levels required when called: 5
 10303 ;; This function calls:
 10304 ;;		Nothing
 10305 ;; This function is called by:
 10306 ;;		_fputc
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310     10FC                     _putch:	
 10311                           ;psect for function _putch
 10312                           
 10313                           
 10314                           ;incstack = 0
 10315                           ; Regs used in _putch: [wreg]
 10316     10FC  0008               	return
 10317     10FD                     __end_of_putch:
 10318                           
 10319                           	psect	text6
 10320     0F03                     __ptext6:	
 10321 ;; *************** function _nmbs_server_poll *****************
 10322 ;; Defined at:
 10323 ;;		line 1376 in file "nanomodbus.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;  nmbs            2   78[BANK0 ] PTR struct nmbs_t
 10326 ;;		 -> main@nmbs(76), 
 10327 ;; Auto vars:     Size  Location     Type
 10328 ;;  err             1   73[BANK1 ] enum E10857
 10329 ;;  first_byte_r    1   72[BANK1 ] _Bool 
 10330 ;; Return value:  Size  Location     Type
 10331 ;;                  1    wreg      enum E10966
 10332 ;; Registers used:
 10333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10334 ;; Tracked objects:
 10335 ;;		On entry : 3F/0
 10336 ;;		On exit  : 3F/1
 10337 ;;		Unchanged: 0/0
 10338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10339 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;Total ram usage:        4 bytes
 10344 ;; Hardware stack levels used: 1
 10345 ;; Hardware stack levels required when called: 14
 10346 ;; This function calls:
 10347 ;;		_handle_req_fc
 10348 ;;		_msg_state_reset
 10349 ;;		_read_serial
 10350 ;;		_recv_req_header
 10351 ;; This function is called by:
 10352 ;;		_main
 10353 ;; This function uses a non-reentrant model
 10354 ;;
 10355                           
 10356     0F03                     _nmbs_server_poll:	
 10357                           ;psect for function _nmbs_server_poll
 10358                           
 10359                           
 10360                           ;nanomodbus.c: 1377:     msg_state_reset(nmbs);
 10361                           
 10362                           ;incstack = 0
 10363                           ; Regs used in _nmbs_server_poll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10364     0F03  086F               	movf	nmbs_server_poll@nmbs+1,w
 10365     0F04  00A3               	movwf	msg_state_reset@nmbs+1
 10366     0F05  086E               	movf	nmbs_server_poll@nmbs,w
 10367     0F06  00A2               	movwf	msg_state_reset@nmbs
 10368     0F07  3196  2603  318F   	fcall	_msg_state_reset
 10369                           
 10370                           ;nanomodbus.c: 1379:     _Bool first_byte_received = 0;
 10371     0F0A  0141               	movlb	1	; select bank1
 10372     0F0B  01E8               	clrf	nmbs_server_poll@first_byte_received^(0+128)
 10373                           
 10374                           ;nanomodbus.c: 1380:     nmbs_error err = recv_req_header(nmbs, &first_byte_received);
 10375     0F0C  0140               	movlb	0	; select bank0
 10376     0F0D  086F               	movf	nmbs_server_poll@nmbs+1,w
 10377     0F0E  00C1               	movwf	recv_req_header@nmbs+1
 10378     0F0F  086E               	movf	nmbs_server_poll@nmbs,w
 10379     0F10  00C0               	movwf	recv_req_header@nmbs
 10380     0F11  30E8               	movlw	(low (nmbs_server_poll@first_byte_received| 0))& (0+255)
 10381     0F12  00C2               	movwf	recv_req_header@first_byte_received
 10382     0F13  318A  22AA  318F   	fcall	_recv_req_header
 10383     0F16  0141               	movlb	1	; select bank1
 10384     0F17  00E9               	movwf	nmbs_server_poll@err^(0+128)
 10385                           
 10386                           ;nanomodbus.c: 1381:     if (err != NMBS_ERROR_NONE) {
 10387     0F18  0869               	movf	nmbs_server_poll@err^(0+128),w
 10388     0F19  1903               	btfsc	3,2
 10389     0F1A  2F27               	goto	l8099
 10390                           
 10391                           ;nanomodbus.c: 1382:         if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
 10392     0F1B  0868               	movf	nmbs_server_poll@first_byte_received^(0+128),w
 10393     0F1C  1D03               	btfss	3,2
 10394     0F1D  2F24               	goto	l8095
 10395     0F1E  30FD               	movlw	253
 10396     0F1F  0669               	xorwf	nmbs_server_poll@err^(0+128),w
 10397     0F20  1D03               	btfss	3,2
 10398     0F21  2F24               	goto	l8095
 10399     0F22                     l8091:
 10400                           
 10401                           ;nanomodbus.c: 1383:             return NMBS_ERROR_NONE;
 10402     0F22  3000               	movlw	0
 10403     0F23  0008               	return
 10404     0F24                     l8095:
 10405                           
 10406                           ;nanomodbus.c: 1385:         return err;
 10407     0F24  0141               	movlb	1	; select bank1
 10408     0F25  0869               	movf	nmbs_server_poll@err^(0+128),w
 10409     0F26  0008               	return
 10410     0F27                     l8099:
 10411                           
 10412                           ;nanomodbus.c: 1399:     err = handle_req_fc(nmbs);
 10413     0F27  0140               	movlb	0	; select bank0
 10414     0F28  086F               	movf	nmbs_server_poll@nmbs+1,w
 10415     0F29  00EC               	movwf	handle_req_fc@nmbs+1
 10416     0F2A  086E               	movf	nmbs_server_poll@nmbs,w
 10417     0F2B  00EB               	movwf	handle_req_fc@nmbs
 10418     0F2C  3188  2063  318F   	fcall	_handle_req_fc
 10419     0F2F  0141               	movlb	1	; select bank1
 10420     0F30  00E9               	movwf	nmbs_server_poll@err^(0+128)
 10421                           
 10422                           ;nanomodbus.c: 1400:     if (err != NMBS_ERROR_NONE && !((err) > 0 && (err) < 5)) {
 10423     0F31  0869               	movf	nmbs_server_poll@err^(0+128),w
 10424     0F32  1903               	btfsc	3,2
 10425     0F33  2F22               	goto	l8091
 10426     0F34  0869               	movf	nmbs_server_poll@err^(0+128),w
 10427     0F35  3A80               	xorlw	128
 10428     0F36  3E7F               	addlw	-129
 10429     0F37  1C03               	skipc
 10430     0F38  2F3E               	goto	l8107
 10431     0F39  0869               	movf	nmbs_server_poll@err^(0+128),w
 10432     0F3A  3A80               	xorlw	128
 10433     0F3B  3E7B               	addlw	-133
 10434     0F3C  1C03               	skipc
 10435     0F3D  2F22               	goto	l8091
 10436     0F3E                     l8107:
 10437                           
 10438                           ;nanomodbus.c: 1401:         if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && err !
      +                          = NMBS_ERROR_TIMEOUT && nmbs->msg.ignored) {
 10439     0F3E  0140               	movlb	0	; select bank0
 10440     0F3F  086E               	movf	nmbs_server_poll@nmbs,w
 10441     0F40  3E41               	addlw	65
 10442     0F41  0086               	movwf	6
 10443     0F42  3000               	movlw	0
 10444     0F43  3D6F               	addwfc	nmbs_server_poll@nmbs+1,w
 10445     0F44  0087               	movwf	7
 10446     0F45  0301               	decf	1,w
 10447     0F46  1D03               	btfss	3,2
 10448     0F47  2F24               	goto	l8095
 10449     0F48  30FD               	movlw	253
 10450     0F49  0141               	movlb	1	; select bank1
 10451     0F4A  0669               	xorwf	nmbs_server_poll@err^(0+128),w
 10452     0F4B  1903               	btfsc	3,2
 10453     0F4C  2F24               	goto	l8095
 10454     0F4D  0140               	movlb	0	; select bank0
 10455     0F4E  086E               	movf	nmbs_server_poll@nmbs,w
 10456     0F4F  3E37               	addlw	55
 10457     0F50  0086               	movwf	6
 10458     0F51  3000               	movlw	0
 10459     0F52  3D6F               	addwfc	nmbs_server_poll@nmbs+1,w
 10460     0F53  0087               	movwf	7
 10461     0F54  0801               	movf	1,w
 10462     0F55  1903               	btfsc	3,2
 10463     0F56  2F24               	goto	l8095
 10464                           
 10465                           ;nanomodbus.c: 1403:             nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf
      +                          ), 0, nmbs->platform.arg);
 10466     0F57  086F               	movf	nmbs_server_poll@nmbs+1,w
 10467     0F58  00A2               	movwf	read_serial@buf+1
 10468     0F59  086E               	movf	nmbs_server_poll@nmbs,w
 10469     0F5A  00A1               	movwf	read_serial@buf
 10470     0F5B  3030               	movlw	48
 10471     0F5C  00A3               	movwf	read_serial@count
 10472     0F5D  3000               	movlw	0
 10473     0F5E  00A4               	movwf	read_serial@count+1
 10474     0F5F  3000               	movlw	0
 10475     0F60  00A8               	movwf	read_serial@byte_timeout_ms+3
 10476     0F61  3000               	movlw	0
 10477     0F62  00A7               	movwf	read_serial@byte_timeout_ms+2
 10478     0F63  3000               	movlw	0
 10479     0F64  00A6               	movwf	read_serial@byte_timeout_ms+1
 10480     0F65  3000               	movlw	0
 10481     0F66  00A5               	movwf	read_serial@byte_timeout_ms
 10482     0F67  086E               	movf	nmbs_server_poll@nmbs,w
 10483     0F68  3E46               	addlw	70
 10484     0F69  0086               	movwf	6
 10485     0F6A  3000               	movlw	0
 10486     0F6B  3D6F               	addwfc	nmbs_server_poll@nmbs+1,w
 10487     0F6C  0087               	movwf	7
 10488     0F6D  3F40               	moviw [0]fsr1
 10489     0F6E  00A9               	movwf	read_serial@arg
 10490     0F6F  3F41               	moviw [1]fsr1
 10491     0F70  00AA               	movwf	read_serial@arg+1
 10492     0F71  086E               	movf	nmbs_server_poll@nmbs,w
 10493     0F72  3E42               	addlw	66
 10494     0F73  0086               	movwf	6
 10495     0F74  3000               	movlw	0
 10496     0F75  3D6F               	addwfc	nmbs_server_poll@nmbs+1,w
 10497     0F76  0087               	movwf	7
 10498     0F77  3F41               	moviw [1]fsr1
 10499     0F78  008A               	movwf	10
 10500     0F79  3F40               	moviw [0]fsr1
 10501     0F7A  000A               	callw
 10502     0F7B  318F               	pagesel	$
 10503     0F7C  2F24               	goto	l8095
 10504     0F7D                     __end_of_nmbs_server_poll:
 10505                           
 10506                           	psect	text7
 10507     0AAA                     __ptext7:	
 10508 ;; *************** function _recv_req_header *****************
 10509 ;; Defined at:
 10510 ;;		line 281 in file "nanomodbus.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;  nmbs            2   32[BANK0 ] PTR struct nmbs_t
 10513 ;;		 -> main@nmbs(76), 
 10514 ;;  first_byte_r    1   34[BANK0 ] PTR _Bool 
 10515 ;;		 -> nmbs_server_poll@first_byte_received(1), 
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;  err             1   35[BANK0 ] enum E10857
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  1    wreg      enum E10857
 10520 ;; Registers used:
 10521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10522 ;; Tracked objects:
 10523 ;;		On entry : 3F/0
 10524 ;;		On exit  : 3F/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10527 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;Total ram usage:        4 bytes
 10532 ;; Hardware stack levels used: 1
 10533 ;; Hardware stack levels required when called: 9
 10534 ;; This function calls:
 10535 ;;		_recv_msg_header
 10536 ;; This function is called by:
 10537 ;;		_nmbs_server_poll
 10538 ;; This function uses a non-reentrant model
 10539 ;;
 10540                           
 10541     0AAA                     _recv_req_header:	
 10542                           ;psect for function _recv_req_header
 10543                           
 10544                           
 10545                           ;nanomodbus.c: 282:     nmbs_error err = recv_msg_header(nmbs, first_byte_received);
 10546                           
 10547                           ;incstack = 0
 10548                           ; Regs used in _recv_req_header: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10549     0AAA  0841               	movf	recv_req_header@nmbs+1,w
 10550     0AAB  00BA               	movwf	recv_msg_header@nmbs+1
 10551     0AAC  0840               	movf	recv_req_header@nmbs,w
 10552     0AAD  00B9               	movwf	recv_msg_header@nmbs
 10553     0AAE  0842               	movf	recv_req_header@first_byte_received,w
 10554     0AAF  00BB               	movwf	recv_msg_header@first_byte_received
 10555     0AB0  318D  25D5  318A   	fcall	_recv_msg_header
 10556     0AB3  00C3               	movwf	recv_req_header@err
 10557                           
 10558                           ;nanomodbus.c: 283:     if (err != NMBS_ERROR_NONE)
 10559     0AB4  0843               	movf	recv_req_header@err,w
 10560     0AB5  1903               	btfsc	3,2
 10561     0AB6  2AB9               	goto	l7977
 10562                           
 10563                           ;nanomodbus.c: 284:         return err;
 10564     0AB7  0843               	movf	recv_req_header@err,w
 10565     0AB8  0008               	return
 10566     0AB9                     l7977:
 10567                           
 10568                           ;nanomodbus.c: 286:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 10569     0AB9  0840               	movf	recv_req_header@nmbs,w
 10570     0ABA  3E41               	addlw	65
 10571     0ABB  0086               	movwf	6
 10572     0ABC  3000               	movlw	0
 10573     0ABD  3D41               	addwfc	recv_req_header@nmbs+1,w
 10574     0ABE  0087               	movwf	7
 10575     0ABF  0301               	decf	1,w
 10576     0AC0  1D03               	btfss	3,2
 10577     0AC1  2AEE               	goto	l7989
 10578     0AC2  0840               	movf	recv_req_header@nmbs,w
 10579     0AC3  3E32               	addlw	50
 10580     0AC4  0086               	movwf	6
 10581     0AC5  3000               	movlw	0
 10582     0AC6  3D41               	addwfc	recv_req_header@nmbs+1,w
 10583     0AC7  0087               	movwf	7
 10584     0AC8  0801               	movf	1,w
 10585     0AC9  1D03               	btfss	3,2
 10586     0ACA  2ACE               	goto	l7983
 10587                           
 10588                           ;nanomodbus.c: 289:             nmbs->msg.broadcast = 1;
 10589     0ACB  0840               	movf	recv_req_header@nmbs,w
 10590     0ACC  3E36               	addlw	54
 10591     0ACD  2AE0               	goto	L1
 10592     0ACE                     l7983:
 10593     0ACE  0840               	movf	recv_req_header@nmbs,w
 10594     0ACF  3E48               	addlw	72
 10595     0AD0  0086               	movwf	6
 10596     0AD1  3000               	movlw	0
 10597     0AD2  3D41               	addwfc	recv_req_header@nmbs+1,w
 10598     0AD3  0087               	movwf	7
 10599     0AD4  0840               	movf	recv_req_header@nmbs,w
 10600     0AD5  3E32               	addlw	50
 10601     0AD6  0084               	movwf	4
 10602     0AD7  3000               	movlw	0
 10603     0AD8  3D41               	addwfc	recv_req_header@nmbs+1,w
 10604     0AD9  0085               	movwf	5
 10605     0ADA  0800               	movf	0,w
 10606     0ADB  0601               	xorwf	1,w
 10607     0ADC  1903               	skipnz
 10608     0ADD  2AE7               	goto	l7987
 10609                           
 10610                           ;nanomodbus.c: 291:             nmbs->msg.ignored = 1;
 10611     0ADE  0840               	movf	recv_req_header@nmbs,w
 10612     0ADF  3E37               	addlw	55
 10613     0AE0                     L1:
 10614     0AE0  0086               	movwf	6
 10615     0AE1  3000               	movlw	0
 10616     0AE2  3D41               	addwfc	recv_req_header@nmbs+1,w
 10617     0AE3  0087               	movwf	7
 10618     0AE4  3001               	movlw	1
 10619     0AE5  0081               	movwf	1
 10620     0AE6  2AEE               	goto	l7989
 10621     0AE7                     l7987:
 10622                           
 10623                           ;nanomodbus.c: 293:             nmbs->msg.ignored = 0;
 10624     0AE7  0840               	movf	recv_req_header@nmbs,w
 10625     0AE8  3E37               	addlw	55
 10626     0AE9  0086               	movwf	6
 10627     0AEA  3000               	movlw	0
 10628     0AEB  3D41               	addwfc	recv_req_header@nmbs+1,w
 10629     0AEC  0087               	movwf	7
 10630     0AED  0181               	clrf	1
 10631     0AEE                     l7989:
 10632                           
 10633                           ;nanomodbus.c: 296:     return NMBS_ERROR_NONE;
 10634     0AEE  3000               	movlw	0
 10635     0AEF  0008               	return
 10636     0AF0                     __end_of_recv_req_header:
 10637                           
 10638                           	psect	text8
 10639     0863                     __ptext8:	
 10640 ;; *************** function _handle_req_fc *****************
 10641 ;; Defined at:
 10642 ;;		line 1282 in file "nanomodbus.c"
 10643 ;; Parameters:    Size  Location     Type
 10644 ;;  nmbs            2   75[BANK0 ] PTR struct nmbs_t
 10645 ;;		 -> main@nmbs(76), 
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;  err             1   77[BANK0 ] enum E10857
 10648 ;; Return value:  Size  Location     Type
 10649 ;;                  1    wreg      enum E10857
 10650 ;; Registers used:
 10651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10652 ;; Tracked objects:
 10653 ;;		On entry : 3F/0
 10654 ;;		On exit  : 3F/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10657 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;Total ram usage:        3 bytes
 10662 ;; Hardware stack levels used: 1
 10663 ;; Hardware stack levels required when called: 13
 10664 ;; This function calls:
 10665 ;;		_handle_read_holding_registers
 10666 ;;		_handle_read_input_registers
 10667 ;;		_handle_write_single_coil@nanomodbus$F3828
 10668 ;;		_handle_write_single_register@nanomodbus$F3873
 10669 ;; This function is called by:
 10670 ;;		_nmbs_server_poll
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674     0863                     _handle_req_fc:	
 10675                           ;psect for function _handle_req_fc
 10676                           
 10677                           
 10678                           ;nanomodbus.c: 1285:     nmbs_error err;;nanomodbus.c: 1286:     switch (nmbs->msg.fc) {
 10679                           
 10680                           ;incstack = 0
 10681                           ; Regs used in _handle_req_fc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10682     0863  2888               	goto	l8003
 10683     0864                     l7995:
 10684                           
 10685                           ;nanomodbus.c: 1301:             err = handle_read_holding_registers(nmbs);
 10686     0864  086C               	movf	handle_req_fc@nmbs+1,w
 10687     0865  00EA               	movwf	handle_read_holding_registers@nmbs+1
 10688     0866  086B               	movf	handle_req_fc@nmbs,w
 10689     0867  00E9               	movwf	handle_read_holding_registers@nmbs
 10690     0868  3192  22A1  3188   	fcall	_handle_read_holding_registers
 10691     086B  2873               	goto	L2
 10692     086C                     l7997:	
 10693                           ;nanomodbus.c: 1302:             break;
 10694                           
 10695                           
 10696                           ;nanomodbus.c: 1307:             err = handle_read_input_registers(nmbs);
 10697     086C  086C               	movf	handle_req_fc@nmbs+1,w
 10698     086D  00EA               	movwf	handle_read_input_registers@nmbs+1
 10699     086E  086B               	movf	handle_req_fc@nmbs,w
 10700     086F  00E9               	movwf	handle_read_input_registers@nmbs
 10701     0870  3192  22B2  3188   	fcall	_handle_read_input_registers
 10702     0873                     L2:
 10703     0873  0140               	movlb	0	; select bank0
 10704     0874  2886               	goto	L5
 10705     0875                     l7999:	
 10706                           ;nanomodbus.c: 1308:             break;
 10707                           
 10708                           
 10709                           ;nanomodbus.c: 1313:             err = handle_write_single_coil(nmbs);
 10710     0875  086C               	movf	handle_req_fc@nmbs+1,w
 10711     0876  00D9               	movwf	handle_write_single_coil@nanomodbus$F3828@nmbs+1
 10712     0877  086B               	movf	handle_req_fc@nmbs,w
 10713     0878  00D8               	movwf	handle_write_single_coil@nanomodbus$F3828@nmbs
 10714     0879  3183  233D  3188   	fcall	_handle_write_single_coil@nanomodbus$F3828
 10715     087C  2886               	goto	L5
 10716     087D                     l8001:	
 10717                           ;nanomodbus.c: 1314:             break;
 10718                           
 10719                           
 10720                           ;nanomodbus.c: 1319:             err = handle_write_single_register(nmbs);
 10721     087D  086C               	movf	handle_req_fc@nmbs+1,w
 10722     087E  00D4               	movwf	handle_write_single_register@nanomodbus$F3873@nmbs+1
 10723     087F  086B               	movf	handle_req_fc@nmbs,w
 10724     0880  00D3               	movwf	handle_write_single_register@nanomodbus$F3873@nmbs
 10725     0881  3185  258F  3188   	fcall	_handle_write_single_register@nanomodbus$F3873
 10726     0884  2886               	goto	L5
 10727     0885                     l1609:	
 10728                           ;nanomodbus.c: 1352:         default:
 10729                           
 10730                           ;nanomodbus.c: 1320:             break;
 10731                           
 10732                           
 10733                           ;nanomodbus.c: 1353:             err = NMBS_EXCEPTION_ILLEGAL_FUNCTION;
 10734     0885  3001               	movlw	1
 10735     0886                     L5:
 10736     0886  00ED               	movwf	handle_req_fc@err
 10737                           
 10738                           ;nanomodbus.c: 1354:     }
 10739     0887  289C               	goto	l8005
 10740     0888                     l8003:
 10741     0888  086B               	movf	handle_req_fc@nmbs,w
 10742     0889  3E33               	addlw	51
 10743     088A  0086               	movwf	6
 10744     088B  3000               	movlw	0
 10745     088C  3D6C               	addwfc	handle_req_fc@nmbs+1,w
 10746     088D  0087               	movwf	7
 10747     088E  0801               	movf	1,w
 10748                           
 10749                           ; Switch size 1, requested type "simple"
 10750                           ; Number of cases is 4, Range of values is 3 to 6
 10751                           ; switch strategies available:
 10752                           ; Name         Instructions Cycles
 10753                           ; simple_byte           13     7 (average)
 10754                           ; direct_byte           17     9 (fixed)
 10755                           ; jumptable            263     9 (fixed)
 10756                           ;	Chosen strategy is simple_byte
 10757     088F  3A03               	xorlw	3	; case 3
 10758     0890  1903               	skipnz
 10759     0891  2864               	goto	l7995
 10760     0892  3A07               	xorlw	7	; case 4
 10761     0893  1903               	skipnz
 10762     0894  286C               	goto	l7997
 10763     0895  3A01               	xorlw	1	; case 5
 10764     0896  1903               	skipnz
 10765     0897  2875               	goto	l7999
 10766     0898  3A03               	xorlw	3	; case 6
 10767     0899  1903               	skipnz
 10768     089A  287D               	goto	l8001
 10769     089B  2885               	goto	l1609
 10770     089C                     l8005:
 10771                           
 10772                           ;nanomodbus.c: 1356:     return err;
 10773     089C  086D               	movf	handle_req_fc@err,w
 10774     089D  0008               	return
 10775     089E                     __end_of_handle_req_fc:
 10776                           
 10777                           	psect	text9
 10778     058F                     __ptext9:	
 10779 ;; *************** function _handle_write_single_register@nanomodbus$F3873 *****************
 10780 ;; Defined at:
 10781 ;;		line 769 in file "nanomodbus.c"
 10782 ;; Parameters:    Size  Location     Type
 10783 ;;  nmbs            2   51[BANK0 ] PTR struct nmbs_t
 10784 ;;		 -> main@nmbs(76), 
 10785 ;; Auto vars:     Size  Location     Type
 10786 ;;  value           2   57[BANK0 ] unsigned short 
 10787 ;;  address         2   55[BANK0 ] unsigned short 
 10788 ;;  err             1    0        enum E10857
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      enum E10857
 10791 ;; Registers used:
 10792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10793 ;; Tracked objects:
 10794 ;;		On entry : 3F/0
 10795 ;;		On exit  : 3F/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10798 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10802 ;;Total ram usage:        8 bytes
 10803 ;; Hardware stack levels used: 1
 10804 ;; Hardware stack levels required when called: 11
 10805 ;; This function calls:
 10806 ;;		_get_2
 10807 ;;		_handle_write_single_register
 10808 ;;		_put_2
 10809 ;;		_put_res_header
 10810 ;;		_recv
 10811 ;;		_recv_msg_footer
 10812 ;;		_recv_write_single_register_res
 10813 ;;		_send_msg
 10814 ;; This function is called by:
 10815 ;;		_handle_req_fc
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819     058F                     _handle_write_single_register@nanomodbus$F3873:	
 10820                           ;psect for function _handle_write_single_register@nanomodbus$F3873
 10821                           
 10822                           
 10823                           ;incstack = 0
 10824                           ; Regs used in _handle_write_single_register@nanomodbus$F3873: [wreg-fsr1h+status,2+stat
      +                          us,0+pclath+cstack]
 10825     058F  0854               	movf	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10826     0590  00B5               	movwf	recv@nmbs+1
 10827     0591  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10828     0592  00B4               	movwf	recv@nmbs
 10829     0593  3004               	movlw	4
 10830     0594  00B6               	movwf	recv@count
 10831     0595  3000               	movlw	0
 10832     0596  00B7               	movwf	recv@count+1
 10833     0597  3197  27C9  3185   	fcall	_recv
 10834                           
 10835                           ;nanomodbus.c: 774:     uint16_t address = get_2(nmbs);
 10836     059A  0854               	movf	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10837     059B  00A1               	movwf	get_2@nmbs+1
 10838     059C  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10839     059D  00A0               	movwf	get_2@nmbs
 10840     059E  3188  209E  3185   	fcall	_get_2
 10841     05A1  0821               	movf	?_get_2+1,w
 10842     05A2  00D8               	movwf	handle_write_single_register@nanomodbus$F3873@address+1
 10843     05A3  0820               	movf	?_get_2,w
 10844     05A4  00D7               	movwf	handle_write_single_register@nanomodbus$F3873@address
 10845                           
 10846                           ;nanomodbus.c: 775:     uint16_t value = get_2(nmbs);
 10847     05A5  0854               	movf	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10848     05A6  00A1               	movwf	get_2@nmbs+1
 10849     05A7  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10850     05A8  00A0               	movwf	get_2@nmbs
 10851     05A9  3188  209E  3185   	fcall	_get_2
 10852     05AC  0821               	movf	?_get_2+1,w
 10853     05AD  00DA               	movwf	handle_write_single_register@nanomodbus$F3873@value+1
 10854     05AE  0820               	movf	?_get_2,w
 10855     05AF  00D9               	movwf	handle_write_single_register@nanomodbus$F3873@value
 10856     05B0  0854               	movf	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10857     05B1  00BA               	movwf	recv_msg_footer@nmbs+1
 10858     05B2  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10859     05B3  00B9               	movwf	recv_msg_footer@nmbs
 10860     05B4  318A  22F0  3185   	fcall	_recv_msg_footer
 10861                           
 10862                           ;nanomodbus.c: 783:     if (!nmbs->msg.ignored) {
 10863     05B7  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10864     05B8  3E37               	addlw	55
 10865     05B9  0086               	movwf	6
 10866     05BA  3000               	movlw	0
 10867     05BB  3D54               	addwfc	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10868     05BC  0087               	movwf	7
 10869     05BD  0801               	movf	1,w
 10870     05BE  1D03               	btfss	3,2
 10871     05BF  2E21               	goto	l7697
 10872                           
 10873                           ;nanomodbus.c: 784:         if (nmbs->callbacks.write_single_register) {
 10874     05C0  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10875     05C1  3E3E               	addlw	62
 10876     05C2  0086               	movwf	6
 10877     05C3  3000               	movlw	0
 10878     05C4  3D54               	addwfc	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10879     05C5  0087               	movwf	7
 10880     05C6  0016               	moviw fsr1++
 10881     05C7  0401               	iorwf	1,w
 10882     05C8  1903               	btfsc	3,2
 10883     05C9  2E30               	goto	l7701
 10884     05CA  0858               	movf	handle_write_single_register@nanomodbus$F3873@address+1,w
 10885     05CB  00A1               	movwf	handle_write_single_register@address+1
 10886     05CC  0857               	movf	handle_write_single_register@nanomodbus$F3873@address,w
 10887     05CD  00A0               	movwf	handle_write_single_register@address
 10888     05CE  085A               	movf	handle_write_single_register@nanomodbus$F3873@value+1,w
 10889     05CF  00A3               	movwf	handle_write_single_register@registers+1
 10890     05D0  0859               	movf	handle_write_single_register@nanomodbus$F3873@value,w
 10891     05D1  00A2               	movwf	handle_write_single_register@registers
 10892     05D2  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10893     05D3  3E32               	addlw	50
 10894     05D4  0086               	movwf	6
 10895     05D5  3000               	movlw	0
 10896     05D6  3D54               	addwfc	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10897     05D7  0087               	movwf	7
 10898     05D8  0801               	movf	1,w
 10899     05D9  00A4               	movwf	handle_write_single_register@unit_id
 10900     05DA  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10901     05DB  3E46               	addlw	70
 10902     05DC  0086               	movwf	6
 10903     05DD  3000               	movlw	0
 10904     05DE  3D54               	addwfc	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10905     05DF  0087               	movwf	7
 10906     05E0  3F40               	moviw [0]fsr1
 10907     05E1  00A5               	movwf	handle_write_single_register@arg
 10908     05E2  3F41               	moviw [1]fsr1
 10909     05E3  00A6               	movwf	handle_write_single_register@arg+1
 10910     05E4  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10911     05E5  3E3E               	addlw	62
 10912     05E6  0086               	movwf	6
 10913     05E7  3000               	movlw	0
 10914     05E8  3D54               	addwfc	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10915     05E9  0087               	movwf	7
 10916     05EA  3F41               	moviw [1]fsr1
 10917     05EB  008A               	movwf	10
 10918     05EC  3F40               	moviw [0]fsr1
 10919     05ED  000A               	callw
 10920     05EE  3185               	pagesel	$
 10921                           
 10922                           ;nanomodbus.c: 794:             if (!nmbs->msg.broadcast) {
 10923     05EF  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10924     05F0  3E36               	addlw	54
 10925     05F1  0086               	movwf	6
 10926     05F2  3000               	movlw	0
 10927     05F3  3D54               	addwfc	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10928     05F4  0087               	movwf	7
 10929     05F5  0801               	movf	1,w
 10930     05F6  1D03               	btfss	3,2
 10931     05F7  2E30               	goto	l7701
 10932                           
 10933                           ;nanomodbus.c: 795:                 put_res_header(nmbs, 4);
 10934     05F8  0854               	movf	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10935     05F9  00AB               	movwf	put_res_header@nmbs+1
 10936     05FA  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10937     05FB  00AA               	movwf	put_res_header@nmbs
 10938     05FC  3004               	movlw	4
 10939     05FD  00AC               	movwf	put_res_header@data_length
 10940     05FE  3000               	movlw	0
 10941     05FF  00AD               	movwf	put_res_header@data_length+1
 10942     0600  3192  2232  3185   	fcall	_put_res_header
 10943                           
 10944                           ;nanomodbus.c: 797:                 put_2(nmbs, address);
 10945     0603  0854               	movf	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10946     0604  00A1               	movwf	put_2@nmbs+1
 10947     0605  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10948     0606  00A0               	movwf	put_2@nmbs
 10949     0607  0858               	movf	handle_write_single_register@nanomodbus$F3873@address+1,w
 10950     0608  00A3               	movwf	put_2@data+1
 10951     0609  0857               	movf	handle_write_single_register@nanomodbus$F3873@address,w
 10952     060A  00A2               	movwf	put_2@data
 10953     060B  3196  265C  3185   	fcall	_put_2
 10954                           
 10955                           ;nanomodbus.c: 798:                 put_2(nmbs, value);
 10956     060E  0854               	movf	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10957     060F  00A1               	movwf	put_2@nmbs+1
 10958     0610  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10959     0611  00A0               	movwf	put_2@nmbs
 10960     0612  085A               	movf	handle_write_single_register@nanomodbus$F3873@value+1,w
 10961     0613  00A3               	movwf	put_2@data+1
 10962     0614  0859               	movf	handle_write_single_register@nanomodbus$F3873@value,w
 10963     0615  00A2               	movwf	put_2@data
 10964     0616  3196  265C  3185   	fcall	_put_2
 10965     0619  0854               	movf	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10966     061A  00BF               	movwf	send_msg@nmbs+1
 10967     061B  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10968     061C  00BE               	movwf	send_msg@nmbs
 10969     061D  3189  2158  3185   	fcall	_send_msg
 10970     0620  2E30               	goto	l7701
 10971     0621                     l7697:
 10972                           
 10973                           ;nanomodbus.c: 811:         return recv_write_single_register_res(nmbs, address, value);
 10974     0621  0854               	movf	handle_write_single_register@nanomodbus$F3873@nmbs+1,w
 10975     0622  00CE               	movwf	recv_write_single_register_res@nmbs+1
 10976     0623  0853               	movf	handle_write_single_register@nanomodbus$F3873@nmbs,w
 10977     0624  00CD               	movwf	recv_write_single_register_res@nmbs
 10978     0625  0858               	movf	handle_write_single_register@nanomodbus$F3873@address+1,w
 10979     0626  00D0               	movwf	recv_write_single_register_res@address+1
 10980     0627  0857               	movf	handle_write_single_register@nanomodbus$F3873@address,w
 10981     0628  00CF               	movwf	recv_write_single_register_res@address
 10982     0629  085A               	movf	handle_write_single_register@nanomodbus$F3873@value+1,w
 10983     062A  00D2               	movwf	recv_write_single_register_res@value_req+1
 10984     062B  0859               	movf	handle_write_single_register@nanomodbus$F3873@value,w
 10985     062C  00D1               	movwf	recv_write_single_register_res@value_req
 10986     062D  3187  27D8         	fcall	_recv_write_single_register_res
 10987     062F  0008               	return
 10988     0630                     l7701:
 10989                           
 10990                           ;nanomodbus.c: 814:     return NMBS_ERROR_NONE;
 10991     0630  3000               	movlw	0
 10992     0631  0008               	return
 10993     0632                     __end_of_handle_write_single_register@nanomodbus$F3873:
 10994                           
 10995                           	psect	text10
 10996     07D8                     __ptext10:	
 10997 ;; *************** function _recv_write_single_register_res *****************
 10998 ;; Defined at:
 10999 ;;		line 478 in file "nanomodbus.c"
 11000 ;; Parameters:    Size  Location     Type
 11001 ;;  nmbs            2   45[BANK0 ] PTR struct nmbs_t
 11002 ;;		 -> main@nmbs(76), 
 11003 ;;  address         2   47[BANK0 ] unsigned short 
 11004 ;;  value_req       2   49[BANK0 ] unsigned short 
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;  value_res       2    0        unsigned short 
 11007 ;;  address_res     2    0        unsigned short 
 11008 ;;  err             1    0        enum E10857
 11009 ;; Return value:  Size  Location     Type
 11010 ;;                  1    wreg      enum E10857
 11011 ;; Registers used:
 11012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11013 ;; Tracked objects:
 11014 ;;		On entry : 3F/0
 11015 ;;		On exit  : 3F/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11018 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;Total ram usage:        6 bytes
 11023 ;; Hardware stack levels used: 1
 11024 ;; Hardware stack levels required when called: 10
 11025 ;; This function calls:
 11026 ;;		_get_2
 11027 ;;		_recv
 11028 ;;		_recv_msg_footer
 11029 ;;		_recv_res_header
 11030 ;; This function is called by:
 11031 ;;		_handle_write_single_register@nanomodbus$F3873
 11032 ;; This function uses a non-reentrant model
 11033 ;;
 11034                           
 11035     07D8                     _recv_write_single_register_res:	
 11036                           ;psect for function _recv_write_single_register_res
 11037                           
 11038                           
 11039                           ;incstack = 0
 11040                           ; Regs used in _recv_write_single_register_res: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11041     07D8  084E               	movf	recv_write_single_register_res@nmbs+1,w
 11042     07D9  00C3               	movwf	recv_res_header@nmbs+1
 11043     07DA  084D               	movf	recv_write_single_register_res@nmbs,w
 11044     07DB  00C2               	movwf	recv_res_header@nmbs
 11045     07DC  3184  24E8  3187   	fcall	_recv_res_header
 11046     07DF  084E               	movf	recv_write_single_register_res@nmbs+1,w
 11047     07E0  00B5               	movwf	recv@nmbs+1
 11048     07E1  084D               	movf	recv_write_single_register_res@nmbs,w
 11049     07E2  00B4               	movwf	recv@nmbs
 11050     07E3  3004               	movlw	4
 11051     07E4  00B6               	movwf	recv@count
 11052     07E5  3000               	movlw	0
 11053     07E6  00B7               	movwf	recv@count+1
 11054     07E7  3197  27C9  3187   	fcall	_recv
 11055     07EA  084E               	movf	recv_write_single_register_res@nmbs+1,w
 11056     07EB  00A1               	movwf	get_2@nmbs+1
 11057     07EC  084D               	movf	recv_write_single_register_res@nmbs,w
 11058     07ED  00A0               	movwf	get_2@nmbs
 11059     07EE  3188  209E  3187   	fcall	_get_2
 11060     07F1  084E               	movf	recv_write_single_register_res@nmbs+1,w
 11061     07F2  00A1               	movwf	get_2@nmbs+1
 11062     07F3  084D               	movf	recv_write_single_register_res@nmbs,w
 11063     07F4  00A0               	movwf	get_2@nmbs
 11064     07F5  3188  209E  3187   	fcall	_get_2
 11065     07F8  084E               	movf	recv_write_single_register_res@nmbs+1,w
 11066     07F9  00BA               	movwf	recv_msg_footer@nmbs+1
 11067     07FA  084D               	movf	recv_write_single_register_res@nmbs,w
 11068     07FB  00B9               	movwf	recv_msg_footer@nmbs
 11069     07FC  318A  22F0         	fcall	_recv_msg_footer
 11070                           
 11071                           ;nanomodbus.c: 501:     return NMBS_ERROR_NONE;
 11072     07FE  3000               	movlw	0
 11073     07FF  0008               	return
 11074     0800                     __end_of_recv_write_single_register_res:
 11075                           
 11076                           	psect	text11
 11077     15B5                     __ptext11:	
 11078 ;; *************** function _handle_write_single_register *****************
 11079 ;; Defined at:
 11080 ;;		line 111 in file "modbus_imp.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;  address         2    0[BANK0 ] unsigned short 
 11083 ;;  registers       2    2[BANK0 ] PTR const unsigned short
 11084 ;;  unit_id         1    4[BANK0 ] unsigned char 
 11085 ;;  arg             2    5[BANK0 ] PTR void 
 11086 ;;		 -> main@registers(45), 
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;  server_regis    1    9[BANK0 ] PTR unsigned short 
 11089 ;;		 -> registers$server_input_register$serial_number(2), 
 11090 ;; Return value:  Size  Location     Type
 11091 ;;                  1    wreg      enum E10966
 11092 ;; Registers used:
 11093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11094 ;; Tracked objects:
 11095 ;;		On entry : 3F/0
 11096 ;;		On exit  : 3F/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11099 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11101 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;Total ram usage:       10 bytes
 11104 ;; Hardware stack levels used: 1
 11105 ;; Hardware stack levels required when called: 5
 11106 ;; This function calls:
 11107 ;;		Nothing
 11108 ;; This function is called by:
 11109 ;;		_main
 11110 ;;		_handle_write_single_register@nanomodbus$F3873
 11111 ;; This function uses a non-reentrant model
 11112 ;;
 11113                           
 11114     15B5                     _handle_write_single_register:	
 11115                           ;psect for function _handle_write_single_register
 11116                           
 11117                           
 11118                           ;modbus_imp.c: 112:   if (address > 3)
 11119                           
 11120                           ;incstack = 0
 11121                           ; Regs used in _handle_write_single_register: [wreg-fsr1h+status,2+status,0]
 11122     15B5  3000               	movlw	0
 11123     15B6  0221               	subwf	handle_write_single_register@address+1,w
 11124     15B7  3004               	movlw	4
 11125     15B8  1903               	skipnz
 11126     15B9  0220               	subwf	handle_write_single_register@address,w
 11127     15BA  1C03               	skipc
 11128     15BB  2DBE               	goto	l7391
 11129                           
 11130                           ;modbus_imp.c: 113:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 11131     15BC  3002               	movlw	2
 11132     15BD  0008               	return
 11133     15BE                     l7391:
 11134                           
 11135                           ;modbus_imp.c: 116:   uint16_t* server_registers = (uint16_t *)(&(((mod_bus_registers*) 
      +                          arg)->server_holding_register));
 11136     15BE  0825               	movf	handle_write_single_register@arg,w
 11137     15BF  3E29               	addlw	41
 11138     15C0  00A7               	movwf	??_handle_write_single_register
 11139     15C1  3000               	movlw	0
 11140     15C2  3D26               	addwfc	handle_write_single_register@arg+1,w
 11141     15C3  00A8               	movwf	??_handle_write_single_register+1
 11142     15C4  0827               	movf	??_handle_write_single_register,w
 11143     15C5  00A9               	movwf	handle_write_single_register@server_registers
 11144                           
 11145                           ;modbus_imp.c: 118:   server_registers[address] = *registers;
 11146     15C6  0822               	movf	handle_write_single_register@registers,w
 11147     15C7  0086               	movwf	6
 11148     15C8  0823               	movf	handle_write_single_register@registers+1,w
 11149     15C9  0087               	movwf	7
 11150     15CA  0820               	movf	handle_write_single_register@address,w
 11151     15CB  00A7               	movwf	??_handle_write_single_register
 11152     15CC  3001               	movlw	1
 11153     15CD                     u4455:
 11154     15CD  35A7               	lslf	??_handle_write_single_register,f
 11155     15CE  0B89               	decfsz	9,f
 11156     15CF  2DCD               	goto	u4455
 11157     15D0  0829               	movf	handle_write_single_register@server_registers,w
 11158     15D1  0727               	addwf	??_handle_write_single_register,w
 11159     15D2  0084               	movwf	4
 11160     15D3  3002               	movlw	2	; select bank4/5
 11161     15D4  0085               	movwf	5
 11162     15D5  3F40               	moviw [0]fsr1
 11163     15D6  3F80               	movwi [0]fsr0
 11164     15D7  3F41               	moviw [1]fsr1
 11165     15D8  3F81               	movwi [1]fsr0
 11166                           
 11167                           ;modbus_imp.c: 120:   return NMBS_ERROR_NONE;
 11168     15D9  3000               	movlw	0
 11169     15DA  0008               	return
 11170     15DB                     __end_of_handle_write_single_register:
 11171                           
 11172                           	psect	text12
 11173     033D                     __ptext12:	
 11174 ;; *************** function _handle_write_single_coil@nanomodbus$F3828 *****************
 11175 ;; Defined at:
 11176 ;;		line 716 in file "nanomodbus.c"
 11177 ;; Parameters:    Size  Location     Type
 11178 ;;  nmbs            2   56[BANK0 ] PTR struct nmbs_t
 11179 ;;		 -> main@nmbs(76), 
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;  val             1    0        _Bool 
 11182 ;;  value           2   62[BANK0 ] unsigned short 
 11183 ;;  address         2   60[BANK0 ] unsigned short 
 11184 ;;  err             1   64[BANK0 ] enum E10857
 11185 ;; Return value:  Size  Location     Type
 11186 ;;                  1    wreg      enum E10857
 11187 ;; Registers used:
 11188 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11189 ;; Tracked objects:
 11190 ;;		On entry : 3F/0
 11191 ;;		On exit  : 3F/0
 11192 ;;		Unchanged: 0/0
 11193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11194 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11196 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11197 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11198 ;;Total ram usage:        9 bytes
 11199 ;; Hardware stack levels used: 1
 11200 ;; Hardware stack levels required when called: 11
 11201 ;; This function calls:
 11202 ;;		_get_2
 11203 ;;		_handle_write_single_coil
 11204 ;;		_put_2
 11205 ;;		_put_res_header
 11206 ;;		_recv
 11207 ;;		_recv_msg_footer
 11208 ;;		_recv_write_single_coil_res
 11209 ;;		_send_exception_msg
 11210 ;;		_send_msg
 11211 ;; This function is called by:
 11212 ;;		_handle_req_fc
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216     033D                     _handle_write_single_coil@nanomodbus$F3828:	
 11217                           ;psect for function _handle_write_single_coil@nanomodbus$F3828
 11218                           
 11219                           
 11220                           ;nanomodbus.c: 717:     nmbs_error err = recv(nmbs, 4);
 11221                           
 11222                           ;incstack = 0
 11223                           ; Regs used in _handle_write_single_coil@nanomodbus$F3828: [wreg-fsr1h+status,2+status,0
      +                          +pclath+cstack]
 11224     033D  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11225     033E  00B5               	movwf	recv@nmbs+1
 11226     033F  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11227     0340  00B4               	movwf	recv@nmbs
 11228     0341  3004               	movlw	4
 11229     0342  00B6               	movwf	recv@count
 11230     0343  3000               	movlw	0
 11231     0344  00B7               	movwf	recv@count+1
 11232     0345  3197  27C9  3183   	fcall	_recv
 11233     0348  00E0               	movwf	handle_write_single_coil@nanomodbus$F3828@err
 11234                           
 11235                           ;nanomodbus.c: 718:     if (err != NMBS_ERROR_NONE)
 11236     0349  0860               	movf	handle_write_single_coil@nanomodbus$F3828@err,w
 11237     034A  1903               	btfsc	3,2
 11238     034B  2B4E               	goto	l7619
 11239     034C                     l7615:
 11240                           
 11241                           ;nanomodbus.c: 719:         return err;
 11242     034C  0860               	movf	handle_write_single_coil@nanomodbus$F3828@err,w
 11243     034D  0008               	return
 11244     034E                     l7619:
 11245                           
 11246                           ;nanomodbus.c: 721:     uint16_t address = get_2(nmbs);
 11247     034E  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11248     034F  00A1               	movwf	get_2@nmbs+1
 11249     0350  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11250     0351  00A0               	movwf	get_2@nmbs
 11251     0352  3188  209E  3183   	fcall	_get_2
 11252     0355  0821               	movf	?_get_2+1,w
 11253     0356  00DD               	movwf	handle_write_single_coil@nanomodbus$F3828@address+1
 11254     0357  0820               	movf	?_get_2,w
 11255     0358  00DC               	movwf	handle_write_single_coil@nanomodbus$F3828@address
 11256                           
 11257                           ;nanomodbus.c: 722:     uint16_t value = get_2(nmbs);
 11258     0359  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11259     035A  00A1               	movwf	get_2@nmbs+1
 11260     035B  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11261     035C  00A0               	movwf	get_2@nmbs
 11262     035D  3188  209E  3183   	fcall	_get_2
 11263     0360  0821               	movf	?_get_2+1,w
 11264     0361  00DF               	movwf	handle_write_single_coil@nanomodbus$F3828@value+1
 11265     0362  0820               	movf	?_get_2,w
 11266     0363  00DE               	movwf	handle_write_single_coil@nanomodbus$F3828@value
 11267                           
 11268                           ;nanomodbus.c: 726:     err = recv_msg_footer(nmbs);
 11269     0364  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11270     0365  00BA               	movwf	recv_msg_footer@nmbs+1
 11271     0366  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11272     0367  00B9               	movwf	recv_msg_footer@nmbs
 11273     0368  318A  22F0  3183   	fcall	_recv_msg_footer
 11274     036B  00E0               	movwf	handle_write_single_coil@nanomodbus$F3828@err
 11275                           
 11276                           ;nanomodbus.c: 727:     if (err != NMBS_ERROR_NONE)
 11277     036C  0860               	movf	handle_write_single_coil@nanomodbus$F3828@err,w
 11278     036D  1D03               	btfss	3,2
 11279     036E  2B4C               	goto	l7615
 11280                           
 11281                           ;nanomodbus.c: 730:     if (!nmbs->msg.ignored) {
 11282     036F  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11283     0370  3E37               	addlw	55
 11284     0371  0086               	movwf	6
 11285     0372  3000               	movlw	0
 11286     0373  3D59               	addwfc	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11287     0374  0087               	movwf	7
 11288     0375  0801               	movf	1,w
 11289     0376  1D03               	btfss	3,2
 11290     0377  2C1B               	goto	l7671
 11291                           
 11292                           ;nanomodbus.c: 731:         if (nmbs->callbacks.write_single_coil) {
 11293     0378  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11294     0379  3E3C               	addlw	60
 11295     037A  0086               	movwf	6
 11296     037B  3000               	movlw	0
 11297     037C  3D59               	addwfc	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11298     037D  0087               	movwf	7
 11299     037E  0016               	moviw fsr1++
 11300     037F  0401               	iorwf	1,w
 11301     0380  1903               	btfsc	3,2
 11302     0381  2C12               	goto	l7667
 11303                           
 11304                           ;nanomodbus.c: 732:             if (value != 0 && value != 0xFF00)
 11305     0382  085E               	movf	handle_write_single_coil@nanomodbus$F3828@value,w
 11306     0383  045F               	iorwf	handle_write_single_coil@nanomodbus$F3828@value+1,w
 11307     0384  1903               	btfsc	3,2
 11308     0385  2B93               	goto	l7641
 11309     0386  0A5F               	incf	handle_write_single_coil@nanomodbus$F3828@value+1,w
 11310     0387  045E               	iorwf	handle_write_single_coil@nanomodbus$F3828@value,w
 11311     0388  1903               	btfsc	3,2
 11312     0389  2B93               	goto	l7641
 11313                           
 11314                           ;nanomodbus.c: 733:                 return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEG
      +                          AL_DATA_VALUE);
 11315     038A  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11316     038B  00C6               	movwf	send_exception_msg@nmbs+1
 11317     038C  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11318     038D  00C5               	movwf	send_exception_msg@nmbs
 11319     038E  3003               	movlw	3
 11320     038F  00C7               	movwf	send_exception_msg@exception
 11321     0390  3195  2547         	fcall	_send_exception_msg
 11322     0392  0008               	return
 11323     0393                     l7641:
 11324                           
 11325                           ;nanomodbus.c: 735:             err = nmbs->callbacks.write_single_coil(address,value, n
      +                          mbs->msg.unit_id, nmbs->platform.arg);
 11326     0393  085D               	movf	handle_write_single_coil@nanomodbus$F3828@address+1,w
 11327     0394  00A1               	movwf	handle_write_single_coil@address+1
 11328     0395  085C               	movf	handle_write_single_coil@nanomodbus$F3828@address,w
 11329     0396  00A0               	movwf	handle_write_single_coil@address
 11330     0397  085E               	movf	handle_write_single_coil@nanomodbus$F3828@value,w
 11331     0398  045F               	iorwf	handle_write_single_coil@nanomodbus$F3828@value+1,w
 11332     0399  1903               	btfsc	3,2
 11333     039A  2B9D               	goto	u4770
 11334     039B  3001               	movlw	1
 11335     039C  2B9E               	goto	u4780
 11336     039D                     u4770:
 11337     039D  3000               	movlw	0
 11338     039E                     u4780:
 11339     039E  00A2               	movwf	handle_write_single_coil@coils
 11340     039F  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11341     03A0  3E32               	addlw	50
 11342     03A1  0086               	movwf	6
 11343     03A2  3000               	movlw	0
 11344     03A3  3D59               	addwfc	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11345     03A4  0087               	movwf	7
 11346     03A5  0801               	movf	1,w
 11347     03A6  00A3               	movwf	handle_write_single_coil@unit_id
 11348     03A7  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11349     03A8  3E46               	addlw	70
 11350     03A9  0086               	movwf	6
 11351     03AA  3000               	movlw	0
 11352     03AB  3D59               	addwfc	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11353     03AC  0087               	movwf	7
 11354     03AD  3F40               	moviw [0]fsr1
 11355     03AE  00A4               	movwf	handle_write_single_coil@arg
 11356     03AF  3F41               	moviw [1]fsr1
 11357     03B0  00A5               	movwf	handle_write_single_coil@arg+1
 11358     03B1  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11359     03B2  3E3C               	addlw	60
 11360     03B3  0086               	movwf	6
 11361     03B4  3000               	movlw	0
 11362     03B5  3D59               	addwfc	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11363     03B6  0087               	movwf	7
 11364     03B7  3F41               	moviw [1]fsr1
 11365     03B8  008A               	movwf	10
 11366     03B9  3F40               	moviw [0]fsr1
 11367     03BA  000A               	callw
 11368     03BB  3183               	pagesel	$
 11369     03BC  00E0               	movwf	handle_write_single_coil@nanomodbus$F3828@err
 11370                           
 11371                           ;nanomodbus.c: 736:             if (err != NMBS_ERROR_NONE) {
 11372     03BD  0860               	movf	handle_write_single_coil@nanomodbus$F3828@err,w
 11373     03BE  1903               	btfsc	3,2
 11374     03BF  2BDC               	goto	l7657
 11375                           
 11376                           ;nanomodbus.c: 737:                 if (((err) > 0 && (err) < 5))
 11377     03C0  0860               	movf	handle_write_single_coil@nanomodbus$F3828@err,w
 11378     03C1  3A80               	xorlw	128
 11379     03C2  3E7F               	addlw	-129
 11380     03C3  1C03               	skipc
 11381     03C4  2BD3               	goto	l7653
 11382     03C5  0860               	movf	handle_write_single_coil@nanomodbus$F3828@err,w
 11383     03C6  3A80               	xorlw	128
 11384     03C7  3E7B               	addlw	-133
 11385     03C8  1803               	skipnc
 11386     03C9  2BD3               	goto	l7653
 11387                           
 11388                           ;nanomodbus.c: 738:                     return send_exception_msg(nmbs, err);
 11389     03CA  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11390     03CB  00C6               	movwf	send_exception_msg@nmbs+1
 11391     03CC  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11392     03CD  00C5               	movwf	send_exception_msg@nmbs
 11393     03CE  0860               	movf	handle_write_single_coil@nanomodbus$F3828@err,w
 11394     03CF  00C7               	movwf	send_exception_msg@exception
 11395     03D0  3195  2547         	fcall	_send_exception_msg
 11396     03D2  0008               	return
 11397     03D3                     l7653:
 11398                           
 11399                           ;nanomodbus.c: 740:                 return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVE
      +                          R_DEVICE_FAILURE);
 11400     03D3  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11401     03D4  00C6               	movwf	send_exception_msg@nmbs+1
 11402     03D5  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11403     03D6  00C5               	movwf	send_exception_msg@nmbs
 11404     03D7  3004               	movlw	4
 11405     03D8  00C7               	movwf	send_exception_msg@exception
 11406     03D9  3195  2547         	fcall	_send_exception_msg
 11407     03DB  0008               	return
 11408     03DC                     l7657:
 11409                           
 11410                           ;nanomodbus.c: 743:             if (!nmbs->msg.broadcast) {
 11411     03DC  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11412     03DD  3E36               	addlw	54
 11413     03DE  0086               	movwf	6
 11414     03DF  3000               	movlw	0
 11415     03E0  3D59               	addwfc	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11416     03E1  0087               	movwf	7
 11417     03E2  0801               	movf	1,w
 11418     03E3  1D03               	btfss	3,2
 11419     03E4  2C2A               	goto	l7675
 11420                           
 11421                           ;nanomodbus.c: 744:                 put_res_header(nmbs, 4);
 11422     03E5  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11423     03E6  00AB               	movwf	put_res_header@nmbs+1
 11424     03E7  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11425     03E8  00AA               	movwf	put_res_header@nmbs
 11426     03E9  3004               	movlw	4
 11427     03EA  00AC               	movwf	put_res_header@data_length
 11428     03EB  3000               	movlw	0
 11429     03EC  00AD               	movwf	put_res_header@data_length+1
 11430     03ED  3192  2232  3183   	fcall	_put_res_header
 11431                           
 11432                           ;nanomodbus.c: 746:                 put_2(nmbs, address);
 11433     03F0  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11434     03F1  00A1               	movwf	put_2@nmbs+1
 11435     03F2  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11436     03F3  00A0               	movwf	put_2@nmbs
 11437     03F4  085D               	movf	handle_write_single_coil@nanomodbus$F3828@address+1,w
 11438     03F5  00A3               	movwf	put_2@data+1
 11439     03F6  085C               	movf	handle_write_single_coil@nanomodbus$F3828@address,w
 11440     03F7  00A2               	movwf	put_2@data
 11441     03F8  3196  265C  3183   	fcall	_put_2
 11442                           
 11443                           ;nanomodbus.c: 747:                 put_2(nmbs, value);
 11444     03FB  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11445     03FC  00A1               	movwf	put_2@nmbs+1
 11446     03FD  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11447     03FE  00A0               	movwf	put_2@nmbs
 11448     03FF  085F               	movf	handle_write_single_coil@nanomodbus$F3828@value+1,w
 11449     0400  00A3               	movwf	put_2@data+1
 11450     0401  085E               	movf	handle_write_single_coil@nanomodbus$F3828@value,w
 11451     0402  00A2               	movwf	put_2@data
 11452     0403  3196  265C  3183   	fcall	_put_2
 11453                           
 11454                           ;nanomodbus.c: 750:                 err = send_msg(nmbs);
 11455     0406  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11456     0407  00BF               	movwf	send_msg@nmbs+1
 11457     0408  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11458     0409  00BE               	movwf	send_msg@nmbs
 11459     040A  3189  2158  3183   	fcall	_send_msg
 11460     040D  00E0               	movwf	handle_write_single_coil@nanomodbus$F3828@err
 11461                           
 11462                           ;nanomodbus.c: 751:                 if (err != NMBS_ERROR_NONE)
 11463     040E  0860               	movf	handle_write_single_coil@nanomodbus$F3828@err,w
 11464     040F  1D03               	btfss	3,2
 11465     0410  2B4C               	goto	l7615
 11466     0411  2C2A               	goto	l7675
 11467     0412                     l7667:
 11468                           
 11469                           ;nanomodbus.c: 756:             return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_F
      +                          UNCTION);
 11470     0412  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11471     0413  00C6               	movwf	send_exception_msg@nmbs+1
 11472     0414  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11473     0415  00C5               	movwf	send_exception_msg@nmbs
 11474     0416  01C7               	clrf	send_exception_msg@exception
 11475     0417  0AC7               	incf	send_exception_msg@exception,f
 11476     0418  3195  2547         	fcall	_send_exception_msg
 11477     041A  0008               	return
 11478     041B                     l7671:	
 11479                           ;nanomodbus.c: 758:     }
 11480                           
 11481                           ;nanomodbus.c: 757:         }
 11482                           
 11483                           
 11484                           ;nanomodbus.c: 760:         return recv_write_single_coil_res(nmbs, address, value);
 11485     041B  0859               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs+1,w
 11486     041C  00CE               	movwf	recv_write_single_coil_res@nmbs+1
 11487     041D  0858               	movf	handle_write_single_coil@nanomodbus$F3828@nmbs,w
 11488     041E  00CD               	movwf	recv_write_single_coil_res@nmbs
 11489     041F  085D               	movf	handle_write_single_coil@nanomodbus$F3828@address+1,w
 11490     0420  00D0               	movwf	recv_write_single_coil_res@address+1
 11491     0421  085C               	movf	handle_write_single_coil@nanomodbus$F3828@address,w
 11492     0422  00CF               	movwf	recv_write_single_coil_res@address
 11493     0423  085F               	movf	handle_write_single_coil@nanomodbus$F3828@value+1,w
 11494     0424  00D2               	movwf	recv_write_single_coil_res@value_req+1
 11495     0425  085E               	movf	handle_write_single_coil@nanomodbus$F3828@value,w
 11496     0426  00D1               	movwf	recv_write_single_coil_res@value_req
 11497     0427  318C  2424         	fcall	_recv_write_single_coil_res
 11498     0429  0008               	return
 11499     042A                     l7675:
 11500                           
 11501                           ;nanomodbus.c: 763:     return NMBS_ERROR_NONE;
 11502     042A  3000               	movlw	0
 11503     042B  0008               	return
 11504     042C                     __end_of_handle_write_single_coil@nanomodbus$F3828:
 11505                           
 11506                           	psect	text13
 11507     0C24                     __ptext13:	
 11508 ;; *************** function _recv_write_single_coil_res *****************
 11509 ;; Defined at:
 11510 ;;		line 450 in file "nanomodbus.c"
 11511 ;; Parameters:    Size  Location     Type
 11512 ;;  nmbs            2   45[BANK0 ] PTR struct nmbs_t
 11513 ;;		 -> main@nmbs(76), 
 11514 ;;  address         2   47[BANK0 ] unsigned short 
 11515 ;;  value_req       2   49[BANK0 ] unsigned short 
 11516 ;; Auto vars:     Size  Location     Type
 11517 ;;  value_res       2   53[BANK0 ] unsigned short 
 11518 ;;  address_res     2   51[BANK0 ] unsigned short 
 11519 ;;  err             1   55[BANK0 ] enum E10857
 11520 ;; Return value:  Size  Location     Type
 11521 ;;                  1    wreg      enum E10857
 11522 ;; Registers used:
 11523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11524 ;; Tracked objects:
 11525 ;;		On entry : 3F/0
 11526 ;;		On exit  : 3F/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11529 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;Total ram usage:       11 bytes
 11534 ;; Hardware stack levels used: 1
 11535 ;; Hardware stack levels required when called: 10
 11536 ;; This function calls:
 11537 ;;		_get_2
 11538 ;;		_recv
 11539 ;;		_recv_msg_footer
 11540 ;;		_recv_res_header
 11541 ;; This function is called by:
 11542 ;;		_handle_write_single_coil@nanomodbus$F3828
 11543 ;; This function uses a non-reentrant model
 11544 ;;
 11545                           
 11546     0C24                     _recv_write_single_coil_res:	
 11547                           ;psect for function _recv_write_single_coil_res
 11548                           
 11549                           
 11550                           ;nanomodbus.c: 451:     nmbs_error err = recv_res_header(nmbs);
 11551                           
 11552                           ;incstack = 0
 11553                           ; Regs used in _recv_write_single_coil_res: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11554     0C24  084E               	movf	recv_write_single_coil_res@nmbs+1,w
 11555     0C25  00C3               	movwf	recv_res_header@nmbs+1
 11556     0C26  084D               	movf	recv_write_single_coil_res@nmbs,w
 11557     0C27  00C2               	movwf	recv_res_header@nmbs
 11558     0C28  3184  24E8  318C   	fcall	_recv_res_header
 11559     0C2B  00D7               	movwf	recv_write_single_coil_res@err
 11560                           
 11561                           ;nanomodbus.c: 452:     if (err != NMBS_ERROR_NONE)
 11562     0C2C  0857               	movf	recv_write_single_coil_res@err,w
 11563     0C2D  1903               	btfsc	3,2
 11564     0C2E  2C31               	goto	l7407
 11565     0C2F                     l7403:
 11566                           
 11567                           ;nanomodbus.c: 453:         return err;
 11568     0C2F  0857               	movf	recv_write_single_coil_res@err,w
 11569     0C30  0008               	return
 11570     0C31                     l7407:
 11571                           
 11572                           ;nanomodbus.c: 455:     err = recv(nmbs, 4);
 11573     0C31  084E               	movf	recv_write_single_coil_res@nmbs+1,w
 11574     0C32  00B5               	movwf	recv@nmbs+1
 11575     0C33  084D               	movf	recv_write_single_coil_res@nmbs,w
 11576     0C34  00B4               	movwf	recv@nmbs
 11577     0C35  3004               	movlw	4
 11578     0C36  00B6               	movwf	recv@count
 11579     0C37  3000               	movlw	0
 11580     0C38  00B7               	movwf	recv@count+1
 11581     0C39  3197  27C9  318C   	fcall	_recv
 11582     0C3C  00D7               	movwf	recv_write_single_coil_res@err
 11583                           
 11584                           ;nanomodbus.c: 456:     if (err != NMBS_ERROR_NONE)
 11585     0C3D  0857               	movf	recv_write_single_coil_res@err,w
 11586     0C3E  1D03               	btfss	3,2
 11587     0C3F  2C2F               	goto	l7403
 11588                           
 11589                           ;nanomodbus.c: 459:     uint16_t address_res = get_2(nmbs);
 11590     0C40  084E               	movf	recv_write_single_coil_res@nmbs+1,w
 11591     0C41  00A1               	movwf	get_2@nmbs+1
 11592     0C42  084D               	movf	recv_write_single_coil_res@nmbs,w
 11593     0C43  00A0               	movwf	get_2@nmbs
 11594     0C44  3188  209E  318C   	fcall	_get_2
 11595     0C47  0821               	movf	?_get_2+1,w
 11596     0C48  00D4               	movwf	recv_write_single_coil_res@address_res+1
 11597     0C49  0820               	movf	?_get_2,w
 11598     0C4A  00D3               	movwf	recv_write_single_coil_res@address_res
 11599                           
 11600                           ;nanomodbus.c: 460:     uint16_t value_res = get_2(nmbs);
 11601     0C4B  084E               	movf	recv_write_single_coil_res@nmbs+1,w
 11602     0C4C  00A1               	movwf	get_2@nmbs+1
 11603     0C4D  084D               	movf	recv_write_single_coil_res@nmbs,w
 11604     0C4E  00A0               	movwf	get_2@nmbs
 11605     0C4F  3188  209E  318C   	fcall	_get_2
 11606     0C52  0821               	movf	?_get_2+1,w
 11607     0C53  00D6               	movwf	recv_write_single_coil_res@value_res+1
 11608     0C54  0820               	movf	?_get_2,w
 11609     0C55  00D5               	movwf	recv_write_single_coil_res@value_res
 11610                           
 11611                           ;nanomodbus.c: 464:     err = recv_msg_footer(nmbs);
 11612     0C56  084E               	movf	recv_write_single_coil_res@nmbs+1,w
 11613     0C57  00BA               	movwf	recv_msg_footer@nmbs+1
 11614     0C58  084D               	movf	recv_write_single_coil_res@nmbs,w
 11615     0C59  00B9               	movwf	recv_msg_footer@nmbs
 11616     0C5A  318A  22F0  318C   	fcall	_recv_msg_footer
 11617     0C5D  00D7               	movwf	recv_write_single_coil_res@err
 11618                           
 11619                           ;nanomodbus.c: 465:     if (err != NMBS_ERROR_NONE)
 11620     0C5E  0857               	movf	recv_write_single_coil_res@err,w
 11621     0C5F  1D03               	btfss	3,2
 11622     0C60  2C2F               	goto	l7403
 11623                           
 11624                           ;nanomodbus.c: 468:     if (address_res != address)
 11625     0C61  0850               	movf	recv_write_single_coil_res@address+1,w
 11626     0C62  0654               	xorwf	recv_write_single_coil_res@address_res+1,w
 11627     0C63  1D03               	skipz
 11628     0C64  2C67               	goto	u4495
 11629     0C65  084F               	movf	recv_write_single_coil_res@address,w
 11630     0C66  0653               	xorwf	recv_write_single_coil_res@address_res,w
 11631     0C67                     u4495:
 11632     0C67  1903               	skipnz
 11633     0C68  2C6B               	goto	l7429
 11634     0C69                     l7425:
 11635                           
 11636                           ;nanomodbus.c: 469:         return NMBS_ERROR_INVALID_RESPONSE;
 11637     0C69  30FE               	movlw	254
 11638     0C6A  0008               	return
 11639     0C6B                     l7429:
 11640                           
 11641                           ;nanomodbus.c: 471:     if (value_res != value_req)
 11642     0C6B  0852               	movf	recv_write_single_coil_res@value_req+1,w
 11643     0C6C  0656               	xorwf	recv_write_single_coil_res@value_res+1,w
 11644     0C6D  1D03               	skipz
 11645     0C6E  2C71               	goto	u4505
 11646     0C6F  0851               	movf	recv_write_single_coil_res@value_req,w
 11647     0C70  0655               	xorwf	recv_write_single_coil_res@value_res,w
 11648     0C71                     u4505:
 11649     0C71  1D03               	btfss	3,2
 11650     0C72  2C69               	goto	l7425
 11651                           
 11652                           ;nanomodbus.c: 474:     return NMBS_ERROR_NONE;
 11653     0C73  3000               	movlw	0
 11654     0C74  0008               	return
 11655     0C75                     __end_of_recv_write_single_coil_res:
 11656                           
 11657                           	psect	text14
 11658     0E9C                     __ptext14:	
 11659 ;; *************** function _handle_write_single_coil *****************
 11660 ;; Defined at:
 11661 ;;		line 75 in file "modbus_imp.c"
 11662 ;; Parameters:    Size  Location     Type
 11663 ;;  address         2    0[BANK0 ] unsigned short 
 11664 ;;  coils           1    2[BANK0 ] _Bool 
 11665 ;;  unit_id         1    3[BANK0 ] unsigned char 
 11666 ;;  arg             2    4[BANK0 ] PTR void 
 11667 ;;		 -> main@registers(45), 
 11668 ;; Auto vars:     Size  Location     Type
 11669 ;;  server_coils    2   13[BANK0 ] PTR unsigned char [1]
 11670 ;;		 -> handle_write_single_coil@arg$server_coils$coils(1), registers$server_coils$coils$coils(1), 
 11671 ;; Return value:  Size  Location     Type
 11672 ;;                  1    wreg      enum E10966
 11673 ;; Registers used:
 11674 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11675 ;; Tracked objects:
 11676 ;;		On entry : 3F/0
 11677 ;;		On exit  : 3F/0
 11678 ;;		Unchanged: 0/0
 11679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11680 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;Total ram usage:       15 bytes
 11685 ;; Hardware stack levels used: 1
 11686 ;; Hardware stack levels required when called: 5
 11687 ;; This function calls:
 11688 ;;		Nothing
 11689 ;; This function is called by:
 11690 ;;		_main
 11691 ;;		_handle_write_single_coil@nanomodbus$F3828
 11692 ;; This function uses a non-reentrant model
 11693 ;;
 11694                           
 11695     0E9C                     _handle_write_single_coil:	
 11696                           ;psect for function _handle_write_single_coil
 11697                           
 11698                           
 11699                           ;modbus_imp.c: 76:   if (address > 5)
 11700                           
 11701                           ;incstack = 0
 11702                           ; Regs used in _handle_write_single_coil: [wreg+fsr1l+fsr1h+status,2+status,0]
 11703     0E9C  3000               	movlw	0
 11704     0E9D  0221               	subwf	handle_write_single_coil@address+1,w
 11705     0E9E  3006               	movlw	6
 11706     0E9F  1903               	skipnz
 11707     0EA0  0220               	subwf	handle_write_single_coil@address,w
 11708     0EA1  1C03               	skipc
 11709     0EA2  2EA5               	goto	l7373
 11710                           
 11711                           ;modbus_imp.c: 77:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 11712     0EA3  3002               	movlw	2
 11713     0EA4  0008               	return
 11714     0EA5                     l7373:
 11715                           
 11716                           ;modbus_imp.c: 80:   nmbs_bitfield *server_coils = &((mod_bus_registers*) arg)->server_c
      +                          oils.coils;
 11717     0EA5  0825               	movf	handle_write_single_coil@arg+1,w
 11718     0EA6  00AE               	movwf	handle_write_single_coil@server_coils+1
 11719     0EA7  0824               	movf	handle_write_single_coil@arg,w
 11720     0EA8  00AD               	movwf	handle_write_single_coil@server_coils
 11721                           
 11722                           ;modbus_imp.c: 81:   (((*server_coils)[(address) / 8]) = ((coils) ? (((*server_coils)[(a
      +                          ddress) / 8]) | (0x1 << ((address) % 8))) : (((*server_coils)[(address) / 8]) & ~(0x1 <<
      +                           ((address) % 8)))));
 11723     0EA9  0822               	movf	handle_write_single_coil@coils,w
 11724     0EAA  1D03               	btfss	3,2
 11725     0EAB  2ECE               	goto	l7379
 11726     0EAC  0821               	movf	handle_write_single_coil@address+1,w
 11727     0EAD  00A7               	movwf	??_handle_write_single_coil+1
 11728     0EAE  0820               	movf	handle_write_single_coil@address,w
 11729     0EAF  00A6               	movwf	??_handle_write_single_coil
 11730     0EB0  36A7               	lsrf	??_handle_write_single_coil+1,f
 11731     0EB1  0CA6               	rrf	??_handle_write_single_coil,f
 11732     0EB2  36A7               	lsrf	??_handle_write_single_coil+1,f
 11733     0EB3  0CA6               	rrf	??_handle_write_single_coil,f
 11734     0EB4  36A7               	lsrf	??_handle_write_single_coil+1,f
 11735     0EB5  0CA6               	rrf	??_handle_write_single_coil,f
 11736     0EB6  0826               	movf	??_handle_write_single_coil,w
 11737     0EB7  072D               	addwf	handle_write_single_coil@server_coils,w
 11738     0EB8  0086               	movwf	6
 11739     0EB9  0827               	movf	??_handle_write_single_coil+1,w
 11740     0EBA  3D2E               	addwfc	handle_write_single_coil@server_coils+1,w
 11741     0EBB  0087               	movwf	7
 11742     0EBC  3001               	movlw	1
 11743     0EBD  00A8               	movwf	??_handle_write_single_coil+2
 11744     0EBE  0820               	movf	handle_write_single_coil@address,w
 11745     0EBF  3907               	andlw	7
 11746     0EC0  0A89               	incf	9,f
 11747     0EC1  2EC3               	goto	u4424
 11748     0EC2                     u4425:
 11749     0EC2  35A8               	lslf	??_handle_write_single_coil+2,f
 11750     0EC3                     u4424:
 11751     0EC3  0B89               	decfsz	9,f
 11752     0EC4  2EC2               	goto	u4425
 11753     0EC5  0828               	movf	??_handle_write_single_coil+2,w
 11754     0EC6  3AFF               	xorlw	255
 11755     0EC7  0501               	andwf	1,w
 11756     0EC8  00A9               	movwf	??_handle_write_single_coil+3
 11757     0EC9  01AA               	clrf	??_handle_write_single_coil+4
 11758     0ECA  0829               	movf	??_handle_write_single_coil+3,w
 11759     0ECB  00AB               	movwf	_handle_write_single_coil$2833
 11760     0ECC  082A               	movf	??_handle_write_single_coil+4,w
 11761     0ECD  2EEE               	goto	L6
 11762     0ECE                     l7379:
 11763     0ECE  3001               	movlw	1
 11764     0ECF  00A6               	movwf	??_handle_write_single_coil
 11765     0ED0  3000               	movlw	0
 11766     0ED1  00A7               	movwf	??_handle_write_single_coil+1
 11767     0ED2  0820               	movf	handle_write_single_coil@address,w
 11768     0ED3  3907               	andlw	7
 11769     0ED4  0A89               	incf	9,f
 11770     0ED5  2ED8               	goto	u4434
 11771     0ED6                     u4435:
 11772     0ED6  35A6               	lslf	??_handle_write_single_coil,f
 11773     0ED7  0DA7               	rlf	??_handle_write_single_coil+1,f
 11774     0ED8                     u4434:
 11775     0ED8  0B89               	decfsz	9,f
 11776     0ED9  2ED6               	goto	u4435
 11777     0EDA  0821               	movf	handle_write_single_coil@address+1,w
 11778     0EDB  00A9               	movwf	??_handle_write_single_coil+3
 11779     0EDC  0820               	movf	handle_write_single_coil@address,w
 11780     0EDD  00A8               	movwf	??_handle_write_single_coil+2
 11781     0EDE  36A9               	lsrf	??_handle_write_single_coil+3,f
 11782     0EDF  0CA8               	rrf	??_handle_write_single_coil+2,f
 11783     0EE0  36A9               	lsrf	??_handle_write_single_coil+3,f
 11784     0EE1  0CA8               	rrf	??_handle_write_single_coil+2,f
 11785     0EE2  36A9               	lsrf	??_handle_write_single_coil+3,f
 11786     0EE3  0CA8               	rrf	??_handle_write_single_coil+2,f
 11787     0EE4  0828               	movf	??_handle_write_single_coil+2,w
 11788     0EE5  072D               	addwf	handle_write_single_coil@server_coils,w
 11789     0EE6  0086               	movwf	6
 11790     0EE7  0829               	movf	??_handle_write_single_coil+3,w
 11791     0EE8  3D2E               	addwfc	handle_write_single_coil@server_coils+1,w
 11792     0EE9  0087               	movwf	7
 11793     0EEA  0826               	movf	??_handle_write_single_coil,w
 11794     0EEB  0401               	iorwf	1,w
 11795     0EEC  00AB               	movwf	_handle_write_single_coil$2833
 11796     0EED  0827               	movf	??_handle_write_single_coil+1,w
 11797     0EEE                     L6:
 11798     0EEE  00AC               	movwf	_handle_write_single_coil$2833+1
 11799     0EEF  0821               	movf	handle_write_single_coil@address+1,w
 11800     0EF0  00A7               	movwf	??_handle_write_single_coil+1
 11801     0EF1  0820               	movf	handle_write_single_coil@address,w
 11802     0EF2  00A6               	movwf	??_handle_write_single_coil
 11803     0EF3  36A7               	lsrf	??_handle_write_single_coil+1,f
 11804     0EF4  0CA6               	rrf	??_handle_write_single_coil,f
 11805     0EF5  36A7               	lsrf	??_handle_write_single_coil+1,f
 11806     0EF6  0CA6               	rrf	??_handle_write_single_coil,f
 11807     0EF7  36A7               	lsrf	??_handle_write_single_coil+1,f
 11808     0EF8  0CA6               	rrf	??_handle_write_single_coil,f
 11809     0EF9  0826               	movf	??_handle_write_single_coil,w
 11810     0EFA  072D               	addwf	handle_write_single_coil@server_coils,w
 11811     0EFB  0086               	movwf	6
 11812     0EFC  0827               	movf	??_handle_write_single_coil+1,w
 11813     0EFD  3D2E               	addwfc	handle_write_single_coil@server_coils+1,w
 11814     0EFE  0087               	movwf	7
 11815     0EFF  082B               	movf	_handle_write_single_coil$2833,w
 11816     0F00  0081               	movwf	1
 11817                           
 11818                           ;modbus_imp.c: 83:   return NMBS_ERROR_NONE;
 11819     0F01  3000               	movlw	0
 11820     0F02  0008               	return
 11821     0F03                     __end_of_handle_write_single_coil:
 11822                           
 11823                           	psect	text15
 11824     12B2                     __ptext15:	
 11825 ;; *************** function _handle_read_input_registers *****************
 11826 ;; Defined at:
 11827 ;;		line 709 in file "nanomodbus.c"
 11828 ;; Parameters:    Size  Location     Type
 11829 ;;  nmbs            2   73[BANK0 ] PTR struct nmbs_t
 11830 ;;		 -> main@nmbs(76), 
 11831 ;; Auto vars:     Size  Location     Type
 11832 ;;		None
 11833 ;; Return value:  Size  Location     Type
 11834 ;;                  1    wreg      enum E10857
 11835 ;; Registers used:
 11836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11837 ;; Tracked objects:
 11838 ;;		On entry : 3F/0
 11839 ;;		On exit  : 3E/0
 11840 ;;		Unchanged: 0/0
 11841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11842 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;Total ram usage:        2 bytes
 11847 ;; Hardware stack levels used: 1
 11848 ;; Hardware stack levels required when called: 12
 11849 ;; This function calls:
 11850 ;;		_handle_read_registers
 11851 ;; This function is called by:
 11852 ;;		_handle_req_fc
 11853 ;; This function uses a non-reentrant model
 11854 ;;
 11855                           
 11856     12B2                     _handle_read_input_registers:	
 11857                           ;psect for function _handle_read_input_registers
 11858                           
 11859                           
 11860                           ;nanomodbus.c: 710:     return handle_read_registers(nmbs, nmbs->callbacks.read_input_re
      +                          gisters);
 11861                           
 11862                           ;incstack = 0
 11863                           ; Regs used in _handle_read_input_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11864     12B2  086A               	movf	handle_read_input_registers@nmbs+1,w
 11865     12B3  00DE               	movwf	handle_read_registers@nmbs+1
 11866     12B4  0869               	movf	handle_read_input_registers@nmbs,w
 11867     12B5  00DD               	movwf	handle_read_registers@nmbs
 11868     12B6  0869               	movf	handle_read_input_registers@nmbs,w
 11869     12B7  3E3A               	addlw	58
 11870     12B8  0086               	movwf	6
 11871     12B9  3000               	movlw	0
 11872     12BA  3D6A               	addwfc	handle_read_input_registers@nmbs+1,w
 11873     12BB  0087               	movwf	7
 11874     12BC  3F40               	moviw [0]fsr1
 11875     12BD  00DF               	movwf	handle_read_registers@callback
 11876     12BE  3F41               	moviw [1]fsr1
 11877     12BF  00E0               	movwf	handle_read_registers@callback+1
 11878     12C0  3181  21E5         	fcall	_handle_read_registers
 11879     12C2  0008               	return
 11880     12C3                     __end_of_handle_read_input_registers:
 11881                           
 11882                           	psect	text16
 11883     12A1                     __ptext16:	
 11884 ;; *************** function _handle_read_holding_registers *****************
 11885 ;; Defined at:
 11886 ;;		line 702 in file "nanomodbus.c"
 11887 ;; Parameters:    Size  Location     Type
 11888 ;;  nmbs            2   73[BANK0 ] PTR struct nmbs_t
 11889 ;;		 -> main@nmbs(76), 
 11890 ;; Auto vars:     Size  Location     Type
 11891 ;;		None
 11892 ;; Return value:  Size  Location     Type
 11893 ;;                  1    wreg      enum E10857
 11894 ;; Registers used:
 11895 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11896 ;; Tracked objects:
 11897 ;;		On entry : 3F/0
 11898 ;;		On exit  : 3E/0
 11899 ;;		Unchanged: 0/0
 11900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11901 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;Total ram usage:        2 bytes
 11906 ;; Hardware stack levels used: 1
 11907 ;; Hardware stack levels required when called: 12
 11908 ;; This function calls:
 11909 ;;		_handle_read_registers
 11910 ;; This function is called by:
 11911 ;;		_handle_req_fc
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915     12A1                     _handle_read_holding_registers:	
 11916                           ;psect for function _handle_read_holding_registers
 11917                           
 11918                           
 11919                           ;nanomodbus.c: 703:     return handle_read_registers(nmbs, nmbs->callbacks.read_holding_
      +                          registers);
 11920                           
 11921                           ;incstack = 0
 11922                           ; Regs used in _handle_read_holding_registers: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11923     12A1  086A               	movf	handle_read_holding_registers@nmbs+1,w
 11924     12A2  00DE               	movwf	handle_read_registers@nmbs+1
 11925     12A3  0869               	movf	handle_read_holding_registers@nmbs,w
 11926     12A4  00DD               	movwf	handle_read_registers@nmbs
 11927     12A5  0869               	movf	handle_read_holding_registers@nmbs,w
 11928     12A6  3E38               	addlw	56
 11929     12A7  0086               	movwf	6
 11930     12A8  3000               	movlw	0
 11931     12A9  3D6A               	addwfc	handle_read_holding_registers@nmbs+1,w
 11932     12AA  0087               	movwf	7
 11933     12AB  3F40               	moviw [0]fsr1
 11934     12AC  00DF               	movwf	handle_read_registers@callback
 11935     12AD  3F41               	moviw [1]fsr1
 11936     12AE  00E0               	movwf	handle_read_registers@callback+1
 11937     12AF  3181  21E5         	fcall	_handle_read_registers
 11938     12B1  0008               	return
 11939     12B2                     __end_of_handle_read_holding_registers:
 11940                           
 11941                           	psect	text17
 11942     01E5                     __ptext17:	
 11943 ;; *************** function _handle_read_registers *****************
 11944 ;; Defined at:
 11945 ;;		line 626 in file "nanomodbus.c"
 11946 ;; Parameters:    Size  Location     Type
 11947 ;;  nmbs            2   61[BANK0 ] PTR struct nmbs_t
 11948 ;;		 -> main@nmbs(76), 
 11949 ;;  callback        2   63[BANK0 ] PTR FTN(unsigned short ,
 11950 ;;		 -> handler_read_input_registers(1), handler_read_holding_registers(1), 
 11951 ;; Auto vars:     Size  Location     Type
 11952 ;;  i               2   67[BANK1 ] int 
 11953 ;;  regs_bytes      1   66[BANK1 ] unsigned char 
 11954 ;;  regs           64    0[BANK1 ] unsigned short [32]
 11955 ;;  quantity        2   69[BANK1 ] unsigned short 
 11956 ;;  address         2   64[BANK1 ] unsigned short 
 11957 ;;  err             1   71[BANK1 ] enum E10857
 11958 ;; Return value:  Size  Location     Type
 11959 ;;                  1    wreg      enum E10857
 11960 ;; Registers used:
 11961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11962 ;; Tracked objects:
 11963 ;;		On entry : 3F/0
 11964 ;;		On exit  : 3E/0
 11965 ;;		Unchanged: 0/0
 11966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;      Locals:         0       0      72       0       0       0       0       0       0       0       0       0       
      +0       0
 11969 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11970 ;;      Totals:         0      12      72       0       0       0       0       0       0       0       0       0       
      +0       0
 11971 ;;Total ram usage:       84 bytes
 11972 ;; Hardware stack levels used: 1
 11973 ;; Hardware stack levels required when called: 11
 11974 ;; This function calls:
 11975 ;;		_get_2
 11976 ;;		_handler_read_holding_registers
 11977 ;;		_handler_read_input_registers
 11978 ;;		_put_1
 11979 ;;		_put_2
 11980 ;;		_put_res_header
 11981 ;;		_recv
 11982 ;;		_recv_msg_footer
 11983 ;;		_recv_read_registers_res
 11984 ;;		_send_exception_msg
 11985 ;;		_send_msg
 11986 ;; This function is called by:
 11987 ;;		_handle_read_holding_registers
 11988 ;;		_handle_read_input_registers
 11989 ;; This function uses a non-reentrant model
 11990 ;;
 11991                           
 11992     01E5                     _handle_read_registers:	
 11993                           ;psect for function _handle_read_registers
 11994                           
 11995                           
 11996                           ;nanomodbus.c: 626: static nmbs_error handle_read_registers(nmbs_t* nmbs,;nanomodbus.c: 
      +                          627:                                         nmbs_error (*callback)(uint16_t, uint16_t, 
      +                          uint16_t*, uint8_t, void*)) {;nanomodbus.c: 628:     nmbs_error err = recv(nmbs, 4);
 11997                           
 11998                           ;incstack = 0
 11999                           ; Regs used in _handle_read_registers: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12000     01E5  085E               	movf	handle_read_registers@nmbs+1,w
 12001     01E6  00B5               	movwf	recv@nmbs+1
 12002     01E7  085D               	movf	handle_read_registers@nmbs,w
 12003     01E8  00B4               	movwf	recv@nmbs
 12004     01E9  3004               	movlw	4
 12005     01EA  00B6               	movwf	recv@count
 12006     01EB  3000               	movlw	0
 12007     01EC  00B7               	movwf	recv@count+1
 12008     01ED  3197  27C9  3181   	fcall	_recv
 12009     01F0  0141               	movlb	1	; select bank1
 12010     01F1  00E7               	movwf	handle_read_registers@err^(0+128)
 12011                           
 12012                           ;nanomodbus.c: 629:     if (err != NMBS_ERROR_NONE)
 12013     01F2  0867               	movf	handle_read_registers@err^(0+128),w
 12014     01F3  1903               	btfsc	3,2
 12015     01F4  29F7               	goto	l7461
 12016     01F5                     l7457:
 12017                           
 12018                           ;nanomodbus.c: 630:         return err;
 12019     01F5  0867               	movf	handle_read_registers@err^(0+128),w
 12020     01F6  0008               	return
 12021     01F7                     l7461:
 12022                           
 12023                           ;nanomodbus.c: 632:     uint16_t address = get_2(nmbs);
 12024     01F7  0140               	movlb	0	; select bank0
 12025     01F8  085E               	movf	handle_read_registers@nmbs+1,w
 12026     01F9  00A1               	movwf	get_2@nmbs+1
 12027     01FA  085D               	movf	handle_read_registers@nmbs,w
 12028     01FB  00A0               	movwf	get_2@nmbs
 12029     01FC  3188  209E  3181   	fcall	_get_2
 12030     01FF  0821               	movf	?_get_2+1,w
 12031     0200  0141               	movlb	1	; select bank1
 12032     0201  00E1               	movwf	(handle_read_registers@address+1)^(0+128)
 12033     0202  0140               	movlb	0	; select bank0
 12034     0203  0820               	movf	?_get_2,w
 12035     0204  0141               	movlb	1	; select bank1
 12036     0205  00E0               	movwf	handle_read_registers@address^(0+128)
 12037                           
 12038                           ;nanomodbus.c: 633:     uint16_t quantity = get_2(nmbs);
 12039     0206  0140               	movlb	0	; select bank0
 12040     0207  085E               	movf	handle_read_registers@nmbs+1,w
 12041     0208  00A1               	movwf	get_2@nmbs+1
 12042     0209  085D               	movf	handle_read_registers@nmbs,w
 12043     020A  00A0               	movwf	get_2@nmbs
 12044     020B  3188  209E  3181   	fcall	_get_2
 12045     020E  0821               	movf	?_get_2+1,w
 12046     020F  0141               	movlb	1	; select bank1
 12047     0210  00E6               	movwf	(handle_read_registers@quantity+1)^(0+128)
 12048     0211  0140               	movlb	0	; select bank0
 12049     0212  0820               	movf	?_get_2,w
 12050     0213  0141               	movlb	1	; select bank1
 12051     0214  00E5               	movwf	handle_read_registers@quantity^(0+128)
 12052                           
 12053                           ;nanomodbus.c: 637:     err = recv_msg_footer(nmbs);
 12054     0215  0140               	movlb	0	; select bank0
 12055     0216  085E               	movf	handle_read_registers@nmbs+1,w
 12056     0217  00BA               	movwf	recv_msg_footer@nmbs+1
 12057     0218  085D               	movf	handle_read_registers@nmbs,w
 12058     0219  00B9               	movwf	recv_msg_footer@nmbs
 12059     021A  318A  22F0  3181   	fcall	_recv_msg_footer
 12060     021D  0141               	movlb	1	; select bank1
 12061     021E  00E7               	movwf	handle_read_registers@err^(0+128)
 12062                           
 12063                           ;nanomodbus.c: 638:     if (err != NMBS_ERROR_NONE)
 12064     021F  0867               	movf	handle_read_registers@err^(0+128),w
 12065     0220  1D03               	btfss	3,2
 12066     0221  29F5               	goto	l7457
 12067                           
 12068                           ;nanomodbus.c: 641:     if (!nmbs->msg.ignored) {
 12069     0222  0140               	movlb	0	; select bank0
 12070     0223  085D               	movf	handle_read_registers@nmbs,w
 12071     0224  3E37               	addlw	55
 12072     0225  0086               	movwf	6
 12073     0226  3000               	movlw	0
 12074     0227  3D5E               	addwfc	handle_read_registers@nmbs+1,w
 12075     0228  0087               	movwf	7
 12076     0229  0801               	movf	1,w
 12077     022A  1D03               	btfss	3,2
 12078     022B  2B29               	goto	l7529
 12079                           
 12080                           ;nanomodbus.c: 642:         if (quantity < 1 || quantity > 125)
 12081     022C  0141               	movlb	1	; select bank1
 12082     022D  0865               	movf	handle_read_registers@quantity^(0+128),w
 12083     022E  0466               	iorwf	(handle_read_registers@quantity+1)^(0+128),w
 12084     022F  1903               	btfsc	3,2
 12085     0230  2A38               	goto	l7475
 12086     0231  3000               	movlw	0
 12087     0232  0266               	subwf	(handle_read_registers@quantity+1)^(0+128),w
 12088     0233  307E               	movlw	126
 12089     0234  1903               	skipnz
 12090     0235  0265               	subwf	handle_read_registers@quantity^(0+128),w
 12091     0236  1C03               	skipc
 12092     0237  2A42               	goto	l7479
 12093     0238                     l7475:
 12094                           
 12095                           ;nanomodbus.c: 643:             return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_D
      +                          ATA_VALUE);
 12096     0238  0140               	movlb	0	; select bank0
 12097     0239  085E               	movf	handle_read_registers@nmbs+1,w
 12098     023A  00C6               	movwf	send_exception_msg@nmbs+1
 12099     023B  085D               	movf	handle_read_registers@nmbs,w
 12100     023C  00C5               	movwf	send_exception_msg@nmbs
 12101     023D  3003               	movlw	3
 12102     023E  00C7               	movwf	send_exception_msg@exception
 12103     023F  3195  2547         	fcall	_send_exception_msg
 12104     0241  0008               	return
 12105     0242                     l7479:
 12106                           
 12107                           ;nanomodbus.c: 645:         if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0
      +                          xFFFF) + 1)
 12108     0242  0865               	movf	handle_read_registers@quantity^(0+128),w
 12109     0243  0140               	movlb	0	; select bank0
 12110     0244  00E1               	movwf	??_handle_read_registers
 12111     0245  0141               	movlb	1	; select bank1
 12112     0246  0866               	movf	(handle_read_registers@quantity+1)^(0+128),w
 12113     0247  0140               	movlb	0	; select bank0
 12114     0248  00E2               	movwf	??_handle_read_registers+1
 12115     0249  01E3               	clrf	??_handle_read_registers+2
 12116     024A  01E4               	clrf	??_handle_read_registers+3
 12117     024B  0141               	movlb	1	; select bank1
 12118     024C  0860               	movf	handle_read_registers@address^(0+128),w
 12119     024D  0140               	movlb	0	; select bank0
 12120     024E  00E5               	movwf	??_handle_read_registers+4
 12121     024F  0141               	movlb	1	; select bank1
 12122     0250  0861               	movf	(handle_read_registers@address+1)^(0+128),w
 12123     0251  0140               	movlb	0	; select bank0
 12124     0252  00E6               	movwf	??_handle_read_registers+5
 12125     0253  01E7               	clrf	??_handle_read_registers+6
 12126     0254  01E8               	clrf	??_handle_read_registers+7
 12127     0255  0865               	movf	??_handle_read_registers+4,w
 12128     0256  07E1               	addwf	??_handle_read_registers,f
 12129     0257  0866               	movf	??_handle_read_registers+5,w
 12130     0258  3DE2               	addwfc	??_handle_read_registers+1,f
 12131     0259  0867               	movf	??_handle_read_registers+6,w
 12132     025A  3DE3               	addwfc	??_handle_read_registers+2,f
 12133     025B  0868               	movf	??_handle_read_registers+7,w
 12134     025C  3DE4               	addwfc	??_handle_read_registers+3,f
 12135     025D  0864               	movf	??_handle_read_registers+3,w
 12136     025E  1D03               	btfss	3,2
 12137     025F  2A68               	goto	l7481
 12138     0260  3001               	movlw	1
 12139     0261  0261               	subwf	??_handle_read_registers,w
 12140     0262  3000               	movlw	0
 12141     0263  3B62               	subwfb	??_handle_read_registers+1,w
 12142     0264  3001               	movlw	1
 12143     0265  3B63               	subwfb	??_handle_read_registers+2,w
 12144     0266  1C03               	btfss	3,0
 12145     0267  2A72               	goto	l7485
 12146     0268                     l7481:
 12147                           
 12148                           ;nanomodbus.c: 646:             return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_D
      +                          ATA_ADDRESS);
 12149     0268  0140               	movlb	0	; select bank0
 12150     0269  085E               	movf	handle_read_registers@nmbs+1,w
 12151     026A  00C6               	movwf	send_exception_msg@nmbs+1
 12152     026B  085D               	movf	handle_read_registers@nmbs,w
 12153     026C  00C5               	movwf	send_exception_msg@nmbs
 12154     026D  3002               	movlw	2
 12155     026E  00C7               	movwf	send_exception_msg@exception
 12156     026F  3195  2547         	fcall	_send_exception_msg
 12157     0271  0008               	return
 12158     0272                     l7485:
 12159                           
 12160                           ;nanomodbus.c: 648:         if (callback) {
 12161     0272  0140               	movlb	0	; select bank0
 12162     0273  085F               	movf	handle_read_registers@callback,w
 12163     0274  0460               	iorwf	handle_read_registers@callback+1,w
 12164     0275  1903               	btfsc	3,2
 12165     0276  2B3B               	goto	l7533
 12166                           
 12167                           ;nanomodbus.c: 649:             uint16_t regs[32] = {0};
 12168     0277  30A0               	movlw	low handle_read_registers@regs
 12169     0278  0086               	movwf	6
 12170     0279  3000               	movlw	high handle_read_registers@regs
 12171     027A  0087               	movwf	7
 12172     027B  3040               	movlw	64
 12173     027C  00E1               	movwf	??_handle_read_registers
 12174     027D  3000               	movlw	0
 12175     027E                     u4580:
 12176     027E  001E               	movwi fsr1++
 12177     027F  0BE1               	decfsz	??_handle_read_registers,f
 12178     0280  2A7E               	goto	u4580
 12179                           
 12180                           ;nanomodbus.c: 650:             err = callback(address, quantity, regs, nmbs->msg.unit_i
      +                          d, nmbs->platform.arg);
 12181     0281  0141               	movlb	1	; select bank1
 12182     0282  0861               	movf	(handle_read_registers@address+1)^(0+128),w
 12183     0283  0140               	movlb	0	; select bank0
 12184     0284  00A1               	movwf	handler_read_input_registers@address+1
 12185     0285  0141               	movlb	1	; select bank1
 12186     0286  0860               	movf	handle_read_registers@address^(0+128),w
 12187     0287  0140               	movlb	0	; select bank0
 12188     0288  00A0               	movwf	handler_read_input_registers@address
 12189     0289  0141               	movlb	1	; select bank1
 12190     028A  0866               	movf	(handle_read_registers@quantity+1)^(0+128),w
 12191     028B  0140               	movlb	0	; select bank0
 12192     028C  00A3               	movwf	handler_read_input_registers@quantity+1
 12193     028D  0141               	movlb	1	; select bank1
 12194     028E  0865               	movf	handle_read_registers@quantity^(0+128),w
 12195     028F  0140               	movlb	0	; select bank0
 12196     0290  00A2               	movwf	handler_read_input_registers@quantity
 12197     0291  30A0               	movlw	(low (handle_read_registers@regs| 0))& (0+255)
 12198     0292  00A4               	movwf	handler_read_input_registers@registers_out
 12199     0293  085D               	movf	handle_read_registers@nmbs,w
 12200     0294  3E32               	addlw	50
 12201     0295  0086               	movwf	6
 12202     0296  3000               	movlw	0
 12203     0297  3D5E               	addwfc	handle_read_registers@nmbs+1,w
 12204     0298  0087               	movwf	7
 12205     0299  0801               	movf	1,w
 12206     029A  00A5               	movwf	handler_read_input_registers@unit_id
 12207     029B  085D               	movf	handle_read_registers@nmbs,w
 12208     029C  3E46               	addlw	70
 12209     029D  0086               	movwf	6
 12210     029E  3000               	movlw	0
 12211     029F  3D5E               	addwfc	handle_read_registers@nmbs+1,w
 12212     02A0  0087               	movwf	7
 12213     02A1  3F40               	moviw [0]fsr1
 12214     02A2  00A6               	movwf	handler_read_input_registers@arg
 12215     02A3  3F41               	moviw [1]fsr1
 12216     02A4  00A7               	movwf	handler_read_input_registers@arg+1
 12217     02A5  0860               	movf	handle_read_registers@callback+1,w
 12218     02A6  008A               	movwf	10
 12219     02A7  085F               	movf	handle_read_registers@callback,w
 12220     02A8  000A               	callw
 12221     02A9  3181               	pagesel	$
 12222     02AA  0141               	movlb	1	; select bank1
 12223     02AB  00E7               	movwf	handle_read_registers@err^(0+128)
 12224                           
 12225                           ;nanomodbus.c: 651:             if (err != NMBS_ERROR_NONE) {
 12226     02AC  0867               	movf	handle_read_registers@err^(0+128),w
 12227     02AD  1903               	btfsc	3,2
 12228     02AE  2ACF               	goto	l7505
 12229                           
 12230                           ;nanomodbus.c: 652:                 if (((err) > 0 && (err) < 5))
 12231     02AF  0867               	movf	handle_read_registers@err^(0+128),w
 12232     02B0  3A80               	xorlw	128
 12233     02B1  3E7F               	addlw	-129
 12234     02B2  1C03               	skipc
 12235     02B3  2AC5               	goto	l7501
 12236     02B4  0867               	movf	handle_read_registers@err^(0+128),w
 12237     02B5  3A80               	xorlw	128
 12238     02B6  3E7B               	addlw	-133
 12239     02B7  1803               	skipnc
 12240     02B8  2AC5               	goto	l7501
 12241                           
 12242                           ;nanomodbus.c: 653:                     return send_exception_msg(nmbs, err);
 12243     02B9  0140               	movlb	0	; select bank0
 12244     02BA  085E               	movf	handle_read_registers@nmbs+1,w
 12245     02BB  00C6               	movwf	send_exception_msg@nmbs+1
 12246     02BC  085D               	movf	handle_read_registers@nmbs,w
 12247     02BD  00C5               	movwf	send_exception_msg@nmbs
 12248     02BE  0141               	movlb	1	; select bank1
 12249     02BF  0867               	movf	handle_read_registers@err^(0+128),w
 12250     02C0  0140               	movlb	0	; select bank0
 12251     02C1  00C7               	movwf	send_exception_msg@exception
 12252     02C2  3195  2547         	fcall	_send_exception_msg
 12253     02C4  0008               	return
 12254     02C5                     l7501:
 12255                           
 12256                           ;nanomodbus.c: 655:                 return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVE
      +                          R_DEVICE_FAILURE);
 12257     02C5  0140               	movlb	0	; select bank0
 12258     02C6  085E               	movf	handle_read_registers@nmbs+1,w
 12259     02C7  00C6               	movwf	send_exception_msg@nmbs+1
 12260     02C8  085D               	movf	handle_read_registers@nmbs,w
 12261     02C9  00C5               	movwf	send_exception_msg@nmbs
 12262     02CA  3004               	movlw	4
 12263     02CB  00C7               	movwf	send_exception_msg@exception
 12264     02CC  3195  2547         	fcall	_send_exception_msg
 12265     02CE  0008               	return
 12266     02CF                     l7505:
 12267                           
 12268                           ;nanomodbus.c: 658:             if (!nmbs->msg.broadcast) {
 12269     02CF  0140               	movlb	0	; select bank0
 12270     02D0  085D               	movf	handle_read_registers@nmbs,w
 12271     02D1  3E36               	addlw	54
 12272     02D2  0086               	movwf	6
 12273     02D3  3000               	movlw	0
 12274     02D4  3D5E               	addwfc	handle_read_registers@nmbs+1,w
 12275     02D5  0087               	movwf	7
 12276     02D6  0801               	movf	1,w
 12277     02D7  1D03               	btfss	3,2
 12278     02D8  2B3B               	goto	l7533
 12279                           
 12280                           ;nanomodbus.c: 659:                 uint8_t regs_bytes = quantity * 2;
 12281     02D9  0141               	movlb	1	; select bank1
 12282     02DA  3565               	lslf	handle_read_registers@quantity^(0+128),w
 12283     02DB  00E2               	movwf	handle_read_registers@regs_bytes^(0+128)
 12284                           
 12285                           ;nanomodbus.c: 660:                 put_res_header(nmbs, 1 + regs_bytes);
 12286     02DC  0140               	movlb	0	; select bank0
 12287     02DD  085E               	movf	handle_read_registers@nmbs+1,w
 12288     02DE  00AB               	movwf	put_res_header@nmbs+1
 12289     02DF  085D               	movf	handle_read_registers@nmbs,w
 12290     02E0  00AA               	movwf	put_res_header@nmbs
 12291     02E1  0141               	movlb	1	; select bank1
 12292     02E2  0862               	movf	handle_read_registers@regs_bytes^(0+128),w
 12293     02E3  3E01               	addlw	1
 12294     02E4  0140               	movlb	0	; select bank0
 12295     02E5  00AC               	movwf	put_res_header@data_length
 12296     02E6  3000               	movlw	0
 12297     02E7  1803               	skipnc
 12298     02E8  3001               	movlw	1
 12299     02E9  00AD               	movwf	put_res_header@data_length+1
 12300     02EA  3192  2232  3181   	fcall	_put_res_header
 12301                           
 12302                           ;nanomodbus.c: 662:                 put_1(nmbs, regs_bytes);
 12303     02ED  085E               	movf	handle_read_registers@nmbs+1,w
 12304     02EE  00A1               	movwf	put_1@nmbs+1
 12305     02EF  085D               	movf	handle_read_registers@nmbs,w
 12306     02F0  00A0               	movwf	put_1@nmbs
 12307     02F1  0141               	movlb	1	; select bank1
 12308     02F2  0862               	movf	handle_read_registers@regs_bytes^(0+128),w
 12309     02F3  0140               	movlb	0	; select bank0
 12310     02F4  00A2               	movwf	put_1@data
 12311     02F5  3193  23F0  3181   	fcall	_put_1
 12312                           
 12313                           ;nanomodbus.c: 667:                 for (int i = 0; i < quantity; i++) {
 12314     02F8  0141               	movlb	1	; select bank1
 12315     02F9  01E3               	clrf	handle_read_registers@i^(0+128)
 12316     02FA  01E4               	clrf	(handle_read_registers@i+1)^(0+128)
 12317     02FB                     l7519:
 12318     02FB  0866               	movf	(handle_read_registers@quantity+1)^(0+128),w
 12319     02FC  0264               	subwf	(handle_read_registers@i+1)^(0+128),w
 12320     02FD  1D03               	skipz
 12321     02FE  2B01               	goto	u4635
 12322     02FF  0865               	movf	handle_read_registers@quantity^(0+128),w
 12323     0300  0263               	subwf	handle_read_registers@i^(0+128),w
 12324     0301                     u4635:
 12325     0301  1803               	btfsc	3,0
 12326     0302  2B1B               	goto	l7521
 12327                           
 12328                           ;nanomodbus.c: 668:                     put_2(nmbs, regs[i]);
 12329     0303  0140               	movlb	0	; select bank0
 12330     0304  085E               	movf	handle_read_registers@nmbs+1,w
 12331     0305  00A1               	movwf	put_2@nmbs+1
 12332     0306  085D               	movf	handle_read_registers@nmbs,w
 12333     0307  00A0               	movwf	put_2@nmbs
 12334     0308  0141               	movlb	1	; select bank1
 12335     0309  3563               	lslf	handle_read_registers@i^(0+128),w
 12336     030A  3EA0               	addlw	(low (handle_read_registers@regs| 0))& (0+255)
 12337     030B  0086               	movwf	6
 12338     030C  0187               	clrf	7
 12339     030D  3F40               	moviw [0]fsr1
 12340     030E  0140               	movlb	0	; select bank0
 12341     030F  00A2               	movwf	put_2@data
 12342     0310  3F41               	moviw [1]fsr1
 12343     0311  00A3               	movwf	put_2@data+1
 12344     0312  3196  265C  3181   	fcall	_put_2
 12345                           
 12346                           ;nanomodbus.c: 670:                 }
 12347     0315  3001               	movlw	1
 12348     0316  0141               	movlb	1	; select bank1
 12349     0317  07E3               	addwf	handle_read_registers@i^(0+128),f
 12350     0318  3000               	movlw	0
 12351     0319  3DE4               	addwfc	(handle_read_registers@i+1)^(0+128),f
 12352     031A  2AFB               	goto	l7519
 12353     031B                     l7521:
 12354                           
 12355                           ;nanomodbus.c: 672:                 err = send_msg(nmbs);
 12356     031B  0140               	movlb	0	; select bank0
 12357     031C  085E               	movf	handle_read_registers@nmbs+1,w
 12358     031D  00BF               	movwf	send_msg@nmbs+1
 12359     031E  085D               	movf	handle_read_registers@nmbs,w
 12360     031F  00BE               	movwf	send_msg@nmbs
 12361     0320  3189  2158  3181   	fcall	_send_msg
 12362     0323  0141               	movlb	1	; select bank1
 12363     0324  00E7               	movwf	handle_read_registers@err^(0+128)
 12364                           
 12365                           ;nanomodbus.c: 673:                 if (err != NMBS_ERROR_NONE)
 12366     0325  0867               	movf	handle_read_registers@err^(0+128),w
 12367     0326  1D03               	btfss	3,2
 12368     0327  29F5               	goto	l7457
 12369     0328  2B3B               	goto	l7533
 12370     0329                     l7529:	
 12371                           ;nanomodbus.c: 677:     }
 12372                           
 12373                           ;nanomodbus.c: 676:         }
 12374                           
 12375                           
 12376                           ;nanomodbus.c: 679:         return recv_read_registers_res(nmbs, quantity, ((void*)0));
 12377     0329  085E               	movf	handle_read_registers@nmbs+1,w
 12378     032A  00CE               	movwf	recv_read_registers_res@nmbs+1
 12379     032B  085D               	movf	handle_read_registers@nmbs,w
 12380     032C  00CD               	movwf	recv_read_registers_res@nmbs
 12381     032D  0141               	movlb	1	; select bank1
 12382     032E  0866               	movf	(handle_read_registers@quantity+1)^(0+128),w
 12383     032F  0140               	movlb	0	; select bank0
 12384     0330  00D0               	movwf	recv_read_registers_res@quantity+1
 12385     0331  0141               	movlb	1	; select bank1
 12386     0332  0865               	movf	handle_read_registers@quantity^(0+128),w
 12387     0333  0140               	movlb	0	; select bank0
 12388     0334  00CF               	movwf	recv_read_registers_res@quantity
 12389     0335  3000               	movlw	0
 12390     0336  00D1               	movwf	recv_read_registers_res@registers
 12391     0337  00D2               	movwf	recv_read_registers_res@registers+1
 12392     0338  3186  26C5         	fcall	_recv_read_registers_res
 12393     033A  0008               	return
 12394     033B                     l7533:
 12395                           
 12396                           ;nanomodbus.c: 682:     return NMBS_ERROR_NONE;
 12397     033B  3000               	movlw	0
 12398     033C  0008               	return
 12399     033D                     __end_of_handle_read_registers:
 12400                           
 12401                           	psect	text18
 12402     1547                     __ptext18:	
 12403 ;; *************** function _send_exception_msg *****************
 12404 ;; Defined at:
 12405 ;;		line 306 in file "nanomodbus.c"
 12406 ;; Parameters:    Size  Location     Type
 12407 ;;  nmbs            2   37[BANK0 ] PTR struct nmbs_t
 12408 ;;		 -> main@nmbs(76), 
 12409 ;;  exception       1   39[BANK0 ] unsigned char 
 12410 ;; Auto vars:     Size  Location     Type
 12411 ;;		None
 12412 ;; Return value:  Size  Location     Type
 12413 ;;                  1    wreg      enum E10857
 12414 ;; Registers used:
 12415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12416 ;; Tracked objects:
 12417 ;;		On entry : 3F/0
 12418 ;;		On exit  : 3F/0
 12419 ;;		Unchanged: 0/0
 12420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12421 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12424 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12425 ;;Total ram usage:        3 bytes
 12426 ;; Hardware stack levels used: 1
 12427 ;; Hardware stack levels required when called: 9
 12428 ;; This function calls:
 12429 ;;		_put_1
 12430 ;;		_put_msg_header
 12431 ;;		_send_msg
 12432 ;; This function is called by:
 12433 ;;		_handle_read_registers
 12434 ;;		_handle_write_single_coil@nanomodbus$F3828
 12435 ;; This function uses a non-reentrant model
 12436 ;;
 12437                           
 12438     1547                     _send_exception_msg:	
 12439                           ;psect for function _send_exception_msg
 12440                           
 12441                           
 12442                           ;nanomodbus.c: 307:     nmbs->msg.fc += 0x80;
 12443                           
 12444                           ;incstack = 0
 12445                           ; Regs used in _send_exception_msg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12446     1547  0845               	movf	send_exception_msg@nmbs,w
 12447     1548  3E33               	addlw	51
 12448     1549  0086               	movwf	6
 12449     154A  3000               	movlw	0
 12450     154B  3D46               	addwfc	send_exception_msg@nmbs+1,w
 12451     154C  0087               	movwf	7
 12452     154D  3080               	movlw	128
 12453     154E  0781               	addwf	1,f
 12454                           
 12455                           ;nanomodbus.c: 308:     put_msg_header(nmbs, 1);
 12456     154F  0846               	movf	send_exception_msg@nmbs+1,w
 12457     1550  00A7               	movwf	put_msg_header@nmbs+1
 12458     1551  0845               	movf	send_exception_msg@nmbs,w
 12459     1552  00A6               	movwf	put_msg_header@nmbs
 12460     1553  3001               	movlw	1
 12461     1554  00A8               	movwf	put_msg_header@data_length
 12462     1555  3000               	movlw	0
 12463     1556  00A9               	movwf	put_msg_header@data_length+1
 12464     1557  318D  2575  3195   	fcall	_put_msg_header
 12465                           
 12466                           ;nanomodbus.c: 309:     put_1(nmbs, exception);
 12467     155A  0846               	movf	send_exception_msg@nmbs+1,w
 12468     155B  00A1               	movwf	put_1@nmbs+1
 12469     155C  0845               	movf	send_exception_msg@nmbs,w
 12470     155D  00A0               	movwf	put_1@nmbs
 12471     155E  0847               	movf	send_exception_msg@exception,w
 12472     155F  00A2               	movwf	put_1@data
 12473     1560  3193  23F0  3195   	fcall	_put_1
 12474                           
 12475                           ;nanomodbus.c: 313:     return send_msg(nmbs);
 12476     1563  0846               	movf	send_exception_msg@nmbs+1,w
 12477     1564  00BF               	movwf	send_msg@nmbs+1
 12478     1565  0845               	movf	send_exception_msg@nmbs,w
 12479     1566  00BE               	movwf	send_msg@nmbs
 12480     1567  3189  2158         	fcall	_send_msg
 12481     1569  0008               	return
 12482     156A                     __end_of_send_exception_msg:
 12483                           
 12484                           	psect	text19
 12485     0958                     __ptext19:	
 12486 ;; *************** function _send_msg *****************
 12487 ;; Defined at:
 12488 ;;		line 266 in file "nanomodbus.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;  nmbs            2   30[BANK0 ] PTR struct nmbs_t
 12491 ;;		 -> main@nmbs(76), 
 12492 ;; Auto vars:     Size  Location     Type
 12493 ;;  crc             2   34[BANK0 ] unsigned short 
 12494 ;;  err             1   36[BANK0 ] enum E10857
 12495 ;; Return value:  Size  Location     Type
 12496 ;;                  1    wreg      enum E10857
 12497 ;; Registers used:
 12498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12499 ;; Tracked objects:
 12500 ;;		On entry : 3F/0
 12501 ;;		On exit  : 3F/0
 12502 ;;		Unchanged: 0/0
 12503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12504 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;Total ram usage:        7 bytes
 12509 ;; Hardware stack levels used: 1
 12510 ;; Hardware stack levels required when called: 8
 12511 ;; This function calls:
 12512 ;;		_nmbs_crc_calc
 12513 ;;		_put_2
 12514 ;;		_send
 12515 ;; This function is called by:
 12516 ;;		_send_exception_msg
 12517 ;;		_handle_read_registers
 12518 ;;		_handle_write_single_coil@nanomodbus$F3828
 12519 ;;		_handle_write_single_register@nanomodbus$F3873
 12520 ;; This function uses a non-reentrant model
 12521 ;;
 12522                           
 12523     0958                     _send_msg:	
 12524                           ;psect for function _send_msg
 12525                           
 12526                           
 12527                           ;nanomodbus.c: 269:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 12528                           
 12529                           ;incstack = 0
 12530                           ; Regs used in _send_msg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12531     0958  083E               	movf	send_msg@nmbs,w
 12532     0959  3E41               	addlw	65
 12533     095A  0086               	movwf	6
 12534     095B  3000               	movlw	0
 12535     095C  3D3F               	addwfc	send_msg@nmbs+1,w
 12536     095D  0087               	movwf	7
 12537     095E  0301               	decf	1,w
 12538     095F  1D03               	btfss	3,2
 12539     0960  2987               	goto	l7107
 12540                           
 12541                           ;nanomodbus.c: 270:         uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_id
      +                          x);
 12542     0961  083F               	movf	send_msg@nmbs+1,w
 12543     0962  00A1               	movwf	nmbs_crc_calc@data+1
 12544     0963  083E               	movf	send_msg@nmbs,w
 12545     0964  00A0               	movwf	nmbs_crc_calc@data
 12546     0965  083E               	movf	send_msg@nmbs,w
 12547     0966  3E30               	addlw	48
 12548     0967  0086               	movwf	6
 12549     0968  3000               	movlw	0
 12550     0969  3D3F               	addwfc	send_msg@nmbs+1,w
 12551     096A  0087               	movwf	7
 12552     096B  3F40               	moviw [0]fsr1
 12553     096C  00C0               	movwf	??_send_msg
 12554     096D  3F41               	moviw [1]fsr1
 12555     096E  00C1               	movwf	??_send_msg+1
 12556     096F  0840               	movf	??_send_msg,w
 12557     0970  00A2               	movwf	nmbs_crc_calc@length
 12558     0971  0841               	movf	??_send_msg+1,w
 12559     0972  00A3               	movwf	nmbs_crc_calc@length+1
 12560     0973  01A4               	clrf	nmbs_crc_calc@length+2
 12561     0974  01A5               	clrf	nmbs_crc_calc@length+3
 12562     0975  318D  251B  3189   	fcall	_nmbs_crc_calc
 12563     0978  0821               	movf	?_nmbs_crc_calc+1,w
 12564     0979  00C3               	movwf	send_msg@crc+1
 12565     097A  0820               	movf	?_nmbs_crc_calc,w
 12566     097B  00C2               	movwf	send_msg@crc
 12567                           
 12568                           ;nanomodbus.c: 271:         put_2(nmbs, crc);
 12569     097C  083F               	movf	send_msg@nmbs+1,w
 12570     097D  00A1               	movwf	put_2@nmbs+1
 12571     097E  083E               	movf	send_msg@nmbs,w
 12572     097F  00A0               	movwf	put_2@nmbs
 12573     0980  0843               	movf	send_msg@crc+1,w
 12574     0981  00A3               	movwf	put_2@data+1
 12575     0982  0842               	movf	send_msg@crc,w
 12576     0983  00A2               	movwf	put_2@data
 12577     0984  3196  265C  3189   	fcall	_put_2
 12578     0987                     l7107:
 12579                           
 12580                           ;nanomodbus.c: 274:     nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 12581     0987  083F               	movf	send_msg@nmbs+1,w
 12582     0988  00B2               	movwf	send@nmbs+1
 12583     0989  083E               	movf	send_msg@nmbs,w
 12584     098A  00B1               	movwf	send@nmbs
 12585     098B  083E               	movf	send_msg@nmbs,w
 12586     098C  3E30               	addlw	48
 12587     098D  0086               	movwf	6
 12588     098E  3000               	movlw	0
 12589     098F  3D3F               	addwfc	send_msg@nmbs+1,w
 12590     0990  0087               	movwf	7
 12591     0991  3F40               	moviw [0]fsr1
 12592     0992  00B3               	movwf	send@count
 12593     0993  3F41               	moviw [1]fsr1
 12594     0994  00B4               	movwf	send@count+1
 12595     0995  318E  2637         	fcall	_send
 12596     0997  00C4               	movwf	send_msg@err
 12597                           
 12598                           ;nanomodbus.c: 276:     return err;
 12599     0998  0844               	movf	send_msg@err,w
 12600     0999  0008               	return
 12601     099A                     __end_of_send_msg:
 12602                           
 12603                           	psect	text20
 12604     0E37                     __ptext20:	
 12605 ;; *************** function _send *****************
 12606 ;; Defined at:
 12607 ;;		line 184 in file "nanomodbus.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;  nmbs            2   17[BANK0 ] PTR struct nmbs_t
 12610 ;;		 -> main@nmbs(76), 
 12611 ;;  count           2   19[BANK0 ] unsigned short 
 12612 ;; Auto vars:     Size  Location     Type
 12613 ;;  ret             4   26[BANK0 ] long 
 12614 ;; Return value:  Size  Location     Type
 12615 ;;                  1    wreg      enum E10857
 12616 ;; Registers used:
 12617 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12618 ;; Tracked objects:
 12619 ;;		On entry : 3F/0
 12620 ;;		On exit  : 3F/0
 12621 ;;		Unchanged: 0/0
 12622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12623 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12626 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12627 ;;Total ram usage:       13 bytes
 12628 ;; Hardware stack levels used: 1
 12629 ;; Hardware stack levels required when called: 7
 12630 ;; This function calls:
 12631 ;;		_write_serial
 12632 ;; This function is called by:
 12633 ;;		_send_msg
 12634 ;; This function uses a non-reentrant model
 12635 ;;
 12636                           
 12637     0E37                     _send:	
 12638                           ;psect for function _send
 12639                           
 12640                           
 12641                           ;nanomodbus.c: 185:     int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, 1000, n
      +                          mbs->platform.arg);
 12642                           
 12643                           ;incstack = 0
 12644                           ; Regs used in _send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12645     0E37  0832               	movf	send@nmbs+1,w
 12646     0E38  00A2               	movwf	write_serial@buf+1
 12647     0E39  0831               	movf	send@nmbs,w
 12648     0E3A  00A1               	movwf	write_serial@buf
 12649     0E3B  0834               	movf	send@count+1,w
 12650     0E3C  00A4               	movwf	write_serial@count+1
 12651     0E3D  0833               	movf	send@count,w
 12652     0E3E  00A3               	movwf	write_serial@count
 12653     0E3F  3000               	movlw	0
 12654     0E40  00A8               	movwf	write_serial@byte_timeout_ms+3
 12655     0E41  3000               	movlw	0
 12656     0E42  00A7               	movwf	write_serial@byte_timeout_ms+2
 12657     0E43  3003               	movlw	3
 12658     0E44  00A6               	movwf	write_serial@byte_timeout_ms+1
 12659     0E45  30E8               	movlw	232
 12660     0E46  00A5               	movwf	write_serial@byte_timeout_ms
 12661     0E47  0831               	movf	send@nmbs,w
 12662     0E48  3E46               	addlw	70
 12663     0E49  0086               	movwf	6
 12664     0E4A  3000               	movlw	0
 12665     0E4B  3D32               	addwfc	send@nmbs+1,w
 12666     0E4C  0087               	movwf	7
 12667     0E4D  3F40               	moviw [0]fsr1
 12668     0E4E  00A9               	movwf	write_serial@arg
 12669     0E4F  3F41               	moviw [1]fsr1
 12670     0E50  00AA               	movwf	write_serial@arg+1
 12671     0E51  0831               	movf	send@nmbs,w
 12672     0E52  3E44               	addlw	68
 12673     0E53  0086               	movwf	6
 12674     0E54  3000               	movlw	0
 12675     0E55  3D32               	addwfc	send@nmbs+1,w
 12676     0E56  0087               	movwf	7
 12677     0E57  3F41               	moviw [1]fsr1
 12678     0E58  008A               	movwf	10
 12679     0E59  3F40               	moviw [0]fsr1
 12680     0E5A  000A               	callw
 12681     0E5B  318E               	pagesel	$
 12682     0E5C  0824               	movf	?_write_serial+3,w
 12683     0E5D  00BD               	movwf	send@ret+3
 12684     0E5E  0823               	movf	?_write_serial+2,w
 12685     0E5F  00BC               	movwf	send@ret+2
 12686     0E60  0822               	movf	?_write_serial+1,w
 12687     0E61  00BB               	movwf	send@ret+1
 12688     0E62  0821               	movf	?_write_serial,w
 12689     0E63  00BA               	movwf	send@ret
 12690                           
 12691                           ;nanomodbus.c: 187:     if (ret == count)
 12692     0E64  0833               	movf	send@count,w
 12693     0E65  00B5               	movwf	??_send
 12694     0E66  0834               	movf	send@count+1,w
 12695     0E67  00B6               	movwf	??_send+1
 12696     0E68  01B7               	clrf	??_send+2
 12697     0E69  01B8               	clrf	??_send+3
 12698     0E6A  083D               	movf	send@ret+3,w
 12699     0E6B  0638               	xorwf	??_send+3,w
 12700     0E6C  1D03               	skipz
 12701     0E6D  2E78               	goto	u3925
 12702     0E6E  083C               	movf	send@ret+2,w
 12703     0E6F  0637               	xorwf	??_send+2,w
 12704     0E70  1D03               	skipz
 12705     0E71  2E78               	goto	u3925
 12706     0E72  083B               	movf	send@ret+1,w
 12707     0E73  0636               	xorwf	??_send+1,w
 12708     0E74  1D03               	skipz
 12709     0E75  2E78               	goto	u3925
 12710     0E76  083A               	movf	send@ret,w
 12711     0E77  0635               	xorwf	??_send,w
 12712     0E78                     u3925:
 12713     0E78  1D03               	skipz
 12714     0E79  2E7C               	goto	l6987
 12715                           
 12716                           ;nanomodbus.c: 188:         return NMBS_ERROR_NONE;
 12717     0E7A  3000               	movlw	0
 12718     0E7B  0008               	return
 12719     0E7C                     l6987:
 12720                           
 12721                           ;nanomodbus.c: 190:     if (ret < count) {
 12722     0E7C  0833               	movf	send@count,w
 12723     0E7D  00B5               	movwf	??_send
 12724     0E7E  0834               	movf	send@count+1,w
 12725     0E7F  00B6               	movwf	??_send+1
 12726     0E80  01B7               	clrf	??_send+2
 12727     0E81  01B8               	clrf	??_send+3
 12728     0E82  083D               	movf	send@ret+3,w
 12729     0E83  3A80               	xorlw	128
 12730     0E84  00B9               	movwf	??_send+4
 12731     0E85  0838               	movf	??_send+3,w
 12732     0E86  3A80               	xorlw	128
 12733     0E87  0239               	subwf	??_send+4,w
 12734     0E88  1D03               	skipz
 12735     0E89  2E94               	goto	u3933
 12736     0E8A  0837               	movf	??_send+2,w
 12737     0E8B  023C               	subwf	send@ret+2,w
 12738     0E8C  1D03               	skipz
 12739     0E8D  2E94               	goto	u3933
 12740     0E8E  0836               	movf	??_send+1,w
 12741     0E8F  023B               	subwf	send@ret+1,w
 12742     0E90  1D03               	skipz
 12743     0E91  2E94               	goto	u3933
 12744     0E92  0835               	movf	??_send,w
 12745     0E93  023A               	subwf	send@ret,w
 12746     0E94                     u3933:
 12747     0E94  1803               	skipnc
 12748     0E95  2E98               	goto	l6991
 12749                           
 12750                           ;nanomodbus.c: 191:         if (ret < 0)
 12751     0E96  1FBD               	btfss	send@ret+3,7
 12752     0E97  2E9A               	goto	l6995
 12753     0E98                     l6991:
 12754                           
 12755                           ;nanomodbus.c: 192:             return NMBS_ERROR_TRANSPORT;
 12756     0E98  30FC               	movlw	252
 12757     0E99  0008               	return
 12758     0E9A                     l6995:
 12759                           
 12760                           ;nanomodbus.c: 194:         return NMBS_ERROR_TIMEOUT;
 12761     0E9A  30FD               	movlw	253
 12762     0E9B  0008               	return
 12763     0E9C                     __end_of_send:
 12764                           
 12765                           	psect	text21
 12766     0A22                     __ptext21:	
 12767 ;; *************** function _write_serial *****************
 12768 ;; Defined at:
 12769 ;;		line 39 in file "modbus_imp.c"
 12770 ;; Parameters:    Size  Location     Type
 12771 ;;  buf             2    1[BANK0 ] PTR const unsigned char 
 12772 ;;		 -> nmbs$msg$buf$buf(48), send@nmbs$msg$buf(48), 
 12773 ;;  count           2    3[BANK0 ] unsigned short 
 12774 ;;  byte_timeout    4    5[BANK0 ] long 
 12775 ;;  arg             2    9[BANK0 ] PTR void 
 12776 ;;		 -> main@registers(45), 
 12777 ;; Auto vars:     Size  Location     Type
 12778 ;;  i               2   15[BANK0 ] int 
 12779 ;;  number_of_by    4   11[BANK0 ] long 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;                  4    1[BANK0 ] long 
 12782 ;; Registers used:
 12783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12784 ;; Tracked objects:
 12785 ;;		On entry : 3F/0
 12786 ;;		On exit  : 3F/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12789 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;Total ram usage:       16 bytes
 12794 ;; Hardware stack levels used: 1
 12795 ;; Hardware stack levels required when called: 6
 12796 ;; This function calls:
 12797 ;;		_EUSART1_Write
 12798 ;;		_EUSART1_is_tx_done
 12799 ;;		_EUSART1_is_tx_ready
 12800 ;;		_TxDeviceDisable
 12801 ;;		_TxDeviceEnable
 12802 ;; This function is called by:
 12803 ;;		_main
 12804 ;;		_send
 12805 ;; This function uses a non-reentrant model
 12806 ;;
 12807                           
 12808     0A22                     _write_serial:	
 12809                           ;psect for function _write_serial
 12810                           
 12811                           
 12812                           ;modbus_imp.c: 39: int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte
      +                          _timeout_ms, void* arg);modbus_imp.c: 40: {;modbus_imp.c: 41:     TxDeviceEnable();
 12813                           
 12814                           ;incstack = 0
 12815                           ; Regs used in _write_serial: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12816     0A22  3180  2002  318A   	fcall	_TxDeviceEnable
 12817                           
 12818                           ;modbus_imp.c: 42:     int32_t number_of_byte_send = 0;
 12819     0A25  3000               	movlw	0
 12820     0A26  00AE               	movwf	write_serial@number_of_byte_send+3
 12821     0A27  3000               	movlw	0
 12822     0A28  00AD               	movwf	write_serial@number_of_byte_send+2
 12823     0A29  3000               	movlw	0
 12824     0A2A  00AC               	movwf	write_serial@number_of_byte_send+1
 12825     0A2B  3000               	movlw	0
 12826     0A2C  00AB               	movwf	write_serial@number_of_byte_send
 12827                           
 12828                           ;modbus_imp.c: 44:     for(int i=0; i<count; i++)
 12829     0A2D  01AF               	clrf	write_serial@i
 12830     0A2E  01B0               	clrf	write_serial@i+1
 12831     0A2F                     l6883:
 12832     0A2F  0824               	movf	write_serial@count+1,w
 12833     0A30  0230               	subwf	write_serial@i+1,w
 12834     0A31  1D03               	skipz
 12835     0A32  2A35               	goto	u3845
 12836     0A33  0823               	movf	write_serial@count,w
 12837     0A34  022F               	subwf	write_serial@i,w
 12838     0A35                     u3845:
 12839     0A35  1803               	btfsc	3,0
 12840     0A36  2A5B               	goto	l6885
 12841                           
 12842                           ;modbus_imp.c: 45:     {;modbus_imp.c: 46:         if(EUSART1_is_tx_ready())
 12843     0A37  3192  2257  318A   	fcall	_EUSART1_is_tx_ready
 12844     0A3A  3A00               	xorlw	0
 12845     0A3B  1903               	skipnz
 12846     0A3C  2A56               	goto	l6881
 12847                           
 12848                           ;modbus_imp.c: 47:         {;modbus_imp.c: 48:             EUSART1_Write(*buf);
 12849     0A3D  0821               	movf	write_serial@buf,w
 12850     0A3E  0086               	movwf	6
 12851     0A3F  0822               	movf	write_serial@buf+1,w
 12852     0A40  0087               	movwf	7
 12853     0A41  0801               	movf	1,w
 12854     0A42  3191  21E1  318A   	fcall	_EUSART1_Write
 12855     0A45                     l6875:	
 12856                           ;modbus_imp.c: 49:             while(!EUSART1_is_tx_done());
 12857                           
 12858     0A45  3191  2166  318A   	fcall	_EUSART1_is_tx_done
 12859     0A48  3A00               	xorlw	0
 12860     0A49  1903               	skipnz
 12861     0A4A  2A45               	goto	l6875
 12862                           
 12863                           ;modbus_imp.c: 50:             buf++;
 12864     0A4B  3001               	movlw	1
 12865     0A4C  0140               	movlb	0	; select bank0
 12866     0A4D  07A1               	addwf	write_serial@buf,f
 12867     0A4E  3000               	movlw	0
 12868     0A4F  3DA2               	addwfc	write_serial@buf+1,f
 12869                           
 12870                           ;modbus_imp.c: 51:             number_of_byte_send++;
 12871     0A50  3001               	movlw	1
 12872     0A51  07AB               	addwf	write_serial@number_of_byte_send,f
 12873     0A52  3000               	movlw	0
 12874     0A53  3DAC               	addwfc	write_serial@number_of_byte_send+1,f
 12875     0A54  3DAD               	addwfc	write_serial@number_of_byte_send+2,f
 12876     0A55  3DAE               	addwfc	write_serial@number_of_byte_send+3,f
 12877     0A56                     l6881:
 12878                           
 12879                           ;modbus_imp.c: 53:     }
 12880     0A56  3001               	movlw	1
 12881     0A57  07AF               	addwf	write_serial@i,f
 12882     0A58  3000               	movlw	0
 12883     0A59  3DB0               	addwfc	write_serial@i+1,f
 12884     0A5A  2A2F               	goto	l6883
 12885     0A5B                     l6885:
 12886                           
 12887                           ;modbus_imp.c: 54:     TxDeviceDisable();
 12888     0A5B  3191  2123         	fcall	_TxDeviceDisable
 12889                           
 12890                           ;modbus_imp.c: 56:     return number_of_byte_send;
 12891     0A5D  082E               	movf	write_serial@number_of_byte_send+3,w
 12892     0A5E  00A4               	movwf	?_write_serial+3
 12893     0A5F  082D               	movf	write_serial@number_of_byte_send+2,w
 12894     0A60  00A3               	movwf	?_write_serial+2
 12895     0A61  082C               	movf	write_serial@number_of_byte_send+1,w
 12896     0A62  00A2               	movwf	?_write_serial+1
 12897     0A63  082B               	movf	write_serial@number_of_byte_send,w
 12898     0A64  00A1               	movwf	?_write_serial
 12899     0A65  0008               	return
 12900     0A66                     __end_of_write_serial:
 12901                           
 12902                           	psect	text22
 12903     0002                     __ptext22:	
 12904 ;; *************** function _TxDeviceEnable *****************
 12905 ;; Defined at:
 12906 ;;		line 64 in file "communication.c"
 12907 ;; Parameters:    Size  Location     Type
 12908 ;;		None
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;		None
 12911 ;; Return value:  Size  Location     Type
 12912 ;;                  1    wreg      void 
 12913 ;; Registers used:
 12914 ;;		None
 12915 ;; Tracked objects:
 12916 ;;		On entry : 3F/0
 12917 ;;		On exit  : 3F/0
 12918 ;;		Unchanged: 0/0
 12919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;Total ram usage:        0 bytes
 12925 ;; Hardware stack levels used: 1
 12926 ;; Hardware stack levels required when called: 5
 12927 ;; This function calls:
 12928 ;;		Nothing
 12929 ;; This function is called by:
 12930 ;;		_write_serial
 12931 ;; This function uses a non-reentrant model
 12932 ;;
 12933                           
 12934     0002                     _TxDeviceEnable:	
 12935                           ;psect for function _TxDeviceEnable
 12936                           
 12937                           
 12938                           ;communication.c: 66:     LATCbits.LATC3 = 1;
 12939                           
 12940                           ;incstack = 0
 12941                           ; Regs used in _TxDeviceEnable: []
 12942     0002  159A               	bsf	26,3	;volatile
 12943     0003  0008               	return
 12944     0004                     __end_of_TxDeviceEnable:
 12945                           
 12946                           	psect	text23
 12947     1123                     __ptext23:	
 12948 ;; *************** function _TxDeviceDisable *****************
 12949 ;; Defined at:
 12950 ;;		line 69 in file "communication.c"
 12951 ;; Parameters:    Size  Location     Type
 12952 ;;		None
 12953 ;; Auto vars:     Size  Location     Type
 12954 ;;		None
 12955 ;; Return value:  Size  Location     Type
 12956 ;;                  1    wreg      void 
 12957 ;; Registers used:
 12958 ;;		None
 12959 ;; Tracked objects:
 12960 ;;		On entry : 3B/4
 12961 ;;		On exit  : 3F/0
 12962 ;;		Unchanged: 0/0
 12963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12968 ;;Total ram usage:        0 bytes
 12969 ;; Hardware stack levels used: 1
 12970 ;; Hardware stack levels required when called: 5
 12971 ;; This function calls:
 12972 ;;		Nothing
 12973 ;; This function is called by:
 12974 ;;		_main
 12975 ;;		_write_serial
 12976 ;; This function uses a non-reentrant model
 12977 ;;
 12978                           
 12979     1123                     _TxDeviceDisable:	
 12980                           ;psect for function _TxDeviceDisable
 12981                           
 12982                           
 12983                           ;communication.c: 71:     LATCbits.LATC3 = 0;
 12984                           
 12985                           ;incstack = 0
 12986                           ; Regs used in _TxDeviceDisable: []
 12987     1123  0140               	movlb	0	; select bank0
 12988     1124  119A               	bcf	26,3	;volatile
 12989     1125  0008               	return
 12990     1126                     __end_of_TxDeviceDisable:
 12991                           
 12992                           	psect	text24
 12993     1257                     __ptext24:	
 12994 ;; *************** function _EUSART1_is_tx_ready *****************
 12995 ;; Defined at:
 12996 ;;		line 218 in file "mcc_generated_files/eusart1.c"
 12997 ;; Parameters:    Size  Location     Type
 12998 ;;		None
 12999 ;; Auto vars:     Size  Location     Type
 13000 ;;		None
 13001 ;; Return value:  Size  Location     Type
 13002 ;;                  1    wreg      _Bool 
 13003 ;; Registers used:
 13004 ;;		wreg, status,2
 13005 ;; Tracked objects:
 13006 ;;		On entry : 3F/0
 13007 ;;		On exit  : 3F/0
 13008 ;;		Unchanged: 0/0
 13009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;Total ram usage:        1 bytes
 13015 ;; Hardware stack levels used: 1
 13016 ;; Hardware stack levels required when called: 5
 13017 ;; This function calls:
 13018 ;;		Nothing
 13019 ;; This function is called by:
 13020 ;;		_write_serial
 13021 ;; This function uses a non-reentrant model
 13022 ;;
 13023                           
 13024     1257                     _EUSART1_is_tx_ready:	
 13025                           ;psect for function _EUSART1_is_tx_ready
 13026                           
 13027                           
 13028                           ;mcc_generated_files/eusart1.c: 220:     return (_Bool)(PIR3bits.TX1IF && TX1STAbits.TXE
      +                          N);
 13029                           
 13030                           ;incstack = 0
 13031                           ; Regs used in _EUSART1_is_tx_ready: [wreg+status,2]
 13032     1257  01A0               	clrf	_EUSART1_is_tx_ready$765
 13033     1258  014E               	movlb	14	; select bank14
 13034     1259  1E0F               	btfss	15,4	;volatile
 13035     125A  2A61               	goto	l6667
 13036     125B  0142               	movlb	2	; select bank2
 13037     125C  1E9E               	btfss	30,5	;volatile
 13038     125D  2A61               	goto	l6667
 13039     125E  3001               	movlw	1
 13040     125F  0140               	movlb	0	; select bank0
 13041     1260  00A0               	movwf	_EUSART1_is_tx_ready$765
 13042     1261                     l6667:
 13043     1261  0140               	movlb	0	; select bank0
 13044     1262  0820               	movf	_EUSART1_is_tx_ready$765,w
 13045     1263  0008               	return
 13046     1264                     __end_of_EUSART1_is_tx_ready:
 13047                           
 13048                           	psect	text25
 13049     1166                     __ptext25:	
 13050 ;; *************** function _EUSART1_is_tx_done *****************
 13051 ;; Defined at:
 13052 ;;		line 228 in file "mcc_generated_files/eusart1.c"
 13053 ;; Parameters:    Size  Location     Type
 13054 ;;		None
 13055 ;; Auto vars:     Size  Location     Type
 13056 ;;		None
 13057 ;; Return value:  Size  Location     Type
 13058 ;;                  1    wreg      _Bool 
 13059 ;; Registers used:
 13060 ;;		wreg, status,2, status,0
 13061 ;; Tracked objects:
 13062 ;;		On entry : 3D/2
 13063 ;;		On exit  : 3F/2
 13064 ;;		Unchanged: 0/0
 13065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;Total ram usage:        0 bytes
 13071 ;; Hardware stack levels used: 1
 13072 ;; Hardware stack levels required when called: 5
 13073 ;; This function calls:
 13074 ;;		Nothing
 13075 ;; This function is called by:
 13076 ;;		_write_serial
 13077 ;; This function uses a non-reentrant model
 13078 ;;
 13079                           
 13080     1166                     _EUSART1_is_tx_done:	
 13081                           ;psect for function _EUSART1_is_tx_done
 13082                           
 13083                           
 13084                           ;mcc_generated_files/eusart1.c: 230:     return TX1STAbits.TRMT;
 13085                           
 13086                           ;incstack = 0
 13087                           ; Regs used in _EUSART1_is_tx_done: [wreg+status,2+status,0]
 13088     1166  0142               	movlb	2	; select bank2
 13089     1167  0C1E               	rrf	30,w	;volatile
 13090     1168  3901               	andlw	1
 13091     1169  0008               	return
 13092     116A                     __end_of_EUSART1_is_tx_done:
 13093                           
 13094                           	psect	text26
 13095     11E1                     __ptext26:	
 13096 ;; *************** function _EUSART1_Write *****************
 13097 ;; Defined at:
 13098 ;;		line 259 in file "mcc_generated_files/eusart1.c"
 13099 ;; Parameters:    Size  Location     Type
 13100 ;;  txData          1    wreg     unsigned char 
 13101 ;; Auto vars:     Size  Location     Type
 13102 ;;  txData          1    0[BANK0 ] unsigned char 
 13103 ;; Return value:  Size  Location     Type
 13104 ;;                  1    wreg      void 
 13105 ;; Registers used:
 13106 ;;		wreg
 13107 ;; Tracked objects:
 13108 ;;		On entry : 3F/0
 13109 ;;		On exit  : 3F/2
 13110 ;;		Unchanged: 0/0
 13111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;Total ram usage:        1 bytes
 13117 ;; Hardware stack levels used: 1
 13118 ;; Hardware stack levels required when called: 5
 13119 ;; This function calls:
 13120 ;;		Nothing
 13121 ;; This function is called by:
 13122 ;;		_write_serial
 13123 ;; This function uses a non-reentrant model
 13124 ;;
 13125                           
 13126     11E1                     _EUSART1_Write:	
 13127                           ;psect for function _EUSART1_Write
 13128                           
 13129                           
 13130                           ;incstack = 0
 13131                           ; Regs used in _EUSART1_Write: [wreg]
 13132                           ;EUSART1_Write@txData stored from wreg
 13133     11E1  00A0               	movwf	EUSART1_Write@txData
 13134     11E2                     l379:	
 13135                           ;mcc_generated_files/eusart1.c: 262:     {;mcc_generated_files/eusart1.c: 263:     }
 13136                           
 13137                           
 13138                           ;mcc_generated_files/eusart1.c: 261:     while(0 == PIR3bits.TX1IF)
 13139     11E2  014E               	movlb	14	; select bank14
 13140     11E3  1E0F               	btfss	15,4	;volatile
 13141     11E4  29E2               	goto	l379
 13142                           
 13143                           ;mcc_generated_files/eusart1.c: 265:     TX1REG = txData;
 13144     11E5  0140               	movlb	0	; select bank0
 13145     11E6  0820               	movf	EUSART1_Write@txData,w
 13146     11E7  0142               	movlb	2	; select bank2
 13147     11E8  009A               	movwf	26	;volatile
 13148     11E9  0008               	return
 13149     11EA                     __end_of_EUSART1_Write:
 13150                           
 13151                           	psect	text27
 13152     06C5                     __ptext27:	
 13153 ;; *************** function _recv_read_registers_res *****************
 13154 ;; Defined at:
 13155 ;;		line 415 in file "nanomodbus.c"
 13156 ;; Parameters:    Size  Location     Type
 13157 ;;  nmbs            2   45[BANK0 ] PTR struct nmbs_t
 13158 ;;		 -> main@nmbs(76), 
 13159 ;;  quantity        2   47[BANK0 ] unsigned short 
 13160 ;;  registers       2   49[BANK0 ] PTR unsigned short 
 13161 ;;		 -> NULL(0), 
 13162 ;; Auto vars:     Size  Location     Type
 13163 ;;  reg             2   55[BANK0 ] unsigned short 
 13164 ;;  i               2   57[BANK0 ] int 
 13165 ;;  err             1   60[BANK0 ] enum E10857
 13166 ;;  registers_by    1   59[BANK0 ] unsigned char 
 13167 ;; Return value:  Size  Location     Type
 13168 ;;                  1    wreg      enum E10857
 13169 ;; Registers used:
 13170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13171 ;; Tracked objects:
 13172 ;;		On entry : 3F/0
 13173 ;;		On exit  : 3F/0
 13174 ;;		Unchanged: 0/0
 13175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13176 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13177 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13178 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;Total ram usage:       16 bytes
 13181 ;; Hardware stack levels used: 1
 13182 ;; Hardware stack levels required when called: 10
 13183 ;; This function calls:
 13184 ;;		_get_1
 13185 ;;		_get_2
 13186 ;;		_recv
 13187 ;;		_recv_msg_footer
 13188 ;;		_recv_res_header
 13189 ;; This function is called by:
 13190 ;;		_handle_read_registers
 13191 ;; This function uses a non-reentrant model
 13192 ;;
 13193                           
 13194     06C5                     _recv_read_registers_res:	
 13195                           ;psect for function _recv_read_registers_res
 13196                           
 13197                           
 13198                           ;nanomodbus.c: 416:     nmbs_error err = recv_res_header(nmbs);
 13199                           
 13200                           ;incstack = 0
 13201                           ; Regs used in _recv_read_registers_res: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13202     06C5  084E               	movf	recv_read_registers_res@nmbs+1,w
 13203     06C6  00C3               	movwf	recv_res_header@nmbs+1
 13204     06C7  084D               	movf	recv_read_registers_res@nmbs,w
 13205     06C8  00C2               	movwf	recv_res_header@nmbs
 13206     06C9  3184  24E8  3186   	fcall	_recv_res_header
 13207     06CC  00DC               	movwf	recv_read_registers_res@err
 13208                           
 13209                           ;nanomodbus.c: 417:     if (err != NMBS_ERROR_NONE)
 13210     06CD  085C               	movf	recv_read_registers_res@err,w
 13211     06CE  1903               	btfsc	3,2
 13212     06CF  2ED2               	goto	l7297
 13213     06D0                     l7293:
 13214                           
 13215                           ;nanomodbus.c: 418:         return err;
 13216     06D0  085C               	movf	recv_read_registers_res@err,w
 13217     06D1  0008               	return
 13218     06D2                     l7297:
 13219                           
 13220                           ;nanomodbus.c: 420:     err = recv(nmbs, 1);
 13221     06D2  084E               	movf	recv_read_registers_res@nmbs+1,w
 13222     06D3  00B5               	movwf	recv@nmbs+1
 13223     06D4  084D               	movf	recv_read_registers_res@nmbs,w
 13224     06D5  00B4               	movwf	recv@nmbs
 13225     06D6  3001               	movlw	1
 13226     06D7  00B6               	movwf	recv@count
 13227     06D8  3000               	movlw	0
 13228     06D9  00B7               	movwf	recv@count+1
 13229     06DA  3197  27C9  3186   	fcall	_recv
 13230     06DD  00DC               	movwf	recv_read_registers_res@err
 13231                           
 13232                           ;nanomodbus.c: 421:     if (err != NMBS_ERROR_NONE)
 13233     06DE  085C               	movf	recv_read_registers_res@err,w
 13234     06DF  1D03               	btfss	3,2
 13235     06E0  2ED0               	goto	l7293
 13236                           
 13237                           ;nanomodbus.c: 424:     uint8_t registers_bytes = get_1(nmbs);
 13238     06E1  084E               	movf	recv_read_registers_res@nmbs+1,w
 13239     06E2  00A1               	movwf	get_1@nmbs+1
 13240     06E3  084D               	movf	recv_read_registers_res@nmbs,w
 13241     06E4  00A0               	movwf	get_1@nmbs
 13242     06E5  3194  2473  3186   	fcall	_get_1
 13243     06E8  00DB               	movwf	recv_read_registers_res@registers_bytes
 13244                           
 13245                           ;nanomodbus.c: 427:     err = recv(nmbs, registers_bytes);
 13246     06E9  084E               	movf	recv_read_registers_res@nmbs+1,w
 13247     06EA  00B5               	movwf	recv@nmbs+1
 13248     06EB  084D               	movf	recv_read_registers_res@nmbs,w
 13249     06EC  00B4               	movwf	recv@nmbs
 13250     06ED  085B               	movf	recv_read_registers_res@registers_bytes,w
 13251     06EE  00D3               	movwf	??_recv_read_registers_res
 13252     06EF  01D4               	clrf	??_recv_read_registers_res+1
 13253     06F0  0853               	movf	??_recv_read_registers_res,w
 13254     06F1  00B6               	movwf	recv@count
 13255     06F2  0854               	movf	??_recv_read_registers_res+1,w
 13256     06F3  00B7               	movwf	recv@count+1
 13257     06F4  3197  27C9  3186   	fcall	_recv
 13258     06F7  00DC               	movwf	recv_read_registers_res@err
 13259                           
 13260                           ;nanomodbus.c: 428:     if (err != NMBS_ERROR_NONE)
 13261     06F8  085C               	movf	recv_read_registers_res@err,w
 13262     06F9  1D03               	btfss	3,2
 13263     06FA  2ED0               	goto	l7293
 13264                           
 13265                           ;nanomodbus.c: 432:     for (int i = 0; i < registers_bytes / 2; i++) {
 13266     06FB  01D9               	clrf	recv_read_registers_res@i
 13267     06FC  01DA               	clrf	recv_read_registers_res@i+1
 13268     06FD                     l7325:
 13269     06FD  085B               	movf	recv_read_registers_res@registers_bytes,w
 13270     06FE  00D3               	movwf	??_recv_read_registers_res
 13271     06FF  3001               	movlw	1
 13272     0700                     u4325:
 13273     0700  36D3               	lsrf	??_recv_read_registers_res,f
 13274     0701  0B89               	decfsz	9,f
 13275     0702  2F00               	goto	u4325
 13276     0703  085A               	movf	recv_read_registers_res@i+1,w
 13277     0704  3A80               	xorlw	128
 13278     0705  00D4               	movwf	??_recv_read_registers_res+1
 13279     0706  3080               	movlw	128
 13280     0707  0254               	subwf	??_recv_read_registers_res+1,w
 13281     0708  1D03               	skipz
 13282     0709  2F0C               	goto	u4335
 13283     070A  0853               	movf	??_recv_read_registers_res,w
 13284     070B  0259               	subwf	recv_read_registers_res@i,w
 13285     070C                     u4335:
 13286     070C  1803               	btfsc	3,0
 13287     070D  2F33               	goto	l7327
 13288                           
 13289                           ;nanomodbus.c: 433:         uint16_t reg = get_2(nmbs);
 13290     070E  0140               	movlb	0	; select bank0
 13291     070F  084E               	movf	recv_read_registers_res@nmbs+1,w
 13292     0710  00A1               	movwf	get_2@nmbs+1
 13293     0711  084D               	movf	recv_read_registers_res@nmbs,w
 13294     0712  00A0               	movwf	get_2@nmbs
 13295     0713  3188  209E  3186   	fcall	_get_2
 13296     0716  0821               	movf	?_get_2+1,w
 13297     0717  00D8               	movwf	recv_read_registers_res@reg+1
 13298     0718  0820               	movf	?_get_2,w
 13299     0719  00D7               	movwf	recv_read_registers_res@reg
 13300                           
 13301                           ;nanomodbus.c: 434:         if (registers)
 13302     071A  0851               	movf	recv_read_registers_res@registers,w
 13303     071B  0452               	iorwf	recv_read_registers_res@registers+1,w
 13304     071C  1903               	btfsc	3,2
 13305     071D  2F2E               	goto	l7323
 13306                           
 13307                           ;nanomodbus.c: 435:             registers[i] = reg;
 13308     071E  085A               	movf	recv_read_registers_res@i+1,w
 13309     071F  00D4               	movwf	??_recv_read_registers_res+1
 13310     0720  0859               	movf	recv_read_registers_res@i,w
 13311     0721  00D3               	movwf	??_recv_read_registers_res
 13312     0722  35D3               	lslf	??_recv_read_registers_res,f
 13313     0723  0DD4               	rlf	??_recv_read_registers_res+1,f
 13314     0724  0853               	movf	??_recv_read_registers_res,w
 13315     0725  0751               	addwf	recv_read_registers_res@registers,w
 13316     0726  0086               	movwf	6
 13317     0727  0854               	movf	??_recv_read_registers_res+1,w
 13318     0728  3D52               	addwfc	recv_read_registers_res@registers+1,w
 13319     0729  0087               	movwf	7
 13320     072A  0857               	movf	recv_read_registers_res@reg,w
 13321     072B  3FC0               	movwi [0]fsr1
 13322     072C  0858               	movf	recv_read_registers_res@reg+1,w
 13323     072D  3FC1               	movwi [1]fsr1
 13324     072E                     l7323:
 13325                           
 13326                           ;nanomodbus.c: 437:     }
 13327     072E  3001               	movlw	1
 13328     072F  07D9               	addwf	recv_read_registers_res@i,f
 13329     0730  3000               	movlw	0
 13330     0731  3DDA               	addwfc	recv_read_registers_res@i+1,f
 13331     0732  2EFD               	goto	l7325
 13332     0733                     l7327:
 13333                           
 13334                           ;nanomodbus.c: 439:     err = recv_msg_footer(nmbs);
 13335     0733  0140               	movlb	0	; select bank0
 13336     0734  084E               	movf	recv_read_registers_res@nmbs+1,w
 13337     0735  00BA               	movwf	recv_msg_footer@nmbs+1
 13338     0736  084D               	movf	recv_read_registers_res@nmbs,w
 13339     0737  00B9               	movwf	recv_msg_footer@nmbs
 13340     0738  318A  22F0  3186   	fcall	_recv_msg_footer
 13341     073B  00DC               	movwf	recv_read_registers_res@err
 13342                           
 13343                           ;nanomodbus.c: 440:     if (err != NMBS_ERROR_NONE)
 13344     073C  085C               	movf	recv_read_registers_res@err,w
 13345     073D  1D03               	btfss	3,2
 13346     073E  2ED0               	goto	l7293
 13347                           
 13348                           ;nanomodbus.c: 443:     if (registers_bytes != quantity * 2)
 13349     073F  0850               	movf	recv_read_registers_res@quantity+1,w
 13350     0740  00D4               	movwf	??_recv_read_registers_res+1
 13351     0741  084F               	movf	recv_read_registers_res@quantity,w
 13352     0742  00D3               	movwf	??_recv_read_registers_res
 13353     0743  35D3               	lslf	??_recv_read_registers_res,f
 13354     0744  0DD4               	rlf	??_recv_read_registers_res+1,f
 13355     0745  085B               	movf	recv_read_registers_res@registers_bytes,w
 13356     0746  00D5               	movwf	??_recv_read_registers_res+2
 13357     0747  01D6               	clrf	??_recv_read_registers_res+3
 13358     0748  0854               	movf	??_recv_read_registers_res+1,w
 13359     0749  0656               	xorwf	??_recv_read_registers_res+3,w
 13360     074A  1D03               	skipz
 13361     074B  2F4E               	goto	u4355
 13362     074C  0853               	movf	??_recv_read_registers_res,w
 13363     074D  0655               	xorwf	??_recv_read_registers_res+2,w
 13364     074E                     u4355:
 13365     074E  1903               	skipnz
 13366     074F  2F52               	goto	l7341
 13367                           
 13368                           ;nanomodbus.c: 444:         return NMBS_ERROR_INVALID_RESPONSE;
 13369     0750  30FE               	movlw	254
 13370     0751  0008               	return
 13371     0752                     l7341:
 13372                           
 13373                           ;nanomodbus.c: 446:     return NMBS_ERROR_NONE;
 13374     0752  3000               	movlw	0
 13375     0753  0008               	return
 13376     0754                     __end_of_recv_read_registers_res:
 13377                           
 13378                           	psect	text28
 13379     04E8                     __ptext28:	
 13380 ;; *************** function _recv_res_header *****************
 13381 ;; Defined at:
 13382 ;;		line 318 in file "nanomodbus.c"
 13383 ;; Parameters:    Size  Location     Type
 13384 ;;  nmbs            2   34[BANK0 ] PTR struct nmbs_t
 13385 ;;		 -> main@nmbs(76), 
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;  exception       1   43[BANK0 ] unsigned char 
 13388 ;;  req_transact    2   38[BANK0 ] unsigned short 
 13389 ;;  err             1   44[BANK0 ] enum E10857
 13390 ;;  req_fc          1   42[BANK0 ] unsigned char 
 13391 ;;  first_byte_r    1   41[BANK0 ] _Bool 
 13392 ;;  req_unit_id     1   40[BANK0 ] unsigned char 
 13393 ;; Return value:  Size  Location     Type
 13394 ;;                  1    wreg      enum E10857
 13395 ;; Registers used:
 13396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13397 ;; Tracked objects:
 13398 ;;		On entry : 3F/0
 13399 ;;		On exit  : 3F/0
 13400 ;;		Unchanged: 0/0
 13401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13402 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13403 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13404 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13405 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13406 ;;Total ram usage:       11 bytes
 13407 ;; Hardware stack levels used: 1
 13408 ;; Hardware stack levels required when called: 9
 13409 ;; This function calls:
 13410 ;;		_get_1
 13411 ;;		_recv
 13412 ;;		_recv_msg_footer
 13413 ;;		_recv_msg_header
 13414 ;; This function is called by:
 13415 ;;		_recv_read_registers_res
 13416 ;;		_recv_write_single_coil_res
 13417 ;;		_recv_write_single_register_res
 13418 ;; This function uses a non-reentrant model
 13419 ;;
 13420                           
 13421     04E8                     _recv_res_header:	
 13422                           ;psect for function _recv_res_header
 13423                           
 13424                           
 13425                           ;nanomodbus.c: 319:     uint16_t req_transaction_id = nmbs->msg.transaction_id;
 13426                           
 13427                           ;incstack = 0
 13428                           ; Regs used in _recv_res_header: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13429     04E8  0842               	movf	recv_res_header@nmbs,w
 13430     04E9  3E34               	addlw	52
 13431     04EA  0086               	movwf	6
 13432     04EB  3000               	movlw	0
 13433     04EC  3D43               	addwfc	recv_res_header@nmbs+1,w
 13434     04ED  0087               	movwf	7
 13435     04EE  3F40               	moviw [0]fsr1
 13436     04EF  00C6               	movwf	recv_res_header@req_transaction_id
 13437     04F0  3F41               	moviw [1]fsr1
 13438     04F1  00C7               	movwf	recv_res_header@req_transaction_id+1
 13439                           
 13440                           ;nanomodbus.c: 320:     uint8_t req_unit_id = nmbs->msg.unit_id;
 13441     04F2  0842               	movf	recv_res_header@nmbs,w
 13442     04F3  3E32               	addlw	50
 13443     04F4  0086               	movwf	6
 13444     04F5  3000               	movlw	0
 13445     04F6  3D43               	addwfc	recv_res_header@nmbs+1,w
 13446     04F7  0087               	movwf	7
 13447     04F8  0801               	movf	1,w
 13448     04F9  00C8               	movwf	recv_res_header@req_unit_id
 13449                           
 13450                           ;nanomodbus.c: 321:     uint8_t req_fc = nmbs->msg.fc;
 13451     04FA  0842               	movf	recv_res_header@nmbs,w
 13452     04FB  3E33               	addlw	51
 13453     04FC  0086               	movwf	6
 13454     04FD  3000               	movlw	0
 13455     04FE  3D43               	addwfc	recv_res_header@nmbs+1,w
 13456     04FF  0087               	movwf	7
 13457     0500  0801               	movf	1,w
 13458     0501  00CA               	movwf	recv_res_header@req_fc
 13459                           
 13460                           ;nanomodbus.c: 323:     _Bool first_byte_received;;nanomodbus.c: 324:     nmbs_error err
      +                           = recv_msg_header(nmbs, &first_byte_received);
 13461     0502  0843               	movf	recv_res_header@nmbs+1,w
 13462     0503  00BA               	movwf	recv_msg_header@nmbs+1
 13463     0504  0842               	movf	recv_res_header@nmbs,w
 13464     0505  00B9               	movwf	recv_msg_header@nmbs
 13465     0506  3049               	movlw	(low (recv_res_header@first_byte_received| 0))& (0+255)
 13466     0507  00BB               	movwf	recv_msg_header@first_byte_received
 13467     0508  318D  25D5  3184   	fcall	_recv_msg_header
 13468     050B  00CC               	movwf	recv_res_header@err
 13469                           
 13470                           ;nanomodbus.c: 325:     if (err != NMBS_ERROR_NONE)
 13471     050C  084C               	movf	recv_res_header@err,w
 13472     050D  1903               	btfsc	3,2
 13473     050E  2D11               	goto	l7123
 13474     050F                     l7119:
 13475                           
 13476                           ;nanomodbus.c: 326:         return err;
 13477     050F  084C               	movf	recv_res_header@err,w
 13478     0510  0008               	return
 13479     0511                     l7123:
 13480                           
 13481                           ;nanomodbus.c: 328:     if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 13482     0511  0842               	movf	recv_res_header@nmbs,w
 13483     0512  3E41               	addlw	65
 13484     0513  0086               	movwf	6
 13485     0514  3000               	movlw	0
 13486     0515  3D43               	addwfc	recv_res_header@nmbs+1,w
 13487     0516  0087               	movwf	7
 13488     0517  3002               	movlw	2
 13489     0518  0601               	xorwf	1,w
 13490     0519  1D03               	btfss	3,2
 13491     051A  2D2F               	goto	l7131
 13492                           
 13493                           ;nanomodbus.c: 329:         if (nmbs->msg.transaction_id != req_transaction_id)
 13494     051B  0842               	movf	recv_res_header@nmbs,w
 13495     051C  3E34               	addlw	52
 13496     051D  0086               	movwf	6
 13497     051E  3000               	movlw	0
 13498     051F  3D43               	addwfc	recv_res_header@nmbs+1,w
 13499     0520  0087               	movwf	7
 13500     0521  3F40               	moviw [0]fsr1
 13501     0522  00C4               	movwf	??_recv_res_header
 13502     0523  3F41               	moviw [1]fsr1
 13503     0524  00C5               	movwf	??_recv_res_header+1
 13504     0525  0847               	movf	recv_res_header@req_transaction_id+1,w
 13505     0526  0645               	xorwf	??_recv_res_header+1,w
 13506     0527  1D03               	skipz
 13507     0528  2D2B               	goto	u4095
 13508     0529  0846               	movf	recv_res_header@req_transaction_id,w
 13509     052A  0644               	xorwf	??_recv_res_header,w
 13510     052B                     u4095:
 13511     052B  1903               	skipnz
 13512     052C  2D2F               	goto	l7131
 13513                           
 13514                           ;nanomodbus.c: 330:             return NMBS_ERROR_INVALID_TCP_MBAP;
 13515     052D  30FA               	movlw	250
 13516     052E  0008               	return
 13517     052F                     l7131:
 13518                           
 13519                           ;nanomodbus.c: 333:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.
      +                          unit_id != req_unit_id)
 13520     052F  0842               	movf	recv_res_header@nmbs,w
 13521     0530  3E41               	addlw	65
 13522     0531  0086               	movwf	6
 13523     0532  3000               	movlw	0
 13524     0533  3D43               	addwfc	recv_res_header@nmbs+1,w
 13525     0534  0087               	movwf	7
 13526     0535  0301               	decf	1,w
 13527     0536  1D03               	btfss	3,2
 13528     0537  2D44               	goto	l7139
 13529     0538  0842               	movf	recv_res_header@nmbs,w
 13530     0539  3E32               	addlw	50
 13531     053A  0086               	movwf	6
 13532     053B  3000               	movlw	0
 13533     053C  3D43               	addwfc	recv_res_header@nmbs+1,w
 13534     053D  0087               	movwf	7
 13535     053E  0801               	movf	1,w
 13536     053F  0648               	xorwf	recv_res_header@req_unit_id,w
 13537     0540  1903               	skipnz
 13538     0541  2D44               	goto	l7139
 13539                           
 13540                           ;nanomodbus.c: 334:         return NMBS_ERROR_INVALID_UNIT_ID;
 13541     0542  30F9               	movlw	249
 13542     0543  0008               	return
 13543     0544                     l7139:
 13544                           
 13545                           ;nanomodbus.c: 336:     if (nmbs->msg.fc != req_fc) {
 13546     0544  0842               	movf	recv_res_header@nmbs,w
 13547     0545  3E33               	addlw	51
 13548     0546  0086               	movwf	6
 13549     0547  3000               	movlw	0
 13550     0548  3D43               	addwfc	recv_res_header@nmbs+1,w
 13551     0549  0087               	movwf	7
 13552     054A  0801               	movf	1,w
 13553     054B  064A               	xorwf	recv_res_header@req_fc,w
 13554     054C  1903               	skipnz
 13555     054D  2D8D               	goto	l7175
 13556                           
 13557                           ;nanomodbus.c: 337:         if (nmbs->msg.fc - 0x80 == req_fc) {
 13558     054E  0842               	movf	recv_res_header@nmbs,w
 13559     054F  3E33               	addlw	51
 13560     0550  0086               	movwf	6
 13561     0551  3000               	movlw	0
 13562     0552  3D43               	addwfc	recv_res_header@nmbs+1,w
 13563     0553  0087               	movwf	7
 13564     0554  0801               	movf	1,w
 13565     0555  3E80               	addlw	128
 13566     0556  00C4               	movwf	??_recv_res_header
 13567     0557  30FF               	movlw	255
 13568     0558  1803               	skipnc
 13569     0559  3000               	movlw	0
 13570     055A  00C5               	movwf	??_recv_res_header+1
 13571     055B  084A               	movf	recv_res_header@req_fc,w
 13572     055C  0644               	xorwf	??_recv_res_header,w
 13573     055D  0445               	iorwf	??_recv_res_header+1,w
 13574     055E  1D03               	skipz
 13575     055F  2D89               	goto	l7163
 13576                           
 13577                           ;nanomodbus.c: 338:             err = recv(nmbs, 1);
 13578     0560  0843               	movf	recv_res_header@nmbs+1,w
 13579     0561  00B5               	movwf	recv@nmbs+1
 13580     0562  0842               	movf	recv_res_header@nmbs,w
 13581     0563  00B4               	movwf	recv@nmbs
 13582     0564  3001               	movlw	1
 13583     0565  00B6               	movwf	recv@count
 13584     0566  3000               	movlw	0
 13585     0567  00B7               	movwf	recv@count+1
 13586     0568  3197  27C9  3184   	fcall	_recv
 13587     056B  00CC               	movwf	recv_res_header@err
 13588                           
 13589                           ;nanomodbus.c: 339:             if (err != NMBS_ERROR_NONE)
 13590     056C  084C               	movf	recv_res_header@err,w
 13591     056D  1D03               	btfss	3,2
 13592     056E  2D0F               	goto	l7119
 13593                           
 13594                           ;nanomodbus.c: 342:             uint8_t exception = get_1(nmbs);
 13595     056F  0843               	movf	recv_res_header@nmbs+1,w
 13596     0570  00A1               	movwf	get_1@nmbs+1
 13597     0571  0842               	movf	recv_res_header@nmbs,w
 13598     0572  00A0               	movwf	get_1@nmbs
 13599     0573  3194  2473  3184   	fcall	_get_1
 13600     0576  00CB               	movwf	recv_res_header@exception
 13601                           
 13602                           ;nanomodbus.c: 343:             err = recv_msg_footer(nmbs);
 13603     0577  0843               	movf	recv_res_header@nmbs+1,w
 13604     0578  00BA               	movwf	recv_msg_footer@nmbs+1
 13605     0579  0842               	movf	recv_res_header@nmbs,w
 13606     057A  00B9               	movwf	recv_msg_footer@nmbs
 13607     057B  318A  22F0  3184   	fcall	_recv_msg_footer
 13608     057E  00CC               	movwf	recv_res_header@err
 13609                           
 13610                           ;nanomodbus.c: 344:             if (err != NMBS_ERROR_NONE)
 13611     057F  084C               	movf	recv_res_header@err,w
 13612     0580  1D03               	btfss	3,2
 13613     0581  2D0F               	goto	l7119
 13614                           
 13615                           ;nanomodbus.c: 347:             if (exception < 1 || exception > 4)
 13616     0582  084B               	movf	recv_res_header@exception,w
 13617     0583  1903               	btfsc	3,2
 13618     0584  2D89               	goto	l7163
 13619     0585  3005               	movlw	5
 13620     0586  024B               	subwf	recv_res_header@exception,w
 13621     0587  1C03               	skipc
 13622     0588  2D8B               	goto	l7167
 13623     0589                     l7163:
 13624                           
 13625                           ;nanomodbus.c: 348:                 return NMBS_ERROR_INVALID_RESPONSE;
 13626     0589  30FE               	movlw	254
 13627     058A  0008               	return
 13628     058B                     l7167:
 13629                           
 13630                           ;nanomodbus.c: 352:             return (nmbs_error) exception;
 13631     058B  084B               	movf	recv_res_header@exception,w
 13632     058C  0008               	return
 13633     058D                     l7175:
 13634                           
 13635                           ;nanomodbus.c: 360:     return NMBS_ERROR_NONE;
 13636     058D  3000               	movlw	0
 13637     058E  0008               	return
 13638     058F                     __end_of_recv_res_header:
 13639                           
 13640                           	psect	text29
 13641     0DD5                     __ptext29:	
 13642 ;; *************** function _recv_msg_header *****************
 13643 ;; Defined at:
 13644 ;;		line 221 in file "nanomodbus.c"
 13645 ;; Parameters:    Size  Location     Type
 13646 ;;  nmbs            2   25[BANK0 ] PTR struct nmbs_t
 13647 ;;		 -> main@nmbs(76), 
 13648 ;;  first_byte_r    1   27[BANK0 ] PTR _Bool 
 13649 ;;		 -> nmbs_server_poll@first_byte_received(1), recv_res_header@first_byte_received(1), 
 13650 ;; Auto vars:     Size  Location     Type
 13651 ;;  err             1   31[BANK0 ] enum E10857
 13652 ;; Return value:  Size  Location     Type
 13653 ;;                  1    wreg      enum E10857
 13654 ;; Registers used:
 13655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13656 ;; Tracked objects:
 13657 ;;		On entry : 3F/0
 13658 ;;		On exit  : 3F/0
 13659 ;;		Unchanged: 0/0
 13660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13661 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13663 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;Total ram usage:        7 bytes
 13666 ;; Hardware stack levels used: 1
 13667 ;; Hardware stack levels required when called: 8
 13668 ;; This function calls:
 13669 ;;		_get_1
 13670 ;;		_msg_state_reset
 13671 ;;		_recv
 13672 ;; This function is called by:
 13673 ;;		_recv_req_header
 13674 ;;		_recv_res_header
 13675 ;; This function uses a non-reentrant model
 13676 ;;
 13677                           
 13678     0DD5                     _recv_msg_header:	
 13679                           ;psect for function _recv_msg_header
 13680                           
 13681                           
 13682                           ;nanomodbus.c: 224:     msg_state_reset(nmbs);
 13683                           
 13684                           ;incstack = 0
 13685                           ; Regs used in _recv_msg_header: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13686     0DD5  083A               	movf	recv_msg_header@nmbs+1,w
 13687     0DD6  00A3               	movwf	msg_state_reset@nmbs+1
 13688     0DD7  0839               	movf	recv_msg_header@nmbs,w
 13689     0DD8  00A2               	movwf	msg_state_reset@nmbs
 13690     0DD9  3196  2603  318D   	fcall	_msg_state_reset
 13691                           
 13692                           ;nanomodbus.c: 226:     *first_byte_received = 0;
 13693     0DDC  083B               	movf	recv_msg_header@first_byte_received,w
 13694     0DDD  0086               	movwf	6
 13695     0DDE  0187               	clrf	7
 13696     0DDF  0181               	clrf	1
 13697                           
 13698                           ;nanomodbus.c: 228:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 13699     0DE0  0839               	movf	recv_msg_header@nmbs,w
 13700     0DE1  3E41               	addlw	65
 13701     0DE2  0086               	movwf	6
 13702     0DE3  3000               	movlw	0
 13703     0DE4  3D3A               	addwfc	recv_msg_header@nmbs+1,w
 13704     0DE5  0087               	movwf	7
 13705     0DE6  0301               	decf	1,w
 13706     0DE7  1D03               	btfss	3,2
 13707     0DE8  2E35               	goto	l7053
 13708                           
 13709                           ;nanomodbus.c: 229:         nmbs_error err = recv(nmbs, 1);
 13710     0DE9  083A               	movf	recv_msg_header@nmbs+1,w
 13711     0DEA  00B5               	movwf	recv@nmbs+1
 13712     0DEB  0839               	movf	recv_msg_header@nmbs,w
 13713     0DEC  00B4               	movwf	recv@nmbs
 13714     0DED  3001               	movlw	1
 13715     0DEE  00B6               	movwf	recv@count
 13716     0DEF  3000               	movlw	0
 13717     0DF0  00B7               	movwf	recv@count+1
 13718     0DF1  3197  27C9  318D   	fcall	_recv
 13719     0DF4  00BF               	movwf	recv_msg_header@err
 13720                           
 13721                           ;nanomodbus.c: 231:         if (err != NMBS_ERROR_NONE)
 13722     0DF5  083F               	movf	recv_msg_header@err,w
 13723     0DF6  1903               	btfsc	3,2
 13724     0DF7  2DFA               	goto	l7039
 13725     0DF8                     l7035:
 13726                           
 13727                           ;nanomodbus.c: 232:             return err;
 13728     0DF8  083F               	movf	recv_msg_header@err,w
 13729     0DF9  0008               	return
 13730     0DFA                     l7039:
 13731                           
 13732                           ;nanomodbus.c: 234:         *first_byte_received = 1;
 13733     0DFA  083B               	movf	recv_msg_header@first_byte_received,w
 13734     0DFB  0086               	movwf	6
 13735     0DFC  0187               	clrf	7
 13736     0DFD  3001               	movlw	1
 13737     0DFE  0081               	movwf	1
 13738                           
 13739                           ;nanomodbus.c: 236:         nmbs->msg.unit_id = get_1(nmbs);
 13740     0DFF  083A               	movf	recv_msg_header@nmbs+1,w
 13741     0E00  00A1               	movwf	get_1@nmbs+1
 13742     0E01  0839               	movf	recv_msg_header@nmbs,w
 13743     0E02  00A0               	movwf	get_1@nmbs
 13744     0E03  3194  2473  318D   	fcall	_get_1
 13745     0E06  00BC               	movwf	??_recv_msg_header
 13746     0E07  0839               	movf	recv_msg_header@nmbs,w
 13747     0E08  3E32               	addlw	50
 13748     0E09  00BD               	movwf	??_recv_msg_header+1
 13749     0E0A  3000               	movlw	0
 13750     0E0B  3D3A               	addwfc	recv_msg_header@nmbs+1,w
 13751     0E0C  00BE               	movwf	??_recv_msg_header+2
 13752     0E0D  083D               	movf	??_recv_msg_header+1,w
 13753     0E0E  0086               	movwf	6
 13754     0E0F  083E               	movf	??_recv_msg_header+2,w
 13755     0E10  0087               	movwf	7
 13756     0E11  083C               	movf	??_recv_msg_header,w
 13757     0E12  0081               	movwf	1
 13758                           
 13759                           ;nanomodbus.c: 238:         err = recv(nmbs, 1);
 13760     0E13  083A               	movf	recv_msg_header@nmbs+1,w
 13761     0E14  00B5               	movwf	recv@nmbs+1
 13762     0E15  0839               	movf	recv_msg_header@nmbs,w
 13763     0E16  00B4               	movwf	recv@nmbs
 13764     0E17  3001               	movlw	1
 13765     0E18  00B6               	movwf	recv@count
 13766     0E19  3000               	movlw	0
 13767     0E1A  00B7               	movwf	recv@count+1
 13768     0E1B  3197  27C9  318D   	fcall	_recv
 13769     0E1E  00BF               	movwf	recv_msg_header@err
 13770                           
 13771                           ;nanomodbus.c: 239:         if (err != NMBS_ERROR_NONE)
 13772     0E1F  083F               	movf	recv_msg_header@err,w
 13773     0E20  1D03               	btfss	3,2
 13774     0E21  2DF8               	goto	l7035
 13775                           
 13776                           ;nanomodbus.c: 242:         nmbs->msg.fc = get_1(nmbs);
 13777     0E22  083A               	movf	recv_msg_header@nmbs+1,w
 13778     0E23  00A1               	movwf	get_1@nmbs+1
 13779     0E24  0839               	movf	recv_msg_header@nmbs,w
 13780     0E25  00A0               	movwf	get_1@nmbs
 13781     0E26  3194  2473         	fcall	_get_1
 13782     0E28  00BC               	movwf	??_recv_msg_header
 13783     0E29  0839               	movf	recv_msg_header@nmbs,w
 13784     0E2A  3E33               	addlw	51
 13785     0E2B  00BD               	movwf	??_recv_msg_header+1
 13786     0E2C  3000               	movlw	0
 13787     0E2D  3D3A               	addwfc	recv_msg_header@nmbs+1,w
 13788     0E2E  00BE               	movwf	??_recv_msg_header+2
 13789     0E2F  083D               	movf	??_recv_msg_header+1,w
 13790     0E30  0086               	movwf	6
 13791     0E31  083E               	movf	??_recv_msg_header+2,w
 13792     0E32  0087               	movwf	7
 13793     0E33  083C               	movf	??_recv_msg_header,w
 13794     0E34  0081               	movwf	1
 13795     0E35                     l7053:
 13796                           
 13797                           ;nanomodbus.c: 245:     return NMBS_ERROR_NONE;
 13798     0E35  3000               	movlw	0
 13799     0E36  0008               	return
 13800     0E37                     __end_of_recv_msg_header:
 13801                           
 13802                           	psect	text30
 13803     1603                     __ptext30:	
 13804 ;; *************** function _msg_state_reset *****************
 13805 ;; Defined at:
 13806 ;;		line 75 in file "nanomodbus.c"
 13807 ;; Parameters:    Size  Location     Type
 13808 ;;  nmbs            2    2[BANK0 ] PTR struct nmbs_t
 13809 ;;		 -> main@nmbs(76), 
 13810 ;; Auto vars:     Size  Location     Type
 13811 ;;		None
 13812 ;; Return value:  Size  Location     Type
 13813 ;;                  1    wreg      void 
 13814 ;; Registers used:
 13815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13816 ;; Tracked objects:
 13817 ;;		On entry : 3F/0
 13818 ;;		On exit  : 3F/0
 13819 ;;		Unchanged: 0/0
 13820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13821 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;Total ram usage:        2 bytes
 13826 ;; Hardware stack levels used: 1
 13827 ;; Hardware stack levels required when called: 6
 13828 ;; This function calls:
 13829 ;;		_msg_buf_reset
 13830 ;; This function is called by:
 13831 ;;		_recv_msg_header
 13832 ;;		_nmbs_server_poll
 13833 ;; This function uses a non-reentrant model
 13834 ;;
 13835                           
 13836     1603                     _msg_state_reset:	
 13837                           ;psect for function _msg_state_reset
 13838                           
 13839                           
 13840                           ;nanomodbus.c: 76:     msg_buf_reset(nmbs);
 13841                           
 13842                           ;incstack = 0
 13843                           ; Regs used in _msg_state_reset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13844     1603  0823               	movf	msg_state_reset@nmbs+1,w
 13845     1604  00A1               	movwf	msg_buf_reset@nmbs+1
 13846     1605  0822               	movf	msg_state_reset@nmbs,w
 13847     1606  00A0               	movwf	msg_buf_reset@nmbs
 13848     1607  3192  2212         	fcall	_msg_buf_reset
 13849                           
 13850                           ;nanomodbus.c: 77:     nmbs->msg.unit_id = 0;
 13851     1609  0822               	movf	msg_state_reset@nmbs,w
 13852     160A  3E32               	addlw	50
 13853     160B  0086               	movwf	6
 13854     160C  3000               	movlw	0
 13855     160D  3D23               	addwfc	msg_state_reset@nmbs+1,w
 13856     160E  0087               	movwf	7
 13857     160F  0181               	clrf	1
 13858                           
 13859                           ;nanomodbus.c: 78:     nmbs->msg.fc = 0;
 13860     1610  0822               	movf	msg_state_reset@nmbs,w
 13861     1611  3E33               	addlw	51
 13862     1612  0086               	movwf	6
 13863     1613  3000               	movlw	0
 13864     1614  3D23               	addwfc	msg_state_reset@nmbs+1,w
 13865     1615  0087               	movwf	7
 13866     1616  0181               	clrf	1
 13867                           
 13868                           ;nanomodbus.c: 79:     nmbs->msg.transaction_id = 0;
 13869     1617  0822               	movf	msg_state_reset@nmbs,w
 13870     1618  3E34               	addlw	52
 13871     1619  0086               	movwf	6
 13872     161A  3000               	movlw	0
 13873     161B  3D23               	addwfc	msg_state_reset@nmbs+1,w
 13874     161C  0087               	movwf	7
 13875     161D  3000               	movlw	0
 13876     161E  3FC0               	movwi [0]fsr1
 13877     161F  3FC1               	movwi [1]fsr1
 13878                           
 13879                           ;nanomodbus.c: 80:     nmbs->msg.broadcast = 0;
 13880     1620  0822               	movf	msg_state_reset@nmbs,w
 13881     1621  3E36               	addlw	54
 13882     1622  0086               	movwf	6
 13883     1623  3000               	movlw	0
 13884     1624  3D23               	addwfc	msg_state_reset@nmbs+1,w
 13885     1625  0087               	movwf	7
 13886     1626  0181               	clrf	1
 13887                           
 13888                           ;nanomodbus.c: 81:     nmbs->msg.ignored = 0;
 13889     1627  0822               	movf	msg_state_reset@nmbs,w
 13890     1628  3E37               	addlw	55
 13891     1629  0086               	movwf	6
 13892     162A  3000               	movlw	0
 13893     162B  3D23               	addwfc	msg_state_reset@nmbs+1,w
 13894     162C  0087               	movwf	7
 13895     162D  0181               	clrf	1
 13896     162E  0008               	return
 13897     162F                     __end_of_msg_state_reset:
 13898                           
 13899                           	psect	text31
 13900     1473                     __ptext31:	
 13901 ;; *************** function _get_1 *****************
 13902 ;; Defined at:
 13903 ;;		line 39 in file "nanomodbus.c"
 13904 ;; Parameters:    Size  Location     Type
 13905 ;;  nmbs            2    0[BANK0 ] PTR struct nmbs_t
 13906 ;;		 -> main@nmbs(76), 
 13907 ;; Auto vars:     Size  Location     Type
 13908 ;;  result          1    2[BANK0 ] unsigned char 
 13909 ;; Return value:  Size  Location     Type
 13910 ;;                  1    wreg      unsigned char 
 13911 ;; Registers used:
 13912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 13913 ;; Tracked objects:
 13914 ;;		On entry : 3F/0
 13915 ;;		On exit  : 3F/0
 13916 ;;		Unchanged: 0/0
 13917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13918 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13921 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13922 ;;Total ram usage:        3 bytes
 13923 ;; Hardware stack levels used: 1
 13924 ;; Hardware stack levels required when called: 5
 13925 ;; This function calls:
 13926 ;;		Nothing
 13927 ;; This function is called by:
 13928 ;;		_recv_msg_header
 13929 ;;		_recv_res_header
 13930 ;;		_recv_read_registers_res
 13931 ;; This function uses a non-reentrant model
 13932 ;;
 13933                           
 13934     1473                     _get_1:	
 13935                           ;psect for function _get_1
 13936                           
 13937                           
 13938                           ;nanomodbus.c: 40:     uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 13939                           
 13940                           ;incstack = 0
 13941                           ; Regs used in _get_1: [wreg-fsr1h+status,2+status,0]
 13942     1473  0820               	movf	get_1@nmbs,w
 13943     1474  3E30               	addlw	48
 13944     1475  0086               	movwf	6
 13945     1476  3000               	movlw	0
 13946     1477  3D21               	addwfc	get_1@nmbs+1,w
 13947     1478  0087               	movwf	7
 13948     1479  3F40               	moviw [0]fsr1
 13949     147A  0720               	addwf	get_1@nmbs,w
 13950     147B  0084               	movwf	4
 13951     147C  3F41               	moviw [1]fsr1
 13952     147D  3D21               	addwfc	get_1@nmbs+1,w
 13953     147E  0085               	movwf	5
 13954     147F  0800               	movf	0,w
 13955     1480  00A2               	movwf	get_1@result
 13956                           
 13957                           ;nanomodbus.c: 41:     nmbs->msg.buf_idx++;
 13958     1481  0820               	movf	get_1@nmbs,w
 13959     1482  3E30               	addlw	48
 13960     1483  0086               	movwf	6
 13961     1484  3000               	movlw	0
 13962     1485  3D21               	addwfc	get_1@nmbs+1,w
 13963     1486  0087               	movwf	7
 13964     1487  3001               	movlw	1
 13965     1488  0781               	addwf	1,f
 13966     1489  3141               	addfsr 1,1
 13967     148A  1803               	skipnc
 13968     148B  0A81               	incf	1,f
 13969                           
 13970                           ;nanomodbus.c: 42:     return result;
 13971     148C  0822               	movf	get_1@result,w
 13972     148D  0008               	return
 13973     148E                     __end_of_get_1:
 13974                           
 13975                           	psect	text32
 13976     0AF0                     __ptext32:	
 13977 ;; *************** function _recv_msg_footer *****************
 13978 ;; Defined at:
 13979 ;;		line 201 in file "nanomodbus.c"
 13980 ;; Parameters:    Size  Location     Type
 13981 ;;  nmbs            2   25[BANK0 ] PTR struct nmbs_t
 13982 ;;		 -> main@nmbs(76), 
 13983 ;; Auto vars:     Size  Location     Type
 13984 ;;  recv_crc        2   31[BANK0 ] unsigned short 
 13985 ;;  crc             2   29[BANK0 ] unsigned short 
 13986 ;;  err             1   33[BANK0 ] enum E10857
 13987 ;; Return value:  Size  Location     Type
 13988 ;;                  1    wreg      enum E10857
 13989 ;; Registers used:
 13990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13991 ;; Tracked objects:
 13992 ;;		On entry : 3F/0
 13993 ;;		On exit  : 3F/0
 13994 ;;		Unchanged: 0/0
 13995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13996 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13997 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13998 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13999 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;Total ram usage:        9 bytes
 14001 ;; Hardware stack levels used: 1
 14002 ;; Hardware stack levels required when called: 8
 14003 ;; This function calls:
 14004 ;;		_get_2
 14005 ;;		_nmbs_crc_calc
 14006 ;;		_recv
 14007 ;; This function is called by:
 14008 ;;		_recv_res_header
 14009 ;;		_recv_read_registers_res
 14010 ;;		_recv_write_single_coil_res
 14011 ;;		_recv_write_single_register_res
 14012 ;;		_handle_read_registers
 14013 ;;		_handle_write_single_coil@nanomodbus$F3828
 14014 ;;		_handle_write_single_register@nanomodbus$F3873
 14015 ;; This function uses a non-reentrant model
 14016 ;;
 14017                           
 14018     0AF0                     _recv_msg_footer:	
 14019                           ;psect for function _recv_msg_footer
 14020                           
 14021                           
 14022                           ;nanomodbus.c: 204:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 14023                           
 14024                           ;incstack = 0
 14025                           ; Regs used in _recv_msg_footer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14026     0AF0  0839               	movf	recv_msg_footer@nmbs,w
 14027     0AF1  3E41               	addlw	65
 14028     0AF2  0086               	movwf	6
 14029     0AF3  3000               	movlw	0
 14030     0AF4  3D3A               	addwfc	recv_msg_footer@nmbs+1,w
 14031     0AF5  0087               	movwf	7
 14032     0AF6  0301               	decf	1,w
 14033     0AF7  1D03               	btfss	3,2
 14034     0AF8  2B3A               	goto	l7021
 14035                           
 14036                           ;nanomodbus.c: 205:         uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_id
      +                          x);
 14037     0AF9  083A               	movf	recv_msg_footer@nmbs+1,w
 14038     0AFA  00A1               	movwf	nmbs_crc_calc@data+1
 14039     0AFB  0839               	movf	recv_msg_footer@nmbs,w
 14040     0AFC  00A0               	movwf	nmbs_crc_calc@data
 14041     0AFD  0839               	movf	recv_msg_footer@nmbs,w
 14042     0AFE  3E30               	addlw	48
 14043     0AFF  0086               	movwf	6
 14044     0B00  3000               	movlw	0
 14045     0B01  3D3A               	addwfc	recv_msg_footer@nmbs+1,w
 14046     0B02  0087               	movwf	7
 14047     0B03  3F40               	moviw [0]fsr1
 14048     0B04  00BB               	movwf	??_recv_msg_footer
 14049     0B05  3F41               	moviw [1]fsr1
 14050     0B06  00BC               	movwf	??_recv_msg_footer+1
 14051     0B07  083B               	movf	??_recv_msg_footer,w
 14052     0B08  00A2               	movwf	nmbs_crc_calc@length
 14053     0B09  083C               	movf	??_recv_msg_footer+1,w
 14054     0B0A  00A3               	movwf	nmbs_crc_calc@length+1
 14055     0B0B  01A4               	clrf	nmbs_crc_calc@length+2
 14056     0B0C  01A5               	clrf	nmbs_crc_calc@length+3
 14057     0B0D  318D  251B  318A   	fcall	_nmbs_crc_calc
 14058     0B10  0821               	movf	?_nmbs_crc_calc+1,w
 14059     0B11  00BE               	movwf	recv_msg_footer@crc+1
 14060     0B12  0820               	movf	?_nmbs_crc_calc,w
 14061     0B13  00BD               	movwf	recv_msg_footer@crc
 14062                           
 14063                           ;nanomodbus.c: 207:         nmbs_error err = recv(nmbs, 2);
 14064     0B14  083A               	movf	recv_msg_footer@nmbs+1,w
 14065     0B15  00B5               	movwf	recv@nmbs+1
 14066     0B16  0839               	movf	recv_msg_footer@nmbs,w
 14067     0B17  00B4               	movwf	recv@nmbs
 14068     0B18  3002               	movlw	2
 14069     0B19  00B6               	movwf	recv@count
 14070     0B1A  3000               	movlw	0
 14071     0B1B  00B7               	movwf	recv@count+1
 14072     0B1C  3197  27C9  318A   	fcall	_recv
 14073     0B1F  00C1               	movwf	recv_msg_footer@err
 14074                           
 14075                           ;nanomodbus.c: 208:         if (err != NMBS_ERROR_NONE)
 14076     0B20  0841               	movf	recv_msg_footer@err,w
 14077     0B21  1903               	btfsc	3,2
 14078     0B22  2B25               	goto	l7013
 14079                           
 14080                           ;nanomodbus.c: 209:             return err;
 14081     0B23  0841               	movf	recv_msg_footer@err,w
 14082     0B24  0008               	return
 14083     0B25                     l7013:
 14084                           
 14085                           ;nanomodbus.c: 211:         uint16_t recv_crc = get_2(nmbs);
 14086     0B25  083A               	movf	recv_msg_footer@nmbs+1,w
 14087     0B26  00A1               	movwf	get_2@nmbs+1
 14088     0B27  0839               	movf	recv_msg_footer@nmbs,w
 14089     0B28  00A0               	movwf	get_2@nmbs
 14090     0B29  3188  209E  318A   	fcall	_get_2
 14091     0B2C  0821               	movf	?_get_2+1,w
 14092     0B2D  00C0               	movwf	recv_msg_footer@recv_crc+1
 14093     0B2E  0820               	movf	?_get_2,w
 14094     0B2F  00BF               	movwf	recv_msg_footer@recv_crc
 14095                           
 14096                           ;nanomodbus.c: 213:         if (recv_crc != crc)
 14097     0B30  083E               	movf	recv_msg_footer@crc+1,w
 14098     0B31  0640               	xorwf	recv_msg_footer@recv_crc+1,w
 14099     0B32  1D03               	skipz
 14100     0B33  2B36               	goto	u3975
 14101     0B34  083D               	movf	recv_msg_footer@crc,w
 14102     0B35  063F               	xorwf	recv_msg_footer@recv_crc,w
 14103     0B36                     u3975:
 14104     0B36  1903               	skipnz
 14105     0B37  2B3A               	goto	l7021
 14106                           
 14107                           ;nanomodbus.c: 214:             return NMBS_ERROR_CRC;
 14108     0B38  30FB               	movlw	251
 14109     0B39  0008               	return
 14110     0B3A                     l7021:
 14111                           
 14112                           ;nanomodbus.c: 217:     return NMBS_ERROR_NONE;
 14113     0B3A  3000               	movlw	0
 14114     0B3B  0008               	return
 14115     0B3C                     __end_of_recv_msg_footer:
 14116                           
 14117                           	psect	text33
 14118     17C9                     __ptext33:	
 14119 ;; *************** function _recv *****************
 14120 ;; Defined at:
 14121 ;;		line 166 in file "nanomodbus.c"
 14122 ;; Parameters:    Size  Location     Type
 14123 ;;  nmbs            2   20[BANK0 ] PTR struct nmbs_t
 14124 ;;		 -> main@nmbs(76), 
 14125 ;;  count           2   22[BANK0 ] unsigned short 
 14126 ;; Auto vars:     Size  Location     Type
 14127 ;;  ret             1   24[BANK0 ] char 
 14128 ;; Return value:  Size  Location     Type
 14129 ;;                  1    wreg      enum E10857
 14130 ;; Registers used:
 14131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14132 ;; Tracked objects:
 14133 ;;		On entry : 3F/0
 14134 ;;		On exit  : 3F/0
 14135 ;;		Unchanged: 0/0
 14136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14137 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14140 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14141 ;;Total ram usage:        5 bytes
 14142 ;; Hardware stack levels used: 1
 14143 ;; Hardware stack levels required when called: 7
 14144 ;; This function calls:
 14145 ;;		_read_serial
 14146 ;; This function is called by:
 14147 ;;		_recv_msg_footer
 14148 ;;		_recv_msg_header
 14149 ;;		_recv_res_header
 14150 ;;		_recv_read_registers_res
 14151 ;;		_recv_write_single_coil_res
 14152 ;;		_recv_write_single_register_res
 14153 ;;		_handle_read_registers
 14154 ;;		_handle_write_single_coil@nanomodbus$F3828
 14155 ;;		_handle_write_single_register@nanomodbus$F3873
 14156 ;; This function uses a non-reentrant model
 14157 ;;
 14158                           
 14159     17C9                     _recv:	
 14160                           ;psect for function _recv
 14161                           
 14162                           
 14163                           ;nanomodbus.c: 167:     int8_t ret =
 14164                           
 14165                           ;incstack = 0
 14166                           ; Regs used in _recv: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14167     17C9  0834               	movf	recv@nmbs,w
 14168     17CA  3E30               	addlw	48
 14169     17CB  0086               	movwf	6
 14170     17CC  3000               	movlw	0
 14171     17CD  3D35               	addwfc	recv@nmbs+1,w
 14172     17CE  0087               	movwf	7
 14173     17CF  3F40               	moviw [0]fsr1
 14174     17D0  0734               	addwf	recv@nmbs,w
 14175     17D1  00A1               	movwf	read_serial@buf
 14176     17D2  3F41               	moviw [1]fsr1
 14177     17D3  3D35               	addwfc	recv@nmbs+1,w
 14178     17D4  00A2               	movwf	read_serial@buf+1
 14179     17D5  0837               	movf	recv@count+1,w
 14180     17D6  00A4               	movwf	read_serial@count+1
 14181     17D7  0836               	movf	recv@count,w
 14182     17D8  00A3               	movwf	read_serial@count
 14183     17D9  3000               	movlw	0
 14184     17DA  00A8               	movwf	read_serial@byte_timeout_ms+3
 14185     17DB  3000               	movlw	0
 14186     17DC  00A7               	movwf	read_serial@byte_timeout_ms+2
 14187     17DD  3027               	movlw	39
 14188     17DE  00A6               	movwf	read_serial@byte_timeout_ms+1
 14189     17DF  300F               	movlw	15
 14190     17E0  00A5               	movwf	read_serial@byte_timeout_ms
 14191     17E1  0834               	movf	recv@nmbs,w
 14192     17E2  3E46               	addlw	70
 14193     17E3  0086               	movwf	6
 14194     17E4  3000               	movlw	0
 14195     17E5  3D35               	addwfc	recv@nmbs+1,w
 14196     17E6  0087               	movwf	7
 14197     17E7  3F40               	moviw [0]fsr1
 14198     17E8  00A9               	movwf	read_serial@arg
 14199     17E9  3F41               	moviw [1]fsr1
 14200     17EA  00AA               	movwf	read_serial@arg+1
 14201     17EB  0834               	movf	recv@nmbs,w
 14202     17EC  3E42               	addlw	66
 14203     17ED  0086               	movwf	6
 14204     17EE  3000               	movlw	0
 14205     17EF  3D35               	addwfc	recv@nmbs+1,w
 14206     17F0  0087               	movwf	7
 14207     17F1  3F41               	moviw [1]fsr1
 14208     17F2  008A               	movwf	10
 14209     17F3  3F40               	moviw [0]fsr1
 14210     17F4  000A               	callw
 14211     17F5  3197               	pagesel	$
 14212     17F6  0821               	movf	?_read_serial,w
 14213     17F7  00B8               	movwf	recv@ret
 14214                           
 14215                           ;nanomodbus.c: 170:     if (ret == (int8_t)count)
 14216     17F8  0836               	movf	recv@count,w
 14217     17F9  0638               	xorwf	recv@ret,w
 14218     17FA  1D03               	skipz
 14219     17FB  2FFE               	goto	l6955
 14220                           
 14221                           ;nanomodbus.c: 171:         return NMBS_ERROR_NONE;
 14222     17FC  3000               	movlw	0
 14223     17FD  0008               	return
 14224     17FE                     l6955:
 14225                           
 14226                           ;nanomodbus.c: 180:     return NMBS_ERROR_TRANSPORT;
 14227     17FE  30FC               	movlw	252
 14228     17FF  0008               	return
 14229     1800                     __end_of_recv:
 14230                           
 14231                           	psect	text34
 14232     0829                     __ptext34:	
 14233 ;; *************** function _read_serial *****************
 14234 ;; Defined at:
 14235 ;;		line 22 in file "modbus_imp.c"
 14236 ;; Parameters:    Size  Location     Type
 14237 ;;  buf             2    1[BANK0 ] PTR unsigned char 
 14238 ;;		 -> nmbs$msg$buf$buf(48), nmbs$msg$buf(48), recv@nmbs$msg$buf(48), 
 14239 ;;  count           2    3[BANK0 ] unsigned short 
 14240 ;;  byte_timeout    4    5[BANK0 ] long 
 14241 ;;  arg             2    9[BANK0 ] PTR void 
 14242 ;;		 -> main@registers(45), 
 14243 ;; Auto vars:     Size  Location     Type
 14244 ;;  charCount       4   16[BANK0 ] long 
 14245 ;;  c               1   15[BANK0 ] unsigned char 
 14246 ;; Return value:  Size  Location     Type
 14247 ;;                  4    1[BANK0 ] long 
 14248 ;; Registers used:
 14249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14250 ;; Tracked objects:
 14251 ;;		On entry : 3F/0
 14252 ;;		On exit  : 3F/0
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14255 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14256 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14257 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;Total ram usage:       19 bytes
 14260 ;; Hardware stack levels used: 1
 14261 ;; Hardware stack levels required when called: 6
 14262 ;; This function calls:
 14263 ;;		_EUSART1_Read
 14264 ;; This function is called by:
 14265 ;;		_main
 14266 ;;		_recv
 14267 ;;		_nmbs_server_poll
 14268 ;; This function uses a non-reentrant model
 14269 ;;
 14270                           
 14271     0829                     _read_serial:	
 14272                           ;psect for function _read_serial
 14273                           
 14274                           
 14275                           ;modbus_imp.c: 24:     int32_t charCount = 0;
 14276                           
 14277                           ;incstack = 0
 14278                           ; Regs used in _read_serial: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14279     0829  3000               	movlw	0
 14280     082A  00B3               	movwf	read_serial@charCount+3
 14281     082B  3000               	movlw	0
 14282     082C  00B2               	movwf	read_serial@charCount+2
 14283     082D  3000               	movlw	0
 14284     082E  00B1               	movwf	read_serial@charCount+1
 14285     082F  3000               	movlw	0
 14286     0830  00B0               	movwf	read_serial@charCount
 14287     0831                     l6845:	
 14288                           ;modbus_imp.c: 25:     uint8_t c;;modbus_imp.c: 27:     while(charCount != count)
 14289                           
 14290                           
 14291                           ;modbus_imp.c: 27:     while(charCount != count)
 14292     0831  0823               	movf	read_serial@count,w
 14293     0832  00AB               	movwf	??_read_serial
 14294     0833  0824               	movf	read_serial@count+1,w
 14295     0834  00AC               	movwf	??_read_serial+1
 14296     0835  01AD               	clrf	??_read_serial+2
 14297     0836  01AE               	clrf	??_read_serial+3
 14298     0837  0833               	movf	read_serial@charCount+3,w
 14299     0838  062E               	xorwf	??_read_serial+3,w
 14300     0839  1D03               	skipz
 14301     083A  2845               	goto	u3785
 14302     083B  0832               	movf	read_serial@charCount+2,w
 14303     083C  062D               	xorwf	??_read_serial+2,w
 14304     083D  1D03               	skipz
 14305     083E  2845               	goto	u3785
 14306     083F  0831               	movf	read_serial@charCount+1,w
 14307     0840  062C               	xorwf	??_read_serial+1,w
 14308     0841  1D03               	skipz
 14309     0842  2845               	goto	u3785
 14310     0843  0830               	movf	read_serial@charCount,w
 14311     0844  062B               	xorwf	??_read_serial,w
 14312     0845                     u3785:
 14313     0845  1903               	btfsc	3,2
 14314     0846  285A               	goto	l6847
 14315                           
 14316                           ;modbus_imp.c: 28:     {;modbus_imp.c: 29:             c = EUSART1_Read();
 14317     0847  3192  224A  3188   	fcall	_EUSART1_Read
 14318     084A  00AF               	movwf	read_serial@c
 14319                           
 14320                           ;modbus_imp.c: 30:             buf[charCount++] = c;
 14321     084B  0830               	movf	read_serial@charCount,w
 14322     084C  0721               	addwf	read_serial@buf,w
 14323     084D  0086               	movwf	6
 14324     084E  0831               	movf	read_serial@charCount+1,w
 14325     084F  3D22               	addwfc	read_serial@buf+1,w
 14326     0850  0087               	movwf	7
 14327     0851  082F               	movf	read_serial@c,w
 14328     0852  0081               	movwf	1
 14329     0853  3001               	movlw	1
 14330     0854  07B0               	addwf	read_serial@charCount,f
 14331     0855  3000               	movlw	0
 14332     0856  3DB1               	addwfc	read_serial@charCount+1,f
 14333     0857  3DB2               	addwfc	read_serial@charCount+2,f
 14334     0858  3DB3               	addwfc	read_serial@charCount+3,f
 14335     0859  2831               	goto	l6845
 14336     085A                     l6847:
 14337                           
 14338                           ;modbus_imp.c: 34:     return charCount;
 14339     085A  0833               	movf	read_serial@charCount+3,w
 14340     085B  00A4               	movwf	?_read_serial+3
 14341     085C  0832               	movf	read_serial@charCount+2,w
 14342     085D  00A3               	movwf	?_read_serial+2
 14343     085E  0831               	movf	read_serial@charCount+1,w
 14344     085F  00A2               	movwf	?_read_serial+1
 14345     0860  0830               	movf	read_serial@charCount,w
 14346     0861  00A1               	movwf	?_read_serial
 14347     0862  0008               	return
 14348     0863                     __end_of_read_serial:
 14349                           
 14350                           	psect	text35
 14351     124A                     __ptext35:	
 14352 ;; *************** function _EUSART1_Read *****************
 14353 ;; Defined at:
 14354 ;;		line 238 in file "mcc_generated_files/eusart1.c"
 14355 ;; Parameters:    Size  Location     Type
 14356 ;;		None
 14357 ;; Auto vars:     Size  Location     Type
 14358 ;;  readValue       1    0[BANK0 ] unsigned char 
 14359 ;; Return value:  Size  Location     Type
 14360 ;;                  1    wreg      unsigned char 
 14361 ;; Registers used:
 14362 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14363 ;; Tracked objects:
 14364 ;;		On entry : 3F/0
 14365 ;;		On exit  : 3F/0
 14366 ;;		Unchanged: 0/0
 14367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;Total ram usage:        1 bytes
 14373 ;; Hardware stack levels used: 1
 14374 ;; Hardware stack levels required when called: 5
 14375 ;; This function calls:
 14376 ;;		Nothing
 14377 ;; This function is called by:
 14378 ;;		_read_serial
 14379 ;; This function uses a non-reentrant model
 14380 ;;
 14381                           
 14382     124A                     _EUSART1_Read:	
 14383                           ;psect for function _EUSART1_Read
 14384                           
 14385                           
 14386                           ;mcc_generated_files/eusart1.c: 249:     readValue = eusart1RxBuffer[eusart1RxTail];
 14387                           
 14388                           ;incstack = 0
 14389                           ; Regs used in _EUSART1_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 14390     124A  0872               	movf	_eusart1RxTail,w
 14391     124B  3E46               	addlw	(low (_eusart1RxBuffer| (0+256)))& (0+255)
 14392     124C  0086               	movwf	6
 14393     124D  3001               	movlw	1	; select bank2/3
 14394     124E  0087               	movwf	7
 14395     124F  0801               	movf	1,w
 14396     1250  00A0               	movwf	EUSART1_Read@readValue
 14397                           
 14398                           ;mcc_generated_files/eusart1.c: 250:     eusart1RxTail = (eusart1RxTail + 1) % 8;
 14399     1251  0872               	movf	_eusart1RxTail,w	;volatile
 14400     1252  3E01               	addlw	1
 14401     1253  3907               	andlw	7
 14402     1254  00F2               	movwf	_eusart1RxTail	;volatile
 14403                           
 14404                           ;mcc_generated_files/eusart1.c: 255:     return readValue;
 14405     1255  0820               	movf	EUSART1_Read@readValue,w
 14406     1256  0008               	return
 14407     1257                     __end_of_EUSART1_Read:
 14408                           
 14409                           	psect	text36
 14410     0D1B                     __ptext36:	
 14411 ;; *************** function _nmbs_crc_calc *****************
 14412 ;; Defined at:
 14413 ;;		line 148 in file "nanomodbus.c"
 14414 ;; Parameters:    Size  Location     Type
 14415 ;;  data            2    0[BANK0 ] PTR const unsigned char 
 14416 ;;		 -> nmbs$msg$buf$buf(48), send_msg@nmbs$msg$buf(48), recv_msg_footer@nmbs$msg$buf(48), 
 14417 ;;  length          4    2[BANK0 ] unsigned long 
 14418 ;; Auto vars:     Size  Location     Type
 14419 ;;  j               2   14[BANK0 ] int 
 14420 ;;  i               4   10[BANK0 ] unsigned long 
 14421 ;;  crc             2   16[BANK0 ] unsigned short 
 14422 ;; Return value:  Size  Location     Type
 14423 ;;                  2    0[BANK0 ] unsigned short 
 14424 ;; Registers used:
 14425 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14426 ;; Tracked objects:
 14427 ;;		On entry : 3F/0
 14428 ;;		On exit  : 3F/0
 14429 ;;		Unchanged: 0/0
 14430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14431 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14432 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14433 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14434 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;Total ram usage:       18 bytes
 14436 ;; Hardware stack levels used: 1
 14437 ;; Hardware stack levels required when called: 5
 14438 ;; This function calls:
 14439 ;;		Nothing
 14440 ;; This function is called by:
 14441 ;;		_recv_msg_footer
 14442 ;;		_send_msg
 14443 ;; This function uses a non-reentrant model
 14444 ;;
 14445                           
 14446     0D1B                     _nmbs_crc_calc:	
 14447                           ;psect for function _nmbs_crc_calc
 14448                           
 14449                           
 14450                           ;nanomodbus.c: 149:     uint16_t crc = 0xFFFF;
 14451                           
 14452                           ;incstack = 0
 14453                           ; Regs used in _nmbs_crc_calc: [wreg+fsr1l+fsr1h+status,2+status,0]
 14454     0D1B  30FF               	movlw	255
 14455     0D1C  00B0               	movwf	nmbs_crc_calc@crc
 14456     0D1D  30FF               	movlw	255
 14457     0D1E  00B1               	movwf	nmbs_crc_calc@crc+1
 14458                           
 14459                           ;nanomodbus.c: 150:     for (uint32_t i = 0; i < length; i++) {
 14460     0D1F  3000               	movlw	0
 14461     0D20  00AD               	movwf	nmbs_crc_calc@i+3
 14462     0D21  3000               	movlw	0
 14463     0D22  00AC               	movwf	nmbs_crc_calc@i+2
 14464     0D23  3000               	movlw	0
 14465     0D24  00AB               	movwf	nmbs_crc_calc@i+1
 14466     0D25  3000               	movlw	0
 14467     0D26  00AA               	movwf	nmbs_crc_calc@i
 14468     0D27                     l6941:
 14469     0D27  0825               	movf	nmbs_crc_calc@length+3,w
 14470     0D28  022D               	subwf	nmbs_crc_calc@i+3,w
 14471     0D29  1D03               	skipz
 14472     0D2A  2D35               	goto	u3895
 14473     0D2B  0824               	movf	nmbs_crc_calc@length+2,w
 14474     0D2C  022C               	subwf	nmbs_crc_calc@i+2,w
 14475     0D2D  1D03               	skipz
 14476     0D2E  2D35               	goto	u3895
 14477     0D2F  0823               	movf	nmbs_crc_calc@length+1,w
 14478     0D30  022B               	subwf	nmbs_crc_calc@i+1,w
 14479     0D31  1D03               	skipz
 14480     0D32  2D35               	goto	u3895
 14481     0D33  0822               	movf	nmbs_crc_calc@length,w
 14482     0D34  022A               	subwf	nmbs_crc_calc@i,w
 14483     0D35                     u3895:
 14484     0D35  1803               	btfsc	3,0
 14485     0D36  2D68               	goto	l6943
 14486                           
 14487                           ;nanomodbus.c: 151:         crc ^= (uint16_t) data[i];
 14488     0D37  082A               	movf	nmbs_crc_calc@i,w
 14489     0D38  0720               	addwf	nmbs_crc_calc@data,w
 14490     0D39  0086               	movwf	6
 14491     0D3A  082B               	movf	nmbs_crc_calc@i+1,w
 14492     0D3B  3D21               	addwfc	nmbs_crc_calc@data+1,w
 14493     0D3C  0087               	movwf	7
 14494     0D3D  0801               	movf	1,w
 14495     0D3E  00A6               	movwf	??_nmbs_crc_calc
 14496     0D3F  01A7               	clrf	??_nmbs_crc_calc+1
 14497     0D40  0826               	movf	??_nmbs_crc_calc,w
 14498     0D41  06B0               	xorwf	nmbs_crc_calc@crc,f
 14499     0D42  0827               	movf	??_nmbs_crc_calc+1,w
 14500     0D43  06B1               	xorwf	nmbs_crc_calc@crc+1,f
 14501                           
 14502                           ;nanomodbus.c: 152:         for (int j = 8; j != 0; j--) {
 14503     0D44  3008               	movlw	8
 14504     0D45  00AE               	movwf	nmbs_crc_calc@j
 14505     0D46  3000               	movlw	0
 14506     0D47  00AF               	movwf	nmbs_crc_calc@j+1
 14507     0D48                     l1446:
 14508                           
 14509                           ;nanomodbus.c: 153:             if ((crc & 0x0001) != 0) {
 14510     0D48  1C30               	btfss	nmbs_crc_calc@crc,0
 14511     0D49  2D54               	goto	l6933
 14512                           
 14513                           ;nanomodbus.c: 154:                 crc >>= 1;
 14514     0D4A  3001               	movlw	1
 14515     0D4B                     u3865:
 14516     0D4B  36B1               	lsrf	nmbs_crc_calc@crc+1,f
 14517     0D4C  0CB0               	rrf	nmbs_crc_calc@crc,f
 14518     0D4D  0B89               	decfsz	9,f
 14519     0D4E  2D4B               	goto	u3865
 14520                           
 14521                           ;nanomodbus.c: 155:                 crc ^= 0xA001;
 14522     0D4F  3001               	movlw	1
 14523     0D50  06B0               	xorwf	nmbs_crc_calc@crc,f
 14524     0D51  30A0               	movlw	160
 14525     0D52  06B1               	xorwf	nmbs_crc_calc@crc+1,f
 14526                           
 14527                           ;nanomodbus.c: 156:             }
 14528     0D53  2D59               	goto	l6935
 14529     0D54                     l6933:
 14530                           
 14531                           ;nanomodbus.c: 158:                 crc >>= 1;
 14532     0D54  3001               	movlw	1
 14533     0D55                     u3875:
 14534     0D55  36B1               	lsrf	nmbs_crc_calc@crc+1,f
 14535     0D56  0CB0               	rrf	nmbs_crc_calc@crc,f
 14536     0D57  0B89               	decfsz	9,f
 14537     0D58  2D55               	goto	u3875
 14538     0D59                     l6935:
 14539                           
 14540                           ;nanomodbus.c: 159:         }
 14541     0D59  30FF               	movlw	255
 14542     0D5A  07AE               	addwf	nmbs_crc_calc@j,f
 14543     0D5B  30FF               	movlw	255
 14544     0D5C  3DAF               	addwfc	nmbs_crc_calc@j+1,f
 14545     0D5D  082E               	movf	nmbs_crc_calc@j,w
 14546     0D5E  042F               	iorwf	nmbs_crc_calc@j+1,w
 14547     0D5F  1D03               	btfss	3,2
 14548     0D60  2D48               	goto	l1446
 14549                           
 14550                           ;nanomodbus.c: 160:     }
 14551     0D61  3001               	movlw	1
 14552     0D62  07AA               	addwf	nmbs_crc_calc@i,f
 14553     0D63  3000               	movlw	0
 14554     0D64  3DAB               	addwfc	nmbs_crc_calc@i+1,f
 14555     0D65  3DAC               	addwfc	nmbs_crc_calc@i+2,f
 14556     0D66  3DAD               	addwfc	nmbs_crc_calc@i+3,f
 14557     0D67  2D27               	goto	l6941
 14558     0D68                     l6943:
 14559                           
 14560                           ;nanomodbus.c: 162:     return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 14561     0D68  0831               	movf	nmbs_crc_calc@crc+1,w
 14562     0D69  00A6               	movwf	??_nmbs_crc_calc
 14563     0D6A  01A7               	clrf	??_nmbs_crc_calc+1
 14564     0D6B  0830               	movf	nmbs_crc_calc@crc,w
 14565     0D6C  00A9               	movwf	??_nmbs_crc_calc+3
 14566     0D6D  01A8               	clrf	??_nmbs_crc_calc+2
 14567     0D6E  0826               	movf	??_nmbs_crc_calc,w
 14568     0D6F  0428               	iorwf	??_nmbs_crc_calc+2,w
 14569     0D70  00A0               	movwf	?_nmbs_crc_calc
 14570     0D71  0827               	movf	??_nmbs_crc_calc+1,w
 14571     0D72  0429               	iorwf	??_nmbs_crc_calc+3,w
 14572     0D73  00A1               	movwf	?_nmbs_crc_calc+1
 14573     0D74  0008               	return
 14574     0D75                     __end_of_nmbs_crc_calc:
 14575                           
 14576                           	psect	text37
 14577     089E                     __ptext37:	
 14578 ;; *************** function _get_2 *****************
 14579 ;; Defined at:
 14580 ;;		line 56 in file "nanomodbus.c"
 14581 ;; Parameters:    Size  Location     Type
 14582 ;;  nmbs            2    0[BANK0 ] PTR struct nmbs_t
 14583 ;;		 -> main@nmbs(76), 
 14584 ;; Auto vars:     Size  Location     Type
 14585 ;;  result          2    9[BANK0 ] unsigned short 
 14586 ;; Return value:  Size  Location     Type
 14587 ;;                  2    0[BANK0 ] unsigned short 
 14588 ;; Registers used:
 14589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 14590 ;; Tracked objects:
 14591 ;;		On entry : 3F/0
 14592 ;;		On exit  : 3F/0
 14593 ;;		Unchanged: 0/0
 14594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14595 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14596 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14597 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14598 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14599 ;;Total ram usage:       11 bytes
 14600 ;; Hardware stack levels used: 1
 14601 ;; Hardware stack levels required when called: 5
 14602 ;; This function calls:
 14603 ;;		Nothing
 14604 ;; This function is called by:
 14605 ;;		_recv_msg_footer
 14606 ;;		_recv_read_registers_res
 14607 ;;		_recv_write_single_coil_res
 14608 ;;		_recv_write_single_register_res
 14609 ;;		_handle_read_registers
 14610 ;;		_handle_write_single_coil@nanomodbus$F3828
 14611 ;;		_handle_write_single_register@nanomodbus$F3873
 14612 ;; This function uses a non-reentrant model
 14613 ;;
 14614                           
 14615     089E                     _get_2:	
 14616                           ;psect for function _get_2
 14617                           
 14618                           
 14619                           ;nanomodbus.c: 57:     uint16_t result =
 14620                           
 14621                           ;incstack = 0
 14622                           ; Regs used in _get_2: [wreg-fsr1h+status,2+status,0]
 14623     089E  0820               	movf	get_2@nmbs,w
 14624     089F  3E30               	addlw	48
 14625     08A0  0086               	movwf	6
 14626     08A1  3000               	movlw	0
 14627     08A2  3D21               	addwfc	get_2@nmbs+1,w
 14628     08A3  0087               	movwf	7
 14629     08A4  3F40               	moviw [0]fsr1
 14630     08A5  0720               	addwf	get_2@nmbs,w
 14631     08A6  00A2               	movwf	??_get_2
 14632     08A7  3F41               	moviw [1]fsr1
 14633     08A8  3D21               	addwfc	get_2@nmbs+1,w
 14634     08A9  00A3               	movwf	??_get_2+1
 14635     08AA  0822               	movf	??_get_2,w
 14636     08AB  0086               	movwf	6
 14637     08AC  0823               	movf	??_get_2+1,w
 14638     08AD  0087               	movwf	7
 14639     08AE  3141               	addfsr 1,1
 14640     08AF  0801               	movf	1,w
 14641     08B0  00A4               	movwf	??_get_2+2
 14642     08B1  01A5               	clrf	??_get_2+3
 14643     08B2  0820               	movf	get_2@nmbs,w
 14644     08B3  3E30               	addlw	48
 14645     08B4  0086               	movwf	6
 14646     08B5  3000               	movlw	0
 14647     08B6  3D21               	addwfc	get_2@nmbs+1,w
 14648     08B7  0087               	movwf	7
 14649     08B8  3F40               	moviw [0]fsr1
 14650     08B9  0720               	addwf	get_2@nmbs,w
 14651     08BA  0084               	movwf	4
 14652     08BB  3F41               	moviw [1]fsr1
 14653     08BC  3D21               	addwfc	get_2@nmbs+1,w
 14654     08BD  0085               	movwf	5
 14655     08BE  0800               	movf	0,w
 14656     08BF  00A6               	movwf	??_get_2+4
 14657     08C0  01A7               	clrf	??_get_2+5
 14658     08C1  0826               	movf	??_get_2+4,w
 14659     08C2  00A7               	movwf	??_get_2+5
 14660     08C3  01A6               	clrf	??_get_2+4
 14661     08C4  0824               	movf	??_get_2+2,w
 14662     08C5  0426               	iorwf	??_get_2+4,w
 14663     08C6  00A9               	movwf	get_2@result
 14664     08C7  0825               	movf	??_get_2+3,w
 14665     08C8  0427               	iorwf	??_get_2+5,w
 14666     08C9  00AA               	movwf	get_2@result+1
 14667                           
 14668                           ;nanomodbus.c: 59:     nmbs->msg.buf_idx += 2;
 14669     08CA  0820               	movf	get_2@nmbs,w
 14670     08CB  3E30               	addlw	48
 14671     08CC  0086               	movwf	6
 14672     08CD  3000               	movlw	0
 14673     08CE  3D21               	addwfc	get_2@nmbs+1,w
 14674     08CF  0087               	movwf	7
 14675     08D0  3002               	movlw	2
 14676     08D1  0781               	addwf	1,f
 14677     08D2  3141               	addfsr 1,1
 14678     08D3  1803               	skipnc
 14679     08D4  0A81               	incf	1,f
 14680                           
 14681                           ;nanomodbus.c: 60:     return result;
 14682     08D5  082A               	movf	get_2@result+1,w
 14683     08D6  00A1               	movwf	?_get_2+1
 14684     08D7  0829               	movf	get_2@result,w
 14685     08D8  00A0               	movwf	?_get_2
 14686     08D9  0008               	return
 14687     08DA                     __end_of_get_2:
 14688                           
 14689                           	psect	text38
 14690     1232                     __ptext38:	
 14691 ;; *************** function _put_res_header *****************
 14692 ;; Defined at:
 14693 ;;		line 300 in file "nanomodbus.c"
 14694 ;; Parameters:    Size  Location     Type
 14695 ;;  nmbs            2   10[BANK0 ] PTR struct nmbs_t
 14696 ;;		 -> main@nmbs(76), 
 14697 ;;  data_length     2   12[BANK0 ] unsigned short 
 14698 ;; Auto vars:     Size  Location     Type
 14699 ;;		None
 14700 ;; Return value:  Size  Location     Type
 14701 ;;                  1    wreg      void 
 14702 ;; Registers used:
 14703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14704 ;; Tracked objects:
 14705 ;;		On entry : 3F/0
 14706 ;;		On exit  : 3F/0
 14707 ;;		Unchanged: 0/0
 14708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14709 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14712 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14713 ;;Total ram usage:        4 bytes
 14714 ;; Hardware stack levels used: 1
 14715 ;; Hardware stack levels required when called: 7
 14716 ;; This function calls:
 14717 ;;		_put_msg_header
 14718 ;; This function is called by:
 14719 ;;		_handle_read_registers
 14720 ;;		_handle_write_single_coil@nanomodbus$F3828
 14721 ;;		_handle_write_single_register@nanomodbus$F3873
 14722 ;; This function uses a non-reentrant model
 14723 ;;
 14724                           
 14725     1232                     _put_res_header:	
 14726                           ;psect for function _put_res_header
 14727                           
 14728                           
 14729                           ;nanomodbus.c: 301:     put_msg_header(nmbs, data_length);
 14730                           
 14731                           ;incstack = 0
 14732                           ; Regs used in _put_res_header: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14733     1232  082B               	movf	put_res_header@nmbs+1,w
 14734     1233  00A7               	movwf	put_msg_header@nmbs+1
 14735     1234  082A               	movf	put_res_header@nmbs,w
 14736     1235  00A6               	movwf	put_msg_header@nmbs
 14737     1236  082D               	movf	put_res_header@data_length+1,w
 14738     1237  00A9               	movwf	put_msg_header@data_length+1
 14739     1238  082C               	movf	put_res_header@data_length,w
 14740     1239  00A8               	movwf	put_msg_header@data_length
 14741     123A  318D  2575         	fcall	_put_msg_header
 14742     123C  0008               	return
 14743     123D                     __end_of_put_res_header:
 14744                           
 14745                           	psect	text39
 14746     0D75                     __ptext39:	
 14747 ;; *************** function _put_msg_header *****************
 14748 ;; Defined at:
 14749 ;;		line 249 in file "nanomodbus.c"
 14750 ;; Parameters:    Size  Location     Type
 14751 ;;  nmbs            2    6[BANK0 ] PTR struct nmbs_t
 14752 ;;		 -> main@nmbs(76), 
 14753 ;;  data_length     2    8[BANK0 ] unsigned short 
 14754 ;; Auto vars:     Size  Location     Type
 14755 ;;		None
 14756 ;; Return value:  Size  Location     Type
 14757 ;;                  1    wreg      void 
 14758 ;; Registers used:
 14759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14760 ;; Tracked objects:
 14761 ;;		On entry : 3F/0
 14762 ;;		On exit  : 3F/0
 14763 ;;		Unchanged: 0/0
 14764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14765 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14769 ;;Total ram usage:        4 bytes
 14770 ;; Hardware stack levels used: 1
 14771 ;; Hardware stack levels required when called: 6
 14772 ;; This function calls:
 14773 ;;		_msg_buf_reset
 14774 ;;		_put_1
 14775 ;;		_put_2
 14776 ;; This function is called by:
 14777 ;;		_put_res_header
 14778 ;;		_send_exception_msg
 14779 ;; This function uses a non-reentrant model
 14780 ;;
 14781                           
 14782     0D75                     _put_msg_header:	
 14783                           ;psect for function _put_msg_header
 14784                           
 14785                           
 14786                           ;nanomodbus.c: 250:     msg_buf_reset(nmbs);
 14787                           
 14788                           ;incstack = 0
 14789                           ; Regs used in _put_msg_header: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14790     0D75  0827               	movf	put_msg_header@nmbs+1,w
 14791     0D76  00A1               	movwf	msg_buf_reset@nmbs+1
 14792     0D77  0826               	movf	put_msg_header@nmbs,w
 14793     0D78  00A0               	movwf	msg_buf_reset@nmbs
 14794     0D79  3192  2212  318D   	fcall	_msg_buf_reset
 14795                           
 14796                           ;nanomodbus.c: 252:     if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 14797     0D7C  0826               	movf	put_msg_header@nmbs,w
 14798     0D7D  3E41               	addlw	65
 14799     0D7E  0086               	movwf	6
 14800     0D7F  3000               	movlw	0
 14801     0D80  3D27               	addwfc	put_msg_header@nmbs+1,w
 14802     0D81  0087               	movwf	7
 14803     0D82  0301               	decf	1,w
 14804     0D83  1903               	btfsc	3,2
 14805     0D84  2DB7               	goto	L7
 14806                           
 14807                           ;nanomodbus.c: 254:     }
 14808                           
 14809                           ;nanomodbus.c: 253:         put_1(nmbs, nmbs->msg.unit_id);
 14810     0D85  0826               	movf	put_msg_header@nmbs,w
 14811     0D86  3E41               	addlw	65
 14812     0D87  0086               	movwf	6
 14813     0D88  3000               	movlw	0
 14814     0D89  3D27               	addwfc	put_msg_header@nmbs+1,w
 14815     0D8A  0087               	movwf	7
 14816     0D8B  3002               	movlw	2
 14817     0D8C  0601               	xorwf	1,w
 14818     0D8D  1D03               	btfss	3,2
 14819     0D8E  2DC6               	goto	l1477
 14820                           
 14821                           ;nanomodbus.c: 256:         put_2(nmbs, nmbs->msg.transaction_id);
 14822     0D8F  0827               	movf	put_msg_header@nmbs+1,w
 14823     0D90  00A1               	movwf	put_2@nmbs+1
 14824     0D91  0826               	movf	put_msg_header@nmbs,w
 14825     0D92  00A0               	movwf	put_2@nmbs
 14826     0D93  0826               	movf	put_msg_header@nmbs,w
 14827     0D94  3E34               	addlw	52
 14828     0D95  0086               	movwf	6
 14829     0D96  3000               	movlw	0
 14830     0D97  3D27               	addwfc	put_msg_header@nmbs+1,w
 14831     0D98  0087               	movwf	7
 14832     0D99  3F40               	moviw [0]fsr1
 14833     0D9A  00A2               	movwf	put_2@data
 14834     0D9B  3F41               	moviw [1]fsr1
 14835     0D9C  00A3               	movwf	put_2@data+1
 14836     0D9D  3196  265C  318D   	fcall	_put_2
 14837                           
 14838                           ;nanomodbus.c: 257:         put_2(nmbs, 0);
 14839     0DA0  0827               	movf	put_msg_header@nmbs+1,w
 14840     0DA1  00A1               	movwf	put_2@nmbs+1
 14841     0DA2  0826               	movf	put_msg_header@nmbs,w
 14842     0DA3  00A0               	movwf	put_2@nmbs
 14843     0DA4  3000               	movlw	0
 14844     0DA5  00A2               	movwf	put_2@data
 14845     0DA6  00A3               	movwf	put_2@data+1
 14846     0DA7  3196  265C  318D   	fcall	_put_2
 14847                           
 14848                           ;nanomodbus.c: 258:         put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 14849     0DAA  0827               	movf	put_msg_header@nmbs+1,w
 14850     0DAB  00A1               	movwf	put_2@nmbs+1
 14851     0DAC  0826               	movf	put_msg_header@nmbs,w
 14852     0DAD  00A0               	movwf	put_2@nmbs
 14853     0DAE  0828               	movf	put_msg_header@data_length,w
 14854     0DAF  3E02               	addlw	2
 14855     0DB0  00A2               	movwf	put_2@data
 14856     0DB1  3000               	movlw	0
 14857     0DB2  3D29               	addwfc	put_msg_header@data_length+1,w
 14858     0DB3  00A3               	movwf	put_2@data+1
 14859     0DB4  3196  265C  318D   	fcall	_put_2
 14860     0DB7                     L7:
 14861                           
 14862                           ;nanomodbus.c: 259:         put_1(nmbs, nmbs->msg.unit_id);
 14863     0DB7  0827               	movf	put_msg_header@nmbs+1,w
 14864     0DB8  00A1               	movwf	put_1@nmbs+1
 14865     0DB9  0826               	movf	put_msg_header@nmbs,w
 14866     0DBA  00A0               	movwf	put_1@nmbs
 14867     0DBB  0826               	movf	put_msg_header@nmbs,w
 14868     0DBC  3E32               	addlw	50
 14869     0DBD  0086               	movwf	6
 14870     0DBE  3000               	movlw	0
 14871     0DBF  3D27               	addwfc	put_msg_header@nmbs+1,w
 14872     0DC0  0087               	movwf	7
 14873     0DC1  0801               	movf	1,w
 14874     0DC2  00A2               	movwf	put_1@data
 14875     0DC3  3193  23F0  318D   	fcall	_put_1
 14876     0DC6                     l1477:
 14877                           
 14878                           ;nanomodbus.c: 262:     put_1(nmbs, nmbs->msg.fc);
 14879     0DC6  0827               	movf	put_msg_header@nmbs+1,w
 14880     0DC7  00A1               	movwf	put_1@nmbs+1
 14881     0DC8  0826               	movf	put_msg_header@nmbs,w
 14882     0DC9  00A0               	movwf	put_1@nmbs
 14883     0DCA  0826               	movf	put_msg_header@nmbs,w
 14884     0DCB  3E33               	addlw	51
 14885     0DCC  0086               	movwf	6
 14886     0DCD  3000               	movlw	0
 14887     0DCE  3D27               	addwfc	put_msg_header@nmbs+1,w
 14888     0DCF  0087               	movwf	7
 14889     0DD0  0801               	movf	1,w
 14890     0DD1  00A2               	movwf	put_1@data
 14891     0DD2  3193  23F0         	fcall	_put_1
 14892     0DD4  0008               	return
 14893     0DD5                     __end_of_put_msg_header:
 14894                           
 14895                           	psect	text40
 14896     165C                     __ptext40:	
 14897 ;; *************** function _put_2 *****************
 14898 ;; Defined at:
 14899 ;;		line 64 in file "nanomodbus.c"
 14900 ;; Parameters:    Size  Location     Type
 14901 ;;  nmbs            2    0[BANK0 ] PTR struct nmbs_t
 14902 ;;		 -> main@nmbs(76), 
 14903 ;;  data            2    2[BANK0 ] unsigned short 
 14904 ;; Auto vars:     Size  Location     Type
 14905 ;;		None
 14906 ;; Return value:  Size  Location     Type
 14907 ;;                  1    wreg      void 
 14908 ;; Registers used:
 14909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 14910 ;; Tracked objects:
 14911 ;;		On entry : 3F/0
 14912 ;;		On exit  : 3F/0
 14913 ;;		Unchanged: 0/0
 14914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14915 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;Total ram usage:        6 bytes
 14920 ;; Hardware stack levels used: 1
 14921 ;; Hardware stack levels required when called: 5
 14922 ;; This function calls:
 14923 ;;		Nothing
 14924 ;; This function is called by:
 14925 ;;		_put_msg_header
 14926 ;;		_send_msg
 14927 ;;		_handle_read_registers
 14928 ;;		_handle_write_single_coil@nanomodbus$F3828
 14929 ;;		_handle_write_single_register@nanomodbus$F3873
 14930 ;; This function uses a non-reentrant model
 14931 ;;
 14932                           
 14933     165C                     _put_2:	
 14934                           ;psect for function _put_2
 14935                           
 14936                           
 14937                           ;nanomodbus.c: 65:     nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU
      +                          );
 14938                           
 14939                           ;incstack = 0
 14940                           ; Regs used in _put_2: [wreg-fsr1h+status,2+status,0]
 14941     165C  0820               	movf	put_2@nmbs,w
 14942     165D  3E30               	addlw	48
 14943     165E  0086               	movwf	6
 14944     165F  3000               	movlw	0
 14945     1660  3D21               	addwfc	put_2@nmbs+1,w
 14946     1661  0087               	movwf	7
 14947     1662  3F40               	moviw [0]fsr1
 14948     1663  0720               	addwf	put_2@nmbs,w
 14949     1664  0084               	movwf	4
 14950     1665  3F41               	moviw [1]fsr1
 14951     1666  3D21               	addwfc	put_2@nmbs+1,w
 14952     1667  0085               	movwf	5
 14953     1668  0823               	movf	put_2@data+1,w
 14954     1669  0080               	movwf	0
 14955                           
 14956                           ;nanomodbus.c: 66:     nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 14957     166A  0820               	movf	put_2@nmbs,w
 14958     166B  3E30               	addlw	48
 14959     166C  0086               	movwf	6
 14960     166D  3000               	movlw	0
 14961     166E  3D21               	addwfc	put_2@nmbs+1,w
 14962     166F  0087               	movwf	7
 14963     1670  3F40               	moviw [0]fsr1
 14964     1671  0720               	addwf	put_2@nmbs,w
 14965     1672  00A4               	movwf	??_put_2
 14966     1673  3F41               	moviw [1]fsr1
 14967     1674  3D21               	addwfc	put_2@nmbs+1,w
 14968     1675  00A5               	movwf	??_put_2+1
 14969     1676  0824               	movf	??_put_2,w
 14970     1677  0086               	movwf	6
 14971     1678  0825               	movf	??_put_2+1,w
 14972     1679  0087               	movwf	7
 14973     167A  3141               	addfsr 1,1
 14974     167B  0822               	movf	put_2@data,w
 14975     167C  0081               	movwf	1
 14976                           
 14977                           ;nanomodbus.c: 67:     nmbs->msg.buf_idx += 2;
 14978     167D  0820               	movf	put_2@nmbs,w
 14979     167E  3E30               	addlw	48
 14980     167F  0086               	movwf	6
 14981     1680  3000               	movlw	0
 14982     1681  3D21               	addwfc	put_2@nmbs+1,w
 14983     1682  0087               	movwf	7
 14984     1683  3002               	movlw	2
 14985     1684  0781               	addwf	1,f
 14986     1685  3141               	addfsr 1,1
 14987     1686  1803               	skipnc
 14988     1687  0A81               	incf	1,f
 14989     1688  0008               	return
 14990     1689                     __end_of_put_2:
 14991                           
 14992                           	psect	text41
 14993     13F0                     __ptext41:	
 14994 ;; *************** function _put_1 *****************
 14995 ;; Defined at:
 14996 ;;		line 46 in file "nanomodbus.c"
 14997 ;; Parameters:    Size  Location     Type
 14998 ;;  nmbs            2    0[BANK0 ] PTR struct nmbs_t
 14999 ;;		 -> main@nmbs(76), 
 15000 ;;  data            1    2[BANK0 ] unsigned char 
 15001 ;; Auto vars:     Size  Location     Type
 15002 ;;		None
 15003 ;; Return value:  Size  Location     Type
 15004 ;;                  1    wreg      void 
 15005 ;; Registers used:
 15006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15007 ;; Tracked objects:
 15008 ;;		On entry : 3F/0
 15009 ;;		On exit  : 3F/0
 15010 ;;		Unchanged: 0/0
 15011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15012 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;Total ram usage:        3 bytes
 15017 ;; Hardware stack levels used: 1
 15018 ;; Hardware stack levels required when called: 5
 15019 ;; This function calls:
 15020 ;;		Nothing
 15021 ;; This function is called by:
 15022 ;;		_put_msg_header
 15023 ;;		_send_exception_msg
 15024 ;;		_handle_read_registers
 15025 ;; This function uses a non-reentrant model
 15026 ;;
 15027                           
 15028     13F0                     _put_1:	
 15029                           ;psect for function _put_1
 15030                           
 15031                           
 15032                           ;nanomodbus.c: 47:     nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 15033                           
 15034                           ;incstack = 0
 15035                           ; Regs used in _put_1: [wreg-fsr1h+status,2+status,0]
 15036     13F0  0820               	movf	put_1@nmbs,w
 15037     13F1  3E30               	addlw	48
 15038     13F2  0086               	movwf	6
 15039     13F3  3000               	movlw	0
 15040     13F4  3D21               	addwfc	put_1@nmbs+1,w
 15041     13F5  0087               	movwf	7
 15042     13F6  3F40               	moviw [0]fsr1
 15043     13F7  0720               	addwf	put_1@nmbs,w
 15044     13F8  0084               	movwf	4
 15045     13F9  3F41               	moviw [1]fsr1
 15046     13FA  3D21               	addwfc	put_1@nmbs+1,w
 15047     13FB  0085               	movwf	5
 15048     13FC  0822               	movf	put_1@data,w
 15049     13FD  0080               	movwf	0
 15050                           
 15051                           ;nanomodbus.c: 48:     nmbs->msg.buf_idx++;
 15052     13FE  0820               	movf	put_1@nmbs,w
 15053     13FF  3E30               	addlw	48
 15054     1400  0086               	movwf	6
 15055     1401  3000               	movlw	0
 15056     1402  3D21               	addwfc	put_1@nmbs+1,w
 15057     1403  0087               	movwf	7
 15058     1404  3001               	movlw	1
 15059     1405  0781               	addwf	1,f
 15060     1406  3141               	addfsr 1,1
 15061     1407  1803               	skipnc
 15062     1408  0A81               	incf	1,f
 15063     1409  0008               	return
 15064     140A                     __end_of_put_1:
 15065                           
 15066                           	psect	text42
 15067     1212                     __ptext42:	
 15068 ;; *************** function _msg_buf_reset *****************
 15069 ;; Defined at:
 15070 ;;		line 70 in file "nanomodbus.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;  nmbs            2    0[BANK0 ] PTR struct nmbs_t
 15073 ;;		 -> main@nmbs(76), 
 15074 ;; Auto vars:     Size  Location     Type
 15075 ;;		None
 15076 ;; Return value:  Size  Location     Type
 15077 ;;                  1    wreg      void 
 15078 ;; Registers used:
 15079 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15080 ;; Tracked objects:
 15081 ;;		On entry : 3F/0
 15082 ;;		On exit  : 3F/0
 15083 ;;		Unchanged: 0/0
 15084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15085 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;Total ram usage:        2 bytes
 15090 ;; Hardware stack levels used: 1
 15091 ;; Hardware stack levels required when called: 5
 15092 ;; This function calls:
 15093 ;;		Nothing
 15094 ;; This function is called by:
 15095 ;;		_msg_state_reset
 15096 ;;		_put_msg_header
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100     1212                     _msg_buf_reset:	
 15101                           ;psect for function _msg_buf_reset
 15102                           
 15103                           
 15104                           ;nanomodbus.c: 71:     nmbs->msg.buf_idx = 0;
 15105                           
 15106                           ;incstack = 0
 15107                           ; Regs used in _msg_buf_reset: [wreg+fsr1l+fsr1h+status,2+status,0]
 15108     1212  0820               	movf	msg_buf_reset@nmbs,w
 15109     1213  3E30               	addlw	48
 15110     1214  0086               	movwf	6
 15111     1215  3000               	movlw	0
 15112     1216  3D21               	addwfc	msg_buf_reset@nmbs+1,w
 15113     1217  0087               	movwf	7
 15114     1218  3000               	movlw	0
 15115     1219  3FC0               	movwi [0]fsr1
 15116     121A  3FC1               	movwi [1]fsr1
 15117     121B  0008               	return
 15118     121C                     __end_of_msg_buf_reset:
 15119                           
 15120                           	psect	text43
 15121     09DE                     __ptext43:	
 15122 ;; *************** function _handler_read_holding_registers *****************
 15123 ;; Defined at:
 15124 ;;		line 98 in file "modbus_imp.c"
 15125 ;; Parameters:    Size  Location     Type
 15126 ;;  address         2    0[BANK0 ] unsigned short 
 15127 ;;  quantity        2    2[BANK0 ] unsigned short 
 15128 ;;  registers_ou    1    4[BANK0 ] PTR unsigned short 
 15129 ;;		 -> handle_read_registers@regs(64), 
 15130 ;;  unit_id         1    5[BANK0 ] unsigned char 
 15131 ;;  arg             2    6[BANK0 ] PTR void 
 15132 ;;		 -> main@registers(45), 
 15133 ;; Auto vars:     Size  Location     Type
 15134 ;;  i               2   12[BANK0 ] int 
 15135 ;;  server_regis    1   11[BANK0 ] PTR unsigned short 
 15136 ;;		 -> registers$server_input_register$serial_number(2), 
 15137 ;; Return value:  Size  Location     Type
 15138 ;;                  1    wreg      enum E10966
 15139 ;; Registers used:
 15140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15141 ;; Tracked objects:
 15142 ;;		On entry : 3F/0
 15143 ;;		On exit  : 3F/0
 15144 ;;		Unchanged: 0/0
 15145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15146 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15149 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15150 ;;Total ram usage:       14 bytes
 15151 ;; Hardware stack levels used: 1
 15152 ;; Hardware stack levels required when called: 5
 15153 ;; This function calls:
 15154 ;;		Nothing
 15155 ;; This function is called by:
 15156 ;;		_main
 15157 ;;		_handle_read_registers
 15158 ;; This function uses a non-reentrant model
 15159 ;;
 15160                           
 15161     09DE                     _handler_read_holding_registers:	
 15162                           ;psect for function _handler_read_holding_registers
 15163                           
 15164                           
 15165                           ;modbus_imp.c: 99:   if (address + quantity > 3)
 15166                           
 15167                           ;incstack = 0
 15168                           ; Regs used in _handler_read_holding_registers: [wreg-fsr1h+status,2+status,0]
 15169     09DE  0822               	movf	handler_read_holding_registers@quantity,w
 15170     09DF  0720               	addwf	handler_read_holding_registers@address,w
 15171     09E0  00A8               	movwf	??_handler_read_holding_registers
 15172     09E1  0823               	movf	handler_read_holding_registers@quantity+1,w
 15173     09E2  3D21               	addwfc	handler_read_holding_registers@address+1,w
 15174     09E3  00A9               	movwf	??_handler_read_holding_registers+1
 15175     09E4  3000               	movlw	0
 15176     09E5  0229               	subwf	??_handler_read_holding_registers+1,w
 15177     09E6  3004               	movlw	4
 15178     09E7  1903               	skipnz
 15179     09E8  0228               	subwf	??_handler_read_holding_registers,w
 15180     09E9  1C03               	skipc
 15181     09EA  29ED               	goto	l7263
 15182                           
 15183                           ;modbus_imp.c: 100:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 15184     09EB  3002               	movlw	2
 15185     09EC  0008               	return
 15186     09ED                     l7263:
 15187                           
 15188                           ;modbus_imp.c: 103:   uint16_t* server_registers = (uint16_t *)(&(((mod_bus_registers*) 
      +                          arg)->server_holding_register));
 15189     09ED  0826               	movf	handler_read_holding_registers@arg,w
 15190     09EE  3E29               	addlw	41
 15191     09EF  00A8               	movwf	??_handler_read_holding_registers
 15192     09F0  3000               	movlw	0
 15193     09F1  3D27               	addwfc	handler_read_holding_registers@arg+1,w
 15194     09F2  00A9               	movwf	??_handler_read_holding_registers+1
 15195     09F3  0828               	movf	??_handler_read_holding_registers,w
 15196     09F4  00AB               	movwf	handler_read_holding_registers@server_registers
 15197                           
 15198                           ;modbus_imp.c: 104:   for (int i = 0; i < quantity; i++)
 15199     09F5  01AC               	clrf	handler_read_holding_registers@i
 15200     09F6  01AD               	clrf	handler_read_holding_registers@i+1
 15201     09F7                     l7271:
 15202     09F7  0823               	movf	handler_read_holding_registers@quantity+1,w
 15203     09F8  022D               	subwf	handler_read_holding_registers@i+1,w
 15204     09F9  1D03               	skipz
 15205     09FA  29FD               	goto	u4275
 15206     09FB  0822               	movf	handler_read_holding_registers@quantity,w
 15207     09FC  022C               	subwf	handler_read_holding_registers@i,w
 15208     09FD                     u4275:
 15209     09FD  1803               	btfsc	3,0
 15210     09FE  2A20               	goto	l7273
 15211                           
 15212                           ;modbus_imp.c: 105:     registers_out[i] = server_registers[address + i];
 15213     09FF  0820               	movf	handler_read_holding_registers@address,w
 15214     0A00  00A8               	movwf	??_handler_read_holding_registers
 15215     0A01  3001               	movlw	1
 15216     0A02                     u4255:
 15217     0A02  35A8               	lslf	??_handler_read_holding_registers,f
 15218     0A03  0B89               	decfsz	9,f
 15219     0A04  2A02               	goto	u4255
 15220     0A05  352C               	lslf	handler_read_holding_registers@i,w
 15221     0A06  072B               	addwf	handler_read_holding_registers@server_registers,w
 15222     0A07  00A9               	movwf	??_handler_read_holding_registers+1
 15223     0A08  0829               	movf	??_handler_read_holding_registers+1,w
 15224     0A09  0728               	addwf	??_handler_read_holding_registers,w
 15225     0A0A  0086               	movwf	6
 15226     0A0B  3002               	movlw	2	; select bank4/5
 15227     0A0C  0087               	movwf	7
 15228     0A0D  082C               	movf	handler_read_holding_registers@i,w
 15229     0A0E  00AA               	movwf	??_handler_read_holding_registers+2
 15230     0A0F  3001               	movlw	1
 15231     0A10                     u4265:
 15232     0A10  35AA               	lslf	??_handler_read_holding_registers+2,f
 15233     0A11  0B89               	decfsz	9,f
 15234     0A12  2A10               	goto	u4265
 15235     0A13  0824               	movf	handler_read_holding_registers@registers_out,w
 15236     0A14  072A               	addwf	??_handler_read_holding_registers+2,w
 15237     0A15  0084               	movwf	4
 15238     0A16  0185               	clrf	5
 15239     0A17  3F40               	moviw [0]fsr1
 15240     0A18  3F80               	movwi [0]fsr0
 15241     0A19  3F41               	moviw [1]fsr1
 15242     0A1A  3F81               	movwi [1]fsr0
 15243     0A1B  3001               	movlw	1
 15244     0A1C  07AC               	addwf	handler_read_holding_registers@i,f
 15245     0A1D  3000               	movlw	0
 15246     0A1E  3DAD               	addwfc	handler_read_holding_registers@i+1,f
 15247     0A1F  29F7               	goto	l7271
 15248     0A20                     l7273:
 15249                           
 15250                           ;modbus_imp.c: 107:   return NMBS_ERROR_NONE;
 15251     0A20  3000               	movlw	0
 15252     0A21  0008               	return
 15253     0A22                     __end_of_handler_read_holding_registers:
 15254                           
 15255                           	psect	text44
 15256     099A                     __ptext44:	
 15257 ;; *************** function _handler_read_input_registers *****************
 15258 ;; Defined at:
 15259 ;;		line 86 in file "modbus_imp.c"
 15260 ;; Parameters:    Size  Location     Type
 15261 ;;  address         2    0[BANK0 ] unsigned short 
 15262 ;;  quantity        2    2[BANK0 ] unsigned short 
 15263 ;;  registers_ou    1    4[BANK0 ] PTR unsigned short 
 15264 ;;		 -> handle_read_registers@regs(64), 
 15265 ;;  unit_id         1    5[BANK0 ] unsigned char 
 15266 ;;  arg             2    6[BANK0 ] PTR void 
 15267 ;;		 -> main@registers(45), 
 15268 ;; Auto vars:     Size  Location     Type
 15269 ;;  i               2   12[BANK0 ] int 
 15270 ;;  server_regis    1   11[BANK0 ] PTR unsigned short 
 15271 ;;		 -> registers$server_input_register$sensor_type(2), 
 15272 ;; Return value:  Size  Location     Type
 15273 ;;                  1    wreg      enum E10966
 15274 ;; Registers used:
 15275 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15276 ;; Tracked objects:
 15277 ;;		On entry : 3F/0
 15278 ;;		On exit  : 3F/0
 15279 ;;		Unchanged: 0/0
 15280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15281 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15282 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15283 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15285 ;;Total ram usage:       14 bytes
 15286 ;; Hardware stack levels used: 1
 15287 ;; Hardware stack levels required when called: 5
 15288 ;; This function calls:
 15289 ;;		Nothing
 15290 ;; This function is called by:
 15291 ;;		_main
 15292 ;;		_handle_read_registers
 15293 ;; This function uses a non-reentrant model
 15294 ;;
 15295                           
 15296     099A                     _handler_read_input_registers:	
 15297                           ;psect for function _handler_read_input_registers
 15298                           
 15299                           
 15300                           ;modbus_imp.c: 87:   if (address + quantity > 18)
 15301                           
 15302                           ;incstack = 0
 15303                           ; Regs used in _handler_read_input_registers: [wreg-fsr1h+status,2+status,0]
 15304     099A  0822               	movf	handler_read_input_registers@quantity,w
 15305     099B  0720               	addwf	handler_read_input_registers@address,w
 15306     099C  00A8               	movwf	??_handler_read_input_registers
 15307     099D  0823               	movf	handler_read_input_registers@quantity+1,w
 15308     099E  3D21               	addwfc	handler_read_input_registers@address+1,w
 15309     099F  00A9               	movwf	??_handler_read_input_registers+1
 15310     09A0  3000               	movlw	0
 15311     09A1  0229               	subwf	??_handler_read_input_registers+1,w
 15312     09A2  3013               	movlw	19
 15313     09A3  1903               	skipnz
 15314     09A4  0228               	subwf	??_handler_read_input_registers,w
 15315     09A5  1C03               	skipc
 15316     09A6  29A9               	goto	l7243
 15317                           
 15318                           ;modbus_imp.c: 88:     return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 15319     09A7  3002               	movlw	2
 15320     09A8  0008               	return
 15321     09A9                     l7243:
 15322                           
 15323                           ;modbus_imp.c: 91:   uint16_t* server_registers = (uint16_t *)(&(((mod_bus_registers*) a
      +                          rg)->server_input_register));
 15324     09A9  0826               	movf	handler_read_input_registers@arg,w
 15325     09AA  3E01               	addlw	1
 15326     09AB  00A8               	movwf	??_handler_read_input_registers
 15327     09AC  3000               	movlw	0
 15328     09AD  3D27               	addwfc	handler_read_input_registers@arg+1,w
 15329     09AE  00A9               	movwf	??_handler_read_input_registers+1
 15330     09AF  0828               	movf	??_handler_read_input_registers,w
 15331     09B0  00AB               	movwf	handler_read_input_registers@server_registers
 15332                           
 15333                           ;modbus_imp.c: 92:   for (int i = 0; i < quantity; i++)
 15334     09B1  01AC               	clrf	handler_read_input_registers@i
 15335     09B2  01AD               	clrf	handler_read_input_registers@i+1
 15336     09B3                     l7251:
 15337     09B3  0823               	movf	handler_read_input_registers@quantity+1,w
 15338     09B4  022D               	subwf	handler_read_input_registers@i+1,w
 15339     09B5  1D03               	skipz
 15340     09B6  29B9               	goto	u4235
 15341     09B7  0822               	movf	handler_read_input_registers@quantity,w
 15342     09B8  022C               	subwf	handler_read_input_registers@i,w
 15343     09B9                     u4235:
 15344     09B9  1803               	btfsc	3,0
 15345     09BA  29DC               	goto	l7253
 15346                           
 15347                           ;modbus_imp.c: 93:     registers_out[i] = server_registers[address + i];
 15348     09BB  0820               	movf	handler_read_input_registers@address,w
 15349     09BC  00A8               	movwf	??_handler_read_input_registers
 15350     09BD  3001               	movlw	1
 15351     09BE                     u4215:
 15352     09BE  35A8               	lslf	??_handler_read_input_registers,f
 15353     09BF  0B89               	decfsz	9,f
 15354     09C0  29BE               	goto	u4215
 15355     09C1  352C               	lslf	handler_read_input_registers@i,w
 15356     09C2  072B               	addwf	handler_read_input_registers@server_registers,w
 15357     09C3  00A9               	movwf	??_handler_read_input_registers+1
 15358     09C4  0829               	movf	??_handler_read_input_registers+1,w
 15359     09C5  0728               	addwf	??_handler_read_input_registers,w
 15360     09C6  0086               	movwf	6
 15361     09C7  3002               	movlw	2	; select bank4/5
 15362     09C8  0087               	movwf	7
 15363     09C9  082C               	movf	handler_read_input_registers@i,w
 15364     09CA  00AA               	movwf	??_handler_read_input_registers+2
 15365     09CB  3001               	movlw	1
 15366     09CC                     u4225:
 15367     09CC  35AA               	lslf	??_handler_read_input_registers+2,f
 15368     09CD  0B89               	decfsz	9,f
 15369     09CE  29CC               	goto	u4225
 15370     09CF  0824               	movf	handler_read_input_registers@registers_out,w
 15371     09D0  072A               	addwf	??_handler_read_input_registers+2,w
 15372     09D1  0084               	movwf	4
 15373     09D2  0185               	clrf	5
 15374     09D3  3F40               	moviw [0]fsr1
 15375     09D4  3F80               	movwi [0]fsr0
 15376     09D5  3F41               	moviw [1]fsr1
 15377     09D6  3F81               	movwi [1]fsr0
 15378     09D7  3001               	movlw	1
 15379     09D8  07AC               	addwf	handler_read_input_registers@i,f
 15380     09D9  3000               	movlw	0
 15381     09DA  3DAD               	addwfc	handler_read_input_registers@i+1,f
 15382     09DB  29B3               	goto	l7251
 15383     09DC                     l7253:
 15384                           
 15385                           ;modbus_imp.c: 95:   return NMBS_ERROR_NONE;
 15386     09DC  3000               	movlw	0
 15387     09DD  0008               	return
 15388     09DE                     __end_of_handler_read_input_registers:
 15389                           
 15390                           	psect	text45
 15391     1792                     __ptext45:	
 15392 ;; *************** function _nmbs_server_create *****************
 15393 ;; Defined at:
 15394 ;;		line 1360 in file "nanomodbus.c"
 15395 ;; Parameters:    Size  Location     Type
 15396 ;;  nmbs            2   14[BANK0 ] PTR struct nmbs_t
 15397 ;;		 -> main@nmbs(76), 
 15398 ;;  address_rtu     1   16[BANK0 ] unsigned char 
 15399 ;;  platform_con    2   17[BANK0 ] PTR const struct nmbs_pl
 15400 ;;		 -> main@platform_conf(7), 
 15401 ;;  callbacks       2   19[BANK0 ] PTR const struct nmbs_ca
 15402 ;;		 -> main@callbacks(9), 
 15403 ;; Auto vars:     Size  Location     Type
 15404 ;;  ret             1   22[BANK0 ] enum E10857
 15405 ;; Return value:  Size  Location     Type
 15406 ;;                  1    wreg      enum E10966
 15407 ;; Registers used:
 15408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15409 ;; Tracked objects:
 15410 ;;		On entry : 3F/0
 15411 ;;		On exit  : 3F/0
 15412 ;;		Unchanged: 0/0
 15413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15414 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15417 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15418 ;;Total ram usage:        9 bytes
 15419 ;; Hardware stack levels used: 1
 15420 ;; Hardware stack levels required when called: 7
 15421 ;; This function calls:
 15422 ;;		_nmbs_create
 15423 ;; This function is called by:
 15424 ;;		_main
 15425 ;; This function uses a non-reentrant model
 15426 ;;
 15427                           
 15428     1792                     _nmbs_server_create:	
 15429                           ;psect for function _nmbs_server_create
 15430                           
 15431                           
 15432                           ;nanomodbus.c: 1360: nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, co
      +                          nst nmbs_platform_conf* platform_conf,;nanomodbus.c: 1361:                              
      +                           const nmbs_callbacks* callbacks) {;nanomodbus.c: 1362:     if (platform_conf->transport
      +                           == NMBS_TRANSPORT_RTU && address_rtu == 0)
 15433                           
 15434                           ;incstack = 0
 15435                           ; Regs used in _nmbs_server_create: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15436     1792  0831               	movf	nmbs_server_create@platform_conf,w
 15437     1793  0086               	movwf	6
 15438     1794  0832               	movf	nmbs_server_create@platform_conf+1,w
 15439     1795  0087               	movwf	7
 15440     1796  0301               	decf	1,w
 15441     1797  1D03               	btfss	3,2
 15442     1798  2F9E               	goto	l8057
 15443     1799  0830               	movf	nmbs_server_create@address_rtu,w
 15444     179A  1D03               	btfss	3,2
 15445     179B  2F9E               	goto	l8057
 15446                           
 15447                           ;nanomodbus.c: 1363:         return NMBS_ERROR_INVALID_ARGUMENT;
 15448     179C  30FF               	movlw	255
 15449     179D  0008               	return
 15450     179E                     l8057:
 15451                           
 15452                           ;nanomodbus.c: 1365:     nmbs_error ret = nmbs_create(nmbs, platform_conf);
 15453     179E  082F               	movf	nmbs_server_create@nmbs+1,w
 15454     179F  00A9               	movwf	nmbs_create@nmbs+1
 15455     17A0  082E               	movf	nmbs_server_create@nmbs,w
 15456     17A1  00A8               	movwf	nmbs_create@nmbs
 15457     17A2  0832               	movf	nmbs_server_create@platform_conf+1,w
 15458     17A3  00AB               	movwf	nmbs_create@platform_conf+1
 15459     17A4  0831               	movf	nmbs_server_create@platform_conf,w
 15460     17A5  00AA               	movwf	nmbs_create@platform_conf
 15461     17A6  318B  2389  3197   	fcall	_nmbs_create
 15462     17A9  00B6               	movwf	nmbs_server_create@ret
 15463                           
 15464                           ;nanomodbus.c: 1366:     if (ret != NMBS_ERROR_NONE)
 15465     17AA  0836               	movf	nmbs_server_create@ret,w
 15466     17AB  1903               	btfsc	3,2
 15467     17AC  2FAF               	goto	l8065
 15468                           
 15469                           ;nanomodbus.c: 1367:         return ret;
 15470     17AD  0836               	movf	nmbs_server_create@ret,w
 15471     17AE  0008               	return
 15472     17AF                     l8065:
 15473                           
 15474                           ;nanomodbus.c: 1369:     nmbs->address_rtu = address_rtu;
 15475     17AF  082E               	movf	nmbs_server_create@nmbs,w
 15476     17B0  3E48               	addlw	72
 15477     17B1  0086               	movwf	6
 15478     17B2  3000               	movlw	0
 15479     17B3  3D2F               	addwfc	nmbs_server_create@nmbs+1,w
 15480     17B4  0087               	movwf	7
 15481     17B5  0830               	movf	nmbs_server_create@address_rtu,w
 15482     17B6  0081               	movwf	1
 15483                           
 15484                           ;nanomodbus.c: 1370:     nmbs->callbacks = *callbacks;
 15485     17B7  0833               	movf	nmbs_server_create@callbacks,w
 15486     17B8  0086               	movwf	6
 15487     17B9  0834               	movf	nmbs_server_create@callbacks+1,w
 15488     17BA  0087               	movwf	7
 15489     17BB  082E               	movf	nmbs_server_create@nmbs,w
 15490     17BC  3E38               	addlw	56
 15491     17BD  0084               	movwf	4
 15492     17BE  3000               	movlw	0
 15493     17BF  3D2F               	addwfc	nmbs_server_create@nmbs+1,w
 15494     17C0  0085               	movwf	5
 15495     17C1  3009               	movlw	9
 15496     17C2  00B5               	movwf	??_nmbs_server_create
 15497     17C3                     u5050:
 15498     17C3  0016               	moviw fsr1++
 15499     17C4  001A               	movwi fsr0++
 15500     17C5  0BB5               	decfsz	??_nmbs_server_create,f
 15501     17C6  2FC3               	goto	u5050
 15502                           
 15503                           ;nanomodbus.c: 1372:     return NMBS_ERROR_NONE;
 15504     17C7  3000               	movlw	0
 15505     17C8  0008               	return
 15506     17C9                     __end_of_nmbs_server_create:
 15507                           
 15508                           	psect	text46
 15509     0B89                     __ptext46:	
 15510 ;; *************** function _nmbs_create *****************
 15511 ;; Defined at:
 15512 ;;		line 110 in file "nanomodbus.c"
 15513 ;; Parameters:    Size  Location     Type
 15514 ;;  nmbs            2    8[BANK0 ] PTR struct nmbs_t
 15515 ;;		 -> main@nmbs(76), 
 15516 ;;  platform_con    2   10[BANK0 ] PTR const struct nmbs_pl
 15517 ;;		 -> main@platform_conf(7), 
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;		None
 15520 ;; Return value:  Size  Location     Type
 15521 ;;                  1    wreg      enum E10857
 15522 ;; Registers used:
 15523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15524 ;; Tracked objects:
 15525 ;;		On entry : 3F/0
 15526 ;;		On exit  : 3F/0
 15527 ;;		Unchanged: 0/0
 15528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15529 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15531 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15532 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15533 ;;Total ram usage:        6 bytes
 15534 ;; Hardware stack levels used: 1
 15535 ;; Hardware stack levels required when called: 6
 15536 ;; This function calls:
 15537 ;;		_m_memset
 15538 ;; This function is called by:
 15539 ;;		_nmbs_server_create
 15540 ;; This function uses a non-reentrant model
 15541 ;;
 15542                           
 15543     0B89                     _nmbs_create:	
 15544                           ;psect for function _nmbs_create
 15545                           
 15546                           
 15547                           ;nanomodbus.c: 111:     if (!nmbs)
 15548                           
 15549                           ;incstack = 0
 15550                           ; Regs used in _nmbs_create: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15551     0B89  0828               	movf	nmbs_create@nmbs,w
 15552     0B8A  0429               	iorwf	nmbs_create@nmbs+1,w
 15553     0B8B  1903               	btfsc	3,2
 15554     0B8C  2B9F               	goto	l7935
 15555     0B8D  2BA1               	goto	l7939
 15556     0B8E                     l7949:
 15557     0B8E  082A               	movf	nmbs_create@platform_conf,w
 15558     0B8F  0086               	movwf	6
 15559     0B90  082B               	movf	nmbs_create@platform_conf+1,w
 15560     0B91  0087               	movwf	7
 15561     0B92  3002               	movlw	2
 15562     0B93  0601               	xorwf	1,w
 15563     0B94  1D03               	btfss	3,2
 15564     0B95  2B9F               	goto	l7935
 15565     0B96                     l7955:
 15566                           
 15567                           ;nanomodbus.c: 125:     if (!platform_conf->read || !platform_conf->write)
 15568     0B96  082A               	movf	nmbs_create@platform_conf,w
 15569     0B97  0086               	movwf	6
 15570     0B98  082B               	movf	nmbs_create@platform_conf+1,w
 15571     0B99  0087               	movwf	7
 15572     0B9A  3141               	addfsr 1,1
 15573     0B9B  0016               	moviw fsr1++
 15574     0B9C  0401               	iorwf	1,w
 15575     0B9D  1D03               	btfss	3,2
 15576     0B9E  2BBB               	goto	l7957
 15577     0B9F                     l7935:
 15578                           
 15579                           ;nanomodbus.c: 112:         return NMBS_ERROR_INVALID_ARGUMENT;
 15580     0B9F  30FF               	movlw	255
 15581     0BA0  0008               	return
 15582     0BA1                     l7939:
 15583                           
 15584                           ;nanomodbus.c: 114:     m_memset(nmbs, 0, sizeof(nmbs_t));
 15585     0BA1  0829               	movf	nmbs_create@nmbs+1,w
 15586     0BA2  00A1               	movwf	m_memset@s+1
 15587     0BA3  0828               	movf	nmbs_create@nmbs,w
 15588     0BA4  00A0               	movwf	m_memset@s
 15589     0BA5  3000               	movlw	0
 15590     0BA6  00A2               	movwf	m_memset@c
 15591     0BA7  00A3               	movwf	m_memset@c+1
 15592     0BA8  304C               	movlw	76
 15593     0BA9  00A4               	movwf	m_memset@len
 15594     0BAA  3000               	movlw	0
 15595     0BAB  00A5               	movwf	m_memset@len+1
 15596     0BAC  3193  23A4  318B   	fcall	_m_memset
 15597                           
 15598                           ;nanomodbus.c: 119:     if (!platform_conf)
 15599     0BAF  082A               	movf	nmbs_create@platform_conf,w
 15600     0BB0  042B               	iorwf	nmbs_create@platform_conf+1,w
 15601     0BB1  1903               	btfsc	3,2
 15602     0BB2  2B9F               	goto	l7935
 15603                           
 15604                           ;nanomodbus.c: 122:     if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_c
      +                          onf->transport != NMBS_TRANSPORT_TCP)
 15605     0BB3  082A               	movf	nmbs_create@platform_conf,w
 15606     0BB4  0086               	movwf	6
 15607     0BB5  082B               	movf	nmbs_create@platform_conf+1,w
 15608     0BB6  0087               	movwf	7
 15609     0BB7  0301               	decf	1,w
 15610     0BB8  1D03               	btfss	3,2
 15611     0BB9  2B8E               	goto	l7949
 15612     0BBA  2B96               	goto	l7955
 15613     0BBB                     l7957:
 15614     0BBB  082A               	movf	nmbs_create@platform_conf,w
 15615     0BBC  0086               	movwf	6
 15616     0BBD  082B               	movf	nmbs_create@platform_conf+1,w
 15617     0BBE  0087               	movwf	7
 15618     0BBF  3143               	addfsr 1,3
 15619     0BC0  0016               	moviw fsr1++
 15620     0BC1  0401               	iorwf	1,w
 15621     0BC2  1903               	btfsc	3,2
 15622     0BC3  2B9F               	goto	l7935
 15623                           
 15624                           ;nanomodbus.c: 128:     nmbs->platform = *platform_conf;
 15625     0BC4  082A               	movf	nmbs_create@platform_conf,w
 15626     0BC5  0086               	movwf	6
 15627     0BC6  082B               	movf	nmbs_create@platform_conf+1,w
 15628     0BC7  0087               	movwf	7
 15629     0BC8  0828               	movf	nmbs_create@nmbs,w
 15630     0BC9  3E41               	addlw	65
 15631     0BCA  0084               	movwf	4
 15632     0BCB  3000               	movlw	0
 15633     0BCC  3D29               	addwfc	nmbs_create@nmbs+1,w
 15634     0BCD  0085               	movwf	5
 15635     0BCE  3007               	movlw	7
 15636     0BCF  00AC               	movwf	??_nmbs_create
 15637     0BD0                     u4960:
 15638     0BD0  0016               	moviw fsr1++
 15639     0BD1  001A               	movwi fsr0++
 15640     0BD2  0BAC               	decfsz	??_nmbs_create,f
 15641     0BD3  2BD0               	goto	u4960
 15642                           
 15643                           ;nanomodbus.c: 130:     return NMBS_ERROR_NONE;
 15644     0BD4  3000               	movlw	0
 15645     0BD5  0008               	return
 15646     0BD6                     __end_of_nmbs_create:
 15647                           
 15648                           	psect	text47
 15649     042C                     __ptext47:	
 15650 ;; *************** function _is_a_new_value *****************
 15651 ;; Defined at:
 15652 ;;		line 176 in file "main.c"
 15653 ;; Parameters:    Size  Location     Type
 15654 ;;  registers       2    8[BANK0 ] PTR struct .
 15655 ;;		 -> main@registers(45), 
 15656 ;;  actual_regs     2   10[BANK0 ] PTR struct .
 15657 ;;		 -> main@actual_regs(4), 
 15658 ;;  nmbs            2   12[BANK0 ] PTR struct nmbs_t
 15659 ;;		 -> main@nmbs(76), 
 15660 ;; Auto vars:     Size  Location     Type
 15661 ;;		None
 15662 ;; Return value:  Size  Location     Type
 15663 ;;                  1    wreg      void 
 15664 ;; Registers used:
 15665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15666 ;; Tracked objects:
 15667 ;;		On entry : 3F/0
 15668 ;;		On exit  : 3F/0
 15669 ;;		Unchanged: 0/0
 15670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15671 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15673 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15674 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15675 ;;Total ram usage:       10 bytes
 15676 ;; Hardware stack levels used: 1
 15677 ;; Hardware stack levels required when called: 7
 15678 ;; This function calls:
 15679 ;;		_DATAEE_WriteByte
 15680 ;;		_DATAEE_WriteWord
 15681 ;;		_setBaudRateEUSART1
 15682 ;; This function is called by:
 15683 ;;		_main
 15684 ;; This function uses a non-reentrant model
 15685 ;;
 15686                           
 15687     042C                     _is_a_new_value:	
 15688                           ;psect for function _is_a_new_value
 15689                           
 15690                           
 15691                           ;main.c: 176: void is_a_new_value(mod_bus_registers* registers,holding_register* actual_
      +                          regs,nmbs_t* nmbs );main.c: 177: {;main.c: 178:     if(registers->server_holding_registe
      +                          r.addr_slave != actual_regs->addr_slave)
 15692                           
 15693                           ;incstack = 0
 15694                           ; Regs used in _is_a_new_value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15695     042C  082A               	movf	is_a_new_value@actual_regs,w
 15696     042D  0086               	movwf	6
 15697     042E  082B               	movf	is_a_new_value@actual_regs+1,w
 15698     042F  0087               	movwf	7
 15699     0430  3F40               	moviw [0]fsr1
 15700     0431  00AE               	movwf	??_is_a_new_value
 15701     0432  3F41               	moviw [1]fsr1
 15702     0433  00AF               	movwf	??_is_a_new_value+1
 15703     0434  0828               	movf	is_a_new_value@registers,w
 15704     0435  3E29               	addlw	41
 15705     0436  0086               	movwf	6
 15706     0437  3000               	movlw	0
 15707     0438  3D29               	addwfc	is_a_new_value@registers+1,w
 15708     0439  0087               	movwf	7
 15709     043A  3F40               	moviw [0]fsr1
 15710     043B  00B0               	movwf	??_is_a_new_value+2
 15711     043C  3F41               	moviw [1]fsr1
 15712     043D  00B1               	movwf	??_is_a_new_value+3
 15713     043E  082F               	movf	??_is_a_new_value+1,w
 15714     043F  0631               	xorwf	??_is_a_new_value+3,w
 15715     0440  1D03               	skipz
 15716     0441  2C44               	goto	u5155
 15717     0442  082E               	movf	??_is_a_new_value,w
 15718     0443  0630               	xorwf	??_is_a_new_value+2,w
 15719     0444                     u5155:
 15720     0444  1903               	skipnz
 15721     0445  2C97               	goto	l8137
 15722                           
 15723                           ;main.c: 179:     {;main.c: 180:         if(registers->server_holding_register.addr_slav
      +                          e <=255
 15724     0446  0828               	movf	is_a_new_value@registers,w
 15725     0447  3E29               	addlw	41
 15726     0448  0086               	movwf	6
 15727     0449  3000               	movlw	0
 15728     044A  3D29               	addwfc	is_a_new_value@registers+1,w
 15729     044B  0087               	movwf	7
 15730     044C  3F40               	moviw [0]fsr1
 15731     044D  00AE               	movwf	??_is_a_new_value
 15732     044E  3F41               	moviw [1]fsr1
 15733     044F  00AF               	movwf	??_is_a_new_value+1
 15734     0450  3001               	movlw	1
 15735     0451  022F               	subwf	??_is_a_new_value+1,w
 15736     0452  3000               	movlw	0
 15737     0453  1903               	skipnz
 15738     0454  022E               	subwf	??_is_a_new_value,w
 15739     0455  1803               	skipnc
 15740     0456  2C88               	goto	l8135
 15741     0457  0828               	movf	is_a_new_value@registers,w
 15742     0458  3E29               	addlw	41
 15743     0459  0086               	movwf	6
 15744     045A  3000               	movlw	0
 15745     045B  3D29               	addwfc	is_a_new_value@registers+1,w
 15746     045C  0087               	movwf	7
 15747     045D  0016               	moviw fsr1++
 15748     045E  0401               	iorwf	1,w
 15749     045F  1903               	btfsc	3,2
 15750     0460  2C88               	goto	l8135
 15751                           
 15752                           ;main.c: 182:         {;main.c: 183:             nmbs->address_rtu = registers->server_h
      +                          olding_register.addr_slave;
 15753     0461  082C               	movf	is_a_new_value@nmbs,w
 15754     0462  3E48               	addlw	72
 15755     0463  0086               	movwf	6
 15756     0464  3000               	movlw	0
 15757     0465  3D2D               	addwfc	is_a_new_value@nmbs+1,w
 15758     0466  0087               	movwf	7
 15759     0467  0828               	movf	is_a_new_value@registers,w
 15760     0468  3E29               	addlw	41
 15761     0469  0084               	movwf	4
 15762     046A  3000               	movlw	0
 15763     046B  3D29               	addwfc	is_a_new_value@registers+1,w
 15764     046C  0085               	movwf	5
 15765     046D  0800               	movf	0,w
 15766     046E  0081               	movwf	1
 15767                           
 15768                           ;main.c: 184:             DATAEE_WriteWord(0x7002,registers->server_holding_register.add
      +                          r_slave);
 15769     046F  3002               	movlw	2
 15770     0470  00A4               	movwf	DATAEE_WriteWord@bAdd
 15771     0471  3070               	movlw	112
 15772     0472  00A5               	movwf	DATAEE_WriteWord@bAdd+1
 15773     0473  0828               	movf	is_a_new_value@registers,w
 15774     0474  3E29               	addlw	41
 15775     0475  0086               	movwf	6
 15776     0476  3000               	movlw	0
 15777     0477  3D29               	addwfc	is_a_new_value@registers+1,w
 15778     0478  0087               	movwf	7
 15779     0479  3F40               	moviw [0]fsr1
 15780     047A  00A6               	movwf	DATAEE_WriteWord@bData
 15781     047B  3F41               	moviw [1]fsr1
 15782     047C                     L8:
 15783     047C  00A7               	movwf	DATAEE_WriteWord@bData+1
 15784     047D  3193  234C  3184   	fcall	_DATAEE_WriteWord
 15785                           
 15786                           ;main.c: 185:             DATAEE_WriteByte(0x7001, 0x00);
 15787     0480  3001               	movlw	1
 15788     0481  00A0               	movwf	DATAEE_WriteByte@bAdd
 15789     0482  3070               	movlw	112
 15790     0483  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 15791     0484  01A2               	clrf	DATAEE_WriteByte@bData
 15792     0485  3195  2503         	fcall	_DATAEE_WriteByte
 15793                           
 15794                           ;main.c: 186:         }
 15795     0487  0008               	return
 15796     0488                     l8135:
 15797                           
 15798                           ;main.c: 188:         {;main.c: 189:             registers->server_holding_register.addr
      +                          _slave = actual_regs->addr_slave;
 15799     0488  082A               	movf	is_a_new_value@actual_regs,w
 15800     0489  0086               	movwf	6
 15801     048A  082B               	movf	is_a_new_value@actual_regs+1,w
 15802     048B  0087               	movwf	7
 15803     048C  0828               	movf	is_a_new_value@registers,w
 15804     048D  3E29               	addlw	41
 15805     048E  0084               	movwf	4
 15806     048F  3000               	movlw	0
 15807     0490  3D29               	addwfc	is_a_new_value@registers+1,w
 15808     0491  0085               	movwf	5
 15809     0492  3F40               	moviw [0]fsr1
 15810     0493  3F80               	movwi [0]fsr0
 15811     0494  3F41               	moviw [1]fsr1
 15812     0495  3F81               	movwi [1]fsr0
 15813     0496  0008               	return
 15814     0497                     l8137:
 15815     0497  082A               	movf	is_a_new_value@actual_regs,w
 15816     0498  0086               	movwf	6
 15817     0499  082B               	movf	is_a_new_value@actual_regs+1,w
 15818     049A  0087               	movwf	7
 15819     049B  3142               	addfsr 1,2
 15820     049C  3F40               	moviw [0]fsr1
 15821     049D  00AE               	movwf	??_is_a_new_value
 15822     049E  3F41               	moviw [1]fsr1
 15823     049F  00AF               	movwf	??_is_a_new_value+1
 15824     04A0  0828               	movf	is_a_new_value@registers,w
 15825     04A1  3E2B               	addlw	43
 15826     04A2  0086               	movwf	6
 15827     04A3  3000               	movlw	0
 15828     04A4  3D29               	addwfc	is_a_new_value@registers+1,w
 15829     04A5  0087               	movwf	7
 15830     04A6  3F40               	moviw [0]fsr1
 15831     04A7  00B0               	movwf	??_is_a_new_value+2
 15832     04A8  3F41               	moviw [1]fsr1
 15833     04A9  00B1               	movwf	??_is_a_new_value+3
 15834     04AA  082F               	movf	??_is_a_new_value+1,w
 15835     04AB  0631               	xorwf	??_is_a_new_value+3,w
 15836     04AC  1D03               	skipz
 15837     04AD  2CB0               	goto	u5185
 15838     04AE  082E               	movf	??_is_a_new_value,w
 15839     04AF  0630               	xorwf	??_is_a_new_value+2,w
 15840     04B0                     u5185:
 15841     04B0  1903               	skipnz
 15842     04B1  0008               	return
 15843                           
 15844                           ;main.c: 193:     {;main.c: 194:         if(setBaudRateEUSART1(registers->server_holding
      +                          _register.baudrate))
 15845     04B2  0828               	movf	is_a_new_value@registers,w
 15846     04B3  3E2B               	addlw	43
 15847     04B4  0086               	movwf	6
 15848     04B5  3000               	movlw	0
 15849     04B6  3D29               	addwfc	is_a_new_value@registers+1,w
 15850     04B7  0087               	movwf	7
 15851     04B8  3F40               	moviw [0]fsr1
 15852     04B9  00AE               	movwf	??_is_a_new_value
 15853     04BA  3F41               	moviw [1]fsr1
 15854     04BB  00AF               	movwf	??_is_a_new_value+1
 15855     04BC  082E               	movf	??_is_a_new_value,w
 15856     04BD  00A0               	movwf	setBaudRateEUSART1@baudRate
 15857     04BE  082F               	movf	??_is_a_new_value+1,w
 15858     04BF  00A1               	movwf	setBaudRateEUSART1@baudRate+1
 15859     04C0  01A2               	clrf	setBaudRateEUSART1@baudRate+2
 15860     04C1  01A3               	clrf	setBaudRateEUSART1@baudRate+3
 15861     04C2  3187  2754  3184   	fcall	_setBaudRateEUSART1
 15862     04C5  3A00               	xorlw	0
 15863     04C6  1903               	skipnz
 15864     04C7  2CD9               	goto	l8143
 15865                           
 15866                           ;main.c: 195:         {;main.c: 196:             registers->server_holding_register.baud
      +                          rate = actual_regs->baudrate;
 15867     04C8  0140               	movlb	0	; select bank0
 15868     04C9  082A               	movf	is_a_new_value@actual_regs,w
 15869     04CA  0086               	movwf	6
 15870     04CB  082B               	movf	is_a_new_value@actual_regs+1,w
 15871     04CC  0087               	movwf	7
 15872     04CD  3142               	addfsr 1,2
 15873     04CE  0828               	movf	is_a_new_value@registers,w
 15874     04CF  3E2B               	addlw	43
 15875     04D0  0084               	movwf	4
 15876     04D1  3000               	movlw	0
 15877     04D2  3D29               	addwfc	is_a_new_value@registers+1,w
 15878     04D3  0085               	movwf	5
 15879     04D4  3F40               	moviw [0]fsr1
 15880     04D5  3F80               	movwi [0]fsr0
 15881     04D6  3F41               	moviw [1]fsr1
 15882     04D7  3F81               	movwi [1]fsr0
 15883                           
 15884                           ;main.c: 197:         }
 15885     04D8  0008               	return
 15886     04D9                     l8143:
 15887                           
 15888                           ;main.c: 199:         {;main.c: 200:             DATAEE_WriteWord(0x7004,registers->serv
      +                          er_holding_register.baudrate);
 15889     04D9  3004               	movlw	4
 15890     04DA  0140               	movlb	0	; select bank0
 15891     04DB  00A4               	movwf	DATAEE_WriteWord@bAdd
 15892     04DC  3070               	movlw	112
 15893     04DD  00A5               	movwf	DATAEE_WriteWord@bAdd+1
 15894     04DE  0828               	movf	is_a_new_value@registers,w
 15895     04DF  3E2B               	addlw	43
 15896     04E0  0086               	movwf	6
 15897     04E1  3000               	movlw	0
 15898     04E2  3D29               	addwfc	is_a_new_value@registers+1,w
 15899     04E3  0087               	movwf	7
 15900     04E4  3F40               	moviw [0]fsr1
 15901     04E5  00A6               	movwf	DATAEE_WriteWord@bData
 15902     04E6  3F41               	moviw [1]fsr1
 15903     04E7  2C7C               	goto	L8
 15904     04E8                     __end_of_is_a_new_value:
 15905                           
 15906                           	psect	text48
 15907     0754                     __ptext48:	
 15908 ;; *************** function _setBaudRateEUSART1 *****************
 15909 ;; Defined at:
 15910 ;;		line 84 in file "mcc_generated_files/eusart1.c"
 15911 ;; Parameters:    Size  Location     Type
 15912 ;;  baudRate        4    0[BANK0 ] unsigned long 
 15913 ;; Auto vars:     Size  Location     Type
 15914 ;;		None
 15915 ;; Return value:  Size  Location     Type
 15916 ;;                  1    wreg      unsigned char 
 15917 ;; Registers used:
 15918 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15919 ;; Tracked objects:
 15920 ;;		On entry : 3F/0
 15921 ;;		On exit  : 3F/2
 15922 ;;		Unchanged: 0/0
 15923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15924 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15928 ;;Total ram usage:        4 bytes
 15929 ;; Hardware stack levels used: 1
 15930 ;; Hardware stack levels required when called: 5
 15931 ;; This function calls:
 15932 ;;		Nothing
 15933 ;; This function is called by:
 15934 ;;		_main
 15935 ;;		_is_a_new_value
 15936 ;; This function uses a non-reentrant model
 15937 ;;
 15938                           
 15939     0754                     _setBaudRateEUSART1:	
 15940                           ;psect for function _setBaudRateEUSART1
 15941                           
 15942                           
 15943                           ;mcc_generated_files/eusart1.c: 84: uint8_t setBaudRateEUSART1(uint32_t baudRate);mcc_ge
      +                          nerated_files/eusart1.c: 85: {;mcc_generated_files/eusart1.c: 86:     TX1STAbits.TXEN = 
      +                          0;
 15944                           
 15945                           ;incstack = 0
 15946                           ; Regs used in _setBaudRateEUSART1: [wreg-fsr0h+status,2+status,0]
 15947     0754  0142               	movlb	2	; select bank2
 15948     0755  129E               	bcf	30,5	;volatile
 15949                           
 15950                           ;mcc_generated_files/eusart1.c: 87:     RC1STAbits.CREN = 0;
 15951     0756  121D               	bcf	29,4	;volatile
 15952                           
 15953                           ;mcc_generated_files/eusart1.c: 90:     switch(baudRate)
 15954     0757  2F96               	goto	l7773
 15955     0758                     l348:	
 15956                           ;mcc_generated_files/eusart1.c: 91:     {;mcc_generated_files/eusart1.c: 92:         cas
      +                          e 300:
 15957                           
 15958                           
 15959                           ;mcc_generated_files/eusart1.c: 94:              SP1BRGL = 0x40;
 15960     0758  3040               	movlw	64
 15961     0759  0142               	movlb	2	; select bank2
 15962     075A  009B               	movwf	27	;volatile
 15963                           
 15964                           ;mcc_generated_files/eusart1.c: 97:             SP1BRGH = 0x03;
 15965     075B  3003               	movlw	3
 15966     075C  009C               	movwf	28	;volatile
 15967                           
 15968                           ;mcc_generated_files/eusart1.c: 100:             TMR1H = 0xDE;
 15969     075D  30DE               	movlw	222
 15970     075E  0144               	movlb	4	; select bank4
 15971     075F  008D               	movwf	13	;volatile
 15972                           
 15973                           ;mcc_generated_files/eusart1.c: 103:             TMR1L = 0xCC;
 15974     0760  30CC               	movlw	204
 15975     0761  2F8F               	goto	L13
 15976     0762                     l350:	
 15977                           ;mcc_generated_files/eusart1.c: 105:         case 1200:
 15978                           
 15979                           ;mcc_generated_files/eusart1.c: 104:             break;
 15980                           
 15981                           
 15982                           ;mcc_generated_files/eusart1.c: 107:             SP1BRGL = 0xCF;
 15983     0762  30CF               	movlw	207
 15984     0763  0142               	movlb	2	; select bank2
 15985     0764  009B               	movwf	27	;volatile
 15986                           
 15987                           ;mcc_generated_files/eusart1.c: 110:             SP1BRGH = 0x00;
 15988     0765  019C               	clrf	28	;volatile
 15989                           
 15990                           ;mcc_generated_files/eusart1.c: 113:             TMR1H = 0xF7;
 15991     0766  30F7               	movlw	247
 15992     0767  0144               	movlb	4	; select bank4
 15993     0768  008D               	movwf	13	;volatile
 15994                           
 15995                           ;mcc_generated_files/eusart1.c: 116:             TMR1L = 0xB3;
 15996     0769  30B3               	movlw	179
 15997     076A  2F8F               	goto	L13
 15998     076B                     l351:	
 15999                           ;mcc_generated_files/eusart1.c: 118:         case 2400:
 16000                           
 16001                           ;mcc_generated_files/eusart1.c: 117:             break;
 16002                           
 16003                           
 16004                           ;mcc_generated_files/eusart1.c: 120:             SP1BRGL = 0x67;
 16005     076B  3067               	movlw	103
 16006     076C  0142               	movlb	2	; select bank2
 16007     076D  009B               	movwf	27	;volatile
 16008                           
 16009                           ;mcc_generated_files/eusart1.c: 122:             SP1BRGH = 0x00;
 16010     076E  019C               	clrf	28	;volatile
 16011                           
 16012                           ;mcc_generated_files/eusart1.c: 125:             TMR1H = 0xFB;
 16013     076F  30FB               	movlw	251
 16014     0770  0144               	movlb	4	; select bank4
 16015     0771  008D               	movwf	13	;volatile
 16016                           
 16017                           ;mcc_generated_files/eusart1.c: 128:             TMR1L = 0xE6;
 16018     0772  30E6               	movlw	230
 16019     0773  2F8F               	goto	L13
 16020     0774                     l352:	
 16021                           ;mcc_generated_files/eusart1.c: 130:         case 4800:
 16022                           
 16023                           ;mcc_generated_files/eusart1.c: 129:             break;
 16024                           
 16025                           
 16026                           ;mcc_generated_files/eusart1.c: 132:             SP1BRG = (1000000 / (4 * 4800)) - 1;
 16027     0774  3000               	movlw	0
 16028     0775  0142               	movlb	2	; select bank2
 16029     0776  009C               	movwf	28	;volatile
 16030     0777  3033               	movlw	51
 16031     0778  009B               	movwf	27	;volatile
 16032                           
 16033                           ;mcc_generated_files/eusart1.c: 135:             TMR1H = 0xFD;
 16034     0779  30FD               	movlw	253
 16035     077A  0144               	movlb	4	; select bank4
 16036     077B  008D               	movwf	13	;volatile
 16037                           
 16038                           ;mcc_generated_files/eusart1.c: 138:             TMR1L = 0xF3;
 16039     077C  30F3               	movlw	243
 16040     077D  2F8F               	goto	L13
 16041     077E                     l353:	
 16042                           ;mcc_generated_files/eusart1.c: 140:         case 9600:
 16043                           
 16044                           ;mcc_generated_files/eusart1.c: 139:             break;
 16045                           
 16046                           
 16047                           ;mcc_generated_files/eusart1.c: 142:             SP1BRGL = 0x19;
 16048     077E  3019               	movlw	25
 16049     077F  0142               	movlb	2	; select bank2
 16050     0780  009B               	movwf	27	;volatile
 16051                           
 16052                           ;mcc_generated_files/eusart1.c: 145:             SP1BRGH = 0x00;
 16053     0781  019C               	clrf	28	;volatile
 16054                           
 16055                           ;mcc_generated_files/eusart1.c: 148:             TMR1H = 0xFE;
 16056     0782  30FE               	movlw	254
 16057     0783  0144               	movlb	4	; select bank4
 16058     0784  008D               	movwf	13	;volatile
 16059                           
 16060                           ;mcc_generated_files/eusart1.c: 151:             TMR1L = 0xED;
 16061     0785  30ED               	movlw	237
 16062     0786  2F8F               	goto	L13
 16063     0787                     l354:	
 16064                           ;mcc_generated_files/eusart1.c: 153:         case 19200:
 16065                           
 16066                           ;mcc_generated_files/eusart1.c: 152:             break;
 16067                           
 16068                           
 16069                           ;mcc_generated_files/eusart1.c: 155:             SP1BRGL = 0x0C;
 16070     0787  300C               	movlw	12
 16071     0788  0142               	movlb	2	; select bank2
 16072     0789  009B               	movwf	27	;volatile
 16073                           
 16074                           ;mcc_generated_files/eusart1.c: 158:             SP1BRGH = 0x00;
 16075     078A  019C               	clrf	28	;volatile
 16076                           
 16077                           ;mcc_generated_files/eusart1.c: 161:             TMR1H = 0xFF;
 16078     078B  30FF               	movlw	255
 16079     078C  0144               	movlb	4	; select bank4
 16080     078D  008D               	movwf	13	;volatile
 16081                           
 16082                           ;mcc_generated_files/eusart1.c: 164:             TMR1L = 0x6A;
 16083     078E  306A               	movlw	106
 16084     078F                     L13:
 16085     078F  008C               	movwf	12	;volatile
 16086                           
 16087                           ;mcc_generated_files/eusart1.c: 165:             break;
 16088     0790  2FD3               	goto	l349
 16089     0791                     l355:	
 16090                           ;mcc_generated_files/eusart1.c: 166:         default:
 16091                           
 16092                           
 16093                           ;mcc_generated_files/eusart1.c: 168:             TX1STAbits.TXEN = 1;
 16094     0791  0142               	movlb	2	; select bank2
 16095     0792  169E               	bsf	30,5	;volatile
 16096                           
 16097                           ;mcc_generated_files/eusart1.c: 169:             RC1STAbits.CREN = 1;
 16098     0793  161D               	bsf	29,4	;volatile
 16099                           
 16100                           ;mcc_generated_files/eusart1.c: 170:             return 1;
 16101     0794  3001               	movlw	1
 16102     0795  0008               	return
 16103     0796                     l7773:
 16104                           
 16105                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 16106                           ; Switch size 1, requested type "simple"
 16107                           ; Number of cases is 1, Range of values is 0 to 0
 16108                           ; switch strategies available:
 16109                           ; Name         Instructions Cycles
 16110                           ; simple_byte            4     3 (average)
 16111                           ; direct_byte            8     6 (fixed)
 16112                           ; jumptable            260     6 (fixed)
 16113                           ;	Chosen strategy is simple_byte
 16114     0796  0140               	movlb	0	; select bank0
 16115     0797  0823               	movf	setBaudRateEUSART1@baudRate+3,w
 16116     0798  3A00               	xorlw	0	; case 0
 16117     0799  1903               	skipnz
 16118     079A  2FCE               	goto	l8557
 16119     079B  2F91               	goto	l355
 16120     079C                     l8555:
 16121                           
 16122                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
 16123                           ; Switch size 1, requested type "simple"
 16124                           ; Number of cases is 6, Range of values is 1 to 75
 16125                           ; switch strategies available:
 16126                           ; Name         Instructions Cycles
 16127                           ; simple_byte           19    10 (average)
 16128                           ; direct_byte          159     9 (fixed)
 16129                           ; jumptable            263     9 (fixed)
 16130                           ;	Chosen strategy is simple_byte
 16131     079C  0821               	movf	setBaudRateEUSART1@baudRate+1,w
 16132     079D  3A01               	xorlw	1	; case 1
 16133     079E  1903               	skipnz
 16134     079F  2FB0               	goto	l8559
 16135     07A0  3A05               	xorlw	5	; case 4
 16136     07A1  1903               	skipnz
 16137     07A2  2FB5               	goto	l8561
 16138     07A3  3A0D               	xorlw	13	; case 9
 16139     07A4  1903               	skipnz
 16140     07A5  2FBA               	goto	l8563
 16141     07A6  3A1B               	xorlw	27	; case 18
 16142     07A7  1903               	skipnz
 16143     07A8  2FBF               	goto	l8565
 16144     07A9  3A37               	xorlw	55	; case 37
 16145     07AA  1903               	skipnz
 16146     07AB  2FC4               	goto	l8567
 16147     07AC  3A6E               	xorlw	110	; case 75
 16148     07AD  1903               	skipnz
 16149     07AE  2FC9               	goto	l8569
 16150     07AF  2F91               	goto	l355
 16151     07B0                     l8559:
 16152                           
 16153                           ; Switch size 1, requested type "simple"
 16154                           ; Number of cases is 1, Range of values is 44 to 44
 16155                           ; switch strategies available:
 16156                           ; Name         Instructions Cycles
 16157                           ; simple_byte            4     3 (average)
 16158                           ; direct_byte           11     9 (fixed)
 16159                           ; jumptable            263     9 (fixed)
 16160                           ;	Chosen strategy is simple_byte
 16161     07B0  0820               	movf	setBaudRateEUSART1@baudRate,w
 16162     07B1  3A2C               	xorlw	44	; case 44
 16163     07B2  1903               	skipnz
 16164     07B3  2F58               	goto	l348
 16165     07B4  2F91               	goto	l355
 16166     07B5                     l8561:
 16167                           
 16168                           ; Switch size 1, requested type "simple"
 16169                           ; Number of cases is 1, Range of values is 176 to 176
 16170                           ; switch strategies available:
 16171                           ; Name         Instructions Cycles
 16172                           ; simple_byte            4     3 (average)
 16173                           ; direct_byte           11     9 (fixed)
 16174                           ; jumptable            263     9 (fixed)
 16175                           ;	Chosen strategy is simple_byte
 16176     07B5  0820               	movf	setBaudRateEUSART1@baudRate,w
 16177     07B6  3AB0               	xorlw	176	; case 176
 16178     07B7  1903               	skipnz
 16179     07B8  2F62               	goto	l350
 16180     07B9  2F91               	goto	l355
 16181     07BA                     l8563:
 16182                           
 16183                           ; Switch size 1, requested type "simple"
 16184                           ; Number of cases is 1, Range of values is 96 to 96
 16185                           ; switch strategies available:
 16186                           ; Name         Instructions Cycles
 16187                           ; simple_byte            4     3 (average)
 16188                           ; direct_byte           11     9 (fixed)
 16189                           ; jumptable            263     9 (fixed)
 16190                           ;	Chosen strategy is simple_byte
 16191     07BA  0820               	movf	setBaudRateEUSART1@baudRate,w
 16192     07BB  3A60               	xorlw	96	; case 96
 16193     07BC  1903               	skipnz
 16194     07BD  2F6B               	goto	l351
 16195     07BE  2F91               	goto	l355
 16196     07BF                     l8565:
 16197                           
 16198                           ; Switch size 1, requested type "simple"
 16199                           ; Number of cases is 1, Range of values is 192 to 192
 16200                           ; switch strategies available:
 16201                           ; Name         Instructions Cycles
 16202                           ; simple_byte            4     3 (average)
 16203                           ; direct_byte           11     9 (fixed)
 16204                           ; jumptable            263     9 (fixed)
 16205                           ;	Chosen strategy is simple_byte
 16206     07BF  0820               	movf	setBaudRateEUSART1@baudRate,w
 16207     07C0  3AC0               	xorlw	192	; case 192
 16208     07C1  1903               	skipnz
 16209     07C2  2F74               	goto	l352
 16210     07C3  2F91               	goto	l355
 16211     07C4                     l8567:
 16212                           
 16213                           ; Switch size 1, requested type "simple"
 16214                           ; Number of cases is 1, Range of values is 128 to 128
 16215                           ; switch strategies available:
 16216                           ; Name         Instructions Cycles
 16217                           ; simple_byte            4     3 (average)
 16218                           ; direct_byte           11     9 (fixed)
 16219                           ; jumptable            263     9 (fixed)
 16220                           ;	Chosen strategy is simple_byte
 16221     07C4  0820               	movf	setBaudRateEUSART1@baudRate,w
 16222     07C5  3A80               	xorlw	128	; case 128
 16223     07C6  1903               	skipnz
 16224     07C7  2F7E               	goto	l353
 16225     07C8  2F91               	goto	l355
 16226     07C9                     l8569:
 16227                           
 16228                           ; Switch size 1, requested type "simple"
 16229                           ; Number of cases is 1, Range of values is 0 to 0
 16230                           ; switch strategies available:
 16231                           ; Name         Instructions Cycles
 16232                           ; simple_byte            4     3 (average)
 16233                           ; direct_byte            8     6 (fixed)
 16234                           ; jumptable            260     6 (fixed)
 16235                           ;	Chosen strategy is simple_byte
 16236     07C9  0820               	movf	setBaudRateEUSART1@baudRate,w
 16237     07CA  3A00               	xorlw	0	; case 0
 16238     07CB  1903               	skipnz
 16239     07CC  2F87               	goto	l354
 16240     07CD  2F91               	goto	l355
 16241     07CE                     l8557:
 16242                           
 16243                           ; Switch size 1, requested type "simple"
 16244                           ; Number of cases is 1, Range of values is 0 to 0
 16245                           ; switch strategies available:
 16246                           ; Name         Instructions Cycles
 16247                           ; simple_byte            4     3 (average)
 16248                           ; direct_byte            8     6 (fixed)
 16249                           ; jumptable            260     6 (fixed)
 16250                           ;	Chosen strategy is simple_byte
 16251     07CE  0822               	movf	setBaudRateEUSART1@baudRate+2,w
 16252     07CF  3A00               	xorlw	0	; case 0
 16253     07D0  1903               	skipnz
 16254     07D1  2F9C               	goto	l8555
 16255     07D2  2F91               	goto	l355
 16256     07D3                     l349:
 16257                           
 16258                           ;mcc_generated_files/eusart1.c: 172:      TX1STAbits.TXEN = 1;
 16259     07D3  0142               	movlb	2	; select bank2
 16260     07D4  169E               	bsf	30,5	;volatile
 16261                           
 16262                           ;mcc_generated_files/eusart1.c: 173:      RC1STAbits.CREN = 1;
 16263     07D5  161D               	bsf	29,4	;volatile
 16264                           
 16265                           ;mcc_generated_files/eusart1.c: 174:     return 0;
 16266     07D6  3000               	movlw	0
 16267     07D7  0008               	return
 16268     07D8                     __end_of_setBaudRateEUSART1:
 16269                           
 16270                           	psect	text49
 16271     134C                     __ptext49:	
 16272 ;; *************** function _DATAEE_WriteWord *****************
 16273 ;; Defined at:
 16274 ;;		line 80 in file "mcc_generated_files/memory.c"
 16275 ;; Parameters:    Size  Location     Type
 16276 ;;  bAdd            2    4[BANK0 ] unsigned short 
 16277 ;;  bData           2    6[BANK0 ] unsigned short 
 16278 ;; Auto vars:     Size  Location     Type
 16279 ;;		None
 16280 ;; Return value:  Size  Location     Type
 16281 ;;                  1    wreg      void 
 16282 ;; Registers used:
 16283 ;;		wreg, status,2, status,0, pclath, cstack
 16284 ;; Tracked objects:
 16285 ;;		On entry : 3F/0
 16286 ;;		On exit  : 3F/0
 16287 ;;		Unchanged: 0/0
 16288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16289 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16292 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;Total ram usage:        4 bytes
 16294 ;; Hardware stack levels used: 1
 16295 ;; Hardware stack levels required when called: 6
 16296 ;; This function calls:
 16297 ;;		_DATAEE_WriteByte
 16298 ;; This function is called by:
 16299 ;;		_main
 16300 ;;		_is_a_new_value
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304     134C                     _DATAEE_WriteWord:	
 16305                           ;psect for function _DATAEE_WriteWord
 16306                           
 16307                           
 16308                           ;mcc_generated_files/memory.c: 80: void DATAEE_WriteWord(uint16_t bAdd, uint16_t bData);
      +                          mcc_generated_files/memory.c: 81: {;mcc_generated_files/memory.c: 82:     DATAEE_WriteBy
      +                          te(bAdd, bData & 0xFF);
 16309                           
 16310                           ;incstack = 0
 16311                           ; Regs used in _DATAEE_WriteWord: [wreg+status,2+status,0+pclath+cstack]
 16312     134C  0825               	movf	DATAEE_WriteWord@bAdd+1,w
 16313     134D  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 16314     134E  0824               	movf	DATAEE_WriteWord@bAdd,w
 16315     134F  00A0               	movwf	DATAEE_WriteByte@bAdd
 16316     1350  0826               	movf	DATAEE_WriteWord@bData,w
 16317     1351  00A2               	movwf	DATAEE_WriteByte@bData
 16318     1352  3195  2503  3193   	fcall	_DATAEE_WriteByte
 16319                           
 16320                           ;mcc_generated_files/memory.c: 83:     DATAEE_WriteByte(bAdd + 0x0001, (bData>>8) & 0xFF
      +                          );
 16321     1355  0824               	movf	DATAEE_WriteWord@bAdd,w
 16322     1356  3E01               	addlw	1
 16323     1357  00A0               	movwf	DATAEE_WriteByte@bAdd
 16324     1358  3000               	movlw	0
 16325     1359  3D25               	addwfc	DATAEE_WriteWord@bAdd+1,w
 16326     135A  00A1               	movwf	DATAEE_WriteByte@bAdd+1
 16327     135B  0827               	movf	DATAEE_WriteWord@bData+1,w
 16328     135C  00A2               	movwf	DATAEE_WriteByte@bData
 16329     135D  3195  2503         	fcall	_DATAEE_WriteByte
 16330     135F  0008               	return
 16331     1360                     __end_of_DATAEE_WriteWord:
 16332                           
 16333                           	psect	text50
 16334     1503                     __ptext50:	
 16335 ;; *************** function _DATAEE_WriteByte *****************
 16336 ;; Defined at:
 16337 ;;		line 58 in file "mcc_generated_files/memory.c"
 16338 ;; Parameters:    Size  Location     Type
 16339 ;;  bAdd            2    0[BANK0 ] unsigned short 
 16340 ;;  bData           1    2[BANK0 ] unsigned char 
 16341 ;; Auto vars:     Size  Location     Type
 16342 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
 16343 ;; Return value:  Size  Location     Type
 16344 ;;                  1    wreg      void 
 16345 ;; Registers used:
 16346 ;;		wreg, status,2, status,0
 16347 ;; Tracked objects:
 16348 ;;		On entry : 3F/0
 16349 ;;		On exit  : 3F/0
 16350 ;;		Unchanged: 0/0
 16351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16352 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;Total ram usage:        4 bytes
 16357 ;; Hardware stack levels used: 1
 16358 ;; Hardware stack levels required when called: 5
 16359 ;; This function calls:
 16360 ;;		Nothing
 16361 ;; This function is called by:
 16362 ;;		_DATAEE_WriteWord
 16363 ;;		_is_a_new_value
 16364 ;; This function uses a non-reentrant model
 16365 ;;
 16366                           
 16367     1503                     _DATAEE_WriteByte:	
 16368                           ;psect for function _DATAEE_WriteByte
 16369                           
 16370                           
 16371                           ;mcc_generated_files/memory.c: 58: void DATAEE_WriteByte(uint16_t bAdd, uint8_t bData);m
      +                          cc_generated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitV
      +                          alue = INTCONbits.GIE;
 16372                           
 16373                           ;incstack = 0
 16374                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 16375     1503  0D0B               	rlf	11,w	;volatile
 16376     1504  0D0B               	rlf	11,w	;volatile
 16377     1505  3901               	andlw	1
 16378     1506  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
 16379                           
 16380                           ;mcc_generated_files/memory.c: 62:     NVMADRH = ((bAdd >> 8) & 0xFF);
 16381     1507  0821               	movf	DATAEE_WriteByte@bAdd+1,w
 16382     1508  0150               	movlb	16	; select bank16
 16383     1509  009B               	movwf	27	;volatile
 16384                           
 16385                           ;mcc_generated_files/memory.c: 63:     NVMADRL = (bAdd & 0xFF);
 16386     150A  0140               	movlb	0	; select bank0
 16387     150B  0820               	movf	DATAEE_WriteByte@bAdd,w
 16388     150C  0150               	movlb	16	; select bank16
 16389     150D  009A               	movwf	26	;volatile
 16390                           
 16391                           ;mcc_generated_files/memory.c: 64:     NVMDATL = bData;
 16392     150E  0140               	movlb	0	; select bank0
 16393     150F  0822               	movf	DATAEE_WriteByte@bData,w
 16394     1510  0150               	movlb	16	; select bank16
 16395     1511  009C               	movwf	28	;volatile
 16396                           
 16397                           ;mcc_generated_files/memory.c: 65:     NVMCON1bits.NVMREGS = 1;
 16398     1512  171E               	bsf	30,6	;volsfr
 16399                           
 16400                           ;mcc_generated_files/memory.c: 66:     NVMCON1bits.WREN = 1;
 16401     1513  151E               	bsf	30,2	;volsfr
 16402                           
 16403                           ;mcc_generated_files/memory.c: 67:     INTCONbits.GIE = 0;
 16404     1514  138B               	bcf	11,7	;volatile
 16405                           
 16406                           ;mcc_generated_files/memory.c: 68:     NVMCON2 = 0x55;
 16407     1515  3055               	movlw	85
 16408     1516  009F               	movwf	31	;volsfr
 16409                           
 16410                           ;mcc_generated_files/memory.c: 69:     NVMCON2 = 0xAA;
 16411     1517  30AA               	movlw	170
 16412     1518  009F               	movwf	31	;volsfr
 16413                           
 16414                           ;mcc_generated_files/memory.c: 70:     NVMCON1bits.WR = 1;
 16415     1519  149E               	bsf	30,1	;volsfr
 16416     151A                     l910:	
 16417                           ;mcc_generated_files/memory.c: 73:     {;mcc_generated_files/memory.c: 74:     }
 16418                           
 16419                           
 16420                           ;mcc_generated_files/memory.c: 72:     while (NVMCON1bits.WR)
 16421     151A  189E               	btfsc	30,1	;volsfr
 16422     151B  2D1A               	goto	l910
 16423                           
 16424                           ;mcc_generated_files/memory.c: 76:     NVMCON1bits.WREN = 0;
 16425     151C  111E               	bcf	30,2	;volsfr
 16426                           
 16427                           ;mcc_generated_files/memory.c: 77:     INTCONbits.GIE = GIEBitValue;
 16428     151D  0140               	movlb	0	; select bank0
 16429     151E  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
 16430     151F  1C03               	skipc
 16431     1520  138B               	bcf	11,7	;volatile
 16432     1521  1803               	skipnc
 16433     1522  178B               	bsf	11,7	;volatile
 16434     1523  0008               	return
 16435     1524                     __end_of_DATAEE_WriteByte:
 16436                           
 16437                           	psect	text51
 16438     0C75                     __ptext51:	
 16439 ;; *************** function _getSHTC3Data *****************
 16440 ;; Defined at:
 16441 ;;		line 190 in file "sensor.c"
 16442 ;; Parameters:    Size  Location     Type
 16443 ;;		None
 16444 ;; Auto vars:     Size  Location     Type
 16445 ;;  Txbuffer        2   29[BANK0 ] unsigned char [2]
 16446 ;;  Rxbuffer        2   27[BANK0 ] unsigned char [2]
 16447 ;;  result          2   25[BANK0 ] unsigned short 
 16448 ;;  pbuffer         1   31[BANK0 ] PTR unsigned char 
 16449 ;;		 -> getSHTC3Data@Rxbuffer(2), getSHTC3Data@Txbuffer(2), 
 16450 ;; Return value:  Size  Location     Type
 16451 ;;                  2   20[BANK0 ] unsigned short 
 16452 ;; Registers used:
 16453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16454 ;; Tracked objects:
 16455 ;;		On entry : 3F/4
 16456 ;;		On exit  : 3F/0
 16457 ;;		Unchanged: 0/0
 16458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16459 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16460 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16461 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16462 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16463 ;;Total ram usage:       12 bytes
 16464 ;; Hardware stack levels used: 1
 16465 ;; Hardware stack levels required when called: 14
 16466 ;; This function calls:
 16467 ;;		_I2C1_ReadNBytes
 16468 ;;		_I2C1_WriteNBytes
 16469 ;; This function is called by:
 16470 ;;		_main
 16471 ;; This function uses a non-reentrant model
 16472 ;;
 16473                           
 16474     0C75                     _getSHTC3Data:	
 16475                           ;psect for function _getSHTC3Data
 16476                           
 16477                           
 16478                           ;sensor.c: 192:     uint16_t result;;sensor.c: 193:     uint8_t Txbuffer[2];;sensor.c: 1
      +                          94:     uint8_t Rxbuffer[2];;sensor.c: 195:     uint8_t* pbuffer;;sensor.c: 196:     Txb
      +                          uffer[0] = 0x35;
 16479                           
 16480                           ;incstack = 0
 16481                           ; Regs used in _getSHTC3Data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16482     0C75  3035               	movlw	53
 16483     0C76  0140               	movlb	0	; select bank0
 16484     0C77  00BD               	movwf	getSHTC3Data@Txbuffer
 16485                           
 16486                           ;sensor.c: 197:     Txbuffer[1] = 0x17;
 16487     0C78  3017               	movlw	23
 16488     0C79  00BE               	movwf	getSHTC3Data@Txbuffer+1
 16489                           
 16490                           ;sensor.c: 198:     pbuffer = &Txbuffer[0];
 16491     0C7A  303D               	movlw	(low (getSHTC3Data@Txbuffer| 0))& (0+255)
 16492     0C7B  00BF               	movwf	getSHTC3Data@pbuffer
 16493                           
 16494                           ;sensor.c: 199:     I2C1_WriteNBytes(0x70,pbuffer,2);
 16495     0C7C  083F               	movf	getSHTC3Data@pbuffer,w
 16496     0C7D  00B0               	movwf	I2C1_WriteNBytes@data
 16497     0C7E  3002               	movlw	2
 16498     0C7F  00B1               	movwf	I2C1_WriteNBytes@len
 16499     0C80  3000               	movlw	0
 16500     0C81  00B2               	movwf	I2C1_WriteNBytes@len+1
 16501     0C82  3070               	movlw	112
 16502     0C83  3195  258F  318C   	fcall	_I2C1_WriteNBytes
 16503                           
 16504                           ;sensor.c: 201:     Txbuffer[0] = 0x5C;
 16505     0C86  305C               	movlw	92
 16506     0C87  00BD               	movwf	getSHTC3Data@Txbuffer
 16507                           
 16508                           ;sensor.c: 202:     Txbuffer[1] = 0x24;
 16509     0C88  3024               	movlw	36
 16510     0C89  00BE               	movwf	getSHTC3Data@Txbuffer+1
 16511                           
 16512                           ;sensor.c: 203:     pbuffer = &Txbuffer[0];
 16513     0C8A  303D               	movlw	(low (getSHTC3Data@Txbuffer| 0))& (0+255)
 16514     0C8B  00BF               	movwf	getSHTC3Data@pbuffer
 16515                           
 16516                           ;sensor.c: 204:     I2C1_WriteNBytes(0x70,pbuffer,2);
 16517     0C8C  083F               	movf	getSHTC3Data@pbuffer,w
 16518     0C8D  00B0               	movwf	I2C1_WriteNBytes@data
 16519     0C8E  3002               	movlw	2
 16520     0C8F  00B1               	movwf	I2C1_WriteNBytes@len
 16521     0C90  3000               	movlw	0
 16522     0C91  00B2               	movwf	I2C1_WriteNBytes@len+1
 16523     0C92  3070               	movlw	112
 16524     0C93  3195  258F  318C   	fcall	_I2C1_WriteNBytes
 16525                           
 16526                           ;sensor.c: 206:     pbuffer = &Rxbuffer[0];
 16527     0C96  303B               	movlw	(low (getSHTC3Data@Rxbuffer| 0))& (0+255)
 16528     0C97  00BF               	movwf	getSHTC3Data@pbuffer
 16529                           
 16530                           ;sensor.c: 207:     I2C1_ReadNBytes(0x70,pbuffer,2);
 16531     0C98  083F               	movf	getSHTC3Data@pbuffer,w
 16532     0C99  00B0               	movwf	I2C1_ReadNBytes@data
 16533     0C9A  3002               	movlw	2
 16534     0C9B  00B1               	movwf	I2C1_ReadNBytes@len
 16535     0C9C  3000               	movlw	0
 16536     0C9D  00B2               	movwf	I2C1_ReadNBytes@len+1
 16537     0C9E  3070               	movlw	112
 16538     0C9F  3194  24AA  318C   	fcall	_I2C1_ReadNBytes
 16539                           
 16540                           ;sensor.c: 210:     Txbuffer[0] = 0xB0;
 16541     0CA2  30B0               	movlw	176
 16542     0CA3  00BD               	movwf	getSHTC3Data@Txbuffer
 16543                           
 16544                           ;sensor.c: 211:     Txbuffer[1] = 0x98;
 16545     0CA4  3098               	movlw	152
 16546     0CA5  00BE               	movwf	getSHTC3Data@Txbuffer+1
 16547                           
 16548                           ;sensor.c: 212:     pbuffer = &Txbuffer[0];
 16549     0CA6  303D               	movlw	(low (getSHTC3Data@Txbuffer| 0))& (0+255)
 16550     0CA7  00BF               	movwf	getSHTC3Data@pbuffer
 16551                           
 16552                           ;sensor.c: 213:     I2C1_WriteNBytes(0x70,pbuffer,2);
 16553     0CA8  083F               	movf	getSHTC3Data@pbuffer,w
 16554     0CA9  00B0               	movwf	I2C1_WriteNBytes@data
 16555     0CAA  3002               	movlw	2
 16556     0CAB  00B1               	movwf	I2C1_WriteNBytes@len
 16557     0CAC  3000               	movlw	0
 16558     0CAD  00B2               	movwf	I2C1_WriteNBytes@len+1
 16559     0CAE  3070               	movlw	112
 16560     0CAF  3195  258F         	fcall	_I2C1_WriteNBytes
 16561                           
 16562                           ;sensor.c: 223:     result = Rxbuffer[0] << 8;
 16563     0CB1  083B               	movf	getSHTC3Data@Rxbuffer,w
 16564     0CB2  00B6               	movwf	??_getSHTC3Data
 16565     0CB3  01B7               	clrf	??_getSHTC3Data+1
 16566     0CB4  0836               	movf	??_getSHTC3Data,w
 16567     0CB5  00B7               	movwf	??_getSHTC3Data+1
 16568     0CB6  01B6               	clrf	??_getSHTC3Data
 16569     0CB7  0836               	movf	??_getSHTC3Data,w
 16570     0CB8  00B9               	movwf	getSHTC3Data@result
 16571     0CB9  0837               	movf	??_getSHTC3Data+1,w
 16572     0CBA  00BA               	movwf	getSHTC3Data@result+1
 16573                           
 16574                           ;sensor.c: 224:     result += Rxbuffer[1];
 16575     0CBB  083C               	movf	getSHTC3Data@Rxbuffer+1,w
 16576     0CBC  00B6               	movwf	??_getSHTC3Data
 16577     0CBD  01B7               	clrf	??_getSHTC3Data+1
 16578     0CBE  0836               	movf	??_getSHTC3Data,w
 16579     0CBF  07B9               	addwf	getSHTC3Data@result,f
 16580     0CC0  0837               	movf	??_getSHTC3Data+1,w
 16581     0CC1  3DBA               	addwfc	getSHTC3Data@result+1,f
 16582                           
 16583                           ;sensor.c: 225:     return result;
 16584     0CC2  083A               	movf	getSHTC3Data@result+1,w
 16585     0CC3  00B5               	movwf	?_getSHTC3Data+1
 16586     0CC4  0839               	movf	getSHTC3Data@result,w
 16587     0CC5  00B4               	movwf	?_getSHTC3Data
 16588     0CC6  0008               	return
 16589     0CC7                     __end_of_getSHTC3Data:
 16590                           
 16591                           	psect	text52
 16592     0632                     __ptext52:	
 16593 ;; *************** function _getBMP280Data *****************
 16594 ;; Defined at:
 16595 ;;		line 88 in file "sensor.c"
 16596 ;; Parameters:    Size  Location     Type
 16597 ;;  param           1    wreg     enum E10868
 16598 ;; Auto vars:     Size  Location     Type
 16599 ;;  param           1   35[BANK0 ] enum E10868
 16600 ;;  i               1   38[BANK0 ] unsigned char 
 16601 ;;  i               2   36[BANK0 ] unsigned short 
 16602 ;;  ret             3   39[BANK0 ] unsigned um
 16603 ;;  Rxbuffer        3   31[BANK0 ] unsigned char [3]
 16604 ;;  Txbuffer        1   34[BANK0 ] unsigned char 
 16605 ;; Return value:  Size  Location     Type
 16606 ;;                  3   25[BANK0 ] unsigned um
 16607 ;; Registers used:
 16608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16609 ;; Tracked objects:
 16610 ;;		On entry : 3F/4
 16611 ;;		On exit  : 3F/0
 16612 ;;		Unchanged: 0/0
 16613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16614 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16615 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16617 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;Total ram usage:       17 bytes
 16619 ;; Hardware stack levels used: 1
 16620 ;; Hardware stack levels required when called: 15
 16621 ;; This function calls:
 16622 ;;		_readBMP280
 16623 ;;		_writeBMP280
 16624 ;; This function is called by:
 16625 ;;		_main
 16626 ;; This function uses a non-reentrant model
 16627 ;;
 16628                           
 16629     0632                     _getBMP280Data:	
 16630                           ;psect for function _getBMP280Data
 16631                           
 16632                           
 16633                           ;incstack = 0
 16634                           ; Regs used in _getBMP280Data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16635                           ;getBMP280Data@param stored from wreg
 16636     0632  0140               	movlb	0	; select bank0
 16637     0633  00C3               	movwf	getBMP280Data@param
 16638                           
 16639                           ;sensor.c: 88: uint24_t getBMP280Data(ParamDPS422_t param);sensor.c: 89: {;sensor.c: 90:
      +                               uint8_t Txbuffer;;sensor.c: 91:     uint8_t Rxbuffer[3] = {0,0,0};
 16640     0634  3000               	movlw	0
 16641     0635  00BF               	movwf	getBMP280Data@Rxbuffer
 16642     0636  3000               	movlw	0
 16643     0637  00C0               	movwf	getBMP280Data@Rxbuffer+1
 16644     0638  3000               	movlw	0
 16645     0639  00C1               	movwf	getBMP280Data@Rxbuffer+2
 16646                           
 16647                           ;sensor.c: 95:     writeBMP280(0xF4,0xFD);
 16648     063A  30FD               	movlw	253
 16649     063B  00B4               	movwf	writeBMP280@regdata
 16650     063C  30F4               	movlw	244
 16651     063D  3192  2290  3186   	fcall	_writeBMP280
 16652                           
 16653                           ;sensor.c: 96:     for(uint16_t i=0;i<2000;i++)
 16654     0640  01C4               	clrf	getBMP280Data@i
 16655     0641  01C5               	clrf	getBMP280Data@i+1
 16656     0642                     l8187:
 16657                           
 16658                           ;sensor.c: 97:     {;sensor.c: 98:     }
 16659     0642  3001               	movlw	1
 16660     0643  07C4               	addwf	getBMP280Data@i,f
 16661     0644  3000               	movlw	0
 16662     0645  3DC5               	addwfc	getBMP280Data@i+1,f
 16663     0646  3007               	movlw	7
 16664     0647  0245               	subwf	getBMP280Data@i+1,w
 16665     0648  30D0               	movlw	208
 16666     0649  1903               	skipnz
 16667     064A  0244               	subwf	getBMP280Data@i,w
 16668     064B  1C03               	skipc
 16669     064C  2E42               	goto	l8187
 16670                           
 16671                           ;sensor.c: 102:     if(param == TEMP) Txbuffer = 0xFA;
 16672     064D  0843               	movf	getBMP280Data@param,w
 16673     064E  1D03               	btfss	3,2
 16674     064F  2E52               	goto	l8193
 16675     0650  30FA               	movlw	250
 16676     0651  2E56               	goto	L14
 16677     0652                     l8193:
 16678     0652  0343               	decf	getBMP280Data@param,w
 16679     0653  1D03               	btfss	3,2
 16680     0654  2E57               	goto	l8197
 16681     0655  30F7               	movlw	247
 16682     0656                     L14:
 16683     0656  00C2               	movwf	getBMP280Data@Txbuffer
 16684     0657                     l8197:
 16685                           
 16686                           ;sensor.c: 106:     for(uint8_t i=0;i<3;i++)
 16687     0657  01C6               	clrf	getBMP280Data@i_2696
 16688     0658                     l8203:
 16689                           
 16690                           ;sensor.c: 107:     {;sensor.c: 108:         Rxbuffer[i] = readBMP280(Txbuffer+i);
 16691     0658  0842               	movf	getBMP280Data@Txbuffer,w
 16692     0659  0746               	addwf	getBMP280Data@i_2696,w
 16693     065A  3193  23D6  3186   	fcall	_readBMP280
 16694     065D  00BC               	movwf	??_getBMP280Data
 16695     065E  0846               	movf	getBMP280Data@i_2696,w
 16696     065F  3E3F               	addlw	(low (getBMP280Data@Rxbuffer| 0))& (0+255)
 16697     0660  0086               	movwf	6
 16698     0661  0187               	clrf	7
 16699     0662  083C               	movf	??_getBMP280Data,w
 16700     0663  0081               	movwf	1
 16701                           
 16702                           ;sensor.c: 109:     }
 16703     0664  3001               	movlw	1
 16704     0665  07C6               	addwf	getBMP280Data@i_2696,f
 16705     0666  3003               	movlw	3
 16706     0667  0246               	subwf	getBMP280Data@i_2696,w
 16707     0668  1C03               	skipc
 16708     0669  2E58               	goto	l8203
 16709                           
 16710                           ;sensor.c: 111:     ret = Rxbuffer[0];
 16711     066A  083F               	movf	getBMP280Data@Rxbuffer,w
 16712     066B  00BC               	movwf	??_getBMP280Data
 16713     066C  01BD               	clrf	??_getBMP280Data+1
 16714     066D  01BE               	clrf	??_getBMP280Data+2
 16715     066E  083C               	movf	??_getBMP280Data,w
 16716     066F  00C7               	movwf	getBMP280Data@ret
 16717     0670  083D               	movf	??_getBMP280Data+1,w
 16718     0671  00C8               	movwf	getBMP280Data@ret+1
 16719     0672  083E               	movf	??_getBMP280Data+2,w
 16720     0673  00C9               	movwf	getBMP280Data@ret+2
 16721                           
 16722                           ;sensor.c: 112:     ret = ret << 8;
 16723     0674  0847               	movf	getBMP280Data@ret,w
 16724     0675  00BC               	movwf	??_getBMP280Data
 16725     0676  0848               	movf	getBMP280Data@ret+1,w
 16726     0677  00BD               	movwf	??_getBMP280Data+1
 16727     0678  0849               	movf	getBMP280Data@ret+2,w
 16728     0679  00BE               	movwf	??_getBMP280Data+2
 16729     067A  3008               	movlw	8
 16730     067B                     u5245:
 16731     067B  35BC               	lslf	??_getBMP280Data,f
 16732     067C  0DBD               	rlf	??_getBMP280Data+1,f
 16733     067D  0DBE               	rlf	??_getBMP280Data+2,f
 16734     067E  0B89               	decfsz	9,f
 16735     067F  2E7B               	goto	u5245
 16736     0680  083C               	movf	??_getBMP280Data,w
 16737     0681  00C7               	movwf	getBMP280Data@ret
 16738     0682  083D               	movf	??_getBMP280Data+1,w
 16739     0683  00C8               	movwf	getBMP280Data@ret+1
 16740     0684  083E               	movf	??_getBMP280Data+2,w
 16741     0685  00C9               	movwf	getBMP280Data@ret+2
 16742                           
 16743                           ;sensor.c: 113:     ret += Rxbuffer[1];
 16744     0686  0840               	movf	getBMP280Data@Rxbuffer+1,w
 16745     0687  00BC               	movwf	??_getBMP280Data
 16746     0688  01BD               	clrf	??_getBMP280Data+1
 16747     0689  01BE               	clrf	??_getBMP280Data+2
 16748     068A  083C               	movf	??_getBMP280Data,w
 16749     068B  07C7               	addwf	getBMP280Data@ret,f
 16750     068C  083D               	movf	??_getBMP280Data+1,w
 16751     068D  3DC8               	addwfc	getBMP280Data@ret+1,f
 16752     068E  083E               	movf	??_getBMP280Data+2,w
 16753     068F  3DC9               	addwfc	getBMP280Data@ret+2,f
 16754                           
 16755                           ;sensor.c: 114:     ret = ret << 8;
 16756     0690  0847               	movf	getBMP280Data@ret,w
 16757     0691  00BC               	movwf	??_getBMP280Data
 16758     0692  0848               	movf	getBMP280Data@ret+1,w
 16759     0693  00BD               	movwf	??_getBMP280Data+1
 16760     0694  0849               	movf	getBMP280Data@ret+2,w
 16761     0695  00BE               	movwf	??_getBMP280Data+2
 16762     0696  3008               	movlw	8
 16763     0697                     u5255:
 16764     0697  35BC               	lslf	??_getBMP280Data,f
 16765     0698  0DBD               	rlf	??_getBMP280Data+1,f
 16766     0699  0DBE               	rlf	??_getBMP280Data+2,f
 16767     069A  0B89               	decfsz	9,f
 16768     069B  2E97               	goto	u5255
 16769     069C  083C               	movf	??_getBMP280Data,w
 16770     069D  00C7               	movwf	getBMP280Data@ret
 16771     069E  083D               	movf	??_getBMP280Data+1,w
 16772     069F  00C8               	movwf	getBMP280Data@ret+1
 16773     06A0  083E               	movf	??_getBMP280Data+2,w
 16774     06A1  00C9               	movwf	getBMP280Data@ret+2
 16775                           
 16776                           ;sensor.c: 115:     ret += Rxbuffer[2];
 16777     06A2  0841               	movf	getBMP280Data@Rxbuffer+2,w
 16778     06A3  00BC               	movwf	??_getBMP280Data
 16779     06A4  01BD               	clrf	??_getBMP280Data+1
 16780     06A5  01BE               	clrf	??_getBMP280Data+2
 16781     06A6  083C               	movf	??_getBMP280Data,w
 16782     06A7  07C7               	addwf	getBMP280Data@ret,f
 16783     06A8  083D               	movf	??_getBMP280Data+1,w
 16784     06A9  3DC8               	addwfc	getBMP280Data@ret+1,f
 16785     06AA  083E               	movf	??_getBMP280Data+2,w
 16786     06AB  3DC9               	addwfc	getBMP280Data@ret+2,f
 16787                           
 16788                           ;sensor.c: 116:     ret = ret >> 4;
 16789     06AC  0847               	movf	getBMP280Data@ret,w
 16790     06AD  00BC               	movwf	??_getBMP280Data
 16791     06AE  0848               	movf	getBMP280Data@ret+1,w
 16792     06AF  00BD               	movwf	??_getBMP280Data+1
 16793     06B0  0849               	movf	getBMP280Data@ret+2,w
 16794     06B1  00BE               	movwf	??_getBMP280Data+2
 16795     06B2  3004               	movlw	4
 16796     06B3                     u5265:
 16797     06B3  36BE               	lsrf	??_getBMP280Data+2,f
 16798     06B4  0CBD               	rrf	??_getBMP280Data+1,f
 16799     06B5  0CBC               	rrf	??_getBMP280Data,f
 16800     06B6  0B89               	decfsz	9,f
 16801     06B7  2EB3               	goto	u5265
 16802     06B8  083C               	movf	??_getBMP280Data,w
 16803     06B9  00C7               	movwf	getBMP280Data@ret
 16804     06BA  083D               	movf	??_getBMP280Data+1,w
 16805     06BB  00C8               	movwf	getBMP280Data@ret+1
 16806     06BC  083E               	movf	??_getBMP280Data+2,w
 16807     06BD  00C9               	movwf	getBMP280Data@ret+2
 16808                           
 16809                           ;sensor.c: 118:     return ret;
 16810     06BE  0847               	movf	getBMP280Data@ret,w
 16811     06BF  00B9               	movwf	?_getBMP280Data
 16812     06C0  0848               	movf	getBMP280Data@ret+1,w
 16813     06C1  00BA               	movwf	?_getBMP280Data+1
 16814     06C2  0849               	movf	getBMP280Data@ret+2,w
 16815     06C3  00BB               	movwf	?_getBMP280Data+2
 16816     06C4  0008               	return
 16817     06C5                     __end_of_getBMP280Data:
 16818                           
 16819                           	psect	text53
 16820     12C3                     __ptext53:	
 16821 ;; *************** function _getADCData *****************
 16822 ;; Defined at:
 16823 ;;		line 5 in file "sensor.c"
 16824 ;; Parameters:    Size  Location     Type
 16825 ;;  sensorSelect    2    3[BANK0 ] PTR void 
 16826 ;;		 -> sensor1$sensor_info(11), sensor1$sensor_info$codename(5), sensor1(13), 
 16827 ;; Auto vars:     Size  Location     Type
 16828 ;;  result          2    5[BANK0 ] unsigned short 
 16829 ;;  channel         1    7[BANK0 ] enum E10735
 16830 ;; Return value:  Size  Location     Type
 16831 ;;                  2    3[BANK0 ] unsigned short 
 16832 ;; Registers used:
 16833 ;;		wreg, fsr1l, fsr1h, pclath, cstack
 16834 ;; Tracked objects:
 16835 ;;		On entry : 3F/0
 16836 ;;		On exit  : 3F/0
 16837 ;;		Unchanged: 0/0
 16838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16839 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16840 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16842 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16843 ;;Total ram usage:        5 bytes
 16844 ;; Hardware stack levels used: 1
 16845 ;; Hardware stack levels required when called: 6
 16846 ;; This function calls:
 16847 ;;		_ADCC_GetSingleConversion
 16848 ;; This function is called by:
 16849 ;;		_main
 16850 ;; This function uses a non-reentrant model
 16851 ;;
 16852                           
 16853     12C3                     _getADCData:	
 16854                           ;psect for function _getADCData
 16855                           
 16856                           
 16857                           ;sensor.c: 5: uint16_t getADCData(void* sensorSelection);sensor.c: 6: {;sensor.c: 7:    
      +                           uint16_t result;;sensor.c: 8:     adcc_channel_t channel;;sensor.c: 10:     channel = *
      +                          ((adcc_channel_t *) sensorSelection);
 16858                           
 16859                           ;incstack = 0
 16860                           ; Regs used in _getADCData: [wreg+fsr1l+fsr1h+pclath+cstack]
 16861     12C3  0823               	movf	getADCData@sensorSelection,w
 16862     12C4  0086               	movwf	6
 16863     12C5  0824               	movf	getADCData@sensorSelection+1,w
 16864     12C6  0087               	movwf	7
 16865     12C7  0801               	movf	1,w
 16866     12C8  00A7               	movwf	getADCData@channel
 16867                           
 16868                           ;sensor.c: 11:     result = ADCC_GetSingleConversion(channel);
 16869     12C9  0827               	movf	getADCData@channel,w
 16870     12CA  3192  22D5         	fcall	_ADCC_GetSingleConversion
 16871     12CC  0821               	movf	?_ADCC_GetSingleConversion+1,w
 16872     12CD  00A6               	movwf	getADCData@result+1
 16873     12CE  0820               	movf	?_ADCC_GetSingleConversion,w
 16874     12CF  00A5               	movwf	getADCData@result
 16875                           
 16876                           ;sensor.c: 13:     return result;
 16877     12D0  0826               	movf	getADCData@result+1,w
 16878     12D1  00A4               	movwf	?_getADCData+1
 16879     12D2  0825               	movf	getADCData@result,w
 16880     12D3  00A3               	movwf	?_getADCData
 16881     12D4  0008               	return
 16882     12D5                     __end_of_getADCData:
 16883                           
 16884                           	psect	text54
 16885     12D5                     __ptext54:	
 16886 ;; *************** function _ADCC_GetSingleConversion *****************
 16887 ;; Defined at:
 16888 ;;		line 138 in file "mcc_generated_files/adcc.c"
 16889 ;; Parameters:    Size  Location     Type
 16890 ;;  channel         1    wreg     enum E10340
 16891 ;; Auto vars:     Size  Location     Type
 16892 ;;  channel         1    2[BANK0 ] enum E10340
 16893 ;; Return value:  Size  Location     Type
 16894 ;;                  2    0[BANK0 ] unsigned short 
 16895 ;; Registers used:
 16896 ;;		wreg
 16897 ;; Tracked objects:
 16898 ;;		On entry : 3F/0
 16899 ;;		On exit  : 3F/0
 16900 ;;		Unchanged: 0/0
 16901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16902 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16905 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16906 ;;Total ram usage:        3 bytes
 16907 ;; Hardware stack levels used: 1
 16908 ;; Hardware stack levels required when called: 5
 16909 ;; This function calls:
 16910 ;;		Nothing
 16911 ;; This function is called by:
 16912 ;;		_getADCData
 16913 ;; This function uses a non-reentrant model
 16914 ;;
 16915                           
 16916     12D5                     _ADCC_GetSingleConversion:	
 16917                           ;psect for function _ADCC_GetSingleConversion
 16918                           
 16919                           
 16920                           ;incstack = 0
 16921                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 16922                           ;ADCC_GetSingleConversion@channel stored from wreg
 16923     12D5  00A2               	movwf	ADCC_GetSingleConversion@channel
 16924                           
 16925                           ;mcc_generated_files/adcc.c: 138: adc_result_t ADCC_GetSingleConversion(adcc_channel_t c
      +                          hannel);mcc_generated_files/adcc.c: 139: {;mcc_generated_files/adcc.c: 141:     ADPCH = 
      +                          channel;
 16926     12D6  0822               	movf	ADCC_GetSingleConversion@channel,w
 16927     12D7  0141               	movlb	1	; select bank1
 16928     12D8  009F               	movwf	31	;volatile
 16929                           
 16930                           ;mcc_generated_files/adcc.c: 144:     ADCON0bits.ADON = 1;
 16931     12D9  0142               	movlb	2	; select bank2
 16932     12DA  1791               	bsf	17,7	;volatile
 16933                           
 16934                           ;mcc_generated_files/adcc.c: 147:     ADCON0bits.ADCONT = 0;
 16935     12DB  1311               	bcf	17,6	;volatile
 16936                           
 16937                           ;mcc_generated_files/adcc.c: 150:     ADCON0bits.ADGO = 1;
 16938     12DC  1411               	bsf	17,0	;volatile
 16939     12DD                     l197:	
 16940                           ;mcc_generated_files/adcc.c: 155:     {;mcc_generated_files/adcc.c: 156:     }
 16941                           
 16942                           
 16943                           ;mcc_generated_files/adcc.c: 154:     while (ADCON0bits.ADGO)
 16944     12DD  1811               	btfsc	17,0	;volatile
 16945     12DE  2ADD               	goto	l197
 16946                           
 16947                           ;mcc_generated_files/adcc.c: 160:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 16948     12DF  0141               	movlb	1	; select bank1
 16949     12E0  081E               	movf	30,w	;volatile
 16950     12E1  0140               	movlb	0	; select bank0
 16951     12E2  00A1               	movwf	?_ADCC_GetSingleConversion+1
 16952     12E3  0141               	movlb	1	; select bank1
 16953     12E4  081D               	movf	29,w	;volatile
 16954     12E5  0140               	movlb	0	; select bank0
 16955     12E6  00A0               	movwf	?_ADCC_GetSingleConversion
 16956     12E7  0008               	return
 16957     12E8                     __end_of_ADCC_GetSingleConversion:
 16958                           
 16959                           	psect	text55
 16960     0B3C                     __ptext55:	
 16961 ;; *************** function _default_values_register *****************
 16962 ;; Defined at:
 16963 ;;		line 123 in file "modbus_imp.c"
 16964 ;; Parameters:    Size  Location     Type
 16965 ;;  registers       2   29[BANK0 ] PTR struct .
 16966 ;;		 -> main@registers(45), 
 16967 ;; Auto vars:     Size  Location     Type
 16968 ;;		None
 16969 ;; Return value:  Size  Location     Type
 16970 ;;                  1    wreg      void 
 16971 ;; Registers used:
 16972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16973 ;; Tracked objects:
 16974 ;;		On entry : 3F/0
 16975 ;;		On exit  : 3F/4
 16976 ;;		Unchanged: 0/0
 16977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16978 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16981 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16982 ;;Total ram usage:        2 bytes
 16983 ;; Hardware stack levels used: 1
 16984 ;; Hardware stack levels required when called: 16
 16985 ;; This function calls:
 16986 ;;		_m_memset
 16987 ;;		_readBMP280coeff
 16988 ;; This function is called by:
 16989 ;;		_main
 16990 ;; This function uses a non-reentrant model
 16991 ;;
 16992                           
 16993     0B3C                     _default_values_register:	
 16994                           ;psect for function _default_values_register
 16995                           
 16996                           
 16997                           ;modbus_imp.c: 123: void default_values_register(mod_bus_registers* registers);modbus_im
      +                          p.c: 124: {;modbus_imp.c: 125:     registers->server_holding_register.addr_slave = 3;
 16998                           
 16999                           ;incstack = 0
 17000 ;; hardware stack exceeded
 17001                           ; Regs used in _default_values_register: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17002     0B3C  083D               	movf	default_values_register@registers,w
 17003     0B3D  3E29               	addlw	41
 17004     0B3E  0086               	movwf	6
 17005     0B3F  3000               	movlw	0
 17006     0B40  3D3E               	addwfc	default_values_register@registers+1,w
 17007     0B41  0087               	movwf	7
 17008     0B42  3003               	movlw	3
 17009     0B43  3FC0               	movwi [0]fsr1
 17010     0B44  3000               	movlw	0
 17011     0B45  3FC1               	movwi [1]fsr1
 17012                           
 17013                           ;modbus_imp.c: 126:     registers->server_holding_register.baudrate = 9600;
 17014     0B46  083D               	movf	default_values_register@registers,w
 17015     0B47  3E2B               	addlw	43
 17016     0B48  0086               	movwf	6
 17017     0B49  3000               	movlw	0
 17018     0B4A  3D3E               	addwfc	default_values_register@registers+1,w
 17019     0B4B  0087               	movwf	7
 17020     0B4C  3080               	movlw	128
 17021     0B4D  3FC0               	movwi [0]fsr1
 17022     0B4E  3025               	movlw	37
 17023     0B4F  3FC1               	movwi [1]fsr1
 17024                           
 17025                           ;modbus_imp.c: 128:     m_memset(&(registers->server_coils), 0 ,sizeof(registers->server
      +                          _coils));
 17026     0B50  083E               	movf	default_values_register@registers+1,w
 17027     0B51  00A1               	movwf	m_memset@s+1
 17028     0B52  083D               	movf	default_values_register@registers,w
 17029     0B53  00A0               	movwf	m_memset@s
 17030     0B54  3000               	movlw	0
 17031     0B55  00A2               	movwf	m_memset@c
 17032     0B56  00A3               	movwf	m_memset@c+1
 17033     0B57  3001               	movlw	1
 17034     0B58  00A4               	movwf	m_memset@len
 17035     0B59  3000               	movlw	0
 17036     0B5A  00A5               	movwf	m_memset@len+1
 17037     0B5B  3193  23A4  318B   	fcall	_m_memset
 17038                           
 17039                           ;modbus_imp.c: 129:     m_memset(&(registers->server_input_register), 0 ,sizeof(register
      +                          s->server_input_register));
 17040     0B5E  083D               	movf	default_values_register@registers,w
 17041     0B5F  3E01               	addlw	1
 17042     0B60  00A0               	movwf	m_memset@s
 17043     0B61  3000               	movlw	0
 17044     0B62  3D3E               	addwfc	default_values_register@registers+1,w
 17045     0B63  00A1               	movwf	m_memset@s+1
 17046     0B64  3000               	movlw	0
 17047     0B65  00A2               	movwf	m_memset@c
 17048     0B66  00A3               	movwf	m_memset@c+1
 17049     0B67  3028               	movlw	40
 17050     0B68  00A4               	movwf	m_memset@len
 17051     0B69  3000               	movlw	0
 17052     0B6A  00A5               	movwf	m_memset@len+1
 17053     0B6B  3193  23A4  318B   	fcall	_m_memset
 17054                           
 17055                           ;modbus_imp.c: 130:     registers->server_input_register.serial_number = 1;
 17056     0B6E  083D               	movf	default_values_register@registers,w
 17057     0B6F  0086               	movwf	6
 17058     0B70  083E               	movf	default_values_register@registers+1,w
 17059     0B71  0087               	movwf	7
 17060     0B72  3143               	addfsr 1,3
 17061     0B73  3001               	movlw	1
 17062     0B74  3FC0               	movwi [0]fsr1
 17063     0B75  3000               	movlw	0
 17064     0B76  3FC1               	movwi [1]fsr1
 17065                           
 17066                           ;modbus_imp.c: 131:     registers->server_input_register.sensor_type = 200;
 17067     0B77  083D               	movf	default_values_register@registers,w
 17068     0B78  0086               	movwf	6
 17069     0B79  083E               	movf	default_values_register@registers+1,w
 17070     0B7A  0087               	movwf	7
 17071     0B7B  3141               	addfsr 1,1
 17072     0B7C  30C8               	movlw	200
 17073     0B7D  3FC0               	movwi [0]fsr1
 17074     0B7E  3000               	movlw	0
 17075     0B7F  3FC1               	movwi [1]fsr1
 17076                           
 17077                           ;modbus_imp.c: 132:     readBMP280coeff(registers->server_input_register.coeff);
 17078     0B80  083D               	movf	default_values_register@registers,w
 17079     0B81  3E11               	addlw	17
 17080     0B82  00B8               	movwf	readBMP280coeff@coeff_buff
 17081     0B83  3000               	movlw	0
 17082     0B84  3D3E               	addwfc	default_values_register@registers+1,w
 17083     0B85  00B9               	movwf	readBMP280coeff@coeff_buff+1
 17084     0B86  3194  24C6         	fcall	_readBMP280coeff
 17085     0B88  0008               	return
 17086     0B89                     __end_of_default_values_register:
 17087                           
 17088                           	psect	text56
 17089     14C6                     __ptext56:	
 17090 ;; *************** function _readBMP280coeff *****************
 17091 ;; Defined at:
 17092 ;;		line 45 in file "sensor.c"
 17093 ;; Parameters:    Size  Location     Type
 17094 ;;  coeff_buff      2   24[BANK0 ] PTR unsigned short 
 17095 ;;		 -> registers$server_input_register$sensor_type(2), 
 17096 ;; Auto vars:     Size  Location     Type
 17097 ;;  i               1   28[BANK0 ] unsigned char 
 17098 ;;  Txbuffer        1   27[BANK0 ] unsigned char 
 17099 ;; Return value:  Size  Location     Type
 17100 ;;                  1    wreg      void 
 17101 ;; Registers used:
 17102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17103 ;; Tracked objects:
 17104 ;;		On entry : 3F/0
 17105 ;;		On exit  : 3F/4
 17106 ;;		Unchanged: 0/0
 17107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17108 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17109 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17111 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17112 ;;Total ram usage:        5 bytes
 17113 ;; Hardware stack levels used: 1
 17114 ;; Hardware stack levels required when called: 15
 17115 ;; This function calls:
 17116 ;;		_adjustBMP280coeff
 17117 ;;		_readBMP280
 17118 ;; This function is called by:
 17119 ;;		_default_values_register
 17120 ;; This function uses a non-reentrant model
 17121 ;;
 17122                           
 17123     14C6                     _readBMP280coeff:	
 17124                           ;psect for function _readBMP280coeff
 17125                           
 17126                           
 17127                           ;sensor.c: 45: void readBMP280coeff(uint16_t *coeff_buff);sensor.c: 46: {;sensor.c: 47: 
      +                              uint8_t Txbuffer;;sensor.c: 49:     Txbuffer = 0x88;
 17128                           
 17129                           ;incstack = 0
 17130 ;; hardware stack exceeded
 17131                           ; Regs used in _readBMP280coeff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17132     14C6  3088               	movlw	136
 17133     14C7  00BB               	movwf	readBMP280coeff@Txbuffer
 17134                           
 17135                           ;sensor.c: 51:     for(uint8_t i=0;i<26;i++)
 17136     14C8  01BC               	clrf	readBMP280coeff@i
 17137     14C9                     l7925:
 17138                           
 17139                           ;sensor.c: 52:     {;sensor.c: 53:         coeff_reg[i] = readBMP280(Txbuffer+i);
 17140     14C9  083B               	movf	readBMP280coeff@Txbuffer,w
 17141     14CA  073C               	addwf	readBMP280coeff@i,w
 17142     14CB  3193  23D6  3194   	fcall	_readBMP280
 17143     14CE  00BA               	movwf	??_readBMP280coeff
 17144     14CF  083C               	movf	readBMP280coeff@i,w
 17145     14D0  3E4D               	addlw	(low (_coeff_reg| (0+512)))& (0+255)
 17146     14D1  0086               	movwf	6
 17147     14D2  3002               	movlw	2	; select bank4/5
 17148     14D3  0087               	movwf	7
 17149     14D4  083A               	movf	??_readBMP280coeff,w
 17150     14D5  0081               	movwf	1
 17151                           
 17152                           ;sensor.c: 54:     }
 17153     14D6  3001               	movlw	1
 17154     14D7  07BC               	addwf	readBMP280coeff@i,f
 17155     14D8  301A               	movlw	26
 17156     14D9  023C               	subwf	readBMP280coeff@i,w
 17157     14DA  1C03               	skipc
 17158     14DB  2CC9               	goto	l7925
 17159                           
 17160                           ;sensor.c: 55:     adjustBMP280coeff(coeff_buff);
 17161     14DC  0839               	movf	readBMP280coeff@coeff_buff+1,w
 17162     14DD  00A1               	movwf	adjustBMP280coeff@coeff_buff+1
 17163     14DE  0838               	movf	readBMP280coeff@coeff_buff,w
 17164     14DF  00A0               	movwf	adjustBMP280coeff@coeff_buff
 17165     14E0  318F  277D         	fcall	_adjustBMP280coeff
 17166     14E2  0008               	return
 17167     14E3                     __end_of_readBMP280coeff:
 17168                           
 17169                           	psect	text57
 17170     13D6                     __ptext57:	
 17171 ;; *************** function _readBMP280 *****************
 17172 ;; Defined at:
 17173 ;;		line 16 in file "sensor.c"
 17174 ;; Parameters:    Size  Location     Type
 17175 ;;  regadd          1    wreg     unsigned char 
 17176 ;; Auto vars:     Size  Location     Type
 17177 ;;  regadd          1   22[BANK0 ] unsigned char 
 17178 ;;  ret             1   23[BANK0 ] unsigned char 
 17179 ;;  pTxbuffer       1   21[BANK0 ] PTR unsigned char 
 17180 ;;		 -> readBMP280@regadd(1), 
 17181 ;;  pRxbuffer       1   20[BANK0 ] PTR unsigned char 
 17182 ;;		 -> readBMP280@ret(1), 
 17183 ;; Return value:  Size  Location     Type
 17184 ;;                  1    wreg      unsigned char 
 17185 ;; Registers used:
 17186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17187 ;; Tracked objects:
 17188 ;;		On entry : 3F/0
 17189 ;;		On exit  : 3F/0
 17190 ;;		Unchanged: 0/0
 17191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17193 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17195 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17196 ;;Total ram usage:        4 bytes
 17197 ;; Hardware stack levels used: 1
 17198 ;; Hardware stack levels required when called: 14
 17199 ;; This function calls:
 17200 ;;		_I2C1_ReadNBytes
 17201 ;;		_I2C1_WriteNBytes
 17202 ;; This function is called by:
 17203 ;;		_readBMP280coeff
 17204 ;;		_getBMP280Data
 17205 ;; This function uses a non-reentrant model
 17206 ;;
 17207                           
 17208     13D6                     _readBMP280:	
 17209                           ;psect for function _readBMP280
 17210                           
 17211                           
 17212                           ;incstack = 0
 17213                           ; Regs used in _readBMP280: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17214                           ;readBMP280@regadd stored from wreg
 17215     13D6  00B6               	movwf	readBMP280@regadd
 17216                           
 17217                           ;sensor.c: 16: uint8_t readBMP280(uint8_t regadd);sensor.c: 17: {;sensor.c: 18:     uint
      +                          8_t ret;;sensor.c: 19:     uint8_t* pRxbuffer;;sensor.c: 20:     uint8_t* pTxbuffer;;sen
      +                          sor.c: 21:     pRxbuffer = &ret;
 17218     13D7  3037               	movlw	(low (readBMP280@ret| 0))& (0+255)
 17219     13D8  00B4               	movwf	readBMP280@pRxbuffer
 17220                           
 17221                           ;sensor.c: 22:     pTxbuffer = &regadd;
 17222     13D9  3036               	movlw	(low (readBMP280@regadd| 0))& (0+255)
 17223     13DA  00B5               	movwf	readBMP280@pTxbuffer
 17224                           
 17225                           ;sensor.c: 23:     I2C1_WriteNBytes(0x76,pTxbuffer,1);
 17226     13DB  0835               	movf	readBMP280@pTxbuffer,w
 17227     13DC  00B0               	movwf	I2C1_WriteNBytes@data
 17228     13DD  3001               	movlw	1
 17229     13DE  00B1               	movwf	I2C1_WriteNBytes@len
 17230     13DF  3000               	movlw	0
 17231     13E0  00B2               	movwf	I2C1_WriteNBytes@len+1
 17232     13E1  3076               	movlw	118
 17233     13E2  3195  258F  3193   	fcall	_I2C1_WriteNBytes
 17234                           
 17235                           ;sensor.c: 24:     I2C1_ReadNBytes(0x76,pRxbuffer,1);
 17236     13E5  0834               	movf	readBMP280@pRxbuffer,w
 17237     13E6  00B0               	movwf	I2C1_ReadNBytes@data
 17238     13E7  3001               	movlw	1
 17239     13E8  00B1               	movwf	I2C1_ReadNBytes@len
 17240     13E9  3000               	movlw	0
 17241     13EA  00B2               	movwf	I2C1_ReadNBytes@len+1
 17242     13EB  3076               	movlw	118
 17243     13EC  3194  24AA         	fcall	_I2C1_ReadNBytes
 17244                           
 17245                           ;sensor.c: 25:     return ret;
 17246     13EE  0837               	movf	readBMP280@ret,w
 17247     13EF  0008               	return
 17248     13F0                     __end_of_readBMP280:
 17249                           
 17250                           	psect	text58
 17251     14AA                     __ptext58:	
 17252 ;; *************** function _I2C1_ReadNBytes *****************
 17253 ;; Defined at:
 17254 ;;		line 120 in file "mcc_generated_files/examples/i2c1_master_example.c"
 17255 ;; Parameters:    Size  Location     Type
 17256 ;;  address         1    wreg     unsigned char 
 17257 ;;  data            1   16[BANK0 ] PTR unsigned char 
 17258 ;;		 -> getSHTC3Data@Rxbuffer(2), getSHTC3Data@Txbuffer(2), readDPS422@ret(1), readBMP280@ret(1), 
 17259 ;;  len             2   17[BANK0 ] unsigned int 
 17260 ;; Auto vars:     Size  Location     Type
 17261 ;;  address         1   19[BANK0 ] unsigned char 
 17262 ;; Return value:  Size  Location     Type
 17263 ;;                  1    wreg      void 
 17264 ;; Registers used:
 17265 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17266 ;; Tracked objects:
 17267 ;;		On entry : 3F/0
 17268 ;;		On exit  : 3F/0
 17269 ;;		Unchanged: 0/0
 17270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17271 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17274 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17275 ;;Total ram usage:        4 bytes
 17276 ;; Hardware stack levels used: 1
 17277 ;; Hardware stack levels required when called: 13
 17278 ;; This function calls:
 17279 ;;		_I2C1_Close
 17280 ;;		_I2C1_MasterRead
 17281 ;;		_I2C1_Open
 17282 ;;		_I2C1_SetBuffer
 17283 ;; This function is called by:
 17284 ;;		_readBMP280
 17285 ;;		_getSHTC3Data
 17286 ;; This function uses a non-reentrant model
 17287 ;;
 17288                           
 17289     14AA                     _I2C1_ReadNBytes:	
 17290                           ;psect for function _I2C1_ReadNBytes
 17291                           
 17292                           
 17293                           ;incstack = 0
 17294                           ; Regs used in _I2C1_ReadNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17295                           ;I2C1_ReadNBytes@address stored from wreg
 17296     14AA  00B3               	movwf	I2C1_ReadNBytes@address
 17297     14AB                     l7359:	
 17298                           ;mcc_generated_files/examples/i2c1_master_example.c: 120: void I2C1_ReadNBytes(i2c1_addr
      +                          ess_t address, uint8_t *data, size_t len);mcc_generated_files/examples/i2c1_master_examp
      +                          le.c: 121: {;mcc_generated_files/examples/i2c1_master_example.c: 122:     while(!I2C1_Op
      +                          en(address));
 17299                           
 17300     14AB  0833               	movf	I2C1_ReadNBytes@address,w
 17301     14AC  3197  275B  3194   	fcall	_I2C1_Open
 17302     14AF  3A00               	xorlw	0
 17303     14B0  1903               	skipnz
 17304     14B1  2CAB               	goto	l7359
 17305                           
 17306                           ;mcc_generated_files/examples/i2c1_master_example.c: 123:     I2C1_SetBuffer(data,len);
 17307     14B2  0830               	movf	I2C1_ReadNBytes@data,w
 17308     14B3  00A0               	movwf	I2C1_SetBuffer@buffer
 17309     14B4  01A1               	clrf	I2C1_SetBuffer@buffer+1
 17310     14B5  0832               	movf	I2C1_ReadNBytes@len+1,w
 17311     14B6  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 17312     14B7  0831               	movf	I2C1_ReadNBytes@len,w
 17313     14B8  00A2               	movwf	I2C1_SetBuffer@bufferSize
 17314     14B9  3193  2360  3194   	fcall	_I2C1_SetBuffer
 17315                           
 17316                           ;mcc_generated_files/examples/i2c1_master_example.c: 124:     I2C1_MasterRead();
 17317     14BC  3191  2162  3194   	fcall	_I2C1_MasterRead
 17318     14BF                     l7365:	
 17319                           ;mcc_generated_files/examples/i2c1_master_example.c: 125:     while(I2C1_BUSY == I2C1_Cl
      +                          ose());
 17320                           
 17321     14BF  3193  2375  3194   	fcall	_I2C1_Close
 17322     14C2  3A01               	xorlw	1
 17323     14C3  1D03               	btfss	3,2
 17324     14C4  0008               	return
 17325     14C5  2CBF               	goto	l7365
 17326     14C6                     __end_of_I2C1_ReadNBytes:
 17327                           
 17328                           	psect	text59
 17329     1162                     __ptext59:	
 17330 ;; *************** function _I2C1_MasterRead *****************
 17331 ;; Defined at:
 17332 ;;		line 246 in file "mcc_generated_files/i2c1_master.c"
 17333 ;; Parameters:    Size  Location     Type
 17334 ;;		None
 17335 ;; Auto vars:     Size  Location     Type
 17336 ;;		None
 17337 ;; Return value:  Size  Location     Type
 17338 ;;                  1    wreg      enum E358
 17339 ;; Registers used:
 17340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17341 ;; Tracked objects:
 17342 ;;		On entry : 3F/2
 17343 ;;		On exit  : 3F/0
 17344 ;;		Unchanged: 0/0
 17345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17350 ;;Total ram usage:        0 bytes
 17351 ;; Hardware stack levels used: 1
 17352 ;; Hardware stack levels required when called: 12
 17353 ;; This function calls:
 17354 ;;		_I2C1_MasterOperation
 17355 ;; This function is called by:
 17356 ;;		_I2C1_ReadNBytes
 17357 ;; This function uses a non-reentrant model
 17358 ;;
 17359                           
 17360     1162                     _I2C1_MasterRead:	
 17361                           ;psect for function _I2C1_MasterRead
 17362                           
 17363                           
 17364                           ;mcc_generated_files/i2c1_master.c: 248:     return I2C1_MasterOperation(1);;	Return val
      +                          ue of _I2C1_MasterRead is never used
 17365                           
 17366                           ;incstack = 0
 17367                           ; Regs used in _I2C1_MasterRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17368     1162  3001               	movlw	1
 17369     1163  3193  23BC         	fcall	_I2C1_MasterOperation
 17370     1165  0008               	return
 17371     1166                     __end_of_I2C1_MasterRead:
 17372                           
 17373                           	psect	text60
 17374     0F7D                     __ptext60:	
 17375 ;; *************** function _adjustBMP280coeff *****************
 17376 ;; Defined at:
 17377 ;;		line 58 in file "sensor.c"
 17378 ;; Parameters:    Size  Location     Type
 17379 ;;  coeff_buff      2    0[BANK0 ] PTR unsigned short 
 17380 ;;		 -> registers$server_input_register$sensor_type(2), 
 17381 ;; Auto vars:     Size  Location     Type
 17382 ;;		None
 17383 ;; Return value:  Size  Location     Type
 17384 ;;                  1    wreg      void 
 17385 ;; Registers used:
 17386 ;;		wreg, fsr1l, fsr1h
 17387 ;; Tracked objects:
 17388 ;;		On entry : 3F/0
 17389 ;;		On exit  : 3F/4
 17390 ;;		Unchanged: 0/0
 17391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17392 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17395 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17396 ;;Total ram usage:        2 bytes
 17397 ;; Hardware stack levels used: 1
 17398 ;; Hardware stack levels required when called: 5
 17399 ;; This function calls:
 17400 ;;		Nothing
 17401 ;; This function is called by:
 17402 ;;		_readBMP280coeff
 17403 ;; This function uses a non-reentrant model
 17404 ;;
 17405                           
 17406     0F7D                     _adjustBMP280coeff:	
 17407                           ;psect for function _adjustBMP280coeff
 17408                           
 17409                           
 17410                           ;sensor.c: 58: void adjustBMP280coeff(uint16_t *coeff_buff);sensor.c: 59: {;sensor.c: 74
      +                          :     coeff_buff[0] = (uint16_t) (((uint16_t) coeff_reg[1] << 8) | ((uint16_t) coeff_reg
      +                          [0]));
 17411                           
 17412                           ;incstack = 0
 17413                           ; Regs used in _adjustBMP280coeff: [wregfsr1]
 17414     0F7D  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17415     0F7E  0086               	movwf	6
 17416     0F7F  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17417     0F80  0087               	movwf	7
 17418     0F81  0144               	movlb	4	; select bank4
 17419     0F82  084D               	movf	_coeff_reg^(0+512),w
 17420     0F83  3FC0               	movwi [0]fsr1
 17421     0F84  084E               	movf	(_coeff_reg^(0+512)+1),w
 17422     0F85  3FC1               	movwi [1]fsr1
 17423                           
 17424                           ;sensor.c: 75:     coeff_buff[1] = (int16_t) (((int16_t) coeff_reg[3] << 8) | ((int16_t)
      +                           coeff_reg[2]));
 17425     0F86  0140               	movlb	0	; select bank0
 17426     0F87  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17427     0F88  0086               	movwf	6
 17428     0F89  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17429     0F8A  0087               	movwf	7
 17430     0F8B  3142               	addfsr 1,2
 17431     0F8C  0144               	movlb	4	; select bank4
 17432     0F8D  084F               	movf	(_coeff_reg^(0+512)+2),w
 17433     0F8E  3FC0               	movwi [0]fsr1
 17434     0F8F  0850               	movf	(_coeff_reg^(0+512)+3),w
 17435     0F90  3FC1               	movwi [1]fsr1
 17436                           
 17437                           ;sensor.c: 76:     coeff_buff[2] = (int16_t) (((int16_t) coeff_reg[5] << 8) | ((int16_t)
      +                           coeff_reg[4]));
 17438     0F91  0140               	movlb	0	; select bank0
 17439     0F92  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17440     0F93  0086               	movwf	6
 17441     0F94  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17442     0F95  0087               	movwf	7
 17443     0F96  3144               	addfsr 1,4
 17444     0F97  0144               	movlb	4	; select bank4
 17445     0F98  0851               	movf	(_coeff_reg^(0+512)+4),w
 17446     0F99  3FC0               	movwi [0]fsr1
 17447     0F9A  0852               	movf	(_coeff_reg^(0+512)+5),w
 17448     0F9B  3FC1               	movwi [1]fsr1
 17449                           
 17450                           ;sensor.c: 77:     coeff_buff[3] = (uint16_t) (((uint16_t) coeff_reg[7] << 8) | ((uint16
      +                          _t) coeff_reg[6]));
 17451     0F9C  0140               	movlb	0	; select bank0
 17452     0F9D  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17453     0F9E  0086               	movwf	6
 17454     0F9F  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17455     0FA0  0087               	movwf	7
 17456     0FA1  3146               	addfsr 1,6
 17457     0FA2  0144               	movlb	4	; select bank4
 17458     0FA3  0853               	movf	(_coeff_reg^(0+512)+6),w
 17459     0FA4  3FC0               	movwi [0]fsr1
 17460     0FA5  0854               	movf	(_coeff_reg^(0+512)+7),w
 17461     0FA6  3FC1               	movwi [1]fsr1
 17462                           
 17463                           ;sensor.c: 78:     coeff_buff[4] = (int16_t) (((int16_t) coeff_reg[9] << 8) | ((int16_t)
      +                           coeff_reg[8]));
 17464     0FA7  0140               	movlb	0	; select bank0
 17465     0FA8  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17466     0FA9  0086               	movwf	6
 17467     0FAA  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17468     0FAB  0087               	movwf	7
 17469     0FAC  3148               	addfsr 1,8
 17470     0FAD  0144               	movlb	4	; select bank4
 17471     0FAE  0855               	movf	(_coeff_reg^(0+512)+8),w
 17472     0FAF  3FC0               	movwi [0]fsr1
 17473     0FB0  0856               	movf	(_coeff_reg^(0+512)+9),w
 17474     0FB1  3FC1               	movwi [1]fsr1
 17475                           
 17476                           ;sensor.c: 79:     coeff_buff[5] = (int16_t) (((int16_t) coeff_reg[11] << 8) | ((int16_t
      +                          ) coeff_reg[10]));
 17477     0FB2  0140               	movlb	0	; select bank0
 17478     0FB3  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17479     0FB4  0086               	movwf	6
 17480     0FB5  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17481     0FB6  0087               	movwf	7
 17482     0FB7  314A               	addfsr 1,10
 17483     0FB8  0144               	movlb	4	; select bank4
 17484     0FB9  0857               	movf	(_coeff_reg^(0+512)+10),w
 17485     0FBA  3FC0               	movwi [0]fsr1
 17486     0FBB  0858               	movf	(_coeff_reg^(0+512)+11),w
 17487     0FBC  3FC1               	movwi [1]fsr1
 17488                           
 17489                           ;sensor.c: 80:     coeff_buff[6] = (int16_t) (((int16_t) coeff_reg[13] << 8) | ((int16_t
      +                          ) coeff_reg[12]));
 17490     0FBD  0140               	movlb	0	; select bank0
 17491     0FBE  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17492     0FBF  0086               	movwf	6
 17493     0FC0  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17494     0FC1  0087               	movwf	7
 17495     0FC2  314C               	addfsr 1,12
 17496     0FC3  0144               	movlb	4	; select bank4
 17497     0FC4  0859               	movf	(_coeff_reg^(0+512)+12),w
 17498     0FC5  3FC0               	movwi [0]fsr1
 17499     0FC6  085A               	movf	(_coeff_reg^(0+512)+13),w
 17500     0FC7  3FC1               	movwi [1]fsr1
 17501                           
 17502                           ;sensor.c: 81:     coeff_buff[7] = (int16_t) (((int16_t) coeff_reg[15] << 8) | ((int16_t
      +                          ) coeff_reg[14]));
 17503     0FC8  0140               	movlb	0	; select bank0
 17504     0FC9  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17505     0FCA  0086               	movwf	6
 17506     0FCB  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17507     0FCC  0087               	movwf	7
 17508     0FCD  314E               	addfsr 1,14
 17509     0FCE  0144               	movlb	4	; select bank4
 17510     0FCF  085B               	movf	(_coeff_reg^(0+512)+14),w
 17511     0FD0  3FC0               	movwi [0]fsr1
 17512     0FD1  085C               	movf	(_coeff_reg^(0+512)+15),w
 17513     0FD2  3FC1               	movwi [1]fsr1
 17514                           
 17515                           ;sensor.c: 82:     coeff_buff[8] = (int16_t) (((int16_t) coeff_reg[17] << 8) | ((int16_t
      +                          ) coeff_reg[16]));
 17516     0FD3  0140               	movlb	0	; select bank0
 17517     0FD4  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17518     0FD5  0086               	movwf	6
 17519     0FD6  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17520     0FD7  0087               	movwf	7
 17521     0FD8  3150               	addfsr 1,16
 17522     0FD9  0144               	movlb	4	; select bank4
 17523     0FDA  085D               	movf	(_coeff_reg^(0+512)+16),w
 17524     0FDB  3FC0               	movwi [0]fsr1
 17525     0FDC  085E               	movf	(_coeff_reg^(0+512)+17),w
 17526     0FDD  3FC1               	movwi [1]fsr1
 17527                           
 17528                           ;sensor.c: 83:     coeff_buff[9] = (int16_t) (((int16_t) coeff_reg[19] << 8) | ((int16_t
      +                          ) coeff_reg[18]));
 17529     0FDE  0140               	movlb	0	; select bank0
 17530     0FDF  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17531     0FE0  0086               	movwf	6
 17532     0FE1  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17533     0FE2  0087               	movwf	7
 17534     0FE3  3152               	addfsr 1,18
 17535     0FE4  0144               	movlb	4	; select bank4
 17536     0FE5  085F               	movf	(_coeff_reg^(0+512)+18),w
 17537     0FE6  3FC0               	movwi [0]fsr1
 17538     0FE7  0860               	movf	(_coeff_reg^(0+512)+19),w
 17539     0FE8  3FC1               	movwi [1]fsr1
 17540                           
 17541                           ;sensor.c: 84:     coeff_buff[10] = (int16_t) (((int16_t) coeff_reg[21] << 8) | ((int16_
      +                          t) coeff_reg[20]));
 17542     0FE9  0140               	movlb	0	; select bank0
 17543     0FEA  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17544     0FEB  0086               	movwf	6
 17545     0FEC  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17546     0FED  0087               	movwf	7
 17547     0FEE  3154               	addfsr 1,20
 17548     0FEF  0144               	movlb	4	; select bank4
 17549     0FF0  0861               	movf	(_coeff_reg^(0+512)+20),w
 17550     0FF1  3FC0               	movwi [0]fsr1
 17551     0FF2  0862               	movf	(_coeff_reg^(0+512)+21),w
 17552     0FF3  3FC1               	movwi [1]fsr1
 17553                           
 17554                           ;sensor.c: 85:     coeff_buff[11] = (int16_t) (((int16_t) coeff_reg[23] << 8) | ((int16_
      +                          t) coeff_reg[22]));
 17555     0FF4  0140               	movlb	0	; select bank0
 17556     0FF5  0820               	movf	adjustBMP280coeff@coeff_buff,w
 17557     0FF6  0086               	movwf	6
 17558     0FF7  0821               	movf	adjustBMP280coeff@coeff_buff+1,w
 17559     0FF8  0087               	movwf	7
 17560     0FF9  3156               	addfsr 1,22
 17561     0FFA  0144               	movlb	4	; select bank4
 17562     0FFB  0863               	movf	(_coeff_reg^(0+512)+22),w
 17563     0FFC  3FC0               	movwi [0]fsr1
 17564     0FFD  0864               	movf	(_coeff_reg^(0+512)+23),w
 17565     0FFE  3FC1               	movwi [1]fsr1
 17566     0FFF  0008               	return
 17567     1000                     __end_of_adjustBMP280coeff:
 17568                           
 17569                           	psect	text61
 17570     13A4                     __ptext61:	
 17571 ;; *************** function _m_memset *****************
 17572 ;; Defined at:
 17573 ;;		line 101 in file "nanomodbus.c"
 17574 ;; Parameters:    Size  Location     Type
 17575 ;;  s               2    0[BANK0 ] PTR void 
 17576 ;;		 -> registers$server_coils(1), registers$server_coils$coils(1), main@nmbs(76), main@registers(45), 
 17577 ;;  c               2    2[BANK0 ] int 
 17578 ;;  len             2    4[BANK0 ] unsigned int 
 17579 ;; Auto vars:     Size  Location     Type
 17580 ;;  p               2    6[BANK0 ] PTR unsigned char 
 17581 ;;		 -> registers$server_coils(1), registers$server_coils$coils(1), main@nmbs(76), main@registers(45), 
 17582 ;; Return value:  Size  Location     Type
 17583 ;;                  1    wreg      void 
 17584 ;; Registers used:
 17585 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17586 ;; Tracked objects:
 17587 ;;		On entry : 3F/0
 17588 ;;		On exit  : 3F/0
 17589 ;;		Unchanged: 0/0
 17590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17591 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17592 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17594 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17595 ;;Total ram usage:        8 bytes
 17596 ;; Hardware stack levels used: 1
 17597 ;; Hardware stack levels required when called: 5
 17598 ;; This function calls:
 17599 ;;		Nothing
 17600 ;; This function is called by:
 17601 ;;		_main
 17602 ;;		_default_values_register
 17603 ;;		_nmbs_create
 17604 ;; This function uses a non-reentrant model
 17605 ;;
 17606                           
 17607     13A4                     _m_memset:	
 17608                           ;psect for function _m_memset
 17609                           
 17610                           
 17611                           ;nanomodbus.c: 101: void m_memset(void *s, int c, unsigned int len);nanomodbus.c: 102: {
      +                          ;nanomodbus.c: 103:     unsigned char* p=s;
 17612                           
 17613                           ;incstack = 0
 17614                           ; Regs used in _m_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 17615     13A4  0821               	movf	m_memset@s+1,w
 17616     13A5  00A7               	movwf	m_memset@p+1
 17617     13A6  0820               	movf	m_memset@s,w
 17618     13A7  00A6               	movwf	m_memset@p
 17619     13A8                     l7591:	
 17620                           ;nanomodbus.c: 104:     while(len--)
 17621                           
 17622                           
 17623                           ;nanomodbus.c: 104:     while(len--)
 17624     13A8  3001               	movlw	1
 17625     13A9  02A4               	subwf	m_memset@len,f
 17626     13AA  3000               	movlw	0
 17627     13AB  3BA5               	subwfb	m_memset@len+1,f
 17628     13AC  0A24               	incf	m_memset@len,w
 17629     13AD  1903               	btfsc	3,2
 17630     13AE  0A25               	incf	m_memset@len+1,w
 17631     13AF  1903               	btfsc	3,2
 17632     13B0  0008               	return
 17633                           
 17634                           ;nanomodbus.c: 105:     {;nanomodbus.c: 106:         *p++ = (unsigned char)c;
 17635     13B1  0826               	movf	m_memset@p,w
 17636     13B2  0086               	movwf	6
 17637     13B3  0827               	movf	m_memset@p+1,w
 17638     13B4  0087               	movwf	7
 17639     13B5  0822               	movf	m_memset@c,w
 17640     13B6  0081               	movwf	1
 17641     13B7  3001               	movlw	1
 17642     13B8  07A6               	addwf	m_memset@p,f
 17643     13B9  3000               	movlw	0
 17644     13BA  3DA7               	addwfc	m_memset@p+1,f
 17645     13BB  2BA8               	goto	l7591
 17646     13BC                     __end_of_m_memset:
 17647                           
 17648                           	psect	text62
 17649     10FB                     __ptext62:	
 17650 ;; *************** function _check_error_modbus *****************
 17651 ;; Defined at:
 17652 ;;		line 135 in file "modbus_imp.c"
 17653 ;; Parameters:    Size  Location     Type
 17654 ;;  err             1    wreg     enum E10966
 17655 ;; Auto vars:     Size  Location     Type
 17656 ;;  err             1    0[COMMON] enum E10966
 17657 ;; Return value:  Size  Location     Type
 17658 ;;                  1    wreg      void 
 17659 ;; Registers used:
 17660 ;;		wreg
 17661 ;; Tracked objects:
 17662 ;;		On entry : 3F/2
 17663 ;;		On exit  : 3F/2
 17664 ;;		Unchanged: 3F/0
 17665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17670 ;;Total ram usage:        0 bytes
 17671 ;; Hardware stack levels used: 1
 17672 ;; Hardware stack levels required when called: 5
 17673 ;; This function calls:
 17674 ;;		Nothing
 17675 ;; This function is called by:
 17676 ;;		_main
 17677 ;; This function uses a non-reentrant model
 17678 ;;
 17679                           
 17680     10FB                     _check_error_modbus:	
 17681                           ;psect for function _check_error_modbus
 17682                           
 17683                           
 17684                           ;incstack = 0
 17685                           ; Regs used in _check_error_modbus: [wreg]
 17686     10FB  0008               	return
 17687     10FC                     __end_of_check_error_modbus:
 17688                           
 17689                           	psect	text63
 17690     115E                     __ptext63:	
 17691 ;; *************** function _UART_ClearBuffer *****************
 17692 ;; Defined at:
 17693 ;;		line 350 in file "mcc_generated_files/eusart1.c"
 17694 ;; Parameters:    Size  Location     Type
 17695 ;;		None
 17696 ;; Auto vars:     Size  Location     Type
 17697 ;;		None
 17698 ;; Return value:  Size  Location     Type
 17699 ;;                  1    wreg      void 
 17700 ;; Registers used:
 17701 ;;		status,2
 17702 ;; Tracked objects:
 17703 ;;		On entry : 3F/2
 17704 ;;		On exit  : 3F/2
 17705 ;;		Unchanged: 3F/0
 17706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17711 ;;Total ram usage:        0 bytes
 17712 ;; Hardware stack levels used: 1
 17713 ;; Hardware stack levels required when called: 5
 17714 ;; This function calls:
 17715 ;;		Nothing
 17716 ;; This function is called by:
 17717 ;;		_main
 17718 ;; This function uses a non-reentrant model
 17719 ;;
 17720                           
 17721     115E                     _UART_ClearBuffer:	
 17722                           ;psect for function _UART_ClearBuffer
 17723                           
 17724                           
 17725                           ;mcc_generated_files/eusart1.c: 351:     eusart1RxHead = 0;
 17726                           
 17727                           ;incstack = 0
 17728                           ; Regs used in _UART_ClearBuffer: [status,2]
 17729     115E  01F3               	clrf	_eusart1RxHead	;volatile
 17730                           
 17731                           ;mcc_generated_files/eusart1.c: 352:     eusart1RxTail = 0;
 17732     115F  01F2               	clrf	_eusart1RxTail	;volatile
 17733                           
 17734                           ;mcc_generated_files/eusart1.c: 353:     eusart1RxCount = 0;
 17735     1160  01F1               	clrf	_eusart1RxCount	;volatile
 17736     1161  0008               	return
 17737     1162                     __end_of_UART_ClearBuffer:
 17738                           
 17739                           	psect	text64
 17740     138C                     __ptext64:	
 17741 ;; *************** function _SYSTEM_Initialize *****************
 17742 ;; Defined at:
 17743 ;;		line 50 in file "mcc_generated_files/mcc.c"
 17744 ;; Parameters:    Size  Location     Type
 17745 ;;		None
 17746 ;; Auto vars:     Size  Location     Type
 17747 ;;		None
 17748 ;; Return value:  Size  Location     Type
 17749 ;;                  1    wreg      void 
 17750 ;; Registers used:
 17751 ;;		wreg, status,2, status,0, pclath, cstack
 17752 ;; Tracked objects:
 17753 ;;		On entry : B3F/0
 17754 ;;		On exit  : 3F/4
 17755 ;;		Unchanged: 0/0
 17756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17761 ;;Total ram usage:        0 bytes
 17762 ;; Hardware stack levels used: 1
 17763 ;; Hardware stack levels required when called: 7
 17764 ;; This function calls:
 17765 ;;		_ADCC_Initialize
 17766 ;;		_EUSART1_Initialize
 17767 ;;		_FVR_Initialize
 17768 ;;		_I2C1_Initialize
 17769 ;;		_OSCILLATOR_Initialize
 17770 ;;		_PIN_MANAGER_Initialize
 17771 ;;		_PMD_Initialize
 17772 ;;		_TMR1_Initialize
 17773 ;; This function is called by:
 17774 ;;		_main
 17775 ;; This function uses a non-reentrant model
 17776 ;;
 17777                           
 17778     138C                     _SYSTEM_Initialize:	
 17779                           ;psect for function _SYSTEM_Initialize
 17780                           
 17781                           
 17782                           ;mcc_generated_files/mcc.c: 52:     PMD_Initialize();
 17783                           
 17784                           ;incstack = 0
 17785                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 17786     138C  3192  2208  3193   	fcall	_PMD_Initialize
 17787                           
 17788                           ;mcc_generated_files/mcc.c: 53:     I2C1_Initialize();
 17789     138F  3191  21CF  3193   	fcall	_I2C1_Initialize
 17790                           
 17791                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 17792     1392  3195  25DB  3193   	fcall	_PIN_MANAGER_Initialize
 17793                           
 17794                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 17795     1395  3191  21D8  3193   	fcall	_OSCILLATOR_Initialize
 17796                           
 17797                           ;mcc_generated_files/mcc.c: 56:     FVR_Initialize();
 17798     1398  3191  215A  3193   	fcall	_FVR_Initialize
 17799                           
 17800                           ;mcc_generated_files/mcc.c: 57:     ADCC_Initialize();
 17801     139B  3194  2458  3193   	fcall	_ADCC_Initialize
 17802                           
 17803                           ;mcc_generated_files/mcc.c: 58:     EUSART1_Initialize();
 17804     139E  3196  2689  3193   	fcall	_EUSART1_Initialize
 17805                           
 17806                           ;mcc_generated_files/mcc.c: 60:     TMR1_Initialize();
 17807     13A1  3194  24E3         	fcall	_TMR1_Initialize
 17808     13A3  0008               	return
 17809     13A4                     __end_of_SYSTEM_Initialize:
 17810                           
 17811                           	psect	text65
 17812     14E3                     __ptext65:	
 17813 ;; *************** function _TMR1_Initialize *****************
 17814 ;; Defined at:
 17815 ;;		line 69 in file "mcc_generated_files/tmr1.c"
 17816 ;; Parameters:    Size  Location     Type
 17817 ;;		None
 17818 ;; Auto vars:     Size  Location     Type
 17819 ;;		None
 17820 ;; Return value:  Size  Location     Type
 17821 ;;                  1    wreg      void 
 17822 ;; Registers used:
 17823 ;;		wreg, status,2, status,0, pclath, cstack
 17824 ;; Tracked objects:
 17825 ;;		On entry : 3F/E
 17826 ;;		On exit  : 3F/4
 17827 ;;		Unchanged: 0/0
 17828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17833 ;;Total ram usage:        0 bytes
 17834 ;; Hardware stack levels used: 1
 17835 ;; Hardware stack levels required when called: 6
 17836 ;; This function calls:
 17837 ;;		_TMR1_SetInterruptHandler
 17838 ;; This function is called by:
 17839 ;;		_SYSTEM_Initialize
 17840 ;; This function uses a non-reentrant model
 17841 ;;
 17842                           
 17843     14E3                     _TMR1_Initialize:	
 17844                           ;psect for function _TMR1_Initialize
 17845                           
 17846                           
 17847                           ;mcc_generated_files/tmr1.c: 74:     T1GCON = 0x00;
 17848                           
 17849                           ;incstack = 0
 17850                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 17851     14E3  0144               	movlb	4	; select bank4
 17852     14E4  018F               	clrf	15	;volatile
 17853                           
 17854                           ;mcc_generated_files/tmr1.c: 77:     T1GATE = 0x00;
 17855     14E5  0190               	clrf	16	;volatile
 17856                           
 17857                           ;mcc_generated_files/tmr1.c: 80:     T1CLK = 0x01;
 17858     14E6  3001               	movlw	1
 17859     14E7  0091               	movwf	17	;volatile
 17860                           
 17861                           ;mcc_generated_files/tmr1.c: 83:     TMR1H = 0xFE;
 17862     14E8  30FE               	movlw	254
 17863     14E9  008D               	movwf	13	;volatile
 17864                           
 17865                           ;mcc_generated_files/tmr1.c: 86:     TMR1L = 0xED;
 17866     14EA  30ED               	movlw	237
 17867     14EB  008C               	movwf	12	;volatile
 17868                           
 17869                           ;mcc_generated_files/tmr1.c: 89:     PIR4bits.TMR1IF = 0;
 17870     14EC  014E               	movlb	14	; select bank14
 17871     14ED  1010               	bcf	16,0	;volatile
 17872                           
 17873                           ;mcc_generated_files/tmr1.c: 92:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 17874     14EE  0144               	movlb	4	; select bank4
 17875     14EF  080D               	movf	13,w	;volatile
 17876     14F0  0142               	movlb	2	; select bank2
 17877     14F1  00DA               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
 17878     14F2  0144               	movlb	4	; select bank4
 17879     14F3  080C               	movf	12,w	;volatile
 17880     14F4  0142               	movlb	2	; select bank2
 17881     14F5  00D9               	movwf	_timer1ReloadVal^(0+256)	;volatile
 17882                           
 17883                           ;mcc_generated_files/tmr1.c: 95:     PIE4bits.TMR1IE = 1;
 17884     14F6  014E               	movlb	14	; select bank14
 17885     14F7  141A               	bsf	26,0	;volatile
 17886                           
 17887                           ;mcc_generated_files/tmr1.c: 98:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
 17888     14F8  303D               	movlw	low _TMR1_DefaultInterruptHandler
 17889     14F9  0140               	movlb	0	; select bank0
 17890     14FA  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 17891     14FB  3012               	movlw	high _TMR1_DefaultInterruptHandler
 17892     14FC  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 17893     14FD  3191  21C7         	fcall	_TMR1_SetInterruptHandler
 17894                           
 17895                           ;mcc_generated_files/tmr1.c: 101:     T1CON = 0x01;
 17896     14FF  3001               	movlw	1
 17897     1500  0144               	movlb	4	; select bank4
 17898     1501  008E               	movwf	14	;volatile
 17899     1502  0008               	return
 17900     1503                     __end_of_TMR1_Initialize:
 17901                           
 17902                           	psect	text66
 17903     11C7                     __ptext66:	
 17904 ;; *************** function _TMR1_SetInterruptHandler *****************
 17905 ;; Defined at:
 17906 ;;		line 183 in file "mcc_generated_files/tmr1.c"
 17907 ;; Parameters:    Size  Location     Type
 17908 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 17909 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 17910 ;; Auto vars:     Size  Location     Type
 17911 ;;		None
 17912 ;; Return value:  Size  Location     Type
 17913 ;;                  1    wreg      void 
 17914 ;; Registers used:
 17915 ;;		wreg
 17916 ;; Tracked objects:
 17917 ;;		On entry : 3F/0
 17918 ;;		On exit  : 3F/2
 17919 ;;		Unchanged: 0/0
 17920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17921 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17924 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17925 ;;Total ram usage:        2 bytes
 17926 ;; Hardware stack levels used: 1
 17927 ;; Hardware stack levels required when called: 5
 17928 ;; This function calls:
 17929 ;;		Nothing
 17930 ;; This function is called by:
 17931 ;;		_TMR1_Initialize
 17932 ;; This function uses a non-reentrant model
 17933 ;;
 17934                           
 17935     11C7                     _TMR1_SetInterruptHandler:	
 17936                           ;psect for function _TMR1_SetInterruptHandler
 17937                           
 17938                           
 17939                           ;mcc_generated_files/tmr1.c: 184:     TMR1_InterruptHandler = InterruptHandler;
 17940                           
 17941                           ;incstack = 0
 17942                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 17943     11C7  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 17944     11C8  0142               	movlb	2	; select bank2
 17945     11C9  00EB               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
 17946     11CA  0140               	movlb	0	; select bank0
 17947     11CB  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 17948     11CC  0142               	movlb	2	; select bank2
 17949     11CD  00EA               	movwf	_TMR1_InterruptHandler^(0+256)
 17950     11CE  0008               	return
 17951     11CF                     __end_of_TMR1_SetInterruptHandler:
 17952                           
 17953                           	psect	text67
 17954     1208                     __ptext67:	
 17955 ;; *************** function _PMD_Initialize *****************
 17956 ;; Defined at:
 17957 ;;		line 77 in file "mcc_generated_files/mcc.c"
 17958 ;; Parameters:    Size  Location     Type
 17959 ;;		None
 17960 ;; Auto vars:     Size  Location     Type
 17961 ;;		None
 17962 ;; Return value:  Size  Location     Type
 17963 ;;                  1    wreg      void 
 17964 ;; Registers used:
 17965 ;;		status,2
 17966 ;; Tracked objects:
 17967 ;;		On entry : B3F/0
 17968 ;;		On exit  : B3F/F
 17969 ;;		Unchanged: B00/0
 17970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17975 ;;Total ram usage:        0 bytes
 17976 ;; Hardware stack levels used: 1
 17977 ;; Hardware stack levels required when called: 5
 17978 ;; This function calls:
 17979 ;;		Nothing
 17980 ;; This function is called by:
 17981 ;;		_SYSTEM_Initialize
 17982 ;; This function uses a non-reentrant model
 17983 ;;
 17984                           
 17985     1208                     _PMD_Initialize:	
 17986                           ;psect for function _PMD_Initialize
 17987                           
 17988                           
 17989                           ;mcc_generated_files/mcc.c: 80:     PMD0 = 0x00;
 17990                           
 17991                           ;incstack = 0
 17992                           ; Regs used in _PMD_Initialize: [status,2]
 17993     1208  014F               	movlb	15	; select bank15
 17994     1209  0196               	clrf	22	;volatile
 17995                           
 17996                           ;mcc_generated_files/mcc.c: 82:     PMD1 = 0x00;
 17997     120A  0197               	clrf	23	;volatile
 17998                           
 17999                           ;mcc_generated_files/mcc.c: 84:     PMD2 = 0x00;
 18000     120B  0198               	clrf	24	;volatile
 18001                           
 18002                           ;mcc_generated_files/mcc.c: 86:     PMD3 = 0x00;
 18003     120C  0199               	clrf	25	;volatile
 18004                           
 18005                           ;mcc_generated_files/mcc.c: 88:     PMD4 = 0x00;
 18006     120D  019A               	clrf	26	;volatile
 18007                           
 18008                           ;mcc_generated_files/mcc.c: 90:     PMD5 = 0x00;
 18009     120E  019B               	clrf	27	;volatile
 18010                           
 18011                           ;mcc_generated_files/mcc.c: 92:     PMD6 = 0x00;
 18012     120F  019C               	clrf	28	;volatile
 18013                           
 18014                           ;mcc_generated_files/mcc.c: 94:     PMD7 = 0x00;
 18015     1210  019D               	clrf	29	;volatile
 18016     1211  0008               	return
 18017     1212                     __end_of_PMD_Initialize:
 18018                           
 18019                           	psect	text68
 18020     15DB                     __ptext68:	
 18021 ;; *************** function _PIN_MANAGER_Initialize *****************
 18022 ;; Defined at:
 18023 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 18024 ;; Parameters:    Size  Location     Type
 18025 ;;		None
 18026 ;; Auto vars:     Size  Location     Type
 18027 ;;		None
 18028 ;; Return value:  Size  Location     Type
 18029 ;;                  1    wreg      void 
 18030 ;; Registers used:
 18031 ;;		status,2
 18032 ;; Tracked objects:
 18033 ;;		On entry : B3F/3
 18034 ;;		On exit  : B3F/3D
 18035 ;;		Unchanged: B00/0
 18036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18041 ;;Total ram usage:        0 bytes
 18042 ;; Hardware stack levels used: 1
 18043 ;; Hardware stack levels required when called: 5
 18044 ;; This function calls:
 18045 ;;		Nothing
 18046 ;; This function is called by:
 18047 ;;		_SYSTEM_Initialize
 18048 ;; This function uses a non-reentrant model
 18049 ;;
 18050                           
 18051     15DB                     _PIN_MANAGER_Initialize:	
 18052                           ;psect for function _PIN_MANAGER_Initialize
 18053                           
 18054                           
 18055                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 18056                           
 18057                           ;incstack = 0
 18058                           ; Regs used in _PIN_MANAGER_Initialize: [status,2]
 18059     15DB  0140               	movlb	0	; select bank0
 18060     15DC  0198               	clrf	24	;volatile
 18061                           
 18062                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
 18063     15DD  019A               	clrf	26	;volatile
 18064                           
 18065                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x3F;
 18066     15DE  303F               	movlw	63
 18067     15DF  0092               	movwf	18	;volatile
 18068                           
 18069                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x27;
 18070     15E0  3027               	movlw	39
 18071     15E1  0094               	movwf	20	;volatile
 18072                           
 18073                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x1C;
 18074     15E2  301C               	movlw	28
 18075     15E3  017E               	movlb	62	; select bank62
 18076     15E4  00CE               	movwf	78	;volatile
 18077                           
 18078                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x37;
 18079     15E5  3037               	movlw	55
 18080     15E6  00B8               	movwf	56	;volatile
 18081                           
 18082                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
 18083     15E7  01B9               	clrf	57	;volatile
 18084                           
 18085                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
 18086     15E8  01CF               	clrf	79	;volatile
 18087                           
 18088                           ;mcc_generated_files/pin_manager.c: 84:     ODCONA = 0x00;
 18089     15E9  01BA               	clrf	58	;volatile
 18090                           
 18091                           ;mcc_generated_files/pin_manager.c: 85:     ODCONC = 0x00;
 18092     15EA  01D0               	clrf	80	;volatile
 18093                           
 18094                           ;mcc_generated_files/pin_manager.c: 90:     SLRCONA = 0x37;
 18095     15EB  3037               	movlw	55
 18096     15EC  00BB               	movwf	59	;volatile
 18097                           
 18098                           ;mcc_generated_files/pin_manager.c: 91:     SLRCONC = 0x3F;
 18099     15ED  303F               	movlw	63
 18100     15EE  00D1               	movwf	81	;volatile
 18101                           
 18102                           ;mcc_generated_files/pin_manager.c: 96:     INLVLA = 0x3F;
 18103     15EF  303F               	movlw	63
 18104     15F0  00BC               	movwf	60	;volatile
 18105                           
 18106                           ;mcc_generated_files/pin_manager.c: 97:     INLVLC = 0x3F;
 18107     15F1  303F               	movlw	63
 18108     15F2  00D2               	movwf	82	;volatile
 18109                           
 18110                           ;mcc_generated_files/pin_manager.c: 106:     RC0PPS = 0x13;
 18111     15F3  3013               	movlw	19
 18112     15F4  00A0               	movwf	32	;volatile
 18113                           
 18114                           ;mcc_generated_files/pin_manager.c: 107:     SSP1CLKPPS = 0x10;
 18115     15F5  3010               	movlw	16
 18116     15F6  017D               	movlb	61	; select bank61
 18117     15F7  00C5               	movwf	69	;volatile
 18118                           
 18119                           ;mcc_generated_files/pin_manager.c: 108:     RC1PPS = 0x14;
 18120     15F8  3014               	movlw	20
 18121     15F9  017E               	movlb	62	; select bank62
 18122     15FA  00A1               	movwf	33	;volatile
 18123                           
 18124                           ;mcc_generated_files/pin_manager.c: 109:     RC4PPS = 0x0F;
 18125     15FB  300F               	movlw	15
 18126     15FC  00A4               	movwf	36	;volatile
 18127                           
 18128                           ;mcc_generated_files/pin_manager.c: 110:     SSP1DATPPS = 0x11;
 18129     15FD  3011               	movlw	17
 18130     15FE  017D               	movlb	61	; select bank61
 18131     15FF  00C6               	movwf	70	;volatile
 18132                           
 18133                           ;mcc_generated_files/pin_manager.c: 111:     RX1DTPPS = 0x15;
 18134     1600  3015               	movlw	21
 18135     1601  00CB               	movwf	75	;volatile
 18136     1602  0008               	return
 18137     1603                     __end_of_PIN_MANAGER_Initialize:
 18138                           
 18139                           	psect	text69
 18140     11D8                     __ptext69:	
 18141 ;; *************** function _OSCILLATOR_Initialize *****************
 18142 ;; Defined at:
 18143 ;;		line 63 in file "mcc_generated_files/mcc.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;		None
 18146 ;; Auto vars:     Size  Location     Type
 18147 ;;		None
 18148 ;; Return value:  Size  Location     Type
 18149 ;;                  1    wreg      void 
 18150 ;; Registers used:
 18151 ;;		status,2
 18152 ;; Tracked objects:
 18153 ;;		On entry : B3F/3D
 18154 ;;		On exit  : B3F/11
 18155 ;;		Unchanged: B00/0
 18156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18161 ;;Total ram usage:        0 bytes
 18162 ;; Hardware stack levels used: 1
 18163 ;; Hardware stack levels required when called: 5
 18164 ;; This function calls:
 18165 ;;		Nothing
 18166 ;; This function is called by:
 18167 ;;		_SYSTEM_Initialize
 18168 ;; This function uses a non-reentrant model
 18169 ;;
 18170                           
 18171     11D8                     _OSCILLATOR_Initialize:	
 18172                           ;psect for function _OSCILLATOR_Initialize
 18173                           
 18174                           
 18175                           ;mcc_generated_files/mcc.c: 66:     OSCCON1 = 0x62;
 18176                           
 18177                           ;incstack = 0
 18178                           ; Regs used in _OSCILLATOR_Initialize: [status,2]
 18179     11D8  3062               	movlw	98
 18180     11D9  0151               	movlb	17	; select bank17
 18181     11DA  008D               	movwf	13	;volatile
 18182                           
 18183                           ;mcc_generated_files/mcc.c: 68:     OSCCON3 = 0x00;
 18184     11DB  018F               	clrf	15	;volatile
 18185                           
 18186                           ;mcc_generated_files/mcc.c: 70:     OSCEN = 0x00;
 18187     11DC  0191               	clrf	17	;volatile
 18188                           
 18189                           ;mcc_generated_files/mcc.c: 72:     OSCFRQ = 0x02;
 18190     11DD  3002               	movlw	2
 18191     11DE  0093               	movwf	19	;volatile
 18192                           
 18193                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
 18194     11DF  0192               	clrf	18	;volatile
 18195     11E0  0008               	return
 18196     11E1                     __end_of_OSCILLATOR_Initialize:
 18197                           
 18198                           	psect	text70
 18199     11CF                     __ptext70:	
 18200 ;; *************** function _I2C1_Initialize *****************
 18201 ;; Defined at:
 18202 ;;		line 167 in file "mcc_generated_files/i2c1_master.c"
 18203 ;; Parameters:    Size  Location     Type
 18204 ;;		None
 18205 ;; Auto vars:     Size  Location     Type
 18206 ;;		None
 18207 ;; Return value:  Size  Location     Type
 18208 ;;                  1    wreg      void 
 18209 ;; Registers used:
 18210 ;;		status,2
 18211 ;; Tracked objects:
 18212 ;;		On entry : B3F/F
 18213 ;;		On exit  : B3F/3
 18214 ;;		Unchanged: B00/0
 18215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18220 ;;Total ram usage:        0 bytes
 18221 ;; Hardware stack levels used: 1
 18222 ;; Hardware stack levels required when called: 5
 18223 ;; This function calls:
 18224 ;;		Nothing
 18225 ;; This function is called by:
 18226 ;;		_SYSTEM_Initialize
 18227 ;; This function uses a non-reentrant model
 18228 ;;
 18229                           
 18230     11CF                     _I2C1_Initialize:	
 18231                           ;psect for function _I2C1_Initialize
 18232                           
 18233                           
 18234                           ;mcc_generated_files/i2c1_master.c: 169:     SSP1STAT = 0x00;
 18235                           
 18236                           ;incstack = 0
 18237                           ; Regs used in _I2C1_Initialize: [status,2]
 18238     11CF  0143               	movlb	3	; select bank3
 18239     11D0  018F               	clrf	15	;volatile
 18240                           
 18241                           ;mcc_generated_files/i2c1_master.c: 170:     SSP1CON1 = 0x08;
 18242     11D1  3008               	movlw	8
 18243     11D2  0090               	movwf	16	;volatile
 18244                           
 18245                           ;mcc_generated_files/i2c1_master.c: 171:     SSP1CON2 = 0x00;
 18246     11D3  0191               	clrf	17	;volatile
 18247                           
 18248                           ;mcc_generated_files/i2c1_master.c: 172:     SSP1ADD = 0x03;
 18249     11D4  3003               	movlw	3
 18250     11D5  008D               	movwf	13	;volatile
 18251                           
 18252                           ;mcc_generated_files/i2c1_master.c: 173:     SSP1CON1bits.SSPEN = 0;
 18253     11D6  1290               	bcf	16,5	;volatile
 18254     11D7  0008               	return
 18255     11D8                     __end_of_I2C1_Initialize:
 18256                           
 18257                           	psect	text71
 18258     115A                     __ptext71:	
 18259 ;; *************** function _FVR_Initialize *****************
 18260 ;; Defined at:
 18261 ;;		line 58 in file "mcc_generated_files/fvr.c"
 18262 ;; Parameters:    Size  Location     Type
 18263 ;;		None
 18264 ;; Auto vars:     Size  Location     Type
 18265 ;;		None
 18266 ;; Return value:  Size  Location     Type
 18267 ;;                  1    wreg      void 
 18268 ;; Registers used:
 18269 ;;		None
 18270 ;; Tracked objects:
 18271 ;;		On entry : B3F/11
 18272 ;;		On exit  : B3F/12
 18273 ;;		Unchanged: B00/0
 18274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;Total ram usage:        0 bytes
 18280 ;; Hardware stack levels used: 1
 18281 ;; Hardware stack levels required when called: 5
 18282 ;; This function calls:
 18283 ;;		Nothing
 18284 ;; This function is called by:
 18285 ;;		_SYSTEM_Initialize
 18286 ;; This function uses a non-reentrant model
 18287 ;;
 18288                           
 18289     115A                     _FVR_Initialize:	
 18290                           ;psect for function _FVR_Initialize
 18291                           
 18292                           
 18293                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x82;
 18294                           
 18295                           ;incstack = 0
 18296                           ; Regs used in _FVR_Initialize: []
 18297     115A  3082               	movlw	130
 18298     115B  0152               	movlb	18	; select bank18
 18299     115C  008C               	movwf	12	;volatile
 18300     115D  0008               	return
 18301     115E                     __end_of_FVR_Initialize:
 18302                           
 18303                           	psect	text72
 18304     1689                     __ptext72:	
 18305 ;; *************** function _EUSART1_Initialize *****************
 18306 ;; Defined at:
 18307 ;;		line 177 in file "mcc_generated_files/eusart1.c"
 18308 ;; Parameters:    Size  Location     Type
 18309 ;;		None
 18310 ;; Auto vars:     Size  Location     Type
 18311 ;;		None
 18312 ;; Return value:  Size  Location     Type
 18313 ;;                  1    wreg      void 
 18314 ;; Registers used:
 18315 ;;		wreg, status,2, status,0, pclath, cstack
 18316 ;; Tracked objects:
 18317 ;;		On entry : B3F/2
 18318 ;;		On exit  : 3F/E
 18319 ;;		Unchanged: 0/0
 18320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18325 ;;Total ram usage:        0 bytes
 18326 ;; Hardware stack levels used: 1
 18327 ;; Hardware stack levels required when called: 6
 18328 ;; This function calls:
 18329 ;;		_EUSART1_SetErrorHandler
 18330 ;;		_EUSART1_SetFramingErrorHandler
 18331 ;;		_EUSART1_SetOverrunErrorHandler
 18332 ;;		_EUSART1_SetRxInterruptHandler
 18333 ;; This function is called by:
 18334 ;;		_SYSTEM_Initialize
 18335 ;; This function uses a non-reentrant model
 18336 ;;
 18337                           
 18338     1689                     _EUSART1_Initialize:	
 18339                           ;psect for function _EUSART1_Initialize
 18340                           
 18341                           
 18342                           ;mcc_generated_files/eusart1.c: 180:     PIE3bits.RC1IE = 0;
 18343                           
 18344                           ;incstack = 0
 18345                           ; Regs used in _EUSART1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 18346     1689  014E               	movlb	14	; select bank14
 18347     168A  1299               	bcf	25,5	;volatile
 18348                           
 18349                           ;mcc_generated_files/eusart1.c: 181:     EUSART1_SetRxInterruptHandler(EUSART1_Receive_I
      +                          SR);
 18350     168B  30BA               	movlw	low _EUSART1_Receive_ISR
 18351     168C  0140               	movlb	0	; select bank0
 18352     168D  00A0               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler
 18353     168E  3016               	movlw	high _EUSART1_Receive_ISR
 18354     168F  00A1               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler+1
 18355     1690  3191  21BF  3196   	fcall	_EUSART1_SetRxInterruptHandler
 18356                           
 18357                           ;mcc_generated_files/eusart1.c: 185:     BAUD1CON = 0x08;
 18358     1693  3008               	movlw	8
 18359     1694  009F               	movwf	31	;volatile
 18360                           
 18361                           ;mcc_generated_files/eusart1.c: 188:     RC1STA = 0x90;
 18362     1695  3090               	movlw	144
 18363     1696  009D               	movwf	29	;volatile
 18364                           
 18365                           ;mcc_generated_files/eusart1.c: 191:     TX1STA = 0x24;
 18366     1697  3024               	movlw	36
 18367     1698  009E               	movwf	30	;volatile
 18368                           
 18369                           ;mcc_generated_files/eusart1.c: 194:     SP1BRGL = 0x19;
 18370     1699  3019               	movlw	25
 18371     169A  009B               	movwf	27	;volatile
 18372                           
 18373                           ;mcc_generated_files/eusart1.c: 197:     SP1BRGH = 0x00;
 18374     169B  019C               	clrf	28	;volatile
 18375                           
 18376                           ;mcc_generated_files/eusart1.c: 203:     EUSART1_SetFramingErrorHandler(EUSART1_DefaultF
      +                          ramingErrorHandler);
 18377     169C  30FA               	movlw	low _EUSART1_DefaultFramingErrorHandler
 18378     169D  0140               	movlb	0	; select bank0
 18379     169E  00A0               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler
 18380     169F  3010               	movlw	high _EUSART1_DefaultFramingErrorHandler
 18381     16A0  00A1               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler+1
 18382     16A1  3191  21AF  3196   	fcall	_EUSART1_SetFramingErrorHandler
 18383                           
 18384                           ;mcc_generated_files/eusart1.c: 204:     EUSART1_SetOverrunErrorHandler(EUSART1_DefaultO
      +                          verrunErrorHandler);
 18385     16A4  3026               	movlw	low _EUSART1_DefaultOverrunErrorHandler
 18386     16A5  0140               	movlb	0	; select bank0
 18387     16A6  00A0               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler
 18388     16A7  3011               	movlw	high _EUSART1_DefaultOverrunErrorHandler
 18389     16A8  00A1               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler+1
 18390     16A9  3191  21B7  3196   	fcall	_EUSART1_SetOverrunErrorHandler
 18391                           
 18392                           ;mcc_generated_files/eusart1.c: 205:     EUSART1_SetErrorHandler(EUSART1_DefaultErrorHan
      +                          dler);
 18393     16AC  3008               	movlw	low _EUSART1_DefaultErrorHandler
 18394     16AD  0140               	movlb	0	; select bank0
 18395     16AE  00A0               	movwf	EUSART1_SetErrorHandler@interruptHandler
 18396     16AF  3011               	movlw	high _EUSART1_DefaultErrorHandler
 18397     16B0  00A1               	movwf	EUSART1_SetErrorHandler@interruptHandler+1
 18398     16B1  3191  21A7         	fcall	_EUSART1_SetErrorHandler
 18399                           
 18400                           ;mcc_generated_files/eusart1.c: 207:     eusart1RxLastError.status = 0;
 18401     16B3  01F0               	clrf	_eusart1RxLastError	;volatile
 18402                           
 18403                           ;mcc_generated_files/eusart1.c: 210:     eusart1RxHead = 0;
 18404     16B4  01F3               	clrf	_eusart1RxHead	;volatile
 18405                           
 18406                           ;mcc_generated_files/eusart1.c: 211:     eusart1RxTail = 0;
 18407     16B5  01F2               	clrf	_eusart1RxTail	;volatile
 18408                           
 18409                           ;mcc_generated_files/eusart1.c: 212:     eusart1RxCount = 0;
 18410     16B6  01F1               	clrf	_eusart1RxCount	;volatile
 18411                           
 18412                           ;mcc_generated_files/eusart1.c: 215:     PIE3bits.RC1IE = 1;
 18413     16B7  014E               	movlb	14	; select bank14
 18414     16B8  1699               	bsf	25,5	;volatile
 18415     16B9  0008               	return
 18416     16BA                     __end_of_EUSART1_Initialize:
 18417                           
 18418                           	psect	text73
 18419     11BF                     __ptext73:	
 18420 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
 18421 ;; Defined at:
 18422 ;;		line 346 in file "mcc_generated_files/eusart1.c"
 18423 ;; Parameters:    Size  Location     Type
 18424 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 18425 ;;		 -> EUSART1_Receive_ISR(1), 
 18426 ;; Auto vars:     Size  Location     Type
 18427 ;;		None
 18428 ;; Return value:  Size  Location     Type
 18429 ;;                  1    wreg      void 
 18430 ;; Registers used:
 18431 ;;		wreg
 18432 ;; Tracked objects:
 18433 ;;		On entry : B3F/0
 18434 ;;		On exit  : B3F/2
 18435 ;;		Unchanged: B00/0
 18436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18437 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18440 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18441 ;;Total ram usage:        2 bytes
 18442 ;; Hardware stack levels used: 1
 18443 ;; Hardware stack levels required when called: 5
 18444 ;; This function calls:
 18445 ;;		Nothing
 18446 ;; This function is called by:
 18447 ;;		_EUSART1_Initialize
 18448 ;; This function uses a non-reentrant model
 18449 ;;
 18450                           
 18451     11BF                     _EUSART1_SetRxInterruptHandler:	
 18452                           ;psect for function _EUSART1_SetRxInterruptHandler
 18453                           
 18454                           
 18455                           ;mcc_generated_files/eusart1.c: 347:     EUSART1_RxDefaultInterruptHandler = interruptHa
      +                          ndler;
 18456                           
 18457                           ;incstack = 0
 18458                           ; Regs used in _EUSART1_SetRxInterruptHandler: [wreg]
 18459     11BF  0821               	movf	EUSART1_SetRxInterruptHandler@interruptHandler+1,w
 18460     11C0  0142               	movlb	2	; select bank2
 18461     11C1  00ED               	movwf	(_EUSART1_RxDefaultInterruptHandler+1)^(0+256)
 18462     11C2  0140               	movlb	0	; select bank0
 18463     11C3  0820               	movf	EUSART1_SetRxInterruptHandler@interruptHandler,w
 18464     11C4  0142               	movlb	2	; select bank2
 18465     11C5  00EC               	movwf	_EUSART1_RxDefaultInterruptHandler^(0+256)
 18466     11C6  0008               	return
 18467     11C7                     __end_of_EUSART1_SetRxInterruptHandler:
 18468                           
 18469                           	psect	text74
 18470     11B7                     __ptext74:	
 18471 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
 18472 ;; Defined at:
 18473 ;;		line 337 in file "mcc_generated_files/eusart1.c"
 18474 ;; Parameters:    Size  Location     Type
 18475 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 18476 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
 18477 ;; Auto vars:     Size  Location     Type
 18478 ;;		None
 18479 ;; Return value:  Size  Location     Type
 18480 ;;                  1    wreg      void 
 18481 ;; Registers used:
 18482 ;;		wreg
 18483 ;; Tracked objects:
 18484 ;;		On entry : B3F/0
 18485 ;;		On exit  : B3F/4
 18486 ;;		Unchanged: B00/0
 18487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18488 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18491 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18492 ;;Total ram usage:        2 bytes
 18493 ;; Hardware stack levels used: 1
 18494 ;; Hardware stack levels required when called: 5
 18495 ;; This function calls:
 18496 ;;		Nothing
 18497 ;; This function is called by:
 18498 ;;		_EUSART1_Initialize
 18499 ;; This function uses a non-reentrant model
 18500 ;;
 18501                           
 18502     11B7                     _EUSART1_SetOverrunErrorHandler:	
 18503                           ;psect for function _EUSART1_SetOverrunErrorHandler
 18504                           
 18505                           
 18506                           ;mcc_generated_files/eusart1.c: 338:     EUSART1_OverrunErrorHandler = interruptHandler;
 18507                           
 18508                           ;incstack = 0
 18509                           ; Regs used in _EUSART1_SetOverrunErrorHandler: [wreg]
 18510     11B7  0821               	movf	EUSART1_SetOverrunErrorHandler@interruptHandler+1,w
 18511     11B8  0144               	movlb	4	; select bank4
 18512     11B9  00EA               	movwf	(_EUSART1_OverrunErrorHandler+1)^(0+512)
 18513     11BA  0140               	movlb	0	; select bank0
 18514     11BB  0820               	movf	EUSART1_SetOverrunErrorHandler@interruptHandler,w
 18515     11BC  0144               	movlb	4	; select bank4
 18516     11BD  00E9               	movwf	_EUSART1_OverrunErrorHandler^(0+512)
 18517     11BE  0008               	return
 18518     11BF                     __end_of_EUSART1_SetOverrunErrorHandler:
 18519                           
 18520                           	psect	text75
 18521     11AF                     __ptext75:	
 18522 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
 18523 ;; Defined at:
 18524 ;;		line 333 in file "mcc_generated_files/eusart1.c"
 18525 ;; Parameters:    Size  Location     Type
 18526 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 18527 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
 18528 ;; Auto vars:     Size  Location     Type
 18529 ;;		None
 18530 ;; Return value:  Size  Location     Type
 18531 ;;                  1    wreg      void 
 18532 ;; Registers used:
 18533 ;;		wreg
 18534 ;; Tracked objects:
 18535 ;;		On entry : B3F/0
 18536 ;;		On exit  : B3F/3
 18537 ;;		Unchanged: B00/0
 18538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18543 ;;Total ram usage:        2 bytes
 18544 ;; Hardware stack levels used: 1
 18545 ;; Hardware stack levels required when called: 5
 18546 ;; This function calls:
 18547 ;;		Nothing
 18548 ;; This function is called by:
 18549 ;;		_EUSART1_Initialize
 18550 ;; This function uses a non-reentrant model
 18551 ;;
 18552                           
 18553     11AF                     _EUSART1_SetFramingErrorHandler:	
 18554                           ;psect for function _EUSART1_SetFramingErrorHandler
 18555                           
 18556                           
 18557                           ;mcc_generated_files/eusart1.c: 334:     EUSART1_FramingErrorHandler = interruptHandler;
 18558                           
 18559                           ;incstack = 0
 18560                           ; Regs used in _EUSART1_SetFramingErrorHandler: [wreg]
 18561     11AF  0821               	movf	EUSART1_SetFramingErrorHandler@interruptHandler+1,w
 18562     11B0  0143               	movlb	3	; select bank3
 18563     11B1  00A8               	movwf	(_EUSART1_FramingErrorHandler+1)^(0+384)
 18564     11B2  0140               	movlb	0	; select bank0
 18565     11B3  0820               	movf	EUSART1_SetFramingErrorHandler@interruptHandler,w
 18566     11B4  0143               	movlb	3	; select bank3
 18567     11B5  00A7               	movwf	_EUSART1_FramingErrorHandler^(0+384)
 18568     11B6  0008               	return
 18569     11B7                     __end_of_EUSART1_SetFramingErrorHandler:
 18570                           
 18571                           	psect	text76
 18572     11A7                     __ptext76:	
 18573 ;; *************** function _EUSART1_SetErrorHandler *****************
 18574 ;; Defined at:
 18575 ;;		line 341 in file "mcc_generated_files/eusart1.c"
 18576 ;; Parameters:    Size  Location     Type
 18577 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 18578 ;;		 -> EUSART1_DefaultErrorHandler(1), 
 18579 ;; Auto vars:     Size  Location     Type
 18580 ;;		None
 18581 ;; Return value:  Size  Location     Type
 18582 ;;                  1    wreg      void 
 18583 ;; Registers used:
 18584 ;;		wreg
 18585 ;; Tracked objects:
 18586 ;;		On entry : B3F/0
 18587 ;;		On exit  : B3F/4
 18588 ;;		Unchanged: B00/0
 18589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18590 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18593 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18594 ;;Total ram usage:        2 bytes
 18595 ;; Hardware stack levels used: 1
 18596 ;; Hardware stack levels required when called: 5
 18597 ;; This function calls:
 18598 ;;		Nothing
 18599 ;; This function is called by:
 18600 ;;		_EUSART1_Initialize
 18601 ;; This function uses a non-reentrant model
 18602 ;;
 18603                           
 18604     11A7                     _EUSART1_SetErrorHandler:	
 18605                           ;psect for function _EUSART1_SetErrorHandler
 18606                           
 18607                           
 18608                           ;mcc_generated_files/eusart1.c: 342:     EUSART1_ErrorHandler = interruptHandler;
 18609                           
 18610                           ;incstack = 0
 18611                           ; Regs used in _EUSART1_SetErrorHandler: [wreg]
 18612     11A7  0821               	movf	EUSART1_SetErrorHandler@interruptHandler+1,w
 18613     11A8  0144               	movlb	4	; select bank4
 18614     11A9  00E8               	movwf	(_EUSART1_ErrorHandler+1)^(0+512)
 18615     11AA  0140               	movlb	0	; select bank0
 18616     11AB  0820               	movf	EUSART1_SetErrorHandler@interruptHandler,w
 18617     11AC  0144               	movlb	4	; select bank4
 18618     11AD  00E7               	movwf	_EUSART1_ErrorHandler^(0+512)
 18619     11AE  0008               	return
 18620     11AF                     __end_of_EUSART1_SetErrorHandler:
 18621                           
 18622                           	psect	text77
 18623     1458                     __ptext77:	
 18624 ;; *************** function _ADCC_Initialize *****************
 18625 ;; Defined at:
 18626 ;;		line 63 in file "mcc_generated_files/adcc.c"
 18627 ;; Parameters:    Size  Location     Type
 18628 ;;		None
 18629 ;; Auto vars:     Size  Location     Type
 18630 ;;		None
 18631 ;; Return value:  Size  Location     Type
 18632 ;;                  1    wreg      void 
 18633 ;; Registers used:
 18634 ;;		status,2
 18635 ;; Tracked objects:
 18636 ;;		On entry : B3F/12
 18637 ;;		On exit  : B3F/2
 18638 ;;		Unchanged: B00/0
 18639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18644 ;;Total ram usage:        0 bytes
 18645 ;; Hardware stack levels used: 1
 18646 ;; Hardware stack levels required when called: 5
 18647 ;; This function calls:
 18648 ;;		Nothing
 18649 ;; This function is called by:
 18650 ;;		_SYSTEM_Initialize
 18651 ;; This function uses a non-reentrant model
 18652 ;;
 18653                           
 18654     1458                     _ADCC_Initialize:	
 18655                           ;psect for function _ADCC_Initialize
 18656                           
 18657                           
 18658                           ;mcc_generated_files/adcc.c: 67:     ADLTHL = 0x00;
 18659                           
 18660                           ;incstack = 0
 18661                           ; Regs used in _ADCC_Initialize: [status,2]
 18662     1458  0141               	movlb	1	; select bank1
 18663     1459  018C               	clrf	12	;volatile
 18664                           
 18665                           ;mcc_generated_files/adcc.c: 69:     ADLTHH = 0x00;
 18666     145A  018D               	clrf	13	;volatile
 18667                           
 18668                           ;mcc_generated_files/adcc.c: 71:     ADUTHL = 0x00;
 18669     145B  018E               	clrf	14	;volatile
 18670                           
 18671                           ;mcc_generated_files/adcc.c: 73:     ADUTHH = 0x00;
 18672     145C  018F               	clrf	15	;volatile
 18673                           
 18674                           ;mcc_generated_files/adcc.c: 75:     ADSTPTL = 0x00;
 18675     145D  0192               	clrf	18	;volatile
 18676                           
 18677                           ;mcc_generated_files/adcc.c: 77:     ADSTPTH = 0x00;
 18678     145E  0193               	clrf	19	;volatile
 18679                           
 18680                           ;mcc_generated_files/adcc.c: 79:     ADACCU = 0x00;
 18681     145F  0198               	clrf	24	;volatile
 18682                           
 18683                           ;mcc_generated_files/adcc.c: 81:     ADRPT = 0x00;
 18684     1460  019A               	clrf	26	;volatile
 18685                           
 18686                           ;mcc_generated_files/adcc.c: 83:     ADPCH = 0x00;
 18687     1461  019F               	clrf	31	;volatile
 18688                           
 18689                           ;mcc_generated_files/adcc.c: 85:     ADACQL = 0x00;
 18690     1462  0142               	movlb	2	; select bank2
 18691     1463  018C               	clrf	12	;volatile
 18692                           
 18693                           ;mcc_generated_files/adcc.c: 87:     ADACQH = 0x00;
 18694     1464  018D               	clrf	13	;volatile
 18695                           
 18696                           ;mcc_generated_files/adcc.c: 89:     ADCAP = 0x00;
 18697     1465  018E               	clrf	14	;volatile
 18698                           
 18699                           ;mcc_generated_files/adcc.c: 91:     ADPREL = 0x00;
 18700     1466  018F               	clrf	15	;volatile
 18701                           
 18702                           ;mcc_generated_files/adcc.c: 93:     ADPREH = 0x00;
 18703     1467  0190               	clrf	16	;volatile
 18704                           
 18705                           ;mcc_generated_files/adcc.c: 95:     ADCON1 = 0x00;
 18706     1468  0192               	clrf	18	;volatile
 18707                           
 18708                           ;mcc_generated_files/adcc.c: 97:     ADCON2 = 0x02;
 18709     1469  3002               	movlw	2
 18710     146A  0093               	movwf	19	;volatile
 18711                           
 18712                           ;mcc_generated_files/adcc.c: 99:     ADCON3 = 0x00;
 18713     146B  0194               	clrf	20	;volatile
 18714                           
 18715                           ;mcc_generated_files/adcc.c: 101:     ADSTAT = 0x00;
 18716     146C  0195               	clrf	21	;volatile
 18717                           
 18718                           ;mcc_generated_files/adcc.c: 103:     ADREF = 0x00;
 18719     146D  0196               	clrf	22	;volatile
 18720                           
 18721                           ;mcc_generated_files/adcc.c: 105:     ADACT = 0x00;
 18722     146E  0197               	clrf	23	;volatile
 18723                           
 18724                           ;mcc_generated_files/adcc.c: 107:     ADCLK = 0x00;
 18725     146F  0198               	clrf	24	;volatile
 18726                           
 18727                           ;mcc_generated_files/adcc.c: 109:     ADCON0 = 0x84;
 18728     1470  3084               	movlw	132
 18729     1471  0091               	movwf	17	;volatile
 18730     1472  0008               	return
 18731     1473                     __end_of_ADCC_Initialize:
 18732                           
 18733                           	psect	text78
 18734     1227                     __ptext78:	
 18735 ;; *************** function _InitBMP280 *****************
 18736 ;; Defined at:
 18737 ;;		line 39 in file "sensor.c"
 18738 ;; Parameters:    Size  Location     Type
 18739 ;;		None
 18740 ;; Auto vars:     Size  Location     Type
 18741 ;;		None
 18742 ;; Return value:  Size  Location     Type
 18743 ;;                  1    wreg      void 
 18744 ;; Registers used:
 18745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18746 ;; Tracked objects:
 18747 ;;		On entry : 3F/0
 18748 ;;		On exit  : 3F/0
 18749 ;;		Unchanged: 0/0
 18750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18755 ;;Total ram usage:        0 bytes
 18756 ;; Hardware stack levels used: 1
 18757 ;; Hardware stack levels required when called: 15
 18758 ;; This function calls:
 18759 ;;		_writeBMP280
 18760 ;; This function is called by:
 18761 ;;		_main
 18762 ;; This function uses a non-reentrant model
 18763 ;;
 18764                           
 18765     1227                     _InitBMP280:	
 18766                           ;psect for function _InitBMP280
 18767                           
 18768                           
 18769                           ;sensor.c: 41:     writeBMP280(0xF5,0x00);
 18770                           
 18771                           ;incstack = 0
 18772                           ; Regs used in _InitBMP280: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18773     1227  01B4               	clrf	writeBMP280@regdata
 18774     1228  30F5               	movlw	245
 18775     1229  3192  2290  3192   	fcall	_writeBMP280
 18776                           
 18777                           ;sensor.c: 42:     writeBMP280(0xF4,0xFC);
 18778     122C  30FC               	movlw	252
 18779     122D  00B4               	movwf	writeBMP280@regdata
 18780     122E  30F4               	movlw	244
 18781     122F  3192  2290         	fcall	_writeBMP280
 18782     1231  0008               	return
 18783     1232                     __end_of_InitBMP280:
 18784                           
 18785                           	psect	text79
 18786     1290                     __ptext79:	
 18787 ;; *************** function _writeBMP280 *****************
 18788 ;; Defined at:
 18789 ;;		line 28 in file "sensor.c"
 18790 ;; Parameters:    Size  Location     Type
 18791 ;;  regadd          1    wreg     unsigned char 
 18792 ;;  regdata         1   20[BANK0 ] unsigned char 
 18793 ;; Auto vars:     Size  Location     Type
 18794 ;;  regadd          1   21[BANK0 ] unsigned char 
 18795 ;;  Txbuffer        2   23[BANK0 ] unsigned char [2]
 18796 ;;  pTxbuffer       1   22[BANK0 ] PTR unsigned char 
 18797 ;;		 -> writeBMP280@Txbuffer(2), 
 18798 ;; Return value:  Size  Location     Type
 18799 ;;                  1    wreg      void 
 18800 ;; Registers used:
 18801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18802 ;; Tracked objects:
 18803 ;;		On entry : 3F/0
 18804 ;;		On exit  : 3F/0
 18805 ;;		Unchanged: 0/0
 18806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18807 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18808 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18810 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18811 ;;Total ram usage:        5 bytes
 18812 ;; Hardware stack levels used: 1
 18813 ;; Hardware stack levels required when called: 14
 18814 ;; This function calls:
 18815 ;;		_I2C1_WriteNBytes
 18816 ;; This function is called by:
 18817 ;;		_InitBMP280
 18818 ;;		_getBMP280Data
 18819 ;; This function uses a non-reentrant model
 18820 ;;
 18821                           
 18822     1290                     _writeBMP280:	
 18823                           ;psect for function _writeBMP280
 18824                           
 18825                           
 18826                           ;incstack = 0
 18827                           ; Regs used in _writeBMP280: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18828                           ;writeBMP280@regadd stored from wreg
 18829     1290  00B5               	movwf	writeBMP280@regadd
 18830                           
 18831                           ;sensor.c: 28: void writeBMP280(uint8_t regadd, uint8_t regdata);sensor.c: 29: {;sensor.
      +                          c: 30:     uint8_t Txbuffer[2];;sensor.c: 31:     uint8_t* pTxbuffer;;sensor.c: 33:     
      +                          Txbuffer[0] = regadd;
 18832     1291  0835               	movf	writeBMP280@regadd,w
 18833     1292  00B7               	movwf	writeBMP280@Txbuffer
 18834                           
 18835                           ;sensor.c: 34:     Txbuffer[1] = regdata;
 18836     1293  0834               	movf	writeBMP280@regdata,w
 18837     1294  00B8               	movwf	writeBMP280@Txbuffer+1
 18838                           
 18839                           ;sensor.c: 35:     pTxbuffer = &Txbuffer[0];
 18840     1295  3037               	movlw	(low (writeBMP280@Txbuffer| 0))& (0+255)
 18841     1296  00B6               	movwf	writeBMP280@pTxbuffer
 18842                           
 18843                           ;sensor.c: 36:     I2C1_WriteNBytes(0x76,pTxbuffer,2);
 18844     1297  0836               	movf	writeBMP280@pTxbuffer,w
 18845     1298  00B0               	movwf	I2C1_WriteNBytes@data
 18846     1299  3002               	movlw	2
 18847     129A  00B1               	movwf	I2C1_WriteNBytes@len
 18848     129B  3000               	movlw	0
 18849     129C  00B2               	movwf	I2C1_WriteNBytes@len+1
 18850     129D  3076               	movlw	118
 18851     129E  3195  258F         	fcall	_I2C1_WriteNBytes
 18852     12A0  0008               	return
 18853     12A1                     __end_of_writeBMP280:
 18854                           
 18855                           	psect	text80
 18856     158F                     __ptext80:	
 18857 ;; *************** function _I2C1_WriteNBytes *****************
 18858 ;; Defined at:
 18859 ;;		line 111 in file "mcc_generated_files/examples/i2c1_master_example.c"
 18860 ;; Parameters:    Size  Location     Type
 18861 ;;  address         1    wreg     unsigned char 
 18862 ;;  data            1   16[BANK0 ] PTR unsigned char 
 18863 ;;		 -> getSHTC3Data@Rxbuffer(2), getSHTC3Data@Txbuffer(2), writeDPS422@Txbuffer(2), readDPS422@regadd(1), 
 18864 ;;		 -> writeBMP280@Txbuffer(2), readBMP280@regadd(1), 
 18865 ;;  len             2   17[BANK0 ] unsigned int 
 18866 ;; Auto vars:     Size  Location     Type
 18867 ;;  address         1   19[BANK0 ] unsigned char 
 18868 ;; Return value:  Size  Location     Type
 18869 ;;                  1    wreg      void 
 18870 ;; Registers used:
 18871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18872 ;; Tracked objects:
 18873 ;;		On entry : 3F/0
 18874 ;;		On exit  : 3F/0
 18875 ;;		Unchanged: 0/0
 18876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18877 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18880 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18881 ;;Total ram usage:        4 bytes
 18882 ;; Hardware stack levels used: 1
 18883 ;; Hardware stack levels required when called: 13
 18884 ;; This function calls:
 18885 ;;		_I2C1_Close
 18886 ;;		_I2C1_MasterWrite
 18887 ;;		_I2C1_Open
 18888 ;;		_I2C1_SetAddressNackCallback
 18889 ;;		_I2C1_SetBuffer
 18890 ;; This function is called by:
 18891 ;;		_readBMP280
 18892 ;;		_writeBMP280
 18893 ;;		_getSHTC3Data
 18894 ;; This function uses a non-reentrant model
 18895 ;;
 18896                           
 18897     158F                     _I2C1_WriteNBytes:	
 18898                           ;psect for function _I2C1_WriteNBytes
 18899                           
 18900                           
 18901                           ;incstack = 0
 18902                           ; Regs used in _I2C1_WriteNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18903                           ;I2C1_WriteNBytes@address stored from wreg
 18904     158F  00B3               	movwf	I2C1_WriteNBytes@address
 18905     1590                     l7347:	
 18906                           ;mcc_generated_files/examples/i2c1_master_example.c: 111: void I2C1_WriteNBytes(i2c1_add
      +                          ress_t address, uint8_t* data, size_t len);mcc_generated_files/examples/i2c1_master_exam
      +                          ple.c: 112: {;mcc_generated_files/examples/i2c1_master_example.c: 113:     while(!I2C1_O
      +                          pen(address));
 18907                           
 18908     1590  0833               	movf	I2C1_WriteNBytes@address,w
 18909     1591  3197  275B  3195   	fcall	_I2C1_Open
 18910     1594  3A00               	xorlw	0
 18911     1595  1903               	skipnz
 18912     1596  2D90               	goto	l7347
 18913                           
 18914                           ;mcc_generated_files/examples/i2c1_master_example.c: 114:     I2C1_SetBuffer(data,len);
 18915     1597  0830               	movf	I2C1_WriteNBytes@data,w
 18916     1598  00A0               	movwf	I2C1_SetBuffer@buffer
 18917     1599  01A1               	clrf	I2C1_SetBuffer@buffer+1
 18918     159A  0832               	movf	I2C1_WriteNBytes@len+1,w
 18919     159B  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 18920     159C  0831               	movf	I2C1_WriteNBytes@len,w
 18921     159D  00A2               	movwf	I2C1_SetBuffer@bufferSize
 18922     159E  3193  2360  3195   	fcall	_I2C1_SetBuffer
 18923                           
 18924                           ;mcc_generated_files/examples/i2c1_master_example.c: 115:     I2C1_SetAddressNackCallbac
      +                          k(((void*)0),((void*)0));
 18925     15A1  3000               	movlw	0
 18926     15A2  0140               	movlb	0	; select bank0
 18927     15A3  00A6               	movwf	I2C1_SetAddressNackCallback@cb
 18928     15A4  00A7               	movwf	I2C1_SetAddressNackCallback@cb+1
 18929     15A5  3000               	movlw	0
 18930     15A6  00A8               	movwf	I2C1_SetAddressNackCallback@ptr
 18931     15A7  00A9               	movwf	I2C1_SetAddressNackCallback@ptr+1
 18932     15A8  3191  21FE  3195   	fcall	_I2C1_SetAddressNackCallback
 18933                           
 18934                           ;mcc_generated_files/examples/i2c1_master_example.c: 116:     I2C1_MasterWrite();
 18935     15AB  3191  2156  3195   	fcall	_I2C1_MasterWrite
 18936     15AE                     l7355:	
 18937                           ;mcc_generated_files/examples/i2c1_master_example.c: 117:     while(I2C1_BUSY == I2C1_Cl
      +                          ose());
 18938                           
 18939     15AE  3193  2375  3195   	fcall	_I2C1_Close
 18940     15B1  3A01               	xorlw	1
 18941     15B2  1D03               	btfss	3,2
 18942     15B3  0008               	return
 18943     15B4  2DAE               	goto	l7355
 18944     15B5                     __end_of_I2C1_WriteNBytes:
 18945                           
 18946                           	psect	text81
 18947     11FE                     __ptext81:	
 18948 ;; *************** function _I2C1_SetAddressNackCallback *****************
 18949 ;; Defined at:
 18950 ;;		line 283 in file "mcc_generated_files/i2c1_master.c"
 18951 ;; Parameters:    Size  Location     Type
 18952 ;;  cb              2    6[BANK0 ] PTR FTN(PTR void ,)enum 
 18953 ;;		 -> NULL(1), 
 18954 ;;  ptr             2    8[BANK0 ] PTR void 
 18955 ;;		 -> NULL(0), 
 18956 ;; Auto vars:     Size  Location     Type
 18957 ;;		None
 18958 ;; Return value:  Size  Location     Type
 18959 ;;                  1    wreg      void 
 18960 ;; Registers used:
 18961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18962 ;; Tracked objects:
 18963 ;;		On entry : 3F/0
 18964 ;;		On exit  : 3F/0
 18965 ;;		Unchanged: 0/0
 18966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18970 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18971 ;;Total ram usage:        4 bytes
 18972 ;; Hardware stack levels used: 1
 18973 ;; Hardware stack levels required when called: 6
 18974 ;; This function calls:
 18975 ;;		_I2C1_SetCallback
 18976 ;; This function is called by:
 18977 ;;		_I2C1_WriteNBytes
 18978 ;; This function uses a non-reentrant model
 18979 ;;
 18980                           
 18981     11FE                     _I2C1_SetAddressNackCallback:	
 18982                           ;psect for function _I2C1_SetAddressNackCallback
 18983                           
 18984                           
 18985                           ;mcc_generated_files/i2c1_master.c: 283: void I2C1_SetAddressNackCallback(i2c1_callback_
      +                          t cb, void *ptr);mcc_generated_files/i2c1_master.c: 284: {;mcc_generated_files/i2c1_mast
      +                          er.c: 285:     I2C1_SetCallback(I2C1_ADDR_NACK, cb, ptr);
 18986                           
 18987                           ;incstack = 0
 18988                           ; Regs used in _I2C1_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 18989     11FE  0827               	movf	I2C1_SetAddressNackCallback@cb+1,w
 18990     11FF  00A1               	movwf	I2C1_SetCallback@cb+1
 18991     1200  0826               	movf	I2C1_SetAddressNackCallback@cb,w
 18992     1201  00A0               	movwf	I2C1_SetCallback@cb
 18993     1202  0828               	movf	I2C1_SetAddressNackCallback@ptr,w
 18994     1203  00A2               	movwf	I2C1_SetCallback@ptr
 18995     1204  3002               	movlw	2
 18996     1205  3197  2725         	fcall	_I2C1_SetCallback
 18997     1207  0008               	return
 18998     1208                     __end_of_I2C1_SetAddressNackCallback:
 18999                           
 19000                           	psect	text82
 19001     175B                     __ptext82:	
 19002 ;; *************** function _I2C1_Open *****************
 19003 ;; Defined at:
 19004 ;;		line 176 in file "mcc_generated_files/i2c1_master.c"
 19005 ;; Parameters:    Size  Location     Type
 19006 ;;  address         1    wreg     unsigned char 
 19007 ;; Auto vars:     Size  Location     Type
 19008 ;;  address         1    0[BANK0 ] unsigned char 
 19009 ;;  returnValue     1    1[BANK0 ] enum E358
 19010 ;; Return value:  Size  Location     Type
 19011 ;;                  1    wreg      enum E358
 19012 ;; Registers used:
 19013 ;;		wreg, status,2, status,0, pclath, cstack
 19014 ;; Tracked objects:
 19015 ;;		On entry : 3F/0
 19016 ;;		On exit  : 3F/0
 19017 ;;		Unchanged: 0/0
 19018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19022 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19023 ;;Total ram usage:        2 bytes
 19024 ;; Hardware stack levels used: 1
 19025 ;; Hardware stack levels required when called: 6
 19026 ;; This function calls:
 19027 ;;		_I2C1_MasterClearIrq
 19028 ;;		_I2C1_MasterOpen
 19029 ;; This function is called by:
 19030 ;;		_I2C1_WriteNBytes
 19031 ;;		_I2C1_ReadNBytes
 19032 ;; This function uses a non-reentrant model
 19033 ;;
 19034                           
 19035     175B                     _I2C1_Open:	
 19036                           ;psect for function _I2C1_Open
 19037                           
 19038                           
 19039                           ;incstack = 0
 19040                           ; Regs used in _I2C1_Open: [wreg+status,2+status,0+pclath+cstack]
 19041                           ;I2C1_Open@address stored from wreg
 19042     175B  00A0               	movwf	I2C1_Open@address
 19043                           
 19044                           ;mcc_generated_files/i2c1_master.c: 176: i2c1_error_t I2C1_Open(i2c1_address_t address);
      +                          mcc_generated_files/i2c1_master.c: 177: {;mcc_generated_files/i2c1_master.c: 178:     i2
      +                          c1_error_t returnValue = I2C1_BUSY;
 19045     175C  3001               	movlw	1
 19046     175D  00A1               	movwf	I2C1_Open@returnValue
 19047                           
 19048                           ;mcc_generated_files/i2c1_master.c: 180:     if(!I2C1_Status.inUse)
 19049     175E  0142               	movlb	2	; select bank2
 19050     175F  193D               	btfsc	(_I2C1_Status^(0+256)+29),2
 19051     1760  2F8F               	goto	l7211
 19052                           
 19053                           ;mcc_generated_files/i2c1_master.c: 181:     {;mcc_generated_files/i2c1_master.c: 182:  
      +                                 I2C1_Status.address = address;
 19054     1761  0140               	movlb	0	; select bank0
 19055     1762  0820               	movf	I2C1_Open@address,w
 19056     1763  0142               	movlb	2	; select bank2
 19057     1764  00B6               	movwf	(_I2C1_Status^(0+256)+22)
 19058                           
 19059                           ;mcc_generated_files/i2c1_master.c: 183:         I2C1_Status.busy = 0;
 19060     1765  10BD               	bcf	(_I2C1_Status^(0+256)+29),1
 19061                           
 19062                           ;mcc_generated_files/i2c1_master.c: 184:         I2C1_Status.inUse = 1;
 19063     1766  153D               	bsf	(_I2C1_Status^(0+256)+29),2
 19064                           
 19065                           ;mcc_generated_files/i2c1_master.c: 185:         I2C1_Status.addressNackCheck = 0;
 19066     1767  103D               	bcf	(_I2C1_Status^(0+256)+29),0
 19067                           
 19068                           ;mcc_generated_files/i2c1_master.c: 186:         I2C1_Status.state = I2C1_RESET;
 19069     1768  300E               	movlw	14
 19070     1769  00BB               	movwf	(_I2C1_Status^(0+256)+27)
 19071                           
 19072                           ;mcc_generated_files/i2c1_master.c: 187:         I2C1_Status.time_out_value = 500;
 19073     176A  30F4               	movlw	244
 19074     176B  00B4               	movwf	(_I2C1_Status^(0+256)+20)
 19075     176C  3001               	movlw	1
 19076     176D  00B5               	movwf	(_I2C1_Status^(0+256)+21)
 19077                           
 19078                           ;mcc_generated_files/i2c1_master.c: 188:         I2C1_Status.bufferFree = 1;
 19079     176E  15BD               	bsf	(_I2C1_Status^(0+256)+29),3
 19080                           
 19081                           ;mcc_generated_files/i2c1_master.c: 191:         I2C1_Status.callbackTable[I2C1_DATA_COM
      +                          PLETE]=I2C1_CallbackReturnStop;
 19082     176F  3001               	movlw	low _I2C1_CallbackReturnStop
 19083     1770  00A0               	movwf	_I2C1_Status^(0+256)
 19084     1771  3011               	movlw	high _I2C1_CallbackReturnStop
 19085     1772  00A1               	movwf	(_I2C1_Status^(0+256)+1)
 19086                           
 19087                           ;mcc_generated_files/i2c1_master.c: 192:         I2C1_Status.callbackPayload[I2C1_DATA_C
      +                          OMPLETE] = ((void*)0);
 19088     1773  01AC               	clrf	(_I2C1_Status^(0+256)+12)
 19089                           
 19090                           ;mcc_generated_files/i2c1_master.c: 193:         I2C1_Status.callbackTable[I2C1_WRITE_CO
      +                          LLISION]=I2C1_CallbackReturnStop;
 19091     1774  3001               	movlw	low _I2C1_CallbackReturnStop
 19092     1775  00A2               	movwf	(_I2C1_Status^(0+256)+2)
 19093     1776  3011               	movlw	high _I2C1_CallbackReturnStop
 19094     1777  00A3               	movwf	(_I2C1_Status^(0+256)+3)
 19095                           
 19096                           ;mcc_generated_files/i2c1_master.c: 194:         I2C1_Status.callbackPayload[I2C1_WRITE_
      +                          COLLISION] = ((void*)0);
 19097     1778  01AD               	clrf	(_I2C1_Status^(0+256)+13)
 19098                           
 19099                           ;mcc_generated_files/i2c1_master.c: 195:         I2C1_Status.callbackTable[I2C1_ADDR_NAC
      +                          K]=I2C1_CallbackReturnStop;
 19100     1779  3001               	movlw	low _I2C1_CallbackReturnStop
 19101     177A  00A4               	movwf	(_I2C1_Status^(0+256)+4)
 19102     177B  3011               	movlw	high _I2C1_CallbackReturnStop
 19103     177C  00A5               	movwf	(_I2C1_Status^(0+256)+5)
 19104                           
 19105                           ;mcc_generated_files/i2c1_master.c: 196:         I2C1_Status.callbackPayload[I2C1_ADDR_N
      +                          ACK] = ((void*)0);
 19106     177D  01AE               	clrf	(_I2C1_Status^(0+256)+14)
 19107                           
 19108                           ;mcc_generated_files/i2c1_master.c: 197:         I2C1_Status.callbackTable[I2C1_DATA_NAC
      +                          K]=I2C1_CallbackReturnStop;
 19109     177E  3001               	movlw	low _I2C1_CallbackReturnStop
 19110     177F  00A6               	movwf	(_I2C1_Status^(0+256)+6)
 19111     1780  3011               	movlw	high _I2C1_CallbackReturnStop
 19112     1781  00A7               	movwf	(_I2C1_Status^(0+256)+7)
 19113                           
 19114                           ;mcc_generated_files/i2c1_master.c: 198:         I2C1_Status.callbackPayload[I2C1_DATA_N
      +                          ACK] = ((void*)0);
 19115     1782  01AF               	clrf	(_I2C1_Status^(0+256)+15)
 19116                           
 19117                           ;mcc_generated_files/i2c1_master.c: 199:         I2C1_Status.callbackTable[I2C1_TIMEOUT]
      +                          =I2C1_CallbackReturnReset;
 19118     1783  3003               	movlw	low _I2C1_CallbackReturnReset
 19119     1784  00A8               	movwf	(_I2C1_Status^(0+256)+8)
 19120     1785  3011               	movlw	high _I2C1_CallbackReturnReset
 19121     1786  00A9               	movwf	(_I2C1_Status^(0+256)+9)
 19122                           
 19123                           ;mcc_generated_files/i2c1_master.c: 200:         I2C1_Status.callbackPayload[I2C1_TIMEOU
      +                          T] = ((void*)0);
 19124     1787  01B0               	clrf	(_I2C1_Status^(0+256)+16)
 19125                           
 19126                           ;mcc_generated_files/i2c1_master.c: 202:         I2C1_MasterClearIrq();
 19127     1788  3191  210B  3197   	fcall	_I2C1_MasterClearIrq
 19128                           
 19129                           ;mcc_generated_files/i2c1_master.c: 203:         I2C1_MasterOpen();
 19130     178B  3192  221C         	fcall	_I2C1_MasterOpen
 19131                           
 19132                           ;mcc_generated_files/i2c1_master.c: 204:         returnValue = I2C1_NOERR;
 19133     178D  0140               	movlb	0	; select bank0
 19134     178E  01A1               	clrf	I2C1_Open@returnValue
 19135     178F                     l7211:
 19136                           
 19137                           ;mcc_generated_files/i2c1_master.c: 206:     return returnValue;
 19138     178F  0140               	movlb	0	; select bank0
 19139     1790  0821               	movf	I2C1_Open@returnValue,w
 19140     1791  0008               	return
 19141     1792                     __end_of_I2C1_Open:
 19142                           
 19143                           	psect	text83
 19144     121C                     __ptext83:	
 19145 ;; *************** function _I2C1_MasterOpen *****************
 19146 ;; Defined at:
 19147 ;;		line 543 in file "mcc_generated_files/i2c1_master.c"
 19148 ;; Parameters:    Size  Location     Type
 19149 ;;		None
 19150 ;; Auto vars:     Size  Location     Type
 19151 ;;		None
 19152 ;; Return value:  Size  Location     Type
 19153 ;;                  1    wreg      _Bool 
 19154 ;; Registers used:
 19155 ;;		status,2
 19156 ;; Tracked objects:
 19157 ;;		On entry : 3F/E
 19158 ;;		On exit  : 3F/3
 19159 ;;		Unchanged: 0/0
 19160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19165 ;;Total ram usage:        0 bytes
 19166 ;; Hardware stack levels used: 1
 19167 ;; Hardware stack levels required when called: 5
 19168 ;; This function calls:
 19169 ;;		Nothing
 19170 ;; This function is called by:
 19171 ;;		_I2C1_Open
 19172 ;; This function uses a non-reentrant model
 19173 ;;
 19174                           
 19175     121C                     _I2C1_MasterOpen:	
 19176                           ;psect for function _I2C1_MasterOpen
 19177                           
 19178                           
 19179                           ;mcc_generated_files/i2c1_master.c: 545:     if(!SSP1CON1bits.SSPEN)
 19180                           
 19181                           ;incstack = 0
 19182                           ; Regs used in _I2C1_MasterOpen: [status,2]
 19183     121C  0143               	movlb	3	; select bank3
 19184     121D  1A90               	btfsc	16,5	;volatile
 19185     121E  0008               	return
 19186                           
 19187                           ;mcc_generated_files/i2c1_master.c: 546:     {;mcc_generated_files/i2c1_master.c: 547:  
      +                                 SSP1STAT = 0x00;
 19188     121F  018F               	clrf	15	;volatile
 19189                           
 19190                           ;mcc_generated_files/i2c1_master.c: 548:         SSP1CON1 = 0x08;
 19191     1220  3008               	movlw	8
 19192     1221  0090               	movwf	16	;volatile
 19193                           
 19194                           ;mcc_generated_files/i2c1_master.c: 549:         SSP1CON2 = 0x00;
 19195     1222  0191               	clrf	17	;volatile
 19196                           
 19197                           ;mcc_generated_files/i2c1_master.c: 550:         SSP1ADD = 0x03;
 19198     1223  3003               	movlw	3
 19199     1224  008D               	movwf	13	;volatile
 19200                           
 19201                           ;mcc_generated_files/i2c1_master.c: 551:         SSP1CON1bits.SSPEN = 1;
 19202     1225  1690               	bsf	16,5	;volatile
 19203     1226  0008               	return
 19204     1227                     __end_of_I2C1_MasterOpen:
 19205                           
 19206                           	psect	text84
 19207     1156                     __ptext84:	
 19208 ;; *************** function _I2C1_MasterWrite *****************
 19209 ;; Defined at:
 19210 ;;		line 251 in file "mcc_generated_files/i2c1_master.c"
 19211 ;; Parameters:    Size  Location     Type
 19212 ;;		None
 19213 ;; Auto vars:     Size  Location     Type
 19214 ;;		None
 19215 ;; Return value:  Size  Location     Type
 19216 ;;                  1    wreg      enum E358
 19217 ;; Registers used:
 19218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19219 ;; Tracked objects:
 19220 ;;		On entry : 3F/0
 19221 ;;		On exit  : 3F/0
 19222 ;;		Unchanged: 0/0
 19223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19228 ;;Total ram usage:        0 bytes
 19229 ;; Hardware stack levels used: 1
 19230 ;; Hardware stack levels required when called: 12
 19231 ;; This function calls:
 19232 ;;		_I2C1_MasterOperation
 19233 ;; This function is called by:
 19234 ;;		_I2C1_WriteNBytes
 19235 ;; This function uses a non-reentrant model
 19236 ;;
 19237                           
 19238     1156                     _I2C1_MasterWrite:	
 19239                           ;psect for function _I2C1_MasterWrite
 19240                           
 19241                           
 19242                           ;mcc_generated_files/i2c1_master.c: 253:     return I2C1_MasterOperation(0);;	Return val
      +                          ue of _I2C1_MasterWrite is never used
 19243                           
 19244                           ;incstack = 0
 19245                           ; Regs used in _I2C1_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19246     1156  3000               	movlw	0
 19247     1157  3193  23BC         	fcall	_I2C1_MasterOperation
 19248     1159  0008               	return
 19249     115A                     __end_of_I2C1_MasterWrite:
 19250                           
 19251                           	psect	text85
 19252     13BC                     __ptext85:	
 19253 ;; *************** function _I2C1_MasterOperation *****************
 19254 ;; Defined at:
 19255 ;;		line 224 in file "mcc_generated_files/i2c1_master.c"
 19256 ;; Parameters:    Size  Location     Type
 19257 ;;  read            1    wreg     _Bool 
 19258 ;; Auto vars:     Size  Location     Type
 19259 ;;  read            1   14[BANK0 ] _Bool 
 19260 ;;  returnValue     1   15[BANK0 ] enum E358
 19261 ;; Return value:  Size  Location     Type
 19262 ;;                  1    wreg      enum E358
 19263 ;; Registers used:
 19264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19265 ;; Tracked objects:
 19266 ;;		On entry : 3D/2
 19267 ;;		On exit  : 3F/0
 19268 ;;		Unchanged: 0/0
 19269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19273 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19274 ;;Total ram usage:        2 bytes
 19275 ;; Hardware stack levels used: 1
 19276 ;; Hardware stack levels required when called: 11
 19277 ;; This function calls:
 19278 ;;		_I2C1_MasterStart
 19279 ;;		_I2C1_Poller
 19280 ;; This function is called by:
 19281 ;;		_I2C1_MasterRead
 19282 ;;		_I2C1_MasterWrite
 19283 ;; This function uses a non-reentrant model
 19284 ;;
 19285                           
 19286     13BC                     _I2C1_MasterOperation:	
 19287                           ;psect for function _I2C1_MasterOperation
 19288                           
 19289                           
 19290                           ;incstack = 0
 19291                           ; Regs used in _I2C1_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19292                           ;I2C1_MasterOperation@read stored from wreg
 19293     13BC  0140               	movlb	0	; select bank0
 19294     13BD  00AE               	movwf	I2C1_MasterOperation@read
 19295                           
 19296                           ;mcc_generated_files/i2c1_master.c: 224: i2c1_error_t I2C1_MasterOperation(_Bool read);m
      +                          cc_generated_files/i2c1_master.c: 225: {;mcc_generated_files/i2c1_master.c: 226:     i2c
      +                          1_error_t returnValue = I2C1_BUSY;
 19297     13BE  3001               	movlw	1
 19298     13BF  00AF               	movwf	I2C1_MasterOperation@returnValue
 19299                           
 19300                           ;mcc_generated_files/i2c1_master.c: 227:     if(!I2C1_Status.busy)
 19301     13C0  0142               	movlb	2	; select bank2
 19302     13C1  18BD               	btfsc	(_I2C1_Status^(0+256)+29),1
 19303     13C2  2BD3               	goto	l7087
 19304                           
 19305                           ;mcc_generated_files/i2c1_master.c: 228:     {;mcc_generated_files/i2c1_master.c: 229:  
      +                                 I2C1_Status.busy = 1;
 19306     13C3  14BD               	bsf	(_I2C1_Status^(0+256)+29),1
 19307                           
 19308                           ;mcc_generated_files/i2c1_master.c: 230:         returnValue = I2C1_NOERR;
 19309     13C4  0140               	movlb	0	; select bank0
 19310     13C5  01AF               	clrf	I2C1_MasterOperation@returnValue
 19311                           
 19312                           ;mcc_generated_files/i2c1_master.c: 232:         if(read)
 19313     13C6  082E               	movf	I2C1_MasterOperation@read,w
 19314     13C7  1903               	btfsc	3,2
 19315     13C8  2BCB               	goto	l646
 19316                           
 19317                           ;mcc_generated_files/i2c1_master.c: 233:         {;mcc_generated_files/i2c1_master.c: 23
      +                          4:             I2C1_Status.state = I2C1_SEND_ADR_READ;
 19318     13C9  3001               	movlw	1
 19319     13CA  2BCC               	goto	L15
 19320     13CB                     l646:	
 19321                           ;mcc_generated_files/i2c1_master.c: 236:         else
 19322                           
 19323                           ;mcc_generated_files/i2c1_master.c: 235:         }
 19324                           
 19325                           
 19326                           ;mcc_generated_files/i2c1_master.c: 237:         {;mcc_generated_files/i2c1_master.c: 23
      +                          8:             I2C1_Status.state = I2C1_SEND_ADR_WRITE;
 19327     13CB  3002               	movlw	2
 19328     13CC                     L15:
 19329     13CC  0142               	movlb	2	; select bank2
 19330     13CD  00BB               	movwf	(_I2C1_Status^(0+256)+27)
 19331                           
 19332                           ;mcc_generated_files/i2c1_master.c: 240:         I2C1_MasterStart();
 19333     13CE  3191  2111  3193   	fcall	_I2C1_MasterStart
 19334                           
 19335                           ;mcc_generated_files/i2c1_master.c: 241:         I2C1_Poller();
 19336     13D1  3191  21F4         	fcall	_I2C1_Poller
 19337     13D3                     l7087:
 19338                           
 19339                           ;mcc_generated_files/i2c1_master.c: 243:     return returnValue;
 19340     13D3  0140               	movlb	0	; select bank0
 19341     13D4  082F               	movf	I2C1_MasterOperation@returnValue,w
 19342     13D5  0008               	return
 19343     13D6                     __end_of_I2C1_MasterOperation:
 19344                           
 19345                           	psect	text86
 19346     11F4                     __ptext86:	
 19347 ;; *************** function _I2C1_Poller *****************
 19348 ;; Defined at:
 19349 ;;		line 312 in file "mcc_generated_files/i2c1_master.c"
 19350 ;; Parameters:    Size  Location     Type
 19351 ;;		None
 19352 ;; Auto vars:     Size  Location     Type
 19353 ;;		None
 19354 ;; Return value:  Size  Location     Type
 19355 ;;                  1    wreg      void 
 19356 ;; Registers used:
 19357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19358 ;; Tracked objects:
 19359 ;;		On entry : 3F/3
 19360 ;;		On exit  : 3F/2
 19361 ;;		Unchanged: 0/0
 19362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19367 ;;Total ram usage:        0 bytes
 19368 ;; Hardware stack levels used: 1
 19369 ;; Hardware stack levels required when called: 10
 19370 ;; This function calls:
 19371 ;;		_I2C1_MasterFsm
 19372 ;;		_I2C1_MasterWaitForEvent
 19373 ;; This function is called by:
 19374 ;;		_I2C1_MasterOperation
 19375 ;; This function uses a non-reentrant model
 19376 ;;
 19377                           
 19378     11F4                     _I2C1_Poller:	
 19379                           ;psect for function _I2C1_Poller
 19380                           
 19381     11F4                     l6967:	
 19382                           ;mcc_generated_files/i2c1_master.c: 314:     while(I2C1_Status.busy)
 19383                           
 19384                           ;incstack = 0
 19385                           ; Regs used in _I2C1_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19386                           
 19387                           
 19388                           ;mcc_generated_files/i2c1_master.c: 314:     while(I2C1_Status.busy)
 19389     11F4  0142               	movlb	2	; select bank2
 19390     11F5  1CBD               	btfss	(_I2C1_Status^(0+256)+29),1
 19391     11F6  0008               	return
 19392                           
 19393                           ;mcc_generated_files/i2c1_master.c: 315:     {;mcc_generated_files/i2c1_master.c: 316:  
      +                                 I2C1_MasterWaitForEvent();
 19394     11F7  3191  2152  3191   	fcall	_I2C1_MasterWaitForEvent
 19395                           
 19396                           ;mcc_generated_files/i2c1_master.c: 317:         I2C1_MasterFsm();
 19397     11FA  3195  256A  3191   	fcall	_I2C1_MasterFsm
 19398     11FD  29F4               	goto	l6967
 19399     11FE                     __end_of_I2C1_Poller:
 19400                           
 19401                           	psect	text87
 19402     1152                     __ptext87:	
 19403 ;; *************** function _I2C1_MasterWaitForEvent *****************
 19404 ;; Defined at:
 19405 ;;		line 650 in file "mcc_generated_files/i2c1_master.c"
 19406 ;; Parameters:    Size  Location     Type
 19407 ;;		None
 19408 ;; Auto vars:     Size  Location     Type
 19409 ;;		None
 19410 ;; Return value:  Size  Location     Type
 19411 ;;                  1    wreg      void 
 19412 ;; Registers used:
 19413 ;;		None
 19414 ;; Tracked objects:
 19415 ;;		On entry : 3E/2
 19416 ;;		On exit  : 3F/E
 19417 ;;		Unchanged: 0/0
 19418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19423 ;;Total ram usage:        0 bytes
 19424 ;; Hardware stack levels used: 1
 19425 ;; Hardware stack levels required when called: 5
 19426 ;; This function calls:
 19427 ;;		Nothing
 19428 ;; This function is called by:
 19429 ;;		_I2C1_Poller
 19430 ;; This function uses a non-reentrant model
 19431 ;;
 19432                           
 19433     1152                     _I2C1_MasterWaitForEvent:	
 19434                           ;psect for function _I2C1_MasterWaitForEvent
 19435                           
 19436     1152                     l860:	
 19437                           ;incstack = 0
 19438                           ; Regs used in _I2C1_MasterWaitForEvent: []
 19439                           ;mcc_generated_files/i2c1_master.c: 652:     while(1)
 19440                           
 19441                           
 19442                           ;mcc_generated_files/i2c1_master.c: 653:     {;mcc_generated_files/i2c1_master.c: 654:  
      +                                 if(PIR3bits.SSP1IF)
 19443     1152  014E               	movlb	14	; select bank14
 19444     1153  180F               	btfsc	15,0	;volatile
 19445     1154  0008               	return
 19446     1155  2952               	goto	l860
 19447     1156                     __end_of_I2C1_MasterWaitForEvent:
 19448                           
 19449                           	psect	text88
 19450     156A                     __ptext88:	
 19451 ;; *************** function _I2C1_MasterFsm *****************
 19452 ;; Defined at:
 19453 ;;		line 321 in file "mcc_generated_files/i2c1_master.c"
 19454 ;; Parameters:    Size  Location     Type
 19455 ;;		None
 19456 ;; Auto vars:     Size  Location     Type
 19457 ;;		None
 19458 ;; Return value:  Size  Location     Type
 19459 ;;                  1    wreg      void 
 19460 ;; Registers used:
 19461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19462 ;; Tracked objects:
 19463 ;;		On entry : 3F/E
 19464 ;;		On exit  : 3F/2
 19465 ;;		Unchanged: 0/0
 19466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19469 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19470 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19471 ;;Total ram usage:        2 bytes
 19472 ;; Hardware stack levels used: 1
 19473 ;; Hardware stack levels required when called: 9
 19474 ;; This function calls:
 19475 ;;		_I2C1_DO_ADDRESS_NACK
 19476 ;;		_I2C1_DO_IDLE
 19477 ;;		_I2C1_DO_RCEN
 19478 ;;		_I2C1_DO_RESET
 19479 ;;		_I2C1_DO_RX
 19480 ;;		_I2C1_DO_RX_ACK
 19481 ;;		_I2C1_DO_RX_NACK_RESTART
 19482 ;;		_I2C1_DO_RX_NACK_STOP
 19483 ;;		_I2C1_DO_SEND_ADR_READ
 19484 ;;		_I2C1_DO_SEND_ADR_WRITE
 19485 ;;		_I2C1_DO_SEND_RESTART
 19486 ;;		_I2C1_DO_SEND_RESTART_READ
 19487 ;;		_I2C1_DO_SEND_RESTART_WRITE
 19488 ;;		_I2C1_DO_SEND_STOP
 19489 ;;		_I2C1_DO_TX
 19490 ;;		_I2C1_DO_TX_EMPTY
 19491 ;;		_I2C1_MasterClearIrq
 19492 ;;		_I2C1_MasterIsNack
 19493 ;; This function is called by:
 19494 ;;		_I2C1_Poller
 19495 ;; This function uses a non-reentrant model
 19496 ;;
 19497                           
 19498     156A                     _I2C1_MasterFsm:	
 19499                           ;psect for function _I2C1_MasterFsm
 19500                           
 19501                           
 19502                           ;mcc_generated_files/i2c1_master.c: 323:     I2C1_MasterClearIrq();
 19503                           
 19504                           ;incstack = 0
 19505                           ; Regs used in _I2C1_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19506     156A  3191  210B  3195   	fcall	_I2C1_MasterClearIrq
 19507                           
 19508                           ;mcc_generated_files/i2c1_master.c: 325:     if(I2C1_Status.addressNackCheck && I2C1_Mas
      +                          terIsNack())
 19509     156D  0142               	movlb	2	; select bank2
 19510     156E  1C3D               	btfss	(_I2C1_Status^(0+256)+29),0
 19511     156F  2D79               	goto	l6863
 19512     1570  3191  2180  3195   	fcall	_I2C1_MasterIsNack
 19513     1573  3A00               	xorlw	0
 19514     1574  1903               	skipnz
 19515     1575  2D79               	goto	l6863
 19516                           
 19517                           ;mcc_generated_files/i2c1_master.c: 326:     {;mcc_generated_files/i2c1_master.c: 327:  
      +                                 I2C1_Status.state = I2C1_ADDRESS_NACK;
 19518     1576  300F               	movlw	15
 19519     1577  0142               	movlb	2	; select bank2
 19520     1578  00BB               	movwf	(_I2C1_Status^(0+256)+27)
 19521     1579                     l6863:
 19522                           
 19523                           ;mcc_generated_files/i2c1_master.c: 329:     I2C1_Status.state = fsmStateTable[I2C1_Stat
      +                          us.state]();
 19524     1579  0142               	movlb	2	; select bank2
 19525     157A  083B               	movf	(_I2C1_Status^(0+256)+27),w
 19526     157B  0140               	movlb	0	; select bank0
 19527     157C  00AC               	movwf	??_I2C1_MasterFsm
 19528     157D  01AD               	clrf	??_I2C1_MasterFsm+1
 19529     157E  35AC               	lslf	??_I2C1_MasterFsm,f
 19530     157F  0DAD               	rlf	??_I2C1_MasterFsm+1,f
 19531     1580  3026               	movlw	low _fsmStateTable
 19532     1581  072C               	addwf	??_I2C1_MasterFsm,w
 19533     1582  0084               	movwf	4
 19534     1583  3018               	movlw	high _fsmStateTable
 19535     1584  3D2D               	addwfc	??_I2C1_MasterFsm+1,w
 19536     1585  3880               	iorlw	128
 19537     1586  0085               	movwf	5
 19538     1587  3F01               	moviw [1]fsr0
 19539     1588  008A               	movwf	10
 19540     1589  3F00               	moviw [0]fsr0
 19541     158A  000A               	callw
 19542     158B  3195               	pagesel	$
 19543     158C  0142               	movlb	2	; select bank2
 19544     158D  00BB               	movwf	(_I2C1_Status^(0+256)+27)
 19545     158E  0008               	return
 19546     158F                     __end_of_I2C1_MasterFsm:
 19547                           
 19548                           	psect	text89
 19549     0800                     __ptext89:	
 19550 ;; *************** function _I2C1_DO_ADDRESS_NACK *****************
 19551 ;; Defined at:
 19552 ;;		line 500 in file "mcc_generated_files/i2c1_master.c"
 19553 ;; Parameters:    Size  Location     Type
 19554 ;;		None
 19555 ;; Auto vars:     Size  Location     Type
 19556 ;;		None
 19557 ;; Return value:  Size  Location     Type
 19558 ;;                  1    wreg      enum E10731
 19559 ;; Registers used:
 19560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19561 ;; Tracked objects:
 19562 ;;		On entry : 3F/0
 19563 ;;		On exit  : 3F/3
 19564 ;;		Unchanged: 0/0
 19565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19568 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19569 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19570 ;;Total ram usage:        2 bytes
 19571 ;; Hardware stack levels used: 1
 19572 ;; Hardware stack levels required when called: 8
 19573 ;; This function calls:
 19574 ;;		NULL
 19575 ;;		_I2C1_CallbackReturnReset
 19576 ;;		_I2C1_CallbackReturnStop
 19577 ;;		_I2C1_DO_SEND_RESTART
 19578 ;;		_I2C1_DO_SEND_STOP
 19579 ;;		_rd1RegCompleteHandler
 19580 ;;		_rd2RegCompleteHandler
 19581 ;;		_rdBlkRegCompleteHandler
 19582 ;;		_wr1RegCompleteHandler
 19583 ;;		_wr2RegCompleteHandler
 19584 ;; This function is called by:
 19585 ;;		_I2C1_MasterFsm
 19586 ;; This function uses a non-reentrant model
 19587 ;;
 19588                           
 19589     0800                     _I2C1_DO_ADDRESS_NACK:	
 19590                           ;psect for function _I2C1_DO_ADDRESS_NACK
 19591                           
 19592                           
 19593                           ;mcc_generated_files/i2c1_master.c: 502:     I2C1_Status.addressNackCheck = 0;
 19594                           
 19595                           ;incstack = 0
 19596                           ; Regs used in _I2C1_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19597     0800  0142               	movlb	2	; select bank2
 19598     0801  103D               	bcf	(_I2C1_Status^(0+256)+29),0
 19599                           
 19600                           ;mcc_generated_files/i2c1_master.c: 503:     I2C1_Status.error = I2C1_FAIL;
 19601     0802  3002               	movlw	2
 19602     0803  00BC               	movwf	(_I2C1_Status^(0+256)+28)
 19603                           
 19604                           ;mcc_generated_files/i2c1_master.c: 504:     switch(I2C1_Status.callbackTable[I2C1_ADDR_
      +                          NACK](I2C1_Status.callbackPayload[I2C1_ADDR_NACK]))
 19605     0804  280B               	goto	l6827
 19606     0805                     l6817:
 19607                           
 19608                           ;mcc_generated_files/i2c1_master.c: 508:             return I2C1_DO_SEND_RESTART();
 19609     0805  3191  213E         	fcall	_I2C1_DO_SEND_RESTART
 19610     0807  0008               	return
 19611     0808                     l6821:
 19612                           
 19613                           ;mcc_generated_files/i2c1_master.c: 510:             return I2C1_DO_SEND_STOP();
 19614     0808  3191  2142         	fcall	_I2C1_DO_SEND_STOP
 19615     080A  0008               	return
 19616     080B                     l6827:
 19617     080B  082E               	movf	(_I2C1_Status^(0+256)+14),w
 19618     080C  0140               	movlb	0	; select bank0
 19619     080D  00A9               	movwf	I2C1_CallbackReturnReset@funPtr
 19620     080E  3020               	movlw	low _I2C1_Status
 19621     080F  0086               	movwf	6
 19622     0810  3001               	movlw	high _I2C1_Status
 19623     0811  0087               	movwf	7
 19624     0812  3144               	addfsr 1,4
 19625     0813  3F41               	moviw [1]fsr1
 19626     0814  008A               	movwf	10
 19627     0815  3F40               	moviw [0]fsr1
 19628     0816  000A               	callw
 19629     0817  3188               	pagesel	$
 19630     0818  0140               	movlb	0	; select bank0
 19631     0819  00AA               	movwf	??_I2C1_DO_ADDRESS_NACK
 19632     081A  01AB               	clrf	??_I2C1_DO_ADDRESS_NACK+1
 19633                           
 19634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19635                           ; Switch size 1, requested type "simple"
 19636                           ; Number of cases is 1, Range of values is 0 to 0
 19637                           ; switch strategies available:
 19638                           ; Name         Instructions Cycles
 19639                           ; simple_byte            4     3 (average)
 19640                           ; direct_byte            8     6 (fixed)
 19641                           ; jumptable            260     6 (fixed)
 19642                           ;	Chosen strategy is simple_byte
 19643     081B  082B               	movf	??_I2C1_DO_ADDRESS_NACK+1,w
 19644     081C  3A00               	xorlw	0	; case 0
 19645     081D  1903               	skipnz
 19646     081E  2820               	goto	l8571
 19647     081F  2808               	goto	l6821
 19648     0820                     l8571:
 19649                           
 19650                           ; Switch size 1, requested type "simple"
 19651                           ; Number of cases is 2, Range of values is 2 to 3
 19652                           ; switch strategies available:
 19653                           ; Name         Instructions Cycles
 19654                           ; simple_byte            7     4 (average)
 19655                           ; direct_byte           13     9 (fixed)
 19656                           ; jumptable            263     9 (fixed)
 19657                           ;	Chosen strategy is simple_byte
 19658     0820  082A               	movf	??_I2C1_DO_ADDRESS_NACK,w
 19659     0821  3A02               	xorlw	2	; case 2
 19660     0822  1903               	skipnz
 19661     0823  2805               	goto	l6817
 19662     0824  3A01               	xorlw	1	; case 3
 19663     0825  1903               	skipnz
 19664     0826  2805               	goto	l6817
 19665     0827  2808               	goto	l6821
 19666     0828  0008               	return
 19667     0829                     __end_of_I2C1_DO_ADDRESS_NACK:
 19668                           
 19669                           	psect	text90
 19670     116F                     __ptext90:	
 19671 ;; *************** function _I2C1_DO_RESET *****************
 19672 ;; Defined at:
 19673 ;;		line 494 in file "mcc_generated_files/i2c1_master.c"
 19674 ;; Parameters:    Size  Location     Type
 19675 ;;		None
 19676 ;; Auto vars:     Size  Location     Type
 19677 ;;		None
 19678 ;; Return value:  Size  Location     Type
 19679 ;;                  1    wreg      enum E10731
 19680 ;; Registers used:
 19681 ;;		wreg, status,2
 19682 ;; Tracked objects:
 19683 ;;		On entry : 3F/0
 19684 ;;		On exit  : 3F/2
 19685 ;;		Unchanged: 0/0
 19686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19691 ;;Total ram usage:        0 bytes
 19692 ;; Hardware stack levels used: 1
 19693 ;; Hardware stack levels required when called: 5
 19694 ;; This function calls:
 19695 ;;		Nothing
 19696 ;; This function is called by:
 19697 ;;		_I2C1_MasterFsm
 19698 ;; This function uses a non-reentrant model
 19699 ;;
 19700                           
 19701     116F                     _I2C1_DO_RESET:	
 19702                           ;psect for function _I2C1_DO_RESET
 19703                           
 19704                           
 19705                           ;mcc_generated_files/i2c1_master.c: 496:     I2C1_Status.busy = 0;
 19706                           
 19707                           ;incstack = 0
 19708                           ; Regs used in _I2C1_DO_RESET: [wreg+status,2]
 19709     116F  0142               	movlb	2	; select bank2
 19710     1170  10BD               	bcf	(_I2C1_Status^(0+256)+29),1
 19711                           
 19712                           ;mcc_generated_files/i2c1_master.c: 497:     I2C1_Status.error = I2C1_NOERR;
 19713     1171  01BC               	clrf	(_I2C1_Status^(0+256)+28)
 19714                           
 19715                           ;mcc_generated_files/i2c1_master.c: 498:     return I2C1_RESET;
 19716     1172  300E               	movlw	14
 19717     1173  0008               	return
 19718     1174                     __end_of_I2C1_DO_RESET:
 19719                           
 19720                           	psect	text91
 19721     114E                     __ptext91:	
 19722 ;; *************** function _I2C1_DO_RX_NACK_RESTART *****************
 19723 ;; Defined at:
 19724 ;;		line 488 in file "mcc_generated_files/i2c1_master.c"
 19725 ;; Parameters:    Size  Location     Type
 19726 ;;		None
 19727 ;; Auto vars:     Size  Location     Type
 19728 ;;		None
 19729 ;; Return value:  Size  Location     Type
 19730 ;;                  1    wreg      enum E10731
 19731 ;; Registers used:
 19732 ;;		wreg, status,2, status,0, pclath, cstack
 19733 ;; Tracked objects:
 19734 ;;		On entry : 3F/0
 19735 ;;		On exit  : 3F/3
 19736 ;;		Unchanged: 0/0
 19737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19742 ;;Total ram usage:        0 bytes
 19743 ;; Hardware stack levels used: 1
 19744 ;; Hardware stack levels required when called: 6
 19745 ;; This function calls:
 19746 ;;		_I2C1_MasterSendNack
 19747 ;; This function is called by:
 19748 ;;		_I2C1_DO_RX
 19749 ;;		_I2C1_MasterFsm
 19750 ;; This function uses a non-reentrant model
 19751 ;;
 19752                           
 19753     114E                     _I2C1_DO_RX_NACK_RESTART:	
 19754                           ;psect for function _I2C1_DO_RX_NACK_RESTART
 19755                           
 19756                           
 19757                           ;mcc_generated_files/i2c1_master.c: 490:     I2C1_MasterSendNack();
 19758                           
 19759                           ;incstack = 0
 19760                           ; Regs used in _I2C1_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 19761     114E  3191  212E         	fcall	_I2C1_MasterSendNack
 19762                           
 19763                           ;mcc_generated_files/i2c1_master.c: 491:     return I2C1_SEND_RESTART;
 19764     1150  3009               	movlw	9
 19765     1151  0008               	return
 19766     1152                     __end_of_I2C1_DO_RX_NACK_RESTART:
 19767                           
 19768                           	psect	text92
 19769     114A                     __ptext92:	
 19770 ;; *************** function _I2C1_DO_RX_NACK_STOP *****************
 19771 ;; Defined at:
 19772 ;;		line 482 in file "mcc_generated_files/i2c1_master.c"
 19773 ;; Parameters:    Size  Location     Type
 19774 ;;		None
 19775 ;; Auto vars:     Size  Location     Type
 19776 ;;		None
 19777 ;; Return value:  Size  Location     Type
 19778 ;;                  1    wreg      enum E10731
 19779 ;; Registers used:
 19780 ;;		wreg, status,2, status,0, pclath, cstack
 19781 ;; Tracked objects:
 19782 ;;		On entry : 3F/0
 19783 ;;		On exit  : 3F/3
 19784 ;;		Unchanged: 0/0
 19785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19790 ;;Total ram usage:        0 bytes
 19791 ;; Hardware stack levels used: 1
 19792 ;; Hardware stack levels required when called: 6
 19793 ;; This function calls:
 19794 ;;		_I2C1_MasterSendNack
 19795 ;; This function is called by:
 19796 ;;		_I2C1_DO_RX
 19797 ;;		_I2C1_MasterFsm
 19798 ;; This function uses a non-reentrant model
 19799 ;;
 19800                           
 19801     114A                     _I2C1_DO_RX_NACK_STOP:	
 19802                           ;psect for function _I2C1_DO_RX_NACK_STOP
 19803                           
 19804                           
 19805                           ;mcc_generated_files/i2c1_master.c: 484:     I2C1_MasterSendNack();
 19806                           
 19807                           ;incstack = 0
 19808                           ; Regs used in _I2C1_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 19809     114A  3191  212E         	fcall	_I2C1_MasterSendNack
 19810                           
 19811                           ;mcc_generated_files/i2c1_master.c: 485:     return I2C1_SEND_STOP;
 19812     114C  300A               	movlw	10
 19813     114D  0008               	return
 19814     114E                     __end_of_I2C1_DO_RX_NACK_STOP:
 19815                           
 19816                           	psect	text93
 19817     1146                     __ptext93:	
 19818 ;; *************** function _I2C1_DO_RX_ACK *****************
 19819 ;; Defined at:
 19820 ;;		line 475 in file "mcc_generated_files/i2c1_master.c"
 19821 ;; Parameters:    Size  Location     Type
 19822 ;;		None
 19823 ;; Auto vars:     Size  Location     Type
 19824 ;;		None
 19825 ;; Return value:  Size  Location     Type
 19826 ;;                  1    wreg      enum E10731
 19827 ;; Registers used:
 19828 ;;		wreg, status,2, status,0, pclath, cstack
 19829 ;; Tracked objects:
 19830 ;;		On entry : 3F/0
 19831 ;;		On exit  : 3F/3
 19832 ;;		Unchanged: 0/0
 19833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19838 ;;Total ram usage:        0 bytes
 19839 ;; Hardware stack levels used: 1
 19840 ;; Hardware stack levels required when called: 6
 19841 ;; This function calls:
 19842 ;;		_I2C1_MasterSendAck
 19843 ;; This function is called by:
 19844 ;;		_I2C1_MasterFsm
 19845 ;; This function uses a non-reentrant model
 19846 ;;
 19847                           
 19848     1146                     _I2C1_DO_RX_ACK:	
 19849                           ;psect for function _I2C1_DO_RX_ACK
 19850                           
 19851                           
 19852                           ;mcc_generated_files/i2c1_master.c: 477:     I2C1_MasterSendAck();
 19853                           
 19854                           ;incstack = 0
 19855                           ; Regs used in _I2C1_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 19856     1146  3191  2132         	fcall	_I2C1_MasterSendAck
 19857                           
 19858                           ;mcc_generated_files/i2c1_master.c: 478:     return I2C1_RCEN;
 19859     1148  3005               	movlw	5
 19860     1149  0008               	return
 19861     114A                     __end_of_I2C1_DO_RX_ACK:
 19862                           
 19863                           	psect	text94
 19864     1142                     __ptext94:	
 19865 ;; *************** function _I2C1_DO_SEND_STOP *****************
 19866 ;; Defined at:
 19867 ;;		line 469 in file "mcc_generated_files/i2c1_master.c"
 19868 ;; Parameters:    Size  Location     Type
 19869 ;;		None
 19870 ;; Auto vars:     Size  Location     Type
 19871 ;;		None
 19872 ;; Return value:  Size  Location     Type
 19873 ;;                  1    wreg      enum E10731
 19874 ;; Registers used:
 19875 ;;		wreg, status,2, status,0, pclath, cstack
 19876 ;; Tracked objects:
 19877 ;;		On entry : 3F/0
 19878 ;;		On exit  : 3F/3
 19879 ;;		Unchanged: 0/0
 19880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19885 ;;Total ram usage:        0 bytes
 19886 ;; Hardware stack levels used: 1
 19887 ;; Hardware stack levels required when called: 6
 19888 ;; This function calls:
 19889 ;;		_I2C1_MasterStop
 19890 ;; This function is called by:
 19891 ;;		_I2C1_DO_TX
 19892 ;;		_I2C1_DO_TX_EMPTY
 19893 ;;		_I2C1_DO_ADDRESS_NACK
 19894 ;;		_I2C1_MasterFsm
 19895 ;; This function uses a non-reentrant model
 19896 ;;
 19897                           
 19898     1142                     _I2C1_DO_SEND_STOP:	
 19899                           ;psect for function _I2C1_DO_SEND_STOP
 19900                           
 19901                           
 19902                           ;mcc_generated_files/i2c1_master.c: 471:     I2C1_MasterStop();
 19903                           
 19904                           ;incstack = 0
 19905                           ; Regs used in _I2C1_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 19906     1142  3191  2117         	fcall	_I2C1_MasterStop
 19907                           
 19908                           ;mcc_generated_files/i2c1_master.c: 472:     return I2C1_IDLE;
 19909     1144  3000               	movlw	0
 19910     1145  0008               	return
 19911     1146                     __end_of_I2C1_DO_SEND_STOP:
 19912                           
 19913                           	psect	text95
 19914     113E                     __ptext95:	
 19915 ;; *************** function _I2C1_DO_SEND_RESTART *****************
 19916 ;; Defined at:
 19917 ;;		line 463 in file "mcc_generated_files/i2c1_master.c"
 19918 ;; Parameters:    Size  Location     Type
 19919 ;;		None
 19920 ;; Auto vars:     Size  Location     Type
 19921 ;;		None
 19922 ;; Return value:  Size  Location     Type
 19923 ;;                  1    wreg      enum E10731
 19924 ;; Registers used:
 19925 ;;		wreg, status,2, status,0, pclath, cstack
 19926 ;; Tracked objects:
 19927 ;;		On entry : 3F/0
 19928 ;;		On exit  : 3F/3
 19929 ;;		Unchanged: 0/0
 19930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19935 ;;Total ram usage:        0 bytes
 19936 ;; Hardware stack levels used: 1
 19937 ;; Hardware stack levels required when called: 6
 19938 ;; This function calls:
 19939 ;;		_I2C1_MasterEnableRestart
 19940 ;; This function is called by:
 19941 ;;		_I2C1_DO_TX_EMPTY
 19942 ;;		_I2C1_DO_ADDRESS_NACK
 19943 ;;		_I2C1_MasterFsm
 19944 ;; This function uses a non-reentrant model
 19945 ;;
 19946                           
 19947     113E                     _I2C1_DO_SEND_RESTART:	
 19948                           ;psect for function _I2C1_DO_SEND_RESTART
 19949                           
 19950                           
 19951                           ;mcc_generated_files/i2c1_master.c: 465:     I2C1_MasterEnableRestart();
 19952                           
 19953                           ;incstack = 0
 19954                           ; Regs used in _I2C1_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 19955     113E  3191  2114         	fcall	_I2C1_MasterEnableRestart
 19956                           
 19957                           ;mcc_generated_files/i2c1_master.c: 466:     return I2C1_SEND_ADR_READ;
 19958     1140  3001               	movlw	1
 19959     1141  0008               	return
 19960     1142                     __end_of_I2C1_DO_SEND_RESTART:
 19961                           
 19962                           	psect	text96
 19963     113A                     __ptext96:	
 19964 ;; *************** function _I2C1_DO_SEND_RESTART_WRITE *****************
 19965 ;; Defined at:
 19966 ;;		line 456 in file "mcc_generated_files/i2c1_master.c"
 19967 ;; Parameters:    Size  Location     Type
 19968 ;;		None
 19969 ;; Auto vars:     Size  Location     Type
 19970 ;;		None
 19971 ;; Return value:  Size  Location     Type
 19972 ;;                  1    wreg      enum E10731
 19973 ;; Registers used:
 19974 ;;		wreg, status,2, status,0, pclath, cstack
 19975 ;; Tracked objects:
 19976 ;;		On entry : 3F/0
 19977 ;;		On exit  : 3F/3
 19978 ;;		Unchanged: 0/0
 19979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19984 ;;Total ram usage:        0 bytes
 19985 ;; Hardware stack levels used: 1
 19986 ;; Hardware stack levels required when called: 6
 19987 ;; This function calls:
 19988 ;;		_I2C1_MasterEnableRestart
 19989 ;; This function is called by:
 19990 ;;		_I2C1_DO_TX
 19991 ;;		_I2C1_MasterFsm
 19992 ;; This function uses a non-reentrant model
 19993 ;;
 19994                           
 19995     113A                     _I2C1_DO_SEND_RESTART_WRITE:	
 19996                           ;psect for function _I2C1_DO_SEND_RESTART_WRITE
 19997                           
 19998                           
 19999                           ;mcc_generated_files/i2c1_master.c: 458:     I2C1_MasterEnableRestart();
 20000                           
 20001                           ;incstack = 0
 20002                           ; Regs used in _I2C1_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 20003     113A  3191  2114         	fcall	_I2C1_MasterEnableRestart
 20004                           
 20005                           ;mcc_generated_files/i2c1_master.c: 459:     return I2C1_SEND_ADR_WRITE;
 20006     113C  3002               	movlw	2
 20007     113D  0008               	return
 20008     113E                     __end_of_I2C1_DO_SEND_RESTART_WRITE:
 20009                           
 20010                           	psect	text97
 20011     1136                     __ptext97:	
 20012 ;; *************** function _I2C1_DO_SEND_RESTART_READ *****************
 20013 ;; Defined at:
 20014 ;;		line 450 in file "mcc_generated_files/i2c1_master.c"
 20015 ;; Parameters:    Size  Location     Type
 20016 ;;		None
 20017 ;; Auto vars:     Size  Location     Type
 20018 ;;		None
 20019 ;; Return value:  Size  Location     Type
 20020 ;;                  1    wreg      enum E10731
 20021 ;; Registers used:
 20022 ;;		wreg, status,2, status,0, pclath, cstack
 20023 ;; Tracked objects:
 20024 ;;		On entry : 3F/0
 20025 ;;		On exit  : 3F/3
 20026 ;;		Unchanged: 0/0
 20027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20032 ;;Total ram usage:        0 bytes
 20033 ;; Hardware stack levels used: 1
 20034 ;; Hardware stack levels required when called: 6
 20035 ;; This function calls:
 20036 ;;		_I2C1_MasterEnableRestart
 20037 ;; This function is called by:
 20038 ;;		_I2C1_DO_TX
 20039 ;;		_I2C1_MasterFsm
 20040 ;; This function uses a non-reentrant model
 20041 ;;
 20042                           
 20043     1136                     _I2C1_DO_SEND_RESTART_READ:	
 20044                           ;psect for function _I2C1_DO_SEND_RESTART_READ
 20045                           
 20046                           
 20047                           ;mcc_generated_files/i2c1_master.c: 452:     I2C1_MasterEnableRestart();
 20048                           
 20049                           ;incstack = 0
 20050                           ; Regs used in _I2C1_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 20051     1136  3191  2114         	fcall	_I2C1_MasterEnableRestart
 20052                           
 20053                           ;mcc_generated_files/i2c1_master.c: 453:     return I2C1_SEND_ADR_READ;
 20054     1138  3001               	movlw	1
 20055     1139  0008               	return
 20056     113A                     __end_of_I2C1_DO_SEND_RESTART_READ:
 20057                           
 20058                           	psect	text98
 20059     1186                     __ptext98:	
 20060 ;; *************** function _I2C1_DO_RCEN *****************
 20061 ;; Defined at:
 20062 ;;		line 402 in file "mcc_generated_files/i2c1_master.c"
 20063 ;; Parameters:    Size  Location     Type
 20064 ;;		None
 20065 ;; Auto vars:     Size  Location     Type
 20066 ;;		None
 20067 ;; Return value:  Size  Location     Type
 20068 ;;                  1    wreg      enum E10731
 20069 ;; Registers used:
 20070 ;;		wreg, status,2, status,0, pclath, cstack
 20071 ;; Tracked objects:
 20072 ;;		On entry : 3F/0
 20073 ;;		On exit  : 3F/3
 20074 ;;		Unchanged: 0/0
 20075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20080 ;;Total ram usage:        0 bytes
 20081 ;; Hardware stack levels used: 1
 20082 ;; Hardware stack levels required when called: 6
 20083 ;; This function calls:
 20084 ;;		_I2C1_MasterStartRx
 20085 ;; This function is called by:
 20086 ;;		_I2C1_MasterFsm
 20087 ;; This function uses a non-reentrant model
 20088 ;;
 20089                           
 20090     1186                     _I2C1_DO_RCEN:	
 20091                           ;psect for function _I2C1_DO_RCEN
 20092                           
 20093                           
 20094                           ;mcc_generated_files/i2c1_master.c: 404:     I2C1_Status.addressNackCheck = 0;
 20095                           
 20096                           ;incstack = 0
 20097                           ; Regs used in _I2C1_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 20098     1186  0142               	movlb	2	; select bank2
 20099     1187  103D               	bcf	(_I2C1_Status^(0+256)+29),0
 20100                           
 20101                           ;mcc_generated_files/i2c1_master.c: 405:     I2C1_MasterStartRx();
 20102     1188  3191  211A         	fcall	_I2C1_MasterStartRx
 20103                           
 20104                           ;mcc_generated_files/i2c1_master.c: 406:     return I2C1_RX;
 20105     118A  3004               	movlw	4
 20106     118B  0008               	return
 20107     118C                     __end_of_I2C1_DO_RCEN:
 20108                           
 20109                           	psect	text99
 20110     0916                     __ptext99:	
 20111 ;; *************** function _I2C1_DO_RX *****************
 20112 ;; Defined at:
 20113 ;;		line 378 in file "mcc_generated_files/i2c1_master.c"
 20114 ;; Parameters:    Size  Location     Type
 20115 ;;		None
 20116 ;; Auto vars:     Size  Location     Type
 20117 ;;		None
 20118 ;; Return value:  Size  Location     Type
 20119 ;;                  1    wreg      enum E10731
 20120 ;; Registers used:
 20121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20122 ;; Tracked objects:
 20123 ;;		On entry : 3F/0
 20124 ;;		On exit  : 3F/3
 20125 ;;		Unchanged: 0/0
 20126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20130 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20131 ;;Total ram usage:        2 bytes
 20132 ;; Hardware stack levels used: 1
 20133 ;; Hardware stack levels required when called: 8
 20134 ;; This function calls:
 20135 ;;		NULL
 20136 ;;		_I2C1_CallbackReturnReset
 20137 ;;		_I2C1_CallbackReturnStop
 20138 ;;		_I2C1_DO_RX_NACK_RESTART
 20139 ;;		_I2C1_DO_RX_NACK_STOP
 20140 ;;		_I2C1_MasterGetRxData
 20141 ;;		_I2C1_MasterSendAck
 20142 ;;		_rd1RegCompleteHandler
 20143 ;;		_rd2RegCompleteHandler
 20144 ;;		_rdBlkRegCompleteHandler
 20145 ;;		_wr1RegCompleteHandler
 20146 ;;		_wr2RegCompleteHandler
 20147 ;; This function is called by:
 20148 ;;		_I2C1_MasterFsm
 20149 ;; This function uses a non-reentrant model
 20150 ;;
 20151                           
 20152     0916                     _I2C1_DO_RX:	
 20153                           ;psect for function _I2C1_DO_RX
 20154                           
 20155                           
 20156                           ;mcc_generated_files/i2c1_master.c: 380:     *I2C1_Status.data_ptr++ = I2C1_MasterGetRxD
      +                          ata();
 20157                           
 20158                           ;incstack = 0
 20159                           ; Regs used in _I2C1_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20160     0916  0142               	movlb	2	; select bank2
 20161     0917  0837               	movf	(_I2C1_Status^(0+256)+23),w
 20162     0918  0086               	movwf	6
 20163     0919  0838               	movf	((_I2C1_Status+1)^(0+256)+23),w
 20164     091A  0087               	movwf	7
 20165     091B  3191  211D  3189   	fcall	_I2C1_MasterGetRxData
 20166     091E  0081               	movwf	1
 20167     091F  3001               	movlw	1
 20168     0920  0142               	movlb	2	; select bank2
 20169     0921  07B7               	addwf	(_I2C1_Status^(0+256)+23),f
 20170     0922  3000               	movlw	0
 20171     0923  3DB8               	addwfc	((_I2C1_Status+1)^(0+256)+23),f
 20172                           
 20173                           ;mcc_generated_files/i2c1_master.c: 381:     if(--I2C1_Status.data_length)
 20174     0924  3001               	movlw	1
 20175     0925  02B9               	subwf	(_I2C1_Status^(0+256)+25),f
 20176     0926  3000               	movlw	0
 20177     0927  3BBA               	subwfb	((_I2C1_Status+1)^(0+256)+25),f
 20178     0928  0839               	movf	(_I2C1_Status^(0+256)+25),w
 20179     0929  043A               	iorwf	((_I2C1_Status+1)^(0+256)+25),w
 20180     092A  1903               	btfsc	3,2
 20181     092B  2930               	goto	l719
 20182                           
 20183                           ;mcc_generated_files/i2c1_master.c: 382:     {;mcc_generated_files/i2c1_master.c: 383:  
      +                                 I2C1_MasterSendAck();
 20184     092C  3191  2132         	fcall	_I2C1_MasterSendAck
 20185                           
 20186                           ;mcc_generated_files/i2c1_master.c: 384:         return I2C1_RCEN;
 20187     092E  3005               	movlw	5
 20188     092F  0008               	return
 20189     0930                     l719:	
 20190                           ;mcc_generated_files/i2c1_master.c: 386:     else
 20191                           
 20192                           
 20193                           ;mcc_generated_files/i2c1_master.c: 387:     {;mcc_generated_files/i2c1_master.c: 388:  
      +                                 I2C1_Status.bufferFree = 1;
 20194     0930  15BD               	bsf	(_I2C1_Status^(0+256)+29),3
 20195                           
 20196                           ;mcc_generated_files/i2c1_master.c: 389:         switch(I2C1_Status.callbackTable[I2C1_D
      +                          ATA_COMPLETE](I2C1_Status.callbackPayload[I2C1_DATA_COMPLETE]))
 20197     0931  2938               	goto	l6763
 20198     0932                     l6753:
 20199                           
 20200                           ;mcc_generated_files/i2c1_master.c: 393:                 return I2C1_DO_RX_NACK_RESTART(
      +                          );
 20201     0932  3191  214E         	fcall	_I2C1_DO_RX_NACK_RESTART
 20202     0934  0008               	return
 20203     0935                     l6757:
 20204                           
 20205                           ;mcc_generated_files/i2c1_master.c: 397:                 return I2C1_DO_RX_NACK_STOP();
 20206     0935  3191  214A         	fcall	_I2C1_DO_RX_NACK_STOP
 20207     0937  0008               	return
 20208     0938                     l6763:
 20209     0938  082C               	movf	(_I2C1_Status^(0+256)+12),w
 20210     0939  0140               	movlb	0	; select bank0
 20211     093A  00A9               	movwf	I2C1_CallbackReturnReset@funPtr
 20212     093B  0142               	movlb	2	; select bank2
 20213     093C  0821               	movf	(_I2C1_Status+1)^(0+256),w
 20214     093D  008A               	movwf	10
 20215     093E  0820               	movf	_I2C1_Status^(0+256),w
 20216     093F  000A               	callw
 20217     0940  3189               	pagesel	$
 20218     0941  0140               	movlb	0	; select bank0
 20219     0942  00AA               	movwf	??_I2C1_DO_RX
 20220     0943  01AB               	clrf	??_I2C1_DO_RX+1
 20221                           
 20222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20223                           ; Switch size 1, requested type "simple"
 20224                           ; Number of cases is 1, Range of values is 0 to 0
 20225                           ; switch strategies available:
 20226                           ; Name         Instructions Cycles
 20227                           ; simple_byte            4     3 (average)
 20228                           ; direct_byte            8     6 (fixed)
 20229                           ; jumptable            260     6 (fixed)
 20230                           ;	Chosen strategy is simple_byte
 20231     0944  082B               	movf	??_I2C1_DO_RX+1,w
 20232     0945  3A00               	xorlw	0	; case 0
 20233     0946  1903               	skipnz
 20234     0947  2949               	goto	l8573
 20235     0948  2935               	goto	l6757
 20236     0949                     l8573:
 20237                           
 20238                           ; Switch size 1, requested type "simple"
 20239                           ; Number of cases is 4, Range of values is 1 to 4
 20240                           ; switch strategies available:
 20241                           ; Name         Instructions Cycles
 20242                           ; simple_byte           13     7 (average)
 20243                           ; direct_byte           17     9 (fixed)
 20244                           ; jumptable            263     9 (fixed)
 20245                           ;	Chosen strategy is simple_byte
 20246     0949  082A               	movf	??_I2C1_DO_RX,w
 20247     094A  3A01               	xorlw	1	; case 1
 20248     094B  1903               	skipnz
 20249     094C  2935               	goto	l6757
 20250     094D  3A03               	xorlw	3	; case 2
 20251     094E  1903               	skipnz
 20252     094F  2932               	goto	l6753
 20253     0950  3A01               	xorlw	1	; case 3
 20254     0951  1903               	skipnz
 20255     0952  2932               	goto	l6753
 20256     0953  3A07               	xorlw	7	; case 4
 20257     0954  1903               	skipnz
 20258     0955  2935               	goto	l6757
 20259     0956  2935               	goto	l6757
 20260     0957  0008               	return
 20261     0958                     __end_of_I2C1_DO_RX:
 20262                           
 20263                           	psect	text100
 20264     0BD6                     __ptext100:	
 20265 ;; *************** function _I2C1_DO_TX *****************
 20266 ;; Defined at:
 20267 ;;		line 354 in file "mcc_generated_files/i2c1_master.c"
 20268 ;; Parameters:    Size  Location     Type
 20269 ;;		None
 20270 ;; Auto vars:     Size  Location     Type
 20271 ;;		None
 20272 ;; Return value:  Size  Location     Type
 20273 ;;                  1    wreg      enum E10731
 20274 ;; Registers used:
 20275 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20276 ;; Tracked objects:
 20277 ;;		On entry : 3F/0
 20278 ;;		On exit  : 3E/2
 20279 ;;		Unchanged: 0/0
 20280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20283 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20284 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20285 ;;Total ram usage:        2 bytes
 20286 ;; Hardware stack levels used: 1
 20287 ;; Hardware stack levels required when called: 8
 20288 ;; This function calls:
 20289 ;;		NULL
 20290 ;;		_I2C1_CallbackReturnReset
 20291 ;;		_I2C1_CallbackReturnStop
 20292 ;;		_I2C1_DO_SEND_RESTART_READ
 20293 ;;		_I2C1_DO_SEND_RESTART_WRITE
 20294 ;;		_I2C1_DO_SEND_STOP
 20295 ;;		_I2C1_MasterIsNack
 20296 ;;		_I2C1_MasterSendTxData
 20297 ;;		_rd1RegCompleteHandler
 20298 ;;		_rd2RegCompleteHandler
 20299 ;;		_rdBlkRegCompleteHandler
 20300 ;;		_wr1RegCompleteHandler
 20301 ;;		_wr2RegCompleteHandler
 20302 ;; This function is called by:
 20303 ;;		_I2C1_MasterFsm
 20304 ;; This function uses a non-reentrant model
 20305 ;;
 20306                           
 20307     0BD6                     _I2C1_DO_TX:	
 20308                           ;psect for function _I2C1_DO_TX
 20309                           
 20310                           
 20311                           ;mcc_generated_files/i2c1_master.c: 356:     if(I2C1_MasterIsNack())
 20312                           
 20313                           ;incstack = 0
 20314                           ; Regs used in _I2C1_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20315     0BD6  3191  2180  318B   	fcall	_I2C1_MasterIsNack
 20316     0BD9  3A00               	xorlw	0
 20317     0BDA  1D03               	btfss	3,2
 20318     0BDB  2BE6               	goto	l6723
 20319     0BDC  2C0A               	goto	l703
 20320     0BDD                     l6709:
 20321                           
 20322                           ;mcc_generated_files/i2c1_master.c: 361:                 return I2C1_DO_SEND_RESTART_REA
      +                          D();
 20323     0BDD  3191  2136         	fcall	_I2C1_DO_SEND_RESTART_READ
 20324     0BDF  0008               	return
 20325     0BE0                     l6713:
 20326                           
 20327                           ;mcc_generated_files/i2c1_master.c: 363:                   return I2C1_DO_SEND_RESTART_W
      +                          RITE();
 20328     0BE0  3191  213A         	fcall	_I2C1_DO_SEND_RESTART_WRITE
 20329     0BE2  0008               	return
 20330     0BE3                     l6717:
 20331                           
 20332                           ;mcc_generated_files/i2c1_master.c: 367:                 return I2C1_DO_SEND_STOP();
 20333     0BE3  3191  2142         	fcall	_I2C1_DO_SEND_STOP
 20334     0BE5  0008               	return
 20335     0BE6                     l6723:
 20336     0BE6  0142               	movlb	2	; select bank2
 20337     0BE7  082F               	movf	(_I2C1_Status^(0+256)+15),w
 20338     0BE8  0140               	movlb	0	; select bank0
 20339     0BE9  00A9               	movwf	I2C1_CallbackReturnReset@funPtr
 20340     0BEA  3020               	movlw	low _I2C1_Status
 20341     0BEB  0086               	movwf	6
 20342     0BEC  3001               	movlw	high _I2C1_Status
 20343     0BED  0087               	movwf	7
 20344     0BEE  3146               	addfsr 1,6
 20345     0BEF  3F41               	moviw [1]fsr1
 20346     0BF0  008A               	movwf	10
 20347     0BF1  3F40               	moviw [0]fsr1
 20348     0BF2  000A               	callw
 20349     0BF3  318B               	pagesel	$
 20350     0BF4  0140               	movlb	0	; select bank0
 20351     0BF5  00AA               	movwf	??_I2C1_DO_TX
 20352     0BF6  01AB               	clrf	??_I2C1_DO_TX+1
 20353                           
 20354                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20355                           ; Switch size 1, requested type "simple"
 20356                           ; Number of cases is 1, Range of values is 0 to 0
 20357                           ; switch strategies available:
 20358                           ; Name         Instructions Cycles
 20359                           ; simple_byte            4     3 (average)
 20360                           ; direct_byte            8     6 (fixed)
 20361                           ; jumptable            260     6 (fixed)
 20362                           ;	Chosen strategy is simple_byte
 20363     0BF7  082B               	movf	??_I2C1_DO_TX+1,w
 20364     0BF8  3A00               	xorlw	0	; case 0
 20365     0BF9  1903               	skipnz
 20366     0BFA  2BFC               	goto	l8575
 20367     0BFB  2BE3               	goto	l6717
 20368     0BFC                     l8575:
 20369                           
 20370                           ; Switch size 1, requested type "simple"
 20371                           ; Number of cases is 4, Range of values is 1 to 4
 20372                           ; switch strategies available:
 20373                           ; Name         Instructions Cycles
 20374                           ; simple_byte           13     7 (average)
 20375                           ; direct_byte           17     9 (fixed)
 20376                           ; jumptable            263     9 (fixed)
 20377                           ;	Chosen strategy is simple_byte
 20378     0BFC  082A               	movf	??_I2C1_DO_TX,w
 20379     0BFD  3A01               	xorlw	1	; case 1
 20380     0BFE  1903               	skipnz
 20381     0BFF  2BE3               	goto	l6717
 20382     0C00  3A03               	xorlw	3	; case 2
 20383     0C01  1903               	skipnz
 20384     0C02  2BDD               	goto	l6709
 20385     0C03  3A01               	xorlw	1	; case 3
 20386     0C04  1903               	skipnz
 20387     0C05  2BE0               	goto	l6713
 20388     0C06  3A07               	xorlw	7	; case 4
 20389     0C07  1903               	skipnz
 20390     0C08  2BE3               	goto	l6717
 20391     0C09  2BE3               	goto	l6717
 20392     0C0A                     l703:	
 20393                           ;mcc_generated_files/i2c1_master.c: 370:     else
 20394                           
 20395                           
 20396                           ;mcc_generated_files/i2c1_master.c: 371:     {;mcc_generated_files/i2c1_master.c: 372:  
      +                                 I2C1_Status.addressNackCheck = 0;
 20397     0C0A  0142               	movlb	2	; select bank2
 20398     0C0B  103D               	bcf	(_I2C1_Status^(0+256)+29),0
 20399                           
 20400                           ;mcc_generated_files/i2c1_master.c: 373:         I2C1_MasterSendTxData(*I2C1_Status.data
      +                          _ptr++);
 20401     0C0C  0838               	movf	((_I2C1_Status+1)^(0+256)+23),w
 20402     0C0D  0087               	movwf	7
 20403     0C0E  0837               	movf	(_I2C1_Status^(0+256)+23),w
 20404     0C0F  0086               	movwf	6
 20405     0C10  0AB7               	incf	(_I2C1_Status^(0+256)+23),f
 20406     0C11  1903               	skipnz
 20407     0C12  0AB8               	incf	((_I2C1_Status+1)^(0+256)+23),f
 20408     0C13  0801               	movf	1,w
 20409     0C14  3191  217A  318B   	fcall	_I2C1_MasterSendTxData
 20410                           
 20411                           ;mcc_generated_files/i2c1_master.c: 374:         return (--I2C1_Status.data_length)?I2C1
      +                          _TX:I2C1_TX_EMPTY;
 20412     0C17  3001               	movlw	1
 20413     0C18  0142               	movlb	2	; select bank2
 20414     0C19  02B9               	subwf	(_I2C1_Status^(0+256)+25),f
 20415     0C1A  3000               	movlw	0
 20416     0C1B  3BBA               	subwfb	((_I2C1_Status+1)^(0+256)+25),f
 20417     0C1C  0839               	movf	(_I2C1_Status^(0+256)+25),w
 20418     0C1D  043A               	iorwf	((_I2C1_Status+1)^(0+256)+25),w
 20419     0C1E  1D03               	btfss	3,2
 20420     0C1F  2C22               	goto	l6731
 20421     0C20  3006               	movlw	6
 20422     0C21  0008               	return
 20423     0C22                     l6731:
 20424     0C22  3003               	movlw	3
 20425     0C23  0008               	return
 20426     0C24                     __end_of_I2C1_DO_TX:
 20427                           
 20428                           	psect	text101
 20429     1198                     __ptext101:	
 20430 ;; *************** function _I2C1_DO_SEND_ADR_WRITE *****************
 20431 ;; Defined at:
 20432 ;;		line 347 in file "mcc_generated_files/i2c1_master.c"
 20433 ;; Parameters:    Size  Location     Type
 20434 ;;		None
 20435 ;; Auto vars:     Size  Location     Type
 20436 ;;		None
 20437 ;; Return value:  Size  Location     Type
 20438 ;;                  1    wreg      enum E10731
 20439 ;; Registers used:
 20440 ;;		wreg, status,2, status,0, pclath, cstack
 20441 ;; Tracked objects:
 20442 ;;		On entry : 3F/0
 20443 ;;		On exit  : 3F/3
 20444 ;;		Unchanged: 0/0
 20445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20450 ;;Total ram usage:        0 bytes
 20451 ;; Hardware stack levels used: 1
 20452 ;; Hardware stack levels required when called: 6
 20453 ;; This function calls:
 20454 ;;		_I2C1_MasterSendTxData
 20455 ;; This function is called by:
 20456 ;;		_I2C1_MasterFsm
 20457 ;; This function uses a non-reentrant model
 20458 ;;
 20459                           
 20460     1198                     _I2C1_DO_SEND_ADR_WRITE:	
 20461                           ;psect for function _I2C1_DO_SEND_ADR_WRITE
 20462                           
 20463                           
 20464                           ;mcc_generated_files/i2c1_master.c: 349:     I2C1_Status.addressNackCheck = 1;
 20465                           
 20466                           ;incstack = 0
 20467                           ; Regs used in _I2C1_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 20468     1198  0142               	movlb	2	; select bank2
 20469     1199  143D               	bsf	(_I2C1_Status^(0+256)+29),0
 20470                           
 20471                           ;mcc_generated_files/i2c1_master.c: 350:     I2C1_MasterSendTxData(I2C1_Status.address <
      +                          < 1);
 20472     119A  3536               	lslf	(_I2C1_Status^(0+256)+22),w
 20473     119B  3191  217A         	fcall	_I2C1_MasterSendTxData
 20474                           
 20475                           ;mcc_generated_files/i2c1_master.c: 351:     return I2C1_TX;
 20476     119D  3003               	movlw	3
 20477     119E  0008               	return
 20478     119F                     __end_of_I2C1_DO_SEND_ADR_WRITE:
 20479                           
 20480                           	psect	text102
 20481     119F                     __ptext102:	
 20482 ;; *************** function _I2C1_DO_SEND_ADR_READ *****************
 20483 ;; Defined at:
 20484 ;;		line 340 in file "mcc_generated_files/i2c1_master.c"
 20485 ;; Parameters:    Size  Location     Type
 20486 ;;		None
 20487 ;; Auto vars:     Size  Location     Type
 20488 ;;		None
 20489 ;; Return value:  Size  Location     Type
 20490 ;;                  1    wreg      enum E10731
 20491 ;; Registers used:
 20492 ;;		wreg, status,2, status,0, pclath, cstack
 20493 ;; Tracked objects:
 20494 ;;		On entry : 3F/0
 20495 ;;		On exit  : 3F/3
 20496 ;;		Unchanged: 0/0
 20497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20502 ;;Total ram usage:        0 bytes
 20503 ;; Hardware stack levels used: 1
 20504 ;; Hardware stack levels required when called: 6
 20505 ;; This function calls:
 20506 ;;		_I2C1_MasterSendTxData
 20507 ;; This function is called by:
 20508 ;;		_I2C1_MasterFsm
 20509 ;; This function uses a non-reentrant model
 20510 ;;
 20511                           
 20512     119F                     _I2C1_DO_SEND_ADR_READ:	
 20513                           ;psect for function _I2C1_DO_SEND_ADR_READ
 20514                           
 20515                           
 20516                           ;mcc_generated_files/i2c1_master.c: 342:     I2C1_Status.addressNackCheck = 1;
 20517                           
 20518                           ;incstack = 0
 20519                           ; Regs used in _I2C1_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 20520     119F  0142               	movlb	2	; select bank2
 20521     11A0  143D               	bsf	(_I2C1_Status^(0+256)+29),0
 20522                           
 20523                           ;mcc_generated_files/i2c1_master.c: 343:     I2C1_MasterSendTxData(I2C1_Status.address <
      +                          < 1 | 1);
 20524     11A1  1403               	setc
 20525     11A2  0D36               	rlf	(_I2C1_Status^(0+256)+22),w
 20526     11A3  3191  217A         	fcall	_I2C1_MasterSendTxData
 20527                           
 20528                           ;mcc_generated_files/i2c1_master.c: 344:     return I2C1_RCEN;
 20529     11A5  3005               	movlw	5
 20530     11A6  0008               	return
 20531     11A7                     __end_of_I2C1_DO_SEND_ADR_READ:
 20532                           
 20533                           	psect	text103
 20534     116A                     __ptext103:	
 20535 ;; *************** function _I2C1_DO_IDLE *****************
 20536 ;; Defined at:
 20537 ;;		line 333 in file "mcc_generated_files/i2c1_master.c"
 20538 ;; Parameters:    Size  Location     Type
 20539 ;;		None
 20540 ;; Auto vars:     Size  Location     Type
 20541 ;;		None
 20542 ;; Return value:  Size  Location     Type
 20543 ;;                  1    wreg      enum E10731
 20544 ;; Registers used:
 20545 ;;		wreg, status,2
 20546 ;; Tracked objects:
 20547 ;;		On entry : 3F/0
 20548 ;;		On exit  : 3F/2
 20549 ;;		Unchanged: 0/0
 20550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20555 ;;Total ram usage:        0 bytes
 20556 ;; Hardware stack levels used: 1
 20557 ;; Hardware stack levels required when called: 5
 20558 ;; This function calls:
 20559 ;;		Nothing
 20560 ;; This function is called by:
 20561 ;;		_I2C1_MasterFsm
 20562 ;; This function uses a non-reentrant model
 20563 ;;
 20564                           
 20565     116A                     _I2C1_DO_IDLE:	
 20566                           ;psect for function _I2C1_DO_IDLE
 20567                           
 20568                           
 20569                           ;mcc_generated_files/i2c1_master.c: 335:     I2C1_Status.busy = 0;
 20570                           
 20571                           ;incstack = 0
 20572                           ; Regs used in _I2C1_DO_IDLE: [wreg+status,2]
 20573     116A  0142               	movlb	2	; select bank2
 20574     116B  10BD               	bcf	(_I2C1_Status^(0+256)+29),1
 20575                           
 20576                           ;mcc_generated_files/i2c1_master.c: 336:     I2C1_Status.error = I2C1_NOERR;
 20577     116C  01BC               	clrf	(_I2C1_Status^(0+256)+28)
 20578                           
 20579                           ;mcc_generated_files/i2c1_master.c: 337:     return I2C1_RESET;
 20580     116D  300E               	movlw	14
 20581     116E  0008               	return
 20582     116F                     __end_of_I2C1_DO_IDLE:
 20583                           
 20584                           	psect	text104
 20585     162F                     __ptext104:	
 20586 ;; *************** function _I2C1_DO_TX_EMPTY *****************
 20587 ;; Defined at:
 20588 ;;		line 409 in file "mcc_generated_files/i2c1_master.c"
 20589 ;; Parameters:    Size  Location     Type
 20590 ;;		None
 20591 ;; Auto vars:     Size  Location     Type
 20592 ;;		None
 20593 ;; Return value:  Size  Location     Type
 20594 ;;                  1    wreg      enum E10731
 20595 ;; Registers used:
 20596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20597 ;; Tracked objects:
 20598 ;;		On entry : 3F/0
 20599 ;;		On exit  : 32/2
 20600 ;;		Unchanged: 0/0
 20601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20604 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20606 ;;Total ram usage:        2 bytes
 20607 ;; Hardware stack levels used: 1
 20608 ;; Hardware stack levels required when called: 8
 20609 ;; This function calls:
 20610 ;;		NULL
 20611 ;;		_I2C1_CallbackReturnReset
 20612 ;;		_I2C1_CallbackReturnStop
 20613 ;;		_I2C1_DO_SEND_RESTART
 20614 ;;		_I2C1_DO_SEND_STOP
 20615 ;;		_I2C1_MasterSetIrq
 20616 ;;		_rd1RegCompleteHandler
 20617 ;;		_rd2RegCompleteHandler
 20618 ;;		_rdBlkRegCompleteHandler
 20619 ;;		_wr1RegCompleteHandler
 20620 ;;		_wr2RegCompleteHandler
 20621 ;; This function is called by:
 20622 ;;		_I2C1_MasterFsm
 20623 ;; This function uses a non-reentrant model
 20624 ;;
 20625                           
 20626     162F                     _I2C1_DO_TX_EMPTY:	
 20627                           ;psect for function _I2C1_DO_TX_EMPTY
 20628                           
 20629                           
 20630                           ;mcc_generated_files/i2c1_master.c: 411:     I2C1_Status.bufferFree = 1;
 20631                           
 20632                           ;incstack = 0
 20633                           ; Regs used in _I2C1_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20634     162F  0142               	movlb	2	; select bank2
 20635     1630  15BD               	bsf	(_I2C1_Status^(0+256)+29),3
 20636                           
 20637                           ;mcc_generated_files/i2c1_master.c: 412:     switch(I2C1_Status.callbackTable[I2C1_DATA_
      +                          COMPLETE](I2C1_Status.callbackPayload[I2C1_DATA_COMPLETE]))
 20638     1631  2E3C               	goto	l6795
 20639     1632                     l6779:
 20640                           
 20641                           ;mcc_generated_files/i2c1_master.c: 416:             return I2C1_DO_SEND_RESTART();
 20642     1632  3191  213E         	fcall	_I2C1_DO_SEND_RESTART
 20643     1634  0008               	return
 20644     1635                     l6783:
 20645                           
 20646                           ;mcc_generated_files/i2c1_master.c: 418:             I2C1_MasterSetIrq();
 20647     1635  3191  2120         	fcall	_I2C1_MasterSetIrq
 20648                           
 20649                           ;mcc_generated_files/i2c1_master.c: 419:             return I2C1_TX;
 20650     1637  3003               	movlw	3
 20651     1638  0008               	return
 20652     1639                     l6789:
 20653                           
 20654                           ;mcc_generated_files/i2c1_master.c: 422:             return I2C1_DO_SEND_STOP();
 20655     1639  3191  2142         	fcall	_I2C1_DO_SEND_STOP
 20656     163B  0008               	return
 20657     163C                     l6795:
 20658     163C  082C               	movf	(_I2C1_Status^(0+256)+12),w
 20659     163D  0140               	movlb	0	; select bank0
 20660     163E  00A9               	movwf	I2C1_CallbackReturnReset@funPtr
 20661     163F  0142               	movlb	2	; select bank2
 20662     1640  0821               	movf	(_I2C1_Status+1)^(0+256),w
 20663     1641  008A               	movwf	10
 20664     1642  0820               	movf	_I2C1_Status^(0+256),w
 20665     1643  000A               	callw
 20666     1644  3196               	pagesel	$
 20667     1645  0140               	movlb	0	; select bank0
 20668     1646  00AA               	movwf	??_I2C1_DO_TX_EMPTY
 20669     1647  01AB               	clrf	??_I2C1_DO_TX_EMPTY+1
 20670                           
 20671                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20672                           ; Switch size 1, requested type "simple"
 20673                           ; Number of cases is 1, Range of values is 0 to 0
 20674                           ; switch strategies available:
 20675                           ; Name         Instructions Cycles
 20676                           ; simple_byte            4     3 (average)
 20677                           ; direct_byte            8     6 (fixed)
 20678                           ; jumptable            260     6 (fixed)
 20679                           ;	Chosen strategy is simple_byte
 20680     1648  082B               	movf	??_I2C1_DO_TX_EMPTY+1,w
 20681     1649  3A00               	xorlw	0	; case 0
 20682     164A  1903               	skipnz
 20683     164B  2E4D               	goto	l8577
 20684     164C  2E39               	goto	l6789
 20685     164D                     l8577:
 20686                           
 20687                           ; Switch size 1, requested type "simple"
 20688                           ; Number of cases is 4, Range of values is 1 to 4
 20689                           ; switch strategies available:
 20690                           ; Name         Instructions Cycles
 20691                           ; simple_byte           13     7 (average)
 20692                           ; direct_byte           17     9 (fixed)
 20693                           ; jumptable            263     9 (fixed)
 20694                           ;	Chosen strategy is simple_byte
 20695     164D  082A               	movf	??_I2C1_DO_TX_EMPTY,w
 20696     164E  3A01               	xorlw	1	; case 1
 20697     164F  1903               	skipnz
 20698     1650  2E39               	goto	l6789
 20699     1651  3A03               	xorlw	3	; case 2
 20700     1652  1903               	skipnz
 20701     1653  2E32               	goto	l6779
 20702     1654  3A01               	xorlw	1	; case 3
 20703     1655  1903               	skipnz
 20704     1656  2E32               	goto	l6779
 20705     1657  3A07               	xorlw	7	; case 4
 20706     1658  1903               	skipnz
 20707     1659  2E35               	goto	l6783
 20708     165A  2E39               	goto	l6789
 20709     165B  0008               	return
 20710     165C                     __end_of_I2C1_DO_TX_EMPTY:
 20711                           
 20712                           	psect	text105
 20713     1120                     __ptext105:	
 20714 ;; *************** function _I2C1_MasterSetIrq *****************
 20715 ;; Defined at:
 20716 ;;		line 645 in file "mcc_generated_files/i2c1_master.c"
 20717 ;; Parameters:    Size  Location     Type
 20718 ;;		None
 20719 ;; Auto vars:     Size  Location     Type
 20720 ;;		None
 20721 ;; Return value:  Size  Location     Type
 20722 ;;                  1    wreg      void 
 20723 ;; Registers used:
 20724 ;;		None
 20725 ;; Tracked objects:
 20726 ;;		On entry : 3F/0
 20727 ;;		On exit  : 3F/E
 20728 ;;		Unchanged: 0/0
 20729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20734 ;;Total ram usage:        0 bytes
 20735 ;; Hardware stack levels used: 1
 20736 ;; Hardware stack levels required when called: 5
 20737 ;; This function calls:
 20738 ;;		Nothing
 20739 ;; This function is called by:
 20740 ;;		_I2C1_DO_TX_EMPTY
 20741 ;; This function uses a non-reentrant model
 20742 ;;
 20743                           
 20744     1120                     _I2C1_MasterSetIrq:	
 20745                           ;psect for function _I2C1_MasterSetIrq
 20746                           
 20747                           
 20748                           ;mcc_generated_files/i2c1_master.c: 647:     PIR3bits.SSP1IF = 1;
 20749                           
 20750                           ;incstack = 0
 20751                           ; Regs used in _I2C1_MasterSetIrq: []
 20752     1120  014E               	movlb	14	; select bank14
 20753     1121  140F               	bsf	15,0	;volatile
 20754     1122  0008               	return
 20755     1123                     __end_of_I2C1_MasterSetIrq:
 20756                           
 20757                           	psect	text106
 20758     1180                     __ptext106:	
 20759 ;; *************** function _I2C1_MasterIsNack *****************
 20760 ;; Defined at:
 20761 ;;		line 598 in file "mcc_generated_files/i2c1_master.c"
 20762 ;; Parameters:    Size  Location     Type
 20763 ;;		None
 20764 ;; Auto vars:     Size  Location     Type
 20765 ;;		None
 20766 ;; Return value:  Size  Location     Type
 20767 ;;                  1    wreg      _Bool 
 20768 ;; Registers used:
 20769 ;;		wreg, status,2, status,0
 20770 ;; Tracked objects:
 20771 ;;		On entry : 3D/2
 20772 ;;		On exit  : 3F/3
 20773 ;;		Unchanged: 0/0
 20774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20779 ;;Total ram usage:        0 bytes
 20780 ;; Hardware stack levels used: 1
 20781 ;; Hardware stack levels required when called: 5
 20782 ;; This function calls:
 20783 ;;		Nothing
 20784 ;; This function is called by:
 20785 ;;		_I2C1_MasterFsm
 20786 ;;		_I2C1_DO_TX
 20787 ;; This function uses a non-reentrant model
 20788 ;;
 20789                           
 20790     1180                     _I2C1_MasterIsNack:	
 20791                           ;psect for function _I2C1_MasterIsNack
 20792                           
 20793                           
 20794                           ;mcc_generated_files/i2c1_master.c: 600:     return SSP1CON2bits.ACKSTAT;
 20795                           
 20796                           ;incstack = 0
 20797                           ; Regs used in _I2C1_MasterIsNack: [wreg+status,2+status,0]
 20798     1180  0143               	movlb	3	; select bank3
 20799     1181  0E11               	swapf	17,w	;volatile
 20800     1182  0C89               	rrf	9,f
 20801     1183  0C89               	rrf	9,f
 20802     1184  3901               	andlw	1
 20803     1185  0008               	return
 20804     1186                     __end_of_I2C1_MasterIsNack:
 20805                           
 20806                           	psect	text107
 20807     117A                     __ptext107:	
 20808 ;; *************** function _I2C1_MasterSendTxData *****************
 20809 ;; Defined at:
 20810 ;;		line 568 in file "mcc_generated_files/i2c1_master.c"
 20811 ;; Parameters:    Size  Location     Type
 20812 ;;  data            1    wreg     unsigned char 
 20813 ;; Auto vars:     Size  Location     Type
 20814 ;;  data            1    0[BANK0 ] unsigned char 
 20815 ;; Return value:  Size  Location     Type
 20816 ;;                  1    wreg      void 
 20817 ;; Registers used:
 20818 ;;		wreg
 20819 ;; Tracked objects:
 20820 ;;		On entry : 3F/2
 20821 ;;		On exit  : 3F/3
 20822 ;;		Unchanged: 0/0
 20823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20827 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20828 ;;Total ram usage:        1 bytes
 20829 ;; Hardware stack levels used: 1
 20830 ;; Hardware stack levels required when called: 5
 20831 ;; This function calls:
 20832 ;;		Nothing
 20833 ;; This function is called by:
 20834 ;;		_I2C1_DO_SEND_ADR_READ
 20835 ;;		_I2C1_DO_SEND_ADR_WRITE
 20836 ;;		_I2C1_DO_TX
 20837 ;; This function uses a non-reentrant model
 20838 ;;
 20839                           
 20840     117A                     _I2C1_MasterSendTxData:	
 20841                           ;psect for function _I2C1_MasterSendTxData
 20842                           
 20843                           
 20844                           ;incstack = 0
 20845                           ; Regs used in _I2C1_MasterSendTxData: [wreg]
 20846                           ;I2C1_MasterSendTxData@data stored from wreg
 20847     117A  0140               	movlb	0	; select bank0
 20848     117B  00A0               	movwf	I2C1_MasterSendTxData@data
 20849                           
 20850                           ;mcc_generated_files/i2c1_master.c: 568: static __attribute__((inline)) void I2C1_Master
      +                          SendTxData(uint8_t data);mcc_generated_files/i2c1_master.c: 569: {;mcc_generated_files/i
      +                          2c1_master.c: 570:     SSP1BUF = data;
 20851     117C  0820               	movf	I2C1_MasterSendTxData@data,w
 20852     117D  0143               	movlb	3	; select bank3
 20853     117E  008C               	movwf	12	;volatile
 20854     117F  0008               	return
 20855     1180                     __end_of_I2C1_MasterSendTxData:
 20856                           
 20857                           	psect	text108
 20858     1132                     __ptext108:	
 20859 ;; *************** function _I2C1_MasterSendAck *****************
 20860 ;; Defined at:
 20861 ;;		line 603 in file "mcc_generated_files/i2c1_master.c"
 20862 ;; Parameters:    Size  Location     Type
 20863 ;;		None
 20864 ;; Auto vars:     Size  Location     Type
 20865 ;;		None
 20866 ;; Return value:  Size  Location     Type
 20867 ;;                  1    wreg      void 
 20868 ;; Registers used:
 20869 ;;		None
 20870 ;; Tracked objects:
 20871 ;;		On entry : 3D/0
 20872 ;;		On exit  : 3F/3
 20873 ;;		Unchanged: 0/0
 20874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20879 ;;Total ram usage:        0 bytes
 20880 ;; Hardware stack levels used: 1
 20881 ;; Hardware stack levels required when called: 5
 20882 ;; This function calls:
 20883 ;;		Nothing
 20884 ;; This function is called by:
 20885 ;;		_I2C1_DO_RX
 20886 ;;		_I2C1_DO_RX_ACK
 20887 ;; This function uses a non-reentrant model
 20888 ;;
 20889                           
 20890     1132                     _I2C1_MasterSendAck:	
 20891                           ;psect for function _I2C1_MasterSendAck
 20892                           
 20893                           
 20894                           ;mcc_generated_files/i2c1_master.c: 605:     SSP1CON2bits.ACKDT = 0;
 20895                           
 20896                           ;incstack = 0
 20897                           ; Regs used in _I2C1_MasterSendAck: []
 20898     1132  0143               	movlb	3	; select bank3
 20899     1133  1291               	bcf	17,5	;volatile
 20900                           
 20901                           ;mcc_generated_files/i2c1_master.c: 606:     SSP1CON2bits.ACKEN = 1;
 20902     1134  1611               	bsf	17,4	;volatile
 20903     1135  0008               	return
 20904     1136                     __end_of_I2C1_MasterSendAck:
 20905                           
 20906                           	psect	text109
 20907     111D                     __ptext109:	
 20908 ;; *************** function _I2C1_MasterGetRxData *****************
 20909 ;; Defined at:
 20910 ;;		line 563 in file "mcc_generated_files/i2c1_master.c"
 20911 ;; Parameters:    Size  Location     Type
 20912 ;;		None
 20913 ;; Auto vars:     Size  Location     Type
 20914 ;;		None
 20915 ;; Return value:  Size  Location     Type
 20916 ;;                  1    wreg      unsigned char 
 20917 ;; Registers used:
 20918 ;;		wreg
 20919 ;; Tracked objects:
 20920 ;;		On entry : 3F/2
 20921 ;;		On exit  : 3F/3
 20922 ;;		Unchanged: 0/0
 20923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20928 ;;Total ram usage:        0 bytes
 20929 ;; Hardware stack levels used: 1
 20930 ;; Hardware stack levels required when called: 5
 20931 ;; This function calls:
 20932 ;;		Nothing
 20933 ;; This function is called by:
 20934 ;;		_I2C1_DO_RX
 20935 ;; This function uses a non-reentrant model
 20936 ;;
 20937                           
 20938     111D                     _I2C1_MasterGetRxData:	
 20939                           ;psect for function _I2C1_MasterGetRxData
 20940                           
 20941                           
 20942                           ;mcc_generated_files/i2c1_master.c: 565:     return SSP1BUF;
 20943                           
 20944                           ;incstack = 0
 20945                           ; Regs used in _I2C1_MasterGetRxData: [wreg]
 20946     111D  0143               	movlb	3	; select bank3
 20947     111E  080C               	movf	12,w	;volatile
 20948     111F  0008               	return
 20949     1120                     __end_of_I2C1_MasterGetRxData:
 20950                           
 20951                           	psect	text110
 20952     112E                     __ptext110:	
 20953 ;; *************** function _I2C1_MasterSendNack *****************
 20954 ;; Defined at:
 20955 ;;		line 609 in file "mcc_generated_files/i2c1_master.c"
 20956 ;; Parameters:    Size  Location     Type
 20957 ;;		None
 20958 ;; Auto vars:     Size  Location     Type
 20959 ;;		None
 20960 ;; Return value:  Size  Location     Type
 20961 ;;                  1    wreg      void 
 20962 ;; Registers used:
 20963 ;;		None
 20964 ;; Tracked objects:
 20965 ;;		On entry : 3F/0
 20966 ;;		On exit  : 3F/3
 20967 ;;		Unchanged: 0/0
 20968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20973 ;;Total ram usage:        0 bytes
 20974 ;; Hardware stack levels used: 1
 20975 ;; Hardware stack levels required when called: 5
 20976 ;; This function calls:
 20977 ;;		Nothing
 20978 ;; This function is called by:
 20979 ;;		_I2C1_DO_RX_NACK_STOP
 20980 ;;		_I2C1_DO_RX_NACK_RESTART
 20981 ;; This function uses a non-reentrant model
 20982 ;;
 20983                           
 20984     112E                     _I2C1_MasterSendNack:	
 20985                           ;psect for function _I2C1_MasterSendNack
 20986                           
 20987                           
 20988                           ;mcc_generated_files/i2c1_master.c: 611:     SSP1CON2bits.ACKDT = 1;
 20989                           
 20990                           ;incstack = 0
 20991                           ; Regs used in _I2C1_MasterSendNack: []
 20992     112E  0143               	movlb	3	; select bank3
 20993     112F  1691               	bsf	17,5	;volatile
 20994                           
 20995                           ;mcc_generated_files/i2c1_master.c: 612:     SSP1CON2bits.ACKEN = 1;
 20996     1130  1611               	bsf	17,4	;volatile
 20997     1131  0008               	return
 20998     1132                     __end_of_I2C1_MasterSendNack:
 20999                           
 21000                           	psect	text111
 21001     111A                     __ptext111:	
 21002 ;; *************** function _I2C1_MasterStartRx *****************
 21003 ;; Defined at:
 21004 ;;		line 583 in file "mcc_generated_files/i2c1_master.c"
 21005 ;; Parameters:    Size  Location     Type
 21006 ;;		None
 21007 ;; Auto vars:     Size  Location     Type
 21008 ;;		None
 21009 ;; Return value:  Size  Location     Type
 21010 ;;                  1    wreg      void 
 21011 ;; Registers used:
 21012 ;;		None
 21013 ;; Tracked objects:
 21014 ;;		On entry : 3F/2
 21015 ;;		On exit  : 3F/3
 21016 ;;		Unchanged: 0/0
 21017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21022 ;;Total ram usage:        0 bytes
 21023 ;; Hardware stack levels used: 1
 21024 ;; Hardware stack levels required when called: 5
 21025 ;; This function calls:
 21026 ;;		Nothing
 21027 ;; This function is called by:
 21028 ;;		_I2C1_DO_RCEN
 21029 ;; This function uses a non-reentrant model
 21030 ;;
 21031                           
 21032     111A                     _I2C1_MasterStartRx:	
 21033                           ;psect for function _I2C1_MasterStartRx
 21034                           
 21035                           
 21036                           ;mcc_generated_files/i2c1_master.c: 585:     SSP1CON2bits.RCEN = 1;
 21037                           
 21038                           ;incstack = 0
 21039                           ; Regs used in _I2C1_MasterStartRx: []
 21040     111A  0143               	movlb	3	; select bank3
 21041     111B  1591               	bsf	17,3	;volatile
 21042     111C  0008               	return
 21043     111D                     __end_of_I2C1_MasterStartRx:
 21044                           
 21045                           	psect	text112
 21046     1103                     __ptext112:	
 21047 ;; *************** function _I2C1_CallbackReturnReset *****************
 21048 ;; Defined at:
 21049 ;;		line 525 in file "mcc_generated_files/i2c1_master.c"
 21050 ;; Parameters:    Size  Location     Type
 21051 ;;  funPtr          1    9[BANK0 ] PTR void 
 21052 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 21053 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 21054 ;; Auto vars:     Size  Location     Type
 21055 ;;		None
 21056 ;; Return value:  Size  Location     Type
 21057 ;;                  1    wreg      enum E363
 21058 ;; Registers used:
 21059 ;;		wreg
 21060 ;; Tracked objects:
 21061 ;;		On entry : 3D/2
 21062 ;;		On exit  : 3D/0
 21063 ;;		Unchanged: 3D/0
 21064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21065 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21069 ;;Total ram usage:        1 bytes
 21070 ;; Hardware stack levels used: 1
 21071 ;; Hardware stack levels required when called: 5
 21072 ;; This function calls:
 21073 ;;		Nothing
 21074 ;; This function is called by:
 21075 ;;		_I2C1_Open
 21076 ;;		_I2C1_DO_TX
 21077 ;;		_I2C1_DO_RX
 21078 ;;		_I2C1_DO_TX_EMPTY
 21079 ;;		_I2C1_DO_ADDRESS_NACK
 21080 ;; This function uses a non-reentrant model
 21081 ;;
 21082                           
 21083     1103                     _I2C1_CallbackReturnReset:	
 21084                           ;psect for function _I2C1_CallbackReturnReset
 21085                           
 21086                           
 21087                           ;mcc_generated_files/i2c1_master.c: 525: i2c1_operations_t I2C1_CallbackReturnReset(void
      +                           *funPtr);mcc_generated_files/i2c1_master.c: 526: {;mcc_generated_files/i2c1_master.c: 5
      +                          27:     return I2C1_RESET_LINK;
 21088                           
 21089                           ;incstack = 0
 21090                           ; Regs used in _I2C1_CallbackReturnReset: [wreg]
 21091     1103  3005               	movlw	5
 21092     1104  0008               	return
 21093     1105                     __end_of_I2C1_CallbackReturnReset:
 21094                           
 21095                           	psect	text113
 21096     1101                     __ptext113:	
 21097 ;; *************** function _I2C1_CallbackReturnStop *****************
 21098 ;; Defined at:
 21099 ;;		line 520 in file "mcc_generated_files/i2c1_master.c"
 21100 ;; Parameters:    Size  Location     Type
 21101 ;;  funPtr          1    9[BANK0 ] PTR void 
 21102 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 21103 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 21104 ;; Auto vars:     Size  Location     Type
 21105 ;;		None
 21106 ;; Return value:  Size  Location     Type
 21107 ;;                  1    wreg      enum E363
 21108 ;; Registers used:
 21109 ;;		wreg
 21110 ;; Tracked objects:
 21111 ;;		On entry : 3D/2
 21112 ;;		On exit  : 3D/0
 21113 ;;		Unchanged: 3D/0
 21114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21115 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21118 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21119 ;;Total ram usage:        1 bytes
 21120 ;; Hardware stack levels used: 1
 21121 ;; Hardware stack levels required when called: 5
 21122 ;; This function calls:
 21123 ;;		Nothing
 21124 ;; This function is called by:
 21125 ;;		_I2C1_Open
 21126 ;;		_I2C1_SetCallback
 21127 ;;		_I2C1_DO_TX
 21128 ;;		_I2C1_DO_RX
 21129 ;;		_I2C1_DO_TX_EMPTY
 21130 ;;		_I2C1_DO_ADDRESS_NACK
 21131 ;; This function uses a non-reentrant model
 21132 ;;
 21133                           
 21134     1101                     _I2C1_CallbackReturnStop:	
 21135                           ;psect for function _I2C1_CallbackReturnStop
 21136                           
 21137                           
 21138                           ;mcc_generated_files/i2c1_master.c: 520: i2c1_operations_t I2C1_CallbackReturnStop(void 
      +                          *funPtr);mcc_generated_files/i2c1_master.c: 521: {;mcc_generated_files/i2c1_master.c: 52
      +                          2:     return I2C1_STOP;
 21139                           
 21140                           ;incstack = 0
 21141                           ; Regs used in _I2C1_CallbackReturnStop: [wreg]
 21142     1101  3001               	movlw	1
 21143     1102  0008               	return
 21144     1103                     __end_of_I2C1_CallbackReturnStop:
 21145                           
 21146                           	psect	text114
 21147     148E                     __ptext114:	
 21148 ;; *************** function _rdBlkRegCompleteHandler *****************
 21149 ;; Defined at:
 21150 ;;		line 170 in file "mcc_generated_files/examples/i2c1_master_example.c"
 21151 ;; Parameters:    Size  Location     Type
 21152 ;;  ptr             1    9[BANK0 ] PTR void 
 21153 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 21154 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 21155 ;; Auto vars:     Size  Location     Type
 21156 ;;		None
 21157 ;; Return value:  Size  Location     Type
 21158 ;;                  1    wreg      enum E363
 21159 ;; Registers used:
 21160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21161 ;; Tracked objects:
 21162 ;;		On entry : 3D/2
 21163 ;;		On exit  : 3F/0
 21164 ;;		Unchanged: 0/0
 21165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21166 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21169 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21170 ;;Total ram usage:        1 bytes
 21171 ;; Hardware stack levels used: 1
 21172 ;; Hardware stack levels required when called: 7
 21173 ;; This function calls:
 21174 ;;		_I2C1_SetBuffer
 21175 ;;		_I2C1_SetDataCompleteCallback
 21176 ;; This function is called by:
 21177 ;;		_I2C1_DO_TX
 21178 ;;		_I2C1_DO_RX
 21179 ;;		_I2C1_DO_TX_EMPTY
 21180 ;;		_I2C1_DO_ADDRESS_NACK
 21181 ;; This function uses a non-reentrant model
 21182 ;;
 21183                           
 21184     148E                     _rdBlkRegCompleteHandler:	
 21185                           ;psect for function _rdBlkRegCompleteHandler
 21186                           
 21187                           
 21188                           ;mcc_generated_files/examples/i2c1_master_example.c: 170: static i2c1_operations_t rdBlk
      +                          RegCompleteHandler(void *ptr);mcc_generated_files/examples/i2c1_master_example.c: 171: {
      +                          ;mcc_generated_files/examples/i2c1_master_example.c: 172:     I2C1_SetBuffer(((i2c1_buff
      +                          er_t *)ptr)->data,((i2c1_buffer_t*)ptr)->len);
 21189                           
 21190                           ;incstack = 0
 21191                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 21192     148E  0140               	movlb	0	; select bank0
 21193     148F  0829               	movf	rdBlkRegCompleteHandler@ptr,w
 21194     1490  3E02               	addlw	2
 21195     1491  0086               	movwf	6
 21196     1492  0187               	clrf	7
 21197     1493  0801               	movf	1,w
 21198     1494  00A0               	movwf	I2C1_SetBuffer@buffer
 21199     1495  3000               	movlw	0
 21200     1496  00A1               	movwf	I2C1_SetBuffer@buffer+1
 21201     1497  0829               	movf	rdBlkRegCompleteHandler@ptr,w
 21202     1498  0086               	movwf	6
 21203     1499  0187               	clrf	7
 21204     149A  3F40               	moviw [0]fsr1
 21205     149B  00A2               	movwf	I2C1_SetBuffer@bufferSize
 21206     149C  3F41               	moviw [1]fsr1
 21207     149D  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 21208     149E  3193  2360  3194   	fcall	_I2C1_SetBuffer
 21209                           
 21210                           ;mcc_generated_files/examples/i2c1_master_example.c: 173:     I2C1_SetDataCompleteCallba
      +                          ck(((void*)0),((void*)0));
 21211     14A1  3000               	movlw	0
 21212     14A2  0140               	movlb	0	; select bank0
 21213     14A3  00A6               	movwf	I2C1_SetDataCompleteCallback@cb
 21214     14A4  00A7               	movwf	I2C1_SetDataCompleteCallback@cb+1
 21215     14A5  01A8               	clrf	I2C1_SetDataCompleteCallback@ptr
 21216     14A6  3191  21EA         	fcall	_I2C1_SetDataCompleteCallback
 21217                           
 21218                           ;mcc_generated_files/examples/i2c1_master_example.c: 174:     return I2C1_RESTART_READ;
 21219     14A8  3002               	movlw	2
 21220     14A9  0008               	return
 21221     14AA                     __end_of_rdBlkRegCompleteHandler:
 21222                           
 21223                           	psect	text115
 21224     1338                     __ptext115:	
 21225 ;; *************** function _wr1RegCompleteHandler *****************
 21226 ;; Defined at:
 21227 ;;		line 156 in file "mcc_generated_files/examples/i2c1_master_example.c"
 21228 ;; Parameters:    Size  Location     Type
 21229 ;;  ptr             1    9[BANK0 ] PTR void 
 21230 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 21231 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 21232 ;; Auto vars:     Size  Location     Type
 21233 ;;		None
 21234 ;; Return value:  Size  Location     Type
 21235 ;;                  1    wreg      enum E363
 21236 ;; Registers used:
 21237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21238 ;; Tracked objects:
 21239 ;;		On entry : 3D/2
 21240 ;;		On exit  : 3F/0
 21241 ;;		Unchanged: 0/0
 21242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21243 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21246 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21247 ;;Total ram usage:        1 bytes
 21248 ;; Hardware stack levels used: 1
 21249 ;; Hardware stack levels required when called: 7
 21250 ;; This function calls:
 21251 ;;		_I2C1_SetBuffer
 21252 ;;		_I2C1_SetDataCompleteCallback
 21253 ;; This function is called by:
 21254 ;;		_I2C1_DO_TX
 21255 ;;		_I2C1_DO_RX
 21256 ;;		_I2C1_DO_TX_EMPTY
 21257 ;;		_I2C1_DO_ADDRESS_NACK
 21258 ;; This function uses a non-reentrant model
 21259 ;;
 21260                           
 21261     1338                     _wr1RegCompleteHandler:	
 21262                           ;psect for function _wr1RegCompleteHandler
 21263                           
 21264                           
 21265                           ;mcc_generated_files/examples/i2c1_master_example.c: 156: static i2c1_operations_t wr1Re
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c1_master_example.c: 157: {;m
      +                          cc_generated_files/examples/i2c1_master_example.c: 158:     I2C1_SetBuffer(ptr,1);
 21266                           
 21267                           ;incstack = 0
 21268                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 21269     1338  0140               	movlb	0	; select bank0
 21270     1339  0829               	movf	wr1RegCompleteHandler@ptr,w
 21271     133A  00A0               	movwf	I2C1_SetBuffer@buffer
 21272     133B  01A1               	clrf	I2C1_SetBuffer@buffer+1
 21273     133C  3001               	movlw	1
 21274     133D  00A2               	movwf	I2C1_SetBuffer@bufferSize
 21275     133E  3000               	movlw	0
 21276     133F  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 21277     1340  3193  2360  3193   	fcall	_I2C1_SetBuffer
 21278                           
 21279                           ;mcc_generated_files/examples/i2c1_master_example.c: 159:     I2C1_SetDataCompleteCallba
      +                          ck(((void*)0),((void*)0));
 21280     1343  3000               	movlw	0
 21281     1344  0140               	movlb	0	; select bank0
 21282     1345  00A6               	movwf	I2C1_SetDataCompleteCallback@cb
 21283     1346  00A7               	movwf	I2C1_SetDataCompleteCallback@cb+1
 21284     1347  01A8               	clrf	I2C1_SetDataCompleteCallback@ptr
 21285     1348  3191  21EA         	fcall	_I2C1_SetDataCompleteCallback
 21286                           
 21287                           ;mcc_generated_files/examples/i2c1_master_example.c: 160:     return I2C1_CONTINUE;
 21288     134A  3004               	movlw	4
 21289     134B  0008               	return
 21290     134C                     __end_of_wr1RegCompleteHandler:
 21291                           
 21292                           	psect	text116
 21293     1324                     __ptext116:	
 21294 ;; *************** function _rd2RegCompleteHandler *****************
 21295 ;; Defined at:
 21296 ;;		line 149 in file "mcc_generated_files/examples/i2c1_master_example.c"
 21297 ;; Parameters:    Size  Location     Type
 21298 ;;  ptr             1    9[BANK0 ] PTR void 
 21299 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 21300 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 21301 ;; Auto vars:     Size  Location     Type
 21302 ;;		None
 21303 ;; Return value:  Size  Location     Type
 21304 ;;                  1    wreg      enum E363
 21305 ;; Registers used:
 21306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21307 ;; Tracked objects:
 21308 ;;		On entry : 3D/2
 21309 ;;		On exit  : 3F/0
 21310 ;;		Unchanged: 0/0
 21311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21312 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21316 ;;Total ram usage:        1 bytes
 21317 ;; Hardware stack levels used: 1
 21318 ;; Hardware stack levels required when called: 7
 21319 ;; This function calls:
 21320 ;;		_I2C1_SetBuffer
 21321 ;;		_I2C1_SetDataCompleteCallback
 21322 ;; This function is called by:
 21323 ;;		_I2C1_DO_TX
 21324 ;;		_I2C1_DO_RX
 21325 ;;		_I2C1_DO_TX_EMPTY
 21326 ;;		_I2C1_DO_ADDRESS_NACK
 21327 ;; This function uses a non-reentrant model
 21328 ;;
 21329                           
 21330     1324                     _rd2RegCompleteHandler:	
 21331                           ;psect for function _rd2RegCompleteHandler
 21332                           
 21333                           
 21334                           ;mcc_generated_files/examples/i2c1_master_example.c: 149: static i2c1_operations_t rd2Re
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c1_master_example.c: 150: {;m
      +                          cc_generated_files/examples/i2c1_master_example.c: 151:     I2C1_SetBuffer(ptr,2);
 21335                           
 21336                           ;incstack = 0
 21337                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 21338     1324  0140               	movlb	0	; select bank0
 21339     1325  0829               	movf	rd2RegCompleteHandler@ptr,w
 21340     1326  00A0               	movwf	I2C1_SetBuffer@buffer
 21341     1327  01A1               	clrf	I2C1_SetBuffer@buffer+1
 21342     1328  3002               	movlw	2
 21343     1329  00A2               	movwf	I2C1_SetBuffer@bufferSize
 21344     132A  3000               	movlw	0
 21345     132B  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 21346     132C  3193  2360  3193   	fcall	_I2C1_SetBuffer
 21347                           
 21348                           ;mcc_generated_files/examples/i2c1_master_example.c: 152:     I2C1_SetDataCompleteCallba
      +                          ck(((void*)0),((void*)0));
 21349     132F  3000               	movlw	0
 21350     1330  0140               	movlb	0	; select bank0
 21351     1331  00A6               	movwf	I2C1_SetDataCompleteCallback@cb
 21352     1332  00A7               	movwf	I2C1_SetDataCompleteCallback@cb+1
 21353     1333  01A8               	clrf	I2C1_SetDataCompleteCallback@ptr
 21354     1334  3191  21EA         	fcall	_I2C1_SetDataCompleteCallback
 21355                           
 21356                           ;mcc_generated_files/examples/i2c1_master_example.c: 153:     return I2C1_RESTART_READ;
 21357     1336  3002               	movlw	2
 21358     1337  0008               	return
 21359     1338                     __end_of_rd2RegCompleteHandler:
 21360                           
 21361                           	psect	text117
 21362     1310                     __ptext117:	
 21363 ;; *************** function _rd1RegCompleteHandler *****************
 21364 ;; Defined at:
 21365 ;;		line 142 in file "mcc_generated_files/examples/i2c1_master_example.c"
 21366 ;; Parameters:    Size  Location     Type
 21367 ;;  ptr             1    9[BANK0 ] PTR void 
 21368 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 21369 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 21370 ;; Auto vars:     Size  Location     Type
 21371 ;;		None
 21372 ;; Return value:  Size  Location     Type
 21373 ;;                  1    wreg      enum E363
 21374 ;; Registers used:
 21375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21376 ;; Tracked objects:
 21377 ;;		On entry : 3D/2
 21378 ;;		On exit  : 3F/0
 21379 ;;		Unchanged: 0/0
 21380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21381 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21384 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21385 ;;Total ram usage:        1 bytes
 21386 ;; Hardware stack levels used: 1
 21387 ;; Hardware stack levels required when called: 7
 21388 ;; This function calls:
 21389 ;;		_I2C1_SetBuffer
 21390 ;;		_I2C1_SetDataCompleteCallback
 21391 ;; This function is called by:
 21392 ;;		_I2C1_DO_TX
 21393 ;;		_I2C1_DO_RX
 21394 ;;		_I2C1_DO_TX_EMPTY
 21395 ;;		_I2C1_DO_ADDRESS_NACK
 21396 ;; This function uses a non-reentrant model
 21397 ;;
 21398                           
 21399     1310                     _rd1RegCompleteHandler:	
 21400                           ;psect for function _rd1RegCompleteHandler
 21401                           
 21402                           
 21403                           ;mcc_generated_files/examples/i2c1_master_example.c: 142: static i2c1_operations_t rd1Re
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c1_master_example.c: 143: {;m
      +                          cc_generated_files/examples/i2c1_master_example.c: 144:     I2C1_SetBuffer(ptr,1);
 21404                           
 21405                           ;incstack = 0
 21406                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 21407     1310  0140               	movlb	0	; select bank0
 21408     1311  0829               	movf	rd1RegCompleteHandler@ptr,w
 21409     1312  00A0               	movwf	I2C1_SetBuffer@buffer
 21410     1313  01A1               	clrf	I2C1_SetBuffer@buffer+1
 21411     1314  3001               	movlw	1
 21412     1315  00A2               	movwf	I2C1_SetBuffer@bufferSize
 21413     1316  3000               	movlw	0
 21414     1317  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 21415     1318  3193  2360  3193   	fcall	_I2C1_SetBuffer
 21416                           
 21417                           ;mcc_generated_files/examples/i2c1_master_example.c: 145:     I2C1_SetDataCompleteCallba
      +                          ck(((void*)0),((void*)0));
 21418     131B  3000               	movlw	0
 21419     131C  0140               	movlb	0	; select bank0
 21420     131D  00A6               	movwf	I2C1_SetDataCompleteCallback@cb
 21421     131E  00A7               	movwf	I2C1_SetDataCompleteCallback@cb+1
 21422     131F  01A8               	clrf	I2C1_SetDataCompleteCallback@ptr
 21423     1320  3191  21EA         	fcall	_I2C1_SetDataCompleteCallback
 21424                           
 21425                           ;mcc_generated_files/examples/i2c1_master_example.c: 146:     return I2C1_RESTART_READ;
 21426     1322  3002               	movlw	2
 21427     1323  0008               	return
 21428     1324                     __end_of_rd1RegCompleteHandler:
 21429                           
 21430                           	psect	text118
 21431     12FC                     __ptext118:	
 21432 ;; *************** function _wr2RegCompleteHandler *****************
 21433 ;; Defined at:
 21434 ;;		line 163 in file "mcc_generated_files/examples/i2c1_master_example.c"
 21435 ;; Parameters:    Size  Location     Type
 21436 ;;  ptr             1    9[BANK0 ] PTR void 
 21437 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 21438 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 21439 ;; Auto vars:     Size  Location     Type
 21440 ;;		None
 21441 ;; Return value:  Size  Location     Type
 21442 ;;                  1    wreg      enum E363
 21443 ;; Registers used:
 21444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21445 ;; Tracked objects:
 21446 ;;		On entry : 3D/2
 21447 ;;		On exit  : 3F/0
 21448 ;;		Unchanged: 0/0
 21449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21450 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21453 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21454 ;;Total ram usage:        1 bytes
 21455 ;; Hardware stack levels used: 1
 21456 ;; Hardware stack levels required when called: 7
 21457 ;; This function calls:
 21458 ;;		_I2C1_SetBuffer
 21459 ;;		_I2C1_SetDataCompleteCallback
 21460 ;; This function is called by:
 21461 ;;		_I2C1_DO_TX
 21462 ;;		_I2C1_DO_RX
 21463 ;;		_I2C1_DO_TX_EMPTY
 21464 ;;		_I2C1_DO_ADDRESS_NACK
 21465 ;; This function uses a non-reentrant model
 21466 ;;
 21467                           
 21468     12FC                     _wr2RegCompleteHandler:	
 21469                           ;psect for function _wr2RegCompleteHandler
 21470                           
 21471                           
 21472                           ;mcc_generated_files/examples/i2c1_master_example.c: 163: static i2c1_operations_t wr2Re
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c1_master_example.c: 164: {;m
      +                          cc_generated_files/examples/i2c1_master_example.c: 165:     I2C1_SetBuffer(ptr,2);
 21473                           
 21474                           ;incstack = 0
 21475                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 21476     12FC  0140               	movlb	0	; select bank0
 21477     12FD  0829               	movf	wr2RegCompleteHandler@ptr,w
 21478     12FE  00A0               	movwf	I2C1_SetBuffer@buffer
 21479     12FF  01A1               	clrf	I2C1_SetBuffer@buffer+1
 21480     1300  3002               	movlw	2
 21481     1301  00A2               	movwf	I2C1_SetBuffer@bufferSize
 21482     1302  3000               	movlw	0
 21483     1303  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 21484     1304  3193  2360  3192   	fcall	_I2C1_SetBuffer
 21485                           
 21486                           ;mcc_generated_files/examples/i2c1_master_example.c: 166:     I2C1_SetDataCompleteCallba
      +                          ck(((void*)0),((void*)0));
 21487     1307  3000               	movlw	0
 21488     1308  0140               	movlb	0	; select bank0
 21489     1309  00A6               	movwf	I2C1_SetDataCompleteCallback@cb
 21490     130A  00A7               	movwf	I2C1_SetDataCompleteCallback@cb+1
 21491     130B  01A8               	clrf	I2C1_SetDataCompleteCallback@ptr
 21492     130C  3191  21EA         	fcall	_I2C1_SetDataCompleteCallback
 21493                           
 21494                           ;mcc_generated_files/examples/i2c1_master_example.c: 167:     return I2C1_CONTINUE;
 21495     130E  3004               	movlw	4
 21496     130F  0008               	return
 21497     1310                     __end_of_wr2RegCompleteHandler:
 21498                           
 21499                           	psect	text119
 21500     11EA                     __ptext119:	
 21501 ;; *************** function _I2C1_SetDataCompleteCallback *****************
 21502 ;; Defined at:
 21503 ;;		line 273 in file "mcc_generated_files/i2c1_master.c"
 21504 ;; Parameters:    Size  Location     Type
 21505 ;;  cb              2    6[BANK0 ] PTR FTN(PTR void ,)enum 
 21506 ;;		 -> NULL(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
 21507 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 21508 ;;  ptr             1    8[BANK0 ] PTR void 
 21509 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 21510 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 21511 ;; Auto vars:     Size  Location     Type
 21512 ;;		None
 21513 ;; Return value:  Size  Location     Type
 21514 ;;                  1    wreg      void 
 21515 ;; Registers used:
 21516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21517 ;; Tracked objects:
 21518 ;;		On entry : 3F/0
 21519 ;;		On exit  : 3F/0
 21520 ;;		Unchanged: 0/0
 21521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21522 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21525 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21526 ;;Total ram usage:        3 bytes
 21527 ;; Hardware stack levels used: 1
 21528 ;; Hardware stack levels required when called: 6
 21529 ;; This function calls:
 21530 ;;		_I2C1_SetCallback
 21531 ;; This function is called by:
 21532 ;;		_rd1RegCompleteHandler
 21533 ;;		_rd2RegCompleteHandler
 21534 ;;		_wr1RegCompleteHandler
 21535 ;;		_wr2RegCompleteHandler
 21536 ;;		_rdBlkRegCompleteHandler
 21537 ;; This function uses a non-reentrant model
 21538 ;;
 21539                           
 21540     11EA                     _I2C1_SetDataCompleteCallback:	
 21541                           ;psect for function _I2C1_SetDataCompleteCallback
 21542                           
 21543                           
 21544                           ;mcc_generated_files/i2c1_master.c: 273: void I2C1_SetDataCompleteCallback(i2c1_callback
      +                          _t cb, void *ptr);mcc_generated_files/i2c1_master.c: 274: {;mcc_generated_files/i2c1_mas
      +                          ter.c: 275:     I2C1_SetCallback(I2C1_DATA_COMPLETE, cb, ptr);
 21545                           
 21546                           ;incstack = 0
 21547                           ; Regs used in _I2C1_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 21548     11EA  0827               	movf	I2C1_SetDataCompleteCallback@cb+1,w
 21549     11EB  00A1               	movwf	I2C1_SetCallback@cb+1
 21550     11EC  0826               	movf	I2C1_SetDataCompleteCallback@cb,w
 21551     11ED  00A0               	movwf	I2C1_SetCallback@cb
 21552     11EE  0828               	movf	I2C1_SetDataCompleteCallback@ptr,w
 21553     11EF  00A2               	movwf	I2C1_SetCallback@ptr
 21554     11F0  3000               	movlw	0
 21555     11F1  3197  2725         	fcall	_I2C1_SetCallback
 21556     11F3  0008               	return
 21557     11F4                     __end_of_I2C1_SetDataCompleteCallback:
 21558                           
 21559                           	psect	text120
 21560     1725                     __ptext120:	
 21561 ;; *************** function _I2C1_SetCallback *****************
 21562 ;; Defined at:
 21563 ;;		line 298 in file "mcc_generated_files/i2c1_master.c"
 21564 ;; Parameters:    Size  Location     Type
 21565 ;;  idx             1    wreg     enum E10749
 21566 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
 21567 ;;		 -> NULL(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
 21568 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 21569 ;;  ptr             1    2[BANK0 ] PTR void 
 21570 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 21571 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 21572 ;; Auto vars:     Size  Location     Type
 21573 ;;  idx             1    5[BANK0 ] enum E10749
 21574 ;; Return value:  Size  Location     Type
 21575 ;;                  1    wreg      void 
 21576 ;; Registers used:
 21577 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21578 ;; Tracked objects:
 21579 ;;		On entry : 3F/0
 21580 ;;		On exit  : 3F/0
 21581 ;;		Unchanged: 0/0
 21582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21583 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21585 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21586 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21587 ;;Total ram usage:        6 bytes
 21588 ;; Hardware stack levels used: 1
 21589 ;; Hardware stack levels required when called: 5
 21590 ;; This function calls:
 21591 ;;		Nothing
 21592 ;; This function is called by:
 21593 ;;		_I2C1_SetDataCompleteCallback
 21594 ;;		_I2C1_SetAddressNackCallback
 21595 ;; This function uses a non-reentrant model
 21596 ;;
 21597                           
 21598     1725                     _I2C1_SetCallback:	
 21599                           ;psect for function _I2C1_SetCallback
 21600                           
 21601                           
 21602                           ;incstack = 0
 21603                           ; Regs used in _I2C1_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 21604                           ;I2C1_SetCallback@idx stored from wreg
 21605     1725  00A5               	movwf	I2C1_SetCallback@idx
 21606                           
 21607                           ;mcc_generated_files/i2c1_master.c: 298: static void I2C1_SetCallback(i2c1_callbackIndex
      +                          _t idx, i2c1_callback_t cb, void *ptr);mcc_generated_files/i2c1_master.c: 299: {;mcc_gen
      +                          erated_files/i2c1_master.c: 300:     if(cb)
 21608     1726  0820               	movf	I2C1_SetCallback@cb,w
 21609     1727  0421               	iorwf	I2C1_SetCallback@cb+1,w
 21610     1728  1903               	btfsc	3,2
 21611     1729  2F43               	goto	l6535
 21612                           
 21613                           ;mcc_generated_files/i2c1_master.c: 301:     {;mcc_generated_files/i2c1_master.c: 302:  
      +                                 I2C1_Status.callbackTable[idx] = cb;
 21614     172A  3525               	lslf	I2C1_SetCallback@idx,w
 21615     172B  3E20               	addlw	low _I2C1_Status
 21616     172C  0086               	movwf	6
 21617     172D  3001               	movlw	high _I2C1_Status
 21618     172E  3D87               	addwfc	7,f
 21619     172F  3525               	lslf	I2C1_SetCallback@idx,w
 21620     1730  3000               	movlw	0
 21621     1731  3D87               	addwfc	7,f
 21622     1732  0820               	movf	I2C1_SetCallback@cb,w
 21623     1733  3FC0               	movwi [0]fsr1
 21624     1734  0821               	movf	I2C1_SetCallback@cb+1,w
 21625     1735  3FC1               	movwi [1]fsr1
 21626                           
 21627                           ;mcc_generated_files/i2c1_master.c: 303:         I2C1_Status.callbackPayload[idx] = ptr;
 21628     1736  302C               	movlw	low (_I2C1_Status+12)
 21629     1737  00A3               	movwf	??_I2C1_SetCallback
 21630     1738  3001               	movlw	high (_I2C1_Status+12)
 21631     1739  00A4               	movwf	??_I2C1_SetCallback+1
 21632     173A  0825               	movf	I2C1_SetCallback@idx,w
 21633     173B  0723               	addwf	??_I2C1_SetCallback,w
 21634     173C  0086               	movwf	6
 21635     173D  3000               	movlw	0
 21636     173E  3D24               	addwfc	??_I2C1_SetCallback+1,w
 21637     173F  0087               	movwf	7
 21638     1740  0822               	movf	I2C1_SetCallback@ptr,w
 21639     1741  0081               	movwf	1
 21640                           
 21641                           ;mcc_generated_files/i2c1_master.c: 304:     }
 21642     1742  0008               	return
 21643     1743                     l6535:
 21644                           
 21645                           ;mcc_generated_files/i2c1_master.c: 306:     {;mcc_generated_files/i2c1_master.c: 307:  
      +                                 I2C1_Status.callbackTable[idx] = I2C1_CallbackReturnStop;
 21646     1743  3525               	lslf	I2C1_SetCallback@idx,w
 21647     1744  3E20               	addlw	low _I2C1_Status
 21648     1745  0086               	movwf	6
 21649     1746  3001               	movlw	high _I2C1_Status
 21650     1747  3D87               	addwfc	7,f
 21651     1748  3525               	lslf	I2C1_SetCallback@idx,w
 21652     1749  3000               	movlw	0
 21653     174A  3D87               	addwfc	7,f
 21654     174B  3001               	movlw	low (low _I2C1_CallbackReturnStop)
 21655     174C  3FC0               	movwi [0]fsr1
 21656     174D  3000               	movlw	high (low _I2C1_CallbackReturnStop)
 21657     174E  3FC1               	movwi [1]fsr1
 21658                           
 21659                           ;mcc_generated_files/i2c1_master.c: 308:         I2C1_Status.callbackPayload[idx] = ((vo
      +                          id*)0);
 21660     174F  302C               	movlw	low (_I2C1_Status+12)
 21661     1750  00A3               	movwf	??_I2C1_SetCallback
 21662     1751  3001               	movlw	high (_I2C1_Status+12)
 21663     1752  00A4               	movwf	??_I2C1_SetCallback+1
 21664     1753  0825               	movf	I2C1_SetCallback@idx,w
 21665     1754  0723               	addwf	??_I2C1_SetCallback,w
 21666     1755  0086               	movwf	6
 21667     1756  3000               	movlw	0
 21668     1757  3D24               	addwfc	??_I2C1_SetCallback+1,w
 21669     1758  0087               	movwf	7
 21670     1759  0181               	clrf	1
 21671     175A  0008               	return
 21672     175B                     __end_of_I2C1_SetCallback:
 21673                           
 21674                           	psect	text121
 21675     1360                     __ptext121:	
 21676 ;; *************** function _I2C1_SetBuffer *****************
 21677 ;; Defined at:
 21678 ;;		line 263 in file "mcc_generated_files/i2c1_master.c"
 21679 ;; Parameters:    Size  Location     Type
 21680 ;;  buffer          2    0[BANK0 ] PTR void 
 21681 ;;		 -> I2C1_Read1ByteRegister@returnValue$data(2), I2C1_Read2ByteRegister@returnValue$data(2), I2C1_Write1ByteRegister@
      +data$data(2), I2C1_Write2ByteRegister@data$data(2), 
 21682 ;;		 -> getSHTC3Data@Rxbuffer(2), getSHTC3Data@Txbuffer(2), writeDPS422@Txbuffer(2), readDPS422@regadd(1), 
 21683 ;;		 -> readDPS422@ret(1), writeBMP280@Txbuffer(2), readBMP280@regadd(1), readBMP280@ret(1), 
 21684 ;;		 -> I2C1_ReadDataBlock@reg(1), I2C1_ReadDataBlock@bufferBlock(4), bufferBlock$data(2), I2C1_Write2ByteRegister@reg(1
      +), 
 21685 ;;		 -> I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@reg(1), I2C1_Write1ByteRegister@data(1), I2C1_Read2Byte
      +Register@reg(1), 
 21686 ;;		 -> I2C1_Read2ByteRegister@returnValue(2), NULL(0), I2C1_Read1ByteRegister@reg(1), I2C1_Read1ByteRegister@returnValu
      +e(1), 
 21687 ;;  bufferSize      2    2[BANK0 ] unsigned int 
 21688 ;; Auto vars:     Size  Location     Type
 21689 ;;		None
 21690 ;; Return value:  Size  Location     Type
 21691 ;;                  1    wreg      void 
 21692 ;; Registers used:
 21693 ;;		wreg
 21694 ;; Tracked objects:
 21695 ;;		On entry : 3F/0
 21696 ;;		On exit  : 3F/2
 21697 ;;		Unchanged: 0/0
 21698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21699 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21702 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21703 ;;Total ram usage:        4 bytes
 21704 ;; Hardware stack levels used: 1
 21705 ;; Hardware stack levels required when called: 5
 21706 ;; This function calls:
 21707 ;;		Nothing
 21708 ;; This function is called by:
 21709 ;;		_I2C1_WriteNBytes
 21710 ;;		_I2C1_ReadNBytes
 21711 ;;		_rd1RegCompleteHandler
 21712 ;;		_rd2RegCompleteHandler
 21713 ;;		_wr1RegCompleteHandler
 21714 ;;		_wr2RegCompleteHandler
 21715 ;;		_rdBlkRegCompleteHandler
 21716 ;; This function uses a non-reentrant model
 21717 ;;
 21718                           
 21719     1360                     _I2C1_SetBuffer:	
 21720                           ;psect for function _I2C1_SetBuffer
 21721                           
 21722                           
 21723                           ;mcc_generated_files/i2c1_master.c: 263: void I2C1_SetBuffer(void *buffer, size_t buffer
      +                          Size);mcc_generated_files/i2c1_master.c: 264: {;mcc_generated_files/i2c1_master.c: 265: 
      +                              if(I2C1_Status.bufferFree)
 21724                           
 21725                           ;incstack = 0
 21726                           ; Regs used in _I2C1_SetBuffer: [wreg]
 21727     1360  0142               	movlb	2	; select bank2
 21728     1361  1DBD               	btfss	(_I2C1_Status^(0+256)+29),3
 21729     1362  0008               	return
 21730                           
 21731                           ;mcc_generated_files/i2c1_master.c: 266:     {;mcc_generated_files/i2c1_master.c: 267:  
      +                                 I2C1_Status.data_ptr = buffer;
 21732     1363  0140               	movlb	0	; select bank0
 21733     1364  0821               	movf	I2C1_SetBuffer@buffer+1,w
 21734     1365  0142               	movlb	2	; select bank2
 21735     1366  00B8               	movwf	((_I2C1_Status+1)^(0+256)+23)
 21736     1367  0140               	movlb	0	; select bank0
 21737     1368  0820               	movf	I2C1_SetBuffer@buffer,w
 21738     1369  0142               	movlb	2	; select bank2
 21739     136A  00B7               	movwf	(_I2C1_Status^(0+256)+23)
 21740                           
 21741                           ;mcc_generated_files/i2c1_master.c: 268:         I2C1_Status.data_length = bufferSize;
 21742     136B  0140               	movlb	0	; select bank0
 21743     136C  0823               	movf	I2C1_SetBuffer@bufferSize+1,w
 21744     136D  0142               	movlb	2	; select bank2
 21745     136E  00BA               	movwf	((_I2C1_Status+1)^(0+256)+25)
 21746     136F  0140               	movlb	0	; select bank0
 21747     1370  0822               	movf	I2C1_SetBuffer@bufferSize,w
 21748     1371  0142               	movlb	2	; select bank2
 21749     1372  00B9               	movwf	(_I2C1_Status^(0+256)+25)
 21750                           
 21751                           ;mcc_generated_files/i2c1_master.c: 269:         I2C1_Status.bufferFree = 0;
 21752     1373  11BD               	bcf	(_I2C1_Status^(0+256)+29),3
 21753     1374  0008               	return
 21754     1375                     __end_of_I2C1_SetBuffer:
 21755                           
 21756                           	psect	text122
 21757     1117                     __ptext122:	
 21758 ;; *************** function _I2C1_MasterStop *****************
 21759 ;; Defined at:
 21760 ;;		line 593 in file "mcc_generated_files/i2c1_master.c"
 21761 ;; Parameters:    Size  Location     Type
 21762 ;;		None
 21763 ;; Auto vars:     Size  Location     Type
 21764 ;;		None
 21765 ;; Return value:  Size  Location     Type
 21766 ;;                  1    wreg      void 
 21767 ;; Registers used:
 21768 ;;		None
 21769 ;; Tracked objects:
 21770 ;;		On entry : 3F/0
 21771 ;;		On exit  : 3F/3
 21772 ;;		Unchanged: 0/0
 21773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21778 ;;Total ram usage:        0 bytes
 21779 ;; Hardware stack levels used: 1
 21780 ;; Hardware stack levels required when called: 5
 21781 ;; This function calls:
 21782 ;;		Nothing
 21783 ;; This function is called by:
 21784 ;;		_I2C1_DO_SEND_STOP
 21785 ;; This function uses a non-reentrant model
 21786 ;;
 21787                           
 21788     1117                     _I2C1_MasterStop:	
 21789                           ;psect for function _I2C1_MasterStop
 21790                           
 21791                           
 21792                           ;mcc_generated_files/i2c1_master.c: 595:     SSP1CON2bits.PEN = 1;
 21793                           
 21794                           ;incstack = 0
 21795                           ; Regs used in _I2C1_MasterStop: []
 21796     1117  0143               	movlb	3	; select bank3
 21797     1118  1511               	bsf	17,2	;volatile
 21798     1119  0008               	return
 21799     111A                     __end_of_I2C1_MasterStop:
 21800                           
 21801                           	psect	text123
 21802     1114                     __ptext123:	
 21803 ;; *************** function _I2C1_MasterEnableRestart *****************
 21804 ;; Defined at:
 21805 ;;		line 573 in file "mcc_generated_files/i2c1_master.c"
 21806 ;; Parameters:    Size  Location     Type
 21807 ;;		None
 21808 ;; Auto vars:     Size  Location     Type
 21809 ;;		None
 21810 ;; Return value:  Size  Location     Type
 21811 ;;                  1    wreg      void 
 21812 ;; Registers used:
 21813 ;;		None
 21814 ;; Tracked objects:
 21815 ;;		On entry : 3F/0
 21816 ;;		On exit  : 3F/3
 21817 ;;		Unchanged: 0/0
 21818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21823 ;;Total ram usage:        0 bytes
 21824 ;; Hardware stack levels used: 1
 21825 ;; Hardware stack levels required when called: 5
 21826 ;; This function calls:
 21827 ;;		Nothing
 21828 ;; This function is called by:
 21829 ;;		_I2C1_DO_SEND_RESTART_READ
 21830 ;;		_I2C1_DO_SEND_RESTART_WRITE
 21831 ;;		_I2C1_DO_SEND_RESTART
 21832 ;; This function uses a non-reentrant model
 21833 ;;
 21834                           
 21835     1114                     _I2C1_MasterEnableRestart:	
 21836                           ;psect for function _I2C1_MasterEnableRestart
 21837                           
 21838                           
 21839                           ;mcc_generated_files/i2c1_master.c: 575:     SSP1CON2bits.RSEN = 1;
 21840                           
 21841                           ;incstack = 0
 21842                           ; Regs used in _I2C1_MasterEnableRestart: []
 21843     1114  0143               	movlb	3	; select bank3
 21844     1115  1491               	bsf	17,1	;volatile
 21845     1116  0008               	return
 21846     1117                     __end_of_I2C1_MasterEnableRestart:
 21847                           
 21848                           	psect	text124
 21849     1111                     __ptext124:	
 21850 ;; *************** function _I2C1_MasterStart *****************
 21851 ;; Defined at:
 21852 ;;		line 588 in file "mcc_generated_files/i2c1_master.c"
 21853 ;; Parameters:    Size  Location     Type
 21854 ;;		None
 21855 ;; Auto vars:     Size  Location     Type
 21856 ;;		None
 21857 ;; Return value:  Size  Location     Type
 21858 ;;                  1    wreg      void 
 21859 ;; Registers used:
 21860 ;;		None
 21861 ;; Tracked objects:
 21862 ;;		On entry : 3F/2
 21863 ;;		On exit  : 3F/3
 21864 ;;		Unchanged: 0/0
 21865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21870 ;;Total ram usage:        0 bytes
 21871 ;; Hardware stack levels used: 1
 21872 ;; Hardware stack levels required when called: 5
 21873 ;; This function calls:
 21874 ;;		Nothing
 21875 ;; This function is called by:
 21876 ;;		_I2C1_MasterOperation
 21877 ;; This function uses a non-reentrant model
 21878 ;;
 21879                           
 21880     1111                     _I2C1_MasterStart:	
 21881                           ;psect for function _I2C1_MasterStart
 21882                           
 21883                           
 21884                           ;mcc_generated_files/i2c1_master.c: 590:     SSP1CON2bits.SEN = 1;
 21885                           
 21886                           ;incstack = 0
 21887                           ; Regs used in _I2C1_MasterStart: []
 21888     1111  0143               	movlb	3	; select bank3
 21889     1112  1411               	bsf	17,0	;volatile
 21890     1113  0008               	return
 21891     1114                     __end_of_I2C1_MasterStart:
 21892                           
 21893                           	psect	text125
 21894     1375                     __ptext125:	
 21895 ;; *************** function _I2C1_Close *****************
 21896 ;; Defined at:
 21897 ;;		line 209 in file "mcc_generated_files/i2c1_master.c"
 21898 ;; Parameters:    Size  Location     Type
 21899 ;;		None
 21900 ;; Auto vars:     Size  Location     Type
 21901 ;;  returnValue     1    0[BANK0 ] enum E358
 21902 ;; Return value:  Size  Location     Type
 21903 ;;                  1    wreg      enum E358
 21904 ;; Registers used:
 21905 ;;		wreg, status,2, status,0, pclath, cstack
 21906 ;; Tracked objects:
 21907 ;;		On entry : 3F/0
 21908 ;;		On exit  : 3F/0
 21909 ;;		Unchanged: 0/0
 21910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21914 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21915 ;;Total ram usage:        1 bytes
 21916 ;; Hardware stack levels used: 1
 21917 ;; Hardware stack levels required when called: 6
 21918 ;; This function calls:
 21919 ;;		_I2C1_MasterClearIrq
 21920 ;;		_I2C1_MasterClose
 21921 ;;		_I2C1_MasterDisableIrq
 21922 ;; This function is called by:
 21923 ;;		_I2C1_WriteNBytes
 21924 ;;		_I2C1_ReadNBytes
 21925 ;; This function uses a non-reentrant model
 21926 ;;
 21927                           
 21928     1375                     _I2C1_Close:	
 21929                           ;psect for function _I2C1_Close
 21930                           
 21931                           
 21932                           ;mcc_generated_files/i2c1_master.c: 211:     i2c1_error_t returnValue = I2C1_BUSY;
 21933                           
 21934                           ;incstack = 0
 21935                           ; Regs used in _I2C1_Close: [wreg+status,2+status,0+pclath+cstack]
 21936     1375  3001               	movlw	1
 21937     1376  00A0               	movwf	I2C1_Close@returnValue
 21938                           
 21939                           ;mcc_generated_files/i2c1_master.c: 212:     if(!I2C1_Status.busy)
 21940     1377  0142               	movlb	2	; select bank2
 21941     1378  18BD               	btfsc	(_I2C1_Status^(0+256)+29),1
 21942     1379  2B89               	goto	l7229
 21943                           
 21944                           ;mcc_generated_files/i2c1_master.c: 213:     {;mcc_generated_files/i2c1_master.c: 214:  
      +                                 I2C1_Status.inUse = 0;
 21945     137A  113D               	bcf	(_I2C1_Status^(0+256)+29),2
 21946                           
 21947                           ;mcc_generated_files/i2c1_master.c: 215:         I2C1_Status.address = 0xff;
 21948     137B  30FF               	movlw	255
 21949     137C  00B6               	movwf	(_I2C1_Status^(0+256)+22)
 21950                           
 21951                           ;mcc_generated_files/i2c1_master.c: 216:         I2C1_MasterClearIrq();
 21952     137D  3191  210B  3193   	fcall	_I2C1_MasterClearIrq
 21953                           
 21954                           ;mcc_generated_files/i2c1_master.c: 217:         I2C1_MasterDisableIrq();
 21955     1380  3190  20FF  3193   	fcall	_I2C1_MasterDisableIrq
 21956                           
 21957                           ;mcc_generated_files/i2c1_master.c: 218:         I2C1_MasterClose();
 21958     1383  3191  210E         	fcall	_I2C1_MasterClose
 21959                           
 21960                           ;mcc_generated_files/i2c1_master.c: 219:         returnValue = I2C1_Status.error;
 21961     1385  0142               	movlb	2	; select bank2
 21962     1386  083C               	movf	(_I2C1_Status^(0+256)+28),w
 21963     1387  0140               	movlb	0	; select bank0
 21964     1388  00A0               	movwf	I2C1_Close@returnValue
 21965     1389                     l7229:
 21966                           
 21967                           ;mcc_generated_files/i2c1_master.c: 221:     return returnValue;
 21968     1389  0140               	movlb	0	; select bank0
 21969     138A  0820               	movf	I2C1_Close@returnValue,w
 21970     138B  0008               	return
 21971     138C                     __end_of_I2C1_Close:
 21972                           
 21973                           	psect	text126
 21974     10FF                     __ptext126:	
 21975 ;; *************** function _I2C1_MasterDisableIrq *****************
 21976 ;; Defined at:
 21977 ;;		line 635 in file "mcc_generated_files/i2c1_master.c"
 21978 ;; Parameters:    Size  Location     Type
 21979 ;;		None
 21980 ;; Auto vars:     Size  Location     Type
 21981 ;;		None
 21982 ;; Return value:  Size  Location     Type
 21983 ;;                  1    wreg      void 
 21984 ;; Registers used:
 21985 ;;		None
 21986 ;; Tracked objects:
 21987 ;;		On entry : 3F/E
 21988 ;;		On exit  : 3F/E
 21989 ;;		Unchanged: 0/0
 21990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21995 ;;Total ram usage:        0 bytes
 21996 ;; Hardware stack levels used: 1
 21997 ;; Hardware stack levels required when called: 5
 21998 ;; This function calls:
 21999 ;;		Nothing
 22000 ;; This function is called by:
 22001 ;;		_I2C1_Close
 22002 ;; This function uses a non-reentrant model
 22003 ;;
 22004                           
 22005     10FF                     _I2C1_MasterDisableIrq:	
 22006                           ;psect for function _I2C1_MasterDisableIrq
 22007                           
 22008                           
 22009                           ;mcc_generated_files/i2c1_master.c: 637:     PIE3bits.SSP1IE = 0;
 22010                           
 22011                           ;incstack = 0
 22012                           ; Regs used in _I2C1_MasterDisableIrq: []
 22013     10FF  1019               	bcf	25,0	;volatile
 22014     1100  0008               	return
 22015     1101                     __end_of_I2C1_MasterDisableIrq:
 22016                           
 22017                           	psect	text127
 22018     110E                     __ptext127:	
 22019 ;; *************** function _I2C1_MasterClose *****************
 22020 ;; Defined at:
 22021 ;;		line 557 in file "mcc_generated_files/i2c1_master.c"
 22022 ;; Parameters:    Size  Location     Type
 22023 ;;		None
 22024 ;; Auto vars:     Size  Location     Type
 22025 ;;		None
 22026 ;; Return value:  Size  Location     Type
 22027 ;;                  1    wreg      void 
 22028 ;; Registers used:
 22029 ;;		None
 22030 ;; Tracked objects:
 22031 ;;		On entry : 3F/E
 22032 ;;		On exit  : 3F/3
 22033 ;;		Unchanged: 0/0
 22034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22039 ;;Total ram usage:        0 bytes
 22040 ;; Hardware stack levels used: 1
 22041 ;; Hardware stack levels required when called: 5
 22042 ;; This function calls:
 22043 ;;		Nothing
 22044 ;; This function is called by:
 22045 ;;		_I2C1_Close
 22046 ;; This function uses a non-reentrant model
 22047 ;;
 22048                           
 22049     110E                     _I2C1_MasterClose:	
 22050                           ;psect for function _I2C1_MasterClose
 22051                           
 22052                           
 22053                           ;mcc_generated_files/i2c1_master.c: 560:     SSP1CON1bits.SSPEN = 0;
 22054                           
 22055                           ;incstack = 0
 22056                           ; Regs used in _I2C1_MasterClose: []
 22057     110E  0143               	movlb	3	; select bank3
 22058     110F  1290               	bcf	16,5	;volatile
 22059     1110  0008               	return
 22060     1111                     __end_of_I2C1_MasterClose:
 22061                           
 22062                           	psect	text128
 22063     110B                     __ptext128:	
 22064 ;; *************** function _I2C1_MasterClearIrq *****************
 22065 ;; Defined at:
 22066 ;;		line 640 in file "mcc_generated_files/i2c1_master.c"
 22067 ;; Parameters:    Size  Location     Type
 22068 ;;		None
 22069 ;; Auto vars:     Size  Location     Type
 22070 ;;		None
 22071 ;; Return value:  Size  Location     Type
 22072 ;;                  1    wreg      void 
 22073 ;; Registers used:
 22074 ;;		None
 22075 ;; Tracked objects:
 22076 ;;		On entry : 33/2
 22077 ;;		On exit  : 3F/E
 22078 ;;		Unchanged: 0/0
 22079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22084 ;;Total ram usage:        0 bytes
 22085 ;; Hardware stack levels used: 1
 22086 ;; Hardware stack levels required when called: 5
 22087 ;; This function calls:
 22088 ;;		Nothing
 22089 ;; This function is called by:
 22090 ;;		_I2C1_Open
 22091 ;;		_I2C1_Close
 22092 ;;		_I2C1_MasterFsm
 22093 ;; This function uses a non-reentrant model
 22094 ;;
 22095                           
 22096     110B                     _I2C1_MasterClearIrq:	
 22097                           ;psect for function _I2C1_MasterClearIrq
 22098                           
 22099                           
 22100                           ;mcc_generated_files/i2c1_master.c: 642:     PIR3bits.SSP1IF = 0;
 22101                           
 22102                           ;incstack = 0
 22103                           ; Regs used in _I2C1_MasterClearIrq: []
 22104     110B  014E               	movlb	14	; select bank14
 22105     110C  100F               	bcf	15,0	;volatile
 22106     110D  0008               	return
 22107     110E                     __end_of_I2C1_MasterClearIrq:
 22108                           
 22109                           	psect	text129
 22110     1174                     __ptext129:	
 22111 ;; *************** function _FVR_IsOutputReady *****************
 22112 ;; Defined at:
 22113 ;;		line 64 in file "mcc_generated_files/fvr.c"
 22114 ;; Parameters:    Size  Location     Type
 22115 ;;		None
 22116 ;; Auto vars:     Size  Location     Type
 22117 ;;		None
 22118 ;; Return value:  Size  Location     Type
 22119 ;;                  1    wreg      _Bool 
 22120 ;; Registers used:
 22121 ;;		wreg, status,2, status,0
 22122 ;; Tracked objects:
 22123 ;;		On entry : 2D/0
 22124 ;;		On exit  : 3F/12
 22125 ;;		Unchanged: 0/0
 22126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22131 ;;Total ram usage:        0 bytes
 22132 ;; Hardware stack levels used: 1
 22133 ;; Hardware stack levels required when called: 5
 22134 ;; This function calls:
 22135 ;;		Nothing
 22136 ;; This function is called by:
 22137 ;;		_main
 22138 ;; This function uses a non-reentrant model
 22139 ;;
 22140                           
 22141     1174                     _FVR_IsOutputReady:	
 22142                           ;psect for function _FVR_IsOutputReady
 22143                           
 22144                           
 22145                           ;mcc_generated_files/fvr.c: 66:     return (FVRCONbits.FVRRDY);
 22146                           
 22147                           ;incstack = 0
 22148                           ; Regs used in _FVR_IsOutputReady: [wreg+status,2+status,0]
 22149     1174  0152               	movlb	18	; select bank18
 22150     1175  0E0C               	swapf	12,w	;volatile
 22151     1176  0C89               	rrf	9,f
 22152     1177  0C89               	rrf	9,f
 22153     1178  3901               	andlw	1
 22154     1179  0008               	return
 22155     117A                     __end_of_FVR_IsOutputReady:
 22156                           
 22157                           	psect	text130
 22158     1524                     __ptext130:	
 22159 ;; *************** function _DATAEE_ReadWord *****************
 22160 ;; Defined at:
 22161 ;;		line 86 in file "mcc_generated_files/memory.c"
 22162 ;; Parameters:    Size  Location     Type
 22163 ;;  bAdd            2    2[BANK0 ] unsigned short 
 22164 ;; Auto vars:     Size  Location     Type
 22165 ;;  high_byte       1   10[BANK0 ] unsigned char 
 22166 ;;  low_byte        1    9[BANK0 ] unsigned char 
 22167 ;; Return value:  Size  Location     Type
 22168 ;;                  2    2[BANK0 ] unsigned short 
 22169 ;; Registers used:
 22170 ;;		wreg, status,2, status,0, pclath, cstack
 22171 ;; Tracked objects:
 22172 ;;		On entry : 3F/0
 22173 ;;		On exit  : 3F/0
 22174 ;;		Unchanged: 0/0
 22175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22176 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22177 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22178 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22179 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22180 ;;Total ram usage:        9 bytes
 22181 ;; Hardware stack levels used: 1
 22182 ;; Hardware stack levels required when called: 6
 22183 ;; This function calls:
 22184 ;;		_DATAEE_ReadByte
 22185 ;; This function is called by:
 22186 ;;		_main
 22187 ;; This function uses a non-reentrant model
 22188 ;;
 22189                           
 22190     1524                     _DATAEE_ReadWord:	
 22191                           ;psect for function _DATAEE_ReadWord
 22192                           
 22193                           
 22194                           ;mcc_generated_files/memory.c: 86: uint16_t DATAEE_ReadWord(uint16_t bAdd);mcc_generated
      +                          _files/memory.c: 87: {;mcc_generated_files/memory.c: 88:     uint8_t low_byte = DATAEE_R
      +                          eadByte(bAdd);
 22195                           
 22196                           ;incstack = 0
 22197                           ; Regs used in _DATAEE_ReadWord: [wreg+status,2+status,0+pclath+cstack]
 22198     1524  0823               	movf	DATAEE_ReadWord@bAdd+1,w
 22199     1525  00A1               	movwf	DATAEE_ReadByte@bAdd+1
 22200     1526  0822               	movf	DATAEE_ReadWord@bAdd,w
 22201     1527  00A0               	movwf	DATAEE_ReadByte@bAdd
 22202     1528  3192  2264  3195   	fcall	_DATAEE_ReadByte
 22203     152B  0140               	movlb	0	; select bank0
 22204     152C  00A9               	movwf	DATAEE_ReadWord@low_byte
 22205                           
 22206                           ;mcc_generated_files/memory.c: 89:     uint8_t high_byte = DATAEE_ReadByte(bAdd + 0x0001
      +                          );
 22207     152D  0822               	movf	DATAEE_ReadWord@bAdd,w
 22208     152E  3E01               	addlw	1
 22209     152F  00A0               	movwf	DATAEE_ReadByte@bAdd
 22210     1530  3000               	movlw	0
 22211     1531  3D23               	addwfc	DATAEE_ReadWord@bAdd+1,w
 22212     1532  00A1               	movwf	DATAEE_ReadByte@bAdd+1
 22213     1533  3192  2264         	fcall	_DATAEE_ReadByte
 22214     1535  0140               	movlb	0	; select bank0
 22215     1536  00AA               	movwf	DATAEE_ReadWord@high_byte
 22216                           
 22217                           ;mcc_generated_files/memory.c: 91:     return ( high_byte << 8 | low_byte);
 22218     1537  0829               	movf	DATAEE_ReadWord@low_byte,w
 22219     1538  00A4               	movwf	??_DATAEE_ReadWord
 22220     1539  01A5               	clrf	??_DATAEE_ReadWord+1
 22221     153A  082A               	movf	DATAEE_ReadWord@high_byte,w
 22222     153B  00A6               	movwf	??_DATAEE_ReadWord+2
 22223     153C  01A7               	clrf	??_DATAEE_ReadWord+3
 22224     153D  0826               	movf	??_DATAEE_ReadWord+2,w
 22225     153E  00A7               	movwf	??_DATAEE_ReadWord+3
 22226     153F  01A6               	clrf	??_DATAEE_ReadWord+2
 22227     1540  0824               	movf	??_DATAEE_ReadWord,w
 22228     1541  0426               	iorwf	??_DATAEE_ReadWord+2,w
 22229     1542  00A2               	movwf	?_DATAEE_ReadWord
 22230     1543  0825               	movf	??_DATAEE_ReadWord+1,w
 22231     1544  0427               	iorwf	??_DATAEE_ReadWord+3,w
 22232     1545  00A3               	movwf	?_DATAEE_ReadWord+1
 22233     1546  0008               	return
 22234     1547                     __end_of_DATAEE_ReadWord:
 22235                           
 22236                           	psect	text131
 22237     1264                     __ptext131:	
 22238 ;; *************** function _DATAEE_ReadByte *****************
 22239 ;; Defined at:
 22240 ;;		line 94 in file "mcc_generated_files/memory.c"
 22241 ;; Parameters:    Size  Location     Type
 22242 ;;  bAdd            2    0[BANK0 ] unsigned short 
 22243 ;; Auto vars:     Size  Location     Type
 22244 ;;		None
 22245 ;; Return value:  Size  Location     Type
 22246 ;;                  1    wreg      unsigned char 
 22247 ;; Registers used:
 22248 ;;		wreg
 22249 ;; Tracked objects:
 22250 ;;		On entry : 3F/0
 22251 ;;		On exit  : 3F/10
 22252 ;;		Unchanged: 0/0
 22253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22254 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22258 ;;Total ram usage:        2 bytes
 22259 ;; Hardware stack levels used: 1
 22260 ;; Hardware stack levels required when called: 5
 22261 ;; This function calls:
 22262 ;;		Nothing
 22263 ;; This function is called by:
 22264 ;;		_DATAEE_ReadWord
 22265 ;;		_main
 22266 ;; This function uses a non-reentrant model
 22267 ;;
 22268                           
 22269     1264                     _DATAEE_ReadByte:	
 22270                           ;psect for function _DATAEE_ReadByte
 22271                           
 22272                           
 22273                           ;mcc_generated_files/memory.c: 94: uint8_t DATAEE_ReadByte(uint16_t bAdd);mcc_generated_
      +                          files/memory.c: 95: {;mcc_generated_files/memory.c: 96:     NVMADRH = ((bAdd >> 8) & 0xF
      +                          F);
 22274                           
 22275                           ;incstack = 0
 22276                           ; Regs used in _DATAEE_ReadByte: [wreg]
 22277     1264  0821               	movf	DATAEE_ReadByte@bAdd+1,w
 22278     1265  0150               	movlb	16	; select bank16
 22279     1266  009B               	movwf	27	;volatile
 22280                           
 22281                           ;mcc_generated_files/memory.c: 97:     NVMADRL = (bAdd & 0xFF);
 22282     1267  0140               	movlb	0	; select bank0
 22283     1268  0820               	movf	DATAEE_ReadByte@bAdd,w
 22284     1269  0150               	movlb	16	; select bank16
 22285     126A  009A               	movwf	26	;volatile
 22286                           
 22287                           ;mcc_generated_files/memory.c: 98:     NVMCON1bits.NVMREGS = 1;
 22288     126B  171E               	bsf	30,6	;volsfr
 22289                           
 22290                           ;mcc_generated_files/memory.c: 99:     NVMCON1bits.RD = 1;
 22291     126C  141E               	bsf	30,0	;volsfr
 22292                           
 22293                           ;mcc_generated_files/memory.c: 100:     __nop();
 22294     126D  0000               	nop
 22295                           
 22296                           ;mcc_generated_files/memory.c: 101:     __nop();
 22297     126E  0000               	nop
 22298                           
 22299                           ;mcc_generated_files/memory.c: 103:     return (NVMDATL);
 22300     126F  0150               	movlb	16	; select bank16
 22301     1270  081C               	movf	28,w	;volatile
 22302     1271  0008               	return
 22303     1272                     __end_of_DATAEE_ReadByte:
 22304                           
 22305                           	psect	intentry
 22306     0004                     __pintentry:	
 22307 ;; *************** function _INTERRUPT_InterruptManager *****************
 22308 ;; Defined at:
 22309 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 22310 ;; Parameters:    Size  Location     Type
 22311 ;;		None
 22312 ;; Auto vars:     Size  Location     Type
 22313 ;;		None
 22314 ;; Return value:  Size  Location     Type
 22315 ;;                  1    wreg      void 
 22316 ;; Registers used:
 22317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22318 ;; Tracked objects:
 22319 ;;		On entry : 0/0
 22320 ;;		On exit  : 0/0
 22321 ;;		Unchanged: 0/0
 22322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22327 ;;Total ram usage:        0 bytes
 22328 ;; Hardware stack levels used: 1
 22329 ;; Hardware stack levels required when called: 4
 22330 ;; This function calls:
 22331 ;;		NULL
 22332 ;;		_EUSART1_Receive_ISR
 22333 ;;		_TMR1_ISR
 22334 ;; This function is called by:
 22335 ;;		Interrupt level 1
 22336 ;; This function uses a non-reentrant model
 22337 ;;
 22338                           
 22339     0004                     _INTERRUPT_InterruptManager:
 22340                           
 22341                           ;incstack = 0
 22342 ;; hardware stack exceeded
 22343     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 22344                           
 22345                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 22346     0005  3180               	pagesel	$
 22347                           
 22348                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 22349     0006  1F0B               	btfss	11,6	;volatile
 22350     0007  2819               	goto	i1l891
 22351                           
 22352                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1)
 22353     0008  014E               	movlb	14	; select bank14
 22354     0009  181A               	btfsc	26,0	;volatile
 22355     000A  1C10               	btfss	16,0	;volatile
 22356     000B  2810               	goto	i1l886
 22357                           
 22358                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             TMR1_ISR();
 22359     000C  3192  22E8  3180   	fcall	_TMR1_ISR
 22360                           
 22361                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 22362     000F  2819               	goto	i1l891
 22363     0010                     i1l886:	
 22364                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE3bits.RC1IE == 1 && PIR
      +                          3bits.RC1IF == 1)
 22365                           
 22366     0010  1A99               	btfsc	25,5	;volatile
 22367     0011  1E8F               	btfss	15,5	;volatile
 22368     0012  2819               	goto	i1l891
 22369                           
 22370                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART1_RxDefaultInterruptHandler();
 22371     0013  0142               	movlb	2	; select bank2
 22372     0014  086D               	movf	(_EUSART1_RxDefaultInterruptHandler+1)^(0+256),w
 22373     0015  008A               	movwf	10
 22374     0016  086C               	movf	_EUSART1_RxDefaultInterruptHandler^(0+256),w
 22375     0017  000A               	callw
 22376     0018  3180               	pagesel	$
 22377     0019                     i1l891:	
 22378                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 22379                           
 22380                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 22381                           
 22382     0019  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 22383     001A  0009               	retfie
 22384     001B                     __end_of_INTERRUPT_InterruptManager:
 22385                           
 22386                           	psect	text133
 22387     12E8                     __ptext133:	
 22388 ;; *************** function _TMR1_ISR *****************
 22389 ;; Defined at:
 22390 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 22391 ;; Parameters:    Size  Location     Type
 22392 ;;		None
 22393 ;; Auto vars:     Size  Location     Type
 22394 ;;		None
 22395 ;; Return value:  Size  Location     Type
 22396 ;;                  1    wreg      void 
 22397 ;; Registers used:
 22398 ;;		wreg, status,2, status,0, pclath, cstack
 22399 ;; Tracked objects:
 22400 ;;		On entry : 3F/E
 22401 ;;		On exit  : 0/0
 22402 ;;		Unchanged: 0/0
 22403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22408 ;;Total ram usage:        0 bytes
 22409 ;; Hardware stack levels used: 1
 22410 ;; Hardware stack levels required when called: 2
 22411 ;; This function calls:
 22412 ;;		NULL
 22413 ;;		_TMR1_DefaultInterruptHandler
 22414 ;;		_TMR1_WriteTimer
 22415 ;; This function is called by:
 22416 ;;		_INTERRUPT_InterruptManager
 22417 ;; This function uses a non-reentrant model
 22418 ;;
 22419                           
 22420     12E8                     _TMR1_ISR:	
 22421                           ;psect for function _TMR1_ISR
 22422                           
 22423                           
 22424                           ;mcc_generated_files/tmr1.c: 173:     PIR4bits.TMR1IF = 0;
 22425                           
 22426                           ;incstack = 0
 22427                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 22428     12E8  1010               	bcf	16,0	;volatile
 22429                           
 22430                           ;mcc_generated_files/tmr1.c: 174:     TMR1_WriteTimer(timer1ReloadVal);
 22431     12E9  0142               	movlb	2	; select bank2
 22432     12EA  085A               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 22433     12EB  00F7               	movwf	TMR1_WriteTimer@timerVal+1
 22434     12EC  0859               	movf	_timer1ReloadVal^(0+256),w	;volatile
 22435     12ED  00F6               	movwf	TMR1_WriteTimer@timerVal
 22436     12EE  3192  2272  3192   	fcall	_TMR1_WriteTimer
 22437                           
 22438                           ;mcc_generated_files/tmr1.c: 176:     if(TMR1_InterruptHandler)
 22439     12F1  0142               	movlb	2	; select bank2
 22440     12F2  086A               	movf	_TMR1_InterruptHandler^(0+256),w
 22441     12F3  046B               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 22442     12F4  1903               	btfsc	3,2
 22443     12F5  0008               	return
 22444                           
 22445                           ;mcc_generated_files/tmr1.c: 177:     {;mcc_generated_files/tmr1.c: 178:         TMR1_In
      +                          terruptHandler();
 22446     12F6  086B               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 22447     12F7  008A               	movwf	10
 22448     12F8  086A               	movf	_TMR1_InterruptHandler^(0+256),w
 22449     12F9  000A               	callw
 22450     12FA  3192               	pagesel	$
 22451     12FB  0008               	return
 22452     12FC                     __end_of_TMR1_ISR:
 22453                           
 22454                           	psect	text134
 22455     123D                     __ptext134:	
 22456 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 22457 ;; Defined at:
 22458 ;;		line 187 in file "mcc_generated_files/tmr1.c"
 22459 ;; Parameters:    Size  Location     Type
 22460 ;;		None
 22461 ;; Auto vars:     Size  Location     Type
 22462 ;;		None
 22463 ;; Return value:  Size  Location     Type
 22464 ;;                  1    wreg      void 
 22465 ;; Registers used:
 22466 ;;		wreg, status,2, status,0, pclath, cstack
 22467 ;; Tracked objects:
 22468 ;;		On entry : 3F/2
 22469 ;;		On exit  : 3F/E
 22470 ;;		Unchanged: 0/0
 22471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22476 ;;Total ram usage:        0 bytes
 22477 ;; Hardware stack levels used: 1
 22478 ;; Hardware stack levels required when called: 1
 22479 ;; This function calls:
 22480 ;;		_TMR1_StopTimer
 22481 ;;		i1_UART_ClearBuffer
 22482 ;; This function is called by:
 22483 ;;		_TMR1_Initialize
 22484 ;;		_TMR1_ISR
 22485 ;; This function uses a non-reentrant model
 22486 ;;
 22487                           
 22488     123D                     _TMR1_DefaultInterruptHandler:	
 22489                           ;psect for function _TMR1_DefaultInterruptHandler
 22490                           
 22491                           
 22492                           ;mcc_generated_files/tmr1.c: 190:     if(uart_expire_time){
 22493                           
 22494                           ;incstack = 0
 22495                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 22496     123D  0874               	movf	_uart_expire_time,w	;volatile
 22497     123E  1903               	btfsc	3,2
 22498     123F  2A45               	goto	i1l5845
 22499                           
 22500                           ;mcc_generated_files/tmr1.c: 191:         UART_ClearBuffer();
 22501     1240  3191  212A  3192   	fcall	i1_UART_ClearBuffer
 22502                           
 22503                           ;mcc_generated_files/tmr1.c: 192:         TMR1_StopTimer();
 22504     1243  3191  2105         	fcall	_TMR1_StopTimer
 22505     1245                     i1l5845:
 22506                           
 22507                           ;mcc_generated_files/tmr1.c: 194:     uart_expire_time = 1;
 22508     1245  3001               	movlw	1
 22509     1246  00F4               	movwf	_uart_expire_time	;volatile
 22510                           
 22511                           ;mcc_generated_files/tmr1.c: 196:     PIR4bits.TMR1IF = 0;
 22512     1247  014E               	movlb	14	; select bank14
 22513     1248  1010               	bcf	16,0	;volatile
 22514     1249  0008               	return
 22515     124A                     __end_of_TMR1_DefaultInterruptHandler:
 22516                           
 22517                           	psect	text135
 22518     112A                     __ptext135:	
 22519 ;; *************** function i1_UART_ClearBuffer *****************
 22520 ;; Defined at:
 22521 ;;		line 350 in file "mcc_generated_files/eusart1.c"
 22522 ;; Parameters:    Size  Location     Type
 22523 ;;		None
 22524 ;; Auto vars:     Size  Location     Type
 22525 ;;		None
 22526 ;; Return value:  Size  Location     Type
 22527 ;;                  1    wreg      void 
 22528 ;; Registers used:
 22529 ;;		status,2
 22530 ;; Tracked objects:
 22531 ;;		On entry : 3F/2
 22532 ;;		On exit  : 3F/2
 22533 ;;		Unchanged: 3F/0
 22534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22539 ;;Total ram usage:        0 bytes
 22540 ;; Hardware stack levels used: 1
 22541 ;; This function calls:
 22542 ;;		Nothing
 22543 ;; This function is called by:
 22544 ;;		_TMR1_DefaultInterruptHandler
 22545 ;; This function uses a non-reentrant model
 22546 ;;
 22547                           
 22548     112A                     i1_UART_ClearBuffer:	
 22549                           ;psect for function i1_UART_ClearBuffer
 22550                           
 22551                           
 22552                           ;mcc_generated_files/eusart1.c: 351:     eusart1RxHead = 0;
 22553                           
 22554                           ;incstack = 0
 22555                           ; Regs used in i1_UART_ClearBuffer: [status,2]
 22556     112A  01F3               	clrf	_eusart1RxHead	;volatile
 22557                           
 22558                           ;mcc_generated_files/eusart1.c: 352:     eusart1RxTail = 0;
 22559     112B  01F2               	clrf	_eusart1RxTail	;volatile
 22560                           
 22561                           ;mcc_generated_files/eusart1.c: 353:     eusart1RxCount = 0;
 22562     112C  01F1               	clrf	_eusart1RxCount	;volatile
 22563     112D  0008               	return
 22564     112E                     __end_ofi1_UART_ClearBuffer:
 22565                           
 22566                           	psect	text136
 22567     16BA                     __ptext136:	
 22568 ;; *************** function _EUSART1_Receive_ISR *****************
 22569 ;; Defined at:
 22570 ;;		line 270 in file "mcc_generated_files/eusart1.c"
 22571 ;; Parameters:    Size  Location     Type
 22572 ;;		None
 22573 ;; Auto vars:     Size  Location     Type
 22574 ;;		None
 22575 ;; Return value:  Size  Location     Type
 22576 ;;                  1    wreg      void 
 22577 ;; Registers used:
 22578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22579 ;; Tracked objects:
 22580 ;;		On entry : 3F/2
 22581 ;;		On exit  : 0/0
 22582 ;;		Unchanged: 0/0
 22583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22588 ;;Total ram usage:        0 bytes
 22589 ;; Hardware stack levels used: 1
 22590 ;; Hardware stack levels required when called: 3
 22591 ;; This function calls:
 22592 ;;		NULL
 22593 ;;		_EUSART1_DefaultErrorHandler
 22594 ;;		_EUSART1_DefaultFramingErrorHandler
 22595 ;;		_EUSART1_DefaultOverrunErrorHandler
 22596 ;;		_EUSART1_RxDataHandler
 22597 ;; This function is called by:
 22598 ;;		_EUSART1_Initialize
 22599 ;;		_INTERRUPT_InterruptManager
 22600 ;; This function uses a non-reentrant model
 22601 ;;
 22602                           
 22603     16BA                     _EUSART1_Receive_ISR:	
 22604                           ;psect for function _EUSART1_Receive_ISR
 22605                           
 22606                           
 22607                           ;mcc_generated_files/eusart1.c: 273:     eusart1RxStatusBuffer[eusart1RxHead].status = 0
      +                          ;
 22608                           
 22609                           ;incstack = 0
 22610 ;; hardware stack exceeded
 22611                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 22612     16BA  0873               	movf	_eusart1RxHead,w	;volatile
 22613     16BB  3E3E               	addlw	(low (_eusart1RxStatusBuffer| (0+256)))& (0+255)
 22614     16BC  0086               	movwf	6
 22615     16BD  3001               	movlw	1	; select bank2/3
 22616     16BE  0087               	movwf	7
 22617     16BF  0181               	clrf	1
 22618                           
 22619                           ;mcc_generated_files/eusart1.c: 275:     if(RC1STAbits.FERR){
 22620     16C0  1D1D               	btfss	29,2	;volatile
 22621     16C1  2ECE               	goto	i1l5963
 22622                           
 22623                           ;mcc_generated_files/eusart1.c: 276:         eusart1RxStatusBuffer[eusart1RxHead].ferr =
      +                           1;
 22624     16C2  0873               	movf	_eusart1RxHead,w	;volatile
 22625     16C3  3E3E               	addlw	(low (_eusart1RxStatusBuffer| (0+256)))& (0+255)
 22626     16C4  0086               	movwf	6
 22627     16C5  3001               	movlw	1	; select bank2/3
 22628     16C6  0087               	movwf	7
 22629     16C7  1481               	bsf	1,1
 22630                           
 22631                           ;mcc_generated_files/eusart1.c: 277:         EUSART1_FramingErrorHandler();
 22632     16C8  0143               	movlb	3	; select bank3
 22633     16C9  0828               	movf	(_EUSART1_FramingErrorHandler+1)^(0+384),w
 22634     16CA  008A               	movwf	10
 22635     16CB  0827               	movf	_EUSART1_FramingErrorHandler^(0+384),w
 22636     16CC  000A               	callw
 22637     16CD  3196               	pagesel	$
 22638     16CE                     i1l5963:
 22639                           
 22640                           ;mcc_generated_files/eusart1.c: 280:     if(RC1STAbits.OERR){
 22641     16CE  0142               	movlb	2	; select bank2
 22642     16CF  1C9D               	btfss	29,1	;volatile
 22643     16D0  2EDD               	goto	i1l5969
 22644                           
 22645                           ;mcc_generated_files/eusart1.c: 281:         eusart1RxStatusBuffer[eusart1RxHead].oerr =
      +                           1;
 22646     16D1  0873               	movf	_eusart1RxHead,w	;volatile
 22647     16D2  3E3E               	addlw	(low (_eusart1RxStatusBuffer| (0+256)))& (0+255)
 22648     16D3  0086               	movwf	6
 22649     16D4  3001               	movlw	1	; select bank2/3
 22650     16D5  0087               	movwf	7
 22651     16D6  1501               	bsf	1,2
 22652                           
 22653                           ;mcc_generated_files/eusart1.c: 282:         EUSART1_OverrunErrorHandler();
 22654     16D7  0144               	movlb	4	; select bank4
 22655     16D8  086A               	movf	(_EUSART1_OverrunErrorHandler+1)^(0+512),w
 22656     16D9  008A               	movwf	10
 22657     16DA  0869               	movf	_EUSART1_OverrunErrorHandler^(0+512),w
 22658     16DB  000A               	callw
 22659     16DC  3196               	pagesel	$
 22660     16DD                     i1l5969:
 22661                           
 22662                           ;mcc_generated_files/eusart1.c: 285:     if(eusart1RxStatusBuffer[eusart1RxHead].status)
      +                          {
 22663     16DD  0873               	movf	_eusart1RxHead,w	;volatile
 22664     16DE  3E3E               	addlw	(low (_eusart1RxStatusBuffer| (0+256)))& (0+255)
 22665     16DF  0086               	movwf	6
 22666     16E0  3001               	movlw	1	; select bank2/3
 22667     16E1  0087               	movwf	7
 22668     16E2  0801               	movf	1,w
 22669     16E3  1903               	btfsc	3,2
 22670     16E4  2EEC               	goto	i1l5973
 22671                           
 22672                           ;mcc_generated_files/eusart1.c: 286:         EUSART1_ErrorHandler();
 22673     16E5  0144               	movlb	4	; select bank4
 22674     16E6  0868               	movf	(_EUSART1_ErrorHandler+1)^(0+512),w
 22675     16E7  008A               	movwf	10
 22676     16E8  0867               	movf	_EUSART1_ErrorHandler^(0+512),w
 22677     16E9  000A               	callw
 22678     16EA  3196               	pagesel	$
 22679                           
 22680                           ;mcc_generated_files/eusart1.c: 287:     } else {
 22681     16EB  0008               	return
 22682     16EC                     i1l5973:
 22683                           
 22684                           ;mcc_generated_files/eusart1.c: 288:         EUSART1_RxDataHandler();
 22685     16EC  3196  26EF         	fcall	_EUSART1_RxDataHandler
 22686     16EE  0008               	return
 22687     16EF                     __end_of_EUSART1_Receive_ISR:
 22688                           
 22689                           	psect	text137
 22690     1126                     __ptext137:	
 22691 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
 22692 ;; Defined at:
 22693 ;;		line 321 in file "mcc_generated_files/eusart1.c"
 22694 ;; Parameters:    Size  Location     Type
 22695 ;;		None
 22696 ;; Auto vars:     Size  Location     Type
 22697 ;;		None
 22698 ;; Return value:  Size  Location     Type
 22699 ;;                  1    wreg      void 
 22700 ;; Registers used:
 22701 ;;		None
 22702 ;; Tracked objects:
 22703 ;;		On entry : 3F/4
 22704 ;;		On exit  : 3F/2
 22705 ;;		Unchanged: 0/0
 22706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22711 ;;Total ram usage:        0 bytes
 22712 ;; Hardware stack levels used: 1
 22713 ;; This function calls:
 22714 ;;		Nothing
 22715 ;; This function is called by:
 22716 ;;		_EUSART1_Initialize
 22717 ;;		_EUSART1_Receive_ISR
 22718 ;; This function uses a non-reentrant model
 22719 ;;
 22720                           
 22721     1126                     _EUSART1_DefaultOverrunErrorHandler:	
 22722                           ;psect for function _EUSART1_DefaultOverrunErrorHandler
 22723                           
 22724                           
 22725                           ;mcc_generated_files/eusart1.c: 324:     RC1STAbits.CREN = 0;
 22726                           
 22727                           ;incstack = 0
 22728                           ; Regs used in _EUSART1_DefaultOverrunErrorHandler: []
 22729     1126  0142               	movlb	2	; select bank2
 22730     1127  121D               	bcf	29,4	;volatile
 22731                           
 22732                           ;mcc_generated_files/eusart1.c: 325:     RC1STAbits.CREN = 1;
 22733     1128  161D               	bsf	29,4	;volatile
 22734     1129  0008               	return
 22735     112A                     __end_of_EUSART1_DefaultOverrunErrorHandler:
 22736                           
 22737                           	psect	text138
 22738     10FA                     __ptext138:	
 22739 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
 22740 ;; Defined at:
 22741 ;;		line 319 in file "mcc_generated_files/eusart1.c"
 22742 ;; Parameters:    Size  Location     Type
 22743 ;;		None
 22744 ;; Auto vars:     Size  Location     Type
 22745 ;;		None
 22746 ;; Return value:  Size  Location     Type
 22747 ;;                  1    wreg      void 
 22748 ;; Registers used:
 22749 ;;		None
 22750 ;; Tracked objects:
 22751 ;;		On entry : 3F/3
 22752 ;;		On exit  : 3F/3
 22753 ;;		Unchanged: 3E/0
 22754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22759 ;;Total ram usage:        0 bytes
 22760 ;; Hardware stack levels used: 1
 22761 ;; This function calls:
 22762 ;;		Nothing
 22763 ;; This function is called by:
 22764 ;;		_EUSART1_Initialize
 22765 ;;		_EUSART1_Receive_ISR
 22766 ;; This function uses a non-reentrant model
 22767 ;;
 22768                           
 22769     10FA                     _EUSART1_DefaultFramingErrorHandler:	
 22770                           ;psect for function _EUSART1_DefaultFramingErrorHandler
 22771                           
 22772                           
 22773                           ;incstack = 0
 22774                           ; Regs used in _EUSART1_DefaultFramingErrorHandler: []
 22775     10FA  0008               	return
 22776     10FB                     __end_of_EUSART1_DefaultFramingErrorHandler:
 22777                           
 22778                           	psect	text139
 22779     1108                     __ptext139:	
 22780 ;; *************** function _EUSART1_DefaultErrorHandler *****************
 22781 ;; Defined at:
 22782 ;;		line 329 in file "mcc_generated_files/eusart1.c"
 22783 ;; Parameters:    Size  Location     Type
 22784 ;;		None
 22785 ;; Auto vars:     Size  Location     Type
 22786 ;;		None
 22787 ;; Return value:  Size  Location     Type
 22788 ;;                  1    wreg      void 
 22789 ;; Registers used:
 22790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22791 ;; Tracked objects:
 22792 ;;		On entry : 3F/4
 22793 ;;		On exit  : 39/0
 22794 ;;		Unchanged: 0/0
 22795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22800 ;;Total ram usage:        0 bytes
 22801 ;; Hardware stack levels used: 1
 22802 ;; Hardware stack levels required when called: 2
 22803 ;; This function calls:
 22804 ;;		_EUSART1_RxDataHandler
 22805 ;; This function is called by:
 22806 ;;		_EUSART1_Initialize
 22807 ;;		_EUSART1_Receive_ISR
 22808 ;; This function uses a non-reentrant model
 22809 ;;
 22810                           
 22811     1108                     _EUSART1_DefaultErrorHandler:	
 22812                           ;psect for function _EUSART1_DefaultErrorHandler
 22813                           
 22814                           
 22815                           ;mcc_generated_files/eusart1.c: 330:     EUSART1_RxDataHandler();
 22816                           
 22817                           ;incstack = 0
 22818 ;; hardware stack exceeded
 22819                           ; Regs used in _EUSART1_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 22820     1108  3196  26EF         	fcall	_EUSART1_RxDataHandler
 22821     110A  0008               	return
 22822     110B                     __end_of_EUSART1_DefaultErrorHandler:
 22823                           
 22824                           	psect	text140
 22825     16EF                     __ptext140:	
 22826 ;; *************** function _EUSART1_RxDataHandler *****************
 22827 ;; Defined at:
 22828 ;;		line 294 in file "mcc_generated_files/eusart1.c"
 22829 ;; Parameters:    Size  Location     Type
 22830 ;;		None
 22831 ;; Auto vars:     Size  Location     Type
 22832 ;;  t               2    4[COMMON] int 
 22833 ;; Return value:  Size  Location     Type
 22834 ;;                  1    wreg      void 
 22835 ;; Registers used:
 22836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22837 ;; Tracked objects:
 22838 ;;		On entry : 0/2
 22839 ;;		On exit  : 39/0
 22840 ;;		Unchanged: 0/0
 22841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22843 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22844 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22845 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22846 ;;Total ram usage:        4 bytes
 22847 ;; Hardware stack levels used: 1
 22848 ;; Hardware stack levels required when called: 1
 22849 ;; This function calls:
 22850 ;;		_TMR1_StartTimer
 22851 ;;		_TMR1_StopTimer
 22852 ;;		_TMR1_WriteTimer
 22853 ;; This function is called by:
 22854 ;;		_EUSART1_Receive_ISR
 22855 ;;		_EUSART1_DefaultErrorHandler
 22856 ;; This function uses a non-reentrant model
 22857 ;;
 22858                           
 22859     16EF                     _EUSART1_RxDataHandler:	
 22860                           ;psect for function _EUSART1_RxDataHandler
 22861                           
 22862                           
 22863                           ;mcc_generated_files/eusart1.c: 296:     int t;;mcc_generated_files/eusart1.c: 297:     
      +                          eusart1RxBuffer[eusart1RxHead] = RC1REG;
 22864                           
 22865                           ;incstack = 0
 22866                           ; Regs used in _EUSART1_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 22867     16EF  0873               	movf	_eusart1RxHead,w
 22868     16F0  3E46               	addlw	(low (_eusart1RxBuffer| (0+256)))& (0+255)
 22869     16F1  0086               	movwf	6
 22870     16F2  3001               	movlw	1	; select bank2/3
 22871     16F3  0087               	movwf	7
 22872     16F4  0142               	movlb	2	; select bank2
 22873     16F5  0819               	movf	25,w	;volatile
 22874     16F6  0081               	movwf	1
 22875                           
 22876                           ;mcc_generated_files/eusart1.c: 298:     eusart1RxCount++;
 22877     16F7  3001               	movlw	1
 22878     16F8  07F1               	addwf	_eusart1RxCount,f	;volatile
 22879                           
 22880                           ;mcc_generated_files/eusart1.c: 300:     if(eusart1RxCount == 8)
 22881     16F9  3008               	movlw	8
 22882     16FA  0671               	xorwf	_eusart1RxCount,w	;volatile
 22883     16FB  1D03               	btfss	3,2
 22884     16FC  2F05               	goto	i1l5467
 22885                           
 22886                           ;mcc_generated_files/eusart1.c: 301:     {;mcc_generated_files/eusart1.c: 302:         e
      +                          usart1PacketFinish++;
 22887     16FD  3001               	movlw	1
 22888     16FE  0143               	movlb	3	; select bank3
 22889     16FF  07A9               	addwf	_eusart1PacketFinish^(0+384),f	;volatile
 22890                           
 22891                           ;mcc_generated_files/eusart1.c: 303:         eusart1RxCount = 0;
 22892     1700  01F1               	clrf	_eusart1RxCount	;volatile
 22893                           
 22894                           ;mcc_generated_files/eusart1.c: 304:         TMR1_StopTimer();
 22895     1701  3191  2105  3196   	fcall	_TMR1_StopTimer
 22896                           
 22897                           ;mcc_generated_files/eusart1.c: 305:     }else if(eusart1RxCount == 1){
 22898     1704  2F11               	goto	i1l5473
 22899     1705                     i1l5467:
 22900     1705  0371               	decf	_eusart1RxCount,w	;volatile
 22901     1706  1D03               	btfss	3,2
 22902     1707  2F11               	goto	i1l5473
 22903                           
 22904                           ;mcc_generated_files/eusart1.c: 306:         TMR1_WriteTimer(0);
 22905     1708  3000               	movlw	0
 22906     1709  00F6               	movwf	TMR1_WriteTimer@timerVal
 22907     170A  00F7               	movwf	TMR1_WriteTimer@timerVal+1
 22908     170B  3192  2272  3196   	fcall	_TMR1_WriteTimer
 22909                           
 22910                           ;mcc_generated_files/eusart1.c: 307:         TMR1_StartTimer();
 22911     170E  3190  20FD  3196   	fcall	_TMR1_StartTimer
 22912     1711                     i1l5473:
 22913                           
 22914                           ;mcc_generated_files/eusart1.c: 310:     uart_expire_time = 0;
 22915     1711  01F4               	clrf	_uart_expire_time
 22916     1712  01F5               	clrf	_uart_expire_time+1
 22917                           
 22918                           ;mcc_generated_files/eusart1.c: 311:     t=eusart1RxHead;
 22919     1713  0873               	movf	_eusart1RxHead,w	;volatile
 22920     1714  00F8               	movwf	??_EUSART1_RxDataHandler
 22921     1715  01F9               	clrf	??_EUSART1_RxDataHandler+1
 22922     1716  0878               	movf	??_EUSART1_RxDataHandler,w
 22923     1717  00FA               	movwf	EUSART1_RxDataHandler@t
 22924     1718  0879               	movf	??_EUSART1_RxDataHandler+1,w
 22925     1719  00FB               	movwf	EUSART1_RxDataHandler@t+1
 22926                           
 22927                           ;mcc_generated_files/eusart1.c: 312:     eusart1RxHead = (eusart1RxHead + 1)% 8;
 22928     171A  0873               	movf	_eusart1RxHead,w	;volatile
 22929     171B  3E01               	addlw	1
 22930     171C  3907               	andlw	7
 22931     171D  00F3               	movwf	_eusart1RxHead	;volatile
 22932                           
 22933                           ;mcc_generated_files/eusart1.c: 313:     if(eusart1RxHead == eusart1RxTail)
 22934     171E  0873               	movf	_eusart1RxHead,w	;volatile
 22935     171F  0672               	xorwf	_eusart1RxTail,w	;volatile
 22936     1720  1D03               	skipz
 22937     1721  0008               	return
 22938                           
 22939                           ;mcc_generated_files/eusart1.c: 314:     {;mcc_generated_files/eusart1.c: 315:         e
      +                          usart1RxHead = t;
 22940     1722  087A               	movf	EUSART1_RxDataHandler@t,w
 22941     1723  00F3               	movwf	_eusart1RxHead	;volatile
 22942     1724  0008               	return
 22943     1725                     __end_of_EUSART1_RxDataHandler:
 22944                           
 22945                           	psect	text141
 22946     1272                     __ptext141:	
 22947 ;; *************** function _TMR1_WriteTimer *****************
 22948 ;; Defined at:
 22949 ;;		line 132 in file "mcc_generated_files/tmr1.c"
 22950 ;; Parameters:    Size  Location     Type
 22951 ;;  timerVal        2    0[COMMON] unsigned short 
 22952 ;; Auto vars:     Size  Location     Type
 22953 ;;		None
 22954 ;; Return value:  Size  Location     Type
 22955 ;;                  1    wreg      void 
 22956 ;; Registers used:
 22957 ;;		wreg
 22958 ;; Tracked objects:
 22959 ;;		On entry : 3F/2
 22960 ;;		On exit  : 3F/4
 22961 ;;		Unchanged: 0/0
 22962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22963 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22966 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22967 ;;Total ram usage:        2 bytes
 22968 ;; Hardware stack levels used: 1
 22969 ;; This function calls:
 22970 ;;		Nothing
 22971 ;; This function is called by:
 22972 ;;		_EUSART1_RxDataHandler
 22973 ;;		_TMR1_ISR
 22974 ;; This function uses a non-reentrant model
 22975 ;;
 22976                           
 22977     1272                     _TMR1_WriteTimer:	
 22978                           ;psect for function _TMR1_WriteTimer
 22979                           
 22980                           
 22981                           ;mcc_generated_files/tmr1.c: 132: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 133: {;mcc_generated_files/tmr1.c: 134:     if (T1CONbits.NOT_SYNC == 1)
 22982                           
 22983                           ;incstack = 0
 22984                           ; Regs used in _TMR1_WriteTimer: [wreg]
 22985     1272  0144               	movlb	4	; select bank4
 22986     1273  1D0E               	btfss	14,2	;volatile
 22987     1274  2A7C               	goto	i1l5257
 22988                           
 22989                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         T1CONbi
      +                          ts.TMR1ON = 0;
 22990     1275  100E               	bcf	14,0	;volatile
 22991                           
 22992                           ;mcc_generated_files/tmr1.c: 140:         TMR1H = (timerVal >> 8);
 22993     1276  0877               	movf	TMR1_WriteTimer@timerVal+1,w
 22994     1277  008D               	movwf	13	;volatile
 22995                           
 22996                           ;mcc_generated_files/tmr1.c: 141:         TMR1L = timerVal;
 22997     1278  0876               	movf	TMR1_WriteTimer@timerVal,w
 22998     1279  008C               	movwf	12	;volatile
 22999                           
 23000                           ;mcc_generated_files/tmr1.c: 144:         T1CONbits.TMR1ON =1;
 23001     127A  140E               	bsf	14,0	;volatile
 23002                           
 23003                           ;mcc_generated_files/tmr1.c: 145:     }
 23004     127B  0008               	return
 23005     127C                     i1l5257:
 23006                           
 23007                           ;mcc_generated_files/tmr1.c: 147:     {;mcc_generated_files/tmr1.c: 149:         TMR1H =
      +                           (timerVal >> 8);
 23008     127C  0877               	movf	TMR1_WriteTimer@timerVal+1,w
 23009     127D  008D               	movwf	13	;volatile
 23010                           
 23011                           ;mcc_generated_files/tmr1.c: 150:         TMR1L = timerVal;
 23012     127E  0876               	movf	TMR1_WriteTimer@timerVal,w
 23013     127F  008C               	movwf	12	;volatile
 23014     1280  0008               	return
 23015     1281                     __end_of_TMR1_WriteTimer:
 23016                           
 23017                           	psect	text142
 23018     1105                     __ptext142:	
 23019 ;; *************** function _TMR1_StopTimer *****************
 23020 ;; Defined at:
 23021 ;;		line 110 in file "mcc_generated_files/tmr1.c"
 23022 ;; Parameters:    Size  Location     Type
 23023 ;;		None
 23024 ;; Auto vars:     Size  Location     Type
 23025 ;;		None
 23026 ;; Return value:  Size  Location     Type
 23027 ;;                  1    wreg      void 
 23028 ;; Registers used:
 23029 ;;		None
 23030 ;; Tracked objects:
 23031 ;;		On entry : 3E/2
 23032 ;;		On exit  : 3F/4
 23033 ;;		Unchanged: 0/0
 23034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23039 ;;Total ram usage:        0 bytes
 23040 ;; Hardware stack levels used: 1
 23041 ;; This function calls:
 23042 ;;		Nothing
 23043 ;; This function is called by:
 23044 ;;		_EUSART1_RxDataHandler
 23045 ;;		_TMR1_DefaultInterruptHandler
 23046 ;; This function uses a non-reentrant model
 23047 ;;
 23048                           
 23049     1105                     _TMR1_StopTimer:	
 23050                           ;psect for function _TMR1_StopTimer
 23051                           
 23052                           
 23053                           ;mcc_generated_files/tmr1.c: 113:     T1CONbits.TMR1ON = 0;
 23054                           
 23055                           ;incstack = 0
 23056                           ; Regs used in _TMR1_StopTimer: []
 23057     1105  0144               	movlb	4	; select bank4
 23058     1106  100E               	bcf	14,0	;volatile
 23059     1107  0008               	return
 23060     1108                     __end_of_TMR1_StopTimer:
 23061                           
 23062                           	psect	text143
 23063     10FD                     __ptext143:	
 23064 ;; *************** function _TMR1_StartTimer *****************
 23065 ;; Defined at:
 23066 ;;		line 104 in file "mcc_generated_files/tmr1.c"
 23067 ;; Parameters:    Size  Location     Type
 23068 ;;		None
 23069 ;; Auto vars:     Size  Location     Type
 23070 ;;		None
 23071 ;; Return value:  Size  Location     Type
 23072 ;;                  1    wreg      void 
 23073 ;; Registers used:
 23074 ;;		None
 23075 ;; Tracked objects:
 23076 ;;		On entry : 3F/4
 23077 ;;		On exit  : 3F/4
 23078 ;;		Unchanged: 0/0
 23079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23084 ;;Total ram usage:        0 bytes
 23085 ;; Hardware stack levels used: 1
 23086 ;; This function calls:
 23087 ;;		Nothing
 23088 ;; This function is called by:
 23089 ;;		_EUSART1_RxDataHandler
 23090 ;; This function uses a non-reentrant model
 23091 ;;
 23092                           
 23093     10FD                     _TMR1_StartTimer:	
 23094                           ;psect for function _TMR1_StartTimer
 23095                           
 23096                           
 23097                           ;mcc_generated_files/tmr1.c: 107:     T1CONbits.TMR1ON = 1;
 23098                           
 23099                           ;incstack = 0
 23100                           ; Regs used in _TMR1_StartTimer: []
 23101     10FD  140E               	bsf	14,0	;volatile
 23102     10FE  0008               	return
 23103     10FF                     __end_of_TMR1_StartTimer:
 23104     0002                     ___latbits      equ	2
 23105     007E                     btemp           set	126	;btemp
 23106     007E                     int$flags       set	126
 23107     007E                     wtemp0          set	126
 23108                           
 23109                           	psect	idloc
 23110                           
 23111                           ;Config register IDLOC0 @ 0x8000
 23112                           ;	unspecified, using default values
 23113     8000                     	org	32768
 23114     8000  3FFF               	dw	16383
 23115                           
 23116                           ;Config register IDLOC1 @ 0x8001
 23117                           ;	unspecified, using default values
 23118     8001                     	org	32769
 23119     8001  3FFF               	dw	16383
 23120                           
 23121                           ;Config register IDLOC2 @ 0x8002
 23122                           ;	unspecified, using default values
 23123     8002                     	org	32770
 23124     8002  3FFF               	dw	16383
 23125                           
 23126                           ;Config register IDLOC3 @ 0x8003
 23127                           ;	unspecified, using default values
 23128     8003                     	org	32771
 23129     8003  3FFF               	dw	16383
 23130                           
 23131                           	psect	config
 23132                           
 23133                           ;Config register CONFIG1 @ 0x8007
 23134                           ;	External Oscillator mode selection bits
 23135                           ;	FEXTOSC = OFF, Oscillator not enabled
 23136                           ;	Power-up default value for COSC bits
 23137                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
 23138                           ;	Clock Out Enable bit
 23139                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
 23140                           ;	Clock Switch Enable bit
 23141                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 23142                           ;	Fail-Safe Clock Monitor Enable bit
 23143                           ;	FCMEN = ON, FSCM timer enabled
 23144     8007                     	org	32775
 23145     8007  3FEC               	dw	16364
 23146                           
 23147                           ;Config register CONFIG2 @ 0x8008
 23148                           ;	Master Clear Enable bit
 23149                           ;	MCLRE = ON, MCLR pin is Master Clear function
 23150                           ;	Power-up Timer Enable bit
 23151                           ;	PWRTS = OFF, PWRT disabled
 23152                           ;	Low-Power BOR enable bit
 23153                           ;	LPBOREN = OFF, ULPBOR disabled
 23154                           ;	Brown-out reset enable bits
 23155                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
 23156                           ;	Brown-out Reset Voltage Selection
 23157                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 2.45V
 23158                           ;	Zero-cross detect disable
 23159                           ;	ZCDDIS = OFF, Zero-cross detect circuit is disabled at POR.
 23160                           ;	Peripheral Pin Select one-way control
 23161                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
 23162                           ;	Stack Overflow/Underflow Reset Enable bit
 23163                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
 23164     8008                     	org	32776
 23165     8008  3FFF               	dw	16383
 23166                           
 23167                           ;Config register CONFIG3 @ 0x8009
 23168                           ;	WDT Period Select bits
 23169                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 23170                           ;	WDT operating mode
 23171                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
 23172                           ;	WDT Window Select bits
 23173                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 23174                           ;	WDT input clock selector
 23175                           ;	WDTCCS = SC, Software Control
 23176     8009                     	org	32777
 23177     8009  3F9F               	dw	16287
 23178                           
 23179                           ;Config register CONFIG4 @ 0x800A
 23180                           ;	Boot Block Size Selection bits
 23181                           ;	BBSIZE = BB512, 512 words boot block size
 23182                           ;	Boot Block Enable bit
 23183                           ;	BBEN = OFF, Boot Block disabled
 23184                           ;	SAF Enable bit
 23185                           ;	SAFEN = OFF, SAF disabled
 23186                           ;	Application Block Write Protection bit
 23187                           ;	WRTAPP = OFF, Application Block not write protected
 23188                           ;	Boot Block Write Protection bit
 23189                           ;	WRTB = OFF, Boot Block not write protected
 23190                           ;	Configuration Register Write Protection bit
 23191                           ;	WRTC = OFF, Configuration Register not write protected
 23192                           ;	Data EEPROM write protection bit
 23193                           ;	WRTD = OFF, Data EEPROM NOT write protected
 23194                           ;	Storage Area Flash Write Protection bit
 23195                           ;	WRTSAF = OFF, SAF not write protected
 23196                           ;	Low Voltage Programming Enable bit
 23197                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
 23198     800A                     	org	32778
 23199     800A  3FFF               	dw	16383
 23200                           
 23201                           ;Config register CONFIG5 @ 0x800B
 23202                           ;	UserNVM Program memory code protection bit
 23203                           ;	CP = OFF, UserNVM code protection disabled
 23204     800B                     	org	32779
 23205     800B  3FFF               	dw	16383

Data Sizes:
    Strings     38
    Constant    35
    Data        112
    BSS         195
    Persistent  42
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     80      80
    BANK1            80     78      78
    BANK2            80     14      78
    BANK3            80      7      10
    BANK4            80     45      75
    BANK5            80      0      68
    BANK6            80      0      50
    BANK7            80      0      32
    BANK8            80      0      64
    BANK9            80     76      76
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    adjustBMP280coeff@coeff_buff	PTR unsigned short  size(2) Largest target is 2
		 -> registers$server_input_register$sensor_type(BANK0[2]), 

    bufferBlock$data	PTR unsigned char  size(2) Largest target is 0

    callback$2	PTR unsigned short  size(1) Largest target is 64
		 -> handle_read_registers@regs(BANK1[64]), 

    callback$4	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    default_values_register@registers	PTR struct . size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    discard_1@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    discard_1@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    discard_1@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    discard_1@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    discard_1@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    discard_1@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    discard_1@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), NULL(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), NULL(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), NULL(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), NULL(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fsmStateTable	const PTR FTN()enum E10731[16] size(2) Largest target is 1
		 -> I2C1_DO_ADDRESS_NACK(), I2C1_DO_IDLE(), I2C1_DO_RCEN(), I2C1_DO_RESET(), 
		 -> I2C1_DO_RX(), I2C1_DO_RX_ACK(), I2C1_DO_RX_NACK_RESTART(), I2C1_DO_RX_NACK_STOP(), 
		 -> I2C1_DO_SEND_ADR_READ(), I2C1_DO_SEND_ADR_WRITE(), I2C1_DO_SEND_RESTART(), I2C1_DO_SEND_RESTART_READ(), 
		 -> I2C1_DO_SEND_RESTART_WRITE(), I2C1_DO_SEND_STOP(), I2C1_DO_TX(), I2C1_DO_TX_EMPTY(), 

    get_1@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    get_1@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    get_1@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    get_1@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    get_1@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    get_1@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    get_1@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    get_1@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    get_2@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    get_2@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    get_2@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    get_2@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    get_2@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    get_2@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    get_2@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    get_2@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    getADCData@sensorSelection	PTR void  size(2) Largest target is 13
		 -> sensor1(BANK5[13]), sensor1$sensor_info(COMMON[11]), sensor1$sensor_info$codename(BANK5[5]), 

    getSHTC3Data@pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> getSHTC3Data@Rxbuffer(BANK0[2]), getSHTC3Data@Txbuffer(BANK0[2]), 

    handle_read_holding_registers@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    handle_read_holding_registers@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_holding_registers@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_holding_registers@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_holding_registers@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_holding_registers@nmbs$msg$buf_idx$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_holding_registers@nmbs$msg$buf_idx$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_holding_registers@nmbs$msg$buf_idx$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_holding_registers@nmbs$msg$buf_idx$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_holding_registers@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_read_holding_registers@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_read_holding_registers@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_read_input_registers@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    handle_read_input_registers@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_input_registers@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_input_registers@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_input_registers@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_input_registers@nmbs$msg$buf_idx$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_input_registers@nmbs$msg$buf_idx$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_input_registers@nmbs$msg$buf_idx$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_input_registers@nmbs$msg$buf_idx$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_input_registers@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_read_input_registers@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_read_input_registers@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_read_registers@callback	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10857 size(2) Largest target is 1
		 -> handler_read_holding_registers(), handler_read_input_registers(), 

    handle_read_registers@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    handle_read_registers@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_read_registers@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_read_registers@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_read_registers@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_read_registers@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_read_registers@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_read_registers@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_read_registers@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_read_registers@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_read_registers@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_req_fc@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    handle_req_fc@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_req_fc@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_req_fc@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_req_fc@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_req_fc@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_req_fc@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_req_fc@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_write_single_coil@arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_write_single_coil@nanomodbus$F3828@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$msg$buf_idx$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$msg$buf_idx$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$msg$buf_idx$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$msg$buf_idx$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_write_single_coil@nanomodbus$F3828@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_write_single_coil@server_coils	PTR unsigned char [1] size(2) Largest target is 1
		 -> handle_write_single_coil@arg$server_coils$coils(COMMON[1]), registers$server_coils$coils$coils(BANK0[1]), 

    handle_write_single_register@arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_write_single_register@nanomodbus$F3873@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    handle_write_single_register@nanomodbus$F3873@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$msg$buf_idx$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$msg$buf_idx$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$msg$buf_idx$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$msg$buf_idx$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_write_single_register@nanomodbus$F3873@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handle_write_single_register@nanomodbus$F3873@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    handle_write_single_register@nanomodbus$F3873@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    handle_write_single_register@registers	PTR const unsigned short  size(2) Largest target is 0

    handle_write_single_register@server_registers	PTR unsigned short  size(1) Largest target is 2
		 -> registers$server_input_register$serial_number(BANK0[2]), 

    handler_read_holding_registers@arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handler_read_holding_registers@registers_out	PTR unsigned short  size(1) Largest target is 64
		 -> handle_read_registers@regs(BANK1[64]), 

    handler_read_holding_registers@server_registers	PTR unsigned short  size(1) Largest target is 2
		 -> registers$server_input_register$serial_number(BANK0[2]), 

    handler_read_input_registers@arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    handler_read_input_registers@registers_out	PTR unsigned short  size(1) Largest target is 64
		 -> handle_read_registers@regs(BANK1[64]), 

    handler_read_input_registers@server_registers	PTR unsigned short  size(1) Largest target is 2
		 -> registers$server_input_register$sensor_type(BANK0[2]), 

    I2C1_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_DO_TX$5008	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> I2C1_CallbackReturnReset(), I2C1_CallbackReturnStop(), rd1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rdBlkRegCompleteHandler(), wr1RegCompleteHandler(), wr2RegCompleteHandler(), NULL(), 

    I2C1_DO_TX$5008$0	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_DO_TX$5013	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_MasterFsm$5007	const PTR FTN()enum E10731 size(2) Largest target is 1
		 -> I2C1_DO_ADDRESS_NACK(), I2C1_DO_IDLE(), I2C1_DO_RCEN(), I2C1_DO_RESET(), 
		 -> I2C1_DO_RX(), I2C1_DO_RX_ACK(), I2C1_DO_RX_NACK_RESTART(), I2C1_DO_RX_NACK_STOP(), 
		 -> I2C1_DO_SEND_ADR_READ(), I2C1_DO_SEND_ADR_WRITE(), I2C1_DO_SEND_RESTART(), I2C1_DO_SEND_RESTART_READ(), 
		 -> I2C1_DO_SEND_RESTART_WRITE(), I2C1_DO_SEND_STOP(), I2C1_DO_TX(), I2C1_DO_TX_EMPTY(), 

    I2C1_Read1ByteRegister@returnValue$data	PTR unsigned char  size(2) Largest target is 0

    I2C1_Read2ByteRegister@returnValue$data	PTR unsigned char  size(2) Largest target is 0

    I2C1_ReadNBytes@data	PTR unsigned char  size(1) Largest target is 2
		 -> getSHTC3Data@Rxbuffer(BANK0[2]), getSHTC3Data@Txbuffer(BANK0[2]), readBMP280@ret(BANK0[1]), readDPS422@ret(COMMON[1]), 

    I2C1_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> NULL(), 

    I2C1_SetAddressNackCallback@ptr	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C1_SetBuffer@buffer	PTR void  size(2) Largest target is 4
		 -> bufferBlock$data(COMMON[2]), getSHTC3Data@Rxbuffer(BANK0[2]), getSHTC3Data@Txbuffer(BANK0[2]), I2C1_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read1ByteRegister@returnValue$data(COMMON[2]), I2C1_Read2ByteRegister@reg(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C1_Read2ByteRegister@returnValue$data(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_ReadDataBlock@reg(COMMON[1]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write1ByteRegister@data$data(COMMON[2]), I2C1_Write1ByteRegister@reg(COMMON[1]), I2C1_Write2ByteRegister@data(COMMON[2]), I2C1_Write2ByteRegister@data$data(COMMON[2]), 
		 -> I2C1_Write2ByteRegister@reg(COMMON[1]), readBMP280@regadd(BANK0[1]), readBMP280@ret(BANK0[1]), readDPS422@regadd(COMMON[1]), 
		 -> readDPS422@ret(COMMON[1]), writeBMP280@Txbuffer(BANK0[2]), writeDPS422@Txbuffer(COMMON[2]), NULL(NULL[0]), 

    I2C1_SetCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> rd1RegCompleteHandler(), rd2RegCompleteHandler(), rdBlkRegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), NULL(), 

    I2C1_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> rd1RegCompleteHandler(), rd2RegCompleteHandler(), rdBlkRegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), NULL(), 

    I2C1_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_Status$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_Status$callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> I2C1_CallbackReturnReset(), I2C1_CallbackReturnStop(), rd1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rdBlkRegCompleteHandler(), wr1RegCompleteHandler(), wr2RegCompleteHandler(), NULL(), 

    I2C1_Status$data_ptr	PTR unsigned char  size(2) Largest target is 4
		 -> bufferBlock$data(COMMON[2]), getSHTC3Data@Rxbuffer(BANK0[2]), getSHTC3Data@Txbuffer(BANK0[2]), I2C1_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read1ByteRegister@returnValue$data(COMMON[2]), I2C1_Read2ByteRegister@reg(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C1_Read2ByteRegister@returnValue$data(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_ReadDataBlock@reg(COMMON[1]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write1ByteRegister@data$data(COMMON[2]), I2C1_Write1ByteRegister@reg(COMMON[1]), I2C1_Write2ByteRegister@data(COMMON[2]), I2C1_Write2ByteRegister@data$data(COMMON[2]), 
		 -> I2C1_Write2ByteRegister@reg(COMMON[1]), readBMP280@regadd(BANK0[1]), readBMP280@ret(BANK0[1]), readDPS422@regadd(COMMON[1]), 
		 -> readDPS422@ret(COMMON[1]), writeBMP280@Txbuffer(BANK0[2]), writeDPS422@Txbuffer(COMMON[2]), NULL(NULL[0]), 

    I2C1_Write1ByteRegister@data$data	PTR unsigned char  size(2) Largest target is 0

    I2C1_Write2ByteRegister@data$data	PTR unsigned char  size(2) Largest target is 0

    I2C1_WriteNBytes@data	PTR unsigned char  size(1) Largest target is 2
		 -> getSHTC3Data@Rxbuffer(BANK0[2]), getSHTC3Data@Txbuffer(BANK0[2]), readBMP280@regadd(BANK0[1]), readDPS422@regadd(COMMON[1]), 
		 -> writeBMP280@Txbuffer(BANK0[2]), writeDPS422@Txbuffer(COMMON[2]), 

    is_a_new_value@actual_regs	PTR struct . size(2) Largest target is 4
		 -> main@actual_regs(BANK2[4]), 

    is_a_new_value@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    is_a_new_value@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    is_a_new_value@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    is_a_new_value@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    is_a_new_value@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    is_a_new_value@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    is_a_new_value@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    is_a_new_value@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    is_a_new_value@registers	PTR struct . size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    m_memset@p	PTR unsigned char  size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), main@registers(BANK4[45]), registers$server_coils(BANK0[1]), registers$server_coils$coils(BANK0[1]), 

    m_memset@s	PTR void  size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), main@registers(BANK4[45]), registers$server_coils(BANK0[1]), registers$server_coils$coils(BANK0[1]), 

    msg_buf_reset@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    msg_buf_reset@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    msg_buf_reset@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    msg_buf_reset@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    msg_buf_reset@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    msg_buf_reset@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    msg_buf_reset@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    msg_buf_reset@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    msg_state_reset@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    msg_state_reset@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    msg_state_reset@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    msg_state_reset@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    msg_state_reset@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    msg_state_reset@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    msg_state_reset@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    msg_state_reset@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs$msg$buf_idx$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs$msg$buf_idx$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs$msg$buf_idx$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs$msg$buf_idx$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_crc_calc@data	PTR const unsigned char  size(2) Largest target is 48
		 -> nmbs$msg$buf$buf(BANK0[48]), recv_msg_footer@nmbs$msg$buf(COMMON[48]), send_msg@nmbs$msg$buf(COMMON[48]), 

    nmbs_create@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    nmbs_create@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_create@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_create@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_create@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_create@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    nmbs_create@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_create@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_create@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    nmbs_create@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_create@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_create@platform_conf	PTR const struct nmbs_platform_conf size(2) Largest target is 7
		 -> main@platform_conf(BANK3[7]), 

    nmbs_create@platform_conf$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    nmbs_create@platform_conf$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_create@platform_conf$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_server_create@callbacks	PTR const struct nmbs_callbacks size(2) Largest target is 9
		 -> main@callbacks(BANK2[9]), 

    nmbs_server_create@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    nmbs_server_create@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_server_create@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_server_create@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_server_create@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_server_create@nmbs$msg$buf_idx$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_server_create@nmbs$msg$buf_idx$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_server_create@nmbs$msg$buf_idx$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_server_create@nmbs$msg$buf_idx$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_server_create@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    nmbs_server_create@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_server_create@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_server_create@platform_conf	PTR const struct nmbs_platform_conf size(2) Largest target is 7
		 -> main@platform_conf(BANK3[7]), 

    nmbs_server_create@platform_conf$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    nmbs_server_create@platform_conf$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_server_create@platform_conf$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_server_poll@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    nmbs_server_poll@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_server_poll@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_server_poll@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_server_poll@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_server_poll@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    nmbs_server_poll@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_server_poll@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_server_poll@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    nmbs_server_poll@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_server_poll@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    nmbs_set_destination_rtu_address@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    nmbs_set_destination_rtu_address@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    nmbs_set_destination_rtu_address@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    nmbs_set_destination_rtu_address@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    nmbs_set_destination_rtu_address@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    nmbs_set_destination_rtu_address@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    nmbs_set_destination_rtu_address@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    NULL$0	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    platform_conf$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    platform_conf$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    platform_conf$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 38
		 -> STR_1(CODE[38]), 

    put_1@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    put_1@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_1@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    put_1@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    put_1@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    put_1@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    put_1@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    put_1@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    put_2@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    put_2@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_2@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    put_2@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    put_2@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    put_2@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    put_2@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    put_2@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    put_msg_header@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    put_msg_header@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    put_msg_header@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    put_msg_header@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    put_msg_header@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    put_msg_header@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    put_msg_header@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    put_msg_header@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    put_msg_header@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    put_msg_header@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    put_msg_header@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    put_res_header@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    rdBlkRegCompleteHandler@ptr$data	PTR unsigned char  size(2) Largest target is 0

    read_serial@arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    read_serial@buf	PTR unsigned char  size(2) Largest target is 48
		 -> nmbs$msg$buf(BANK0[48]), nmbs$msg$buf$buf(BANK0[48]), recv@nmbs$msg$buf(COMMON[48]), 

    readBMP280@pRxbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readBMP280@ret(BANK0[1]), 

    readBMP280@pTxbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readBMP280@regadd(BANK0[1]), 

    readBMP280coeff@coeff_buff	PTR unsigned short  size(2) Largest target is 2
		 -> registers$server_input_register$sensor_type(BANK0[2]), 

    recv@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    recv@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    recv@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    recv@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_msg_footer@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    recv_msg_footer@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_msg_footer@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_msg_footer@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_msg_footer@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_msg_footer@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    recv_msg_footer@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_msg_footer@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_msg_footer@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    recv_msg_footer@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_msg_footer@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_msg_header@first_byte_received	PTR _Bool  size(1) Largest target is 1
		 -> nmbs_server_poll@first_byte_received(BANK1[1]), recv_res_header@first_byte_received(BANK0[1]), 

    recv_msg_header@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    recv_msg_header@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_msg_header@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_msg_header@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_msg_header@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_msg_header@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    recv_msg_header@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_msg_header@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_msg_header@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    recv_msg_header@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_msg_header@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_read_registers_res@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    recv_read_registers_res@registers	PTR unsigned short  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    recv_req_header@first_byte_received	PTR _Bool  size(1) Largest target is 1
		 -> nmbs_server_poll@first_byte_received(BANK1[1]), 

    recv_req_header@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    recv_req_header@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_req_header@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_req_header@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_req_header@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_req_header@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    recv_req_header@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_req_header@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_req_header@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    recv_req_header@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_req_header@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_res_header@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    recv_res_header@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    recv_res_header@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    recv_res_header@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    recv_res_header@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    recv_res_header@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    recv_res_header@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_res_header@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_res_header@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    recv_res_header@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    recv_res_header@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    recv_write_single_coil_res@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    recv_write_single_register_res@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    S2003$1$0	PTR void  size(2) Largest target is 11
		 -> sensor1$sensor_info(COMMON[11]), 

    S2003$sense	PTR FTN(PTR void ,)unsigned short  size(2) Largest target is 2
		 -> getADCData(), 

    S2102$0$2	PTR unsigned short  size(1) Largest target is 64
		 -> handle_read_registers@regs(BANK1[64]), 

    S2102$0$4	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    S2102$1$2	PTR unsigned short  size(1) Largest target is 64
		 -> handle_read_registers@regs(BANK1[64]), 

    S2102$1$4	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    S2102$2$3	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    S2102$3$3	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    S2102nmbs_callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    S2102nmbs_callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    S2102nmbs_callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    S2102nmbs_callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    S2143$1$0	PTR unsigned char  size(2) Largest target is 48
		 -> recv@nmbs$msg$buf(COMMON[48]), 

    S2143$1$3	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    S2143$2$0	PTR const unsigned char  size(2) Largest target is 48
		 -> send@nmbs$msg$buf(COMMON[48]), 

    S2143$2$3	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    S2143nmbs_platform_conf$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    S2143nmbs_platform_conf$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    S2143nmbs_platform_conf$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    S4451$buffer	PTR unsigned char  size(2) Largest target is 0

    S4451$source	PTR const unsigned char  size(2) Largest target is 0

    S94$data	PTR unsigned char  size(2) Largest target is 0

    S992$0$0	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    S992$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    S992$callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> I2C1_CallbackReturnReset(), I2C1_CallbackReturnStop(), rd1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rdBlkRegCompleteHandler(), wr1RegCompleteHandler(), wr2RegCompleteHandler(), NULL(), 

    S992$data_ptr	PTR unsigned char  size(2) Largest target is 4
		 -> getSHTC3Data@Rxbuffer(BANK0[2]), getSHTC3Data@Txbuffer(BANK0[2]), I2C1_Read1ByteRegister@reg(COMMON[1]), I2C1_Read1ByteRegister@returnValue(COMMON[1]), 
		 -> I2C1_Read2ByteRegister@reg(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_ReadDataBlock@reg(COMMON[1]), 
		 -> I2C1_Write1ByteRegister@data(COMMON[1]), I2C1_Write1ByteRegister@reg(COMMON[1]), I2C1_Write2ByteRegister@data(COMMON[2]), I2C1_Write2ByteRegister@reg(COMMON[1]), 
		 -> readBMP280@regadd(BANK0[1]), readBMP280@ret(BANK0[1]), readDPS422@regadd(COMMON[1]), readDPS422@ret(COMMON[1]), 
		 -> writeBMP280@Txbuffer(BANK0[2]), writeDPS422@Txbuffer(COMMON[2]), NULL(NULL[0]), 

    send@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    send@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    send@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    send@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    send@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    send@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    send@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    send@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    send@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    send_exception_msg@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    send_exception_msg@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    send_exception_msg@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    send_exception_msg@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    send_exception_msg@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    send_exception_msg@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    send_exception_msg@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send_exception_msg@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    send_msg@nmbs	PTR struct nmbs_t size(2) Largest target is 76
		 -> main@nmbs(BANK9[76]), 

    send_msg@nmbs$callbacks$read_holding_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_holding_registers(), 

    send_msg@nmbs$callbacks$read_input_registers	PTR FTN(unsigned short ,unsigned short ,PTR unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handler_read_input_registers(), 

    send_msg@nmbs$callbacks$write_single_coil	PTR FTN(unsigned short ,_Bool ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_coil(), 

    send_msg@nmbs$callbacks$write_single_register	PTR FTN(unsigned short ,unsigned short ,unsigned char ,PTR void ,)enum E10966 size(2) Largest target is 1
		 -> handle_write_single_register(), 

    send_msg@nmbs$msg$unit_id$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    send_msg@nmbs$msg$unit_id$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send_msg@nmbs$msg$unit_id$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    send_msg@nmbs$platform$arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    send_msg@nmbs$platform$read	PTR FTN(PTR unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> read_serial(), 

    send_msg@nmbs$platform$write	PTR FTN(PTR const unsigned char ,unsigned short ,long ,PTR void ,)long  size(2) Largest target is 4
		 -> write_serial(), 

    sensor1$sense	PTR FTN(PTR void ,)unsigned short  size(2) Largest target is 2
		 -> getADCData(), 

    sensor2$sense	PTR FTN(PTR void ,)unsigned short  size(2) Largest target is 2
		 -> getADCData(), 

    sensor3$sense	PTR FTN(PTR void ,)unsigned short  size(2) Largest target is 2
		 -> getADCData(), 

    sensor4$sense	PTR FTN(PTR void ,)unsigned short  size(2) Largest target is 2
		 -> getADCData(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), NULL(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 38
		 -> STR_1(CODE[38]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 38
		 -> STR_1(CODE[38]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    write_serial@arg	PTR void  size(2) Largest target is 45
		 -> main@registers(BANK4[45]), 

    write_serial@buf	PTR const unsigned char  size(2) Largest target is 48
		 -> nmbs$msg$buf$buf(BANK0[48]), send@nmbs$msg$buf(COMMON[48]), 

    writeBMP280@pTxbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> writeBMP280@Txbuffer(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _EUSART1_Receive_ISR->_EUSART1_RxDataHandler
    _EUSART1_DefaultErrorHandler->_EUSART1_RxDataHandler
    _EUSART1_RxDataHandler->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _main->_nmbs_server_poll
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _nmbs_server_poll->_handle_req_fc
    _recv_req_header->_recv_msg_header
    _handle_req_fc->_handle_read_holding_registers
    _handle_req_fc->_handle_read_input_registers
    _handle_write_single_register@nanomodbus$F3873->_recv_write_single_register_res
    _recv_write_single_register_res->_recv_res_header
    _handle_write_single_coil@nanomodbus$F3828->_recv_write_single_coil_res
    _recv_write_single_coil_res->_recv_res_header
    _handle_read_input_registers->_handle_read_registers
    _handle_read_holding_registers->_handle_read_registers
    _handle_read_registers->_recv_read_registers_res
    _send_exception_msg->_send_msg
    _send_msg->_send
    _send->_write_serial
    _write_serial->_EUSART1_Write
    _write_serial->_EUSART1_is_tx_ready
    _recv_read_registers_res->_recv_res_header
    _recv_res_header->_recv_msg_footer
    _recv_msg_header->_recv
    _msg_state_reset->_msg_buf_reset
    _recv_msg_footer->_recv
    _recv->_read_serial
    _read_serial->_EUSART1_Read
    _put_res_header->_put_msg_header
    _put_msg_header->_put_2
    _nmbs_server_create->_nmbs_create
    _nmbs_create->_m_memset
    _is_a_new_value->_DATAEE_WriteWord
    _DATAEE_WriteWord->_DATAEE_WriteByte
    _getSHTC3Data->_I2C1_ReadNBytes
    _getSHTC3Data->_I2C1_WriteNBytes
    _getBMP280Data->_writeBMP280
    _getADCData->_ADCC_GetSingleConversion
    _default_values_register->_readBMP280coeff
    _readBMP280coeff->_readBMP280
    _readBMP280->_I2C1_ReadNBytes
    _readBMP280->_I2C1_WriteNBytes
    _I2C1_MasterRead->_I2C1_MasterOperation
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _InitBMP280->_writeBMP280
    _writeBMP280->_I2C1_WriteNBytes
    _I2C1_SetAddressNackCallback->_I2C1_SetCallback
    _I2C1_MasterWrite->_I2C1_MasterOperation
    _I2C1_Poller->_I2C1_MasterFsm
    _I2C1_MasterFsm->_I2C1_DO_ADDRESS_NACK
    _I2C1_MasterFsm->_I2C1_DO_RX
    _I2C1_MasterFsm->_I2C1_DO_TX
    _I2C1_MasterFsm->_I2C1_DO_TX_EMPTY
    _I2C1_DO_TX_EMPTY->_I2C1_CallbackReturnReset
    _I2C1_DO_TX_EMPTY->_I2C1_CallbackReturnStop
    _I2C1_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C1_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C1_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C1_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C1_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C1_DO_TX->_I2C1_CallbackReturnReset
    _I2C1_DO_TX->_I2C1_CallbackReturnStop
    _I2C1_DO_TX->_rd1RegCompleteHandler
    _I2C1_DO_TX->_rd2RegCompleteHandler
    _I2C1_DO_TX->_rdBlkRegCompleteHandler
    _I2C1_DO_TX->_wr1RegCompleteHandler
    _I2C1_DO_TX->_wr2RegCompleteHandler
    _I2C1_DO_SEND_ADR_WRITE->_I2C1_MasterSendTxData
    _I2C1_DO_RX->_I2C1_CallbackReturnReset
    _I2C1_DO_RX->_I2C1_CallbackReturnStop
    _I2C1_DO_RX->_rd1RegCompleteHandler
    _I2C1_DO_RX->_rd2RegCompleteHandler
    _I2C1_DO_RX->_rdBlkRegCompleteHandler
    _I2C1_DO_RX->_wr1RegCompleteHandler
    _I2C1_DO_RX->_wr2RegCompleteHandler
    _I2C1_DO_ADDRESS_NACK->_I2C1_CallbackReturnReset
    _I2C1_DO_ADDRESS_NACK->_I2C1_CallbackReturnStop
    _I2C1_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C1_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C1_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C1_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C1_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C1_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C1_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C1_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C1_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C1_SetDataCompleteCallback
    _I2C1_SetDataCompleteCallback->_I2C1_SetCallback
    _DATAEE_ReadWord->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_nmbs_server_poll
    _handle_read_input_registers->_handle_read_registers
    _handle_read_holding_registers->_handle_read_registers

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               152   152      0  164938
                                             74 BANK1      4     4      0
                                              0 BANK2     14    14      0
                                              0 BANK3      7     7      0
                                              0 BANK4     45    45      0
                                              0 BANK9     76    76      0
                    _DATAEE_ReadByte
                    _DATAEE_ReadWord
                   _DATAEE_WriteWord
                  _FVR_IsOutputReady
                         _InitBMP280
                  _SYSTEM_Initialize
                    _TxDeviceDisable
                   _UART_ClearBuffer
                 _check_error_modbus
            _default_values_register
                         _getADCData *
                      _getBMP280Data
                       _getSHTC3Data
                     _is_a_new_value
                           _m_memset
                 _nmbs_server_create
                   _nmbs_server_poll
                             _printf
                 _setBaudRateEUSART1
 ---------------------------------------------------------------------------------
 (1) _printf                                               5     3      2     787
                                             25 BANK0      3     1      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     3      5     709
                                             17 BANK0      8     3      5
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     8      4     518
                                              9 BANK0      8     4      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     323
                                              0 BANK0      9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _nmbs_server_poll                                     4     2      2   65584
                                             78 BANK0      2     0      2
                                             72 BANK1      2     2      0
                      _handle_req_fc
                    _msg_state_reset
                        _read_serial *
                    _recv_req_header
 ---------------------------------------------------------------------------------
 (2) _recv_req_header                                      4     1      3    1712
                                             32 BANK0      4     1      3
                    _recv_msg_header
 ---------------------------------------------------------------------------------
 (2) _handle_req_fc                                        3     1      2   62805
                                             75 BANK0      3     1      2
      _handle_read_holding_registers
        _handle_read_input_registers
_handle_write_single_coil@nanomodbus
_handle_write_single_register@nanomo
 ---------------------------------------------------------------------------------
 (3) _handle_write_single_register@nanomodbus$F3873        9     7      2   12317
                                             51 BANK0      8     6      2
                              _get_2
       _handle_write_single_register *
                              _put_2
                     _put_res_header
                               _recv
                    _recv_msg_footer
     _recv_write_single_register_res
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _recv_write_single_register_res                      11     5      6    6662
                                             45 BANK0      6     0      6
                              _get_2
                               _recv
                    _recv_msg_footer
                    _recv_res_header
 ---------------------------------------------------------------------------------
 (4) _handle_write_single_register                        10     3      7     170
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (3) _handle_write_single_coil@nanomodbus$F3828           10     8      2   16032
                                             56 BANK0      9     7      2
                              _get_2
           _handle_write_single_coil *
                              _put_2
                     _put_res_header
                               _recv
                    _recv_msg_footer
         _recv_write_single_coil_res
                 _send_exception_msg
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _recv_write_single_coil_res                          11     5      6    6972
                                             45 BANK0     11     5      6
                              _get_2
                               _recv
                    _recv_msg_footer
                    _recv_res_header
 ---------------------------------------------------------------------------------
 (4) _handle_write_single_coil                            15     9      6     393
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) _handle_read_input_registers                          2     0      2   17126
                                             73 BANK0      2     0      2
              _handle_read_registers
 ---------------------------------------------------------------------------------
 (3) _handle_read_holding_registers                        2     0      2   17126
                                             73 BANK0      2     0      2
              _handle_read_registers
 ---------------------------------------------------------------------------------
 (4) _handle_read_registers                               84    80      4   17061
                                             61 BANK0     12     8      4
                                              0 BANK1     72    72      0
                              _get_2
     _handler_read_holding_registers *
       _handler_read_input_registers *
                              _put_1
                              _put_2
                     _put_res_header
                               _recv
                    _recv_msg_footer
            _recv_read_registers_res
                 _send_exception_msg
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _send_exception_msg                                   3     0      3    2652
                                             37 BANK0      3     0      3
                              _put_1
                     _put_msg_header
                           _send_msg
 ---------------------------------------------------------------------------------
 (4) _send_msg                                             7     5      2    1384
                                             30 BANK0      7     5      2
                      _nmbs_crc_calc
                              _put_2
                               _send
 ---------------------------------------------------------------------------------
 (5) _send                                                13     9      4     523
                                             17 BANK0     13     9      4
                       _write_serial *
 ---------------------------------------------------------------------------------
 (6) _write_serial                                        16     6     10     235
                                              1 BANK0     16     6     10
                      _EUSART1_Write
                 _EUSART1_is_tx_done
                _EUSART1_is_tx_ready
                    _TxDeviceDisable
                     _TxDeviceEnable
 ---------------------------------------------------------------------------------
 (7) _TxDeviceEnable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TxDeviceDisable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_is_tx_ready                                  1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_is_tx_done                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Write                                        1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _recv_read_registers_res                             16    10      6    7368
                                             45 BANK0     16    10      6
                              _get_1
                              _get_2
                               _recv
                    _recv_msg_footer
                    _recv_res_header
 ---------------------------------------------------------------------------------
 (5) _recv_res_header                                     11     9      2    4319
                                             34 BANK0     11     9      2
                              _get_1
                               _recv
                    _recv_msg_footer
                    _recv_msg_header
 ---------------------------------------------------------------------------------
 (3) _recv_msg_header                                      7     4      3    1362
                                             25 BANK0      7     4      3
                              _get_1
                    _msg_state_reset
                               _recv
 ---------------------------------------------------------------------------------
 (4) _msg_state_reset                                      2     0      2     229
                                              2 BANK0      2     0      2
                      _msg_buf_reset
 ---------------------------------------------------------------------------------
 (4) _get_1                                                3     1      2     139
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _recv_msg_footer                                      9     7      2    1397
                                             25 BANK0      9     7      2
                              _get_2
                      _nmbs_crc_calc
                               _recv
 ---------------------------------------------------------------------------------
 (4) _recv                                                 5     1      4     542
                                             20 BANK0      5     1      4
                        _read_serial *
 ---------------------------------------------------------------------------------
 (5) _read_serial                                         19     9     10     256
                                              1 BANK0     19     9     10
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Read                                         1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _nmbs_crc_calc                                       18    12      6     321
                                              0 BANK0     18    12      6
 ---------------------------------------------------------------------------------
 (7) _get_2                                               11     9      2     225
                                              0 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (4) _put_res_header                                       4     0      4     991
                                             10 BANK0      4     0      4
                     _put_msg_header
 ---------------------------------------------------------------------------------
 (5) _put_msg_header                                       4     0      4     911
                                              6 BANK0      4     0      4
                      _msg_buf_reset
                              _put_1
                              _put_2
 ---------------------------------------------------------------------------------
 (5) _put_2                                                6     2      4     274
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) _put_1                                                3     0      3     154
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _msg_buf_reset                                        2     0      2      37
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _handler_read_input_registers                        14     6      8     334
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (5) _handler_read_holding_registers                      14     6      8     319
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _nmbs_server_create                                   9     2      7     776
                                             14 BANK0      9     2      7
                        _nmbs_create
 ---------------------------------------------------------------------------------
 (2) _nmbs_create                                          6     2      4     451
                                              8 BANK0      6     2      4
                           _m_memset
 ---------------------------------------------------------------------------------
 (1) _is_a_new_value                                      10     4      6     970
                                              8 BANK0     10     4      6
                   _DATAEE_WriteByte
                   _DATAEE_WriteWord
                 _setBaudRateEUSART1
 ---------------------------------------------------------------------------------
 (1) _setBaudRateEUSART1                                   4     0      4      37
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteWord                                     4     0      4     305
                                              4 BANK0      4     0      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     4     1      3     154
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _getSHTC3Data                                        12    10      2   23165
                                             20 BANK0     12    10      2
                    _I2C1_ReadNBytes
                   _I2C1_WriteNBytes
 ---------------------------------------------------------------------------------
 (1) _getBMP280Data                                       17    14      3   35205
                                             25 BANK0     17    14      3
                         _readBMP280
                        _writeBMP280
 ---------------------------------------------------------------------------------
 (1) _getADCData                                           5     3      2     149
                                              3 BANK0      5     3      2
           _ADCC_GetSingleConversion
 ---------------------------------------------------------------------------------
 (2) _ADCC_GetSingleConversion                             3     1      2      47
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _default_values_register                              2     0      2   23828
                                             29 BANK0      2     0      2
                           _m_memset
                    _readBMP280coeff
 ---------------------------------------------------------------------------------
 (2) _readBMP280coeff                                      5     3      2   23442
                                             24 BANK0      5     3      2
                  _adjustBMP280coeff
                         _readBMP280
 ---------------------------------------------------------------------------------
 (2) _readBMP280                                           4     4      0   22869
                                             20 BANK0      4     4      0
                    _I2C1_ReadNBytes
                   _I2C1_WriteNBytes
 ---------------------------------------------------------------------------------
 (2) _I2C1_ReadNBytes                                      4     1      3   11143
                                             16 BANK0      4     1      3
                         _I2C1_Close
                    _I2C1_MasterRead
                          _I2C1_Open
                     _I2C1_SetBuffer
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterRead                                      0     0      0   10797
               _I2C1_MasterOperation
 ---------------------------------------------------------------------------------
 (3) _adjustBMP280coeff                                    2     0      2     375
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _m_memset                                             8     2      6     166
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _check_error_modbus                                   1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_ClearBuffer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     170
                    _ADCC_Initialize
                 _EUSART1_Initialize
                     _FVR_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      34
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      34
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     136
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2      34
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2      34
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2      34
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2      34
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitBMP280                                           0     0      0   11723
                        _writeBMP280
 ---------------------------------------------------------------------------------
 (2) _writeBMP280                                          5     4      1   11723
                                             20 BANK0      5     4      1
                   _I2C1_WriteNBytes
 ---------------------------------------------------------------------------------
 (2) _I2C1_WriteNBytes                                     4     1      3   11522
                                             16 BANK0      4     1      3
                         _I2C1_Close
                   _I2C1_MasterWrite
                          _I2C1_Open
        _I2C1_SetAddressNackCallback
                     _I2C1_SetBuffer
 ---------------------------------------------------------------------------------
 (3) _I2C1_SetAddressNackCallback                          4     0      4     361
                                              6 BANK0      4     0      4
                   _I2C1_SetCallback
 ---------------------------------------------------------------------------------
 (3) _I2C1_Open                                            2     2      0      84
                                              0 BANK0      2     2      0
                _I2C1_MasterClearIrq
                    _I2C1_MasterOpen
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterOpen                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterWrite                                     0     0      0   10797
               _I2C1_MasterOperation
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterOperation                                 2     2      0   10797
                                             14 BANK0      2     2      0
                   _I2C1_MasterStart
                        _I2C1_Poller
 ---------------------------------------------------------------------------------
 (5) _I2C1_Poller                                          0     0      0   10713
                     _I2C1_MasterFsm
            _I2C1_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterWaitForEvent                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterFsm                                       2     2      0   10713
                                             12 BANK0      2     2      0
               _I2C1_DO_ADDRESS_NACK *
                       _I2C1_DO_IDLE *
                       _I2C1_DO_RCEN *
                      _I2C1_DO_RESET *
                         _I2C1_DO_RX *
                     _I2C1_DO_RX_ACK *
            _I2C1_DO_RX_NACK_RESTART *
               _I2C1_DO_RX_NACK_STOP *
              _I2C1_DO_SEND_ADR_READ *
             _I2C1_DO_SEND_ADR_WRITE *
               _I2C1_DO_SEND_RESTART *
          _I2C1_DO_SEND_RESTART_READ *
         _I2C1_DO_SEND_RESTART_WRITE *
                  _I2C1_DO_SEND_STOP *
                         _I2C1_DO_TX *
                   _I2C1_DO_TX_EMPTY *
                _I2C1_MasterClearIrq
                  _I2C1_MasterIsNack
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_TX_EMPTY                                     2     2      0    2643
                                             10 BANK0      2     2      0
                                NULL *
           _I2C1_CallbackReturnReset *
            _I2C1_CallbackReturnStop *
               _I2C1_DO_SEND_RESTART
                  _I2C1_DO_SEND_STOP
                  _I2C1_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _I2C1_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_TX                                           2     2      0    2690
                                             10 BANK0      2     2      0
                                NULL *
           _I2C1_CallbackReturnReset *
            _I2C1_CallbackReturnStop *
          _I2C1_DO_SEND_RESTART_READ
         _I2C1_DO_SEND_RESTART_WRITE
                  _I2C1_DO_SEND_STOP
                  _I2C1_MasterIsNack
              _I2C1_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C1_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_DO_SEND_RESTART_WRITE                           0     0      0       0
           _I2C1_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C1_DO_SEND_RESTART_READ                            0     0      0       0
           _I2C1_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_SEND_ADR_WRITE                               0     0      0      47
              _I2C1_MasterSendTxData
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_SEND_ADR_READ                                0     0      0      47
              _I2C1_MasterSendTxData
 ---------------------------------------------------------------------------------
 (8) _I2C1_MasterSendTxData                                1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_RX_ACK                                       0     0      0       0
                 _I2C1_MasterSendAck
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_RX                                           2     2      0    2643
                                             10 BANK0      2     2      0
                                NULL *
           _I2C1_CallbackReturnReset *
            _I2C1_CallbackReturnStop *
            _I2C1_DO_RX_NACK_RESTART
               _I2C1_DO_RX_NACK_STOP
               _I2C1_MasterGetRxData
                 _I2C1_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _I2C1_MasterSendAck                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_RX_NACK_STOP                                 0     0      0       0
                _I2C1_MasterSendNack
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_RX_NACK_RESTART                              0     0      0       0
                _I2C1_MasterSendNack
 ---------------------------------------------------------------------------------
 (8) _I2C1_MasterSendNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_RCEN                                         0     0      0       0
                 _I2C1_MasterStartRx
 ---------------------------------------------------------------------------------
 (8) _I2C1_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_DO_ADDRESS_NACK                                 2     2      0    2643
                                             10 BANK0      2     2      0
                                NULL *
           _I2C1_CallbackReturnReset *
            _I2C1_CallbackReturnStop *
               _I2C1_DO_SEND_RESTART
                  _I2C1_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1     520
                                              9 BANK0      1     0      1
                     _I2C1_SetBuffer
       _I2C1_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1     520
                                              9 BANK0      1     0      1
                     _I2C1_SetBuffer
       _I2C1_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1     551
                                              9 BANK0      1     0      1
                     _I2C1_SetBuffer
       _I2C1_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1     520
                                              9 BANK0      1     0      1
                     _I2C1_SetBuffer
       _I2C1_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1     520
                                              9 BANK0      1     0      1
                     _I2C1_SetBuffer
       _I2C1_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_SetDataCompleteCallback                         3     0      3     385
                                              6 BANK0      3     0      3
                   _I2C1_SetCallback
 ---------------------------------------------------------------------------------
 (4) _I2C1_SetCallback                                     6     3      3     293
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _I2C1_SetBuffer                                       4     0      4     104
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (8) _I2C1_DO_SEND_STOP                                    0     0      0       0
                    _I2C1_MasterStop
 ---------------------------------------------------------------------------------
 (9) _I2C1_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_DO_SEND_RESTART                                 0     0      0       0
           _I2C1_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (9) _I2C1_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_CallbackReturnStop                              1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _I2C1_CallbackReturnReset                             1     0      1      12
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (15) NULL(Fake)                                           1     0      1       0
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C1_Close                                           1     1      0      37
                                              0 BANK0      1     1      0
                _I2C1_MasterClearIrq
                   _I2C1_MasterClose
              _I2C1_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterDisableIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterClose                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterClearIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FVR_IsOutputReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadWord                                      9     7      2     210
                                              2 BANK0      9     7      2
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2      74
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                          0     0      0     322
                                NULL *
                _EUSART1_Receive_ISR *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (14) _TMR1_ISR                                            0     0      0      92
                                NULL *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (15) _TMR1_DefaultInterruptHandler                        0     0      0       0
                     _TMR1_StopTimer
                 i1_UART_ClearBuffer
 ---------------------------------------------------------------------------------
 (16) i1_UART_ClearBuffer                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EUSART1_Receive_ISR                                 0     0      0     230
                                NULL *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultOverrunErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultFramingErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultErrorHandler                         0     0      0     115
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (15) _EUSART1_RxDataHandler                               4     4      0     115
                                              2 COMMON     4     4      0
                    _TMR1_StartTimer
                     _TMR1_StopTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (15) _TMR1_WriteTimer                                     2     0      2      92
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (16) _TMR1_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _TMR1_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (15) NULL(Fake)                                           1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
   _DATAEE_ReadWord
     _DATAEE_ReadByte
   _DATAEE_WriteWord
     _DATAEE_WriteByte
   _FVR_IsOutputReady
   _InitBMP280
     _writeBMP280
       _I2C1_WriteNBytes
         _I2C1_Close
           _I2C1_MasterClearIrq
           _I2C1_MasterClose
           _I2C1_MasterDisableIrq
         _I2C1_MasterWrite
           _I2C1_MasterOperation
             _I2C1_MasterStart
             _I2C1_Poller
               _I2C1_MasterFsm
                 _I2C1_DO_ADDRESS_NACK *
                   NULL(Fake) *
                   _I2C1_CallbackReturnReset *
                   _I2C1_CallbackReturnStop *
                   _I2C1_DO_SEND_RESTART *
                     _I2C1_MasterEnableRestart
                   _I2C1_DO_SEND_STOP *
                     _I2C1_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C1_SetBuffer
                     _I2C1_SetDataCompleteCallback
                       _I2C1_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C1_SetBuffer
                     _I2C1_SetDataCompleteCallback
                   _rdBlkRegCompleteHandler *
                     _I2C1_SetBuffer
                     _I2C1_SetDataCompleteCallback
                   _wr1RegCompleteHandler *
                     _I2C1_SetBuffer
                     _I2C1_SetDataCompleteCallback
                   _wr2RegCompleteHandler *
                     _I2C1_SetBuffer
                     _I2C1_SetDataCompleteCallback
                 _I2C1_DO_IDLE *
                 _I2C1_DO_RCEN *
                   _I2C1_MasterStartRx
                 _I2C1_DO_RESET *
                 _I2C1_DO_RX *
                   NULL(Fake) *
                   _I2C1_CallbackReturnReset *
                   _I2C1_CallbackReturnStop *
                   _I2C1_DO_RX_NACK_RESTART *
                     _I2C1_MasterSendNack
                   _I2C1_DO_RX_NACK_STOP *
                     _I2C1_MasterSendNack
                   _I2C1_MasterGetRxData *
                   _I2C1_MasterSendAck *
                   _rd1RegCompleteHandler *
                   _rd2RegCompleteHandler *
                   _rdBlkRegCompleteHandler *
                   _wr1RegCompleteHandler *
                   _wr2RegCompleteHandler *
                 _I2C1_DO_RX_ACK *
                   _I2C1_MasterSendAck
                 _I2C1_DO_RX_NACK_RESTART *
                 _I2C1_DO_RX_NACK_STOP *
                 _I2C1_DO_SEND_ADR_READ *
                   _I2C1_MasterSendTxData
                 _I2C1_DO_SEND_ADR_WRITE *
                   _I2C1_MasterSendTxData
                 _I2C1_DO_SEND_RESTART *
                 _I2C1_DO_SEND_RESTART_READ *
                   _I2C1_MasterEnableRestart
                 _I2C1_DO_SEND_RESTART_WRITE *
                   _I2C1_MasterEnableRestart
                 _I2C1_DO_SEND_STOP *
                 _I2C1_DO_TX *
                   NULL(Fake) *
                   _I2C1_CallbackReturnReset *
                   _I2C1_CallbackReturnStop *
                   _I2C1_DO_SEND_RESTART_READ *
                   _I2C1_DO_SEND_RESTART_WRITE *
                   _I2C1_DO_SEND_STOP *
                   _I2C1_MasterIsNack *
                   _I2C1_MasterSendTxData *
                   _rd1RegCompleteHandler *
                   _rd2RegCompleteHandler *
                   _rdBlkRegCompleteHandler *
                   _wr1RegCompleteHandler *
                   _wr2RegCompleteHandler *
                 _I2C1_DO_TX_EMPTY *
                   NULL(Fake) *
                   _I2C1_CallbackReturnReset *
                   _I2C1_CallbackReturnStop *
                   _I2C1_DO_SEND_RESTART *
                   _I2C1_DO_SEND_STOP *
                   _I2C1_MasterSetIrq *
                   _rd1RegCompleteHandler *
                   _rd2RegCompleteHandler *
                   _rdBlkRegCompleteHandler *
                   _wr1RegCompleteHandler *
                   _wr2RegCompleteHandler *
                 _I2C1_MasterClearIrq *
                 _I2C1_MasterIsNack *
               _I2C1_MasterWaitForEvent
         _I2C1_Open
           _I2C1_MasterClearIrq
           _I2C1_MasterOpen
         _I2C1_SetAddressNackCallback
           _I2C1_SetCallback
         _I2C1_SetBuffer
   _SYSTEM_Initialize
     _ADCC_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
     _FVR_Initialize
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
   _TxDeviceDisable
   _UART_ClearBuffer
   _check_error_modbus
   _default_values_register
     _m_memset
     _readBMP280coeff
       _adjustBMP280coeff
       _readBMP280
         _I2C1_ReadNBytes
           _I2C1_Close
           _I2C1_MasterRead
             _I2C1_MasterOperation
           _I2C1_Open
           _I2C1_SetBuffer
         _I2C1_WriteNBytes
   _getADCData *
     _ADCC_GetSingleConversion
   _getBMP280Data *
     _readBMP280
     _writeBMP280
   _getSHTC3Data *
     _I2C1_ReadNBytes
     _I2C1_WriteNBytes
   _is_a_new_value *
     _DATAEE_WriteByte
     _DATAEE_WriteWord
     _setBaudRateEUSART1
   _m_memset *
   _nmbs_server_create *
     _nmbs_create
       _m_memset
   _nmbs_server_poll *
     _handle_req_fc
       _handle_read_holding_registers
         _handle_read_registers
           _get_2
           _handler_read_holding_registers *
           _handler_read_input_registers *
           _put_1 *
           _put_2 *
           _put_res_header *
             _put_msg_header
               _msg_buf_reset
               _put_1
               _put_2
           _recv *
             _read_serial *
               _EUSART1_Read
           _recv_msg_footer *
             _get_2
             _nmbs_crc_calc
             _recv
           _recv_read_registers_res *
             _get_1
             _get_2
             _recv
             _recv_msg_footer
             _recv_res_header
               _get_1
               _recv
               _recv_msg_footer
               _recv_msg_header
                 _get_1
                 _msg_state_reset
                   _msg_buf_reset
                 _recv
           _send_exception_msg *
             _put_1
             _put_msg_header
             _send_msg
               _nmbs_crc_calc
               _put_2
               _send
                 _write_serial *
                   _EUSART1_Write
                   _EUSART1_is_tx_done
                   _EUSART1_is_tx_ready
                   _TxDeviceDisable
                   _TxDeviceEnable
           _send_msg *
       _handle_read_input_registers
         _handle_read_registers
       _handle_write_single_coil@nanomodbus$F3828
         _get_2
         _handle_write_single_coil *
         _put_2 *
         _put_res_header *
         _recv *
         _recv_msg_footer *
         _recv_write_single_coil_res *
           _get_2
           _recv
           _recv_msg_footer
           _recv_res_header
         _send_exception_msg *
         _send_msg *
       _handle_write_single_register@nanomodbus$F3873
         _get_2
         _handle_write_single_register *
         _put_2 *
         _put_res_header *
         _recv *
         _recv_msg_footer *
         _recv_write_single_register_res *
           _get_2
           _recv
           _recv_msg_footer
           _recv_res_header
         _send_msg *
     _msg_state_reset
     _read_serial *
     _recv_req_header *
       _recv_msg_header
   _printf *
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
   _setBaudRateEUSART1 *

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART1_Receive_ISR *
     NULL(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
         _TMR1_StartTimer
         _TMR1_StopTimer
         _TMR1_WriteTimer
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _TMR1_ISR *
     NULL(Fake) *
     _TMR1_DefaultInterruptHandler *
       _TMR1_StopTimer
       i1_UART_ClearBuffer
     _TMR1_WriteTimer *

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            80      0       0      0.0%
BITBANK5            80      0       0      0.0%
BITBANK6            80      0       0      0.0%
BITBANK7            80      0       0      0.0%
BITBANK8            80      0       0      0.0%
BITBANK9            80      0       0      0.0%
BITBANK10           80      0       0      0.0%
BITBANK11           80      0       0      0.0%
BITBANK12           48      0       0      0.0%
BIGRAM            1008      0       0      0.0%
COMMON              14      6      12     85.7%
BANK0               80     80      80    100.0%
BANK1               80     78      78     97.5%
BANK2               80     14      78     97.5%
BANK3               80      7      10     12.5%
BANK4               80     45      75     93.8%
BANK5               80      0      68     85.0%
BANK6               80      0      50     62.5%
BANK7               80      0      32     40.0%
BANK8               80      0      64     80.0%
BANK9               80     76      76     95.0%
BANK10              80      0       0      0.0%
BANK11              80      0       0      0.0%
BANK12              48      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     623      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Mar 27 09:52:00 2025

 handle_write_single_register@nanomodbus$F3873@address 0057  
                             ?_default_values_register 003D  
                               __end_of_FVR_Initialize 115E  
                     recv_read_registers_res@registers 0051  
                   recv_res_header@first_byte_received 0049  
                                                  l350 0762  
                                                  l351 076B  
                                                  l352 0774  
                                                  l353 077E  
                                                  l354 0787  
                                                  l355 0791  
                                                  l348 0758  
                                                  l197 12DD  
                                                  l349 07D3  
                                                  l703 0C0A  
                                                  l379 11E2  
                                                  l646 13CB  
                                                  l910 151A  
                                                  l719 0930  
                                                  l860 1152  
                      recv_read_registers_res@quantity 004F  
                                ?_I2C1_MasterOperation 0076  
                handle_write_single_register@registers 0022  
                                      _timer1ReloadVal 0159  
                                                  _dig 033A  
                                                  wreg 0009  
                               ?_I2C1_MasterSendTxData 0076  
                                 _I2C1_DO_RX_NACK_STOP 114A  
                       ?_handle_read_holding_registers 0069  
                            ?_I2C1_MasterEnableRestart 0076  
                      handler_read_holding_registers@i 002C  
                                 I2C1_SetBuffer@buffer 0020  
                                 __end_of_getSHTC3Data 0CC7  
                              ??_rd2RegCompleteHandler 002A  
                                                 l1079 011D  
                                                 l1446 0D48  
                                                 l1609 0885  
                                                 l1477 0DC6  
                                                 l7013 0B25  
                                                 l7021 0B3A  
                                                 l8001 087D  
                                                 l7211 178F  
                                                 l7035 0DF8  
                                                 l7131 052F  
                                                 l7123 0511  
                                                 l7107 0987  
                                                 l8003 0888  
                                                 l7053 0E35  
                                                 l8005 089C  
                                                 l8013 140E  
                                                 l7039 0DFA  
                                                 l7119 050F  
                                                 l8015 1421  
                                                 l8203 0658  
                                                 l7251 09B3  
                                                 l7243 09A9  
                                                 l7163 0589  
                                                 l7139 0544  
                                                 l7323 072E  
                                                 l7403 0C2F  
                                                 l8107 0F3E  
                                                 l7229 1389  
                                                 l7253 09DC  
                                                 l7341 0752  
                                                 l7325 06FD  
                                                 l7501 02C5  
                                                 l8301 017B  
                                                 l6535 1743  
                                                 l7087 13D3  
                                                 l8143 04D9  
                                                 l8135 0488  
                                                 l7271 09F7  
                                                 l7263 09ED  
                                                 l7167 058B  
                                                 l7175 058D  
                                                 l7327 0733  
                                                 l7407 0C31  
                                                 l8311 01AC  
                                                 l6713 0BE0  
                                                 l8137 0497  
                                                 l8065 17AF  
                                                 l8057 179E  
                                                 l7273 0A20  
                                                 l7521 031B  
                                                 l7505 02CF  
                                                 l7425 0C69  
                                                 l8313 01D5  
                                                 l8305 017F  
                                                 l6731 0C22  
                                                 l6723 0BE6  
                                                 l7355 15AE  
                                                 l7347 1590  
                                                 l8091 0F22  
                                                 l8307 01A8  
                                                 l8251 00D8  
                                                 l6717 0BE3  
                                                 l6709 0BDD  
                                                 l6821 0808  
                                                 l7365 14BF  
                                                 l7293 06D0  
                                                 l7533 033B  
                                                 l7461 01F7  
                                                 l7373 0EA5  
                                                 l7429 0C6B  
                                                 l7701 0630  
                                                 l7541 0CCF  
                                                 l7359 14AB  
                                                 l7519 02FB  
                                                 l7615 034C  
                                                 l7391 15BE  
                                                 l8095 0F24  
                                                 l7543 0CD3  
                                                 l8239 007F  
                                                 l6753 0932  
                                                 l6817 0805  
                                                 l8193 0652  
                                                 l7297 06D2  
                                                 l7481 0268  
                                                 l7529 0329  
                                                 l7457 01F5  
                                                 l7641 0393  
                                                 l7713 0A86  
                                                 l8249 00B9  
                                                 l6763 0938  
                                                 l6827 080B  
                                                 l8187 0642  
                                                 l6667 1261  
                                                 l7475 0238  
                                                 l7379 0ECE  
                                                 l7619 034E  
                                                 l8099 0F27  
                                                 l7547 0CFA  
                                                 l8275 011E  
                                                 l6757 0935  
                                                 l8197 0657  
                                                 l6933 0D54  
                                                 l6941 0D27  
                                                 l6845 0831  
                                                 l7485 0272  
                                                 l7653 03D3  
                                                 l7717 0A90  
                                                 l8293 0157  
                                                 l6783 1635  
                                                 l6863 1579  
                                                 l7591 13A8  
                                                 l6943 0D68  
                                                 l6935 0D59  
                                                 l6847 085A  
                                                 l7479 0242  
                                                 l7671 041B  
                                                 l8295 016D  
                                                 l8561 07B5  
                                                 l6881 0A56  
                                                 l7657 03DC  
                                                 l8289 0152  
                                                 l6779 1632  
                                                 l6795 163C  
                                                 l8571 0820  
                                                 l8563 07BA  
                                                 l8555 079C  
                                                 l6955 17FE  
                                                 l6875 0A45  
                                                 l6883 0A2F  
                                                 l7675 042A  
                                                 l7667 0412  
                                                 l8299 0171  
                                                 l6789 1639  
                                                 l8573 0949  
                                                 l7925 14C9  
                                                 l8565 07BF  
                                                 l8557 07CE  
                                                 l7773 0796  
                                                 l6885 0A5B  
                                                 l8575 0BFC  
                                                 l6967 11F4  
                                                 l8567 07C4  
                                                 l8559 07B0  
                                                 l7935 0B9F  
                                                 l6991 0E98  
                                                 l8577 164D  
                                                 l8569 07C9  
                                                 l7697 0621  
                                                 l7955 0B96  
                                                 l7939 0BA1  
                                                 l6995 0E9A  
                                                 l6987 0E7C  
                                                 l7957 0BBB  
                                                 l7949 0B8E  
                                                 l7983 0ACE  
                                                 l7977 0AB9  
                                                 l7995 0864  
                                                 l7987 0AE7  
                                                 l7997 086C  
                                                 l7989 0AEE  
                                                 l7999 0875  
                                                 STR_1 1800  
                                                 _LATA 0018  
                                                 _LATC 001A  
                                                 u4215 09BE  
                                                 u4225 09CC  
                                                 u5050 17C3  
                                                 u4235 09B9  
                                                 u4325 0700  
                                                 u4255 0A02  
                                                 u4095 052B  
                                                 u4335 070C  
                                                 u4424 0EC3  
                                                 u4265 0A10  
                                                 u4425 0EC2  
                                                 u4505 0C71  
                                                 u4434 0ED8  
                                                 u5155 0444  
                                                 u4275 09FD  
                                                 u4355 074E  
                                                 u4435 0ED6  
                                                 _PMD0 0796  
                                                 u5245 067B  
                                                 u5405 01C7  
                                                 _PMD1 0797  
                                                 _PMD2 0798  
                                                 u5255 0697  
                                                 u4455 15CD  
                                                 _PMD3 0799  
                                                 _PMD4 079A  
                                                 u5265 06B3  
                                                 u5185 04B0  
                                                 _PMD5 079B  
                                                 _PMD6 079C  
                                                 u4635 0301  
                                                 _PMD7 079D  
                                                 u4580 027E  
                                                 u3845 0A35  
                                                 u3933 0E94  
                                                 u3925 0E78  
                                                 u4495 0C67  
                                                 u5375 019A  
                                                 u3865 0D4B  
                                                 u3785 0845  
                                                 u4770 039D  
                                                 u3875 0D55  
                                                 u4780 039E  
                                                 u4685 0CF8  
                                                 u3895 0D35  
                                                 u3975 0B36  
                                                 u4960 0BD0  
                      handle_read_input_registers@nmbs 0069  
                                                 _WPUA 1F39  
                                                 _WPUC 1F4F  
                              ??_wr2RegCompleteHandler 002A  
                                     ??_I2C1_MasterFsm 002C  
                                        _EUSART1_Write 11E1  
                            ??_I2C1_CallbackReturnStop 002A  
                                                 _dbuf 03A0  
                 handle_write_single_coil@server_coils 002D  
                                                 _main 0074  
                                                 _recv 17C9  
                                        ?_EUSART1_Read 0076  
                                                 _send 0E37  
                                                 _prec 0157  
                                 read_serial@charCount 0030  
                                                 fsr0h 0005  
                                                 fsr1h 0007  
                                                 indf0 0000  
                                                 fsr0l 0004  
                                                 indf1 0001  
                                                 fsr1l 0006  
                                                 btemp 007E  
                                     _nmbs_server_poll 0F03  
                                                 start 001B  
                                     ??_I2C1_SetBuffer 0024  
                           ??_TMR1_SetInterruptHandler 0022  
                                          _writeBMP280 1290  
                     ??_handler_read_holding_registers 0028  
                      ?_handler_read_holding_registers 0020  
                                recv_res_header@req_fc 004A  
                   __end_of_recv_write_single_coil_res 0C75  
                           _recv_write_single_coil_res 0C24  
                                        write_serial@i 002F  
                        I2C1_CallbackReturnStop@funPtr 0029  
                                    ??_readBMP280coeff 003A  
                                      ?_FVR_Initialize 0076  
                        __end_of_OSCILLATOR_Initialize 11E1  
                                    ??_I2C1_ReadNBytes 0033  
                                _eusart1RxStatusBuffer 013E  
                                    __end_of_I2C1_Open 1792  
                                                _ADCAP 010E  
                                                _ADACT 0117  
                                                ?_main 0076  
                                                _ADCLK 0118  
                                                _ADPCH 009F  
                                                _ADREF 0116  
                                                ?_recv 0034  
                                                ?_send 0031  
                                                _ADRPT 009A  
                                      _TMR1_StartTimer 10FD  
                                                _T1CLK 0211  
                                                _T1CON 020E  
                               I2C1_ReadNBytes@address 0033  
                  handle_write_single_register@address 0020  
                                                i1l891 0019  
                                                i1l886 0010  
                                                _OSCEN 0891  
                                         vfpfcnvrt@fmt 002B  
                                                _TMR1H 020D  
                                                _TMR1L 020C  
                                       _TxDeviceEnable 0002  
                                                _TRISA 0012  
                                                _TRISC 0014  
                               ??_I2C1_MasterGetRxData 0020  
                                __end_of_msg_buf_reset 121C  
                   recv_msg_header@first_byte_received 003B  
                                ?_I2C1_DO_RX_NACK_STOP 0076  
                                    ??_I2C1_MasterRead 0030  
                           ??_I2C1_CallbackReturnReset 002A  
                                    ??_I2C1_MasterOpen 0020  
                                    ??_I2C1_MasterStop 0020  
                                    ??_I2C1_Initialize 0020  
                                     __end_of_TMR1_ISR 12FC  
                         ?_handle_read_input_registers 0069  
                                      _DATAEE_ReadByte 1264  
                                                _get_1 1473  
                                                _get_2 089E  
                                                _flags 015B  
                                         ?_read_serial 0021  
                                      _DATAEE_ReadWord 1524  
                             DATAEE_ReadWord@high_byte 002A  
                                                _fputc 0CC7  
                                          m_memset@len 0024  
                                                _put_1 13F0  
                                                _put_2 165C  
                       ??_handle_write_single_register 0027  
                           recv_res_header@req_unit_id 0048  
                                                _width 0155  
                                                _putch 10FC  
                                           _InitBMP280 1227  
                                       ?_EUSART1_Write 0076  
                              __end_of_TMR1_Initialize 1503  
                                       getBMP280Data@i 0044  
                                                pclath 000A  
                      nmbs_server_create@platform_conf 0031  
                                       ??_EUSART1_Read 0020  
                  handle_write_single_register@unit_id 0024  
              recv_write_single_register_res@value_req 0051  
                                                status 0003  
                                                wtemp0 007E  
                                         ??_I2C1_DO_RX 002A  
                                         ??_I2C1_DO_TX 002A  
                                   recv_msg_header@err 003F  
           __end_of_EUSART1_DefaultFramingErrorHandler 10FB  
                 ??_EUSART1_DefaultFramingErrorHandler 0076  
                  ?_EUSART1_DefaultFramingErrorHandler 0076  
                   _EUSART1_DefaultFramingErrorHandler 10FA  
                                      _TMR1_WriteTimer 1272  
                               ??_I2C1_DO_ADDRESS_NACK 002A  
                                         ??_I2C1_Close 0020  
                                        _fsmStateTable 1826  
                                      __initialization 001D  
                          adjustBMP280coeff@coeff_buff 0020  
                                         ?_nmbs_create 0028  
                                        main@callbacks 0161  
                           __end_of_EUSART1_Initialize 16BA  
                                         __end_of_main 01E5  
                                         __end_of_recv 1800  
                                         __end_of_send 0E9C  
         handle_write_single_register@server_registers 0029  
                          ?_INTERRUPT_InterruptManager 0076  
                               __end_of_TxDeviceEnable 0004  
                               ??_I2C1_MasterOperation 002E  
                                               ??_main 00EA  
                     __end_of_handle_write_single_coil 0F03  
                                               ??_recv 0038  
                                               ??_send 0035  
                      handle_write_single_coil@address 0020  
                                      _recv_msg_header 0DD5  
                                      _recv_req_header 0AAA  
                                      _recv_msg_footer 0AF0  
                               send_exception_msg@nmbs 0045  
                                   __end_of_I2C1_DO_RX 0958  
                                   __end_of_I2C1_DO_TX 0C24  
                                      _recv_res_header 04E8  
                                   __end_of_I2C1_Close 138C  
                             __end_of_I2C1_WriteNBytes 15B5  
                                    write_serial@count 0023  
         handle_write_single_coil@nanomodbus$F3828@err 0060  
                               nmbs_server_create@nmbs 002E  
                                               ?_get_1 0020  
                                               ?_get_2 0020  
                                               _ADACCU 0098  
                                               _ADACQH 010D  
                                               _ADACQL 010C  
                                  nmbs_server_poll@err 00E9  
                                               _ADCON0 0111  
                                               _ADCON1 0112  
                                               _ADCON2 0113  
                                               _ADCON3 0114  
                                               ?_fputc 0020  
                                               _ADLTHH 008D  
                                               _ADLTHL 008C  
                                               _ADRESH 009E  
                                               _ADRESL 009D  
                                               _ADPREH 0110  
                                               _ADPREL 010F  
                                               _ADSTAT 0115  
                                               _ADUTHH 008F  
                                 getSHTC3Data@Rxbuffer 003B  
                                               _ADUTHL 008E  
                                               ?_put_1 0020  
                                               ?_put_2 0020  
                                               _ANSELA 1F38  
                                               ?_putch 0076  
                                               _ANSELC 1F4E  
                recv_write_single_coil_res@address_res 0053  
                                  readBMP280@pRxbuffer 0034  
                                               _T1GATE 0210  
                                               _T1GCON 020F  
                                               _RC1REG 0119  
                                               _RC0PPS 1F20  
                                               _RC1PPS 1F21  
                                               _RC1STA 011D  
                                 getSHTC3Data@Txbuffer 003D  
                              TMR1_WriteTimer@timerVal 0076  
                                               _RC4PPS 1F24  
                                               _ODCONA 1F3A  
                                               _ODCONC 1F50  
                                               i1l5257 127C  
                                               i1l5473 1711  
                                               i1l5467 1705  
                                               i1l5845 1245  
                                               i1l5963 16CE  
                                               i1l5973 16EC  
                                               i1l5969 16DD  
                                               _INLVLA 1F3C  
                                               _INLVLC 1F52  
                                               _FVRCON 090C  
                                  readBMP280@pTxbuffer 0035  
                      handle_write_single_coil@unit_id 0023  
                                               _SP1BRG 011B  
                          recv_read_registers_res@nmbs 004D  
                                               _OSCFRQ 0893  
                                   _send_exception_msg 1547  
                                               _TX1REG 011A  
                                               _TX1STA 011E  
                                    ?_I2C1_MasterClose 0076  
                                      _TxDeviceDisable 1123  
                                       _put_msg_header 0D75  
                              ??_I2C1_MasterDisableIrq 0020  
                                    ?_I2C1_MasterStart 0076  
                                   recv_req_header@err 0043  
                                    ?_I2C1_MasterWrite 0076  
                             ?_I2C1_MasterWaitForEvent 0076  
                          handle_read_registers@F11145 0420  
                                   ??_I2C1_MasterClose 0020  
                                     _I2C1_DO_TX_EMPTY 162F  
                                   recv_msg_footer@crc 003D  
                                   recv_msg_footer@err 0041  
                                   ??_I2C1_MasterStart 0020  
                                       _put_res_header 1232  
                                   ??_I2C1_MasterWrite 0030  
                                  ?_send_exception_msg 0045  
                 __end_of_TMR1_DefaultInterruptHandler 124A  
                         _TMR1_DefaultInterruptHandler 123D  
                                         _write_serial 0A22  
                                         vfprintf@cfmt 0037  
                              __end_of_TMR1_StartTimer 10FF  
                            readBMP280coeff@coeff_buff 0038  
                           __end_of_setBaudRateEUSART1 07D8  
                                     __end_of_m_memset 13BC  
                                        main@registers 0220  
                             ?_EUSART1_SetErrorHandler 0020  
                                               _t_fine 014E  
                                   _nmbs_server_create 1792  
                                               _printf 1281  
                     ??_EUSART1_SetOverrunErrorHandler 0022  
                      ?_EUSART1_SetOverrunErrorHandler 0020  
                                      ?_TxDeviceEnable 0076  
                             ??_I2C1_DO_SEND_ADR_WRITE 0021  
                              __end_of_DATAEE_ReadByte 1272  
            handler_read_input_registers@registers_out 0024  
                                    ?_I2C1_SetCallback 0020  
                              __end_of_DATAEE_ReadWord 1547  
                               ??_I2C1_DO_RX_NACK_STOP 0020  
                                     __end_of_send_msg 099A  
                                      _ADCC_Initialize 1458  
                                _I2C1_DO_SEND_ADR_READ 119F  
                                               fputc@c 0020  
                                       _PMD_Initialize 1208  
                        ?_I2C1_SetDataCompleteCallback 0026  
         handler_read_input_registers@server_registers 002B  
                                   ??_I2C1_SetCallback 0023  
                                  ?_nmbs_server_create 002E  
                                 ??_send_exception_msg 0048  
                                               putch@c 0076  
                                     __end_of_vfprintf 1424  
                            ?_ADCC_GetSingleConversion 0020  
                                      ??_EUSART1_Write 0020  
             TMR1_SetInterruptHandler@InterruptHandler 0020  
                              __end_of_TMR1_WriteTimer 1281  
                                      _eusart1RxBuffer 0146  
                                     getADCData@result 0025  
                                          ?_InitBMP280 0076  
                              _I2C1_DO_RX_NACK_RESTART 114E  
                        handle_write_single_coil@coils 0022  
                                  I2C1_WriteNBytes@len 0031  
                                  recv_msg_header@nmbs 0039  
                                     ?_TMR1_Initialize 0076  
                           __end_of_check_error_modbus 10FC  
                                    _SYSTEM_Initialize 138C  
                               __end_of_put_msg_header 0DD5  
                       I2C1_SetDataCompleteCallback@cb 0026  
                              __end_of__initialization 0070  
     handle_write_single_coil@nanomodbus$F3828@address 005C  
                              recv_msg_footer@recv_crc 003F  
                      I2C1_MasterOperation@returnValue 002F  
                                   ?_SYSTEM_Initialize 0076  
                               __end_of_put_res_header 123D  
                                   recv_res_header@err 004C  
                                        ??_I2C1_Poller 002E  
                                 ??_nmbs_server_create 0035  
                        __end_of_EUSART1_RxDataHandler 1725  
                              _rdBlkRegCompleteHandler 148E  
                            put_res_header@data_length 002C  
                                       __pcstackCOMMON 0076  
                                         __pidataBANK4 143E  
                                         __pidataBANK5 08DA  
                                         __pidataBANK6 1424  
                              __end_of_recv_msg_header 0E37  
                                  ??_SYSTEM_Initialize 0022  
                        __end_of_handle_read_registers 033D  
                     __end_of_I2C1_MasterEnableRestart 1117  
       handle_write_single_coil@nanomodbus$F3828@value 005E  
                                            ?_TMR1_ISR 0076  
                                        __end_of_get_1 148E  
                                        __end_of_get_2 08DA  
                        ?_TMR1_DefaultInterruptHandler 0076  
                                         _getSHTC3Data 0C75  
                                 sendSensorData@F10975 02B8  
                                     _DATAEE_WriteByte 1503  
                              __end_of_recv_req_header 0AF0  
                              __end_of_recv_msg_footer 0B3C  
                                        __end_of_fputc 0D1B  
                                     _DATAEE_WriteWord 134C  
                                        __end_of_put_1 140A  
                                        __end_of_put_2 1689  
                                        __end_of_putch 10FD  
                              __end_of_recv_res_header 058F  
                               __end_of_PMD_Initialize 1212  
                         ??_I2C1_DO_SEND_RESTART_WRITE 0020  
                              ??_I2C1_MasterSendTxData 0020  
                                 __end_of_EUSART1_Read 1257  
                 __end_of_handler_read_input_registers 09DE  
                         _handler_read_input_registers 099A  
                             __end_of_nmbs_server_poll 0F7D  
                                      write_serial@arg 0029  
                                      write_serial@buf 0021  
                  nmbs_server_poll@first_byte_received 00E8  
                                           _getADCData 12C3  
                          __end_of_EUSART1_Receive_ISR 16EF  
                                __end_of_I2C1_DO_RESET 1174  
                                    ??_msg_state_reset 0024  
                                              ??_get_1 0022  
                                              ??_get_2 0022  
                              __end_of_TxDeviceDisable 1126  
                                              ??_fputc 0024  
                            __end_of_SYSTEM_Initialize 13A4  
                                              ??_put_1 0023  
                                              ??_put_2 0024  
                                              ??_putch 0020  
                                        _eusart1RxHead 0073  
                                        _eusart1RxTail 0072  
                                       _is_a_new_value 042C  
                                           __pbssBANK2 0120  
                                           __pbssBANK3 01A9  
                                           __pbssBANK5 02DC  
                                           __pbssBANK6 033A  
                                           __pbssBANK7 03A0  
                                           __pbssBANK8 0420  
                      __end_of_I2C1_MasterWaitForEvent 1156  
                      ??_EUSART1_SetRxInterruptHandler 0022  
                                __end_of_handle_req_fc 089E  
                                      ?_put_msg_header 0026  
                        __end_of_rd2RegCompleteHandler 1338  
                                      _readBMP280coeff 14C6  
                                 I2C1_Open@returnValue 0021  
                            ?_handle_write_single_coil 0020  
                        __end_of_wr2RegCompleteHandler 1310  
                                      ?_put_res_header 002A  
                                _rd1RegCompleteHandler 1310  
                                      _I2C1_ReadNBytes 14AA  
                                    _I2C1_DO_SEND_STOP 1142  
                                         ?_writeBMP280 0034  
                                _wr1RegCompleteHandler 1338  
                      __end_of_EUSART1_SetErrorHandler 11AF  
                                     ??_FVR_Initialize 0020  
                                           __pmaintext 0074  
                             rd1RegCompleteHandler@ptr 0029  
               recv_read_registers_res@registers_bytes 005B  
                                   ?_I2C1_DO_SEND_STOP 0076  
                                     ?_TMR1_StartTimer 0076  
                                           ??_TMR1_ISR 0078  
                          ?_recv_write_single_coil_res 004D  
        handle_write_single_coil@nanomodbus$F3828@nmbs 0058  
                              __end_of_ADCC_Initialize 1473  
                                      _I2C1_MasterRead 1162  
                                      _I2C1_MasterOpen 121C  
                                           __pintentry 0004  
                                      _I2C1_MasterStop 1117  
                                      _I2C1_Initialize 11CF  
                                 nmbs_server_poll@nmbs 006E  
                                  __end_of_I2C1_Poller 11FE  
                                              _ADSTPTH 0093  
                                              _ADSTPTL 0092  
                                              ?_printf 0039  
                                      ?_PMD_Initialize 0076  
                               ?_I2C1_DO_SEND_ADR_READ 0076  
                                  ??_I2C1_DO_SEND_STOP 0020  
               __end_of_EUSART1_SetFramingErrorHandler 11B7  
                       _EUSART1_SetFramingErrorHandler 11AF  
                                     ?_DATAEE_ReadByte 0020  
                                    main@platform_conf 01A0  
                                     ?_DATAEE_ReadWord 0022  
                           __end_ofi1_UART_ClearBuffer 112E  
                        ?_handler_read_input_registers 0020  
               __end_of_handler_read_holding_registers 0A22  
                       _handler_read_holding_registers 09DE  
                         ?_EUSART1_DefaultErrorHandler 0076  
                                    _I2C1_MasterIsNack 1180  
                                              _SP1BRGH 011C  
                                              _SP1BRGL 011B  
                     default_values_register@registers 003D  
                                              _OSCCON1 088D  
                                              _OSCCON3 088F  
                                            _I2C1_Open 175B  
                            ??_I2C1_DO_RX_NACK_RESTART 0020  
                                              _NVMADRH 081B  
                                              _NVMADRL 081A  
                                              _OSCTUNE 0892  
                                              _NVMDATL 081C  
                                              _NVMCON2 081F  
                handler_read_holding_registers@address 0020  
                                    _I2C1_MasterSetIrq 1120  
                                              _SSP1ADD 018D  
                                              _SLRCONA 1F3B  
                                              _SLRCONC 1F51  
                               __end_of_is_a_new_value 04E8  
                                              _SSP1BUF 018C  
                                   ?_I2C1_MasterIsNack 0076  
                           ?_I2C1_DO_SEND_RESTART_READ 0076  
                            getADCData@sensorSelection 0023  
                       ??_I2C1_SetDataCompleteCallback 0029  
                                     ?_TMR1_WriteTimer 0076  
                                   ?_I2C1_MasterSetIrq 0076  
                                   writeBMP280@regdata 0034  
                                            ?_m_memset 0020  
                                  recv_req_header@nmbs 0040  
                                 DATAEE_WriteByte@bAdd 0020  
                                          send_msg@crc 0042  
                                          send_msg@err 0044  
                                           _readBMP280 13D6  
                                              _BuffReg 02DC  
                                  ??_I2C1_MasterIsNack 0020  
                                    msg_buf_reset@nmbs 0020  
                            __end_of_I2C1_DO_SEND_STOP 1146  
                            ??_rdBlkRegCompleteHandler 002A  
                                   I2C1_SetCallback@cb 0020  
                                  recv_msg_footer@nmbs 0039  
                                  ??_I2C1_MasterSetIrq 0020  
                                        _getBMP280Data 0632  
                handler_read_holding_registers@unit_id 0025  
                                            ?_send_msg 003E  
                                     readBMP280@regadd 0036  
                                    nmbs_crc_calc@data 0020  
    handle_write_single_register@nanomodbus$F3873@nmbs 0053  
                                     ?_recv_msg_header 0039  
                                            ?_vfprintf 0031  
                                     ?_recv_req_header 0040  
                                     ?_recv_msg_footer 0039  
                           __end_of_EUSART1_is_tx_done 116A  
                                        ?_I2C1_DO_IDLE 0076  
                                     ?_recv_res_header 0042  
                                        ?_I2C1_DO_RCEN 0076  
                                  _EUSART1_is_tx_ready 1257  
                                              _flag_Rx 0075  
                                              __ptext1 1281  
                                              __ptext2 140A  
                                              __ptext3 0A66  
                                              __ptext4 0CC7  
                                              __ptext5 10FC  
                                              __ptext6 0F03  
                                              __ptext7 0AAA  
                                              __ptext8 0863  
                                              __ptext9 058F  
                             _I2C1_MasterEnableRestart 1114  
                       ??_TMR1_DefaultInterruptHandler 0076  
                            __end_of_I2C1_MasterIsNack 1186  
                         ?_I2C1_SetAddressNackCallback 0026  
                                            _T1CONbits 020E  
                                       nmbs_crc_calc@i 002A  
                                       nmbs_crc_calc@j 002E  
                                        readBMP280@ret 0037  
                                _OSCILLATOR_Initialize 11D8  
                            __end_of_I2C1_MasterSetIrq 1123  
                             __end_of_I2C1_DO_TX_EMPTY 165C  
                                          ?_getADCData 0023  
                                   _EUSART1_Initialize 1689  
                             ??_PIN_MANAGER_Initialize 0020  
                            ?_TMR1_SetInterruptHandler 0020  
                             wr1RegCompleteHandler@ptr 0029  
                                           ?_I2C1_Open 0076  
                                              _sensor1 02CF  
                                              _sensor2 02A0  
                                              _sensor3 032D  
                                              _sensor4 0320  
                                     readBMP280coeff@i 003C  
                              __end_of_readBMP280coeff 14E3  
                        ??_EUSART1_DefaultErrorHandler 007C  
                                      ?_is_a_new_value 0028  
                             ?_I2C1_CallbackReturnStop 0029  
                                    ?_I2C1_WriteNBytes 0030  
                                     ?_TxDeviceDisable 0076  
                                 sendSensorInfo@F10964 02C8  
                                              main@err 0160  
                                              clrloop0 118D  
                  recv_write_single_coil_res@value_req 0051  
                  recv_write_single_coil_res@value_res 0055  
                    __end_of_I2C1_DO_SEND_RESTART_READ 113A  
                                 end_of_initialization 0070  
                           __end_of_I2C1_MasterSendAck 1136  
                              __end_of_I2C1_ReadNBytes 14C6  
                                    handle_req_fc@nmbs 006B  
                                           ??_m_memset 0026  
                                  _I2C1_MasterClearIrq 110B  
                                  ?_EUSART1_Initialize 0076  
                                   ??_I2C1_WriteNBytes 0033  
                                 DATAEE_WriteWord@bAdd 0024  
                                 ?_EUSART1_is_tx_ready 0076  
                                              fputc@fp 0022  
                                              init_ram 1192  
                           __end_of_I2C1_MasterStartRx 111D  
                          _EUSART1_OverrunErrorHandler 0269  
                               ?_rd1RegCompleteHandler 0029  
                                              initloop 1193  
                                     getBMP280Data@ret 0047  
                               _I2C1_DO_SEND_ADR_WRITE 1198  
                                              recv@ret 0038  
                                       ?_getBMP280Data 0039  
                              _recv_read_registers_res 06C5  
                                              send@ret 003A  
                      handle_read_registers@regs_bytes 00E2  
                                    _FVR_IsOutputReady 1174  
                         __end_of_I2C1_DO_SEND_RESTART 1142  
                              __end_of_I2C1_MasterRead 1166  
                              __end_of_I2C1_MasterOpen 1227  
                               ?_wr1RegCompleteHandler 0029  
                              __end_of_I2C1_MasterStop 111A  
                              __end_of_I2C1_Initialize 11D8  
                __end_of_EUSART1_SetRxInterruptHandler 11C7  
                        _EUSART1_SetRxInterruptHandler 11BF  
                                          _I2C1_Poller 11F4  
                                           ??_send_msg 0040  
                                    getADCData@channel 0027  
                            ?_I2C1_CallbackReturnReset 0029  
                        __end_of_I2C1_MasterDisableIrq 1101  
                                          _I2C1_Status 0120  
                                   ?_FVR_IsOutputReady 0076  
                        nmbs_server_create@address_rtu 0030  
                                    __end_of_vfpfcnvrt 0AAA  
                                     _UART_ClearBuffer 115E  
      __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F3032 1847  
              _NMBS_BROADCAST_ADDRESS@nanomodbus$F3032 1846  
                         handle_read_registers@address 00E0  
      __end_of_NMBS_BROADCAST_ADDRESS@nanomodbus$F2768 1848  
              _NMBS_BROADCAST_ADDRESS@nanomodbus$F2768 1847  
                                     ??_TxDeviceEnable 0020  
                                        _nmbs_crc_calc 0D1B  
                                getBMP280Data@Rxbuffer 003F  
                           sendSensorData24bits@F10979 02AD  
                                  _I2C1_MasterSendNack 112E  
                  __end_of_I2C1_SetAddressNackCallback 1208  
                          _I2C1_SetAddressNackCallback 11FE  
                                     ?_ADCC_Initialize 0076  
                                           ??_vfprintf 0036  
                                getBMP280Data@Txbuffer 0042  
                 __end_of_handle_write_single_register 15DB  
                         _handle_write_single_register 15B5  
                     __end_of_ADCC_GetSingleConversion 12E8  
                                 ?_I2C1_MasterClearIrq 0076  
                                       ??_I2C1_DO_IDLE 0020  
                                 ??_EUSART1_Initialize 0022  
                                       ??_I2C1_DO_RCEN 0020  
                   __end_of_I2C1_DO_SEND_RESTART_WRITE 113E  
                           _I2C1_DO_SEND_RESTART_WRITE 113A  
                                  ??_FVR_IsOutputReady 0020  
                      __end_of_rdBlkRegCompleteHandler 14AA  
                                 I2C1_WriteNBytes@data 0030  
                                         read_serial@c 002F  
                                 writeBMP280@pTxbuffer 0036  
                                     main@is_in_memory 00ED  
                        ??_I2C1_SetAddressNackCallback 002A  
                              _default_values_register 0B3C  
                                   _setBaudRateEUSART1 0754  
                      I2C1_SetDataCompleteCallback@ptr 0028  
                       I2C1_CallbackReturnReset@funPtr 0029  
                                 ?_I2C1_MasterSendNack 0076  
                                  EUSART1_Write@txData 0020  
                                         ??_InitBMP280 0039  
                             __end_of_DATAEE_WriteByte 1524  
                             __end_of_DATAEE_WriteWord 1360  
                                ??_EUSART1_is_tx_ready 0020  
                                  ?_setBaudRateEUSART1 0020  
          handler_read_holding_registers@registers_out 0024  
                            handle_read_registers@nmbs 005D  
                            handle_read_registers@regs 00A0  
                            __end_of_FVR_IsOutputReady 117A  
__end_of_handle_write_single_register@nanomodbus$F3873 0632  
      ??_handle_write_single_register@nanomodbus$F3873 0055  
       ?_handle_write_single_register@nanomodbus$F3873 0053  
        _handle_write_single_register@nanomodbus$F3873 058F  
                                          ?_readBMP280 0076  
                                  recv_res_header@nmbs 0042  
                           rdBlkRegCompleteHandler@ptr 0029  
    __end_of_handle_write_single_coil@nanomodbus$F3828 042C  
          ??_handle_write_single_coil@nanomodbus$F3828 005A  
           ?_handle_write_single_coil@nanomodbus$F3828 0058  
            _handle_write_single_coil@nanomodbus$F3828 033D  
                                         _EUSART1_Read 124A  
                        handle_read_registers@callback 005F  
                                       ?_nmbs_crc_calc 0020  
                                   _check_error_modbus 10FB  
                                ??_I2C1_MasterClearIrq 0020  
                      handler_read_input_registers@arg 0026  
                                      _msg_state_reset 1603  
                                          vfpfcnvrt@ap 002C  
                                          vfpfcnvrt@fp 0029  
                                       _I2C1_DO_RX_ACK 1146  
                                 ??_setBaudRateEUSART1 0024  
                                   __end_of_InitBMP280 1232  
                        ?_handle_write_single_register 0020  
                                       _TMR1_StopTimer 1105  
                       recv_write_single_coil_res@nmbs 004D  
                               ?_OSCILLATOR_Initialize 0076  
                                  ?_check_error_modbus 0076  
                             recv_res_header@exception 004B  
                   recv_req_header@first_byte_received 0042  
                      __end_of_I2C1_CallbackReturnStop 1103  
                                       __end_of_printf 1290  
                                    ?_nmbs_server_poll 006E  
                        __end_of_I2C1_MasterSendTxData 1180  
                                  start_initialization 001D  
                                          ??_I2C1_Open 0020  
                                        _msg_buf_reset 1212  
                  __end_of_handle_read_input_registers 12C3  
                          _handle_read_input_registers 12B2  
                                   ??_nmbs_server_poll 0070  
                                     ??_put_msg_header 002A  
                                ??_I2C1_MasterSendNack 0020  
                                     ?_readBMP280coeff 0038  
                           read_serial@byte_timeout_ms 0025  
        EUSART1_SetRxInterruptHandler@interruptHandler 0020  
                              DATAEE_ReadWord@low_byte 0029  
                                     ??_put_res_header 002E  
                                __end_of_EUSART1_Write 11EA  
                                     ?_I2C1_ReadNBytes 0030  
                                  getBMP280Data@F10963 0152  
                            ??_recv_read_registers_res 0053  
                                      main@actual_regs 015C  
                                      ??_getBMP280Data 003C  
                        handle_read_registers@quantity 00E5  
                                nmbs_server_create@ret 0036  
                        ??_handle_read_input_registers 006B  
                    recv_write_single_coil_res@address 004F  
                                 ??_check_error_modbus 0020  
                      handle_write_single_register@arg 0025  
                                  DATAEE_ReadByte@bAdd 0020  
                        handler_read_input_registers@i 002C  
                           recv_read_registers_res@err 005C  
                           recv_read_registers_res@reg 0057  
                             I2C1_SetBuffer@bufferSize 0022  
                                     ?_I2C1_MasterRead 0076  
                                     ?_I2C1_MasterOpen 0076  
                                     ?_I2C1_MasterStop 0076  
                                     ?_I2C1_Initialize 0076  
                            put_msg_header@data_length 0028  
                                          vfprintf@fmt 0033  
                              is_a_new_value@registers 0028  
                                     ??_PMD_Initialize 0020  
                               __end_of_I2C1_DO_RX_ACK 114A  
                                _EUSART1_RxDataHandler 16EF  
                              ??_I2C1_DO_SEND_ADR_READ 0020  
                                  nmbs_crc_calc@length 0022  
                       ?_EUSART1_SetRxInterruptHandler 0020  
                                  getSHTC3Data@pbuffer 003F  
                               __end_of_TMR1_StopTimer 1108  
                                  getBMP280Data@i_2696 0046  
                                          __pdataBANK4 024D  
                                          __pdataBANK5 02A0  
                                          __pdataBANK6 0320  
                                   is_a_new_value@nmbs 002C  
                             nmbs_create@platform_conf 002A  
                                _handle_read_registers 01E5  
                                             ??_printf 003B  
                                     I2C1_Open@address 0020  
                                       _eusart1RxCount 0071  
                            ??_default_values_register 003F  
                             _ADCC_GetSingleConversion 12D5  
                                       ?_msg_buf_reset 0020  
                                          __pbssCOMMON 0070  
                                 _I2C1_DO_SEND_RESTART 113E  
                    _EUSART1_RxDefaultInterruptHandler 016C  
                                            ___latbits 0002  
                                        __pcstackBANK0 0020  
                                        __pcstackBANK1 00A0  
                                        __pcstackBANK2 015C  
                                        __pcstackBANK3 01A0  
                                        __pcstackBANK4 0220  
                                        __pcstackBANK9 04A0  
                              readBMP280coeff@Txbuffer 003B  
                                        ??_read_serial 002B  
                   recv_write_single_register_res@nmbs 004D  
                          ??_I2C1_DO_SEND_RESTART_READ 0020  
                                  _eusart1PacketFinish 01A9  
                                 __end_of_I2C1_DO_IDLE 116F  
                     ??_EUSART1_SetFramingErrorHandler 0022  
                      ?_EUSART1_SetFramingErrorHandler 0020  
                                 __end_of_I2C1_DO_RCEN 118C  
                                   i1_UART_ClearBuffer 112A  
                        I2C1_SetAddressNackCallback@cb 0026  
                                  DATAEE_ReadWord@bAdd 0022  
                                            __pnvBANK2 016A  
                                            __pnvBANK3 01A7  
                                            __pnvBANK4 0267  
                                _rd2RegCompleteHandler 1324  
                                      ??_nmbs_crc_calc 0026  
                              __end_of_msg_state_reset 162F  
                                __end_of_fsmStateTable 1846  
                               _PIN_MANAGER_Initialize 15DB  
                                _wr2RegCompleteHandler 12FC  
                                        ??_nmbs_create 002C  
                              _EUSART1_is_tx_ready$765 0020  
                           ??_I2C1_MasterEnableRestart 0020  
                                  ?i1_UART_ClearBuffer 0076  
                             rd2RegCompleteHandler@ptr 0029  
                                       _I2C1_MasterFsm 156A  
                     __end_of_TMR1_SetInterruptHandler 11CF  
                               _NMBS_BROADCAST_ADDRESS 1848  
                      ADCC_GetSingleConversion@channel 0022  
                                            _coeff_reg 024D  
                                      ?_I2C1_DO_RX_ACK 0076  
                                            __ptext100 0BD6  
                                            __ptext101 1198  
                                            __ptext110 112E  
                                            __ptext102 119F  
                                            __ptext111 111A  
                                            __ptext103 116A  
                                            __ptext120 1725  
                                            __ptext112 1103  
                                            __ptext104 162F  
                                            __ptext121 1360  
                                            __ptext113 1101  
                                            __ptext105 1120  
                                            __ptext130 1524  
                                            __ptext122 1117  
                                            __ptext114 148E  
                                            __ptext106 1180  
                                            __ptext131 1264  
                                            __ptext123 1114  
                                            __ptext115 1338  
                                            __ptext107 117A  
                                            __ptext140 16EF  
                                            __ptext124 1111  
                                            __ptext116 1324  
                                            __ptext108 1132  
                                            __ptext141 1272  
                                            __ptext133 12E8  
                                            __ptext125 1375  
                                            __ptext117 1310  
                                            __ptext109 111D  
                                            __ptext142 1105  
                                            __ptext134 123D  
                                            __ptext126 10FF  
                                            __ptext118 12FC  
                                            __ptext143 10FD  
                                            __ptext135 112A  
                                            __ptext127 110E  
                                            __ptext119 11EA  
                                            __ptext136 16BA  
                                            __ptext128 110B  
                                            __ptext137 1126  
                                            __ptext129 1174  
                                            __ptext138 10FA  
                                            __ptext139 1108  
                                      ?_TMR1_StopTimer 0076  
                      __end_of_recv_read_registers_res 0754  
                          send_exception_msg@exception 0047  
                              _I2C1_MasterWaitForEvent 1152  
                                     _I2C1_MasterClose 110E  
                                       _I2C1_SetBuffer 1360  
                         ??_INTERRUPT_InterruptManager 007C  
                                     _I2C1_MasterStart 1111  
                                     _I2C1_MasterWrite 1156  
                                    writeBMP280@regadd 0035  
                                     ??_is_a_new_value 002E  
                                             _BAUD1CON 011F  
               __end_of_recv_write_single_register_res 0800  
                       _recv_write_single_register_res 07D8  
           __end_of_EUSART1_DefaultOverrunErrorHandler 112A  
                 ??_EUSART1_DefaultOverrunErrorHandler 0076  
                  ?_EUSART1_DefaultOverrunErrorHandler 0076  
                   _EUSART1_DefaultOverrunErrorHandler 1126  
                                ?_I2C1_DO_SEND_RESTART 0076  
                                 _EUSART1_ErrorHandler 0267  
                                         ??_getADCData 0025  
                                    ?_I2C1_DO_TX_EMPTY 0076  
                                     nmbs_crc_calc@crc 0030  
                              _EUSART1_SetErrorHandler 11A7  
                                 ??i1_UART_ClearBuffer 0076  
                     __end_of_I2C1_CallbackReturnReset 1105  
                             __end_of_UART_ClearBuffer 1162  
                                   ??_I2C1_DO_TX_EMPTY 002A  
                                   _EUSART1_is_tx_done 1166  
                              ??_rd1RegCompleteHandler 002A  
                              ?_I2C1_DO_SEND_ADR_WRITE 0076  
                            I2C1_MasterSendTxData@data 0020  
                             _handle_write_single_coil 0E9C  
                               EUSART1_RxDataHandler@t 007A  
                                  msg_state_reset@nmbs 0022  
                                    _adjustBMP280coeff 0F7D  
                              ??_wr1RegCompleteHandler 002A  
                                            get_1@nmbs 0020  
                                  writeBMP280@Txbuffer 0037  
                                            get_2@nmbs 0020  
                                     _I2C1_SetCallback 1725  
                      __end_of_default_values_register 0B89  
                                   put_msg_header@nmbs 0026  
              EUSART1_SetErrorHandler@interruptHandler 0020  
                                             _LATCbits 001A  
                                   ?_adjustBMP280coeff 0020  
                                  __end_of_read_serial 0863  
                                           _I2C1_DO_RX 0916  
                                           _I2C1_DO_TX 0BD6  
                                     handle_req_fc@err 006D  
                                  ?_EUSART1_is_tx_done 0076  
                                            clear_ram0 118C  
                                             _PIE3bits 0719  
                                             _PIE4bits 071A  
                                     _uart_expire_time 0074  
                                           _I2C1_Close 1375  
                                         ?_I2C1_Poller 0076  
                               __end_of_I2C1_MasterFsm 158F  
                         __end_of_I2C1_MasterGetRxData 1120  
                                sendSensorCoeff@F10969 02C0  
                                        ?_write_serial 0021  
                                             _PIR3bits 070F  
                                             _PIR4bits 0710  
                                             _RX1DTPPS 1ECB  
                               ?_EUSART1_RxDataHandler 0076  
                                   _I2C1_MasterSendAck 1132  
                      ??_handle_read_holding_registers 006B  
                                  ??_adjustBMP280coeff 0022  
                            _I2C1_DO_SEND_RESTART_READ 1136  
                                   __end_of_getADCData 12D5  
                                             _SSP1CON1 0190  
                                             _SSP1CON2 0191  
                               handle_read_registers@i 00E3  
                                             _TMR1_ISR 12E8  
                               __end_of_I2C1_SetBuffer 1375  
                                             _SSP1STAT 018F  
                               ?_handle_read_registers 005D  
                 __end_of_I2C1_SetDataCompleteCallback 11F4  
                         _I2C1_SetDataCompleteCallback 11EA  
                                   _I2C1_MasterStartRx 111A  
                                            _vfpfcnvrt 0A66  
                          ?_I2C1_DO_SEND_RESTART_WRITE 0076  
                                  __end_of_nmbs_create 0BD6  
                                    ??_TMR1_Initialize 0022  
                                  ?_I2C1_MasterSendAck 0076  
                                           _ADCON0bits 0111  
                            is_a_new_value@actual_regs 002A  
                                      ??_msg_buf_reset 0022  
                             ?_I2C1_DO_RX_NACK_RESTART 0076  
                                 ??_EUSART1_is_tx_done 0020  
                                  I2C1_ReadNBytes@data 0030  
                                  ?_I2C1_MasterStartRx 0076  
                         __end_of_I2C1_DO_ADDRESS_NACK 0829  
                             wr2RegCompleteHandler@ptr 0029  
                                DATAEE_WriteByte@bData 0022  
                                         send_msg@nmbs 003E  
                       __end_of_I2C1_DO_SEND_ADR_WRITE 119F  
                                        _I2C1_DO_RESET 116F  
                            __end_of_adjustBMP280coeff 1000  
                    recv_res_header@req_transaction_id 0046  
                        recv_write_single_coil_res@err 0057  
                                I2C1_Close@returnValue 0020  
                                            m_memset@c 0022  
                             ?_rdBlkRegCompleteHandler 0029  
                                            m_memset@p 0026  
                                            m_memset@s 0020  
                                    ?_DATAEE_WriteByte 0020  
                                  I2C1_SetCallback@idx 0025  
                                check_error_modbus@err 0076  
                                  I2C1_SetCallback@ptr 0022  
                                    ?_DATAEE_WriteWord 0024  
                                         ??_readBMP280 0034  
                                 ??_I2C1_MasterSendAck 0020  
                                        _handle_req_fc 0863  
                                EUSART1_Read@readValue 0020  
                               ?_rd2RegCompleteHandler 0029  
                                   ??_DATAEE_WriteByte 0023  
               handler_read_holding_registers@quantity 0022  
                                   ??_DATAEE_WriteWord 0028  
                         __end_of_I2C1_MasterOperation 13D6  
                               ?_wr2RegCompleteHandler 0029  
                                 ??_I2C1_MasterStartRx 0020  
                                       ??_write_serial 002B  
                                      ?_I2C1_MasterFsm 0076  
                                     ?_msg_state_reset 0022  
                                           vfprintf@ap 0035  
                                           vfprintf@fp 0031  
                            ??_I2C1_MasterWaitForEvent 0020  
                                        ?_getSHTC3Data 0034  
                                _I2C1_MasterDisableIrq 10FF  
                                   getSHTC3Data@result 0039  
                              ??_OSCILLATOR_Initialize 0020  
                                      ?_I2C1_SetBuffer 0020  
                                           ?_vfpfcnvrt 0029  
       handler_read_holding_registers@server_registers 002B  
                                   getBMP280Data@param 0043  
   handle_write_single_register@nanomodbus$F3873@value 0059  
                                            recv@count 0036  
                             _TMR1_SetInterruptHandler 11C7  
                               ??_I2C1_DO_SEND_RESTART 0020  
                                _TMR1_InterruptHandler 016A  
                            ??_EUSART1_SetErrorHandler 0022  
                  __end_of_EUSART1_DefaultErrorHandler 110B  
                          _EUSART1_DefaultErrorHandler 1108  
                                   __end_of_readBMP280 13F0  
                                            send@count 0033  
                          __end_of_EUSART1_is_tx_ready 1264  
                                       ?_I2C1_DO_RESET 0076  
                                             __ptext10 07D8  
                                             __ptext11 15B5  
                                             __ptext20 0E37  
                                             __ptext12 033D  
                                             __ptext21 0A22  
                                             __ptext13 0C24  
                                             __ptext30 1603  
                                             __ptext22 0002  
                                             __ptext14 0E9C  
                                             __ptext31 1473  
                                             __ptext23 1123  
                                             __ptext15 12B2  
                                             __ptext40 165C  
                                             __ptext32 0AF0  
                                             __ptext24 1257  
                                             __ptext16 12A1  
                                             __ptext41 13F0  
                                             __ptext33 17C9  
                                             __ptext25 1166  
                                             __ptext17 01E5  
                                             __ptext50 1503  
                                             __ptext42 1212  
                                             __ptext34 0829  
                                             __ptext26 11E1  
                                             __ptext18 1547  
                                             __ptext51 0C75  
                                             __ptext43 09DE  
                                             __ptext35 124A  
                                             __ptext27 06C5  
                                             __ptext19 0958  
                                             __ptext60 0F7D  
                                             __ptext52 0632  
                                             __ptext44 099A  
                                             __ptext36 0D1B  
                                             __ptext28 04E8  
                                             __ptext61 13A4  
                                             __ptext53 12C3  
                                             __ptext45 1792  
                                             __ptext37 089E  
                                             __ptext29 0DD5  
                                             __ptext70 11CF  
                                             __ptext62 10FB  
                                             __ptext54 12D5  
                                             __ptext46 0B89  
                                             __ptext38 1232  
                                             __ptext71 115A  
                                             __ptext63 115E  
                                             __ptext55 0B3C  
                                             __ptext47 042C  
                                             __ptext39 0D75  
                                             __ptext80 158F  
                                             __ptext72 1689  
                                             __ptext64 138C  
                                             __ptext56 14C6  
                                             __ptext48 0754  
                                             __ptext81 11FE  
                                             __ptext73 11BF  
                                             __ptext65 14E3  
                                             __ptext57 13D6  
                                             __ptext49 134C  
                                             __ptext90 116F  
                                             __ptext82 175B  
                                             __ptext74 11B7  
                                             __ptext66 11C7  
                                             __ptext58 14AA  
                                             __ptext91 114E  
                                             __ptext83 121C  
                                             __ptext75 11AF  
                                             __ptext67 1208  
                                             __ptext59 1162  
                                             __ptext92 114A  
                                             __ptext84 1156  
                                             __ptext76 11A7  
                                             __ptext68 15DB  
                                             __ptext93 1146  
                                             __ptext85 13BC  
                                             __ptext77 1458  
                                             __ptext69 11D8  
                                             __ptext94 1142  
                                             __ptext86 11F4  
                                             __ptext78 1227  
                                             __ptext95 113E  
                                             __ptext87 1152  
                                             __ptext79 1290  
                                             __ptext96 113A  
                                             __ptext88 156A  
                                             __ptext97 1136  
                                             __ptext89 0800  
                                             __ptext98 1186  
                                             __ptext99 0916  
                                         _SSP1CON1bits 0190  
                                         _SSP1CON2bits 0191  
                                          _read_serial 0829  
                                    ??_TMR1_StartTimer 0076  
                          DATAEE_WriteByte@GIEBitValue 0023  
                                             _m_memset 13A4  
                                       ?_handle_req_fc 006B  
                             _I2C1_CallbackReturnReset 1103  
                           setBaudRateEUSART1@baudRate 0020  
                                          ?_I2C1_DO_RX 0076  
                                          ?_I2C1_DO_TX 0076  
                                            put_1@data 0022  
                                            put_2@data 0022  
                recv_write_single_register_res@address 004F  
                                    ??_DATAEE_ReadByte 0022  
                                            put_1@nmbs 0020  
                          __end_of_I2C1_MasterClearIrq 110E  
                         __end_of_I2C1_DO_RX_NACK_STOP 114E  
                                          ?_I2C1_Close 0076  
                                            put_2@nmbs 0020  
                                    ??_DATAEE_ReadWord 0024  
                                        ??_writeBMP280 0035  
                                             _send_msg 0958  
                                           _RC1STAbits 011D  
       EUSART1_SetOverrunErrorHandler@interruptHandler 0020  
                                          _nmbs_create 0B89  
                                          get_1@result 0022  
                                       ??_getSHTC3Data 0036  
                                          get_2@result 0029  
                           ??_ADCC_GetSingleConversion 0022  
                                             int$flags 007E  
                      __end_of_I2C1_DO_RX_NACK_RESTART 1152  
                                      nmbs_create@nmbs 0028  
                             I2C1_MasterOperation@read 002E  
                                             _vfprintf 140A  
                         ??_recv_write_single_coil_res 0053  
                          write_serial@byte_timeout_ms 0025  
                   __end_of_INTERRUPT_InterruptManager 001B  
                           _INTERRUPT_InterruptManager 0004  
                                            printf@fmt 0039  
                                    ??_TMR1_WriteTimer 0078  
                                     read_serial@count 0023  
                        _handle_write_single_coil$2833 002B  
                                             main@nmbs 04A0  
                                   I2C1_ReadNBytes@len 0031  
                        __end_of_I2C1_DO_SEND_ADR_READ 11A7  
                          _EUSART1_FramingErrorHandler 01A7  
                                         _I2C1_DO_IDLE 116A  
                                  _EUSART1_Receive_ISR 16BA  
                __end_of_handle_read_holding_registers 12B2  
                        _handle_read_holding_registers 12A1  
                                         _I2C1_DO_RCEN 1186  
                    handle_read_holding_registers@nmbs 0069  
                          __end_of_I2C1_MasterSendNack 1132  
                           __end_of_send_exception_msg 156A  
                                           _INTCONbits 000B  
                                          _NVMCON1bits 081E  
                                DATAEE_WriteWord@bData 0026  
                                           _FVRCONbits 090C  
                       I2C1_SetAddressNackCallback@ptr 0028  
                                 _I2C1_MasterGetRxData 111D  
                                _I2C1_MasterSendTxData 117A  
                                             recv@nmbs 0034  
                                    ??_recv_msg_header 003C  
                                             intlevel1 0000  
                          handle_write_single_coil@arg 0024  
                                             send@nmbs 0031  
                                    ??_recv_req_header 0043  
                                    ??_recv_msg_footer 003B  
                    handler_read_holding_registers@arg 0026  
                             __end_of_I2C1_MasterClose 1111  
                                 ?_EUSART1_Receive_ISR 0076  
                       ??_handler_read_input_registers 0028  
                                    ??_recv_res_header 0044  
                              ?_PIN_MANAGER_Initialize 0076  
                             __end_of_I2C1_MasterStart 1114  
                             __end_of_I2C1_MasterWrite 115A  
                              I2C1_WriteNBytes@address 0033  
                           __end_of_nmbs_server_create 17C9  
                                __end_of_getBMP280Data 06C5  
               __end_of_EUSART1_SetOverrunErrorHandler 11BF  
                       _EUSART1_SetOverrunErrorHandler 11B7  
                                     ??_I2C1_DO_RX_ACK 0020  
                      write_serial@number_of_byte_send 002B  
                              _I2C1_CallbackReturnStop 1101  
                          nmbs_server_create@callbacks 0033  
                                     ??_TMR1_StopTimer 0076  
                                 _I2C1_DO_ADDRESS_NACK 0800  
                               ?_I2C1_MasterDisableIrq 0076  
                                     _I2C1_WriteNBytes 158F  
                                             printf@ap 003B  
       EUSART1_SetFramingErrorHandler@interruptHandler 0020  
                                    ??_TxDeviceDisable 0020  
                                          ??_vfpfcnvrt 002D  
                                  __end_of_writeBMP280 12A1  
                                   _eusart1RxLastError 0070  
                                        __pstringtext1 1826  
                                        __pstringtext2 1846  
                                        __pstringtext3 1847  
                                        __pstringtext4 1848  
                                        __pstringtext5 1800  
                                        __pstringtext6 0000  
                             __end_of_I2C1_SetCallback 175B  
                                       _FVR_Initialize 115A  
                             recv_read_registers_res@i 0059  
                           ??_handle_write_single_coil 0026  
                                           _SSP1DATPPS 1EC6  
                                           _SSP1CLKPPS 1EC5  
                                      ??_I2C1_DO_RESET 0020  
                                 _I2C1_MasterOperation 13BC  
                             handle_read_registers@err 00E7  
                                 __end_of_write_serial 0A66  
                                ?_I2C1_MasterGetRxData 0076  
                  handler_read_input_registers@address 0020  
                             ?_recv_read_registers_res 004D  
                                       read_serial@arg 0029  
                                       read_serial@buf 0021  
                                           _TX1STAbits 011E  
                                    ?_UART_ClearBuffer 0076  
                                      ??_handle_req_fc 006D  
                                ??_EUSART1_Receive_ISR 007C  
                       __end_of_PIN_MANAGER_Initialize 1603  
                                    ??_ADCC_Initialize 0020  
                                   ??_UART_ClearBuffer 0020  
                        __end_of_rd1RegCompleteHandler 1324  
                 handler_read_input_registers@quantity 0022  
                     ??_recv_write_single_register_res 0053  
                      ?_recv_write_single_register_res 004D  
                       __end_of_NMBS_BROADCAST_ADDRESS 1849  
                        __end_of_wr1RegCompleteHandler 134C  
                              ??_EUSART1_RxDataHandler 0078  
                                   put_res_header@nmbs 002A  
                  handler_read_input_registers@unit_id 0025  
                                      _TMR1_Initialize 14E3  
                                ?_I2C1_DO_ADDRESS_NACK 0076  
                              ??_handle_read_registers 0061  
                                __end_of_nmbs_crc_calc 0D75  
