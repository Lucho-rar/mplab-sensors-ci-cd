

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Mar 25 13:10:18 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	16F18425
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	idataBANK2,global,class=CODE,space=0,delta=2,noexec
     7                           	psect	idataBANK3,global,class=CODE,space=0,delta=2,noexec
     8                           	psect	idataBANK4,global,class=CODE,space=0,delta=2,noexec
     9                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    20                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,noexec
    21                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,noexec
    22                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1,noexec
    23                           	psect	inittext,global,class=CODE,space=0,delta=2
    24                           	psect	clrtext,global,class=CODE,space=0,delta=2
    25                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    28                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=1
    35                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,space=0,merge=1,inline,delta=2
    45                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,space=0,merge=1,inline,delta=2
    49                           	psect	text21,local,class=CODE,space=0,merge=1,inline,delta=2
    50                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,space=0,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,space=0,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,space=0,merge=1,inline,delta=2
    67                           	psect	text39,local,class=CODE,space=0,merge=1,inline,delta=2
    68                           	psect	text40,local,class=CODE,space=0,merge=1,inline,delta=2
    69                           	psect	text41,local,class=CODE,space=0,merge=1,inline,delta=2
    70                           	psect	text42,local,class=CODE,space=0,merge=1,inline,delta=2
    71                           	psect	text43,local,class=CODE,space=0,merge=1,inline,delta=2
    72                           	psect	text44,local,class=CODE,space=0,merge=1,inline,delta=2
    73                           	psect	text45,local,class=CODE,space=0,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,space=0,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,space=0,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,space=0,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,space=0,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,space=0,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,space=0,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,space=0,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,space=0,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,space=0,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,space=0,merge=1,inline,delta=2
    84                           	psect	text56,local,class=CODE,space=0,merge=1,inline,delta=2
    85                           	psect	text57,local,class=CODE,space=0,merge=1,inline,delta=2
    86                           	psect	text58,local,class=CODE,space=0,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,space=0,merge=1,inline,delta=2
    88                           	psect	text60,local,class=CODE,space=0,merge=1,inline,delta=2
    89                           	psect	text61,local,class=CODE,space=0,merge=1,inline,delta=2
    90                           	psect	text62,local,class=CODE,space=0,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,space=0,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,space=0,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,space=0,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,space=0,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,space=0,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,space=0,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,space=0,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,space=0,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,space=0,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,space=0,merge=1,delta=2,group=1
   101                           	psect	text73,local,class=CODE,space=0,merge=1,delta=2,group=1
   102                           	psect	text74,local,class=CODE,space=0,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,space=0,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,space=0,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,space=0,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,space=0,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,space=0,merge=1,delta=2,group=1
   108                           	psect	text80,local,class=CODE,space=0,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,space=0,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,space=0,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,space=0,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,space=0,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,space=0,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,space=0,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,space=0,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,space=0,merge=1,delta=2
   117                           	psect	text89,local,class=CODE,space=0,merge=1,delta=2
   118                           	psect	text90,local,class=CODE,space=0,merge=1,delta=2
   119                           	psect	text91,local,class=CODE,space=0,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,space=0,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,space=0,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,space=0,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,space=0,merge=1,delta=2
   124                           	psect	text96,local,class=CODE,space=0,merge=1,delta=2
   125                           	psect	text97,local,class=CODE,space=0,merge=1,delta=2
   126                           	psect	text98,local,class=CODE,space=0,merge=1,delta=2
   127                           	psect	text99,local,class=CODE,space=0,merge=1,delta=2
   128                           	psect	text100,local,class=CODE,space=0,merge=1,delta=2
   129                           	psect	text101,local,class=CODE,space=0,merge=1,delta=2
   130                           	psect	text102,local,class=CODE,space=0,merge=1,delta=2
   131                           	psect	intentry,global,class=CODE,space=0,delta=2
   132                           	psect	text104,local,class=CODE,space=0,merge=1,delta=2
   133                           	psect	text105,local,class=CODE,space=0,merge=1,delta=2
   134                           	psect	text106,local,class=CODE,space=0,merge=1,delta=2
   135                           	psect	text107,local,class=CODE,space=0,merge=1,delta=2
   136                           	psect	text108,local,class=CODE,space=0,merge=1,delta=2
   137                           	psect	text109,local,class=CODE,space=0,merge=1,delta=2
   138                           	psect	text110,local,class=CODE,space=0,merge=1,delta=2
   139                           	psect	text111,local,class=CODE,space=0,merge=1,delta=2
   140                           	psect	text112,local,class=CODE,space=0,merge=1,delta=2
   141                           	psect	text113,local,class=CODE,space=0,merge=1,delta=2
   142                           	psect	text114,local,class=CODE,space=0,merge=1,delta=2
   143                           	psect	text115,local,class=CODE,space=0,merge=1,delta=2
   144                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   145                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   146                           	dabs	1,0x7E,2
   147     0000                     
   148                           ; Generated 22/01/2025 GMT
   149                           ; 
   150                           ; Copyright © 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
   151                           ; All rights reserved.
   152                           ; 
   153                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   154                           ; 
   155                           ; Redistribution and use in source and binary forms, with or without modification, are
   156                           ; permitted provided that the following conditions are met:
   157                           ; 
   158                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   159                           ;        conditions and the following disclaimer.
   160                           ; 
   161                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   162                           ;        of conditions and the following disclaimer in the documentation and/or other
   163                           ;        materials provided with the distribution. Publication is not required when
   164                           ;        this file is used in an embedded application.
   165                           ; 
   166                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   167                           ;        software without specific prior written permission.
   168                           ; 
   169                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   170                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   171                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   172                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   173                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   174                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   175                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   176                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   177                           ; 
   178                           ; 
   179                           ; Code-generator required, PIC16F18425 Definitions
   180                           ; 
   181                           ; SFR Addresses
   182     0008                     bsr             equ	8
   183     0005                     fsr0h           equ	5
   184     0004                     fsr0l           equ	4
   185     0007                     fsr1h           equ	7
   186     0006                     fsr1l           equ	6
   187     0000                     indf            equ	0
   188     0000                     indf0           equ	0
   189     0001                     indf1           equ	1
   190     000B                     intcon          equ	11
   191     0002                     pc              equ	2
   192     0002                     pcl             equ	2
   193     000A                     pclath          equ	10
   194     0003                     status          equ	3
   195     0009                     wreg            equ	9
   196     0000                     INDF0           equ	0	;# 
   197     0001                     INDF1           equ	1	;# 
   198     0002                     PCL             equ	2	;# 
   199     0003                     STATUS          equ	3	;# 
   200     0004                     FSR0L           equ	4	;# 
   201     0005                     FSR0H           equ	5	;# 
   202     0006                     FSR1L           equ	6	;# 
   203     0007                     FSR1H           equ	7	;# 
   204     0008                     BSR             equ	8	;# 
   205     0009                     WREG            equ	9	;# 
   206     000A                     PCLATH          equ	10	;# 
   207     000B                     INTCON          equ	11	;# 
   208     000C                     PORTA           equ	12	;# 
   209     000E                     PORTC           equ	14	;# 
   210     0012                     TRISA           equ	18	;# 
   211     0014                     TRISC           equ	20	;# 
   212     0018                     LATA            equ	24	;# 
   213     001A                     LATC            equ	26	;# 
   214     008C                     ADLTH           equ	140	;# 
   215     008C                     ADLTHL          equ	140	;# 
   216     008D                     ADLTHH          equ	141	;# 
   217     008E                     ADUTH           equ	142	;# 
   218     008E                     ADUTHL          equ	142	;# 
   219     008F                     ADUTHH          equ	143	;# 
   220     0090                     ADERR           equ	144	;# 
   221     0090                     ADERRL          equ	144	;# 
   222     0091                     ADERRH          equ	145	;# 
   223     0092                     ADSTPT          equ	146	;# 
   224     0092                     ADSTPTL         equ	146	;# 
   225     0093                     ADSTPTH         equ	147	;# 
   226     0094                     ADFLTR          equ	148	;# 
   227     0094                     ADFLTRL         equ	148	;# 
   228     0095                     ADFLTRH         equ	149	;# 
   229     0096                     ADACC           equ	150	;# 
   230     0096                     ADACCL          equ	150	;# 
   231     0097                     ADACCH          equ	151	;# 
   232     0098                     ADACCU          equ	152	;# 
   233     0099                     ADCNT           equ	153	;# 
   234     009A                     ADRPT           equ	154	;# 
   235     009B                     ADPREV          equ	155	;# 
   236     009B                     ADPREVL         equ	155	;# 
   237     009C                     ADPREVH         equ	156	;# 
   238     009D                     ADRES           equ	157	;# 
   239     009D                     ADRESL          equ	157	;# 
   240     009E                     ADRESH          equ	158	;# 
   241     009F                     ADPCH           equ	159	;# 
   242     010C                     ADACQ           equ	268	;# 
   243     010C                     ADACQL          equ	268	;# 
   244     010D                     ADACQH          equ	269	;# 
   245     010E                     ADCAP           equ	270	;# 
   246     010F                     ADPRE           equ	271	;# 
   247     010F                     ADPREL          equ	271	;# 
   248     0110                     ADPREH          equ	272	;# 
   249     0111                     ADCON0          equ	273	;# 
   250     0112                     ADCON1          equ	274	;# 
   251     0113                     ADCON2          equ	275	;# 
   252     0114                     ADCON3          equ	276	;# 
   253     0115                     ADSTAT          equ	277	;# 
   254     0116                     ADREF           equ	278	;# 
   255     0117                     ADACT           equ	279	;# 
   256     0118                     ADCLK           equ	280	;# 
   257     0119                     RC1REG          equ	281	;# 
   258     0119                     RCREG           equ	281	;# 
   259     0119                     RCREG1          equ	281	;# 
   260     011A                     TX1REG          equ	282	;# 
   261     011A                     TXREG1          equ	282	;# 
   262     011A                     TXREG           equ	282	;# 
   263     011B                     SP1BRG          equ	283	;# 
   264     011B                     SPBRG           equ	283	;# 
   265     011B                     SP1BRGL         equ	283	;# 
   266     011B                     SPBRG1          equ	283	;# 
   267     011B                     SPBRGL          equ	283	;# 
   268     011C                     SP1BRGH         equ	284	;# 
   269     011C                     SPBRGH          equ	284	;# 
   270     011C                     SPBRGH1         equ	284	;# 
   271     011D                     RC1STA          equ	285	;# 
   272     011D                     RCSTA1          equ	285	;# 
   273     011D                     RCSTA           equ	285	;# 
   274     011E                     TX1STA          equ	286	;# 
   275     011E                     TXSTA1          equ	286	;# 
   276     011E                     TXSTA           equ	286	;# 
   277     011F                     BAUD1CON        equ	287	;# 
   278     011F                     BAUDCON1        equ	287	;# 
   279     011F                     BAUDCTL1        equ	287	;# 
   280     011F                     BAUDCON         equ	287	;# 
   281     011F                     BAUDCTL         equ	287	;# 
   282     018C                     SSP1BUF         equ	396	;# 
   283     018D                     SSP1ADD         equ	397	;# 
   284     018E                     SSP1MSK         equ	398	;# 
   285     018F                     SSP1STAT        equ	399	;# 
   286     0190                     SSP1CON1        equ	400	;# 
   287     0191                     SSP1CON2        equ	401	;# 
   288     0192                     SSP1CON3        equ	402	;# 
   289     0196                     SSP2BUF         equ	406	;# 
   290     0197                     SSP2ADD         equ	407	;# 
   291     0198                     SSP2MSK         equ	408	;# 
   292     0199                     SSP2STAT        equ	409	;# 
   293     019A                     SSP2CON1        equ	410	;# 
   294     019B                     SSP2CON2        equ	411	;# 
   295     019C                     SSP2CON3        equ	412	;# 
   296     020C                     TMR1            equ	524	;# 
   297     020C                     TMR1L           equ	524	;# 
   298     020D                     TMR1H           equ	525	;# 
   299     020E                     T1CON           equ	526	;# 
   300     020E                     TMR1CON         equ	526	;# 
   301     020F                     T1GCON          equ	527	;# 
   302     020F                     TMR1GCON        equ	527	;# 
   303     0210                     T1GATE          equ	528	;# 
   304     0210                     TMR1GATE        equ	528	;# 
   305     0211                     T1CLK           equ	529	;# 
   306     0211                     TMR1CLK         equ	529	;# 
   307     0211                     PR1             equ	529	;# 
   308     0212                     TMR3            equ	530	;# 
   309     0212                     TMR3L           equ	530	;# 
   310     0213                     TMR3H           equ	531	;# 
   311     0214                     T3CON           equ	532	;# 
   312     0214                     TMR3CON         equ	532	;# 
   313     0215                     T3GCON          equ	533	;# 
   314     0215                     TMR3GCON        equ	533	;# 
   315     0216                     T3GATE          equ	534	;# 
   316     0216                     TMR3GATE        equ	534	;# 
   317     0217                     T3CLK           equ	535	;# 
   318     0217                     TMR3CLK         equ	535	;# 
   319     0217                     PR3             equ	535	;# 
   320     0218                     TMR5            equ	536	;# 
   321     0218                     TMR5L           equ	536	;# 
   322     0219                     TMR5H           equ	537	;# 
   323     021A                     T5CON           equ	538	;# 
   324     021A                     TMR5CON         equ	538	;# 
   325     021B                     T5GCON          equ	539	;# 
   326     021B                     TMR5GCON        equ	539	;# 
   327     021C                     T5GATE          equ	540	;# 
   328     021C                     TMR5GATE        equ	540	;# 
   329     021D                     T5CLK           equ	541	;# 
   330     021D                     TMR5CLK         equ	541	;# 
   331     021D                     PR5             equ	541	;# 
   332     021E                     CCPTMRS0        equ	542	;# 
   333     021F                     CCPTMRS1        equ	543	;# 
   334     028C                     T2TMR           equ	652	;# 
   335     028C                     TMR2            equ	652	;# 
   336     028D                     T2PR            equ	653	;# 
   337     028D                     PR2             equ	653	;# 
   338     028E                     T2CON           equ	654	;# 
   339     028F                     T2HLT           equ	655	;# 
   340     0290                     T2CLKCON        equ	656	;# 
   341     0291                     T2RST           equ	657	;# 
   342     0292                     T4TMR           equ	658	;# 
   343     0292                     TMR4            equ	658	;# 
   344     0293                     T4PR            equ	659	;# 
   345     0293                     PR4             equ	659	;# 
   346     0294                     T4CON           equ	660	;# 
   347     0295                     T4HLT           equ	661	;# 
   348     0296                     T4CLKCON        equ	662	;# 
   349     0297                     T4RST           equ	663	;# 
   350     0298                     T6TMR           equ	664	;# 
   351     0298                     TMR6            equ	664	;# 
   352     0299                     T6PR            equ	665	;# 
   353     0299                     PR6             equ	665	;# 
   354     029A                     T6CON           equ	666	;# 
   355     029B                     T6HLT           equ	667	;# 
   356     029C                     T6CLKCON        equ	668	;# 
   357     029D                     T6RST           equ	669	;# 
   358     029F                     ADCPCON0        equ	671	;# 
   359     030C                     CCPR1           equ	780	;# 
   360     030C                     CCPR1L          equ	780	;# 
   361     030D                     CCPR1H          equ	781	;# 
   362     030E                     CCP1CON         equ	782	;# 
   363     030F                     CCP1CAP         equ	783	;# 
   364     0310                     CCPR2           equ	784	;# 
   365     0310                     CCPR2L          equ	784	;# 
   366     0311                     CCPR2H          equ	785	;# 
   367     0312                     CCP2CON         equ	786	;# 
   368     0313                     CCP2CAP         equ	787	;# 
   369     0314                     CCPR3           equ	788	;# 
   370     0314                     CCPR3L          equ	788	;# 
   371     0315                     CCPR3H          equ	789	;# 
   372     0316                     CCP3CON         equ	790	;# 
   373     0317                     CCP3CAP         equ	791	;# 
   374     0318                     CCPR4           equ	792	;# 
   375     0318                     CCPR4L          equ	792	;# 
   376     0319                     CCPR4H          equ	793	;# 
   377     031A                     CCP4CON         equ	794	;# 
   378     031B                     CCP4CAP         equ	795	;# 
   379     038C                     PWM6DC          equ	908	;# 
   380     038C                     PWM6DCL         equ	908	;# 
   381     038D                     PWM6DCH         equ	909	;# 
   382     038E                     PWM6CON         equ	910	;# 
   383     0390                     PWM7DC          equ	912	;# 
   384     0390                     PWM7DCL         equ	912	;# 
   385     0391                     PWM7DCH         equ	913	;# 
   386     0392                     PWM7CON         equ	914	;# 
   387     048C                     SMT1TMR         equ	1164	;# 
   388     048C                     SMT1TMRL        equ	1164	;# 
   389     048D                     SMT1TMRH        equ	1165	;# 
   390     048E                     SMT1TMRU        equ	1166	;# 
   391     048F                     SMT1CPR         equ	1167	;# 
   392     048F                     SMT1CPRL        equ	1167	;# 
   393     0490                     SMT1CPRH        equ	1168	;# 
   394     0491                     SMT1CPRU        equ	1169	;# 
   395     0492                     SMT1CPW         equ	1170	;# 
   396     0492                     SMT1CPWL        equ	1170	;# 
   397     0493                     SMT1CPWH        equ	1171	;# 
   398     0494                     SMT1CPWU        equ	1172	;# 
   399     0495                     SMT1PR          equ	1173	;# 
   400     0495                     SMT1PRL         equ	1173	;# 
   401     0496                     SMT1PRH         equ	1174	;# 
   402     0497                     SMT1PRU         equ	1175	;# 
   403     0498                     SMT1CON0        equ	1176	;# 
   404     0499                     SMT1CON1        equ	1177	;# 
   405     049A                     SMT1STAT        equ	1178	;# 
   406     049B                     SMT1CLK         equ	1179	;# 
   407     049C                     SMT1SIG         equ	1180	;# 
   408     049D                     SMT1WIN         equ	1181	;# 
   409     058C                     NCO1ACC         equ	1420	;# 
   410     058C                     NCO1ACCL        equ	1420	;# 
   411     058D                     NCO1ACCH        equ	1421	;# 
   412     058E                     NCO1ACCU        equ	1422	;# 
   413     058F                     NCO1INC         equ	1423	;# 
   414     058F                     NCO1INCL        equ	1423	;# 
   415     0590                     NCO1INCH        equ	1424	;# 
   416     0591                     NCO1INCU        equ	1425	;# 
   417     0592                     NCO1CON         equ	1426	;# 
   418     0593                     NCO1CLK         equ	1427	;# 
   419     059C                     TMR0L           equ	1436	;# 
   420     059C                     TMR0            equ	1436	;# 
   421     059D                     TMR0H           equ	1437	;# 
   422     059D                     PR0             equ	1437	;# 
   423     059E                     T0CON0          equ	1438	;# 
   424     059F                     T0CON1          equ	1439	;# 
   425     060C                     CWG1CLK         equ	1548	;# 
   426     060C                     CWG1CLKCON      equ	1548	;# 
   427     060D                     CWG1ISM         equ	1549	;# 
   428     060D                     CWG1DAT         equ	1549	;# 
   429     060E                     CWG1DBR         equ	1550	;# 
   430     060F                     CWG1DBF         equ	1551	;# 
   431     0610                     CWG1CON0        equ	1552	;# 
   432     0611                     CWG1CON1        equ	1553	;# 
   433     0612                     CWG1AS0         equ	1554	;# 
   434     0613                     CWG1AS1         equ	1555	;# 
   435     0614                     CWG1STR         equ	1556	;# 
   436     0616                     CWG2CLK         equ	1558	;# 
   437     0616                     CWG2CLKCON      equ	1558	;# 
   438     0617                     CWG2ISM         equ	1559	;# 
   439     0617                     CWG2DAT         equ	1559	;# 
   440     0618                     CWG2DBR         equ	1560	;# 
   441     0619                     CWG2DBF         equ	1561	;# 
   442     061A                     CWG2CON0        equ	1562	;# 
   443     061B                     CWG2CON1        equ	1563	;# 
   444     061C                     CWG2AS0         equ	1564	;# 
   445     061D                     CWG2AS1         equ	1565	;# 
   446     061E                     CWG2STR         equ	1566	;# 
   447     070C                     PIR0            equ	1804	;# 
   448     070D                     PIR1            equ	1805	;# 
   449     070E                     PIR2            equ	1806	;# 
   450     070F                     PIR3            equ	1807	;# 
   451     0710                     PIR4            equ	1808	;# 
   452     0711                     PIR5            equ	1809	;# 
   453     0712                     PIR6            equ	1810	;# 
   454     0713                     PIR7            equ	1811	;# 
   455     0714                     PIR8            equ	1812	;# 
   456     0716                     PIE0            equ	1814	;# 
   457     0717                     PIE1            equ	1815	;# 
   458     0718                     PIE2            equ	1816	;# 
   459     0719                     PIE3            equ	1817	;# 
   460     071A                     PIE4            equ	1818	;# 
   461     071B                     PIE5            equ	1819	;# 
   462     071C                     PIE6            equ	1820	;# 
   463     071D                     PIE7            equ	1821	;# 
   464     071E                     PIE8            equ	1822	;# 
   465     0796                     PMD0            equ	1942	;# 
   466     0797                     PMD1            equ	1943	;# 
   467     0798                     PMD2            equ	1944	;# 
   468     0799                     PMD3            equ	1945	;# 
   469     079A                     PMD4            equ	1946	;# 
   470     079B                     PMD5            equ	1947	;# 
   471     079C                     PMD6            equ	1948	;# 
   472     079D                     PMD7            equ	1949	;# 
   473     080C                     WDTCON0         equ	2060	;# 
   474     080D                     WDTCON1         equ	2061	;# 
   475     080E                     WDTPSL          equ	2062	;# 
   476     080F                     WDTPSH          equ	2063	;# 
   477     0810                     WDTTMR          equ	2064	;# 
   478     0811                     BORCON          equ	2065	;# 
   479     0812                     VREGCON         equ	2066	;# 
   480     0813                     PCON0           equ	2067	;# 
   481     0814                     PCON1           equ	2068	;# 
   482     081A                     NVMADR          equ	2074	;# 
   483     081A                     NVMADRL         equ	2074	;# 
   484     081B                     NVMADRH         equ	2075	;# 
   485     081C                     NVMDAT          equ	2076	;# 
   486     081C                     NVMDATL         equ	2076	;# 
   487     081D                     NVMDATH         equ	2077	;# 
   488     081E                     NVMCON1         equ	2078	;# 
   489     081F                     NVMCON2         equ	2079	;# 
   490     088C                     CPUDOZE         equ	2188	;# 
   491     088D                     OSCCON1         equ	2189	;# 
   492     088E                     OSCCON2         equ	2190	;# 
   493     088F                     OSCCON3         equ	2191	;# 
   494     0890                     OSCSTAT         equ	2192	;# 
   495     0891                     OSCEN           equ	2193	;# 
   496     0892                     OSCTUNE         equ	2194	;# 
   497     0893                     OSCFRQ          equ	2195	;# 
   498     0895                     CLKRCON         equ	2197	;# 
   499     0896                     CLKRCLK         equ	2198	;# 
   500     0897                     MD1CON0         equ	2199	;# 
   501     0898                     MD1CON1         equ	2200	;# 
   502     0899                     MD1SRC          equ	2201	;# 
   503     089A                     MD1CARL         equ	2202	;# 
   504     089B                     MD1CARH         equ	2203	;# 
   505     090C                     FVRCON          equ	2316	;# 
   506     090E                     DAC1CON0        equ	2318	;# 
   507     090F                     DAC1CON1        equ	2319	;# 
   508     091F                     ZCDCON          equ	2335	;# 
   509     098F                     CMOUT           equ	2447	;# 
   510     098F                     CMSTAT          equ	2447	;# 
   511     0990                     CM1CON0         equ	2448	;# 
   512     0991                     CM1CON1         equ	2449	;# 
   513     0992                     CM1NCH          equ	2450	;# 
   514     0993                     CM1PCH          equ	2451	;# 
   515     0994                     CM2CON0         equ	2452	;# 
   516     0995                     CM2CON1         equ	2453	;# 
   517     0996                     CM2NCH          equ	2454	;# 
   518     0997                     CM2PCH          equ	2455	;# 
   519     1E0F                     CLCDATA         equ	7695	;# 
   520     1E10                     CLC1CON         equ	7696	;# 
   521     1E11                     CLC1POL         equ	7697	;# 
   522     1E12                     CLC1SEL0        equ	7698	;# 
   523     1E13                     CLC1SEL1        equ	7699	;# 
   524     1E14                     CLC1SEL2        equ	7700	;# 
   525     1E15                     CLC1SEL3        equ	7701	;# 
   526     1E16                     CLC1GLS0        equ	7702	;# 
   527     1E17                     CLC1GLS1        equ	7703	;# 
   528     1E18                     CLC1GLS2        equ	7704	;# 
   529     1E19                     CLC1GLS3        equ	7705	;# 
   530     1E1A                     CLC2CON         equ	7706	;# 
   531     1E1B                     CLC2POL         equ	7707	;# 
   532     1E1C                     CLC2SEL0        equ	7708	;# 
   533     1E1D                     CLC2SEL1        equ	7709	;# 
   534     1E1E                     CLC2SEL2        equ	7710	;# 
   535     1E1F                     CLC2SEL3        equ	7711	;# 
   536     1E20                     CLC2GLS0        equ	7712	;# 
   537     1E21                     CLC2GLS1        equ	7713	;# 
   538     1E22                     CLC2GLS2        equ	7714	;# 
   539     1E23                     CLC2GLS3        equ	7715	;# 
   540     1E24                     CLC3CON         equ	7716	;# 
   541     1E25                     CLC3POL         equ	7717	;# 
   542     1E26                     CLC3SEL0        equ	7718	;# 
   543     1E27                     CLC3SEL1        equ	7719	;# 
   544     1E28                     CLC3SEL2        equ	7720	;# 
   545     1E29                     CLC3SEL3        equ	7721	;# 
   546     1E2A                     CLC3GLS0        equ	7722	;# 
   547     1E2B                     CLC3GLS1        equ	7723	;# 
   548     1E2C                     CLC3GLS2        equ	7724	;# 
   549     1E2D                     CLC3GLS3        equ	7725	;# 
   550     1E2E                     CLC4CON         equ	7726	;# 
   551     1E2F                     CLC4POL         equ	7727	;# 
   552     1E30                     CLC4SEL0        equ	7728	;# 
   553     1E31                     CLC4SEL1        equ	7729	;# 
   554     1E32                     CLC4SEL2        equ	7730	;# 
   555     1E33                     CLC4SEL3        equ	7731	;# 
   556     1E34                     CLC4GLS0        equ	7732	;# 
   557     1E35                     CLC4GLS1        equ	7733	;# 
   558     1E36                     CLC4GLS2        equ	7734	;# 
   559     1E37                     CLC4GLS3        equ	7735	;# 
   560     1E8F                     PPSLOCK         equ	7823	;# 
   561     1E90                     INTPPS          equ	7824	;# 
   562     1E91                     T0CKIPPS        equ	7825	;# 
   563     1E92                     T1CKIPPS        equ	7826	;# 
   564     1E93                     T1GPPS          equ	7827	;# 
   565     1E94                     T3CKIPPS        equ	7828	;# 
   566     1E95                     T3GPPS          equ	7829	;# 
   567     1E96                     T5CKIPPS        equ	7830	;# 
   568     1E97                     T5GPPS          equ	7831	;# 
   569     1E9C                     T2INPPS         equ	7836	;# 
   570     1E9D                     T4INPPS         equ	7837	;# 
   571     1E9E                     T6INPPS         equ	7838	;# 
   572     1EA1                     CCP1PPS         equ	7841	;# 
   573     1EA2                     CCP2PPS         equ	7842	;# 
   574     1EA3                     CCP3PPS         equ	7843	;# 
   575     1EA4                     CCP4PPS         equ	7844	;# 
   576     1EA9                     SMT1WINPPS      equ	7849	;# 
   577     1EAA                     SMT1SIGPPS      equ	7850	;# 
   578     1EB1                     CWG1PPS         equ	7857	;# 
   579     1EB2                     CWG2PPS         equ	7858	;# 
   580     1EB8                     MDCARLPPS       equ	7864	;# 
   581     1EB9                     MDCARHPPS       equ	7865	;# 
   582     1EBA                     MDSRCPPS        equ	7866	;# 
   583     1EBB                     CLCIN0PPS       equ	7867	;# 
   584     1EBC                     CLCIN1PPS       equ	7868	;# 
   585     1EBD                     CLCIN2PPS       equ	7869	;# 
   586     1EBE                     CLCIN3PPS       equ	7870	;# 
   587     1EC3                     ADACTPPS        equ	7875	;# 
   588     1EC5                     SSP1CLKPPS      equ	7877	;# 
   589     1EC6                     SSP1DATPPS      equ	7878	;# 
   590     1EC7                     SSP1SSPPS       equ	7879	;# 
   591     1EC8                     SSP2CLKPPS      equ	7880	;# 
   592     1EC9                     SSP2DATPPS      equ	7881	;# 
   593     1ECA                     SSP2SSPPS       equ	7882	;# 
   594     1ECB                     RX1PPS          equ	7883	;# 
   595     1ECC                     CK1PPS          equ	7884	;# 
   596     1F10                     RA0PPS          equ	7952	;# 
   597     1F11                     RA1PPS          equ	7953	;# 
   598     1F12                     RA2PPS          equ	7954	;# 
   599     1F14                     RA4PPS          equ	7956	;# 
   600     1F15                     RA5PPS          equ	7957	;# 
   601     1F20                     RC0PPS          equ	7968	;# 
   602     1F21                     RC1PPS          equ	7969	;# 
   603     1F22                     RC2PPS          equ	7970	;# 
   604     1F23                     RC3PPS          equ	7971	;# 
   605     1F24                     RC4PPS          equ	7972	;# 
   606     1F25                     RC5PPS          equ	7973	;# 
   607     1F38                     ANSELA          equ	7992	;# 
   608     1F39                     WPUA            equ	7993	;# 
   609     1F3A                     ODCONA          equ	7994	;# 
   610     1F3B                     SLRCONA         equ	7995	;# 
   611     1F3C                     INLVLA          equ	7996	;# 
   612     1F3D                     IOCAP           equ	7997	;# 
   613     1F3E                     IOCAN           equ	7998	;# 
   614     1F3F                     IOCAF           equ	7999	;# 
   615     1F4E                     ANSELC          equ	8014	;# 
   616     1F4F                     WPUC            equ	8015	;# 
   617     1F50                     ODCONC          equ	8016	;# 
   618     1F51                     SLRCONC         equ	8017	;# 
   619     1F52                     INLVLC          equ	8018	;# 
   620     1F53                     IOCCP           equ	8019	;# 
   621     1F54                     IOCCN           equ	8020	;# 
   622     1F55                     IOCCF           equ	8021	;# 
   623     1FE4                     STATUS_SHAD     equ	8164	;# 
   624     1FE5                     WREG_SHAD       equ	8165	;# 
   625     1FE6                     BSR_SHAD        equ	8166	;# 
   626     1FE7                     PCLATH_SHAD     equ	8167	;# 
   627     1FE8                     FSR0_SHAD       equ	8168	;# 
   628     1FE8                     FSR0L_SHAD      equ	8168	;# 
   629     1FE9                     FSR0H_SHAD      equ	8169	;# 
   630     1FEA                     FSR1L_SHAD      equ	8170	;# 
   631     1FEB                     FSR1H_SHAD      equ	8171	;# 
   632     1FED                     STKPTR          equ	8173	;# 
   633     1FEE                     TOSL            equ	8174	;# 
   634     1FEF                     TOSH            equ	8175	;# 
   635     0000                     INDF0           equ	0	;# 
   636     0001                     INDF1           equ	1	;# 
   637     0002                     PCL             equ	2	;# 
   638     0003                     STATUS          equ	3	;# 
   639     0004                     FSR0L           equ	4	;# 
   640     0005                     FSR0H           equ	5	;# 
   641     0006                     FSR1L           equ	6	;# 
   642     0007                     FSR1H           equ	7	;# 
   643     0008                     BSR             equ	8	;# 
   644     0009                     WREG            equ	9	;# 
   645     000A                     PCLATH          equ	10	;# 
   646     000B                     INTCON          equ	11	;# 
   647     000C                     PORTA           equ	12	;# 
   648     000E                     PORTC           equ	14	;# 
   649     0012                     TRISA           equ	18	;# 
   650     0014                     TRISC           equ	20	;# 
   651     0018                     LATA            equ	24	;# 
   652     001A                     LATC            equ	26	;# 
   653     008C                     ADLTH           equ	140	;# 
   654     008C                     ADLTHL          equ	140	;# 
   655     008D                     ADLTHH          equ	141	;# 
   656     008E                     ADUTH           equ	142	;# 
   657     008E                     ADUTHL          equ	142	;# 
   658     008F                     ADUTHH          equ	143	;# 
   659     0090                     ADERR           equ	144	;# 
   660     0090                     ADERRL          equ	144	;# 
   661     0091                     ADERRH          equ	145	;# 
   662     0092                     ADSTPT          equ	146	;# 
   663     0092                     ADSTPTL         equ	146	;# 
   664     0093                     ADSTPTH         equ	147	;# 
   665     0094                     ADFLTR          equ	148	;# 
   666     0094                     ADFLTRL         equ	148	;# 
   667     0095                     ADFLTRH         equ	149	;# 
   668     0096                     ADACC           equ	150	;# 
   669     0096                     ADACCL          equ	150	;# 
   670     0097                     ADACCH          equ	151	;# 
   671     0098                     ADACCU          equ	152	;# 
   672     0099                     ADCNT           equ	153	;# 
   673     009A                     ADRPT           equ	154	;# 
   674     009B                     ADPREV          equ	155	;# 
   675     009B                     ADPREVL         equ	155	;# 
   676     009C                     ADPREVH         equ	156	;# 
   677     009D                     ADRES           equ	157	;# 
   678     009D                     ADRESL          equ	157	;# 
   679     009E                     ADRESH          equ	158	;# 
   680     009F                     ADPCH           equ	159	;# 
   681     010C                     ADACQ           equ	268	;# 
   682     010C                     ADACQL          equ	268	;# 
   683     010D                     ADACQH          equ	269	;# 
   684     010E                     ADCAP           equ	270	;# 
   685     010F                     ADPRE           equ	271	;# 
   686     010F                     ADPREL          equ	271	;# 
   687     0110                     ADPREH          equ	272	;# 
   688     0111                     ADCON0          equ	273	;# 
   689     0112                     ADCON1          equ	274	;# 
   690     0113                     ADCON2          equ	275	;# 
   691     0114                     ADCON3          equ	276	;# 
   692     0115                     ADSTAT          equ	277	;# 
   693     0116                     ADREF           equ	278	;# 
   694     0117                     ADACT           equ	279	;# 
   695     0118                     ADCLK           equ	280	;# 
   696     0119                     RC1REG          equ	281	;# 
   697     0119                     RCREG           equ	281	;# 
   698     0119                     RCREG1          equ	281	;# 
   699     011A                     TX1REG          equ	282	;# 
   700     011A                     TXREG1          equ	282	;# 
   701     011A                     TXREG           equ	282	;# 
   702     011B                     SP1BRG          equ	283	;# 
   703     011B                     SPBRG           equ	283	;# 
   704     011B                     SP1BRGL         equ	283	;# 
   705     011B                     SPBRG1          equ	283	;# 
   706     011B                     SPBRGL          equ	283	;# 
   707     011C                     SP1BRGH         equ	284	;# 
   708     011C                     SPBRGH          equ	284	;# 
   709     011C                     SPBRGH1         equ	284	;# 
   710     011D                     RC1STA          equ	285	;# 
   711     011D                     RCSTA1          equ	285	;# 
   712     011D                     RCSTA           equ	285	;# 
   713     011E                     TX1STA          equ	286	;# 
   714     011E                     TXSTA1          equ	286	;# 
   715     011E                     TXSTA           equ	286	;# 
   716     011F                     BAUD1CON        equ	287	;# 
   717     011F                     BAUDCON1        equ	287	;# 
   718     011F                     BAUDCTL1        equ	287	;# 
   719     011F                     BAUDCON         equ	287	;# 
   720     011F                     BAUDCTL         equ	287	;# 
   721     018C                     SSP1BUF         equ	396	;# 
   722     018D                     SSP1ADD         equ	397	;# 
   723     018E                     SSP1MSK         equ	398	;# 
   724     018F                     SSP1STAT        equ	399	;# 
   725     0190                     SSP1CON1        equ	400	;# 
   726     0191                     SSP1CON2        equ	401	;# 
   727     0192                     SSP1CON3        equ	402	;# 
   728     0196                     SSP2BUF         equ	406	;# 
   729     0197                     SSP2ADD         equ	407	;# 
   730     0198                     SSP2MSK         equ	408	;# 
   731     0199                     SSP2STAT        equ	409	;# 
   732     019A                     SSP2CON1        equ	410	;# 
   733     019B                     SSP2CON2        equ	411	;# 
   734     019C                     SSP2CON3        equ	412	;# 
   735     020C                     TMR1            equ	524	;# 
   736     020C                     TMR1L           equ	524	;# 
   737     020D                     TMR1H           equ	525	;# 
   738     020E                     T1CON           equ	526	;# 
   739     020E                     TMR1CON         equ	526	;# 
   740     020F                     T1GCON          equ	527	;# 
   741     020F                     TMR1GCON        equ	527	;# 
   742     0210                     T1GATE          equ	528	;# 
   743     0210                     TMR1GATE        equ	528	;# 
   744     0211                     T1CLK           equ	529	;# 
   745     0211                     TMR1CLK         equ	529	;# 
   746     0211                     PR1             equ	529	;# 
   747     0212                     TMR3            equ	530	;# 
   748     0212                     TMR3L           equ	530	;# 
   749     0213                     TMR3H           equ	531	;# 
   750     0214                     T3CON           equ	532	;# 
   751     0214                     TMR3CON         equ	532	;# 
   752     0215                     T3GCON          equ	533	;# 
   753     0215                     TMR3GCON        equ	533	;# 
   754     0216                     T3GATE          equ	534	;# 
   755     0216                     TMR3GATE        equ	534	;# 
   756     0217                     T3CLK           equ	535	;# 
   757     0217                     TMR3CLK         equ	535	;# 
   758     0217                     PR3             equ	535	;# 
   759     0218                     TMR5            equ	536	;# 
   760     0218                     TMR5L           equ	536	;# 
   761     0219                     TMR5H           equ	537	;# 
   762     021A                     T5CON           equ	538	;# 
   763     021A                     TMR5CON         equ	538	;# 
   764     021B                     T5GCON          equ	539	;# 
   765     021B                     TMR5GCON        equ	539	;# 
   766     021C                     T5GATE          equ	540	;# 
   767     021C                     TMR5GATE        equ	540	;# 
   768     021D                     T5CLK           equ	541	;# 
   769     021D                     TMR5CLK         equ	541	;# 
   770     021D                     PR5             equ	541	;# 
   771     021E                     CCPTMRS0        equ	542	;# 
   772     021F                     CCPTMRS1        equ	543	;# 
   773     028C                     T2TMR           equ	652	;# 
   774     028C                     TMR2            equ	652	;# 
   775     028D                     T2PR            equ	653	;# 
   776     028D                     PR2             equ	653	;# 
   777     028E                     T2CON           equ	654	;# 
   778     028F                     T2HLT           equ	655	;# 
   779     0290                     T2CLKCON        equ	656	;# 
   780     0291                     T2RST           equ	657	;# 
   781     0292                     T4TMR           equ	658	;# 
   782     0292                     TMR4            equ	658	;# 
   783     0293                     T4PR            equ	659	;# 
   784     0293                     PR4             equ	659	;# 
   785     0294                     T4CON           equ	660	;# 
   786     0295                     T4HLT           equ	661	;# 
   787     0296                     T4CLKCON        equ	662	;# 
   788     0297                     T4RST           equ	663	;# 
   789     0298                     T6TMR           equ	664	;# 
   790     0298                     TMR6            equ	664	;# 
   791     0299                     T6PR            equ	665	;# 
   792     0299                     PR6             equ	665	;# 
   793     029A                     T6CON           equ	666	;# 
   794     029B                     T6HLT           equ	667	;# 
   795     029C                     T6CLKCON        equ	668	;# 
   796     029D                     T6RST           equ	669	;# 
   797     029F                     ADCPCON0        equ	671	;# 
   798     030C                     CCPR1           equ	780	;# 
   799     030C                     CCPR1L          equ	780	;# 
   800     030D                     CCPR1H          equ	781	;# 
   801     030E                     CCP1CON         equ	782	;# 
   802     030F                     CCP1CAP         equ	783	;# 
   803     0310                     CCPR2           equ	784	;# 
   804     0310                     CCPR2L          equ	784	;# 
   805     0311                     CCPR2H          equ	785	;# 
   806     0312                     CCP2CON         equ	786	;# 
   807     0313                     CCP2CAP         equ	787	;# 
   808     0314                     CCPR3           equ	788	;# 
   809     0314                     CCPR3L          equ	788	;# 
   810     0315                     CCPR3H          equ	789	;# 
   811     0316                     CCP3CON         equ	790	;# 
   812     0317                     CCP3CAP         equ	791	;# 
   813     0318                     CCPR4           equ	792	;# 
   814     0318                     CCPR4L          equ	792	;# 
   815     0319                     CCPR4H          equ	793	;# 
   816     031A                     CCP4CON         equ	794	;# 
   817     031B                     CCP4CAP         equ	795	;# 
   818     038C                     PWM6DC          equ	908	;# 
   819     038C                     PWM6DCL         equ	908	;# 
   820     038D                     PWM6DCH         equ	909	;# 
   821     038E                     PWM6CON         equ	910	;# 
   822     0390                     PWM7DC          equ	912	;# 
   823     0390                     PWM7DCL         equ	912	;# 
   824     0391                     PWM7DCH         equ	913	;# 
   825     0392                     PWM7CON         equ	914	;# 
   826     048C                     SMT1TMR         equ	1164	;# 
   827     048C                     SMT1TMRL        equ	1164	;# 
   828     048D                     SMT1TMRH        equ	1165	;# 
   829     048E                     SMT1TMRU        equ	1166	;# 
   830     048F                     SMT1CPR         equ	1167	;# 
   831     048F                     SMT1CPRL        equ	1167	;# 
   832     0490                     SMT1CPRH        equ	1168	;# 
   833     0491                     SMT1CPRU        equ	1169	;# 
   834     0492                     SMT1CPW         equ	1170	;# 
   835     0492                     SMT1CPWL        equ	1170	;# 
   836     0493                     SMT1CPWH        equ	1171	;# 
   837     0494                     SMT1CPWU        equ	1172	;# 
   838     0495                     SMT1PR          equ	1173	;# 
   839     0495                     SMT1PRL         equ	1173	;# 
   840     0496                     SMT1PRH         equ	1174	;# 
   841     0497                     SMT1PRU         equ	1175	;# 
   842     0498                     SMT1CON0        equ	1176	;# 
   843     0499                     SMT1CON1        equ	1177	;# 
   844     049A                     SMT1STAT        equ	1178	;# 
   845     049B                     SMT1CLK         equ	1179	;# 
   846     049C                     SMT1SIG         equ	1180	;# 
   847     049D                     SMT1WIN         equ	1181	;# 
   848     058C                     NCO1ACC         equ	1420	;# 
   849     058C                     NCO1ACCL        equ	1420	;# 
   850     058D                     NCO1ACCH        equ	1421	;# 
   851     058E                     NCO1ACCU        equ	1422	;# 
   852     058F                     NCO1INC         equ	1423	;# 
   853     058F                     NCO1INCL        equ	1423	;# 
   854     0590                     NCO1INCH        equ	1424	;# 
   855     0591                     NCO1INCU        equ	1425	;# 
   856     0592                     NCO1CON         equ	1426	;# 
   857     0593                     NCO1CLK         equ	1427	;# 
   858     059C                     TMR0L           equ	1436	;# 
   859     059C                     TMR0            equ	1436	;# 
   860     059D                     TMR0H           equ	1437	;# 
   861     059D                     PR0             equ	1437	;# 
   862     059E                     T0CON0          equ	1438	;# 
   863     059F                     T0CON1          equ	1439	;# 
   864     060C                     CWG1CLK         equ	1548	;# 
   865     060C                     CWG1CLKCON      equ	1548	;# 
   866     060D                     CWG1ISM         equ	1549	;# 
   867     060D                     CWG1DAT         equ	1549	;# 
   868     060E                     CWG1DBR         equ	1550	;# 
   869     060F                     CWG1DBF         equ	1551	;# 
   870     0610                     CWG1CON0        equ	1552	;# 
   871     0611                     CWG1CON1        equ	1553	;# 
   872     0612                     CWG1AS0         equ	1554	;# 
   873     0613                     CWG1AS1         equ	1555	;# 
   874     0614                     CWG1STR         equ	1556	;# 
   875     0616                     CWG2CLK         equ	1558	;# 
   876     0616                     CWG2CLKCON      equ	1558	;# 
   877     0617                     CWG2ISM         equ	1559	;# 
   878     0617                     CWG2DAT         equ	1559	;# 
   879     0618                     CWG2DBR         equ	1560	;# 
   880     0619                     CWG2DBF         equ	1561	;# 
   881     061A                     CWG2CON0        equ	1562	;# 
   882     061B                     CWG2CON1        equ	1563	;# 
   883     061C                     CWG2AS0         equ	1564	;# 
   884     061D                     CWG2AS1         equ	1565	;# 
   885     061E                     CWG2STR         equ	1566	;# 
   886     070C                     PIR0            equ	1804	;# 
   887     070D                     PIR1            equ	1805	;# 
   888     070E                     PIR2            equ	1806	;# 
   889     070F                     PIR3            equ	1807	;# 
   890     0710                     PIR4            equ	1808	;# 
   891     0711                     PIR5            equ	1809	;# 
   892     0712                     PIR6            equ	1810	;# 
   893     0713                     PIR7            equ	1811	;# 
   894     0714                     PIR8            equ	1812	;# 
   895     0716                     PIE0            equ	1814	;# 
   896     0717                     PIE1            equ	1815	;# 
   897     0718                     PIE2            equ	1816	;# 
   898     0719                     PIE3            equ	1817	;# 
   899     071A                     PIE4            equ	1818	;# 
   900     071B                     PIE5            equ	1819	;# 
   901     071C                     PIE6            equ	1820	;# 
   902     071D                     PIE7            equ	1821	;# 
   903     071E                     PIE8            equ	1822	;# 
   904     0796                     PMD0            equ	1942	;# 
   905     0797                     PMD1            equ	1943	;# 
   906     0798                     PMD2            equ	1944	;# 
   907     0799                     PMD3            equ	1945	;# 
   908     079A                     PMD4            equ	1946	;# 
   909     079B                     PMD5            equ	1947	;# 
   910     079C                     PMD6            equ	1948	;# 
   911     079D                     PMD7            equ	1949	;# 
   912     080C                     WDTCON0         equ	2060	;# 
   913     080D                     WDTCON1         equ	2061	;# 
   914     080E                     WDTPSL          equ	2062	;# 
   915     080F                     WDTPSH          equ	2063	;# 
   916     0810                     WDTTMR          equ	2064	;# 
   917     0811                     BORCON          equ	2065	;# 
   918     0812                     VREGCON         equ	2066	;# 
   919     0813                     PCON0           equ	2067	;# 
   920     0814                     PCON1           equ	2068	;# 
   921     081A                     NVMADR          equ	2074	;# 
   922     081A                     NVMADRL         equ	2074	;# 
   923     081B                     NVMADRH         equ	2075	;# 
   924     081C                     NVMDAT          equ	2076	;# 
   925     081C                     NVMDATL         equ	2076	;# 
   926     081D                     NVMDATH         equ	2077	;# 
   927     081E                     NVMCON1         equ	2078	;# 
   928     081F                     NVMCON2         equ	2079	;# 
   929     088C                     CPUDOZE         equ	2188	;# 
   930     088D                     OSCCON1         equ	2189	;# 
   931     088E                     OSCCON2         equ	2190	;# 
   932     088F                     OSCCON3         equ	2191	;# 
   933     0890                     OSCSTAT         equ	2192	;# 
   934     0891                     OSCEN           equ	2193	;# 
   935     0892                     OSCTUNE         equ	2194	;# 
   936     0893                     OSCFRQ          equ	2195	;# 
   937     0895                     CLKRCON         equ	2197	;# 
   938     0896                     CLKRCLK         equ	2198	;# 
   939     0897                     MD1CON0         equ	2199	;# 
   940     0898                     MD1CON1         equ	2200	;# 
   941     0899                     MD1SRC          equ	2201	;# 
   942     089A                     MD1CARL         equ	2202	;# 
   943     089B                     MD1CARH         equ	2203	;# 
   944     090C                     FVRCON          equ	2316	;# 
   945     090E                     DAC1CON0        equ	2318	;# 
   946     090F                     DAC1CON1        equ	2319	;# 
   947     091F                     ZCDCON          equ	2335	;# 
   948     098F                     CMOUT           equ	2447	;# 
   949     098F                     CMSTAT          equ	2447	;# 
   950     0990                     CM1CON0         equ	2448	;# 
   951     0991                     CM1CON1         equ	2449	;# 
   952     0992                     CM1NCH          equ	2450	;# 
   953     0993                     CM1PCH          equ	2451	;# 
   954     0994                     CM2CON0         equ	2452	;# 
   955     0995                     CM2CON1         equ	2453	;# 
   956     0996                     CM2NCH          equ	2454	;# 
   957     0997                     CM2PCH          equ	2455	;# 
   958     1E0F                     CLCDATA         equ	7695	;# 
   959     1E10                     CLC1CON         equ	7696	;# 
   960     1E11                     CLC1POL         equ	7697	;# 
   961     1E12                     CLC1SEL0        equ	7698	;# 
   962     1E13                     CLC1SEL1        equ	7699	;# 
   963     1E14                     CLC1SEL2        equ	7700	;# 
   964     1E15                     CLC1SEL3        equ	7701	;# 
   965     1E16                     CLC1GLS0        equ	7702	;# 
   966     1E17                     CLC1GLS1        equ	7703	;# 
   967     1E18                     CLC1GLS2        equ	7704	;# 
   968     1E19                     CLC1GLS3        equ	7705	;# 
   969     1E1A                     CLC2CON         equ	7706	;# 
   970     1E1B                     CLC2POL         equ	7707	;# 
   971     1E1C                     CLC2SEL0        equ	7708	;# 
   972     1E1D                     CLC2SEL1        equ	7709	;# 
   973     1E1E                     CLC2SEL2        equ	7710	;# 
   974     1E1F                     CLC2SEL3        equ	7711	;# 
   975     1E20                     CLC2GLS0        equ	7712	;# 
   976     1E21                     CLC2GLS1        equ	7713	;# 
   977     1E22                     CLC2GLS2        equ	7714	;# 
   978     1E23                     CLC2GLS3        equ	7715	;# 
   979     1E24                     CLC3CON         equ	7716	;# 
   980     1E25                     CLC3POL         equ	7717	;# 
   981     1E26                     CLC3SEL0        equ	7718	;# 
   982     1E27                     CLC3SEL1        equ	7719	;# 
   983     1E28                     CLC3SEL2        equ	7720	;# 
   984     1E29                     CLC3SEL3        equ	7721	;# 
   985     1E2A                     CLC3GLS0        equ	7722	;# 
   986     1E2B                     CLC3GLS1        equ	7723	;# 
   987     1E2C                     CLC3GLS2        equ	7724	;# 
   988     1E2D                     CLC3GLS3        equ	7725	;# 
   989     1E2E                     CLC4CON         equ	7726	;# 
   990     1E2F                     CLC4POL         equ	7727	;# 
   991     1E30                     CLC4SEL0        equ	7728	;# 
   992     1E31                     CLC4SEL1        equ	7729	;# 
   993     1E32                     CLC4SEL2        equ	7730	;# 
   994     1E33                     CLC4SEL3        equ	7731	;# 
   995     1E34                     CLC4GLS0        equ	7732	;# 
   996     1E35                     CLC4GLS1        equ	7733	;# 
   997     1E36                     CLC4GLS2        equ	7734	;# 
   998     1E37                     CLC4GLS3        equ	7735	;# 
   999     1E8F                     PPSLOCK         equ	7823	;# 
  1000     1E90                     INTPPS          equ	7824	;# 
  1001     1E91                     T0CKIPPS        equ	7825	;# 
  1002     1E92                     T1CKIPPS        equ	7826	;# 
  1003     1E93                     T1GPPS          equ	7827	;# 
  1004     1E94                     T3CKIPPS        equ	7828	;# 
  1005     1E95                     T3GPPS          equ	7829	;# 
  1006     1E96                     T5CKIPPS        equ	7830	;# 
  1007     1E97                     T5GPPS          equ	7831	;# 
  1008     1E9C                     T2INPPS         equ	7836	;# 
  1009     1E9D                     T4INPPS         equ	7837	;# 
  1010     1E9E                     T6INPPS         equ	7838	;# 
  1011     1EA1                     CCP1PPS         equ	7841	;# 
  1012     1EA2                     CCP2PPS         equ	7842	;# 
  1013     1EA3                     CCP3PPS         equ	7843	;# 
  1014     1EA4                     CCP4PPS         equ	7844	;# 
  1015     1EA9                     SMT1WINPPS      equ	7849	;# 
  1016     1EAA                     SMT1SIGPPS      equ	7850	;# 
  1017     1EB1                     CWG1PPS         equ	7857	;# 
  1018     1EB2                     CWG2PPS         equ	7858	;# 
  1019     1EB8                     MDCARLPPS       equ	7864	;# 
  1020     1EB9                     MDCARHPPS       equ	7865	;# 
  1021     1EBA                     MDSRCPPS        equ	7866	;# 
  1022     1EBB                     CLCIN0PPS       equ	7867	;# 
  1023     1EBC                     CLCIN1PPS       equ	7868	;# 
  1024     1EBD                     CLCIN2PPS       equ	7869	;# 
  1025     1EBE                     CLCIN3PPS       equ	7870	;# 
  1026     1EC3                     ADACTPPS        equ	7875	;# 
  1027     1EC5                     SSP1CLKPPS      equ	7877	;# 
  1028     1EC6                     SSP1DATPPS      equ	7878	;# 
  1029     1EC7                     SSP1SSPPS       equ	7879	;# 
  1030     1EC8                     SSP2CLKPPS      equ	7880	;# 
  1031     1EC9                     SSP2DATPPS      equ	7881	;# 
  1032     1ECA                     SSP2SSPPS       equ	7882	;# 
  1033     1ECB                     RX1PPS          equ	7883	;# 
  1034     1ECC                     CK1PPS          equ	7884	;# 
  1035     1F10                     RA0PPS          equ	7952	;# 
  1036     1F11                     RA1PPS          equ	7953	;# 
  1037     1F12                     RA2PPS          equ	7954	;# 
  1038     1F14                     RA4PPS          equ	7956	;# 
  1039     1F15                     RA5PPS          equ	7957	;# 
  1040     1F20                     RC0PPS          equ	7968	;# 
  1041     1F21                     RC1PPS          equ	7969	;# 
  1042     1F22                     RC2PPS          equ	7970	;# 
  1043     1F23                     RC3PPS          equ	7971	;# 
  1044     1F24                     RC4PPS          equ	7972	;# 
  1045     1F25                     RC5PPS          equ	7973	;# 
  1046     1F38                     ANSELA          equ	7992	;# 
  1047     1F39                     WPUA            equ	7993	;# 
  1048     1F3A                     ODCONA          equ	7994	;# 
  1049     1F3B                     SLRCONA         equ	7995	;# 
  1050     1F3C                     INLVLA          equ	7996	;# 
  1051     1F3D                     IOCAP           equ	7997	;# 
  1052     1F3E                     IOCAN           equ	7998	;# 
  1053     1F3F                     IOCAF           equ	7999	;# 
  1054     1F4E                     ANSELC          equ	8014	;# 
  1055     1F4F                     WPUC            equ	8015	;# 
  1056     1F50                     ODCONC          equ	8016	;# 
  1057     1F51                     SLRCONC         equ	8017	;# 
  1058     1F52                     INLVLC          equ	8018	;# 
  1059     1F53                     IOCCP           equ	8019	;# 
  1060     1F54                     IOCCN           equ	8020	;# 
  1061     1F55                     IOCCF           equ	8021	;# 
  1062     1FE4                     STATUS_SHAD     equ	8164	;# 
  1063     1FE5                     WREG_SHAD       equ	8165	;# 
  1064     1FE6                     BSR_SHAD        equ	8166	;# 
  1065     1FE7                     PCLATH_SHAD     equ	8167	;# 
  1066     1FE8                     FSR0_SHAD       equ	8168	;# 
  1067     1FE8                     FSR0L_SHAD      equ	8168	;# 
  1068     1FE9                     FSR0H_SHAD      equ	8169	;# 
  1069     1FEA                     FSR1L_SHAD      equ	8170	;# 
  1070     1FEB                     FSR1H_SHAD      equ	8171	;# 
  1071     1FED                     STKPTR          equ	8173	;# 
  1072     1FEE                     TOSL            equ	8174	;# 
  1073     1FEF                     TOSH            equ	8175	;# 
  1074     0000                     INDF0           equ	0	;# 
  1075     0001                     INDF1           equ	1	;# 
  1076     0002                     PCL             equ	2	;# 
  1077     0003                     STATUS          equ	3	;# 
  1078     0004                     FSR0L           equ	4	;# 
  1079     0005                     FSR0H           equ	5	;# 
  1080     0006                     FSR1L           equ	6	;# 
  1081     0007                     FSR1H           equ	7	;# 
  1082     0008                     BSR             equ	8	;# 
  1083     0009                     WREG            equ	9	;# 
  1084     000A                     PCLATH          equ	10	;# 
  1085     000B                     INTCON          equ	11	;# 
  1086     000C                     PORTA           equ	12	;# 
  1087     000E                     PORTC           equ	14	;# 
  1088     0012                     TRISA           equ	18	;# 
  1089     0014                     TRISC           equ	20	;# 
  1090     0018                     LATA            equ	24	;# 
  1091     001A                     LATC            equ	26	;# 
  1092     008C                     ADLTH           equ	140	;# 
  1093     008C                     ADLTHL          equ	140	;# 
  1094     008D                     ADLTHH          equ	141	;# 
  1095     008E                     ADUTH           equ	142	;# 
  1096     008E                     ADUTHL          equ	142	;# 
  1097     008F                     ADUTHH          equ	143	;# 
  1098     0090                     ADERR           equ	144	;# 
  1099     0090                     ADERRL          equ	144	;# 
  1100     0091                     ADERRH          equ	145	;# 
  1101     0092                     ADSTPT          equ	146	;# 
  1102     0092                     ADSTPTL         equ	146	;# 
  1103     0093                     ADSTPTH         equ	147	;# 
  1104     0094                     ADFLTR          equ	148	;# 
  1105     0094                     ADFLTRL         equ	148	;# 
  1106     0095                     ADFLTRH         equ	149	;# 
  1107     0096                     ADACC           equ	150	;# 
  1108     0096                     ADACCL          equ	150	;# 
  1109     0097                     ADACCH          equ	151	;# 
  1110     0098                     ADACCU          equ	152	;# 
  1111     0099                     ADCNT           equ	153	;# 
  1112     009A                     ADRPT           equ	154	;# 
  1113     009B                     ADPREV          equ	155	;# 
  1114     009B                     ADPREVL         equ	155	;# 
  1115     009C                     ADPREVH         equ	156	;# 
  1116     009D                     ADRES           equ	157	;# 
  1117     009D                     ADRESL          equ	157	;# 
  1118     009E                     ADRESH          equ	158	;# 
  1119     009F                     ADPCH           equ	159	;# 
  1120     010C                     ADACQ           equ	268	;# 
  1121     010C                     ADACQL          equ	268	;# 
  1122     010D                     ADACQH          equ	269	;# 
  1123     010E                     ADCAP           equ	270	;# 
  1124     010F                     ADPRE           equ	271	;# 
  1125     010F                     ADPREL          equ	271	;# 
  1126     0110                     ADPREH          equ	272	;# 
  1127     0111                     ADCON0          equ	273	;# 
  1128     0112                     ADCON1          equ	274	;# 
  1129     0113                     ADCON2          equ	275	;# 
  1130     0114                     ADCON3          equ	276	;# 
  1131     0115                     ADSTAT          equ	277	;# 
  1132     0116                     ADREF           equ	278	;# 
  1133     0117                     ADACT           equ	279	;# 
  1134     0118                     ADCLK           equ	280	;# 
  1135     0119                     RC1REG          equ	281	;# 
  1136     0119                     RCREG           equ	281	;# 
  1137     0119                     RCREG1          equ	281	;# 
  1138     011A                     TX1REG          equ	282	;# 
  1139     011A                     TXREG1          equ	282	;# 
  1140     011A                     TXREG           equ	282	;# 
  1141     011B                     SP1BRG          equ	283	;# 
  1142     011B                     SPBRG           equ	283	;# 
  1143     011B                     SP1BRGL         equ	283	;# 
  1144     011B                     SPBRG1          equ	283	;# 
  1145     011B                     SPBRGL          equ	283	;# 
  1146     011C                     SP1BRGH         equ	284	;# 
  1147     011C                     SPBRGH          equ	284	;# 
  1148     011C                     SPBRGH1         equ	284	;# 
  1149     011D                     RC1STA          equ	285	;# 
  1150     011D                     RCSTA1          equ	285	;# 
  1151     011D                     RCSTA           equ	285	;# 
  1152     011E                     TX1STA          equ	286	;# 
  1153     011E                     TXSTA1          equ	286	;# 
  1154     011E                     TXSTA           equ	286	;# 
  1155     011F                     BAUD1CON        equ	287	;# 
  1156     011F                     BAUDCON1        equ	287	;# 
  1157     011F                     BAUDCTL1        equ	287	;# 
  1158     011F                     BAUDCON         equ	287	;# 
  1159     011F                     BAUDCTL         equ	287	;# 
  1160     018C                     SSP1BUF         equ	396	;# 
  1161     018D                     SSP1ADD         equ	397	;# 
  1162     018E                     SSP1MSK         equ	398	;# 
  1163     018F                     SSP1STAT        equ	399	;# 
  1164     0190                     SSP1CON1        equ	400	;# 
  1165     0191                     SSP1CON2        equ	401	;# 
  1166     0192                     SSP1CON3        equ	402	;# 
  1167     0196                     SSP2BUF         equ	406	;# 
  1168     0197                     SSP2ADD         equ	407	;# 
  1169     0198                     SSP2MSK         equ	408	;# 
  1170     0199                     SSP2STAT        equ	409	;# 
  1171     019A                     SSP2CON1        equ	410	;# 
  1172     019B                     SSP2CON2        equ	411	;# 
  1173     019C                     SSP2CON3        equ	412	;# 
  1174     020C                     TMR1            equ	524	;# 
  1175     020C                     TMR1L           equ	524	;# 
  1176     020D                     TMR1H           equ	525	;# 
  1177     020E                     T1CON           equ	526	;# 
  1178     020E                     TMR1CON         equ	526	;# 
  1179     020F                     T1GCON          equ	527	;# 
  1180     020F                     TMR1GCON        equ	527	;# 
  1181     0210                     T1GATE          equ	528	;# 
  1182     0210                     TMR1GATE        equ	528	;# 
  1183     0211                     T1CLK           equ	529	;# 
  1184     0211                     TMR1CLK         equ	529	;# 
  1185     0211                     PR1             equ	529	;# 
  1186     0212                     TMR3            equ	530	;# 
  1187     0212                     TMR3L           equ	530	;# 
  1188     0213                     TMR3H           equ	531	;# 
  1189     0214                     T3CON           equ	532	;# 
  1190     0214                     TMR3CON         equ	532	;# 
  1191     0215                     T3GCON          equ	533	;# 
  1192     0215                     TMR3GCON        equ	533	;# 
  1193     0216                     T3GATE          equ	534	;# 
  1194     0216                     TMR3GATE        equ	534	;# 
  1195     0217                     T3CLK           equ	535	;# 
  1196     0217                     TMR3CLK         equ	535	;# 
  1197     0217                     PR3             equ	535	;# 
  1198     0218                     TMR5            equ	536	;# 
  1199     0218                     TMR5L           equ	536	;# 
  1200     0219                     TMR5H           equ	537	;# 
  1201     021A                     T5CON           equ	538	;# 
  1202     021A                     TMR5CON         equ	538	;# 
  1203     021B                     T5GCON          equ	539	;# 
  1204     021B                     TMR5GCON        equ	539	;# 
  1205     021C                     T5GATE          equ	540	;# 
  1206     021C                     TMR5GATE        equ	540	;# 
  1207     021D                     T5CLK           equ	541	;# 
  1208     021D                     TMR5CLK         equ	541	;# 
  1209     021D                     PR5             equ	541	;# 
  1210     021E                     CCPTMRS0        equ	542	;# 
  1211     021F                     CCPTMRS1        equ	543	;# 
  1212     028C                     T2TMR           equ	652	;# 
  1213     028C                     TMR2            equ	652	;# 
  1214     028D                     T2PR            equ	653	;# 
  1215     028D                     PR2             equ	653	;# 
  1216     028E                     T2CON           equ	654	;# 
  1217     028F                     T2HLT           equ	655	;# 
  1218     0290                     T2CLKCON        equ	656	;# 
  1219     0291                     T2RST           equ	657	;# 
  1220     0292                     T4TMR           equ	658	;# 
  1221     0292                     TMR4            equ	658	;# 
  1222     0293                     T4PR            equ	659	;# 
  1223     0293                     PR4             equ	659	;# 
  1224     0294                     T4CON           equ	660	;# 
  1225     0295                     T4HLT           equ	661	;# 
  1226     0296                     T4CLKCON        equ	662	;# 
  1227     0297                     T4RST           equ	663	;# 
  1228     0298                     T6TMR           equ	664	;# 
  1229     0298                     TMR6            equ	664	;# 
  1230     0299                     T6PR            equ	665	;# 
  1231     0299                     PR6             equ	665	;# 
  1232     029A                     T6CON           equ	666	;# 
  1233     029B                     T6HLT           equ	667	;# 
  1234     029C                     T6CLKCON        equ	668	;# 
  1235     029D                     T6RST           equ	669	;# 
  1236     029F                     ADCPCON0        equ	671	;# 
  1237     030C                     CCPR1           equ	780	;# 
  1238     030C                     CCPR1L          equ	780	;# 
  1239     030D                     CCPR1H          equ	781	;# 
  1240     030E                     CCP1CON         equ	782	;# 
  1241     030F                     CCP1CAP         equ	783	;# 
  1242     0310                     CCPR2           equ	784	;# 
  1243     0310                     CCPR2L          equ	784	;# 
  1244     0311                     CCPR2H          equ	785	;# 
  1245     0312                     CCP2CON         equ	786	;# 
  1246     0313                     CCP2CAP         equ	787	;# 
  1247     0314                     CCPR3           equ	788	;# 
  1248     0314                     CCPR3L          equ	788	;# 
  1249     0315                     CCPR3H          equ	789	;# 
  1250     0316                     CCP3CON         equ	790	;# 
  1251     0317                     CCP3CAP         equ	791	;# 
  1252     0318                     CCPR4           equ	792	;# 
  1253     0318                     CCPR4L          equ	792	;# 
  1254     0319                     CCPR4H          equ	793	;# 
  1255     031A                     CCP4CON         equ	794	;# 
  1256     031B                     CCP4CAP         equ	795	;# 
  1257     038C                     PWM6DC          equ	908	;# 
  1258     038C                     PWM6DCL         equ	908	;# 
  1259     038D                     PWM6DCH         equ	909	;# 
  1260     038E                     PWM6CON         equ	910	;# 
  1261     0390                     PWM7DC          equ	912	;# 
  1262     0390                     PWM7DCL         equ	912	;# 
  1263     0391                     PWM7DCH         equ	913	;# 
  1264     0392                     PWM7CON         equ	914	;# 
  1265     048C                     SMT1TMR         equ	1164	;# 
  1266     048C                     SMT1TMRL        equ	1164	;# 
  1267     048D                     SMT1TMRH        equ	1165	;# 
  1268     048E                     SMT1TMRU        equ	1166	;# 
  1269     048F                     SMT1CPR         equ	1167	;# 
  1270     048F                     SMT1CPRL        equ	1167	;# 
  1271     0490                     SMT1CPRH        equ	1168	;# 
  1272     0491                     SMT1CPRU        equ	1169	;# 
  1273     0492                     SMT1CPW         equ	1170	;# 
  1274     0492                     SMT1CPWL        equ	1170	;# 
  1275     0493                     SMT1CPWH        equ	1171	;# 
  1276     0494                     SMT1CPWU        equ	1172	;# 
  1277     0495                     SMT1PR          equ	1173	;# 
  1278     0495                     SMT1PRL         equ	1173	;# 
  1279     0496                     SMT1PRH         equ	1174	;# 
  1280     0497                     SMT1PRU         equ	1175	;# 
  1281     0498                     SMT1CON0        equ	1176	;# 
  1282     0499                     SMT1CON1        equ	1177	;# 
  1283     049A                     SMT1STAT        equ	1178	;# 
  1284     049B                     SMT1CLK         equ	1179	;# 
  1285     049C                     SMT1SIG         equ	1180	;# 
  1286     049D                     SMT1WIN         equ	1181	;# 
  1287     058C                     NCO1ACC         equ	1420	;# 
  1288     058C                     NCO1ACCL        equ	1420	;# 
  1289     058D                     NCO1ACCH        equ	1421	;# 
  1290     058E                     NCO1ACCU        equ	1422	;# 
  1291     058F                     NCO1INC         equ	1423	;# 
  1292     058F                     NCO1INCL        equ	1423	;# 
  1293     0590                     NCO1INCH        equ	1424	;# 
  1294     0591                     NCO1INCU        equ	1425	;# 
  1295     0592                     NCO1CON         equ	1426	;# 
  1296     0593                     NCO1CLK         equ	1427	;# 
  1297     059C                     TMR0L           equ	1436	;# 
  1298     059C                     TMR0            equ	1436	;# 
  1299     059D                     TMR0H           equ	1437	;# 
  1300     059D                     PR0             equ	1437	;# 
  1301     059E                     T0CON0          equ	1438	;# 
  1302     059F                     T0CON1          equ	1439	;# 
  1303     060C                     CWG1CLK         equ	1548	;# 
  1304     060C                     CWG1CLKCON      equ	1548	;# 
  1305     060D                     CWG1ISM         equ	1549	;# 
  1306     060D                     CWG1DAT         equ	1549	;# 
  1307     060E                     CWG1DBR         equ	1550	;# 
  1308     060F                     CWG1DBF         equ	1551	;# 
  1309     0610                     CWG1CON0        equ	1552	;# 
  1310     0611                     CWG1CON1        equ	1553	;# 
  1311     0612                     CWG1AS0         equ	1554	;# 
  1312     0613                     CWG1AS1         equ	1555	;# 
  1313     0614                     CWG1STR         equ	1556	;# 
  1314     0616                     CWG2CLK         equ	1558	;# 
  1315     0616                     CWG2CLKCON      equ	1558	;# 
  1316     0617                     CWG2ISM         equ	1559	;# 
  1317     0617                     CWG2DAT         equ	1559	;# 
  1318     0618                     CWG2DBR         equ	1560	;# 
  1319     0619                     CWG2DBF         equ	1561	;# 
  1320     061A                     CWG2CON0        equ	1562	;# 
  1321     061B                     CWG2CON1        equ	1563	;# 
  1322     061C                     CWG2AS0         equ	1564	;# 
  1323     061D                     CWG2AS1         equ	1565	;# 
  1324     061E                     CWG2STR         equ	1566	;# 
  1325     070C                     PIR0            equ	1804	;# 
  1326     070D                     PIR1            equ	1805	;# 
  1327     070E                     PIR2            equ	1806	;# 
  1328     070F                     PIR3            equ	1807	;# 
  1329     0710                     PIR4            equ	1808	;# 
  1330     0711                     PIR5            equ	1809	;# 
  1331     0712                     PIR6            equ	1810	;# 
  1332     0713                     PIR7            equ	1811	;# 
  1333     0714                     PIR8            equ	1812	;# 
  1334     0716                     PIE0            equ	1814	;# 
  1335     0717                     PIE1            equ	1815	;# 
  1336     0718                     PIE2            equ	1816	;# 
  1337     0719                     PIE3            equ	1817	;# 
  1338     071A                     PIE4            equ	1818	;# 
  1339     071B                     PIE5            equ	1819	;# 
  1340     071C                     PIE6            equ	1820	;# 
  1341     071D                     PIE7            equ	1821	;# 
  1342     071E                     PIE8            equ	1822	;# 
  1343     0796                     PMD0            equ	1942	;# 
  1344     0797                     PMD1            equ	1943	;# 
  1345     0798                     PMD2            equ	1944	;# 
  1346     0799                     PMD3            equ	1945	;# 
  1347     079A                     PMD4            equ	1946	;# 
  1348     079B                     PMD5            equ	1947	;# 
  1349     079C                     PMD6            equ	1948	;# 
  1350     079D                     PMD7            equ	1949	;# 
  1351     080C                     WDTCON0         equ	2060	;# 
  1352     080D                     WDTCON1         equ	2061	;# 
  1353     080E                     WDTPSL          equ	2062	;# 
  1354     080F                     WDTPSH          equ	2063	;# 
  1355     0810                     WDTTMR          equ	2064	;# 
  1356     0811                     BORCON          equ	2065	;# 
  1357     0812                     VREGCON         equ	2066	;# 
  1358     0813                     PCON0           equ	2067	;# 
  1359     0814                     PCON1           equ	2068	;# 
  1360     081A                     NVMADR          equ	2074	;# 
  1361     081A                     NVMADRL         equ	2074	;# 
  1362     081B                     NVMADRH         equ	2075	;# 
  1363     081C                     NVMDAT          equ	2076	;# 
  1364     081C                     NVMDATL         equ	2076	;# 
  1365     081D                     NVMDATH         equ	2077	;# 
  1366     081E                     NVMCON1         equ	2078	;# 
  1367     081F                     NVMCON2         equ	2079	;# 
  1368     088C                     CPUDOZE         equ	2188	;# 
  1369     088D                     OSCCON1         equ	2189	;# 
  1370     088E                     OSCCON2         equ	2190	;# 
  1371     088F                     OSCCON3         equ	2191	;# 
  1372     0890                     OSCSTAT         equ	2192	;# 
  1373     0891                     OSCEN           equ	2193	;# 
  1374     0892                     OSCTUNE         equ	2194	;# 
  1375     0893                     OSCFRQ          equ	2195	;# 
  1376     0895                     CLKRCON         equ	2197	;# 
  1377     0896                     CLKRCLK         equ	2198	;# 
  1378     0897                     MD1CON0         equ	2199	;# 
  1379     0898                     MD1CON1         equ	2200	;# 
  1380     0899                     MD1SRC          equ	2201	;# 
  1381     089A                     MD1CARL         equ	2202	;# 
  1382     089B                     MD1CARH         equ	2203	;# 
  1383     090C                     FVRCON          equ	2316	;# 
  1384     090E                     DAC1CON0        equ	2318	;# 
  1385     090F                     DAC1CON1        equ	2319	;# 
  1386     091F                     ZCDCON          equ	2335	;# 
  1387     098F                     CMOUT           equ	2447	;# 
  1388     098F                     CMSTAT          equ	2447	;# 
  1389     0990                     CM1CON0         equ	2448	;# 
  1390     0991                     CM1CON1         equ	2449	;# 
  1391     0992                     CM1NCH          equ	2450	;# 
  1392     0993                     CM1PCH          equ	2451	;# 
  1393     0994                     CM2CON0         equ	2452	;# 
  1394     0995                     CM2CON1         equ	2453	;# 
  1395     0996                     CM2NCH          equ	2454	;# 
  1396     0997                     CM2PCH          equ	2455	;# 
  1397     1E0F                     CLCDATA         equ	7695	;# 
  1398     1E10                     CLC1CON         equ	7696	;# 
  1399     1E11                     CLC1POL         equ	7697	;# 
  1400     1E12                     CLC1SEL0        equ	7698	;# 
  1401     1E13                     CLC1SEL1        equ	7699	;# 
  1402     1E14                     CLC1SEL2        equ	7700	;# 
  1403     1E15                     CLC1SEL3        equ	7701	;# 
  1404     1E16                     CLC1GLS0        equ	7702	;# 
  1405     1E17                     CLC1GLS1        equ	7703	;# 
  1406     1E18                     CLC1GLS2        equ	7704	;# 
  1407     1E19                     CLC1GLS3        equ	7705	;# 
  1408     1E1A                     CLC2CON         equ	7706	;# 
  1409     1E1B                     CLC2POL         equ	7707	;# 
  1410     1E1C                     CLC2SEL0        equ	7708	;# 
  1411     1E1D                     CLC2SEL1        equ	7709	;# 
  1412     1E1E                     CLC2SEL2        equ	7710	;# 
  1413     1E1F                     CLC2SEL3        equ	7711	;# 
  1414     1E20                     CLC2GLS0        equ	7712	;# 
  1415     1E21                     CLC2GLS1        equ	7713	;# 
  1416     1E22                     CLC2GLS2        equ	7714	;# 
  1417     1E23                     CLC2GLS3        equ	7715	;# 
  1418     1E24                     CLC3CON         equ	7716	;# 
  1419     1E25                     CLC3POL         equ	7717	;# 
  1420     1E26                     CLC3SEL0        equ	7718	;# 
  1421     1E27                     CLC3SEL1        equ	7719	;# 
  1422     1E28                     CLC3SEL2        equ	7720	;# 
  1423     1E29                     CLC3SEL3        equ	7721	;# 
  1424     1E2A                     CLC3GLS0        equ	7722	;# 
  1425     1E2B                     CLC3GLS1        equ	7723	;# 
  1426     1E2C                     CLC3GLS2        equ	7724	;# 
  1427     1E2D                     CLC3GLS3        equ	7725	;# 
  1428     1E2E                     CLC4CON         equ	7726	;# 
  1429     1E2F                     CLC4POL         equ	7727	;# 
  1430     1E30                     CLC4SEL0        equ	7728	;# 
  1431     1E31                     CLC4SEL1        equ	7729	;# 
  1432     1E32                     CLC4SEL2        equ	7730	;# 
  1433     1E33                     CLC4SEL3        equ	7731	;# 
  1434     1E34                     CLC4GLS0        equ	7732	;# 
  1435     1E35                     CLC4GLS1        equ	7733	;# 
  1436     1E36                     CLC4GLS2        equ	7734	;# 
  1437     1E37                     CLC4GLS3        equ	7735	;# 
  1438     1E8F                     PPSLOCK         equ	7823	;# 
  1439     1E90                     INTPPS          equ	7824	;# 
  1440     1E91                     T0CKIPPS        equ	7825	;# 
  1441     1E92                     T1CKIPPS        equ	7826	;# 
  1442     1E93                     T1GPPS          equ	7827	;# 
  1443     1E94                     T3CKIPPS        equ	7828	;# 
  1444     1E95                     T3GPPS          equ	7829	;# 
  1445     1E96                     T5CKIPPS        equ	7830	;# 
  1446     1E97                     T5GPPS          equ	7831	;# 
  1447     1E9C                     T2INPPS         equ	7836	;# 
  1448     1E9D                     T4INPPS         equ	7837	;# 
  1449     1E9E                     T6INPPS         equ	7838	;# 
  1450     1EA1                     CCP1PPS         equ	7841	;# 
  1451     1EA2                     CCP2PPS         equ	7842	;# 
  1452     1EA3                     CCP3PPS         equ	7843	;# 
  1453     1EA4                     CCP4PPS         equ	7844	;# 
  1454     1EA9                     SMT1WINPPS      equ	7849	;# 
  1455     1EAA                     SMT1SIGPPS      equ	7850	;# 
  1456     1EB1                     CWG1PPS         equ	7857	;# 
  1457     1EB2                     CWG2PPS         equ	7858	;# 
  1458     1EB8                     MDCARLPPS       equ	7864	;# 
  1459     1EB9                     MDCARHPPS       equ	7865	;# 
  1460     1EBA                     MDSRCPPS        equ	7866	;# 
  1461     1EBB                     CLCIN0PPS       equ	7867	;# 
  1462     1EBC                     CLCIN1PPS       equ	7868	;# 
  1463     1EBD                     CLCIN2PPS       equ	7869	;# 
  1464     1EBE                     CLCIN3PPS       equ	7870	;# 
  1465     1EC3                     ADACTPPS        equ	7875	;# 
  1466     1EC5                     SSP1CLKPPS      equ	7877	;# 
  1467     1EC6                     SSP1DATPPS      equ	7878	;# 
  1468     1EC7                     SSP1SSPPS       equ	7879	;# 
  1469     1EC8                     SSP2CLKPPS      equ	7880	;# 
  1470     1EC9                     SSP2DATPPS      equ	7881	;# 
  1471     1ECA                     SSP2SSPPS       equ	7882	;# 
  1472     1ECB                     RX1PPS          equ	7883	;# 
  1473     1ECC                     CK1PPS          equ	7884	;# 
  1474     1F10                     RA0PPS          equ	7952	;# 
  1475     1F11                     RA1PPS          equ	7953	;# 
  1476     1F12                     RA2PPS          equ	7954	;# 
  1477     1F14                     RA4PPS          equ	7956	;# 
  1478     1F15                     RA5PPS          equ	7957	;# 
  1479     1F20                     RC0PPS          equ	7968	;# 
  1480     1F21                     RC1PPS          equ	7969	;# 
  1481     1F22                     RC2PPS          equ	7970	;# 
  1482     1F23                     RC3PPS          equ	7971	;# 
  1483     1F24                     RC4PPS          equ	7972	;# 
  1484     1F25                     RC5PPS          equ	7973	;# 
  1485     1F38                     ANSELA          equ	7992	;# 
  1486     1F39                     WPUA            equ	7993	;# 
  1487     1F3A                     ODCONA          equ	7994	;# 
  1488     1F3B                     SLRCONA         equ	7995	;# 
  1489     1F3C                     INLVLA          equ	7996	;# 
  1490     1F3D                     IOCAP           equ	7997	;# 
  1491     1F3E                     IOCAN           equ	7998	;# 
  1492     1F3F                     IOCAF           equ	7999	;# 
  1493     1F4E                     ANSELC          equ	8014	;# 
  1494     1F4F                     WPUC            equ	8015	;# 
  1495     1F50                     ODCONC          equ	8016	;# 
  1496     1F51                     SLRCONC         equ	8017	;# 
  1497     1F52                     INLVLC          equ	8018	;# 
  1498     1F53                     IOCCP           equ	8019	;# 
  1499     1F54                     IOCCN           equ	8020	;# 
  1500     1F55                     IOCCF           equ	8021	;# 
  1501     1FE4                     STATUS_SHAD     equ	8164	;# 
  1502     1FE5                     WREG_SHAD       equ	8165	;# 
  1503     1FE6                     BSR_SHAD        equ	8166	;# 
  1504     1FE7                     PCLATH_SHAD     equ	8167	;# 
  1505     1FE8                     FSR0_SHAD       equ	8168	;# 
  1506     1FE8                     FSR0L_SHAD      equ	8168	;# 
  1507     1FE9                     FSR0H_SHAD      equ	8169	;# 
  1508     1FEA                     FSR1L_SHAD      equ	8170	;# 
  1509     1FEB                     FSR1H_SHAD      equ	8171	;# 
  1510     1FED                     STKPTR          equ	8173	;# 
  1511     1FEE                     TOSL            equ	8174	;# 
  1512     1FEF                     TOSH            equ	8175	;# 
  1513     0000                     INDF0           equ	0	;# 
  1514     0001                     INDF1           equ	1	;# 
  1515     0002                     PCL             equ	2	;# 
  1516     0003                     STATUS          equ	3	;# 
  1517     0004                     FSR0L           equ	4	;# 
  1518     0005                     FSR0H           equ	5	;# 
  1519     0006                     FSR1L           equ	6	;# 
  1520     0007                     FSR1H           equ	7	;# 
  1521     0008                     BSR             equ	8	;# 
  1522     0009                     WREG            equ	9	;# 
  1523     000A                     PCLATH          equ	10	;# 
  1524     000B                     INTCON          equ	11	;# 
  1525     000C                     PORTA           equ	12	;# 
  1526     000E                     PORTC           equ	14	;# 
  1527     0012                     TRISA           equ	18	;# 
  1528     0014                     TRISC           equ	20	;# 
  1529     0018                     LATA            equ	24	;# 
  1530     001A                     LATC            equ	26	;# 
  1531     008C                     ADLTH           equ	140	;# 
  1532     008C                     ADLTHL          equ	140	;# 
  1533     008D                     ADLTHH          equ	141	;# 
  1534     008E                     ADUTH           equ	142	;# 
  1535     008E                     ADUTHL          equ	142	;# 
  1536     008F                     ADUTHH          equ	143	;# 
  1537     0090                     ADERR           equ	144	;# 
  1538     0090                     ADERRL          equ	144	;# 
  1539     0091                     ADERRH          equ	145	;# 
  1540     0092                     ADSTPT          equ	146	;# 
  1541     0092                     ADSTPTL         equ	146	;# 
  1542     0093                     ADSTPTH         equ	147	;# 
  1543     0094                     ADFLTR          equ	148	;# 
  1544     0094                     ADFLTRL         equ	148	;# 
  1545     0095                     ADFLTRH         equ	149	;# 
  1546     0096                     ADACC           equ	150	;# 
  1547     0096                     ADACCL          equ	150	;# 
  1548     0097                     ADACCH          equ	151	;# 
  1549     0098                     ADACCU          equ	152	;# 
  1550     0099                     ADCNT           equ	153	;# 
  1551     009A                     ADRPT           equ	154	;# 
  1552     009B                     ADPREV          equ	155	;# 
  1553     009B                     ADPREVL         equ	155	;# 
  1554     009C                     ADPREVH         equ	156	;# 
  1555     009D                     ADRES           equ	157	;# 
  1556     009D                     ADRESL          equ	157	;# 
  1557     009E                     ADRESH          equ	158	;# 
  1558     009F                     ADPCH           equ	159	;# 
  1559     010C                     ADACQ           equ	268	;# 
  1560     010C                     ADACQL          equ	268	;# 
  1561     010D                     ADACQH          equ	269	;# 
  1562     010E                     ADCAP           equ	270	;# 
  1563     010F                     ADPRE           equ	271	;# 
  1564     010F                     ADPREL          equ	271	;# 
  1565     0110                     ADPREH          equ	272	;# 
  1566     0111                     ADCON0          equ	273	;# 
  1567     0112                     ADCON1          equ	274	;# 
  1568     0113                     ADCON2          equ	275	;# 
  1569     0114                     ADCON3          equ	276	;# 
  1570     0115                     ADSTAT          equ	277	;# 
  1571     0116                     ADREF           equ	278	;# 
  1572     0117                     ADACT           equ	279	;# 
  1573     0118                     ADCLK           equ	280	;# 
  1574     0119                     RC1REG          equ	281	;# 
  1575     0119                     RCREG           equ	281	;# 
  1576     0119                     RCREG1          equ	281	;# 
  1577     011A                     TX1REG          equ	282	;# 
  1578     011A                     TXREG1          equ	282	;# 
  1579     011A                     TXREG           equ	282	;# 
  1580     011B                     SP1BRG          equ	283	;# 
  1581     011B                     SPBRG           equ	283	;# 
  1582     011B                     SP1BRGL         equ	283	;# 
  1583     011B                     SPBRG1          equ	283	;# 
  1584     011B                     SPBRGL          equ	283	;# 
  1585     011C                     SP1BRGH         equ	284	;# 
  1586     011C                     SPBRGH          equ	284	;# 
  1587     011C                     SPBRGH1         equ	284	;# 
  1588     011D                     RC1STA          equ	285	;# 
  1589     011D                     RCSTA1          equ	285	;# 
  1590     011D                     RCSTA           equ	285	;# 
  1591     011E                     TX1STA          equ	286	;# 
  1592     011E                     TXSTA1          equ	286	;# 
  1593     011E                     TXSTA           equ	286	;# 
  1594     011F                     BAUD1CON        equ	287	;# 
  1595     011F                     BAUDCON1        equ	287	;# 
  1596     011F                     BAUDCTL1        equ	287	;# 
  1597     011F                     BAUDCON         equ	287	;# 
  1598     011F                     BAUDCTL         equ	287	;# 
  1599     018C                     SSP1BUF         equ	396	;# 
  1600     018D                     SSP1ADD         equ	397	;# 
  1601     018E                     SSP1MSK         equ	398	;# 
  1602     018F                     SSP1STAT        equ	399	;# 
  1603     0190                     SSP1CON1        equ	400	;# 
  1604     0191                     SSP1CON2        equ	401	;# 
  1605     0192                     SSP1CON3        equ	402	;# 
  1606     0196                     SSP2BUF         equ	406	;# 
  1607     0197                     SSP2ADD         equ	407	;# 
  1608     0198                     SSP2MSK         equ	408	;# 
  1609     0199                     SSP2STAT        equ	409	;# 
  1610     019A                     SSP2CON1        equ	410	;# 
  1611     019B                     SSP2CON2        equ	411	;# 
  1612     019C                     SSP2CON3        equ	412	;# 
  1613     020C                     TMR1            equ	524	;# 
  1614     020C                     TMR1L           equ	524	;# 
  1615     020D                     TMR1H           equ	525	;# 
  1616     020E                     T1CON           equ	526	;# 
  1617     020E                     TMR1CON         equ	526	;# 
  1618     020F                     T1GCON          equ	527	;# 
  1619     020F                     TMR1GCON        equ	527	;# 
  1620     0210                     T1GATE          equ	528	;# 
  1621     0210                     TMR1GATE        equ	528	;# 
  1622     0211                     T1CLK           equ	529	;# 
  1623     0211                     TMR1CLK         equ	529	;# 
  1624     0211                     PR1             equ	529	;# 
  1625     0212                     TMR3            equ	530	;# 
  1626     0212                     TMR3L           equ	530	;# 
  1627     0213                     TMR3H           equ	531	;# 
  1628     0214                     T3CON           equ	532	;# 
  1629     0214                     TMR3CON         equ	532	;# 
  1630     0215                     T3GCON          equ	533	;# 
  1631     0215                     TMR3GCON        equ	533	;# 
  1632     0216                     T3GATE          equ	534	;# 
  1633     0216                     TMR3GATE        equ	534	;# 
  1634     0217                     T3CLK           equ	535	;# 
  1635     0217                     TMR3CLK         equ	535	;# 
  1636     0217                     PR3             equ	535	;# 
  1637     0218                     TMR5            equ	536	;# 
  1638     0218                     TMR5L           equ	536	;# 
  1639     0219                     TMR5H           equ	537	;# 
  1640     021A                     T5CON           equ	538	;# 
  1641     021A                     TMR5CON         equ	538	;# 
  1642     021B                     T5GCON          equ	539	;# 
  1643     021B                     TMR5GCON        equ	539	;# 
  1644     021C                     T5GATE          equ	540	;# 
  1645     021C                     TMR5GATE        equ	540	;# 
  1646     021D                     T5CLK           equ	541	;# 
  1647     021D                     TMR5CLK         equ	541	;# 
  1648     021D                     PR5             equ	541	;# 
  1649     021E                     CCPTMRS0        equ	542	;# 
  1650     021F                     CCPTMRS1        equ	543	;# 
  1651     028C                     T2TMR           equ	652	;# 
  1652     028C                     TMR2            equ	652	;# 
  1653     028D                     T2PR            equ	653	;# 
  1654     028D                     PR2             equ	653	;# 
  1655     028E                     T2CON           equ	654	;# 
  1656     028F                     T2HLT           equ	655	;# 
  1657     0290                     T2CLKCON        equ	656	;# 
  1658     0291                     T2RST           equ	657	;# 
  1659     0292                     T4TMR           equ	658	;# 
  1660     0292                     TMR4            equ	658	;# 
  1661     0293                     T4PR            equ	659	;# 
  1662     0293                     PR4             equ	659	;# 
  1663     0294                     T4CON           equ	660	;# 
  1664     0295                     T4HLT           equ	661	;# 
  1665     0296                     T4CLKCON        equ	662	;# 
  1666     0297                     T4RST           equ	663	;# 
  1667     0298                     T6TMR           equ	664	;# 
  1668     0298                     TMR6            equ	664	;# 
  1669     0299                     T6PR            equ	665	;# 
  1670     0299                     PR6             equ	665	;# 
  1671     029A                     T6CON           equ	666	;# 
  1672     029B                     T6HLT           equ	667	;# 
  1673     029C                     T6CLKCON        equ	668	;# 
  1674     029D                     T6RST           equ	669	;# 
  1675     029F                     ADCPCON0        equ	671	;# 
  1676     030C                     CCPR1           equ	780	;# 
  1677     030C                     CCPR1L          equ	780	;# 
  1678     030D                     CCPR1H          equ	781	;# 
  1679     030E                     CCP1CON         equ	782	;# 
  1680     030F                     CCP1CAP         equ	783	;# 
  1681     0310                     CCPR2           equ	784	;# 
  1682     0310                     CCPR2L          equ	784	;# 
  1683     0311                     CCPR2H          equ	785	;# 
  1684     0312                     CCP2CON         equ	786	;# 
  1685     0313                     CCP2CAP         equ	787	;# 
  1686     0314                     CCPR3           equ	788	;# 
  1687     0314                     CCPR3L          equ	788	;# 
  1688     0315                     CCPR3H          equ	789	;# 
  1689     0316                     CCP3CON         equ	790	;# 
  1690     0317                     CCP3CAP         equ	791	;# 
  1691     0318                     CCPR4           equ	792	;# 
  1692     0318                     CCPR4L          equ	792	;# 
  1693     0319                     CCPR4H          equ	793	;# 
  1694     031A                     CCP4CON         equ	794	;# 
  1695     031B                     CCP4CAP         equ	795	;# 
  1696     038C                     PWM6DC          equ	908	;# 
  1697     038C                     PWM6DCL         equ	908	;# 
  1698     038D                     PWM6DCH         equ	909	;# 
  1699     038E                     PWM6CON         equ	910	;# 
  1700     0390                     PWM7DC          equ	912	;# 
  1701     0390                     PWM7DCL         equ	912	;# 
  1702     0391                     PWM7DCH         equ	913	;# 
  1703     0392                     PWM7CON         equ	914	;# 
  1704     048C                     SMT1TMR         equ	1164	;# 
  1705     048C                     SMT1TMRL        equ	1164	;# 
  1706     048D                     SMT1TMRH        equ	1165	;# 
  1707     048E                     SMT1TMRU        equ	1166	;# 
  1708     048F                     SMT1CPR         equ	1167	;# 
  1709     048F                     SMT1CPRL        equ	1167	;# 
  1710     0490                     SMT1CPRH        equ	1168	;# 
  1711     0491                     SMT1CPRU        equ	1169	;# 
  1712     0492                     SMT1CPW         equ	1170	;# 
  1713     0492                     SMT1CPWL        equ	1170	;# 
  1714     0493                     SMT1CPWH        equ	1171	;# 
  1715     0494                     SMT1CPWU        equ	1172	;# 
  1716     0495                     SMT1PR          equ	1173	;# 
  1717     0495                     SMT1PRL         equ	1173	;# 
  1718     0496                     SMT1PRH         equ	1174	;# 
  1719     0497                     SMT1PRU         equ	1175	;# 
  1720     0498                     SMT1CON0        equ	1176	;# 
  1721     0499                     SMT1CON1        equ	1177	;# 
  1722     049A                     SMT1STAT        equ	1178	;# 
  1723     049B                     SMT1CLK         equ	1179	;# 
  1724     049C                     SMT1SIG         equ	1180	;# 
  1725     049D                     SMT1WIN         equ	1181	;# 
  1726     058C                     NCO1ACC         equ	1420	;# 
  1727     058C                     NCO1ACCL        equ	1420	;# 
  1728     058D                     NCO1ACCH        equ	1421	;# 
  1729     058E                     NCO1ACCU        equ	1422	;# 
  1730     058F                     NCO1INC         equ	1423	;# 
  1731     058F                     NCO1INCL        equ	1423	;# 
  1732     0590                     NCO1INCH        equ	1424	;# 
  1733     0591                     NCO1INCU        equ	1425	;# 
  1734     0592                     NCO1CON         equ	1426	;# 
  1735     0593                     NCO1CLK         equ	1427	;# 
  1736     059C                     TMR0L           equ	1436	;# 
  1737     059C                     TMR0            equ	1436	;# 
  1738     059D                     TMR0H           equ	1437	;# 
  1739     059D                     PR0             equ	1437	;# 
  1740     059E                     T0CON0          equ	1438	;# 
  1741     059F                     T0CON1          equ	1439	;# 
  1742     060C                     CWG1CLK         equ	1548	;# 
  1743     060C                     CWG1CLKCON      equ	1548	;# 
  1744     060D                     CWG1ISM         equ	1549	;# 
  1745     060D                     CWG1DAT         equ	1549	;# 
  1746     060E                     CWG1DBR         equ	1550	;# 
  1747     060F                     CWG1DBF         equ	1551	;# 
  1748     0610                     CWG1CON0        equ	1552	;# 
  1749     0611                     CWG1CON1        equ	1553	;# 
  1750     0612                     CWG1AS0         equ	1554	;# 
  1751     0613                     CWG1AS1         equ	1555	;# 
  1752     0614                     CWG1STR         equ	1556	;# 
  1753     0616                     CWG2CLK         equ	1558	;# 
  1754     0616                     CWG2CLKCON      equ	1558	;# 
  1755     0617                     CWG2ISM         equ	1559	;# 
  1756     0617                     CWG2DAT         equ	1559	;# 
  1757     0618                     CWG2DBR         equ	1560	;# 
  1758     0619                     CWG2DBF         equ	1561	;# 
  1759     061A                     CWG2CON0        equ	1562	;# 
  1760     061B                     CWG2CON1        equ	1563	;# 
  1761     061C                     CWG2AS0         equ	1564	;# 
  1762     061D                     CWG2AS1         equ	1565	;# 
  1763     061E                     CWG2STR         equ	1566	;# 
  1764     070C                     PIR0            equ	1804	;# 
  1765     070D                     PIR1            equ	1805	;# 
  1766     070E                     PIR2            equ	1806	;# 
  1767     070F                     PIR3            equ	1807	;# 
  1768     0710                     PIR4            equ	1808	;# 
  1769     0711                     PIR5            equ	1809	;# 
  1770     0712                     PIR6            equ	1810	;# 
  1771     0713                     PIR7            equ	1811	;# 
  1772     0714                     PIR8            equ	1812	;# 
  1773     0716                     PIE0            equ	1814	;# 
  1774     0717                     PIE1            equ	1815	;# 
  1775     0718                     PIE2            equ	1816	;# 
  1776     0719                     PIE3            equ	1817	;# 
  1777     071A                     PIE4            equ	1818	;# 
  1778     071B                     PIE5            equ	1819	;# 
  1779     071C                     PIE6            equ	1820	;# 
  1780     071D                     PIE7            equ	1821	;# 
  1781     071E                     PIE8            equ	1822	;# 
  1782     0796                     PMD0            equ	1942	;# 
  1783     0797                     PMD1            equ	1943	;# 
  1784     0798                     PMD2            equ	1944	;# 
  1785     0799                     PMD3            equ	1945	;# 
  1786     079A                     PMD4            equ	1946	;# 
  1787     079B                     PMD5            equ	1947	;# 
  1788     079C                     PMD6            equ	1948	;# 
  1789     079D                     PMD7            equ	1949	;# 
  1790     080C                     WDTCON0         equ	2060	;# 
  1791     080D                     WDTCON1         equ	2061	;# 
  1792     080E                     WDTPSL          equ	2062	;# 
  1793     080F                     WDTPSH          equ	2063	;# 
  1794     0810                     WDTTMR          equ	2064	;# 
  1795     0811                     BORCON          equ	2065	;# 
  1796     0812                     VREGCON         equ	2066	;# 
  1797     0813                     PCON0           equ	2067	;# 
  1798     0814                     PCON1           equ	2068	;# 
  1799     081A                     NVMADR          equ	2074	;# 
  1800     081A                     NVMADRL         equ	2074	;# 
  1801     081B                     NVMADRH         equ	2075	;# 
  1802     081C                     NVMDAT          equ	2076	;# 
  1803     081C                     NVMDATL         equ	2076	;# 
  1804     081D                     NVMDATH         equ	2077	;# 
  1805     081E                     NVMCON1         equ	2078	;# 
  1806     081F                     NVMCON2         equ	2079	;# 
  1807     088C                     CPUDOZE         equ	2188	;# 
  1808     088D                     OSCCON1         equ	2189	;# 
  1809     088E                     OSCCON2         equ	2190	;# 
  1810     088F                     OSCCON3         equ	2191	;# 
  1811     0890                     OSCSTAT         equ	2192	;# 
  1812     0891                     OSCEN           equ	2193	;# 
  1813     0892                     OSCTUNE         equ	2194	;# 
  1814     0893                     OSCFRQ          equ	2195	;# 
  1815     0895                     CLKRCON         equ	2197	;# 
  1816     0896                     CLKRCLK         equ	2198	;# 
  1817     0897                     MD1CON0         equ	2199	;# 
  1818     0898                     MD1CON1         equ	2200	;# 
  1819     0899                     MD1SRC          equ	2201	;# 
  1820     089A                     MD1CARL         equ	2202	;# 
  1821     089B                     MD1CARH         equ	2203	;# 
  1822     090C                     FVRCON          equ	2316	;# 
  1823     090E                     DAC1CON0        equ	2318	;# 
  1824     090F                     DAC1CON1        equ	2319	;# 
  1825     091F                     ZCDCON          equ	2335	;# 
  1826     098F                     CMOUT           equ	2447	;# 
  1827     098F                     CMSTAT          equ	2447	;# 
  1828     0990                     CM1CON0         equ	2448	;# 
  1829     0991                     CM1CON1         equ	2449	;# 
  1830     0992                     CM1NCH          equ	2450	;# 
  1831     0993                     CM1PCH          equ	2451	;# 
  1832     0994                     CM2CON0         equ	2452	;# 
  1833     0995                     CM2CON1         equ	2453	;# 
  1834     0996                     CM2NCH          equ	2454	;# 
  1835     0997                     CM2PCH          equ	2455	;# 
  1836     1E0F                     CLCDATA         equ	7695	;# 
  1837     1E10                     CLC1CON         equ	7696	;# 
  1838     1E11                     CLC1POL         equ	7697	;# 
  1839     1E12                     CLC1SEL0        equ	7698	;# 
  1840     1E13                     CLC1SEL1        equ	7699	;# 
  1841     1E14                     CLC1SEL2        equ	7700	;# 
  1842     1E15                     CLC1SEL3        equ	7701	;# 
  1843     1E16                     CLC1GLS0        equ	7702	;# 
  1844     1E17                     CLC1GLS1        equ	7703	;# 
  1845     1E18                     CLC1GLS2        equ	7704	;# 
  1846     1E19                     CLC1GLS3        equ	7705	;# 
  1847     1E1A                     CLC2CON         equ	7706	;# 
  1848     1E1B                     CLC2POL         equ	7707	;# 
  1849     1E1C                     CLC2SEL0        equ	7708	;# 
  1850     1E1D                     CLC2SEL1        equ	7709	;# 
  1851     1E1E                     CLC2SEL2        equ	7710	;# 
  1852     1E1F                     CLC2SEL3        equ	7711	;# 
  1853     1E20                     CLC2GLS0        equ	7712	;# 
  1854     1E21                     CLC2GLS1        equ	7713	;# 
  1855     1E22                     CLC2GLS2        equ	7714	;# 
  1856     1E23                     CLC2GLS3        equ	7715	;# 
  1857     1E24                     CLC3CON         equ	7716	;# 
  1858     1E25                     CLC3POL         equ	7717	;# 
  1859     1E26                     CLC3SEL0        equ	7718	;# 
  1860     1E27                     CLC3SEL1        equ	7719	;# 
  1861     1E28                     CLC3SEL2        equ	7720	;# 
  1862     1E29                     CLC3SEL3        equ	7721	;# 
  1863     1E2A                     CLC3GLS0        equ	7722	;# 
  1864     1E2B                     CLC3GLS1        equ	7723	;# 
  1865     1E2C                     CLC3GLS2        equ	7724	;# 
  1866     1E2D                     CLC3GLS3        equ	7725	;# 
  1867     1E2E                     CLC4CON         equ	7726	;# 
  1868     1E2F                     CLC4POL         equ	7727	;# 
  1869     1E30                     CLC4SEL0        equ	7728	;# 
  1870     1E31                     CLC4SEL1        equ	7729	;# 
  1871     1E32                     CLC4SEL2        equ	7730	;# 
  1872     1E33                     CLC4SEL3        equ	7731	;# 
  1873     1E34                     CLC4GLS0        equ	7732	;# 
  1874     1E35                     CLC4GLS1        equ	7733	;# 
  1875     1E36                     CLC4GLS2        equ	7734	;# 
  1876     1E37                     CLC4GLS3        equ	7735	;# 
  1877     1E8F                     PPSLOCK         equ	7823	;# 
  1878     1E90                     INTPPS          equ	7824	;# 
  1879     1E91                     T0CKIPPS        equ	7825	;# 
  1880     1E92                     T1CKIPPS        equ	7826	;# 
  1881     1E93                     T1GPPS          equ	7827	;# 
  1882     1E94                     T3CKIPPS        equ	7828	;# 
  1883     1E95                     T3GPPS          equ	7829	;# 
  1884     1E96                     T5CKIPPS        equ	7830	;# 
  1885     1E97                     T5GPPS          equ	7831	;# 
  1886     1E9C                     T2INPPS         equ	7836	;# 
  1887     1E9D                     T4INPPS         equ	7837	;# 
  1888     1E9E                     T6INPPS         equ	7838	;# 
  1889     1EA1                     CCP1PPS         equ	7841	;# 
  1890     1EA2                     CCP2PPS         equ	7842	;# 
  1891     1EA3                     CCP3PPS         equ	7843	;# 
  1892     1EA4                     CCP4PPS         equ	7844	;# 
  1893     1EA9                     SMT1WINPPS      equ	7849	;# 
  1894     1EAA                     SMT1SIGPPS      equ	7850	;# 
  1895     1EB1                     CWG1PPS         equ	7857	;# 
  1896     1EB2                     CWG2PPS         equ	7858	;# 
  1897     1EB8                     MDCARLPPS       equ	7864	;# 
  1898     1EB9                     MDCARHPPS       equ	7865	;# 
  1899     1EBA                     MDSRCPPS        equ	7866	;# 
  1900     1EBB                     CLCIN0PPS       equ	7867	;# 
  1901     1EBC                     CLCIN1PPS       equ	7868	;# 
  1902     1EBD                     CLCIN2PPS       equ	7869	;# 
  1903     1EBE                     CLCIN3PPS       equ	7870	;# 
  1904     1EC3                     ADACTPPS        equ	7875	;# 
  1905     1EC5                     SSP1CLKPPS      equ	7877	;# 
  1906     1EC6                     SSP1DATPPS      equ	7878	;# 
  1907     1EC7                     SSP1SSPPS       equ	7879	;# 
  1908     1EC8                     SSP2CLKPPS      equ	7880	;# 
  1909     1EC9                     SSP2DATPPS      equ	7881	;# 
  1910     1ECA                     SSP2SSPPS       equ	7882	;# 
  1911     1ECB                     RX1PPS          equ	7883	;# 
  1912     1ECC                     CK1PPS          equ	7884	;# 
  1913     1F10                     RA0PPS          equ	7952	;# 
  1914     1F11                     RA1PPS          equ	7953	;# 
  1915     1F12                     RA2PPS          equ	7954	;# 
  1916     1F14                     RA4PPS          equ	7956	;# 
  1917     1F15                     RA5PPS          equ	7957	;# 
  1918     1F20                     RC0PPS          equ	7968	;# 
  1919     1F21                     RC1PPS          equ	7969	;# 
  1920     1F22                     RC2PPS          equ	7970	;# 
  1921     1F23                     RC3PPS          equ	7971	;# 
  1922     1F24                     RC4PPS          equ	7972	;# 
  1923     1F25                     RC5PPS          equ	7973	;# 
  1924     1F38                     ANSELA          equ	7992	;# 
  1925     1F39                     WPUA            equ	7993	;# 
  1926     1F3A                     ODCONA          equ	7994	;# 
  1927     1F3B                     SLRCONA         equ	7995	;# 
  1928     1F3C                     INLVLA          equ	7996	;# 
  1929     1F3D                     IOCAP           equ	7997	;# 
  1930     1F3E                     IOCAN           equ	7998	;# 
  1931     1F3F                     IOCAF           equ	7999	;# 
  1932     1F4E                     ANSELC          equ	8014	;# 
  1933     1F4F                     WPUC            equ	8015	;# 
  1934     1F50                     ODCONC          equ	8016	;# 
  1935     1F51                     SLRCONC         equ	8017	;# 
  1936     1F52                     INLVLC          equ	8018	;# 
  1937     1F53                     IOCCP           equ	8019	;# 
  1938     1F54                     IOCCN           equ	8020	;# 
  1939     1F55                     IOCCF           equ	8021	;# 
  1940     1FE4                     STATUS_SHAD     equ	8164	;# 
  1941     1FE5                     WREG_SHAD       equ	8165	;# 
  1942     1FE6                     BSR_SHAD        equ	8166	;# 
  1943     1FE7                     PCLATH_SHAD     equ	8167	;# 
  1944     1FE8                     FSR0_SHAD       equ	8168	;# 
  1945     1FE8                     FSR0L_SHAD      equ	8168	;# 
  1946     1FE9                     FSR0H_SHAD      equ	8169	;# 
  1947     1FEA                     FSR1L_SHAD      equ	8170	;# 
  1948     1FEB                     FSR1H_SHAD      equ	8171	;# 
  1949     1FED                     STKPTR          equ	8173	;# 
  1950     1FEE                     TOSL            equ	8174	;# 
  1951     1FEF                     TOSH            equ	8175	;# 
  1952     0000                     INDF0           equ	0	;# 
  1953     0001                     INDF1           equ	1	;# 
  1954     0002                     PCL             equ	2	;# 
  1955     0003                     STATUS          equ	3	;# 
  1956     0004                     FSR0L           equ	4	;# 
  1957     0005                     FSR0H           equ	5	;# 
  1958     0006                     FSR1L           equ	6	;# 
  1959     0007                     FSR1H           equ	7	;# 
  1960     0008                     BSR             equ	8	;# 
  1961     0009                     WREG            equ	9	;# 
  1962     000A                     PCLATH          equ	10	;# 
  1963     000B                     INTCON          equ	11	;# 
  1964     000C                     PORTA           equ	12	;# 
  1965     000E                     PORTC           equ	14	;# 
  1966     0012                     TRISA           equ	18	;# 
  1967     0014                     TRISC           equ	20	;# 
  1968     0018                     LATA            equ	24	;# 
  1969     001A                     LATC            equ	26	;# 
  1970     008C                     ADLTH           equ	140	;# 
  1971     008C                     ADLTHL          equ	140	;# 
  1972     008D                     ADLTHH          equ	141	;# 
  1973     008E                     ADUTH           equ	142	;# 
  1974     008E                     ADUTHL          equ	142	;# 
  1975     008F                     ADUTHH          equ	143	;# 
  1976     0090                     ADERR           equ	144	;# 
  1977     0090                     ADERRL          equ	144	;# 
  1978     0091                     ADERRH          equ	145	;# 
  1979     0092                     ADSTPT          equ	146	;# 
  1980     0092                     ADSTPTL         equ	146	;# 
  1981     0093                     ADSTPTH         equ	147	;# 
  1982     0094                     ADFLTR          equ	148	;# 
  1983     0094                     ADFLTRL         equ	148	;# 
  1984     0095                     ADFLTRH         equ	149	;# 
  1985     0096                     ADACC           equ	150	;# 
  1986     0096                     ADACCL          equ	150	;# 
  1987     0097                     ADACCH          equ	151	;# 
  1988     0098                     ADACCU          equ	152	;# 
  1989     0099                     ADCNT           equ	153	;# 
  1990     009A                     ADRPT           equ	154	;# 
  1991     009B                     ADPREV          equ	155	;# 
  1992     009B                     ADPREVL         equ	155	;# 
  1993     009C                     ADPREVH         equ	156	;# 
  1994     009D                     ADRES           equ	157	;# 
  1995     009D                     ADRESL          equ	157	;# 
  1996     009E                     ADRESH          equ	158	;# 
  1997     009F                     ADPCH           equ	159	;# 
  1998     010C                     ADACQ           equ	268	;# 
  1999     010C                     ADACQL          equ	268	;# 
  2000     010D                     ADACQH          equ	269	;# 
  2001     010E                     ADCAP           equ	270	;# 
  2002     010F                     ADPRE           equ	271	;# 
  2003     010F                     ADPREL          equ	271	;# 
  2004     0110                     ADPREH          equ	272	;# 
  2005     0111                     ADCON0          equ	273	;# 
  2006     0112                     ADCON1          equ	274	;# 
  2007     0113                     ADCON2          equ	275	;# 
  2008     0114                     ADCON3          equ	276	;# 
  2009     0115                     ADSTAT          equ	277	;# 
  2010     0116                     ADREF           equ	278	;# 
  2011     0117                     ADACT           equ	279	;# 
  2012     0118                     ADCLK           equ	280	;# 
  2013     0119                     RC1REG          equ	281	;# 
  2014     0119                     RCREG           equ	281	;# 
  2015     0119                     RCREG1          equ	281	;# 
  2016     011A                     TX1REG          equ	282	;# 
  2017     011A                     TXREG1          equ	282	;# 
  2018     011A                     TXREG           equ	282	;# 
  2019     011B                     SP1BRG          equ	283	;# 
  2020     011B                     SPBRG           equ	283	;# 
  2021     011B                     SP1BRGL         equ	283	;# 
  2022     011B                     SPBRG1          equ	283	;# 
  2023     011B                     SPBRGL          equ	283	;# 
  2024     011C                     SP1BRGH         equ	284	;# 
  2025     011C                     SPBRGH          equ	284	;# 
  2026     011C                     SPBRGH1         equ	284	;# 
  2027     011D                     RC1STA          equ	285	;# 
  2028     011D                     RCSTA1          equ	285	;# 
  2029     011D                     RCSTA           equ	285	;# 
  2030     011E                     TX1STA          equ	286	;# 
  2031     011E                     TXSTA1          equ	286	;# 
  2032     011E                     TXSTA           equ	286	;# 
  2033     011F                     BAUD1CON        equ	287	;# 
  2034     011F                     BAUDCON1        equ	287	;# 
  2035     011F                     BAUDCTL1        equ	287	;# 
  2036     011F                     BAUDCON         equ	287	;# 
  2037     011F                     BAUDCTL         equ	287	;# 
  2038     018C                     SSP1BUF         equ	396	;# 
  2039     018D                     SSP1ADD         equ	397	;# 
  2040     018E                     SSP1MSK         equ	398	;# 
  2041     018F                     SSP1STAT        equ	399	;# 
  2042     0190                     SSP1CON1        equ	400	;# 
  2043     0191                     SSP1CON2        equ	401	;# 
  2044     0192                     SSP1CON3        equ	402	;# 
  2045     0196                     SSP2BUF         equ	406	;# 
  2046     0197                     SSP2ADD         equ	407	;# 
  2047     0198                     SSP2MSK         equ	408	;# 
  2048     0199                     SSP2STAT        equ	409	;# 
  2049     019A                     SSP2CON1        equ	410	;# 
  2050     019B                     SSP2CON2        equ	411	;# 
  2051     019C                     SSP2CON3        equ	412	;# 
  2052     020C                     TMR1            equ	524	;# 
  2053     020C                     TMR1L           equ	524	;# 
  2054     020D                     TMR1H           equ	525	;# 
  2055     020E                     T1CON           equ	526	;# 
  2056     020E                     TMR1CON         equ	526	;# 
  2057     020F                     T1GCON          equ	527	;# 
  2058     020F                     TMR1GCON        equ	527	;# 
  2059     0210                     T1GATE          equ	528	;# 
  2060     0210                     TMR1GATE        equ	528	;# 
  2061     0211                     T1CLK           equ	529	;# 
  2062     0211                     TMR1CLK         equ	529	;# 
  2063     0211                     PR1             equ	529	;# 
  2064     0212                     TMR3            equ	530	;# 
  2065     0212                     TMR3L           equ	530	;# 
  2066     0213                     TMR3H           equ	531	;# 
  2067     0214                     T3CON           equ	532	;# 
  2068     0214                     TMR3CON         equ	532	;# 
  2069     0215                     T3GCON          equ	533	;# 
  2070     0215                     TMR3GCON        equ	533	;# 
  2071     0216                     T3GATE          equ	534	;# 
  2072     0216                     TMR3GATE        equ	534	;# 
  2073     0217                     T3CLK           equ	535	;# 
  2074     0217                     TMR3CLK         equ	535	;# 
  2075     0217                     PR3             equ	535	;# 
  2076     0218                     TMR5            equ	536	;# 
  2077     0218                     TMR5L           equ	536	;# 
  2078     0219                     TMR5H           equ	537	;# 
  2079     021A                     T5CON           equ	538	;# 
  2080     021A                     TMR5CON         equ	538	;# 
  2081     021B                     T5GCON          equ	539	;# 
  2082     021B                     TMR5GCON        equ	539	;# 
  2083     021C                     T5GATE          equ	540	;# 
  2084     021C                     TMR5GATE        equ	540	;# 
  2085     021D                     T5CLK           equ	541	;# 
  2086     021D                     TMR5CLK         equ	541	;# 
  2087     021D                     PR5             equ	541	;# 
  2088     021E                     CCPTMRS0        equ	542	;# 
  2089     021F                     CCPTMRS1        equ	543	;# 
  2090     028C                     T2TMR           equ	652	;# 
  2091     028C                     TMR2            equ	652	;# 
  2092     028D                     T2PR            equ	653	;# 
  2093     028D                     PR2             equ	653	;# 
  2094     028E                     T2CON           equ	654	;# 
  2095     028F                     T2HLT           equ	655	;# 
  2096     0290                     T2CLKCON        equ	656	;# 
  2097     0291                     T2RST           equ	657	;# 
  2098     0292                     T4TMR           equ	658	;# 
  2099     0292                     TMR4            equ	658	;# 
  2100     0293                     T4PR            equ	659	;# 
  2101     0293                     PR4             equ	659	;# 
  2102     0294                     T4CON           equ	660	;# 
  2103     0295                     T4HLT           equ	661	;# 
  2104     0296                     T4CLKCON        equ	662	;# 
  2105     0297                     T4RST           equ	663	;# 
  2106     0298                     T6TMR           equ	664	;# 
  2107     0298                     TMR6            equ	664	;# 
  2108     0299                     T6PR            equ	665	;# 
  2109     0299                     PR6             equ	665	;# 
  2110     029A                     T6CON           equ	666	;# 
  2111     029B                     T6HLT           equ	667	;# 
  2112     029C                     T6CLKCON        equ	668	;# 
  2113     029D                     T6RST           equ	669	;# 
  2114     029F                     ADCPCON0        equ	671	;# 
  2115     030C                     CCPR1           equ	780	;# 
  2116     030C                     CCPR1L          equ	780	;# 
  2117     030D                     CCPR1H          equ	781	;# 
  2118     030E                     CCP1CON         equ	782	;# 
  2119     030F                     CCP1CAP         equ	783	;# 
  2120     0310                     CCPR2           equ	784	;# 
  2121     0310                     CCPR2L          equ	784	;# 
  2122     0311                     CCPR2H          equ	785	;# 
  2123     0312                     CCP2CON         equ	786	;# 
  2124     0313                     CCP2CAP         equ	787	;# 
  2125     0314                     CCPR3           equ	788	;# 
  2126     0314                     CCPR3L          equ	788	;# 
  2127     0315                     CCPR3H          equ	789	;# 
  2128     0316                     CCP3CON         equ	790	;# 
  2129     0317                     CCP3CAP         equ	791	;# 
  2130     0318                     CCPR4           equ	792	;# 
  2131     0318                     CCPR4L          equ	792	;# 
  2132     0319                     CCPR4H          equ	793	;# 
  2133     031A                     CCP4CON         equ	794	;# 
  2134     031B                     CCP4CAP         equ	795	;# 
  2135     038C                     PWM6DC          equ	908	;# 
  2136     038C                     PWM6DCL         equ	908	;# 
  2137     038D                     PWM6DCH         equ	909	;# 
  2138     038E                     PWM6CON         equ	910	;# 
  2139     0390                     PWM7DC          equ	912	;# 
  2140     0390                     PWM7DCL         equ	912	;# 
  2141     0391                     PWM7DCH         equ	913	;# 
  2142     0392                     PWM7CON         equ	914	;# 
  2143     048C                     SMT1TMR         equ	1164	;# 
  2144     048C                     SMT1TMRL        equ	1164	;# 
  2145     048D                     SMT1TMRH        equ	1165	;# 
  2146     048E                     SMT1TMRU        equ	1166	;# 
  2147     048F                     SMT1CPR         equ	1167	;# 
  2148     048F                     SMT1CPRL        equ	1167	;# 
  2149     0490                     SMT1CPRH        equ	1168	;# 
  2150     0491                     SMT1CPRU        equ	1169	;# 
  2151     0492                     SMT1CPW         equ	1170	;# 
  2152     0492                     SMT1CPWL        equ	1170	;# 
  2153     0493                     SMT1CPWH        equ	1171	;# 
  2154     0494                     SMT1CPWU        equ	1172	;# 
  2155     0495                     SMT1PR          equ	1173	;# 
  2156     0495                     SMT1PRL         equ	1173	;# 
  2157     0496                     SMT1PRH         equ	1174	;# 
  2158     0497                     SMT1PRU         equ	1175	;# 
  2159     0498                     SMT1CON0        equ	1176	;# 
  2160     0499                     SMT1CON1        equ	1177	;# 
  2161     049A                     SMT1STAT        equ	1178	;# 
  2162     049B                     SMT1CLK         equ	1179	;# 
  2163     049C                     SMT1SIG         equ	1180	;# 
  2164     049D                     SMT1WIN         equ	1181	;# 
  2165     058C                     NCO1ACC         equ	1420	;# 
  2166     058C                     NCO1ACCL        equ	1420	;# 
  2167     058D                     NCO1ACCH        equ	1421	;# 
  2168     058E                     NCO1ACCU        equ	1422	;# 
  2169     058F                     NCO1INC         equ	1423	;# 
  2170     058F                     NCO1INCL        equ	1423	;# 
  2171     0590                     NCO1INCH        equ	1424	;# 
  2172     0591                     NCO1INCU        equ	1425	;# 
  2173     0592                     NCO1CON         equ	1426	;# 
  2174     0593                     NCO1CLK         equ	1427	;# 
  2175     059C                     TMR0L           equ	1436	;# 
  2176     059C                     TMR0            equ	1436	;# 
  2177     059D                     TMR0H           equ	1437	;# 
  2178     059D                     PR0             equ	1437	;# 
  2179     059E                     T0CON0          equ	1438	;# 
  2180     059F                     T0CON1          equ	1439	;# 
  2181     060C                     CWG1CLK         equ	1548	;# 
  2182     060C                     CWG1CLKCON      equ	1548	;# 
  2183     060D                     CWG1ISM         equ	1549	;# 
  2184     060D                     CWG1DAT         equ	1549	;# 
  2185     060E                     CWG1DBR         equ	1550	;# 
  2186     060F                     CWG1DBF         equ	1551	;# 
  2187     0610                     CWG1CON0        equ	1552	;# 
  2188     0611                     CWG1CON1        equ	1553	;# 
  2189     0612                     CWG1AS0         equ	1554	;# 
  2190     0613                     CWG1AS1         equ	1555	;# 
  2191     0614                     CWG1STR         equ	1556	;# 
  2192     0616                     CWG2CLK         equ	1558	;# 
  2193     0616                     CWG2CLKCON      equ	1558	;# 
  2194     0617                     CWG2ISM         equ	1559	;# 
  2195     0617                     CWG2DAT         equ	1559	;# 
  2196     0618                     CWG2DBR         equ	1560	;# 
  2197     0619                     CWG2DBF         equ	1561	;# 
  2198     061A                     CWG2CON0        equ	1562	;# 
  2199     061B                     CWG2CON1        equ	1563	;# 
  2200     061C                     CWG2AS0         equ	1564	;# 
  2201     061D                     CWG2AS1         equ	1565	;# 
  2202     061E                     CWG2STR         equ	1566	;# 
  2203     070C                     PIR0            equ	1804	;# 
  2204     070D                     PIR1            equ	1805	;# 
  2205     070E                     PIR2            equ	1806	;# 
  2206     070F                     PIR3            equ	1807	;# 
  2207     0710                     PIR4            equ	1808	;# 
  2208     0711                     PIR5            equ	1809	;# 
  2209     0712                     PIR6            equ	1810	;# 
  2210     0713                     PIR7            equ	1811	;# 
  2211     0714                     PIR8            equ	1812	;# 
  2212     0716                     PIE0            equ	1814	;# 
  2213     0717                     PIE1            equ	1815	;# 
  2214     0718                     PIE2            equ	1816	;# 
  2215     0719                     PIE3            equ	1817	;# 
  2216     071A                     PIE4            equ	1818	;# 
  2217     071B                     PIE5            equ	1819	;# 
  2218     071C                     PIE6            equ	1820	;# 
  2219     071D                     PIE7            equ	1821	;# 
  2220     071E                     PIE8            equ	1822	;# 
  2221     0796                     PMD0            equ	1942	;# 
  2222     0797                     PMD1            equ	1943	;# 
  2223     0798                     PMD2            equ	1944	;# 
  2224     0799                     PMD3            equ	1945	;# 
  2225     079A                     PMD4            equ	1946	;# 
  2226     079B                     PMD5            equ	1947	;# 
  2227     079C                     PMD6            equ	1948	;# 
  2228     079D                     PMD7            equ	1949	;# 
  2229     080C                     WDTCON0         equ	2060	;# 
  2230     080D                     WDTCON1         equ	2061	;# 
  2231     080E                     WDTPSL          equ	2062	;# 
  2232     080F                     WDTPSH          equ	2063	;# 
  2233     0810                     WDTTMR          equ	2064	;# 
  2234     0811                     BORCON          equ	2065	;# 
  2235     0812                     VREGCON         equ	2066	;# 
  2236     0813                     PCON0           equ	2067	;# 
  2237     0814                     PCON1           equ	2068	;# 
  2238     081A                     NVMADR          equ	2074	;# 
  2239     081A                     NVMADRL         equ	2074	;# 
  2240     081B                     NVMADRH         equ	2075	;# 
  2241     081C                     NVMDAT          equ	2076	;# 
  2242     081C                     NVMDATL         equ	2076	;# 
  2243     081D                     NVMDATH         equ	2077	;# 
  2244     081E                     NVMCON1         equ	2078	;# 
  2245     081F                     NVMCON2         equ	2079	;# 
  2246     088C                     CPUDOZE         equ	2188	;# 
  2247     088D                     OSCCON1         equ	2189	;# 
  2248     088E                     OSCCON2         equ	2190	;# 
  2249     088F                     OSCCON3         equ	2191	;# 
  2250     0890                     OSCSTAT         equ	2192	;# 
  2251     0891                     OSCEN           equ	2193	;# 
  2252     0892                     OSCTUNE         equ	2194	;# 
  2253     0893                     OSCFRQ          equ	2195	;# 
  2254     0895                     CLKRCON         equ	2197	;# 
  2255     0896                     CLKRCLK         equ	2198	;# 
  2256     0897                     MD1CON0         equ	2199	;# 
  2257     0898                     MD1CON1         equ	2200	;# 
  2258     0899                     MD1SRC          equ	2201	;# 
  2259     089A                     MD1CARL         equ	2202	;# 
  2260     089B                     MD1CARH         equ	2203	;# 
  2261     090C                     FVRCON          equ	2316	;# 
  2262     090E                     DAC1CON0        equ	2318	;# 
  2263     090F                     DAC1CON1        equ	2319	;# 
  2264     091F                     ZCDCON          equ	2335	;# 
  2265     098F                     CMOUT           equ	2447	;# 
  2266     098F                     CMSTAT          equ	2447	;# 
  2267     0990                     CM1CON0         equ	2448	;# 
  2268     0991                     CM1CON1         equ	2449	;# 
  2269     0992                     CM1NCH          equ	2450	;# 
  2270     0993                     CM1PCH          equ	2451	;# 
  2271     0994                     CM2CON0         equ	2452	;# 
  2272     0995                     CM2CON1         equ	2453	;# 
  2273     0996                     CM2NCH          equ	2454	;# 
  2274     0997                     CM2PCH          equ	2455	;# 
  2275     1E0F                     CLCDATA         equ	7695	;# 
  2276     1E10                     CLC1CON         equ	7696	;# 
  2277     1E11                     CLC1POL         equ	7697	;# 
  2278     1E12                     CLC1SEL0        equ	7698	;# 
  2279     1E13                     CLC1SEL1        equ	7699	;# 
  2280     1E14                     CLC1SEL2        equ	7700	;# 
  2281     1E15                     CLC1SEL3        equ	7701	;# 
  2282     1E16                     CLC1GLS0        equ	7702	;# 
  2283     1E17                     CLC1GLS1        equ	7703	;# 
  2284     1E18                     CLC1GLS2        equ	7704	;# 
  2285     1E19                     CLC1GLS3        equ	7705	;# 
  2286     1E1A                     CLC2CON         equ	7706	;# 
  2287     1E1B                     CLC2POL         equ	7707	;# 
  2288     1E1C                     CLC2SEL0        equ	7708	;# 
  2289     1E1D                     CLC2SEL1        equ	7709	;# 
  2290     1E1E                     CLC2SEL2        equ	7710	;# 
  2291     1E1F                     CLC2SEL3        equ	7711	;# 
  2292     1E20                     CLC2GLS0        equ	7712	;# 
  2293     1E21                     CLC2GLS1        equ	7713	;# 
  2294     1E22                     CLC2GLS2        equ	7714	;# 
  2295     1E23                     CLC2GLS3        equ	7715	;# 
  2296     1E24                     CLC3CON         equ	7716	;# 
  2297     1E25                     CLC3POL         equ	7717	;# 
  2298     1E26                     CLC3SEL0        equ	7718	;# 
  2299     1E27                     CLC3SEL1        equ	7719	;# 
  2300     1E28                     CLC3SEL2        equ	7720	;# 
  2301     1E29                     CLC3SEL3        equ	7721	;# 
  2302     1E2A                     CLC3GLS0        equ	7722	;# 
  2303     1E2B                     CLC3GLS1        equ	7723	;# 
  2304     1E2C                     CLC3GLS2        equ	7724	;# 
  2305     1E2D                     CLC3GLS3        equ	7725	;# 
  2306     1E2E                     CLC4CON         equ	7726	;# 
  2307     1E2F                     CLC4POL         equ	7727	;# 
  2308     1E30                     CLC4SEL0        equ	7728	;# 
  2309     1E31                     CLC4SEL1        equ	7729	;# 
  2310     1E32                     CLC4SEL2        equ	7730	;# 
  2311     1E33                     CLC4SEL3        equ	7731	;# 
  2312     1E34                     CLC4GLS0        equ	7732	;# 
  2313     1E35                     CLC4GLS1        equ	7733	;# 
  2314     1E36                     CLC4GLS2        equ	7734	;# 
  2315     1E37                     CLC4GLS3        equ	7735	;# 
  2316     1E8F                     PPSLOCK         equ	7823	;# 
  2317     1E90                     INTPPS          equ	7824	;# 
  2318     1E91                     T0CKIPPS        equ	7825	;# 
  2319     1E92                     T1CKIPPS        equ	7826	;# 
  2320     1E93                     T1GPPS          equ	7827	;# 
  2321     1E94                     T3CKIPPS        equ	7828	;# 
  2322     1E95                     T3GPPS          equ	7829	;# 
  2323     1E96                     T5CKIPPS        equ	7830	;# 
  2324     1E97                     T5GPPS          equ	7831	;# 
  2325     1E9C                     T2INPPS         equ	7836	;# 
  2326     1E9D                     T4INPPS         equ	7837	;# 
  2327     1E9E                     T6INPPS         equ	7838	;# 
  2328     1EA1                     CCP1PPS         equ	7841	;# 
  2329     1EA2                     CCP2PPS         equ	7842	;# 
  2330     1EA3                     CCP3PPS         equ	7843	;# 
  2331     1EA4                     CCP4PPS         equ	7844	;# 
  2332     1EA9                     SMT1WINPPS      equ	7849	;# 
  2333     1EAA                     SMT1SIGPPS      equ	7850	;# 
  2334     1EB1                     CWG1PPS         equ	7857	;# 
  2335     1EB2                     CWG2PPS         equ	7858	;# 
  2336     1EB8                     MDCARLPPS       equ	7864	;# 
  2337     1EB9                     MDCARHPPS       equ	7865	;# 
  2338     1EBA                     MDSRCPPS        equ	7866	;# 
  2339     1EBB                     CLCIN0PPS       equ	7867	;# 
  2340     1EBC                     CLCIN1PPS       equ	7868	;# 
  2341     1EBD                     CLCIN2PPS       equ	7869	;# 
  2342     1EBE                     CLCIN3PPS       equ	7870	;# 
  2343     1EC3                     ADACTPPS        equ	7875	;# 
  2344     1EC5                     SSP1CLKPPS      equ	7877	;# 
  2345     1EC6                     SSP1DATPPS      equ	7878	;# 
  2346     1EC7                     SSP1SSPPS       equ	7879	;# 
  2347     1EC8                     SSP2CLKPPS      equ	7880	;# 
  2348     1EC9                     SSP2DATPPS      equ	7881	;# 
  2349     1ECA                     SSP2SSPPS       equ	7882	;# 
  2350     1ECB                     RX1PPS          equ	7883	;# 
  2351     1ECC                     CK1PPS          equ	7884	;# 
  2352     1F10                     RA0PPS          equ	7952	;# 
  2353     1F11                     RA1PPS          equ	7953	;# 
  2354     1F12                     RA2PPS          equ	7954	;# 
  2355     1F14                     RA4PPS          equ	7956	;# 
  2356     1F15                     RA5PPS          equ	7957	;# 
  2357     1F20                     RC0PPS          equ	7968	;# 
  2358     1F21                     RC1PPS          equ	7969	;# 
  2359     1F22                     RC2PPS          equ	7970	;# 
  2360     1F23                     RC3PPS          equ	7971	;# 
  2361     1F24                     RC4PPS          equ	7972	;# 
  2362     1F25                     RC5PPS          equ	7973	;# 
  2363     1F38                     ANSELA          equ	7992	;# 
  2364     1F39                     WPUA            equ	7993	;# 
  2365     1F3A                     ODCONA          equ	7994	;# 
  2366     1F3B                     SLRCONA         equ	7995	;# 
  2367     1F3C                     INLVLA          equ	7996	;# 
  2368     1F3D                     IOCAP           equ	7997	;# 
  2369     1F3E                     IOCAN           equ	7998	;# 
  2370     1F3F                     IOCAF           equ	7999	;# 
  2371     1F4E                     ANSELC          equ	8014	;# 
  2372     1F4F                     WPUC            equ	8015	;# 
  2373     1F50                     ODCONC          equ	8016	;# 
  2374     1F51                     SLRCONC         equ	8017	;# 
  2375     1F52                     INLVLC          equ	8018	;# 
  2376     1F53                     IOCCP           equ	8019	;# 
  2377     1F54                     IOCCN           equ	8020	;# 
  2378     1F55                     IOCCF           equ	8021	;# 
  2379     1FE4                     STATUS_SHAD     equ	8164	;# 
  2380     1FE5                     WREG_SHAD       equ	8165	;# 
  2381     1FE6                     BSR_SHAD        equ	8166	;# 
  2382     1FE7                     PCLATH_SHAD     equ	8167	;# 
  2383     1FE8                     FSR0_SHAD       equ	8168	;# 
  2384     1FE8                     FSR0L_SHAD      equ	8168	;# 
  2385     1FE9                     FSR0H_SHAD      equ	8169	;# 
  2386     1FEA                     FSR1L_SHAD      equ	8170	;# 
  2387     1FEB                     FSR1H_SHAD      equ	8171	;# 
  2388     1FED                     STKPTR          equ	8173	;# 
  2389     1FEE                     TOSL            equ	8174	;# 
  2390     1FEF                     TOSH            equ	8175	;# 
  2391     0000                     INDF0           equ	0	;# 
  2392     0001                     INDF1           equ	1	;# 
  2393     0002                     PCL             equ	2	;# 
  2394     0003                     STATUS          equ	3	;# 
  2395     0004                     FSR0L           equ	4	;# 
  2396     0005                     FSR0H           equ	5	;# 
  2397     0006                     FSR1L           equ	6	;# 
  2398     0007                     FSR1H           equ	7	;# 
  2399     0008                     BSR             equ	8	;# 
  2400     0009                     WREG            equ	9	;# 
  2401     000A                     PCLATH          equ	10	;# 
  2402     000B                     INTCON          equ	11	;# 
  2403     000C                     PORTA           equ	12	;# 
  2404     000E                     PORTC           equ	14	;# 
  2405     0012                     TRISA           equ	18	;# 
  2406     0014                     TRISC           equ	20	;# 
  2407     0018                     LATA            equ	24	;# 
  2408     001A                     LATC            equ	26	;# 
  2409     008C                     ADLTH           equ	140	;# 
  2410     008C                     ADLTHL          equ	140	;# 
  2411     008D                     ADLTHH          equ	141	;# 
  2412     008E                     ADUTH           equ	142	;# 
  2413     008E                     ADUTHL          equ	142	;# 
  2414     008F                     ADUTHH          equ	143	;# 
  2415     0090                     ADERR           equ	144	;# 
  2416     0090                     ADERRL          equ	144	;# 
  2417     0091                     ADERRH          equ	145	;# 
  2418     0092                     ADSTPT          equ	146	;# 
  2419     0092                     ADSTPTL         equ	146	;# 
  2420     0093                     ADSTPTH         equ	147	;# 
  2421     0094                     ADFLTR          equ	148	;# 
  2422     0094                     ADFLTRL         equ	148	;# 
  2423     0095                     ADFLTRH         equ	149	;# 
  2424     0096                     ADACC           equ	150	;# 
  2425     0096                     ADACCL          equ	150	;# 
  2426     0097                     ADACCH          equ	151	;# 
  2427     0098                     ADACCU          equ	152	;# 
  2428     0099                     ADCNT           equ	153	;# 
  2429     009A                     ADRPT           equ	154	;# 
  2430     009B                     ADPREV          equ	155	;# 
  2431     009B                     ADPREVL         equ	155	;# 
  2432     009C                     ADPREVH         equ	156	;# 
  2433     009D                     ADRES           equ	157	;# 
  2434     009D                     ADRESL          equ	157	;# 
  2435     009E                     ADRESH          equ	158	;# 
  2436     009F                     ADPCH           equ	159	;# 
  2437     010C                     ADACQ           equ	268	;# 
  2438     010C                     ADACQL          equ	268	;# 
  2439     010D                     ADACQH          equ	269	;# 
  2440     010E                     ADCAP           equ	270	;# 
  2441     010F                     ADPRE           equ	271	;# 
  2442     010F                     ADPREL          equ	271	;# 
  2443     0110                     ADPREH          equ	272	;# 
  2444     0111                     ADCON0          equ	273	;# 
  2445     0112                     ADCON1          equ	274	;# 
  2446     0113                     ADCON2          equ	275	;# 
  2447     0114                     ADCON3          equ	276	;# 
  2448     0115                     ADSTAT          equ	277	;# 
  2449     0116                     ADREF           equ	278	;# 
  2450     0117                     ADACT           equ	279	;# 
  2451     0118                     ADCLK           equ	280	;# 
  2452     0119                     RC1REG          equ	281	;# 
  2453     0119                     RCREG           equ	281	;# 
  2454     0119                     RCREG1          equ	281	;# 
  2455     011A                     TX1REG          equ	282	;# 
  2456     011A                     TXREG1          equ	282	;# 
  2457     011A                     TXREG           equ	282	;# 
  2458     011B                     SP1BRG          equ	283	;# 
  2459     011B                     SPBRG           equ	283	;# 
  2460     011B                     SP1BRGL         equ	283	;# 
  2461     011B                     SPBRG1          equ	283	;# 
  2462     011B                     SPBRGL          equ	283	;# 
  2463     011C                     SP1BRGH         equ	284	;# 
  2464     011C                     SPBRGH          equ	284	;# 
  2465     011C                     SPBRGH1         equ	284	;# 
  2466     011D                     RC1STA          equ	285	;# 
  2467     011D                     RCSTA1          equ	285	;# 
  2468     011D                     RCSTA           equ	285	;# 
  2469     011E                     TX1STA          equ	286	;# 
  2470     011E                     TXSTA1          equ	286	;# 
  2471     011E                     TXSTA           equ	286	;# 
  2472     011F                     BAUD1CON        equ	287	;# 
  2473     011F                     BAUDCON1        equ	287	;# 
  2474     011F                     BAUDCTL1        equ	287	;# 
  2475     011F                     BAUDCON         equ	287	;# 
  2476     011F                     BAUDCTL         equ	287	;# 
  2477     018C                     SSP1BUF         equ	396	;# 
  2478     018D                     SSP1ADD         equ	397	;# 
  2479     018E                     SSP1MSK         equ	398	;# 
  2480     018F                     SSP1STAT        equ	399	;# 
  2481     0190                     SSP1CON1        equ	400	;# 
  2482     0191                     SSP1CON2        equ	401	;# 
  2483     0192                     SSP1CON3        equ	402	;# 
  2484     0196                     SSP2BUF         equ	406	;# 
  2485     0197                     SSP2ADD         equ	407	;# 
  2486     0198                     SSP2MSK         equ	408	;# 
  2487     0199                     SSP2STAT        equ	409	;# 
  2488     019A                     SSP2CON1        equ	410	;# 
  2489     019B                     SSP2CON2        equ	411	;# 
  2490     019C                     SSP2CON3        equ	412	;# 
  2491     020C                     TMR1            equ	524	;# 
  2492     020C                     TMR1L           equ	524	;# 
  2493     020D                     TMR1H           equ	525	;# 
  2494     020E                     T1CON           equ	526	;# 
  2495     020E                     TMR1CON         equ	526	;# 
  2496     020F                     T1GCON          equ	527	;# 
  2497     020F                     TMR1GCON        equ	527	;# 
  2498     0210                     T1GATE          equ	528	;# 
  2499     0210                     TMR1GATE        equ	528	;# 
  2500     0211                     T1CLK           equ	529	;# 
  2501     0211                     TMR1CLK         equ	529	;# 
  2502     0211                     PR1             equ	529	;# 
  2503     0212                     TMR3            equ	530	;# 
  2504     0212                     TMR3L           equ	530	;# 
  2505     0213                     TMR3H           equ	531	;# 
  2506     0214                     T3CON           equ	532	;# 
  2507     0214                     TMR3CON         equ	532	;# 
  2508     0215                     T3GCON          equ	533	;# 
  2509     0215                     TMR3GCON        equ	533	;# 
  2510     0216                     T3GATE          equ	534	;# 
  2511     0216                     TMR3GATE        equ	534	;# 
  2512     0217                     T3CLK           equ	535	;# 
  2513     0217                     TMR3CLK         equ	535	;# 
  2514     0217                     PR3             equ	535	;# 
  2515     0218                     TMR5            equ	536	;# 
  2516     0218                     TMR5L           equ	536	;# 
  2517     0219                     TMR5H           equ	537	;# 
  2518     021A                     T5CON           equ	538	;# 
  2519     021A                     TMR5CON         equ	538	;# 
  2520     021B                     T5GCON          equ	539	;# 
  2521     021B                     TMR5GCON        equ	539	;# 
  2522     021C                     T5GATE          equ	540	;# 
  2523     021C                     TMR5GATE        equ	540	;# 
  2524     021D                     T5CLK           equ	541	;# 
  2525     021D                     TMR5CLK         equ	541	;# 
  2526     021D                     PR5             equ	541	;# 
  2527     021E                     CCPTMRS0        equ	542	;# 
  2528     021F                     CCPTMRS1        equ	543	;# 
  2529     028C                     T2TMR           equ	652	;# 
  2530     028C                     TMR2            equ	652	;# 
  2531     028D                     T2PR            equ	653	;# 
  2532     028D                     PR2             equ	653	;# 
  2533     028E                     T2CON           equ	654	;# 
  2534     028F                     T2HLT           equ	655	;# 
  2535     0290                     T2CLKCON        equ	656	;# 
  2536     0291                     T2RST           equ	657	;# 
  2537     0292                     T4TMR           equ	658	;# 
  2538     0292                     TMR4            equ	658	;# 
  2539     0293                     T4PR            equ	659	;# 
  2540     0293                     PR4             equ	659	;# 
  2541     0294                     T4CON           equ	660	;# 
  2542     0295                     T4HLT           equ	661	;# 
  2543     0296                     T4CLKCON        equ	662	;# 
  2544     0297                     T4RST           equ	663	;# 
  2545     0298                     T6TMR           equ	664	;# 
  2546     0298                     TMR6            equ	664	;# 
  2547     0299                     T6PR            equ	665	;# 
  2548     0299                     PR6             equ	665	;# 
  2549     029A                     T6CON           equ	666	;# 
  2550     029B                     T6HLT           equ	667	;# 
  2551     029C                     T6CLKCON        equ	668	;# 
  2552     029D                     T6RST           equ	669	;# 
  2553     029F                     ADCPCON0        equ	671	;# 
  2554     030C                     CCPR1           equ	780	;# 
  2555     030C                     CCPR1L          equ	780	;# 
  2556     030D                     CCPR1H          equ	781	;# 
  2557     030E                     CCP1CON         equ	782	;# 
  2558     030F                     CCP1CAP         equ	783	;# 
  2559     0310                     CCPR2           equ	784	;# 
  2560     0310                     CCPR2L          equ	784	;# 
  2561     0311                     CCPR2H          equ	785	;# 
  2562     0312                     CCP2CON         equ	786	;# 
  2563     0313                     CCP2CAP         equ	787	;# 
  2564     0314                     CCPR3           equ	788	;# 
  2565     0314                     CCPR3L          equ	788	;# 
  2566     0315                     CCPR3H          equ	789	;# 
  2567     0316                     CCP3CON         equ	790	;# 
  2568     0317                     CCP3CAP         equ	791	;# 
  2569     0318                     CCPR4           equ	792	;# 
  2570     0318                     CCPR4L          equ	792	;# 
  2571     0319                     CCPR4H          equ	793	;# 
  2572     031A                     CCP4CON         equ	794	;# 
  2573     031B                     CCP4CAP         equ	795	;# 
  2574     038C                     PWM6DC          equ	908	;# 
  2575     038C                     PWM6DCL         equ	908	;# 
  2576     038D                     PWM6DCH         equ	909	;# 
  2577     038E                     PWM6CON         equ	910	;# 
  2578     0390                     PWM7DC          equ	912	;# 
  2579     0390                     PWM7DCL         equ	912	;# 
  2580     0391                     PWM7DCH         equ	913	;# 
  2581     0392                     PWM7CON         equ	914	;# 
  2582     048C                     SMT1TMR         equ	1164	;# 
  2583     048C                     SMT1TMRL        equ	1164	;# 
  2584     048D                     SMT1TMRH        equ	1165	;# 
  2585     048E                     SMT1TMRU        equ	1166	;# 
  2586     048F                     SMT1CPR         equ	1167	;# 
  2587     048F                     SMT1CPRL        equ	1167	;# 
  2588     0490                     SMT1CPRH        equ	1168	;# 
  2589     0491                     SMT1CPRU        equ	1169	;# 
  2590     0492                     SMT1CPW         equ	1170	;# 
  2591     0492                     SMT1CPWL        equ	1170	;# 
  2592     0493                     SMT1CPWH        equ	1171	;# 
  2593     0494                     SMT1CPWU        equ	1172	;# 
  2594     0495                     SMT1PR          equ	1173	;# 
  2595     0495                     SMT1PRL         equ	1173	;# 
  2596     0496                     SMT1PRH         equ	1174	;# 
  2597     0497                     SMT1PRU         equ	1175	;# 
  2598     0498                     SMT1CON0        equ	1176	;# 
  2599     0499                     SMT1CON1        equ	1177	;# 
  2600     049A                     SMT1STAT        equ	1178	;# 
  2601     049B                     SMT1CLK         equ	1179	;# 
  2602     049C                     SMT1SIG         equ	1180	;# 
  2603     049D                     SMT1WIN         equ	1181	;# 
  2604     058C                     NCO1ACC         equ	1420	;# 
  2605     058C                     NCO1ACCL        equ	1420	;# 
  2606     058D                     NCO1ACCH        equ	1421	;# 
  2607     058E                     NCO1ACCU        equ	1422	;# 
  2608     058F                     NCO1INC         equ	1423	;# 
  2609     058F                     NCO1INCL        equ	1423	;# 
  2610     0590                     NCO1INCH        equ	1424	;# 
  2611     0591                     NCO1INCU        equ	1425	;# 
  2612     0592                     NCO1CON         equ	1426	;# 
  2613     0593                     NCO1CLK         equ	1427	;# 
  2614     059C                     TMR0L           equ	1436	;# 
  2615     059C                     TMR0            equ	1436	;# 
  2616     059D                     TMR0H           equ	1437	;# 
  2617     059D                     PR0             equ	1437	;# 
  2618     059E                     T0CON0          equ	1438	;# 
  2619     059F                     T0CON1          equ	1439	;# 
  2620     060C                     CWG1CLK         equ	1548	;# 
  2621     060C                     CWG1CLKCON      equ	1548	;# 
  2622     060D                     CWG1ISM         equ	1549	;# 
  2623     060D                     CWG1DAT         equ	1549	;# 
  2624     060E                     CWG1DBR         equ	1550	;# 
  2625     060F                     CWG1DBF         equ	1551	;# 
  2626     0610                     CWG1CON0        equ	1552	;# 
  2627     0611                     CWG1CON1        equ	1553	;# 
  2628     0612                     CWG1AS0         equ	1554	;# 
  2629     0613                     CWG1AS1         equ	1555	;# 
  2630     0614                     CWG1STR         equ	1556	;# 
  2631     0616                     CWG2CLK         equ	1558	;# 
  2632     0616                     CWG2CLKCON      equ	1558	;# 
  2633     0617                     CWG2ISM         equ	1559	;# 
  2634     0617                     CWG2DAT         equ	1559	;# 
  2635     0618                     CWG2DBR         equ	1560	;# 
  2636     0619                     CWG2DBF         equ	1561	;# 
  2637     061A                     CWG2CON0        equ	1562	;# 
  2638     061B                     CWG2CON1        equ	1563	;# 
  2639     061C                     CWG2AS0         equ	1564	;# 
  2640     061D                     CWG2AS1         equ	1565	;# 
  2641     061E                     CWG2STR         equ	1566	;# 
  2642     070C                     PIR0            equ	1804	;# 
  2643     070D                     PIR1            equ	1805	;# 
  2644     070E                     PIR2            equ	1806	;# 
  2645     070F                     PIR3            equ	1807	;# 
  2646     0710                     PIR4            equ	1808	;# 
  2647     0711                     PIR5            equ	1809	;# 
  2648     0712                     PIR6            equ	1810	;# 
  2649     0713                     PIR7            equ	1811	;# 
  2650     0714                     PIR8            equ	1812	;# 
  2651     0716                     PIE0            equ	1814	;# 
  2652     0717                     PIE1            equ	1815	;# 
  2653     0718                     PIE2            equ	1816	;# 
  2654     0719                     PIE3            equ	1817	;# 
  2655     071A                     PIE4            equ	1818	;# 
  2656     071B                     PIE5            equ	1819	;# 
  2657     071C                     PIE6            equ	1820	;# 
  2658     071D                     PIE7            equ	1821	;# 
  2659     071E                     PIE8            equ	1822	;# 
  2660     0796                     PMD0            equ	1942	;# 
  2661     0797                     PMD1            equ	1943	;# 
  2662     0798                     PMD2            equ	1944	;# 
  2663     0799                     PMD3            equ	1945	;# 
  2664     079A                     PMD4            equ	1946	;# 
  2665     079B                     PMD5            equ	1947	;# 
  2666     079C                     PMD6            equ	1948	;# 
  2667     079D                     PMD7            equ	1949	;# 
  2668     080C                     WDTCON0         equ	2060	;# 
  2669     080D                     WDTCON1         equ	2061	;# 
  2670     080E                     WDTPSL          equ	2062	;# 
  2671     080F                     WDTPSH          equ	2063	;# 
  2672     0810                     WDTTMR          equ	2064	;# 
  2673     0811                     BORCON          equ	2065	;# 
  2674     0812                     VREGCON         equ	2066	;# 
  2675     0813                     PCON0           equ	2067	;# 
  2676     0814                     PCON1           equ	2068	;# 
  2677     081A                     NVMADR          equ	2074	;# 
  2678     081A                     NVMADRL         equ	2074	;# 
  2679     081B                     NVMADRH         equ	2075	;# 
  2680     081C                     NVMDAT          equ	2076	;# 
  2681     081C                     NVMDATL         equ	2076	;# 
  2682     081D                     NVMDATH         equ	2077	;# 
  2683     081E                     NVMCON1         equ	2078	;# 
  2684     081F                     NVMCON2         equ	2079	;# 
  2685     088C                     CPUDOZE         equ	2188	;# 
  2686     088D                     OSCCON1         equ	2189	;# 
  2687     088E                     OSCCON2         equ	2190	;# 
  2688     088F                     OSCCON3         equ	2191	;# 
  2689     0890                     OSCSTAT         equ	2192	;# 
  2690     0891                     OSCEN           equ	2193	;# 
  2691     0892                     OSCTUNE         equ	2194	;# 
  2692     0893                     OSCFRQ          equ	2195	;# 
  2693     0895                     CLKRCON         equ	2197	;# 
  2694     0896                     CLKRCLK         equ	2198	;# 
  2695     0897                     MD1CON0         equ	2199	;# 
  2696     0898                     MD1CON1         equ	2200	;# 
  2697     0899                     MD1SRC          equ	2201	;# 
  2698     089A                     MD1CARL         equ	2202	;# 
  2699     089B                     MD1CARH         equ	2203	;# 
  2700     090C                     FVRCON          equ	2316	;# 
  2701     090E                     DAC1CON0        equ	2318	;# 
  2702     090F                     DAC1CON1        equ	2319	;# 
  2703     091F                     ZCDCON          equ	2335	;# 
  2704     098F                     CMOUT           equ	2447	;# 
  2705     098F                     CMSTAT          equ	2447	;# 
  2706     0990                     CM1CON0         equ	2448	;# 
  2707     0991                     CM1CON1         equ	2449	;# 
  2708     0992                     CM1NCH          equ	2450	;# 
  2709     0993                     CM1PCH          equ	2451	;# 
  2710     0994                     CM2CON0         equ	2452	;# 
  2711     0995                     CM2CON1         equ	2453	;# 
  2712     0996                     CM2NCH          equ	2454	;# 
  2713     0997                     CM2PCH          equ	2455	;# 
  2714     1E0F                     CLCDATA         equ	7695	;# 
  2715     1E10                     CLC1CON         equ	7696	;# 
  2716     1E11                     CLC1POL         equ	7697	;# 
  2717     1E12                     CLC1SEL0        equ	7698	;# 
  2718     1E13                     CLC1SEL1        equ	7699	;# 
  2719     1E14                     CLC1SEL2        equ	7700	;# 
  2720     1E15                     CLC1SEL3        equ	7701	;# 
  2721     1E16                     CLC1GLS0        equ	7702	;# 
  2722     1E17                     CLC1GLS1        equ	7703	;# 
  2723     1E18                     CLC1GLS2        equ	7704	;# 
  2724     1E19                     CLC1GLS3        equ	7705	;# 
  2725     1E1A                     CLC2CON         equ	7706	;# 
  2726     1E1B                     CLC2POL         equ	7707	;# 
  2727     1E1C                     CLC2SEL0        equ	7708	;# 
  2728     1E1D                     CLC2SEL1        equ	7709	;# 
  2729     1E1E                     CLC2SEL2        equ	7710	;# 
  2730     1E1F                     CLC2SEL3        equ	7711	;# 
  2731     1E20                     CLC2GLS0        equ	7712	;# 
  2732     1E21                     CLC2GLS1        equ	7713	;# 
  2733     1E22                     CLC2GLS2        equ	7714	;# 
  2734     1E23                     CLC2GLS3        equ	7715	;# 
  2735     1E24                     CLC3CON         equ	7716	;# 
  2736     1E25                     CLC3POL         equ	7717	;# 
  2737     1E26                     CLC3SEL0        equ	7718	;# 
  2738     1E27                     CLC3SEL1        equ	7719	;# 
  2739     1E28                     CLC3SEL2        equ	7720	;# 
  2740     1E29                     CLC3SEL3        equ	7721	;# 
  2741     1E2A                     CLC3GLS0        equ	7722	;# 
  2742     1E2B                     CLC3GLS1        equ	7723	;# 
  2743     1E2C                     CLC3GLS2        equ	7724	;# 
  2744     1E2D                     CLC3GLS3        equ	7725	;# 
  2745     1E2E                     CLC4CON         equ	7726	;# 
  2746     1E2F                     CLC4POL         equ	7727	;# 
  2747     1E30                     CLC4SEL0        equ	7728	;# 
  2748     1E31                     CLC4SEL1        equ	7729	;# 
  2749     1E32                     CLC4SEL2        equ	7730	;# 
  2750     1E33                     CLC4SEL3        equ	7731	;# 
  2751     1E34                     CLC4GLS0        equ	7732	;# 
  2752     1E35                     CLC4GLS1        equ	7733	;# 
  2753     1E36                     CLC4GLS2        equ	7734	;# 
  2754     1E37                     CLC4GLS3        equ	7735	;# 
  2755     1E8F                     PPSLOCK         equ	7823	;# 
  2756     1E90                     INTPPS          equ	7824	;# 
  2757     1E91                     T0CKIPPS        equ	7825	;# 
  2758     1E92                     T1CKIPPS        equ	7826	;# 
  2759     1E93                     T1GPPS          equ	7827	;# 
  2760     1E94                     T3CKIPPS        equ	7828	;# 
  2761     1E95                     T3GPPS          equ	7829	;# 
  2762     1E96                     T5CKIPPS        equ	7830	;# 
  2763     1E97                     T5GPPS          equ	7831	;# 
  2764     1E9C                     T2INPPS         equ	7836	;# 
  2765     1E9D                     T4INPPS         equ	7837	;# 
  2766     1E9E                     T6INPPS         equ	7838	;# 
  2767     1EA1                     CCP1PPS         equ	7841	;# 
  2768     1EA2                     CCP2PPS         equ	7842	;# 
  2769     1EA3                     CCP3PPS         equ	7843	;# 
  2770     1EA4                     CCP4PPS         equ	7844	;# 
  2771     1EA9                     SMT1WINPPS      equ	7849	;# 
  2772     1EAA                     SMT1SIGPPS      equ	7850	;# 
  2773     1EB1                     CWG1PPS         equ	7857	;# 
  2774     1EB2                     CWG2PPS         equ	7858	;# 
  2775     1EB8                     MDCARLPPS       equ	7864	;# 
  2776     1EB9                     MDCARHPPS       equ	7865	;# 
  2777     1EBA                     MDSRCPPS        equ	7866	;# 
  2778     1EBB                     CLCIN0PPS       equ	7867	;# 
  2779     1EBC                     CLCIN1PPS       equ	7868	;# 
  2780     1EBD                     CLCIN2PPS       equ	7869	;# 
  2781     1EBE                     CLCIN3PPS       equ	7870	;# 
  2782     1EC3                     ADACTPPS        equ	7875	;# 
  2783     1EC5                     SSP1CLKPPS      equ	7877	;# 
  2784     1EC6                     SSP1DATPPS      equ	7878	;# 
  2785     1EC7                     SSP1SSPPS       equ	7879	;# 
  2786     1EC8                     SSP2CLKPPS      equ	7880	;# 
  2787     1EC9                     SSP2DATPPS      equ	7881	;# 
  2788     1ECA                     SSP2SSPPS       equ	7882	;# 
  2789     1ECB                     RX1PPS          equ	7883	;# 
  2790     1ECC                     CK1PPS          equ	7884	;# 
  2791     1F10                     RA0PPS          equ	7952	;# 
  2792     1F11                     RA1PPS          equ	7953	;# 
  2793     1F12                     RA2PPS          equ	7954	;# 
  2794     1F14                     RA4PPS          equ	7956	;# 
  2795     1F15                     RA5PPS          equ	7957	;# 
  2796     1F20                     RC0PPS          equ	7968	;# 
  2797     1F21                     RC1PPS          equ	7969	;# 
  2798     1F22                     RC2PPS          equ	7970	;# 
  2799     1F23                     RC3PPS          equ	7971	;# 
  2800     1F24                     RC4PPS          equ	7972	;# 
  2801     1F25                     RC5PPS          equ	7973	;# 
  2802     1F38                     ANSELA          equ	7992	;# 
  2803     1F39                     WPUA            equ	7993	;# 
  2804     1F3A                     ODCONA          equ	7994	;# 
  2805     1F3B                     SLRCONA         equ	7995	;# 
  2806     1F3C                     INLVLA          equ	7996	;# 
  2807     1F3D                     IOCAP           equ	7997	;# 
  2808     1F3E                     IOCAN           equ	7998	;# 
  2809     1F3F                     IOCAF           equ	7999	;# 
  2810     1F4E                     ANSELC          equ	8014	;# 
  2811     1F4F                     WPUC            equ	8015	;# 
  2812     1F50                     ODCONC          equ	8016	;# 
  2813     1F51                     SLRCONC         equ	8017	;# 
  2814     1F52                     INLVLC          equ	8018	;# 
  2815     1F53                     IOCCP           equ	8019	;# 
  2816     1F54                     IOCCN           equ	8020	;# 
  2817     1F55                     IOCCF           equ	8021	;# 
  2818     1FE4                     STATUS_SHAD     equ	8164	;# 
  2819     1FE5                     WREG_SHAD       equ	8165	;# 
  2820     1FE6                     BSR_SHAD        equ	8166	;# 
  2821     1FE7                     PCLATH_SHAD     equ	8167	;# 
  2822     1FE8                     FSR0_SHAD       equ	8168	;# 
  2823     1FE8                     FSR0L_SHAD      equ	8168	;# 
  2824     1FE9                     FSR0H_SHAD      equ	8169	;# 
  2825     1FEA                     FSR1L_SHAD      equ	8170	;# 
  2826     1FEB                     FSR1H_SHAD      equ	8171	;# 
  2827     1FED                     STKPTR          equ	8173	;# 
  2828     1FEE                     TOSL            equ	8174	;# 
  2829     1FEF                     TOSH            equ	8175	;# 
  2830     0000                     INDF0           equ	0	;# 
  2831     0001                     INDF1           equ	1	;# 
  2832     0002                     PCL             equ	2	;# 
  2833     0003                     STATUS          equ	3	;# 
  2834     0004                     FSR0L           equ	4	;# 
  2835     0005                     FSR0H           equ	5	;# 
  2836     0006                     FSR1L           equ	6	;# 
  2837     0007                     FSR1H           equ	7	;# 
  2838     0008                     BSR             equ	8	;# 
  2839     0009                     WREG            equ	9	;# 
  2840     000A                     PCLATH          equ	10	;# 
  2841     000B                     INTCON          equ	11	;# 
  2842     000C                     PORTA           equ	12	;# 
  2843     000E                     PORTC           equ	14	;# 
  2844     0012                     TRISA           equ	18	;# 
  2845     0014                     TRISC           equ	20	;# 
  2846     0018                     LATA            equ	24	;# 
  2847     001A                     LATC            equ	26	;# 
  2848     008C                     ADLTH           equ	140	;# 
  2849     008C                     ADLTHL          equ	140	;# 
  2850     008D                     ADLTHH          equ	141	;# 
  2851     008E                     ADUTH           equ	142	;# 
  2852     008E                     ADUTHL          equ	142	;# 
  2853     008F                     ADUTHH          equ	143	;# 
  2854     0090                     ADERR           equ	144	;# 
  2855     0090                     ADERRL          equ	144	;# 
  2856     0091                     ADERRH          equ	145	;# 
  2857     0092                     ADSTPT          equ	146	;# 
  2858     0092                     ADSTPTL         equ	146	;# 
  2859     0093                     ADSTPTH         equ	147	;# 
  2860     0094                     ADFLTR          equ	148	;# 
  2861     0094                     ADFLTRL         equ	148	;# 
  2862     0095                     ADFLTRH         equ	149	;# 
  2863     0096                     ADACC           equ	150	;# 
  2864     0096                     ADACCL          equ	150	;# 
  2865     0097                     ADACCH          equ	151	;# 
  2866     0098                     ADACCU          equ	152	;# 
  2867     0099                     ADCNT           equ	153	;# 
  2868     009A                     ADRPT           equ	154	;# 
  2869     009B                     ADPREV          equ	155	;# 
  2870     009B                     ADPREVL         equ	155	;# 
  2871     009C                     ADPREVH         equ	156	;# 
  2872     009D                     ADRES           equ	157	;# 
  2873     009D                     ADRESL          equ	157	;# 
  2874     009E                     ADRESH          equ	158	;# 
  2875     009F                     ADPCH           equ	159	;# 
  2876     010C                     ADACQ           equ	268	;# 
  2877     010C                     ADACQL          equ	268	;# 
  2878     010D                     ADACQH          equ	269	;# 
  2879     010E                     ADCAP           equ	270	;# 
  2880     010F                     ADPRE           equ	271	;# 
  2881     010F                     ADPREL          equ	271	;# 
  2882     0110                     ADPREH          equ	272	;# 
  2883     0111                     ADCON0          equ	273	;# 
  2884     0112                     ADCON1          equ	274	;# 
  2885     0113                     ADCON2          equ	275	;# 
  2886     0114                     ADCON3          equ	276	;# 
  2887     0115                     ADSTAT          equ	277	;# 
  2888     0116                     ADREF           equ	278	;# 
  2889     0117                     ADACT           equ	279	;# 
  2890     0118                     ADCLK           equ	280	;# 
  2891     0119                     RC1REG          equ	281	;# 
  2892     0119                     RCREG           equ	281	;# 
  2893     0119                     RCREG1          equ	281	;# 
  2894     011A                     TX1REG          equ	282	;# 
  2895     011A                     TXREG1          equ	282	;# 
  2896     011A                     TXREG           equ	282	;# 
  2897     011B                     SP1BRG          equ	283	;# 
  2898     011B                     SPBRG           equ	283	;# 
  2899     011B                     SP1BRGL         equ	283	;# 
  2900     011B                     SPBRG1          equ	283	;# 
  2901     011B                     SPBRGL          equ	283	;# 
  2902     011C                     SP1BRGH         equ	284	;# 
  2903     011C                     SPBRGH          equ	284	;# 
  2904     011C                     SPBRGH1         equ	284	;# 
  2905     011D                     RC1STA          equ	285	;# 
  2906     011D                     RCSTA1          equ	285	;# 
  2907     011D                     RCSTA           equ	285	;# 
  2908     011E                     TX1STA          equ	286	;# 
  2909     011E                     TXSTA1          equ	286	;# 
  2910     011E                     TXSTA           equ	286	;# 
  2911     011F                     BAUD1CON        equ	287	;# 
  2912     011F                     BAUDCON1        equ	287	;# 
  2913     011F                     BAUDCTL1        equ	287	;# 
  2914     011F                     BAUDCON         equ	287	;# 
  2915     011F                     BAUDCTL         equ	287	;# 
  2916     018C                     SSP1BUF         equ	396	;# 
  2917     018D                     SSP1ADD         equ	397	;# 
  2918     018E                     SSP1MSK         equ	398	;# 
  2919     018F                     SSP1STAT        equ	399	;# 
  2920     0190                     SSP1CON1        equ	400	;# 
  2921     0191                     SSP1CON2        equ	401	;# 
  2922     0192                     SSP1CON3        equ	402	;# 
  2923     0196                     SSP2BUF         equ	406	;# 
  2924     0197                     SSP2ADD         equ	407	;# 
  2925     0198                     SSP2MSK         equ	408	;# 
  2926     0199                     SSP2STAT        equ	409	;# 
  2927     019A                     SSP2CON1        equ	410	;# 
  2928     019B                     SSP2CON2        equ	411	;# 
  2929     019C                     SSP2CON3        equ	412	;# 
  2930     020C                     TMR1            equ	524	;# 
  2931     020C                     TMR1L           equ	524	;# 
  2932     020D                     TMR1H           equ	525	;# 
  2933     020E                     T1CON           equ	526	;# 
  2934     020E                     TMR1CON         equ	526	;# 
  2935     020F                     T1GCON          equ	527	;# 
  2936     020F                     TMR1GCON        equ	527	;# 
  2937     0210                     T1GATE          equ	528	;# 
  2938     0210                     TMR1GATE        equ	528	;# 
  2939     0211                     T1CLK           equ	529	;# 
  2940     0211                     TMR1CLK         equ	529	;# 
  2941     0211                     PR1             equ	529	;# 
  2942     0212                     TMR3            equ	530	;# 
  2943     0212                     TMR3L           equ	530	;# 
  2944     0213                     TMR3H           equ	531	;# 
  2945     0214                     T3CON           equ	532	;# 
  2946     0214                     TMR3CON         equ	532	;# 
  2947     0215                     T3GCON          equ	533	;# 
  2948     0215                     TMR3GCON        equ	533	;# 
  2949     0216                     T3GATE          equ	534	;# 
  2950     0216                     TMR3GATE        equ	534	;# 
  2951     0217                     T3CLK           equ	535	;# 
  2952     0217                     TMR3CLK         equ	535	;# 
  2953     0217                     PR3             equ	535	;# 
  2954     0218                     TMR5            equ	536	;# 
  2955     0218                     TMR5L           equ	536	;# 
  2956     0219                     TMR5H           equ	537	;# 
  2957     021A                     T5CON           equ	538	;# 
  2958     021A                     TMR5CON         equ	538	;# 
  2959     021B                     T5GCON          equ	539	;# 
  2960     021B                     TMR5GCON        equ	539	;# 
  2961     021C                     T5GATE          equ	540	;# 
  2962     021C                     TMR5GATE        equ	540	;# 
  2963     021D                     T5CLK           equ	541	;# 
  2964     021D                     TMR5CLK         equ	541	;# 
  2965     021D                     PR5             equ	541	;# 
  2966     021E                     CCPTMRS0        equ	542	;# 
  2967     021F                     CCPTMRS1        equ	543	;# 
  2968     028C                     T2TMR           equ	652	;# 
  2969     028C                     TMR2            equ	652	;# 
  2970     028D                     T2PR            equ	653	;# 
  2971     028D                     PR2             equ	653	;# 
  2972     028E                     T2CON           equ	654	;# 
  2973     028F                     T2HLT           equ	655	;# 
  2974     0290                     T2CLKCON        equ	656	;# 
  2975     0291                     T2RST           equ	657	;# 
  2976     0292                     T4TMR           equ	658	;# 
  2977     0292                     TMR4            equ	658	;# 
  2978     0293                     T4PR            equ	659	;# 
  2979     0293                     PR4             equ	659	;# 
  2980     0294                     T4CON           equ	660	;# 
  2981     0295                     T4HLT           equ	661	;# 
  2982     0296                     T4CLKCON        equ	662	;# 
  2983     0297                     T4RST           equ	663	;# 
  2984     0298                     T6TMR           equ	664	;# 
  2985     0298                     TMR6            equ	664	;# 
  2986     0299                     T6PR            equ	665	;# 
  2987     0299                     PR6             equ	665	;# 
  2988     029A                     T6CON           equ	666	;# 
  2989     029B                     T6HLT           equ	667	;# 
  2990     029C                     T6CLKCON        equ	668	;# 
  2991     029D                     T6RST           equ	669	;# 
  2992     029F                     ADCPCON0        equ	671	;# 
  2993     030C                     CCPR1           equ	780	;# 
  2994     030C                     CCPR1L          equ	780	;# 
  2995     030D                     CCPR1H          equ	781	;# 
  2996     030E                     CCP1CON         equ	782	;# 
  2997     030F                     CCP1CAP         equ	783	;# 
  2998     0310                     CCPR2           equ	784	;# 
  2999     0310                     CCPR2L          equ	784	;# 
  3000     0311                     CCPR2H          equ	785	;# 
  3001     0312                     CCP2CON         equ	786	;# 
  3002     0313                     CCP2CAP         equ	787	;# 
  3003     0314                     CCPR3           equ	788	;# 
  3004     0314                     CCPR3L          equ	788	;# 
  3005     0315                     CCPR3H          equ	789	;# 
  3006     0316                     CCP3CON         equ	790	;# 
  3007     0317                     CCP3CAP         equ	791	;# 
  3008     0318                     CCPR4           equ	792	;# 
  3009     0318                     CCPR4L          equ	792	;# 
  3010     0319                     CCPR4H          equ	793	;# 
  3011     031A                     CCP4CON         equ	794	;# 
  3012     031B                     CCP4CAP         equ	795	;# 
  3013     038C                     PWM6DC          equ	908	;# 
  3014     038C                     PWM6DCL         equ	908	;# 
  3015     038D                     PWM6DCH         equ	909	;# 
  3016     038E                     PWM6CON         equ	910	;# 
  3017     0390                     PWM7DC          equ	912	;# 
  3018     0390                     PWM7DCL         equ	912	;# 
  3019     0391                     PWM7DCH         equ	913	;# 
  3020     0392                     PWM7CON         equ	914	;# 
  3021     048C                     SMT1TMR         equ	1164	;# 
  3022     048C                     SMT1TMRL        equ	1164	;# 
  3023     048D                     SMT1TMRH        equ	1165	;# 
  3024     048E                     SMT1TMRU        equ	1166	;# 
  3025     048F                     SMT1CPR         equ	1167	;# 
  3026     048F                     SMT1CPRL        equ	1167	;# 
  3027     0490                     SMT1CPRH        equ	1168	;# 
  3028     0491                     SMT1CPRU        equ	1169	;# 
  3029     0492                     SMT1CPW         equ	1170	;# 
  3030     0492                     SMT1CPWL        equ	1170	;# 
  3031     0493                     SMT1CPWH        equ	1171	;# 
  3032     0494                     SMT1CPWU        equ	1172	;# 
  3033     0495                     SMT1PR          equ	1173	;# 
  3034     0495                     SMT1PRL         equ	1173	;# 
  3035     0496                     SMT1PRH         equ	1174	;# 
  3036     0497                     SMT1PRU         equ	1175	;# 
  3037     0498                     SMT1CON0        equ	1176	;# 
  3038     0499                     SMT1CON1        equ	1177	;# 
  3039     049A                     SMT1STAT        equ	1178	;# 
  3040     049B                     SMT1CLK         equ	1179	;# 
  3041     049C                     SMT1SIG         equ	1180	;# 
  3042     049D                     SMT1WIN         equ	1181	;# 
  3043     058C                     NCO1ACC         equ	1420	;# 
  3044     058C                     NCO1ACCL        equ	1420	;# 
  3045     058D                     NCO1ACCH        equ	1421	;# 
  3046     058E                     NCO1ACCU        equ	1422	;# 
  3047     058F                     NCO1INC         equ	1423	;# 
  3048     058F                     NCO1INCL        equ	1423	;# 
  3049     0590                     NCO1INCH        equ	1424	;# 
  3050     0591                     NCO1INCU        equ	1425	;# 
  3051     0592                     NCO1CON         equ	1426	;# 
  3052     0593                     NCO1CLK         equ	1427	;# 
  3053     059C                     TMR0L           equ	1436	;# 
  3054     059C                     TMR0            equ	1436	;# 
  3055     059D                     TMR0H           equ	1437	;# 
  3056     059D                     PR0             equ	1437	;# 
  3057     059E                     T0CON0          equ	1438	;# 
  3058     059F                     T0CON1          equ	1439	;# 
  3059     060C                     CWG1CLK         equ	1548	;# 
  3060     060C                     CWG1CLKCON      equ	1548	;# 
  3061     060D                     CWG1ISM         equ	1549	;# 
  3062     060D                     CWG1DAT         equ	1549	;# 
  3063     060E                     CWG1DBR         equ	1550	;# 
  3064     060F                     CWG1DBF         equ	1551	;# 
  3065     0610                     CWG1CON0        equ	1552	;# 
  3066     0611                     CWG1CON1        equ	1553	;# 
  3067     0612                     CWG1AS0         equ	1554	;# 
  3068     0613                     CWG1AS1         equ	1555	;# 
  3069     0614                     CWG1STR         equ	1556	;# 
  3070     0616                     CWG2CLK         equ	1558	;# 
  3071     0616                     CWG2CLKCON      equ	1558	;# 
  3072     0617                     CWG2ISM         equ	1559	;# 
  3073     0617                     CWG2DAT         equ	1559	;# 
  3074     0618                     CWG2DBR         equ	1560	;# 
  3075     0619                     CWG2DBF         equ	1561	;# 
  3076     061A                     CWG2CON0        equ	1562	;# 
  3077     061B                     CWG2CON1        equ	1563	;# 
  3078     061C                     CWG2AS0         equ	1564	;# 
  3079     061D                     CWG2AS1         equ	1565	;# 
  3080     061E                     CWG2STR         equ	1566	;# 
  3081     070C                     PIR0            equ	1804	;# 
  3082     070D                     PIR1            equ	1805	;# 
  3083     070E                     PIR2            equ	1806	;# 
  3084     070F                     PIR3            equ	1807	;# 
  3085     0710                     PIR4            equ	1808	;# 
  3086     0711                     PIR5            equ	1809	;# 
  3087     0712                     PIR6            equ	1810	;# 
  3088     0713                     PIR7            equ	1811	;# 
  3089     0714                     PIR8            equ	1812	;# 
  3090     0716                     PIE0            equ	1814	;# 
  3091     0717                     PIE1            equ	1815	;# 
  3092     0718                     PIE2            equ	1816	;# 
  3093     0719                     PIE3            equ	1817	;# 
  3094     071A                     PIE4            equ	1818	;# 
  3095     071B                     PIE5            equ	1819	;# 
  3096     071C                     PIE6            equ	1820	;# 
  3097     071D                     PIE7            equ	1821	;# 
  3098     071E                     PIE8            equ	1822	;# 
  3099     0796                     PMD0            equ	1942	;# 
  3100     0797                     PMD1            equ	1943	;# 
  3101     0798                     PMD2            equ	1944	;# 
  3102     0799                     PMD3            equ	1945	;# 
  3103     079A                     PMD4            equ	1946	;# 
  3104     079B                     PMD5            equ	1947	;# 
  3105     079C                     PMD6            equ	1948	;# 
  3106     079D                     PMD7            equ	1949	;# 
  3107     080C                     WDTCON0         equ	2060	;# 
  3108     080D                     WDTCON1         equ	2061	;# 
  3109     080E                     WDTPSL          equ	2062	;# 
  3110     080F                     WDTPSH          equ	2063	;# 
  3111     0810                     WDTTMR          equ	2064	;# 
  3112     0811                     BORCON          equ	2065	;# 
  3113     0812                     VREGCON         equ	2066	;# 
  3114     0813                     PCON0           equ	2067	;# 
  3115     0814                     PCON1           equ	2068	;# 
  3116     081A                     NVMADR          equ	2074	;# 
  3117     081A                     NVMADRL         equ	2074	;# 
  3118     081B                     NVMADRH         equ	2075	;# 
  3119     081C                     NVMDAT          equ	2076	;# 
  3120     081C                     NVMDATL         equ	2076	;# 
  3121     081D                     NVMDATH         equ	2077	;# 
  3122     081E                     NVMCON1         equ	2078	;# 
  3123     081F                     NVMCON2         equ	2079	;# 
  3124     088C                     CPUDOZE         equ	2188	;# 
  3125     088D                     OSCCON1         equ	2189	;# 
  3126     088E                     OSCCON2         equ	2190	;# 
  3127     088F                     OSCCON3         equ	2191	;# 
  3128     0890                     OSCSTAT         equ	2192	;# 
  3129     0891                     OSCEN           equ	2193	;# 
  3130     0892                     OSCTUNE         equ	2194	;# 
  3131     0893                     OSCFRQ          equ	2195	;# 
  3132     0895                     CLKRCON         equ	2197	;# 
  3133     0896                     CLKRCLK         equ	2198	;# 
  3134     0897                     MD1CON0         equ	2199	;# 
  3135     0898                     MD1CON1         equ	2200	;# 
  3136     0899                     MD1SRC          equ	2201	;# 
  3137     089A                     MD1CARL         equ	2202	;# 
  3138     089B                     MD1CARH         equ	2203	;# 
  3139     090C                     FVRCON          equ	2316	;# 
  3140     090E                     DAC1CON0        equ	2318	;# 
  3141     090F                     DAC1CON1        equ	2319	;# 
  3142     091F                     ZCDCON          equ	2335	;# 
  3143     098F                     CMOUT           equ	2447	;# 
  3144     098F                     CMSTAT          equ	2447	;# 
  3145     0990                     CM1CON0         equ	2448	;# 
  3146     0991                     CM1CON1         equ	2449	;# 
  3147     0992                     CM1NCH          equ	2450	;# 
  3148     0993                     CM1PCH          equ	2451	;# 
  3149     0994                     CM2CON0         equ	2452	;# 
  3150     0995                     CM2CON1         equ	2453	;# 
  3151     0996                     CM2NCH          equ	2454	;# 
  3152     0997                     CM2PCH          equ	2455	;# 
  3153     1E0F                     CLCDATA         equ	7695	;# 
  3154     1E10                     CLC1CON         equ	7696	;# 
  3155     1E11                     CLC1POL         equ	7697	;# 
  3156     1E12                     CLC1SEL0        equ	7698	;# 
  3157     1E13                     CLC1SEL1        equ	7699	;# 
  3158     1E14                     CLC1SEL2        equ	7700	;# 
  3159     1E15                     CLC1SEL3        equ	7701	;# 
  3160     1E16                     CLC1GLS0        equ	7702	;# 
  3161     1E17                     CLC1GLS1        equ	7703	;# 
  3162     1E18                     CLC1GLS2        equ	7704	;# 
  3163     1E19                     CLC1GLS3        equ	7705	;# 
  3164     1E1A                     CLC2CON         equ	7706	;# 
  3165     1E1B                     CLC2POL         equ	7707	;# 
  3166     1E1C                     CLC2SEL0        equ	7708	;# 
  3167     1E1D                     CLC2SEL1        equ	7709	;# 
  3168     1E1E                     CLC2SEL2        equ	7710	;# 
  3169     1E1F                     CLC2SEL3        equ	7711	;# 
  3170     1E20                     CLC2GLS0        equ	7712	;# 
  3171     1E21                     CLC2GLS1        equ	7713	;# 
  3172     1E22                     CLC2GLS2        equ	7714	;# 
  3173     1E23                     CLC2GLS3        equ	7715	;# 
  3174     1E24                     CLC3CON         equ	7716	;# 
  3175     1E25                     CLC3POL         equ	7717	;# 
  3176     1E26                     CLC3SEL0        equ	7718	;# 
  3177     1E27                     CLC3SEL1        equ	7719	;# 
  3178     1E28                     CLC3SEL2        equ	7720	;# 
  3179     1E29                     CLC3SEL3        equ	7721	;# 
  3180     1E2A                     CLC3GLS0        equ	7722	;# 
  3181     1E2B                     CLC3GLS1        equ	7723	;# 
  3182     1E2C                     CLC3GLS2        equ	7724	;# 
  3183     1E2D                     CLC3GLS3        equ	7725	;# 
  3184     1E2E                     CLC4CON         equ	7726	;# 
  3185     1E2F                     CLC4POL         equ	7727	;# 
  3186     1E30                     CLC4SEL0        equ	7728	;# 
  3187     1E31                     CLC4SEL1        equ	7729	;# 
  3188     1E32                     CLC4SEL2        equ	7730	;# 
  3189     1E33                     CLC4SEL3        equ	7731	;# 
  3190     1E34                     CLC4GLS0        equ	7732	;# 
  3191     1E35                     CLC4GLS1        equ	7733	;# 
  3192     1E36                     CLC4GLS2        equ	7734	;# 
  3193     1E37                     CLC4GLS3        equ	7735	;# 
  3194     1E8F                     PPSLOCK         equ	7823	;# 
  3195     1E90                     INTPPS          equ	7824	;# 
  3196     1E91                     T0CKIPPS        equ	7825	;# 
  3197     1E92                     T1CKIPPS        equ	7826	;# 
  3198     1E93                     T1GPPS          equ	7827	;# 
  3199     1E94                     T3CKIPPS        equ	7828	;# 
  3200     1E95                     T3GPPS          equ	7829	;# 
  3201     1E96                     T5CKIPPS        equ	7830	;# 
  3202     1E97                     T5GPPS          equ	7831	;# 
  3203     1E9C                     T2INPPS         equ	7836	;# 
  3204     1E9D                     T4INPPS         equ	7837	;# 
  3205     1E9E                     T6INPPS         equ	7838	;# 
  3206     1EA1                     CCP1PPS         equ	7841	;# 
  3207     1EA2                     CCP2PPS         equ	7842	;# 
  3208     1EA3                     CCP3PPS         equ	7843	;# 
  3209     1EA4                     CCP4PPS         equ	7844	;# 
  3210     1EA9                     SMT1WINPPS      equ	7849	;# 
  3211     1EAA                     SMT1SIGPPS      equ	7850	;# 
  3212     1EB1                     CWG1PPS         equ	7857	;# 
  3213     1EB2                     CWG2PPS         equ	7858	;# 
  3214     1EB8                     MDCARLPPS       equ	7864	;# 
  3215     1EB9                     MDCARHPPS       equ	7865	;# 
  3216     1EBA                     MDSRCPPS        equ	7866	;# 
  3217     1EBB                     CLCIN0PPS       equ	7867	;# 
  3218     1EBC                     CLCIN1PPS       equ	7868	;# 
  3219     1EBD                     CLCIN2PPS       equ	7869	;# 
  3220     1EBE                     CLCIN3PPS       equ	7870	;# 
  3221     1EC3                     ADACTPPS        equ	7875	;# 
  3222     1EC5                     SSP1CLKPPS      equ	7877	;# 
  3223     1EC6                     SSP1DATPPS      equ	7878	;# 
  3224     1EC7                     SSP1SSPPS       equ	7879	;# 
  3225     1EC8                     SSP2CLKPPS      equ	7880	;# 
  3226     1EC9                     SSP2DATPPS      equ	7881	;# 
  3227     1ECA                     SSP2SSPPS       equ	7882	;# 
  3228     1ECB                     RX1PPS          equ	7883	;# 
  3229     1ECC                     CK1PPS          equ	7884	;# 
  3230     1F10                     RA0PPS          equ	7952	;# 
  3231     1F11                     RA1PPS          equ	7953	;# 
  3232     1F12                     RA2PPS          equ	7954	;# 
  3233     1F14                     RA4PPS          equ	7956	;# 
  3234     1F15                     RA5PPS          equ	7957	;# 
  3235     1F20                     RC0PPS          equ	7968	;# 
  3236     1F21                     RC1PPS          equ	7969	;# 
  3237     1F22                     RC2PPS          equ	7970	;# 
  3238     1F23                     RC3PPS          equ	7971	;# 
  3239     1F24                     RC4PPS          equ	7972	;# 
  3240     1F25                     RC5PPS          equ	7973	;# 
  3241     1F38                     ANSELA          equ	7992	;# 
  3242     1F39                     WPUA            equ	7993	;# 
  3243     1F3A                     ODCONA          equ	7994	;# 
  3244     1F3B                     SLRCONA         equ	7995	;# 
  3245     1F3C                     INLVLA          equ	7996	;# 
  3246     1F3D                     IOCAP           equ	7997	;# 
  3247     1F3E                     IOCAN           equ	7998	;# 
  3248     1F3F                     IOCAF           equ	7999	;# 
  3249     1F4E                     ANSELC          equ	8014	;# 
  3250     1F4F                     WPUC            equ	8015	;# 
  3251     1F50                     ODCONC          equ	8016	;# 
  3252     1F51                     SLRCONC         equ	8017	;# 
  3253     1F52                     INLVLC          equ	8018	;# 
  3254     1F53                     IOCCP           equ	8019	;# 
  3255     1F54                     IOCCN           equ	8020	;# 
  3256     1F55                     IOCCF           equ	8021	;# 
  3257     1FE4                     STATUS_SHAD     equ	8164	;# 
  3258     1FE5                     WREG_SHAD       equ	8165	;# 
  3259     1FE6                     BSR_SHAD        equ	8166	;# 
  3260     1FE7                     PCLATH_SHAD     equ	8167	;# 
  3261     1FE8                     FSR0_SHAD       equ	8168	;# 
  3262     1FE8                     FSR0L_SHAD      equ	8168	;# 
  3263     1FE9                     FSR0H_SHAD      equ	8169	;# 
  3264     1FEA                     FSR1L_SHAD      equ	8170	;# 
  3265     1FEB                     FSR1H_SHAD      equ	8171	;# 
  3266     1FED                     STKPTR          equ	8173	;# 
  3267     1FEE                     TOSL            equ	8174	;# 
  3268     1FEF                     TOSH            equ	8175	;# 
  3269     0000                     INDF0           equ	0	;# 
  3270     0001                     INDF1           equ	1	;# 
  3271     0002                     PCL             equ	2	;# 
  3272     0003                     STATUS          equ	3	;# 
  3273     0004                     FSR0L           equ	4	;# 
  3274     0005                     FSR0H           equ	5	;# 
  3275     0006                     FSR1L           equ	6	;# 
  3276     0007                     FSR1H           equ	7	;# 
  3277     0008                     BSR             equ	8	;# 
  3278     0009                     WREG            equ	9	;# 
  3279     000A                     PCLATH          equ	10	;# 
  3280     000B                     INTCON          equ	11	;# 
  3281     000C                     PORTA           equ	12	;# 
  3282     000E                     PORTC           equ	14	;# 
  3283     0012                     TRISA           equ	18	;# 
  3284     0014                     TRISC           equ	20	;# 
  3285     0018                     LATA            equ	24	;# 
  3286     001A                     LATC            equ	26	;# 
  3287     008C                     ADLTH           equ	140	;# 
  3288     008C                     ADLTHL          equ	140	;# 
  3289     008D                     ADLTHH          equ	141	;# 
  3290     008E                     ADUTH           equ	142	;# 
  3291     008E                     ADUTHL          equ	142	;# 
  3292     008F                     ADUTHH          equ	143	;# 
  3293     0090                     ADERR           equ	144	;# 
  3294     0090                     ADERRL          equ	144	;# 
  3295     0091                     ADERRH          equ	145	;# 
  3296     0092                     ADSTPT          equ	146	;# 
  3297     0092                     ADSTPTL         equ	146	;# 
  3298     0093                     ADSTPTH         equ	147	;# 
  3299     0094                     ADFLTR          equ	148	;# 
  3300     0094                     ADFLTRL         equ	148	;# 
  3301     0095                     ADFLTRH         equ	149	;# 
  3302     0096                     ADACC           equ	150	;# 
  3303     0096                     ADACCL          equ	150	;# 
  3304     0097                     ADACCH          equ	151	;# 
  3305     0098                     ADACCU          equ	152	;# 
  3306     0099                     ADCNT           equ	153	;# 
  3307     009A                     ADRPT           equ	154	;# 
  3308     009B                     ADPREV          equ	155	;# 
  3309     009B                     ADPREVL         equ	155	;# 
  3310     009C                     ADPREVH         equ	156	;# 
  3311     009D                     ADRES           equ	157	;# 
  3312     009D                     ADRESL          equ	157	;# 
  3313     009E                     ADRESH          equ	158	;# 
  3314     009F                     ADPCH           equ	159	;# 
  3315     010C                     ADACQ           equ	268	;# 
  3316     010C                     ADACQL          equ	268	;# 
  3317     010D                     ADACQH          equ	269	;# 
  3318     010E                     ADCAP           equ	270	;# 
  3319     010F                     ADPRE           equ	271	;# 
  3320     010F                     ADPREL          equ	271	;# 
  3321     0110                     ADPREH          equ	272	;# 
  3322     0111                     ADCON0          equ	273	;# 
  3323     0112                     ADCON1          equ	274	;# 
  3324     0113                     ADCON2          equ	275	;# 
  3325     0114                     ADCON3          equ	276	;# 
  3326     0115                     ADSTAT          equ	277	;# 
  3327     0116                     ADREF           equ	278	;# 
  3328     0117                     ADACT           equ	279	;# 
  3329     0118                     ADCLK           equ	280	;# 
  3330     0119                     RC1REG          equ	281	;# 
  3331     0119                     RCREG           equ	281	;# 
  3332     0119                     RCREG1          equ	281	;# 
  3333     011A                     TX1REG          equ	282	;# 
  3334     011A                     TXREG1          equ	282	;# 
  3335     011A                     TXREG           equ	282	;# 
  3336     011B                     SP1BRG          equ	283	;# 
  3337     011B                     SPBRG           equ	283	;# 
  3338     011B                     SP1BRGL         equ	283	;# 
  3339     011B                     SPBRG1          equ	283	;# 
  3340     011B                     SPBRGL          equ	283	;# 
  3341     011C                     SP1BRGH         equ	284	;# 
  3342     011C                     SPBRGH          equ	284	;# 
  3343     011C                     SPBRGH1         equ	284	;# 
  3344     011D                     RC1STA          equ	285	;# 
  3345     011D                     RCSTA1          equ	285	;# 
  3346     011D                     RCSTA           equ	285	;# 
  3347     011E                     TX1STA          equ	286	;# 
  3348     011E                     TXSTA1          equ	286	;# 
  3349     011E                     TXSTA           equ	286	;# 
  3350     011F                     BAUD1CON        equ	287	;# 
  3351     011F                     BAUDCON1        equ	287	;# 
  3352     011F                     BAUDCTL1        equ	287	;# 
  3353     011F                     BAUDCON         equ	287	;# 
  3354     011F                     BAUDCTL         equ	287	;# 
  3355     018C                     SSP1BUF         equ	396	;# 
  3356     018D                     SSP1ADD         equ	397	;# 
  3357     018E                     SSP1MSK         equ	398	;# 
  3358     018F                     SSP1STAT        equ	399	;# 
  3359     0190                     SSP1CON1        equ	400	;# 
  3360     0191                     SSP1CON2        equ	401	;# 
  3361     0192                     SSP1CON3        equ	402	;# 
  3362     0196                     SSP2BUF         equ	406	;# 
  3363     0197                     SSP2ADD         equ	407	;# 
  3364     0198                     SSP2MSK         equ	408	;# 
  3365     0199                     SSP2STAT        equ	409	;# 
  3366     019A                     SSP2CON1        equ	410	;# 
  3367     019B                     SSP2CON2        equ	411	;# 
  3368     019C                     SSP2CON3        equ	412	;# 
  3369     020C                     TMR1            equ	524	;# 
  3370     020C                     TMR1L           equ	524	;# 
  3371     020D                     TMR1H           equ	525	;# 
  3372     020E                     T1CON           equ	526	;# 
  3373     020E                     TMR1CON         equ	526	;# 
  3374     020F                     T1GCON          equ	527	;# 
  3375     020F                     TMR1GCON        equ	527	;# 
  3376     0210                     T1GATE          equ	528	;# 
  3377     0210                     TMR1GATE        equ	528	;# 
  3378     0211                     T1CLK           equ	529	;# 
  3379     0211                     TMR1CLK         equ	529	;# 
  3380     0211                     PR1             equ	529	;# 
  3381     0212                     TMR3            equ	530	;# 
  3382     0212                     TMR3L           equ	530	;# 
  3383     0213                     TMR3H           equ	531	;# 
  3384     0214                     T3CON           equ	532	;# 
  3385     0214                     TMR3CON         equ	532	;# 
  3386     0215                     T3GCON          equ	533	;# 
  3387     0215                     TMR3GCON        equ	533	;# 
  3388     0216                     T3GATE          equ	534	;# 
  3389     0216                     TMR3GATE        equ	534	;# 
  3390     0217                     T3CLK           equ	535	;# 
  3391     0217                     TMR3CLK         equ	535	;# 
  3392     0217                     PR3             equ	535	;# 
  3393     0218                     TMR5            equ	536	;# 
  3394     0218                     TMR5L           equ	536	;# 
  3395     0219                     TMR5H           equ	537	;# 
  3396     021A                     T5CON           equ	538	;# 
  3397     021A                     TMR5CON         equ	538	;# 
  3398     021B                     T5GCON          equ	539	;# 
  3399     021B                     TMR5GCON        equ	539	;# 
  3400     021C                     T5GATE          equ	540	;# 
  3401     021C                     TMR5GATE        equ	540	;# 
  3402     021D                     T5CLK           equ	541	;# 
  3403     021D                     TMR5CLK         equ	541	;# 
  3404     021D                     PR5             equ	541	;# 
  3405     021E                     CCPTMRS0        equ	542	;# 
  3406     021F                     CCPTMRS1        equ	543	;# 
  3407     028C                     T2TMR           equ	652	;# 
  3408     028C                     TMR2            equ	652	;# 
  3409     028D                     T2PR            equ	653	;# 
  3410     028D                     PR2             equ	653	;# 
  3411     028E                     T2CON           equ	654	;# 
  3412     028F                     T2HLT           equ	655	;# 
  3413     0290                     T2CLKCON        equ	656	;# 
  3414     0291                     T2RST           equ	657	;# 
  3415     0292                     T4TMR           equ	658	;# 
  3416     0292                     TMR4            equ	658	;# 
  3417     0293                     T4PR            equ	659	;# 
  3418     0293                     PR4             equ	659	;# 
  3419     0294                     T4CON           equ	660	;# 
  3420     0295                     T4HLT           equ	661	;# 
  3421     0296                     T4CLKCON        equ	662	;# 
  3422     0297                     T4RST           equ	663	;# 
  3423     0298                     T6TMR           equ	664	;# 
  3424     0298                     TMR6            equ	664	;# 
  3425     0299                     T6PR            equ	665	;# 
  3426     0299                     PR6             equ	665	;# 
  3427     029A                     T6CON           equ	666	;# 
  3428     029B                     T6HLT           equ	667	;# 
  3429     029C                     T6CLKCON        equ	668	;# 
  3430     029D                     T6RST           equ	669	;# 
  3431     029F                     ADCPCON0        equ	671	;# 
  3432     030C                     CCPR1           equ	780	;# 
  3433     030C                     CCPR1L          equ	780	;# 
  3434     030D                     CCPR1H          equ	781	;# 
  3435     030E                     CCP1CON         equ	782	;# 
  3436     030F                     CCP1CAP         equ	783	;# 
  3437     0310                     CCPR2           equ	784	;# 
  3438     0310                     CCPR2L          equ	784	;# 
  3439     0311                     CCPR2H          equ	785	;# 
  3440     0312                     CCP2CON         equ	786	;# 
  3441     0313                     CCP2CAP         equ	787	;# 
  3442     0314                     CCPR3           equ	788	;# 
  3443     0314                     CCPR3L          equ	788	;# 
  3444     0315                     CCPR3H          equ	789	;# 
  3445     0316                     CCP3CON         equ	790	;# 
  3446     0317                     CCP3CAP         equ	791	;# 
  3447     0318                     CCPR4           equ	792	;# 
  3448     0318                     CCPR4L          equ	792	;# 
  3449     0319                     CCPR4H          equ	793	;# 
  3450     031A                     CCP4CON         equ	794	;# 
  3451     031B                     CCP4CAP         equ	795	;# 
  3452     038C                     PWM6DC          equ	908	;# 
  3453     038C                     PWM6DCL         equ	908	;# 
  3454     038D                     PWM6DCH         equ	909	;# 
  3455     038E                     PWM6CON         equ	910	;# 
  3456     0390                     PWM7DC          equ	912	;# 
  3457     0390                     PWM7DCL         equ	912	;# 
  3458     0391                     PWM7DCH         equ	913	;# 
  3459     0392                     PWM7CON         equ	914	;# 
  3460     048C                     SMT1TMR         equ	1164	;# 
  3461     048C                     SMT1TMRL        equ	1164	;# 
  3462     048D                     SMT1TMRH        equ	1165	;# 
  3463     048E                     SMT1TMRU        equ	1166	;# 
  3464     048F                     SMT1CPR         equ	1167	;# 
  3465     048F                     SMT1CPRL        equ	1167	;# 
  3466     0490                     SMT1CPRH        equ	1168	;# 
  3467     0491                     SMT1CPRU        equ	1169	;# 
  3468     0492                     SMT1CPW         equ	1170	;# 
  3469     0492                     SMT1CPWL        equ	1170	;# 
  3470     0493                     SMT1CPWH        equ	1171	;# 
  3471     0494                     SMT1CPWU        equ	1172	;# 
  3472     0495                     SMT1PR          equ	1173	;# 
  3473     0495                     SMT1PRL         equ	1173	;# 
  3474     0496                     SMT1PRH         equ	1174	;# 
  3475     0497                     SMT1PRU         equ	1175	;# 
  3476     0498                     SMT1CON0        equ	1176	;# 
  3477     0499                     SMT1CON1        equ	1177	;# 
  3478     049A                     SMT1STAT        equ	1178	;# 
  3479     049B                     SMT1CLK         equ	1179	;# 
  3480     049C                     SMT1SIG         equ	1180	;# 
  3481     049D                     SMT1WIN         equ	1181	;# 
  3482     058C                     NCO1ACC         equ	1420	;# 
  3483     058C                     NCO1ACCL        equ	1420	;# 
  3484     058D                     NCO1ACCH        equ	1421	;# 
  3485     058E                     NCO1ACCU        equ	1422	;# 
  3486     058F                     NCO1INC         equ	1423	;# 
  3487     058F                     NCO1INCL        equ	1423	;# 
  3488     0590                     NCO1INCH        equ	1424	;# 
  3489     0591                     NCO1INCU        equ	1425	;# 
  3490     0592                     NCO1CON         equ	1426	;# 
  3491     0593                     NCO1CLK         equ	1427	;# 
  3492     059C                     TMR0L           equ	1436	;# 
  3493     059C                     TMR0            equ	1436	;# 
  3494     059D                     TMR0H           equ	1437	;# 
  3495     059D                     PR0             equ	1437	;# 
  3496     059E                     T0CON0          equ	1438	;# 
  3497     059F                     T0CON1          equ	1439	;# 
  3498     060C                     CWG1CLK         equ	1548	;# 
  3499     060C                     CWG1CLKCON      equ	1548	;# 
  3500     060D                     CWG1ISM         equ	1549	;# 
  3501     060D                     CWG1DAT         equ	1549	;# 
  3502     060E                     CWG1DBR         equ	1550	;# 
  3503     060F                     CWG1DBF         equ	1551	;# 
  3504     0610                     CWG1CON0        equ	1552	;# 
  3505     0611                     CWG1CON1        equ	1553	;# 
  3506     0612                     CWG1AS0         equ	1554	;# 
  3507     0613                     CWG1AS1         equ	1555	;# 
  3508     0614                     CWG1STR         equ	1556	;# 
  3509     0616                     CWG2CLK         equ	1558	;# 
  3510     0616                     CWG2CLKCON      equ	1558	;# 
  3511     0617                     CWG2ISM         equ	1559	;# 
  3512     0617                     CWG2DAT         equ	1559	;# 
  3513     0618                     CWG2DBR         equ	1560	;# 
  3514     0619                     CWG2DBF         equ	1561	;# 
  3515     061A                     CWG2CON0        equ	1562	;# 
  3516     061B                     CWG2CON1        equ	1563	;# 
  3517     061C                     CWG2AS0         equ	1564	;# 
  3518     061D                     CWG2AS1         equ	1565	;# 
  3519     061E                     CWG2STR         equ	1566	;# 
  3520     070C                     PIR0            equ	1804	;# 
  3521     070D                     PIR1            equ	1805	;# 
  3522     070E                     PIR2            equ	1806	;# 
  3523     070F                     PIR3            equ	1807	;# 
  3524     0710                     PIR4            equ	1808	;# 
  3525     0711                     PIR5            equ	1809	;# 
  3526     0712                     PIR6            equ	1810	;# 
  3527     0713                     PIR7            equ	1811	;# 
  3528     0714                     PIR8            equ	1812	;# 
  3529     0716                     PIE0            equ	1814	;# 
  3530     0717                     PIE1            equ	1815	;# 
  3531     0718                     PIE2            equ	1816	;# 
  3532     0719                     PIE3            equ	1817	;# 
  3533     071A                     PIE4            equ	1818	;# 
  3534     071B                     PIE5            equ	1819	;# 
  3535     071C                     PIE6            equ	1820	;# 
  3536     071D                     PIE7            equ	1821	;# 
  3537     071E                     PIE8            equ	1822	;# 
  3538     0796                     PMD0            equ	1942	;# 
  3539     0797                     PMD1            equ	1943	;# 
  3540     0798                     PMD2            equ	1944	;# 
  3541     0799                     PMD3            equ	1945	;# 
  3542     079A                     PMD4            equ	1946	;# 
  3543     079B                     PMD5            equ	1947	;# 
  3544     079C                     PMD6            equ	1948	;# 
  3545     079D                     PMD7            equ	1949	;# 
  3546     080C                     WDTCON0         equ	2060	;# 
  3547     080D                     WDTCON1         equ	2061	;# 
  3548     080E                     WDTPSL          equ	2062	;# 
  3549     080F                     WDTPSH          equ	2063	;# 
  3550     0810                     WDTTMR          equ	2064	;# 
  3551     0811                     BORCON          equ	2065	;# 
  3552     0812                     VREGCON         equ	2066	;# 
  3553     0813                     PCON0           equ	2067	;# 
  3554     0814                     PCON1           equ	2068	;# 
  3555     081A                     NVMADR          equ	2074	;# 
  3556     081A                     NVMADRL         equ	2074	;# 
  3557     081B                     NVMADRH         equ	2075	;# 
  3558     081C                     NVMDAT          equ	2076	;# 
  3559     081C                     NVMDATL         equ	2076	;# 
  3560     081D                     NVMDATH         equ	2077	;# 
  3561     081E                     NVMCON1         equ	2078	;# 
  3562     081F                     NVMCON2         equ	2079	;# 
  3563     088C                     CPUDOZE         equ	2188	;# 
  3564     088D                     OSCCON1         equ	2189	;# 
  3565     088E                     OSCCON2         equ	2190	;# 
  3566     088F                     OSCCON3         equ	2191	;# 
  3567     0890                     OSCSTAT         equ	2192	;# 
  3568     0891                     OSCEN           equ	2193	;# 
  3569     0892                     OSCTUNE         equ	2194	;# 
  3570     0893                     OSCFRQ          equ	2195	;# 
  3571     0895                     CLKRCON         equ	2197	;# 
  3572     0896                     CLKRCLK         equ	2198	;# 
  3573     0897                     MD1CON0         equ	2199	;# 
  3574     0898                     MD1CON1         equ	2200	;# 
  3575     0899                     MD1SRC          equ	2201	;# 
  3576     089A                     MD1CARL         equ	2202	;# 
  3577     089B                     MD1CARH         equ	2203	;# 
  3578     090C                     FVRCON          equ	2316	;# 
  3579     090E                     DAC1CON0        equ	2318	;# 
  3580     090F                     DAC1CON1        equ	2319	;# 
  3581     091F                     ZCDCON          equ	2335	;# 
  3582     098F                     CMOUT           equ	2447	;# 
  3583     098F                     CMSTAT          equ	2447	;# 
  3584     0990                     CM1CON0         equ	2448	;# 
  3585     0991                     CM1CON1         equ	2449	;# 
  3586     0992                     CM1NCH          equ	2450	;# 
  3587     0993                     CM1PCH          equ	2451	;# 
  3588     0994                     CM2CON0         equ	2452	;# 
  3589     0995                     CM2CON1         equ	2453	;# 
  3590     0996                     CM2NCH          equ	2454	;# 
  3591     0997                     CM2PCH          equ	2455	;# 
  3592     1E0F                     CLCDATA         equ	7695	;# 
  3593     1E10                     CLC1CON         equ	7696	;# 
  3594     1E11                     CLC1POL         equ	7697	;# 
  3595     1E12                     CLC1SEL0        equ	7698	;# 
  3596     1E13                     CLC1SEL1        equ	7699	;# 
  3597     1E14                     CLC1SEL2        equ	7700	;# 
  3598     1E15                     CLC1SEL3        equ	7701	;# 
  3599     1E16                     CLC1GLS0        equ	7702	;# 
  3600     1E17                     CLC1GLS1        equ	7703	;# 
  3601     1E18                     CLC1GLS2        equ	7704	;# 
  3602     1E19                     CLC1GLS3        equ	7705	;# 
  3603     1E1A                     CLC2CON         equ	7706	;# 
  3604     1E1B                     CLC2POL         equ	7707	;# 
  3605     1E1C                     CLC2SEL0        equ	7708	;# 
  3606     1E1D                     CLC2SEL1        equ	7709	;# 
  3607     1E1E                     CLC2SEL2        equ	7710	;# 
  3608     1E1F                     CLC2SEL3        equ	7711	;# 
  3609     1E20                     CLC2GLS0        equ	7712	;# 
  3610     1E21                     CLC2GLS1        equ	7713	;# 
  3611     1E22                     CLC2GLS2        equ	7714	;# 
  3612     1E23                     CLC2GLS3        equ	7715	;# 
  3613     1E24                     CLC3CON         equ	7716	;# 
  3614     1E25                     CLC3POL         equ	7717	;# 
  3615     1E26                     CLC3SEL0        equ	7718	;# 
  3616     1E27                     CLC3SEL1        equ	7719	;# 
  3617     1E28                     CLC3SEL2        equ	7720	;# 
  3618     1E29                     CLC3SEL3        equ	7721	;# 
  3619     1E2A                     CLC3GLS0        equ	7722	;# 
  3620     1E2B                     CLC3GLS1        equ	7723	;# 
  3621     1E2C                     CLC3GLS2        equ	7724	;# 
  3622     1E2D                     CLC3GLS3        equ	7725	;# 
  3623     1E2E                     CLC4CON         equ	7726	;# 
  3624     1E2F                     CLC4POL         equ	7727	;# 
  3625     1E30                     CLC4SEL0        equ	7728	;# 
  3626     1E31                     CLC4SEL1        equ	7729	;# 
  3627     1E32                     CLC4SEL2        equ	7730	;# 
  3628     1E33                     CLC4SEL3        equ	7731	;# 
  3629     1E34                     CLC4GLS0        equ	7732	;# 
  3630     1E35                     CLC4GLS1        equ	7733	;# 
  3631     1E36                     CLC4GLS2        equ	7734	;# 
  3632     1E37                     CLC4GLS3        equ	7735	;# 
  3633     1E8F                     PPSLOCK         equ	7823	;# 
  3634     1E90                     INTPPS          equ	7824	;# 
  3635     1E91                     T0CKIPPS        equ	7825	;# 
  3636     1E92                     T1CKIPPS        equ	7826	;# 
  3637     1E93                     T1GPPS          equ	7827	;# 
  3638     1E94                     T3CKIPPS        equ	7828	;# 
  3639     1E95                     T3GPPS          equ	7829	;# 
  3640     1E96                     T5CKIPPS        equ	7830	;# 
  3641     1E97                     T5GPPS          equ	7831	;# 
  3642     1E9C                     T2INPPS         equ	7836	;# 
  3643     1E9D                     T4INPPS         equ	7837	;# 
  3644     1E9E                     T6INPPS         equ	7838	;# 
  3645     1EA1                     CCP1PPS         equ	7841	;# 
  3646     1EA2                     CCP2PPS         equ	7842	;# 
  3647     1EA3                     CCP3PPS         equ	7843	;# 
  3648     1EA4                     CCP4PPS         equ	7844	;# 
  3649     1EA9                     SMT1WINPPS      equ	7849	;# 
  3650     1EAA                     SMT1SIGPPS      equ	7850	;# 
  3651     1EB1                     CWG1PPS         equ	7857	;# 
  3652     1EB2                     CWG2PPS         equ	7858	;# 
  3653     1EB8                     MDCARLPPS       equ	7864	;# 
  3654     1EB9                     MDCARHPPS       equ	7865	;# 
  3655     1EBA                     MDSRCPPS        equ	7866	;# 
  3656     1EBB                     CLCIN0PPS       equ	7867	;# 
  3657     1EBC                     CLCIN1PPS       equ	7868	;# 
  3658     1EBD                     CLCIN2PPS       equ	7869	;# 
  3659     1EBE                     CLCIN3PPS       equ	7870	;# 
  3660     1EC3                     ADACTPPS        equ	7875	;# 
  3661     1EC5                     SSP1CLKPPS      equ	7877	;# 
  3662     1EC6                     SSP1DATPPS      equ	7878	;# 
  3663     1EC7                     SSP1SSPPS       equ	7879	;# 
  3664     1EC8                     SSP2CLKPPS      equ	7880	;# 
  3665     1EC9                     SSP2DATPPS      equ	7881	;# 
  3666     1ECA                     SSP2SSPPS       equ	7882	;# 
  3667     1ECB                     RX1PPS          equ	7883	;# 
  3668     1ECC                     CK1PPS          equ	7884	;# 
  3669     1F10                     RA0PPS          equ	7952	;# 
  3670     1F11                     RA1PPS          equ	7953	;# 
  3671     1F12                     RA2PPS          equ	7954	;# 
  3672     1F14                     RA4PPS          equ	7956	;# 
  3673     1F15                     RA5PPS          equ	7957	;# 
  3674     1F20                     RC0PPS          equ	7968	;# 
  3675     1F21                     RC1PPS          equ	7969	;# 
  3676     1F22                     RC2PPS          equ	7970	;# 
  3677     1F23                     RC3PPS          equ	7971	;# 
  3678     1F24                     RC4PPS          equ	7972	;# 
  3679     1F25                     RC5PPS          equ	7973	;# 
  3680     1F38                     ANSELA          equ	7992	;# 
  3681     1F39                     WPUA            equ	7993	;# 
  3682     1F3A                     ODCONA          equ	7994	;# 
  3683     1F3B                     SLRCONA         equ	7995	;# 
  3684     1F3C                     INLVLA          equ	7996	;# 
  3685     1F3D                     IOCAP           equ	7997	;# 
  3686     1F3E                     IOCAN           equ	7998	;# 
  3687     1F3F                     IOCAF           equ	7999	;# 
  3688     1F4E                     ANSELC          equ	8014	;# 
  3689     1F4F                     WPUC            equ	8015	;# 
  3690     1F50                     ODCONC          equ	8016	;# 
  3691     1F51                     SLRCONC         equ	8017	;# 
  3692     1F52                     INLVLC          equ	8018	;# 
  3693     1F53                     IOCCP           equ	8019	;# 
  3694     1F54                     IOCCN           equ	8020	;# 
  3695     1F55                     IOCCF           equ	8021	;# 
  3696     1FE4                     STATUS_SHAD     equ	8164	;# 
  3697     1FE5                     WREG_SHAD       equ	8165	;# 
  3698     1FE6                     BSR_SHAD        equ	8166	;# 
  3699     1FE7                     PCLATH_SHAD     equ	8167	;# 
  3700     1FE8                     FSR0_SHAD       equ	8168	;# 
  3701     1FE8                     FSR0L_SHAD      equ	8168	;# 
  3702     1FE9                     FSR0H_SHAD      equ	8169	;# 
  3703     1FEA                     FSR1L_SHAD      equ	8170	;# 
  3704     1FEB                     FSR1H_SHAD      equ	8171	;# 
  3705     1FED                     STKPTR          equ	8173	;# 
  3706     1FEE                     TOSL            equ	8174	;# 
  3707     1FEF                     TOSH            equ	8175	;# 
  3708     0000                     INDF0           equ	0	;# 
  3709     0001                     INDF1           equ	1	;# 
  3710     0002                     PCL             equ	2	;# 
  3711     0003                     STATUS          equ	3	;# 
  3712     0004                     FSR0L           equ	4	;# 
  3713     0005                     FSR0H           equ	5	;# 
  3714     0006                     FSR1L           equ	6	;# 
  3715     0007                     FSR1H           equ	7	;# 
  3716     0008                     BSR             equ	8	;# 
  3717     0009                     WREG            equ	9	;# 
  3718     000A                     PCLATH          equ	10	;# 
  3719     000B                     INTCON          equ	11	;# 
  3720     000C                     PORTA           equ	12	;# 
  3721     000E                     PORTC           equ	14	;# 
  3722     0012                     TRISA           equ	18	;# 
  3723     0014                     TRISC           equ	20	;# 
  3724     0018                     LATA            equ	24	;# 
  3725     001A                     LATC            equ	26	;# 
  3726     008C                     ADLTH           equ	140	;# 
  3727     008C                     ADLTHL          equ	140	;# 
  3728     008D                     ADLTHH          equ	141	;# 
  3729     008E                     ADUTH           equ	142	;# 
  3730     008E                     ADUTHL          equ	142	;# 
  3731     008F                     ADUTHH          equ	143	;# 
  3732     0090                     ADERR           equ	144	;# 
  3733     0090                     ADERRL          equ	144	;# 
  3734     0091                     ADERRH          equ	145	;# 
  3735     0092                     ADSTPT          equ	146	;# 
  3736     0092                     ADSTPTL         equ	146	;# 
  3737     0093                     ADSTPTH         equ	147	;# 
  3738     0094                     ADFLTR          equ	148	;# 
  3739     0094                     ADFLTRL         equ	148	;# 
  3740     0095                     ADFLTRH         equ	149	;# 
  3741     0096                     ADACC           equ	150	;# 
  3742     0096                     ADACCL          equ	150	;# 
  3743     0097                     ADACCH          equ	151	;# 
  3744     0098                     ADACCU          equ	152	;# 
  3745     0099                     ADCNT           equ	153	;# 
  3746     009A                     ADRPT           equ	154	;# 
  3747     009B                     ADPREV          equ	155	;# 
  3748     009B                     ADPREVL         equ	155	;# 
  3749     009C                     ADPREVH         equ	156	;# 
  3750     009D                     ADRES           equ	157	;# 
  3751     009D                     ADRESL          equ	157	;# 
  3752     009E                     ADRESH          equ	158	;# 
  3753     009F                     ADPCH           equ	159	;# 
  3754     010C                     ADACQ           equ	268	;# 
  3755     010C                     ADACQL          equ	268	;# 
  3756     010D                     ADACQH          equ	269	;# 
  3757     010E                     ADCAP           equ	270	;# 
  3758     010F                     ADPRE           equ	271	;# 
  3759     010F                     ADPREL          equ	271	;# 
  3760     0110                     ADPREH          equ	272	;# 
  3761     0111                     ADCON0          equ	273	;# 
  3762     0112                     ADCON1          equ	274	;# 
  3763     0113                     ADCON2          equ	275	;# 
  3764     0114                     ADCON3          equ	276	;# 
  3765     0115                     ADSTAT          equ	277	;# 
  3766     0116                     ADREF           equ	278	;# 
  3767     0117                     ADACT           equ	279	;# 
  3768     0118                     ADCLK           equ	280	;# 
  3769     0119                     RC1REG          equ	281	;# 
  3770     0119                     RCREG           equ	281	;# 
  3771     0119                     RCREG1          equ	281	;# 
  3772     011A                     TX1REG          equ	282	;# 
  3773     011A                     TXREG1          equ	282	;# 
  3774     011A                     TXREG           equ	282	;# 
  3775     011B                     SP1BRG          equ	283	;# 
  3776     011B                     SPBRG           equ	283	;# 
  3777     011B                     SP1BRGL         equ	283	;# 
  3778     011B                     SPBRG1          equ	283	;# 
  3779     011B                     SPBRGL          equ	283	;# 
  3780     011C                     SP1BRGH         equ	284	;# 
  3781     011C                     SPBRGH          equ	284	;# 
  3782     011C                     SPBRGH1         equ	284	;# 
  3783     011D                     RC1STA          equ	285	;# 
  3784     011D                     RCSTA1          equ	285	;# 
  3785     011D                     RCSTA           equ	285	;# 
  3786     011E                     TX1STA          equ	286	;# 
  3787     011E                     TXSTA1          equ	286	;# 
  3788     011E                     TXSTA           equ	286	;# 
  3789     011F                     BAUD1CON        equ	287	;# 
  3790     011F                     BAUDCON1        equ	287	;# 
  3791     011F                     BAUDCTL1        equ	287	;# 
  3792     011F                     BAUDCON         equ	287	;# 
  3793     011F                     BAUDCTL         equ	287	;# 
  3794     018C                     SSP1BUF         equ	396	;# 
  3795     018D                     SSP1ADD         equ	397	;# 
  3796     018E                     SSP1MSK         equ	398	;# 
  3797     018F                     SSP1STAT        equ	399	;# 
  3798     0190                     SSP1CON1        equ	400	;# 
  3799     0191                     SSP1CON2        equ	401	;# 
  3800     0192                     SSP1CON3        equ	402	;# 
  3801     0196                     SSP2BUF         equ	406	;# 
  3802     0197                     SSP2ADD         equ	407	;# 
  3803     0198                     SSP2MSK         equ	408	;# 
  3804     0199                     SSP2STAT        equ	409	;# 
  3805     019A                     SSP2CON1        equ	410	;# 
  3806     019B                     SSP2CON2        equ	411	;# 
  3807     019C                     SSP2CON3        equ	412	;# 
  3808     020C                     TMR1            equ	524	;# 
  3809     020C                     TMR1L           equ	524	;# 
  3810     020D                     TMR1H           equ	525	;# 
  3811     020E                     T1CON           equ	526	;# 
  3812     020E                     TMR1CON         equ	526	;# 
  3813     020F                     T1GCON          equ	527	;# 
  3814     020F                     TMR1GCON        equ	527	;# 
  3815     0210                     T1GATE          equ	528	;# 
  3816     0210                     TMR1GATE        equ	528	;# 
  3817     0211                     T1CLK           equ	529	;# 
  3818     0211                     TMR1CLK         equ	529	;# 
  3819     0211                     PR1             equ	529	;# 
  3820     0212                     TMR3            equ	530	;# 
  3821     0212                     TMR3L           equ	530	;# 
  3822     0213                     TMR3H           equ	531	;# 
  3823     0214                     T3CON           equ	532	;# 
  3824     0214                     TMR3CON         equ	532	;# 
  3825     0215                     T3GCON          equ	533	;# 
  3826     0215                     TMR3GCON        equ	533	;# 
  3827     0216                     T3GATE          equ	534	;# 
  3828     0216                     TMR3GATE        equ	534	;# 
  3829     0217                     T3CLK           equ	535	;# 
  3830     0217                     TMR3CLK         equ	535	;# 
  3831     0217                     PR3             equ	535	;# 
  3832     0218                     TMR5            equ	536	;# 
  3833     0218                     TMR5L           equ	536	;# 
  3834     0219                     TMR5H           equ	537	;# 
  3835     021A                     T5CON           equ	538	;# 
  3836     021A                     TMR5CON         equ	538	;# 
  3837     021B                     T5GCON          equ	539	;# 
  3838     021B                     TMR5GCON        equ	539	;# 
  3839     021C                     T5GATE          equ	540	;# 
  3840     021C                     TMR5GATE        equ	540	;# 
  3841     021D                     T5CLK           equ	541	;# 
  3842     021D                     TMR5CLK         equ	541	;# 
  3843     021D                     PR5             equ	541	;# 
  3844     021E                     CCPTMRS0        equ	542	;# 
  3845     021F                     CCPTMRS1        equ	543	;# 
  3846     028C                     T2TMR           equ	652	;# 
  3847     028C                     TMR2            equ	652	;# 
  3848     028D                     T2PR            equ	653	;# 
  3849     028D                     PR2             equ	653	;# 
  3850     028E                     T2CON           equ	654	;# 
  3851     028F                     T2HLT           equ	655	;# 
  3852     0290                     T2CLKCON        equ	656	;# 
  3853     0291                     T2RST           equ	657	;# 
  3854     0292                     T4TMR           equ	658	;# 
  3855     0292                     TMR4            equ	658	;# 
  3856     0293                     T4PR            equ	659	;# 
  3857     0293                     PR4             equ	659	;# 
  3858     0294                     T4CON           equ	660	;# 
  3859     0295                     T4HLT           equ	661	;# 
  3860     0296                     T4CLKCON        equ	662	;# 
  3861     0297                     T4RST           equ	663	;# 
  3862     0298                     T6TMR           equ	664	;# 
  3863     0298                     TMR6            equ	664	;# 
  3864     0299                     T6PR            equ	665	;# 
  3865     0299                     PR6             equ	665	;# 
  3866     029A                     T6CON           equ	666	;# 
  3867     029B                     T6HLT           equ	667	;# 
  3868     029C                     T6CLKCON        equ	668	;# 
  3869     029D                     T6RST           equ	669	;# 
  3870     029F                     ADCPCON0        equ	671	;# 
  3871     030C                     CCPR1           equ	780	;# 
  3872     030C                     CCPR1L          equ	780	;# 
  3873     030D                     CCPR1H          equ	781	;# 
  3874     030E                     CCP1CON         equ	782	;# 
  3875     030F                     CCP1CAP         equ	783	;# 
  3876     0310                     CCPR2           equ	784	;# 
  3877     0310                     CCPR2L          equ	784	;# 
  3878     0311                     CCPR2H          equ	785	;# 
  3879     0312                     CCP2CON         equ	786	;# 
  3880     0313                     CCP2CAP         equ	787	;# 
  3881     0314                     CCPR3           equ	788	;# 
  3882     0314                     CCPR3L          equ	788	;# 
  3883     0315                     CCPR3H          equ	789	;# 
  3884     0316                     CCP3CON         equ	790	;# 
  3885     0317                     CCP3CAP         equ	791	;# 
  3886     0318                     CCPR4           equ	792	;# 
  3887     0318                     CCPR4L          equ	792	;# 
  3888     0319                     CCPR4H          equ	793	;# 
  3889     031A                     CCP4CON         equ	794	;# 
  3890     031B                     CCP4CAP         equ	795	;# 
  3891     038C                     PWM6DC          equ	908	;# 
  3892     038C                     PWM6DCL         equ	908	;# 
  3893     038D                     PWM6DCH         equ	909	;# 
  3894     038E                     PWM6CON         equ	910	;# 
  3895     0390                     PWM7DC          equ	912	;# 
  3896     0390                     PWM7DCL         equ	912	;# 
  3897     0391                     PWM7DCH         equ	913	;# 
  3898     0392                     PWM7CON         equ	914	;# 
  3899     048C                     SMT1TMR         equ	1164	;# 
  3900     048C                     SMT1TMRL        equ	1164	;# 
  3901     048D                     SMT1TMRH        equ	1165	;# 
  3902     048E                     SMT1TMRU        equ	1166	;# 
  3903     048F                     SMT1CPR         equ	1167	;# 
  3904     048F                     SMT1CPRL        equ	1167	;# 
  3905     0490                     SMT1CPRH        equ	1168	;# 
  3906     0491                     SMT1CPRU        equ	1169	;# 
  3907     0492                     SMT1CPW         equ	1170	;# 
  3908     0492                     SMT1CPWL        equ	1170	;# 
  3909     0493                     SMT1CPWH        equ	1171	;# 
  3910     0494                     SMT1CPWU        equ	1172	;# 
  3911     0495                     SMT1PR          equ	1173	;# 
  3912     0495                     SMT1PRL         equ	1173	;# 
  3913     0496                     SMT1PRH         equ	1174	;# 
  3914     0497                     SMT1PRU         equ	1175	;# 
  3915     0498                     SMT1CON0        equ	1176	;# 
  3916     0499                     SMT1CON1        equ	1177	;# 
  3917     049A                     SMT1STAT        equ	1178	;# 
  3918     049B                     SMT1CLK         equ	1179	;# 
  3919     049C                     SMT1SIG         equ	1180	;# 
  3920     049D                     SMT1WIN         equ	1181	;# 
  3921     058C                     NCO1ACC         equ	1420	;# 
  3922     058C                     NCO1ACCL        equ	1420	;# 
  3923     058D                     NCO1ACCH        equ	1421	;# 
  3924     058E                     NCO1ACCU        equ	1422	;# 
  3925     058F                     NCO1INC         equ	1423	;# 
  3926     058F                     NCO1INCL        equ	1423	;# 
  3927     0590                     NCO1INCH        equ	1424	;# 
  3928     0591                     NCO1INCU        equ	1425	;# 
  3929     0592                     NCO1CON         equ	1426	;# 
  3930     0593                     NCO1CLK         equ	1427	;# 
  3931     059C                     TMR0L           equ	1436	;# 
  3932     059C                     TMR0            equ	1436	;# 
  3933     059D                     TMR0H           equ	1437	;# 
  3934     059D                     PR0             equ	1437	;# 
  3935     059E                     T0CON0          equ	1438	;# 
  3936     059F                     T0CON1          equ	1439	;# 
  3937     060C                     CWG1CLK         equ	1548	;# 
  3938     060C                     CWG1CLKCON      equ	1548	;# 
  3939     060D                     CWG1ISM         equ	1549	;# 
  3940     060D                     CWG1DAT         equ	1549	;# 
  3941     060E                     CWG1DBR         equ	1550	;# 
  3942     060F                     CWG1DBF         equ	1551	;# 
  3943     0610                     CWG1CON0        equ	1552	;# 
  3944     0611                     CWG1CON1        equ	1553	;# 
  3945     0612                     CWG1AS0         equ	1554	;# 
  3946     0613                     CWG1AS1         equ	1555	;# 
  3947     0614                     CWG1STR         equ	1556	;# 
  3948     0616                     CWG2CLK         equ	1558	;# 
  3949     0616                     CWG2CLKCON      equ	1558	;# 
  3950     0617                     CWG2ISM         equ	1559	;# 
  3951     0617                     CWG2DAT         equ	1559	;# 
  3952     0618                     CWG2DBR         equ	1560	;# 
  3953     0619                     CWG2DBF         equ	1561	;# 
  3954     061A                     CWG2CON0        equ	1562	;# 
  3955     061B                     CWG2CON1        equ	1563	;# 
  3956     061C                     CWG2AS0         equ	1564	;# 
  3957     061D                     CWG2AS1         equ	1565	;# 
  3958     061E                     CWG2STR         equ	1566	;# 
  3959     070C                     PIR0            equ	1804	;# 
  3960     070D                     PIR1            equ	1805	;# 
  3961     070E                     PIR2            equ	1806	;# 
  3962     070F                     PIR3            equ	1807	;# 
  3963     0710                     PIR4            equ	1808	;# 
  3964     0711                     PIR5            equ	1809	;# 
  3965     0712                     PIR6            equ	1810	;# 
  3966     0713                     PIR7            equ	1811	;# 
  3967     0714                     PIR8            equ	1812	;# 
  3968     0716                     PIE0            equ	1814	;# 
  3969     0717                     PIE1            equ	1815	;# 
  3970     0718                     PIE2            equ	1816	;# 
  3971     0719                     PIE3            equ	1817	;# 
  3972     071A                     PIE4            equ	1818	;# 
  3973     071B                     PIE5            equ	1819	;# 
  3974     071C                     PIE6            equ	1820	;# 
  3975     071D                     PIE7            equ	1821	;# 
  3976     071E                     PIE8            equ	1822	;# 
  3977     0796                     PMD0            equ	1942	;# 
  3978     0797                     PMD1            equ	1943	;# 
  3979     0798                     PMD2            equ	1944	;# 
  3980     0799                     PMD3            equ	1945	;# 
  3981     079A                     PMD4            equ	1946	;# 
  3982     079B                     PMD5            equ	1947	;# 
  3983     079C                     PMD6            equ	1948	;# 
  3984     079D                     PMD7            equ	1949	;# 
  3985     080C                     WDTCON0         equ	2060	;# 
  3986     080D                     WDTCON1         equ	2061	;# 
  3987     080E                     WDTPSL          equ	2062	;# 
  3988     080F                     WDTPSH          equ	2063	;# 
  3989     0810                     WDTTMR          equ	2064	;# 
  3990     0811                     BORCON          equ	2065	;# 
  3991     0812                     VREGCON         equ	2066	;# 
  3992     0813                     PCON0           equ	2067	;# 
  3993     0814                     PCON1           equ	2068	;# 
  3994     081A                     NVMADR          equ	2074	;# 
  3995     081A                     NVMADRL         equ	2074	;# 
  3996     081B                     NVMADRH         equ	2075	;# 
  3997     081C                     NVMDAT          equ	2076	;# 
  3998     081C                     NVMDATL         equ	2076	;# 
  3999     081D                     NVMDATH         equ	2077	;# 
  4000     081E                     NVMCON1         equ	2078	;# 
  4001     081F                     NVMCON2         equ	2079	;# 
  4002     088C                     CPUDOZE         equ	2188	;# 
  4003     088D                     OSCCON1         equ	2189	;# 
  4004     088E                     OSCCON2         equ	2190	;# 
  4005     088F                     OSCCON3         equ	2191	;# 
  4006     0890                     OSCSTAT         equ	2192	;# 
  4007     0891                     OSCEN           equ	2193	;# 
  4008     0892                     OSCTUNE         equ	2194	;# 
  4009     0893                     OSCFRQ          equ	2195	;# 
  4010     0895                     CLKRCON         equ	2197	;# 
  4011     0896                     CLKRCLK         equ	2198	;# 
  4012     0897                     MD1CON0         equ	2199	;# 
  4013     0898                     MD1CON1         equ	2200	;# 
  4014     0899                     MD1SRC          equ	2201	;# 
  4015     089A                     MD1CARL         equ	2202	;# 
  4016     089B                     MD1CARH         equ	2203	;# 
  4017     090C                     FVRCON          equ	2316	;# 
  4018     090E                     DAC1CON0        equ	2318	;# 
  4019     090F                     DAC1CON1        equ	2319	;# 
  4020     091F                     ZCDCON          equ	2335	;# 
  4021     098F                     CMOUT           equ	2447	;# 
  4022     098F                     CMSTAT          equ	2447	;# 
  4023     0990                     CM1CON0         equ	2448	;# 
  4024     0991                     CM1CON1         equ	2449	;# 
  4025     0992                     CM1NCH          equ	2450	;# 
  4026     0993                     CM1PCH          equ	2451	;# 
  4027     0994                     CM2CON0         equ	2452	;# 
  4028     0995                     CM2CON1         equ	2453	;# 
  4029     0996                     CM2NCH          equ	2454	;# 
  4030     0997                     CM2PCH          equ	2455	;# 
  4031     1E0F                     CLCDATA         equ	7695	;# 
  4032     1E10                     CLC1CON         equ	7696	;# 
  4033     1E11                     CLC1POL         equ	7697	;# 
  4034     1E12                     CLC1SEL0        equ	7698	;# 
  4035     1E13                     CLC1SEL1        equ	7699	;# 
  4036     1E14                     CLC1SEL2        equ	7700	;# 
  4037     1E15                     CLC1SEL3        equ	7701	;# 
  4038     1E16                     CLC1GLS0        equ	7702	;# 
  4039     1E17                     CLC1GLS1        equ	7703	;# 
  4040     1E18                     CLC1GLS2        equ	7704	;# 
  4041     1E19                     CLC1GLS3        equ	7705	;# 
  4042     1E1A                     CLC2CON         equ	7706	;# 
  4043     1E1B                     CLC2POL         equ	7707	;# 
  4044     1E1C                     CLC2SEL0        equ	7708	;# 
  4045     1E1D                     CLC2SEL1        equ	7709	;# 
  4046     1E1E                     CLC2SEL2        equ	7710	;# 
  4047     1E1F                     CLC2SEL3        equ	7711	;# 
  4048     1E20                     CLC2GLS0        equ	7712	;# 
  4049     1E21                     CLC2GLS1        equ	7713	;# 
  4050     1E22                     CLC2GLS2        equ	7714	;# 
  4051     1E23                     CLC2GLS3        equ	7715	;# 
  4052     1E24                     CLC3CON         equ	7716	;# 
  4053     1E25                     CLC3POL         equ	7717	;# 
  4054     1E26                     CLC3SEL0        equ	7718	;# 
  4055     1E27                     CLC3SEL1        equ	7719	;# 
  4056     1E28                     CLC3SEL2        equ	7720	;# 
  4057     1E29                     CLC3SEL3        equ	7721	;# 
  4058     1E2A                     CLC3GLS0        equ	7722	;# 
  4059     1E2B                     CLC3GLS1        equ	7723	;# 
  4060     1E2C                     CLC3GLS2        equ	7724	;# 
  4061     1E2D                     CLC3GLS3        equ	7725	;# 
  4062     1E2E                     CLC4CON         equ	7726	;# 
  4063     1E2F                     CLC4POL         equ	7727	;# 
  4064     1E30                     CLC4SEL0        equ	7728	;# 
  4065     1E31                     CLC4SEL1        equ	7729	;# 
  4066     1E32                     CLC4SEL2        equ	7730	;# 
  4067     1E33                     CLC4SEL3        equ	7731	;# 
  4068     1E34                     CLC4GLS0        equ	7732	;# 
  4069     1E35                     CLC4GLS1        equ	7733	;# 
  4070     1E36                     CLC4GLS2        equ	7734	;# 
  4071     1E37                     CLC4GLS3        equ	7735	;# 
  4072     1E8F                     PPSLOCK         equ	7823	;# 
  4073     1E90                     INTPPS          equ	7824	;# 
  4074     1E91                     T0CKIPPS        equ	7825	;# 
  4075     1E92                     T1CKIPPS        equ	7826	;# 
  4076     1E93                     T1GPPS          equ	7827	;# 
  4077     1E94                     T3CKIPPS        equ	7828	;# 
  4078     1E95                     T3GPPS          equ	7829	;# 
  4079     1E96                     T5CKIPPS        equ	7830	;# 
  4080     1E97                     T5GPPS          equ	7831	;# 
  4081     1E9C                     T2INPPS         equ	7836	;# 
  4082     1E9D                     T4INPPS         equ	7837	;# 
  4083     1E9E                     T6INPPS         equ	7838	;# 
  4084     1EA1                     CCP1PPS         equ	7841	;# 
  4085     1EA2                     CCP2PPS         equ	7842	;# 
  4086     1EA3                     CCP3PPS         equ	7843	;# 
  4087     1EA4                     CCP4PPS         equ	7844	;# 
  4088     1EA9                     SMT1WINPPS      equ	7849	;# 
  4089     1EAA                     SMT1SIGPPS      equ	7850	;# 
  4090     1EB1                     CWG1PPS         equ	7857	;# 
  4091     1EB2                     CWG2PPS         equ	7858	;# 
  4092     1EB8                     MDCARLPPS       equ	7864	;# 
  4093     1EB9                     MDCARHPPS       equ	7865	;# 
  4094     1EBA                     MDSRCPPS        equ	7866	;# 
  4095     1EBB                     CLCIN0PPS       equ	7867	;# 
  4096     1EBC                     CLCIN1PPS       equ	7868	;# 
  4097     1EBD                     CLCIN2PPS       equ	7869	;# 
  4098     1EBE                     CLCIN3PPS       equ	7870	;# 
  4099     1EC3                     ADACTPPS        equ	7875	;# 
  4100     1EC5                     SSP1CLKPPS      equ	7877	;# 
  4101     1EC6                     SSP1DATPPS      equ	7878	;# 
  4102     1EC7                     SSP1SSPPS       equ	7879	;# 
  4103     1EC8                     SSP2CLKPPS      equ	7880	;# 
  4104     1EC9                     SSP2DATPPS      equ	7881	;# 
  4105     1ECA                     SSP2SSPPS       equ	7882	;# 
  4106     1ECB                     RX1PPS          equ	7883	;# 
  4107     1ECC                     CK1PPS          equ	7884	;# 
  4108     1F10                     RA0PPS          equ	7952	;# 
  4109     1F11                     RA1PPS          equ	7953	;# 
  4110     1F12                     RA2PPS          equ	7954	;# 
  4111     1F14                     RA4PPS          equ	7956	;# 
  4112     1F15                     RA5PPS          equ	7957	;# 
  4113     1F20                     RC0PPS          equ	7968	;# 
  4114     1F21                     RC1PPS          equ	7969	;# 
  4115     1F22                     RC2PPS          equ	7970	;# 
  4116     1F23                     RC3PPS          equ	7971	;# 
  4117     1F24                     RC4PPS          equ	7972	;# 
  4118     1F25                     RC5PPS          equ	7973	;# 
  4119     1F38                     ANSELA          equ	7992	;# 
  4120     1F39                     WPUA            equ	7993	;# 
  4121     1F3A                     ODCONA          equ	7994	;# 
  4122     1F3B                     SLRCONA         equ	7995	;# 
  4123     1F3C                     INLVLA          equ	7996	;# 
  4124     1F3D                     IOCAP           equ	7997	;# 
  4125     1F3E                     IOCAN           equ	7998	;# 
  4126     1F3F                     IOCAF           equ	7999	;# 
  4127     1F4E                     ANSELC          equ	8014	;# 
  4128     1F4F                     WPUC            equ	8015	;# 
  4129     1F50                     ODCONC          equ	8016	;# 
  4130     1F51                     SLRCONC         equ	8017	;# 
  4131     1F52                     INLVLC          equ	8018	;# 
  4132     1F53                     IOCCP           equ	8019	;# 
  4133     1F54                     IOCCN           equ	8020	;# 
  4134     1F55                     IOCCF           equ	8021	;# 
  4135     1FE4                     STATUS_SHAD     equ	8164	;# 
  4136     1FE5                     WREG_SHAD       equ	8165	;# 
  4137     1FE6                     BSR_SHAD        equ	8166	;# 
  4138     1FE7                     PCLATH_SHAD     equ	8167	;# 
  4139     1FE8                     FSR0_SHAD       equ	8168	;# 
  4140     1FE8                     FSR0L_SHAD      equ	8168	;# 
  4141     1FE9                     FSR0H_SHAD      equ	8169	;# 
  4142     1FEA                     FSR1L_SHAD      equ	8170	;# 
  4143     1FEB                     FSR1H_SHAD      equ	8171	;# 
  4144     1FED                     STKPTR          equ	8173	;# 
  4145     1FEE                     TOSL            equ	8174	;# 
  4146     1FEF                     TOSH            equ	8175	;# 
  4147     0000                     INDF0           equ	0	;# 
  4148     0001                     INDF1           equ	1	;# 
  4149     0002                     PCL             equ	2	;# 
  4150     0003                     STATUS          equ	3	;# 
  4151     0004                     FSR0L           equ	4	;# 
  4152     0005                     FSR0H           equ	5	;# 
  4153     0006                     FSR1L           equ	6	;# 
  4154     0007                     FSR1H           equ	7	;# 
  4155     0008                     BSR             equ	8	;# 
  4156     0009                     WREG            equ	9	;# 
  4157     000A                     PCLATH          equ	10	;# 
  4158     000B                     INTCON          equ	11	;# 
  4159     000C                     PORTA           equ	12	;# 
  4160     000E                     PORTC           equ	14	;# 
  4161     0012                     TRISA           equ	18	;# 
  4162     0014                     TRISC           equ	20	;# 
  4163     0018                     LATA            equ	24	;# 
  4164     001A                     LATC            equ	26	;# 
  4165     008C                     ADLTH           equ	140	;# 
  4166     008C                     ADLTHL          equ	140	;# 
  4167     008D                     ADLTHH          equ	141	;# 
  4168     008E                     ADUTH           equ	142	;# 
  4169     008E                     ADUTHL          equ	142	;# 
  4170     008F                     ADUTHH          equ	143	;# 
  4171     0090                     ADERR           equ	144	;# 
  4172     0090                     ADERRL          equ	144	;# 
  4173     0091                     ADERRH          equ	145	;# 
  4174     0092                     ADSTPT          equ	146	;# 
  4175     0092                     ADSTPTL         equ	146	;# 
  4176     0093                     ADSTPTH         equ	147	;# 
  4177     0094                     ADFLTR          equ	148	;# 
  4178     0094                     ADFLTRL         equ	148	;# 
  4179     0095                     ADFLTRH         equ	149	;# 
  4180     0096                     ADACC           equ	150	;# 
  4181     0096                     ADACCL          equ	150	;# 
  4182     0097                     ADACCH          equ	151	;# 
  4183     0098                     ADACCU          equ	152	;# 
  4184     0099                     ADCNT           equ	153	;# 
  4185     009A                     ADRPT           equ	154	;# 
  4186     009B                     ADPREV          equ	155	;# 
  4187     009B                     ADPREVL         equ	155	;# 
  4188     009C                     ADPREVH         equ	156	;# 
  4189     009D                     ADRES           equ	157	;# 
  4190     009D                     ADRESL          equ	157	;# 
  4191     009E                     ADRESH          equ	158	;# 
  4192     009F                     ADPCH           equ	159	;# 
  4193     010C                     ADACQ           equ	268	;# 
  4194     010C                     ADACQL          equ	268	;# 
  4195     010D                     ADACQH          equ	269	;# 
  4196     010E                     ADCAP           equ	270	;# 
  4197     010F                     ADPRE           equ	271	;# 
  4198     010F                     ADPREL          equ	271	;# 
  4199     0110                     ADPREH          equ	272	;# 
  4200     0111                     ADCON0          equ	273	;# 
  4201     0112                     ADCON1          equ	274	;# 
  4202     0113                     ADCON2          equ	275	;# 
  4203     0114                     ADCON3          equ	276	;# 
  4204     0115                     ADSTAT          equ	277	;# 
  4205     0116                     ADREF           equ	278	;# 
  4206     0117                     ADACT           equ	279	;# 
  4207     0118                     ADCLK           equ	280	;# 
  4208     0119                     RC1REG          equ	281	;# 
  4209     0119                     RCREG           equ	281	;# 
  4210     0119                     RCREG1          equ	281	;# 
  4211     011A                     TX1REG          equ	282	;# 
  4212     011A                     TXREG1          equ	282	;# 
  4213     011A                     TXREG           equ	282	;# 
  4214     011B                     SP1BRG          equ	283	;# 
  4215     011B                     SPBRG           equ	283	;# 
  4216     011B                     SP1BRGL         equ	283	;# 
  4217     011B                     SPBRG1          equ	283	;# 
  4218     011B                     SPBRGL          equ	283	;# 
  4219     011C                     SP1BRGH         equ	284	;# 
  4220     011C                     SPBRGH          equ	284	;# 
  4221     011C                     SPBRGH1         equ	284	;# 
  4222     011D                     RC1STA          equ	285	;# 
  4223     011D                     RCSTA1          equ	285	;# 
  4224     011D                     RCSTA           equ	285	;# 
  4225     011E                     TX1STA          equ	286	;# 
  4226     011E                     TXSTA1          equ	286	;# 
  4227     011E                     TXSTA           equ	286	;# 
  4228     011F                     BAUD1CON        equ	287	;# 
  4229     011F                     BAUDCON1        equ	287	;# 
  4230     011F                     BAUDCTL1        equ	287	;# 
  4231     011F                     BAUDCON         equ	287	;# 
  4232     011F                     BAUDCTL         equ	287	;# 
  4233     018C                     SSP1BUF         equ	396	;# 
  4234     018D                     SSP1ADD         equ	397	;# 
  4235     018E                     SSP1MSK         equ	398	;# 
  4236     018F                     SSP1STAT        equ	399	;# 
  4237     0190                     SSP1CON1        equ	400	;# 
  4238     0191                     SSP1CON2        equ	401	;# 
  4239     0192                     SSP1CON3        equ	402	;# 
  4240     0196                     SSP2BUF         equ	406	;# 
  4241     0197                     SSP2ADD         equ	407	;# 
  4242     0198                     SSP2MSK         equ	408	;# 
  4243     0199                     SSP2STAT        equ	409	;# 
  4244     019A                     SSP2CON1        equ	410	;# 
  4245     019B                     SSP2CON2        equ	411	;# 
  4246     019C                     SSP2CON3        equ	412	;# 
  4247     020C                     TMR1            equ	524	;# 
  4248     020C                     TMR1L           equ	524	;# 
  4249     020D                     TMR1H           equ	525	;# 
  4250     020E                     T1CON           equ	526	;# 
  4251     020E                     TMR1CON         equ	526	;# 
  4252     020F                     T1GCON          equ	527	;# 
  4253     020F                     TMR1GCON        equ	527	;# 
  4254     0210                     T1GATE          equ	528	;# 
  4255     0210                     TMR1GATE        equ	528	;# 
  4256     0211                     T1CLK           equ	529	;# 
  4257     0211                     TMR1CLK         equ	529	;# 
  4258     0211                     PR1             equ	529	;# 
  4259     0212                     TMR3            equ	530	;# 
  4260     0212                     TMR3L           equ	530	;# 
  4261     0213                     TMR3H           equ	531	;# 
  4262     0214                     T3CON           equ	532	;# 
  4263     0214                     TMR3CON         equ	532	;# 
  4264     0215                     T3GCON          equ	533	;# 
  4265     0215                     TMR3GCON        equ	533	;# 
  4266     0216                     T3GATE          equ	534	;# 
  4267     0216                     TMR3GATE        equ	534	;# 
  4268     0217                     T3CLK           equ	535	;# 
  4269     0217                     TMR3CLK         equ	535	;# 
  4270     0217                     PR3             equ	535	;# 
  4271     0218                     TMR5            equ	536	;# 
  4272     0218                     TMR5L           equ	536	;# 
  4273     0219                     TMR5H           equ	537	;# 
  4274     021A                     T5CON           equ	538	;# 
  4275     021A                     TMR5CON         equ	538	;# 
  4276     021B                     T5GCON          equ	539	;# 
  4277     021B                     TMR5GCON        equ	539	;# 
  4278     021C                     T5GATE          equ	540	;# 
  4279     021C                     TMR5GATE        equ	540	;# 
  4280     021D                     T5CLK           equ	541	;# 
  4281     021D                     TMR5CLK         equ	541	;# 
  4282     021D                     PR5             equ	541	;# 
  4283     021E                     CCPTMRS0        equ	542	;# 
  4284     021F                     CCPTMRS1        equ	543	;# 
  4285     028C                     T2TMR           equ	652	;# 
  4286     028C                     TMR2            equ	652	;# 
  4287     028D                     T2PR            equ	653	;# 
  4288     028D                     PR2             equ	653	;# 
  4289     028E                     T2CON           equ	654	;# 
  4290     028F                     T2HLT           equ	655	;# 
  4291     0290                     T2CLKCON        equ	656	;# 
  4292     0291                     T2RST           equ	657	;# 
  4293     0292                     T4TMR           equ	658	;# 
  4294     0292                     TMR4            equ	658	;# 
  4295     0293                     T4PR            equ	659	;# 
  4296     0293                     PR4             equ	659	;# 
  4297     0294                     T4CON           equ	660	;# 
  4298     0295                     T4HLT           equ	661	;# 
  4299     0296                     T4CLKCON        equ	662	;# 
  4300     0297                     T4RST           equ	663	;# 
  4301     0298                     T6TMR           equ	664	;# 
  4302     0298                     TMR6            equ	664	;# 
  4303     0299                     T6PR            equ	665	;# 
  4304     0299                     PR6             equ	665	;# 
  4305     029A                     T6CON           equ	666	;# 
  4306     029B                     T6HLT           equ	667	;# 
  4307     029C                     T6CLKCON        equ	668	;# 
  4308     029D                     T6RST           equ	669	;# 
  4309     029F                     ADCPCON0        equ	671	;# 
  4310     030C                     CCPR1           equ	780	;# 
  4311     030C                     CCPR1L          equ	780	;# 
  4312     030D                     CCPR1H          equ	781	;# 
  4313     030E                     CCP1CON         equ	782	;# 
  4314     030F                     CCP1CAP         equ	783	;# 
  4315     0310                     CCPR2           equ	784	;# 
  4316     0310                     CCPR2L          equ	784	;# 
  4317     0311                     CCPR2H          equ	785	;# 
  4318     0312                     CCP2CON         equ	786	;# 
  4319     0313                     CCP2CAP         equ	787	;# 
  4320     0314                     CCPR3           equ	788	;# 
  4321     0314                     CCPR3L          equ	788	;# 
  4322     0315                     CCPR3H          equ	789	;# 
  4323     0316                     CCP3CON         equ	790	;# 
  4324     0317                     CCP3CAP         equ	791	;# 
  4325     0318                     CCPR4           equ	792	;# 
  4326     0318                     CCPR4L          equ	792	;# 
  4327     0319                     CCPR4H          equ	793	;# 
  4328     031A                     CCP4CON         equ	794	;# 
  4329     031B                     CCP4CAP         equ	795	;# 
  4330     038C                     PWM6DC          equ	908	;# 
  4331     038C                     PWM6DCL         equ	908	;# 
  4332     038D                     PWM6DCH         equ	909	;# 
  4333     038E                     PWM6CON         equ	910	;# 
  4334     0390                     PWM7DC          equ	912	;# 
  4335     0390                     PWM7DCL         equ	912	;# 
  4336     0391                     PWM7DCH         equ	913	;# 
  4337     0392                     PWM7CON         equ	914	;# 
  4338     048C                     SMT1TMR         equ	1164	;# 
  4339     048C                     SMT1TMRL        equ	1164	;# 
  4340     048D                     SMT1TMRH        equ	1165	;# 
  4341     048E                     SMT1TMRU        equ	1166	;# 
  4342     048F                     SMT1CPR         equ	1167	;# 
  4343     048F                     SMT1CPRL        equ	1167	;# 
  4344     0490                     SMT1CPRH        equ	1168	;# 
  4345     0491                     SMT1CPRU        equ	1169	;# 
  4346     0492                     SMT1CPW         equ	1170	;# 
  4347     0492                     SMT1CPWL        equ	1170	;# 
  4348     0493                     SMT1CPWH        equ	1171	;# 
  4349     0494                     SMT1CPWU        equ	1172	;# 
  4350     0495                     SMT1PR          equ	1173	;# 
  4351     0495                     SMT1PRL         equ	1173	;# 
  4352     0496                     SMT1PRH         equ	1174	;# 
  4353     0497                     SMT1PRU         equ	1175	;# 
  4354     0498                     SMT1CON0        equ	1176	;# 
  4355     0499                     SMT1CON1        equ	1177	;# 
  4356     049A                     SMT1STAT        equ	1178	;# 
  4357     049B                     SMT1CLK         equ	1179	;# 
  4358     049C                     SMT1SIG         equ	1180	;# 
  4359     049D                     SMT1WIN         equ	1181	;# 
  4360     058C                     NCO1ACC         equ	1420	;# 
  4361     058C                     NCO1ACCL        equ	1420	;# 
  4362     058D                     NCO1ACCH        equ	1421	;# 
  4363     058E                     NCO1ACCU        equ	1422	;# 
  4364     058F                     NCO1INC         equ	1423	;# 
  4365     058F                     NCO1INCL        equ	1423	;# 
  4366     0590                     NCO1INCH        equ	1424	;# 
  4367     0591                     NCO1INCU        equ	1425	;# 
  4368     0592                     NCO1CON         equ	1426	;# 
  4369     0593                     NCO1CLK         equ	1427	;# 
  4370     059C                     TMR0L           equ	1436	;# 
  4371     059C                     TMR0            equ	1436	;# 
  4372     059D                     TMR0H           equ	1437	;# 
  4373     059D                     PR0             equ	1437	;# 
  4374     059E                     T0CON0          equ	1438	;# 
  4375     059F                     T0CON1          equ	1439	;# 
  4376     060C                     CWG1CLK         equ	1548	;# 
  4377     060C                     CWG1CLKCON      equ	1548	;# 
  4378     060D                     CWG1ISM         equ	1549	;# 
  4379     060D                     CWG1DAT         equ	1549	;# 
  4380     060E                     CWG1DBR         equ	1550	;# 
  4381     060F                     CWG1DBF         equ	1551	;# 
  4382     0610                     CWG1CON0        equ	1552	;# 
  4383     0611                     CWG1CON1        equ	1553	;# 
  4384     0612                     CWG1AS0         equ	1554	;# 
  4385     0613                     CWG1AS1         equ	1555	;# 
  4386     0614                     CWG1STR         equ	1556	;# 
  4387     0616                     CWG2CLK         equ	1558	;# 
  4388     0616                     CWG2CLKCON      equ	1558	;# 
  4389     0617                     CWG2ISM         equ	1559	;# 
  4390     0617                     CWG2DAT         equ	1559	;# 
  4391     0618                     CWG2DBR         equ	1560	;# 
  4392     0619                     CWG2DBF         equ	1561	;# 
  4393     061A                     CWG2CON0        equ	1562	;# 
  4394     061B                     CWG2CON1        equ	1563	;# 
  4395     061C                     CWG2AS0         equ	1564	;# 
  4396     061D                     CWG2AS1         equ	1565	;# 
  4397     061E                     CWG2STR         equ	1566	;# 
  4398     070C                     PIR0            equ	1804	;# 
  4399     070D                     PIR1            equ	1805	;# 
  4400     070E                     PIR2            equ	1806	;# 
  4401     070F                     PIR3            equ	1807	;# 
  4402     0710                     PIR4            equ	1808	;# 
  4403     0711                     PIR5            equ	1809	;# 
  4404     0712                     PIR6            equ	1810	;# 
  4405     0713                     PIR7            equ	1811	;# 
  4406     0714                     PIR8            equ	1812	;# 
  4407     0716                     PIE0            equ	1814	;# 
  4408     0717                     PIE1            equ	1815	;# 
  4409     0718                     PIE2            equ	1816	;# 
  4410     0719                     PIE3            equ	1817	;# 
  4411     071A                     PIE4            equ	1818	;# 
  4412     071B                     PIE5            equ	1819	;# 
  4413     071C                     PIE6            equ	1820	;# 
  4414     071D                     PIE7            equ	1821	;# 
  4415     071E                     PIE8            equ	1822	;# 
  4416     0796                     PMD0            equ	1942	;# 
  4417     0797                     PMD1            equ	1943	;# 
  4418     0798                     PMD2            equ	1944	;# 
  4419     0799                     PMD3            equ	1945	;# 
  4420     079A                     PMD4            equ	1946	;# 
  4421     079B                     PMD5            equ	1947	;# 
  4422     079C                     PMD6            equ	1948	;# 
  4423     079D                     PMD7            equ	1949	;# 
  4424     080C                     WDTCON0         equ	2060	;# 
  4425     080D                     WDTCON1         equ	2061	;# 
  4426     080E                     WDTPSL          equ	2062	;# 
  4427     080F                     WDTPSH          equ	2063	;# 
  4428     0810                     WDTTMR          equ	2064	;# 
  4429     0811                     BORCON          equ	2065	;# 
  4430     0812                     VREGCON         equ	2066	;# 
  4431     0813                     PCON0           equ	2067	;# 
  4432     0814                     PCON1           equ	2068	;# 
  4433     081A                     NVMADR          equ	2074	;# 
  4434     081A                     NVMADRL         equ	2074	;# 
  4435     081B                     NVMADRH         equ	2075	;# 
  4436     081C                     NVMDAT          equ	2076	;# 
  4437     081C                     NVMDATL         equ	2076	;# 
  4438     081D                     NVMDATH         equ	2077	;# 
  4439     081E                     NVMCON1         equ	2078	;# 
  4440     081F                     NVMCON2         equ	2079	;# 
  4441     088C                     CPUDOZE         equ	2188	;# 
  4442     088D                     OSCCON1         equ	2189	;# 
  4443     088E                     OSCCON2         equ	2190	;# 
  4444     088F                     OSCCON3         equ	2191	;# 
  4445     0890                     OSCSTAT         equ	2192	;# 
  4446     0891                     OSCEN           equ	2193	;# 
  4447     0892                     OSCTUNE         equ	2194	;# 
  4448     0893                     OSCFRQ          equ	2195	;# 
  4449     0895                     CLKRCON         equ	2197	;# 
  4450     0896                     CLKRCLK         equ	2198	;# 
  4451     0897                     MD1CON0         equ	2199	;# 
  4452     0898                     MD1CON1         equ	2200	;# 
  4453     0899                     MD1SRC          equ	2201	;# 
  4454     089A                     MD1CARL         equ	2202	;# 
  4455     089B                     MD1CARH         equ	2203	;# 
  4456     090C                     FVRCON          equ	2316	;# 
  4457     090E                     DAC1CON0        equ	2318	;# 
  4458     090F                     DAC1CON1        equ	2319	;# 
  4459     091F                     ZCDCON          equ	2335	;# 
  4460     098F                     CMOUT           equ	2447	;# 
  4461     098F                     CMSTAT          equ	2447	;# 
  4462     0990                     CM1CON0         equ	2448	;# 
  4463     0991                     CM1CON1         equ	2449	;# 
  4464     0992                     CM1NCH          equ	2450	;# 
  4465     0993                     CM1PCH          equ	2451	;# 
  4466     0994                     CM2CON0         equ	2452	;# 
  4467     0995                     CM2CON1         equ	2453	;# 
  4468     0996                     CM2NCH          equ	2454	;# 
  4469     0997                     CM2PCH          equ	2455	;# 
  4470     1E0F                     CLCDATA         equ	7695	;# 
  4471     1E10                     CLC1CON         equ	7696	;# 
  4472     1E11                     CLC1POL         equ	7697	;# 
  4473     1E12                     CLC1SEL0        equ	7698	;# 
  4474     1E13                     CLC1SEL1        equ	7699	;# 
  4475     1E14                     CLC1SEL2        equ	7700	;# 
  4476     1E15                     CLC1SEL3        equ	7701	;# 
  4477     1E16                     CLC1GLS0        equ	7702	;# 
  4478     1E17                     CLC1GLS1        equ	7703	;# 
  4479     1E18                     CLC1GLS2        equ	7704	;# 
  4480     1E19                     CLC1GLS3        equ	7705	;# 
  4481     1E1A                     CLC2CON         equ	7706	;# 
  4482     1E1B                     CLC2POL         equ	7707	;# 
  4483     1E1C                     CLC2SEL0        equ	7708	;# 
  4484     1E1D                     CLC2SEL1        equ	7709	;# 
  4485     1E1E                     CLC2SEL2        equ	7710	;# 
  4486     1E1F                     CLC2SEL3        equ	7711	;# 
  4487     1E20                     CLC2GLS0        equ	7712	;# 
  4488     1E21                     CLC2GLS1        equ	7713	;# 
  4489     1E22                     CLC2GLS2        equ	7714	;# 
  4490     1E23                     CLC2GLS3        equ	7715	;# 
  4491     1E24                     CLC3CON         equ	7716	;# 
  4492     1E25                     CLC3POL         equ	7717	;# 
  4493     1E26                     CLC3SEL0        equ	7718	;# 
  4494     1E27                     CLC3SEL1        equ	7719	;# 
  4495     1E28                     CLC3SEL2        equ	7720	;# 
  4496     1E29                     CLC3SEL3        equ	7721	;# 
  4497     1E2A                     CLC3GLS0        equ	7722	;# 
  4498     1E2B                     CLC3GLS1        equ	7723	;# 
  4499     1E2C                     CLC3GLS2        equ	7724	;# 
  4500     1E2D                     CLC3GLS3        equ	7725	;# 
  4501     1E2E                     CLC4CON         equ	7726	;# 
  4502     1E2F                     CLC4POL         equ	7727	;# 
  4503     1E30                     CLC4SEL0        equ	7728	;# 
  4504     1E31                     CLC4SEL1        equ	7729	;# 
  4505     1E32                     CLC4SEL2        equ	7730	;# 
  4506     1E33                     CLC4SEL3        equ	7731	;# 
  4507     1E34                     CLC4GLS0        equ	7732	;# 
  4508     1E35                     CLC4GLS1        equ	7733	;# 
  4509     1E36                     CLC4GLS2        equ	7734	;# 
  4510     1E37                     CLC4GLS3        equ	7735	;# 
  4511     1E8F                     PPSLOCK         equ	7823	;# 
  4512     1E90                     INTPPS          equ	7824	;# 
  4513     1E91                     T0CKIPPS        equ	7825	;# 
  4514     1E92                     T1CKIPPS        equ	7826	;# 
  4515     1E93                     T1GPPS          equ	7827	;# 
  4516     1E94                     T3CKIPPS        equ	7828	;# 
  4517     1E95                     T3GPPS          equ	7829	;# 
  4518     1E96                     T5CKIPPS        equ	7830	;# 
  4519     1E97                     T5GPPS          equ	7831	;# 
  4520     1E9C                     T2INPPS         equ	7836	;# 
  4521     1E9D                     T4INPPS         equ	7837	;# 
  4522     1E9E                     T6INPPS         equ	7838	;# 
  4523     1EA1                     CCP1PPS         equ	7841	;# 
  4524     1EA2                     CCP2PPS         equ	7842	;# 
  4525     1EA3                     CCP3PPS         equ	7843	;# 
  4526     1EA4                     CCP4PPS         equ	7844	;# 
  4527     1EA9                     SMT1WINPPS      equ	7849	;# 
  4528     1EAA                     SMT1SIGPPS      equ	7850	;# 
  4529     1EB1                     CWG1PPS         equ	7857	;# 
  4530     1EB2                     CWG2PPS         equ	7858	;# 
  4531     1EB8                     MDCARLPPS       equ	7864	;# 
  4532     1EB9                     MDCARHPPS       equ	7865	;# 
  4533     1EBA                     MDSRCPPS        equ	7866	;# 
  4534     1EBB                     CLCIN0PPS       equ	7867	;# 
  4535     1EBC                     CLCIN1PPS       equ	7868	;# 
  4536     1EBD                     CLCIN2PPS       equ	7869	;# 
  4537     1EBE                     CLCIN3PPS       equ	7870	;# 
  4538     1EC3                     ADACTPPS        equ	7875	;# 
  4539     1EC5                     SSP1CLKPPS      equ	7877	;# 
  4540     1EC6                     SSP1DATPPS      equ	7878	;# 
  4541     1EC7                     SSP1SSPPS       equ	7879	;# 
  4542     1EC8                     SSP2CLKPPS      equ	7880	;# 
  4543     1EC9                     SSP2DATPPS      equ	7881	;# 
  4544     1ECA                     SSP2SSPPS       equ	7882	;# 
  4545     1ECB                     RX1PPS          equ	7883	;# 
  4546     1ECC                     CK1PPS          equ	7884	;# 
  4547     1F10                     RA0PPS          equ	7952	;# 
  4548     1F11                     RA1PPS          equ	7953	;# 
  4549     1F12                     RA2PPS          equ	7954	;# 
  4550     1F14                     RA4PPS          equ	7956	;# 
  4551     1F15                     RA5PPS          equ	7957	;# 
  4552     1F20                     RC0PPS          equ	7968	;# 
  4553     1F21                     RC1PPS          equ	7969	;# 
  4554     1F22                     RC2PPS          equ	7970	;# 
  4555     1F23                     RC3PPS          equ	7971	;# 
  4556     1F24                     RC4PPS          equ	7972	;# 
  4557     1F25                     RC5PPS          equ	7973	;# 
  4558     1F38                     ANSELA          equ	7992	;# 
  4559     1F39                     WPUA            equ	7993	;# 
  4560     1F3A                     ODCONA          equ	7994	;# 
  4561     1F3B                     SLRCONA         equ	7995	;# 
  4562     1F3C                     INLVLA          equ	7996	;# 
  4563     1F3D                     IOCAP           equ	7997	;# 
  4564     1F3E                     IOCAN           equ	7998	;# 
  4565     1F3F                     IOCAF           equ	7999	;# 
  4566     1F4E                     ANSELC          equ	8014	;# 
  4567     1F4F                     WPUC            equ	8015	;# 
  4568     1F50                     ODCONC          equ	8016	;# 
  4569     1F51                     SLRCONC         equ	8017	;# 
  4570     1F52                     INLVLC          equ	8018	;# 
  4571     1F53                     IOCCP           equ	8019	;# 
  4572     1F54                     IOCCN           equ	8020	;# 
  4573     1F55                     IOCCF           equ	8021	;# 
  4574     1FE4                     STATUS_SHAD     equ	8164	;# 
  4575     1FE5                     WREG_SHAD       equ	8165	;# 
  4576     1FE6                     BSR_SHAD        equ	8166	;# 
  4577     1FE7                     PCLATH_SHAD     equ	8167	;# 
  4578     1FE8                     FSR0_SHAD       equ	8168	;# 
  4579     1FE8                     FSR0L_SHAD      equ	8168	;# 
  4580     1FE9                     FSR0H_SHAD      equ	8169	;# 
  4581     1FEA                     FSR1L_SHAD      equ	8170	;# 
  4582     1FEB                     FSR1H_SHAD      equ	8171	;# 
  4583     1FED                     STKPTR          equ	8173	;# 
  4584     1FEE                     TOSL            equ	8174	;# 
  4585     1FEF                     TOSH            equ	8175	;# 
  4586     0000                     INDF0           equ	0	;# 
  4587     0001                     INDF1           equ	1	;# 
  4588     0002                     PCL             equ	2	;# 
  4589     0003                     STATUS          equ	3	;# 
  4590     0004                     FSR0L           equ	4	;# 
  4591     0005                     FSR0H           equ	5	;# 
  4592     0006                     FSR1L           equ	6	;# 
  4593     0007                     FSR1H           equ	7	;# 
  4594     0008                     BSR             equ	8	;# 
  4595     0009                     WREG            equ	9	;# 
  4596     000A                     PCLATH          equ	10	;# 
  4597     000B                     INTCON          equ	11	;# 
  4598     000C                     PORTA           equ	12	;# 
  4599     000E                     PORTC           equ	14	;# 
  4600     0012                     TRISA           equ	18	;# 
  4601     0014                     TRISC           equ	20	;# 
  4602     0018                     LATA            equ	24	;# 
  4603     001A                     LATC            equ	26	;# 
  4604     008C                     ADLTH           equ	140	;# 
  4605     008C                     ADLTHL          equ	140	;# 
  4606     008D                     ADLTHH          equ	141	;# 
  4607     008E                     ADUTH           equ	142	;# 
  4608     008E                     ADUTHL          equ	142	;# 
  4609     008F                     ADUTHH          equ	143	;# 
  4610     0090                     ADERR           equ	144	;# 
  4611     0090                     ADERRL          equ	144	;# 
  4612     0091                     ADERRH          equ	145	;# 
  4613     0092                     ADSTPT          equ	146	;# 
  4614     0092                     ADSTPTL         equ	146	;# 
  4615     0093                     ADSTPTH         equ	147	;# 
  4616     0094                     ADFLTR          equ	148	;# 
  4617     0094                     ADFLTRL         equ	148	;# 
  4618     0095                     ADFLTRH         equ	149	;# 
  4619     0096                     ADACC           equ	150	;# 
  4620     0096                     ADACCL          equ	150	;# 
  4621     0097                     ADACCH          equ	151	;# 
  4622     0098                     ADACCU          equ	152	;# 
  4623     0099                     ADCNT           equ	153	;# 
  4624     009A                     ADRPT           equ	154	;# 
  4625     009B                     ADPREV          equ	155	;# 
  4626     009B                     ADPREVL         equ	155	;# 
  4627     009C                     ADPREVH         equ	156	;# 
  4628     009D                     ADRES           equ	157	;# 
  4629     009D                     ADRESL          equ	157	;# 
  4630     009E                     ADRESH          equ	158	;# 
  4631     009F                     ADPCH           equ	159	;# 
  4632     010C                     ADACQ           equ	268	;# 
  4633     010C                     ADACQL          equ	268	;# 
  4634     010D                     ADACQH          equ	269	;# 
  4635     010E                     ADCAP           equ	270	;# 
  4636     010F                     ADPRE           equ	271	;# 
  4637     010F                     ADPREL          equ	271	;# 
  4638     0110                     ADPREH          equ	272	;# 
  4639     0111                     ADCON0          equ	273	;# 
  4640     0112                     ADCON1          equ	274	;# 
  4641     0113                     ADCON2          equ	275	;# 
  4642     0114                     ADCON3          equ	276	;# 
  4643     0115                     ADSTAT          equ	277	;# 
  4644     0116                     ADREF           equ	278	;# 
  4645     0117                     ADACT           equ	279	;# 
  4646     0118                     ADCLK           equ	280	;# 
  4647     0119                     RC1REG          equ	281	;# 
  4648     0119                     RCREG           equ	281	;# 
  4649     0119                     RCREG1          equ	281	;# 
  4650     011A                     TX1REG          equ	282	;# 
  4651     011A                     TXREG1          equ	282	;# 
  4652     011A                     TXREG           equ	282	;# 
  4653     011B                     SP1BRG          equ	283	;# 
  4654     011B                     SPBRG           equ	283	;# 
  4655     011B                     SP1BRGL         equ	283	;# 
  4656     011B                     SPBRG1          equ	283	;# 
  4657     011B                     SPBRGL          equ	283	;# 
  4658     011C                     SP1BRGH         equ	284	;# 
  4659     011C                     SPBRGH          equ	284	;# 
  4660     011C                     SPBRGH1         equ	284	;# 
  4661     011D                     RC1STA          equ	285	;# 
  4662     011D                     RCSTA1          equ	285	;# 
  4663     011D                     RCSTA           equ	285	;# 
  4664     011E                     TX1STA          equ	286	;# 
  4665     011E                     TXSTA1          equ	286	;# 
  4666     011E                     TXSTA           equ	286	;# 
  4667     011F                     BAUD1CON        equ	287	;# 
  4668     011F                     BAUDCON1        equ	287	;# 
  4669     011F                     BAUDCTL1        equ	287	;# 
  4670     011F                     BAUDCON         equ	287	;# 
  4671     011F                     BAUDCTL         equ	287	;# 
  4672     018C                     SSP1BUF         equ	396	;# 
  4673     018D                     SSP1ADD         equ	397	;# 
  4674     018E                     SSP1MSK         equ	398	;# 
  4675     018F                     SSP1STAT        equ	399	;# 
  4676     0190                     SSP1CON1        equ	400	;# 
  4677     0191                     SSP1CON2        equ	401	;# 
  4678     0192                     SSP1CON3        equ	402	;# 
  4679     0196                     SSP2BUF         equ	406	;# 
  4680     0197                     SSP2ADD         equ	407	;# 
  4681     0198                     SSP2MSK         equ	408	;# 
  4682     0199                     SSP2STAT        equ	409	;# 
  4683     019A                     SSP2CON1        equ	410	;# 
  4684     019B                     SSP2CON2        equ	411	;# 
  4685     019C                     SSP2CON3        equ	412	;# 
  4686     020C                     TMR1            equ	524	;# 
  4687     020C                     TMR1L           equ	524	;# 
  4688     020D                     TMR1H           equ	525	;# 
  4689     020E                     T1CON           equ	526	;# 
  4690     020E                     TMR1CON         equ	526	;# 
  4691     020F                     T1GCON          equ	527	;# 
  4692     020F                     TMR1GCON        equ	527	;# 
  4693     0210                     T1GATE          equ	528	;# 
  4694     0210                     TMR1GATE        equ	528	;# 
  4695     0211                     T1CLK           equ	529	;# 
  4696     0211                     TMR1CLK         equ	529	;# 
  4697     0211                     PR1             equ	529	;# 
  4698     0212                     TMR3            equ	530	;# 
  4699     0212                     TMR3L           equ	530	;# 
  4700     0213                     TMR3H           equ	531	;# 
  4701     0214                     T3CON           equ	532	;# 
  4702     0214                     TMR3CON         equ	532	;# 
  4703     0215                     T3GCON          equ	533	;# 
  4704     0215                     TMR3GCON        equ	533	;# 
  4705     0216                     T3GATE          equ	534	;# 
  4706     0216                     TMR3GATE        equ	534	;# 
  4707     0217                     T3CLK           equ	535	;# 
  4708     0217                     TMR3CLK         equ	535	;# 
  4709     0217                     PR3             equ	535	;# 
  4710     0218                     TMR5            equ	536	;# 
  4711     0218                     TMR5L           equ	536	;# 
  4712     0219                     TMR5H           equ	537	;# 
  4713     021A                     T5CON           equ	538	;# 
  4714     021A                     TMR5CON         equ	538	;# 
  4715     021B                     T5GCON          equ	539	;# 
  4716     021B                     TMR5GCON        equ	539	;# 
  4717     021C                     T5GATE          equ	540	;# 
  4718     021C                     TMR5GATE        equ	540	;# 
  4719     021D                     T5CLK           equ	541	;# 
  4720     021D                     TMR5CLK         equ	541	;# 
  4721     021D                     PR5             equ	541	;# 
  4722     021E                     CCPTMRS0        equ	542	;# 
  4723     021F                     CCPTMRS1        equ	543	;# 
  4724     028C                     T2TMR           equ	652	;# 
  4725     028C                     TMR2            equ	652	;# 
  4726     028D                     T2PR            equ	653	;# 
  4727     028D                     PR2             equ	653	;# 
  4728     028E                     T2CON           equ	654	;# 
  4729     028F                     T2HLT           equ	655	;# 
  4730     0290                     T2CLKCON        equ	656	;# 
  4731     0291                     T2RST           equ	657	;# 
  4732     0292                     T4TMR           equ	658	;# 
  4733     0292                     TMR4            equ	658	;# 
  4734     0293                     T4PR            equ	659	;# 
  4735     0293                     PR4             equ	659	;# 
  4736     0294                     T4CON           equ	660	;# 
  4737     0295                     T4HLT           equ	661	;# 
  4738     0296                     T4CLKCON        equ	662	;# 
  4739     0297                     T4RST           equ	663	;# 
  4740     0298                     T6TMR           equ	664	;# 
  4741     0298                     TMR6            equ	664	;# 
  4742     0299                     T6PR            equ	665	;# 
  4743     0299                     PR6             equ	665	;# 
  4744     029A                     T6CON           equ	666	;# 
  4745     029B                     T6HLT           equ	667	;# 
  4746     029C                     T6CLKCON        equ	668	;# 
  4747     029D                     T6RST           equ	669	;# 
  4748     029F                     ADCPCON0        equ	671	;# 
  4749     030C                     CCPR1           equ	780	;# 
  4750     030C                     CCPR1L          equ	780	;# 
  4751     030D                     CCPR1H          equ	781	;# 
  4752     030E                     CCP1CON         equ	782	;# 
  4753     030F                     CCP1CAP         equ	783	;# 
  4754     0310                     CCPR2           equ	784	;# 
  4755     0310                     CCPR2L          equ	784	;# 
  4756     0311                     CCPR2H          equ	785	;# 
  4757     0312                     CCP2CON         equ	786	;# 
  4758     0313                     CCP2CAP         equ	787	;# 
  4759     0314                     CCPR3           equ	788	;# 
  4760     0314                     CCPR3L          equ	788	;# 
  4761     0315                     CCPR3H          equ	789	;# 
  4762     0316                     CCP3CON         equ	790	;# 
  4763     0317                     CCP3CAP         equ	791	;# 
  4764     0318                     CCPR4           equ	792	;# 
  4765     0318                     CCPR4L          equ	792	;# 
  4766     0319                     CCPR4H          equ	793	;# 
  4767     031A                     CCP4CON         equ	794	;# 
  4768     031B                     CCP4CAP         equ	795	;# 
  4769     038C                     PWM6DC          equ	908	;# 
  4770     038C                     PWM6DCL         equ	908	;# 
  4771     038D                     PWM6DCH         equ	909	;# 
  4772     038E                     PWM6CON         equ	910	;# 
  4773     0390                     PWM7DC          equ	912	;# 
  4774     0390                     PWM7DCL         equ	912	;# 
  4775     0391                     PWM7DCH         equ	913	;# 
  4776     0392                     PWM7CON         equ	914	;# 
  4777     048C                     SMT1TMR         equ	1164	;# 
  4778     048C                     SMT1TMRL        equ	1164	;# 
  4779     048D                     SMT1TMRH        equ	1165	;# 
  4780     048E                     SMT1TMRU        equ	1166	;# 
  4781     048F                     SMT1CPR         equ	1167	;# 
  4782     048F                     SMT1CPRL        equ	1167	;# 
  4783     0490                     SMT1CPRH        equ	1168	;# 
  4784     0491                     SMT1CPRU        equ	1169	;# 
  4785     0492                     SMT1CPW         equ	1170	;# 
  4786     0492                     SMT1CPWL        equ	1170	;# 
  4787     0493                     SMT1CPWH        equ	1171	;# 
  4788     0494                     SMT1CPWU        equ	1172	;# 
  4789     0495                     SMT1PR          equ	1173	;# 
  4790     0495                     SMT1PRL         equ	1173	;# 
  4791     0496                     SMT1PRH         equ	1174	;# 
  4792     0497                     SMT1PRU         equ	1175	;# 
  4793     0498                     SMT1CON0        equ	1176	;# 
  4794     0499                     SMT1CON1        equ	1177	;# 
  4795     049A                     SMT1STAT        equ	1178	;# 
  4796     049B                     SMT1CLK         equ	1179	;# 
  4797     049C                     SMT1SIG         equ	1180	;# 
  4798     049D                     SMT1WIN         equ	1181	;# 
  4799     058C                     NCO1ACC         equ	1420	;# 
  4800     058C                     NCO1ACCL        equ	1420	;# 
  4801     058D                     NCO1ACCH        equ	1421	;# 
  4802     058E                     NCO1ACCU        equ	1422	;# 
  4803     058F                     NCO1INC         equ	1423	;# 
  4804     058F                     NCO1INCL        equ	1423	;# 
  4805     0590                     NCO1INCH        equ	1424	;# 
  4806     0591                     NCO1INCU        equ	1425	;# 
  4807     0592                     NCO1CON         equ	1426	;# 
  4808     0593                     NCO1CLK         equ	1427	;# 
  4809     059C                     TMR0L           equ	1436	;# 
  4810     059C                     TMR0            equ	1436	;# 
  4811     059D                     TMR0H           equ	1437	;# 
  4812     059D                     PR0             equ	1437	;# 
  4813     059E                     T0CON0          equ	1438	;# 
  4814     059F                     T0CON1          equ	1439	;# 
  4815     060C                     CWG1CLK         equ	1548	;# 
  4816     060C                     CWG1CLKCON      equ	1548	;# 
  4817     060D                     CWG1ISM         equ	1549	;# 
  4818     060D                     CWG1DAT         equ	1549	;# 
  4819     060E                     CWG1DBR         equ	1550	;# 
  4820     060F                     CWG1DBF         equ	1551	;# 
  4821     0610                     CWG1CON0        equ	1552	;# 
  4822     0611                     CWG1CON1        equ	1553	;# 
  4823     0612                     CWG1AS0         equ	1554	;# 
  4824     0613                     CWG1AS1         equ	1555	;# 
  4825     0614                     CWG1STR         equ	1556	;# 
  4826     0616                     CWG2CLK         equ	1558	;# 
  4827     0616                     CWG2CLKCON      equ	1558	;# 
  4828     0617                     CWG2ISM         equ	1559	;# 
  4829     0617                     CWG2DAT         equ	1559	;# 
  4830     0618                     CWG2DBR         equ	1560	;# 
  4831     0619                     CWG2DBF         equ	1561	;# 
  4832     061A                     CWG2CON0        equ	1562	;# 
  4833     061B                     CWG2CON1        equ	1563	;# 
  4834     061C                     CWG2AS0         equ	1564	;# 
  4835     061D                     CWG2AS1         equ	1565	;# 
  4836     061E                     CWG2STR         equ	1566	;# 
  4837     070C                     PIR0            equ	1804	;# 
  4838     070D                     PIR1            equ	1805	;# 
  4839     070E                     PIR2            equ	1806	;# 
  4840     070F                     PIR3            equ	1807	;# 
  4841     0710                     PIR4            equ	1808	;# 
  4842     0711                     PIR5            equ	1809	;# 
  4843     0712                     PIR6            equ	1810	;# 
  4844     0713                     PIR7            equ	1811	;# 
  4845     0714                     PIR8            equ	1812	;# 
  4846     0716                     PIE0            equ	1814	;# 
  4847     0717                     PIE1            equ	1815	;# 
  4848     0718                     PIE2            equ	1816	;# 
  4849     0719                     PIE3            equ	1817	;# 
  4850     071A                     PIE4            equ	1818	;# 
  4851     071B                     PIE5            equ	1819	;# 
  4852     071C                     PIE6            equ	1820	;# 
  4853     071D                     PIE7            equ	1821	;# 
  4854     071E                     PIE8            equ	1822	;# 
  4855     0796                     PMD0            equ	1942	;# 
  4856     0797                     PMD1            equ	1943	;# 
  4857     0798                     PMD2            equ	1944	;# 
  4858     0799                     PMD3            equ	1945	;# 
  4859     079A                     PMD4            equ	1946	;# 
  4860     079B                     PMD5            equ	1947	;# 
  4861     079C                     PMD6            equ	1948	;# 
  4862     079D                     PMD7            equ	1949	;# 
  4863     080C                     WDTCON0         equ	2060	;# 
  4864     080D                     WDTCON1         equ	2061	;# 
  4865     080E                     WDTPSL          equ	2062	;# 
  4866     080F                     WDTPSH          equ	2063	;# 
  4867     0810                     WDTTMR          equ	2064	;# 
  4868     0811                     BORCON          equ	2065	;# 
  4869     0812                     VREGCON         equ	2066	;# 
  4870     0813                     PCON0           equ	2067	;# 
  4871     0814                     PCON1           equ	2068	;# 
  4872     081A                     NVMADR          equ	2074	;# 
  4873     081A                     NVMADRL         equ	2074	;# 
  4874     081B                     NVMADRH         equ	2075	;# 
  4875     081C                     NVMDAT          equ	2076	;# 
  4876     081C                     NVMDATL         equ	2076	;# 
  4877     081D                     NVMDATH         equ	2077	;# 
  4878     081E                     NVMCON1         equ	2078	;# 
  4879     081F                     NVMCON2         equ	2079	;# 
  4880     088C                     CPUDOZE         equ	2188	;# 
  4881     088D                     OSCCON1         equ	2189	;# 
  4882     088E                     OSCCON2         equ	2190	;# 
  4883     088F                     OSCCON3         equ	2191	;# 
  4884     0890                     OSCSTAT         equ	2192	;# 
  4885     0891                     OSCEN           equ	2193	;# 
  4886     0892                     OSCTUNE         equ	2194	;# 
  4887     0893                     OSCFRQ          equ	2195	;# 
  4888     0895                     CLKRCON         equ	2197	;# 
  4889     0896                     CLKRCLK         equ	2198	;# 
  4890     0897                     MD1CON0         equ	2199	;# 
  4891     0898                     MD1CON1         equ	2200	;# 
  4892     0899                     MD1SRC          equ	2201	;# 
  4893     089A                     MD1CARL         equ	2202	;# 
  4894     089B                     MD1CARH         equ	2203	;# 
  4895     090C                     FVRCON          equ	2316	;# 
  4896     090E                     DAC1CON0        equ	2318	;# 
  4897     090F                     DAC1CON1        equ	2319	;# 
  4898     091F                     ZCDCON          equ	2335	;# 
  4899     098F                     CMOUT           equ	2447	;# 
  4900     098F                     CMSTAT          equ	2447	;# 
  4901     0990                     CM1CON0         equ	2448	;# 
  4902     0991                     CM1CON1         equ	2449	;# 
  4903     0992                     CM1NCH          equ	2450	;# 
  4904     0993                     CM1PCH          equ	2451	;# 
  4905     0994                     CM2CON0         equ	2452	;# 
  4906     0995                     CM2CON1         equ	2453	;# 
  4907     0996                     CM2NCH          equ	2454	;# 
  4908     0997                     CM2PCH          equ	2455	;# 
  4909     1E0F                     CLCDATA         equ	7695	;# 
  4910     1E10                     CLC1CON         equ	7696	;# 
  4911     1E11                     CLC1POL         equ	7697	;# 
  4912     1E12                     CLC1SEL0        equ	7698	;# 
  4913     1E13                     CLC1SEL1        equ	7699	;# 
  4914     1E14                     CLC1SEL2        equ	7700	;# 
  4915     1E15                     CLC1SEL3        equ	7701	;# 
  4916     1E16                     CLC1GLS0        equ	7702	;# 
  4917     1E17                     CLC1GLS1        equ	7703	;# 
  4918     1E18                     CLC1GLS2        equ	7704	;# 
  4919     1E19                     CLC1GLS3        equ	7705	;# 
  4920     1E1A                     CLC2CON         equ	7706	;# 
  4921     1E1B                     CLC2POL         equ	7707	;# 
  4922     1E1C                     CLC2SEL0        equ	7708	;# 
  4923     1E1D                     CLC2SEL1        equ	7709	;# 
  4924     1E1E                     CLC2SEL2        equ	7710	;# 
  4925     1E1F                     CLC2SEL3        equ	7711	;# 
  4926     1E20                     CLC2GLS0        equ	7712	;# 
  4927     1E21                     CLC2GLS1        equ	7713	;# 
  4928     1E22                     CLC2GLS2        equ	7714	;# 
  4929     1E23                     CLC2GLS3        equ	7715	;# 
  4930     1E24                     CLC3CON         equ	7716	;# 
  4931     1E25                     CLC3POL         equ	7717	;# 
  4932     1E26                     CLC3SEL0        equ	7718	;# 
  4933     1E27                     CLC3SEL1        equ	7719	;# 
  4934     1E28                     CLC3SEL2        equ	7720	;# 
  4935     1E29                     CLC3SEL3        equ	7721	;# 
  4936     1E2A                     CLC3GLS0        equ	7722	;# 
  4937     1E2B                     CLC3GLS1        equ	7723	;# 
  4938     1E2C                     CLC3GLS2        equ	7724	;# 
  4939     1E2D                     CLC3GLS3        equ	7725	;# 
  4940     1E2E                     CLC4CON         equ	7726	;# 
  4941     1E2F                     CLC4POL         equ	7727	;# 
  4942     1E30                     CLC4SEL0        equ	7728	;# 
  4943     1E31                     CLC4SEL1        equ	7729	;# 
  4944     1E32                     CLC4SEL2        equ	7730	;# 
  4945     1E33                     CLC4SEL3        equ	7731	;# 
  4946     1E34                     CLC4GLS0        equ	7732	;# 
  4947     1E35                     CLC4GLS1        equ	7733	;# 
  4948     1E36                     CLC4GLS2        equ	7734	;# 
  4949     1E37                     CLC4GLS3        equ	7735	;# 
  4950     1E8F                     PPSLOCK         equ	7823	;# 
  4951     1E90                     INTPPS          equ	7824	;# 
  4952     1E91                     T0CKIPPS        equ	7825	;# 
  4953     1E92                     T1CKIPPS        equ	7826	;# 
  4954     1E93                     T1GPPS          equ	7827	;# 
  4955     1E94                     T3CKIPPS        equ	7828	;# 
  4956     1E95                     T3GPPS          equ	7829	;# 
  4957     1E96                     T5CKIPPS        equ	7830	;# 
  4958     1E97                     T5GPPS          equ	7831	;# 
  4959     1E9C                     T2INPPS         equ	7836	;# 
  4960     1E9D                     T4INPPS         equ	7837	;# 
  4961     1E9E                     T6INPPS         equ	7838	;# 
  4962     1EA1                     CCP1PPS         equ	7841	;# 
  4963     1EA2                     CCP2PPS         equ	7842	;# 
  4964     1EA3                     CCP3PPS         equ	7843	;# 
  4965     1EA4                     CCP4PPS         equ	7844	;# 
  4966     1EA9                     SMT1WINPPS      equ	7849	;# 
  4967     1EAA                     SMT1SIGPPS      equ	7850	;# 
  4968     1EB1                     CWG1PPS         equ	7857	;# 
  4969     1EB2                     CWG2PPS         equ	7858	;# 
  4970     1EB8                     MDCARLPPS       equ	7864	;# 
  4971     1EB9                     MDCARHPPS       equ	7865	;# 
  4972     1EBA                     MDSRCPPS        equ	7866	;# 
  4973     1EBB                     CLCIN0PPS       equ	7867	;# 
  4974     1EBC                     CLCIN1PPS       equ	7868	;# 
  4975     1EBD                     CLCIN2PPS       equ	7869	;# 
  4976     1EBE                     CLCIN3PPS       equ	7870	;# 
  4977     1EC3                     ADACTPPS        equ	7875	;# 
  4978     1EC5                     SSP1CLKPPS      equ	7877	;# 
  4979     1EC6                     SSP1DATPPS      equ	7878	;# 
  4980     1EC7                     SSP1SSPPS       equ	7879	;# 
  4981     1EC8                     SSP2CLKPPS      equ	7880	;# 
  4982     1EC9                     SSP2DATPPS      equ	7881	;# 
  4983     1ECA                     SSP2SSPPS       equ	7882	;# 
  4984     1ECB                     RX1PPS          equ	7883	;# 
  4985     1ECC                     CK1PPS          equ	7884	;# 
  4986     1F10                     RA0PPS          equ	7952	;# 
  4987     1F11                     RA1PPS          equ	7953	;# 
  4988     1F12                     RA2PPS          equ	7954	;# 
  4989     1F14                     RA4PPS          equ	7956	;# 
  4990     1F15                     RA5PPS          equ	7957	;# 
  4991     1F20                     RC0PPS          equ	7968	;# 
  4992     1F21                     RC1PPS          equ	7969	;# 
  4993     1F22                     RC2PPS          equ	7970	;# 
  4994     1F23                     RC3PPS          equ	7971	;# 
  4995     1F24                     RC4PPS          equ	7972	;# 
  4996     1F25                     RC5PPS          equ	7973	;# 
  4997     1F38                     ANSELA          equ	7992	;# 
  4998     1F39                     WPUA            equ	7993	;# 
  4999     1F3A                     ODCONA          equ	7994	;# 
  5000     1F3B                     SLRCONA         equ	7995	;# 
  5001     1F3C                     INLVLA          equ	7996	;# 
  5002     1F3D                     IOCAP           equ	7997	;# 
  5003     1F3E                     IOCAN           equ	7998	;# 
  5004     1F3F                     IOCAF           equ	7999	;# 
  5005     1F4E                     ANSELC          equ	8014	;# 
  5006     1F4F                     WPUC            equ	8015	;# 
  5007     1F50                     ODCONC          equ	8016	;# 
  5008     1F51                     SLRCONC         equ	8017	;# 
  5009     1F52                     INLVLC          equ	8018	;# 
  5010     1F53                     IOCCP           equ	8019	;# 
  5011     1F54                     IOCCN           equ	8020	;# 
  5012     1F55                     IOCCF           equ	8021	;# 
  5013     1FE4                     STATUS_SHAD     equ	8164	;# 
  5014     1FE5                     WREG_SHAD       equ	8165	;# 
  5015     1FE6                     BSR_SHAD        equ	8166	;# 
  5016     1FE7                     PCLATH_SHAD     equ	8167	;# 
  5017     1FE8                     FSR0_SHAD       equ	8168	;# 
  5018     1FE8                     FSR0L_SHAD      equ	8168	;# 
  5019     1FE9                     FSR0H_SHAD      equ	8169	;# 
  5020     1FEA                     FSR1L_SHAD      equ	8170	;# 
  5021     1FEB                     FSR1H_SHAD      equ	8171	;# 
  5022     1FED                     STKPTR          equ	8173	;# 
  5023     1FEE                     TOSL            equ	8174	;# 
  5024     1FEF                     TOSH            equ	8175	;# 
  5025     0000                     INDF0           equ	0	;# 
  5026     0001                     INDF1           equ	1	;# 
  5027     0002                     PCL             equ	2	;# 
  5028     0003                     STATUS          equ	3	;# 
  5029     0004                     FSR0L           equ	4	;# 
  5030     0005                     FSR0H           equ	5	;# 
  5031     0006                     FSR1L           equ	6	;# 
  5032     0007                     FSR1H           equ	7	;# 
  5033     0008                     BSR             equ	8	;# 
  5034     0009                     WREG            equ	9	;# 
  5035     000A                     PCLATH          equ	10	;# 
  5036     000B                     INTCON          equ	11	;# 
  5037     000C                     PORTA           equ	12	;# 
  5038     000E                     PORTC           equ	14	;# 
  5039     0012                     TRISA           equ	18	;# 
  5040     0014                     TRISC           equ	20	;# 
  5041     0018                     LATA            equ	24	;# 
  5042     001A                     LATC            equ	26	;# 
  5043     008C                     ADLTH           equ	140	;# 
  5044     008C                     ADLTHL          equ	140	;# 
  5045     008D                     ADLTHH          equ	141	;# 
  5046     008E                     ADUTH           equ	142	;# 
  5047     008E                     ADUTHL          equ	142	;# 
  5048     008F                     ADUTHH          equ	143	;# 
  5049     0090                     ADERR           equ	144	;# 
  5050     0090                     ADERRL          equ	144	;# 
  5051     0091                     ADERRH          equ	145	;# 
  5052     0092                     ADSTPT          equ	146	;# 
  5053     0092                     ADSTPTL         equ	146	;# 
  5054     0093                     ADSTPTH         equ	147	;# 
  5055     0094                     ADFLTR          equ	148	;# 
  5056     0094                     ADFLTRL         equ	148	;# 
  5057     0095                     ADFLTRH         equ	149	;# 
  5058     0096                     ADACC           equ	150	;# 
  5059     0096                     ADACCL          equ	150	;# 
  5060     0097                     ADACCH          equ	151	;# 
  5061     0098                     ADACCU          equ	152	;# 
  5062     0099                     ADCNT           equ	153	;# 
  5063     009A                     ADRPT           equ	154	;# 
  5064     009B                     ADPREV          equ	155	;# 
  5065     009B                     ADPREVL         equ	155	;# 
  5066     009C                     ADPREVH         equ	156	;# 
  5067     009D                     ADRES           equ	157	;# 
  5068     009D                     ADRESL          equ	157	;# 
  5069     009E                     ADRESH          equ	158	;# 
  5070     009F                     ADPCH           equ	159	;# 
  5071     010C                     ADACQ           equ	268	;# 
  5072     010C                     ADACQL          equ	268	;# 
  5073     010D                     ADACQH          equ	269	;# 
  5074     010E                     ADCAP           equ	270	;# 
  5075     010F                     ADPRE           equ	271	;# 
  5076     010F                     ADPREL          equ	271	;# 
  5077     0110                     ADPREH          equ	272	;# 
  5078     0111                     ADCON0          equ	273	;# 
  5079     0112                     ADCON1          equ	274	;# 
  5080     0113                     ADCON2          equ	275	;# 
  5081     0114                     ADCON3          equ	276	;# 
  5082     0115                     ADSTAT          equ	277	;# 
  5083     0116                     ADREF           equ	278	;# 
  5084     0117                     ADACT           equ	279	;# 
  5085     0118                     ADCLK           equ	280	;# 
  5086     0119                     RC1REG          equ	281	;# 
  5087     0119                     RCREG           equ	281	;# 
  5088     0119                     RCREG1          equ	281	;# 
  5089     011A                     TX1REG          equ	282	;# 
  5090     011A                     TXREG1          equ	282	;# 
  5091     011A                     TXREG           equ	282	;# 
  5092     011B                     SP1BRG          equ	283	;# 
  5093     011B                     SPBRG           equ	283	;# 
  5094     011B                     SP1BRGL         equ	283	;# 
  5095     011B                     SPBRG1          equ	283	;# 
  5096     011B                     SPBRGL          equ	283	;# 
  5097     011C                     SP1BRGH         equ	284	;# 
  5098     011C                     SPBRGH          equ	284	;# 
  5099     011C                     SPBRGH1         equ	284	;# 
  5100     011D                     RC1STA          equ	285	;# 
  5101     011D                     RCSTA1          equ	285	;# 
  5102     011D                     RCSTA           equ	285	;# 
  5103     011E                     TX1STA          equ	286	;# 
  5104     011E                     TXSTA1          equ	286	;# 
  5105     011E                     TXSTA           equ	286	;# 
  5106     011F                     BAUD1CON        equ	287	;# 
  5107     011F                     BAUDCON1        equ	287	;# 
  5108     011F                     BAUDCTL1        equ	287	;# 
  5109     011F                     BAUDCON         equ	287	;# 
  5110     011F                     BAUDCTL         equ	287	;# 
  5111     018C                     SSP1BUF         equ	396	;# 
  5112     018D                     SSP1ADD         equ	397	;# 
  5113     018E                     SSP1MSK         equ	398	;# 
  5114     018F                     SSP1STAT        equ	399	;# 
  5115     0190                     SSP1CON1        equ	400	;# 
  5116     0191                     SSP1CON2        equ	401	;# 
  5117     0192                     SSP1CON3        equ	402	;# 
  5118     0196                     SSP2BUF         equ	406	;# 
  5119     0197                     SSP2ADD         equ	407	;# 
  5120     0198                     SSP2MSK         equ	408	;# 
  5121     0199                     SSP2STAT        equ	409	;# 
  5122     019A                     SSP2CON1        equ	410	;# 
  5123     019B                     SSP2CON2        equ	411	;# 
  5124     019C                     SSP2CON3        equ	412	;# 
  5125     020C                     TMR1            equ	524	;# 
  5126     020C                     TMR1L           equ	524	;# 
  5127     020D                     TMR1H           equ	525	;# 
  5128     020E                     T1CON           equ	526	;# 
  5129     020E                     TMR1CON         equ	526	;# 
  5130     020F                     T1GCON          equ	527	;# 
  5131     020F                     TMR1GCON        equ	527	;# 
  5132     0210                     T1GATE          equ	528	;# 
  5133     0210                     TMR1GATE        equ	528	;# 
  5134     0211                     T1CLK           equ	529	;# 
  5135     0211                     TMR1CLK         equ	529	;# 
  5136     0211                     PR1             equ	529	;# 
  5137     0212                     TMR3            equ	530	;# 
  5138     0212                     TMR3L           equ	530	;# 
  5139     0213                     TMR3H           equ	531	;# 
  5140     0214                     T3CON           equ	532	;# 
  5141     0214                     TMR3CON         equ	532	;# 
  5142     0215                     T3GCON          equ	533	;# 
  5143     0215                     TMR3GCON        equ	533	;# 
  5144     0216                     T3GATE          equ	534	;# 
  5145     0216                     TMR3GATE        equ	534	;# 
  5146     0217                     T3CLK           equ	535	;# 
  5147     0217                     TMR3CLK         equ	535	;# 
  5148     0217                     PR3             equ	535	;# 
  5149     0218                     TMR5            equ	536	;# 
  5150     0218                     TMR5L           equ	536	;# 
  5151     0219                     TMR5H           equ	537	;# 
  5152     021A                     T5CON           equ	538	;# 
  5153     021A                     TMR5CON         equ	538	;# 
  5154     021B                     T5GCON          equ	539	;# 
  5155     021B                     TMR5GCON        equ	539	;# 
  5156     021C                     T5GATE          equ	540	;# 
  5157     021C                     TMR5GATE        equ	540	;# 
  5158     021D                     T5CLK           equ	541	;# 
  5159     021D                     TMR5CLK         equ	541	;# 
  5160     021D                     PR5             equ	541	;# 
  5161     021E                     CCPTMRS0        equ	542	;# 
  5162     021F                     CCPTMRS1        equ	543	;# 
  5163     028C                     T2TMR           equ	652	;# 
  5164     028C                     TMR2            equ	652	;# 
  5165     028D                     T2PR            equ	653	;# 
  5166     028D                     PR2             equ	653	;# 
  5167     028E                     T2CON           equ	654	;# 
  5168     028F                     T2HLT           equ	655	;# 
  5169     0290                     T2CLKCON        equ	656	;# 
  5170     0291                     T2RST           equ	657	;# 
  5171     0292                     T4TMR           equ	658	;# 
  5172     0292                     TMR4            equ	658	;# 
  5173     0293                     T4PR            equ	659	;# 
  5174     0293                     PR4             equ	659	;# 
  5175     0294                     T4CON           equ	660	;# 
  5176     0295                     T4HLT           equ	661	;# 
  5177     0296                     T4CLKCON        equ	662	;# 
  5178     0297                     T4RST           equ	663	;# 
  5179     0298                     T6TMR           equ	664	;# 
  5180     0298                     TMR6            equ	664	;# 
  5181     0299                     T6PR            equ	665	;# 
  5182     0299                     PR6             equ	665	;# 
  5183     029A                     T6CON           equ	666	;# 
  5184     029B                     T6HLT           equ	667	;# 
  5185     029C                     T6CLKCON        equ	668	;# 
  5186     029D                     T6RST           equ	669	;# 
  5187     029F                     ADCPCON0        equ	671	;# 
  5188     030C                     CCPR1           equ	780	;# 
  5189     030C                     CCPR1L          equ	780	;# 
  5190     030D                     CCPR1H          equ	781	;# 
  5191     030E                     CCP1CON         equ	782	;# 
  5192     030F                     CCP1CAP         equ	783	;# 
  5193     0310                     CCPR2           equ	784	;# 
  5194     0310                     CCPR2L          equ	784	;# 
  5195     0311                     CCPR2H          equ	785	;# 
  5196     0312                     CCP2CON         equ	786	;# 
  5197     0313                     CCP2CAP         equ	787	;# 
  5198     0314                     CCPR3           equ	788	;# 
  5199     0314                     CCPR3L          equ	788	;# 
  5200     0315                     CCPR3H          equ	789	;# 
  5201     0316                     CCP3CON         equ	790	;# 
  5202     0317                     CCP3CAP         equ	791	;# 
  5203     0318                     CCPR4           equ	792	;# 
  5204     0318                     CCPR4L          equ	792	;# 
  5205     0319                     CCPR4H          equ	793	;# 
  5206     031A                     CCP4CON         equ	794	;# 
  5207     031B                     CCP4CAP         equ	795	;# 
  5208     038C                     PWM6DC          equ	908	;# 
  5209     038C                     PWM6DCL         equ	908	;# 
  5210     038D                     PWM6DCH         equ	909	;# 
  5211     038E                     PWM6CON         equ	910	;# 
  5212     0390                     PWM7DC          equ	912	;# 
  5213     0390                     PWM7DCL         equ	912	;# 
  5214     0391                     PWM7DCH         equ	913	;# 
  5215     0392                     PWM7CON         equ	914	;# 
  5216     048C                     SMT1TMR         equ	1164	;# 
  5217     048C                     SMT1TMRL        equ	1164	;# 
  5218     048D                     SMT1TMRH        equ	1165	;# 
  5219     048E                     SMT1TMRU        equ	1166	;# 
  5220     048F                     SMT1CPR         equ	1167	;# 
  5221     048F                     SMT1CPRL        equ	1167	;# 
  5222     0490                     SMT1CPRH        equ	1168	;# 
  5223     0491                     SMT1CPRU        equ	1169	;# 
  5224     0492                     SMT1CPW         equ	1170	;# 
  5225     0492                     SMT1CPWL        equ	1170	;# 
  5226     0493                     SMT1CPWH        equ	1171	;# 
  5227     0494                     SMT1CPWU        equ	1172	;# 
  5228     0495                     SMT1PR          equ	1173	;# 
  5229     0495                     SMT1PRL         equ	1173	;# 
  5230     0496                     SMT1PRH         equ	1174	;# 
  5231     0497                     SMT1PRU         equ	1175	;# 
  5232     0498                     SMT1CON0        equ	1176	;# 
  5233     0499                     SMT1CON1        equ	1177	;# 
  5234     049A                     SMT1STAT        equ	1178	;# 
  5235     049B                     SMT1CLK         equ	1179	;# 
  5236     049C                     SMT1SIG         equ	1180	;# 
  5237     049D                     SMT1WIN         equ	1181	;# 
  5238     058C                     NCO1ACC         equ	1420	;# 
  5239     058C                     NCO1ACCL        equ	1420	;# 
  5240     058D                     NCO1ACCH        equ	1421	;# 
  5241     058E                     NCO1ACCU        equ	1422	;# 
  5242     058F                     NCO1INC         equ	1423	;# 
  5243     058F                     NCO1INCL        equ	1423	;# 
  5244     0590                     NCO1INCH        equ	1424	;# 
  5245     0591                     NCO1INCU        equ	1425	;# 
  5246     0592                     NCO1CON         equ	1426	;# 
  5247     0593                     NCO1CLK         equ	1427	;# 
  5248     059C                     TMR0L           equ	1436	;# 
  5249     059C                     TMR0            equ	1436	;# 
  5250     059D                     TMR0H           equ	1437	;# 
  5251     059D                     PR0             equ	1437	;# 
  5252     059E                     T0CON0          equ	1438	;# 
  5253     059F                     T0CON1          equ	1439	;# 
  5254     060C                     CWG1CLK         equ	1548	;# 
  5255     060C                     CWG1CLKCON      equ	1548	;# 
  5256     060D                     CWG1ISM         equ	1549	;# 
  5257     060D                     CWG1DAT         equ	1549	;# 
  5258     060E                     CWG1DBR         equ	1550	;# 
  5259     060F                     CWG1DBF         equ	1551	;# 
  5260     0610                     CWG1CON0        equ	1552	;# 
  5261     0611                     CWG1CON1        equ	1553	;# 
  5262     0612                     CWG1AS0         equ	1554	;# 
  5263     0613                     CWG1AS1         equ	1555	;# 
  5264     0614                     CWG1STR         equ	1556	;# 
  5265     0616                     CWG2CLK         equ	1558	;# 
  5266     0616                     CWG2CLKCON      equ	1558	;# 
  5267     0617                     CWG2ISM         equ	1559	;# 
  5268     0617                     CWG2DAT         equ	1559	;# 
  5269     0618                     CWG2DBR         equ	1560	;# 
  5270     0619                     CWG2DBF         equ	1561	;# 
  5271     061A                     CWG2CON0        equ	1562	;# 
  5272     061B                     CWG2CON1        equ	1563	;# 
  5273     061C                     CWG2AS0         equ	1564	;# 
  5274     061D                     CWG2AS1         equ	1565	;# 
  5275     061E                     CWG2STR         equ	1566	;# 
  5276     070C                     PIR0            equ	1804	;# 
  5277     070D                     PIR1            equ	1805	;# 
  5278     070E                     PIR2            equ	1806	;# 
  5279     070F                     PIR3            equ	1807	;# 
  5280     0710                     PIR4            equ	1808	;# 
  5281     0711                     PIR5            equ	1809	;# 
  5282     0712                     PIR6            equ	1810	;# 
  5283     0713                     PIR7            equ	1811	;# 
  5284     0714                     PIR8            equ	1812	;# 
  5285     0716                     PIE0            equ	1814	;# 
  5286     0717                     PIE1            equ	1815	;# 
  5287     0718                     PIE2            equ	1816	;# 
  5288     0719                     PIE3            equ	1817	;# 
  5289     071A                     PIE4            equ	1818	;# 
  5290     071B                     PIE5            equ	1819	;# 
  5291     071C                     PIE6            equ	1820	;# 
  5292     071D                     PIE7            equ	1821	;# 
  5293     071E                     PIE8            equ	1822	;# 
  5294     0796                     PMD0            equ	1942	;# 
  5295     0797                     PMD1            equ	1943	;# 
  5296     0798                     PMD2            equ	1944	;# 
  5297     0799                     PMD3            equ	1945	;# 
  5298     079A                     PMD4            equ	1946	;# 
  5299     079B                     PMD5            equ	1947	;# 
  5300     079C                     PMD6            equ	1948	;# 
  5301     079D                     PMD7            equ	1949	;# 
  5302     080C                     WDTCON0         equ	2060	;# 
  5303     080D                     WDTCON1         equ	2061	;# 
  5304     080E                     WDTPSL          equ	2062	;# 
  5305     080F                     WDTPSH          equ	2063	;# 
  5306     0810                     WDTTMR          equ	2064	;# 
  5307     0811                     BORCON          equ	2065	;# 
  5308     0812                     VREGCON         equ	2066	;# 
  5309     0813                     PCON0           equ	2067	;# 
  5310     0814                     PCON1           equ	2068	;# 
  5311     081A                     NVMADR          equ	2074	;# 
  5312     081A                     NVMADRL         equ	2074	;# 
  5313     081B                     NVMADRH         equ	2075	;# 
  5314     081C                     NVMDAT          equ	2076	;# 
  5315     081C                     NVMDATL         equ	2076	;# 
  5316     081D                     NVMDATH         equ	2077	;# 
  5317     081E                     NVMCON1         equ	2078	;# 
  5318     081F                     NVMCON2         equ	2079	;# 
  5319     088C                     CPUDOZE         equ	2188	;# 
  5320     088D                     OSCCON1         equ	2189	;# 
  5321     088E                     OSCCON2         equ	2190	;# 
  5322     088F                     OSCCON3         equ	2191	;# 
  5323     0890                     OSCSTAT         equ	2192	;# 
  5324     0891                     OSCEN           equ	2193	;# 
  5325     0892                     OSCTUNE         equ	2194	;# 
  5326     0893                     OSCFRQ          equ	2195	;# 
  5327     0895                     CLKRCON         equ	2197	;# 
  5328     0896                     CLKRCLK         equ	2198	;# 
  5329     0897                     MD1CON0         equ	2199	;# 
  5330     0898                     MD1CON1         equ	2200	;# 
  5331     0899                     MD1SRC          equ	2201	;# 
  5332     089A                     MD1CARL         equ	2202	;# 
  5333     089B                     MD1CARH         equ	2203	;# 
  5334     090C                     FVRCON          equ	2316	;# 
  5335     090E                     DAC1CON0        equ	2318	;# 
  5336     090F                     DAC1CON1        equ	2319	;# 
  5337     091F                     ZCDCON          equ	2335	;# 
  5338     098F                     CMOUT           equ	2447	;# 
  5339     098F                     CMSTAT          equ	2447	;# 
  5340     0990                     CM1CON0         equ	2448	;# 
  5341     0991                     CM1CON1         equ	2449	;# 
  5342     0992                     CM1NCH          equ	2450	;# 
  5343     0993                     CM1PCH          equ	2451	;# 
  5344     0994                     CM2CON0         equ	2452	;# 
  5345     0995                     CM2CON1         equ	2453	;# 
  5346     0996                     CM2NCH          equ	2454	;# 
  5347     0997                     CM2PCH          equ	2455	;# 
  5348     1E0F                     CLCDATA         equ	7695	;# 
  5349     1E10                     CLC1CON         equ	7696	;# 
  5350     1E11                     CLC1POL         equ	7697	;# 
  5351     1E12                     CLC1SEL0        equ	7698	;# 
  5352     1E13                     CLC1SEL1        equ	7699	;# 
  5353     1E14                     CLC1SEL2        equ	7700	;# 
  5354     1E15                     CLC1SEL3        equ	7701	;# 
  5355     1E16                     CLC1GLS0        equ	7702	;# 
  5356     1E17                     CLC1GLS1        equ	7703	;# 
  5357     1E18                     CLC1GLS2        equ	7704	;# 
  5358     1E19                     CLC1GLS3        equ	7705	;# 
  5359     1E1A                     CLC2CON         equ	7706	;# 
  5360     1E1B                     CLC2POL         equ	7707	;# 
  5361     1E1C                     CLC2SEL0        equ	7708	;# 
  5362     1E1D                     CLC2SEL1        equ	7709	;# 
  5363     1E1E                     CLC2SEL2        equ	7710	;# 
  5364     1E1F                     CLC2SEL3        equ	7711	;# 
  5365     1E20                     CLC2GLS0        equ	7712	;# 
  5366     1E21                     CLC2GLS1        equ	7713	;# 
  5367     1E22                     CLC2GLS2        equ	7714	;# 
  5368     1E23                     CLC2GLS3        equ	7715	;# 
  5369     1E24                     CLC3CON         equ	7716	;# 
  5370     1E25                     CLC3POL         equ	7717	;# 
  5371     1E26                     CLC3SEL0        equ	7718	;# 
  5372     1E27                     CLC3SEL1        equ	7719	;# 
  5373     1E28                     CLC3SEL2        equ	7720	;# 
  5374     1E29                     CLC3SEL3        equ	7721	;# 
  5375     1E2A                     CLC3GLS0        equ	7722	;# 
  5376     1E2B                     CLC3GLS1        equ	7723	;# 
  5377     1E2C                     CLC3GLS2        equ	7724	;# 
  5378     1E2D                     CLC3GLS3        equ	7725	;# 
  5379     1E2E                     CLC4CON         equ	7726	;# 
  5380     1E2F                     CLC4POL         equ	7727	;# 
  5381     1E30                     CLC4SEL0        equ	7728	;# 
  5382     1E31                     CLC4SEL1        equ	7729	;# 
  5383     1E32                     CLC4SEL2        equ	7730	;# 
  5384     1E33                     CLC4SEL3        equ	7731	;# 
  5385     1E34                     CLC4GLS0        equ	7732	;# 
  5386     1E35                     CLC4GLS1        equ	7733	;# 
  5387     1E36                     CLC4GLS2        equ	7734	;# 
  5388     1E37                     CLC4GLS3        equ	7735	;# 
  5389     1E8F                     PPSLOCK         equ	7823	;# 
  5390     1E90                     INTPPS          equ	7824	;# 
  5391     1E91                     T0CKIPPS        equ	7825	;# 
  5392     1E92                     T1CKIPPS        equ	7826	;# 
  5393     1E93                     T1GPPS          equ	7827	;# 
  5394     1E94                     T3CKIPPS        equ	7828	;# 
  5395     1E95                     T3GPPS          equ	7829	;# 
  5396     1E96                     T5CKIPPS        equ	7830	;# 
  5397     1E97                     T5GPPS          equ	7831	;# 
  5398     1E9C                     T2INPPS         equ	7836	;# 
  5399     1E9D                     T4INPPS         equ	7837	;# 
  5400     1E9E                     T6INPPS         equ	7838	;# 
  5401     1EA1                     CCP1PPS         equ	7841	;# 
  5402     1EA2                     CCP2PPS         equ	7842	;# 
  5403     1EA3                     CCP3PPS         equ	7843	;# 
  5404     1EA4                     CCP4PPS         equ	7844	;# 
  5405     1EA9                     SMT1WINPPS      equ	7849	;# 
  5406     1EAA                     SMT1SIGPPS      equ	7850	;# 
  5407     1EB1                     CWG1PPS         equ	7857	;# 
  5408     1EB2                     CWG2PPS         equ	7858	;# 
  5409     1EB8                     MDCARLPPS       equ	7864	;# 
  5410     1EB9                     MDCARHPPS       equ	7865	;# 
  5411     1EBA                     MDSRCPPS        equ	7866	;# 
  5412     1EBB                     CLCIN0PPS       equ	7867	;# 
  5413     1EBC                     CLCIN1PPS       equ	7868	;# 
  5414     1EBD                     CLCIN2PPS       equ	7869	;# 
  5415     1EBE                     CLCIN3PPS       equ	7870	;# 
  5416     1EC3                     ADACTPPS        equ	7875	;# 
  5417     1EC5                     SSP1CLKPPS      equ	7877	;# 
  5418     1EC6                     SSP1DATPPS      equ	7878	;# 
  5419     1EC7                     SSP1SSPPS       equ	7879	;# 
  5420     1EC8                     SSP2CLKPPS      equ	7880	;# 
  5421     1EC9                     SSP2DATPPS      equ	7881	;# 
  5422     1ECA                     SSP2SSPPS       equ	7882	;# 
  5423     1ECB                     RX1PPS          equ	7883	;# 
  5424     1ECC                     CK1PPS          equ	7884	;# 
  5425     1F10                     RA0PPS          equ	7952	;# 
  5426     1F11                     RA1PPS          equ	7953	;# 
  5427     1F12                     RA2PPS          equ	7954	;# 
  5428     1F14                     RA4PPS          equ	7956	;# 
  5429     1F15                     RA5PPS          equ	7957	;# 
  5430     1F20                     RC0PPS          equ	7968	;# 
  5431     1F21                     RC1PPS          equ	7969	;# 
  5432     1F22                     RC2PPS          equ	7970	;# 
  5433     1F23                     RC3PPS          equ	7971	;# 
  5434     1F24                     RC4PPS          equ	7972	;# 
  5435     1F25                     RC5PPS          equ	7973	;# 
  5436     1F38                     ANSELA          equ	7992	;# 
  5437     1F39                     WPUA            equ	7993	;# 
  5438     1F3A                     ODCONA          equ	7994	;# 
  5439     1F3B                     SLRCONA         equ	7995	;# 
  5440     1F3C                     INLVLA          equ	7996	;# 
  5441     1F3D                     IOCAP           equ	7997	;# 
  5442     1F3E                     IOCAN           equ	7998	;# 
  5443     1F3F                     IOCAF           equ	7999	;# 
  5444     1F4E                     ANSELC          equ	8014	;# 
  5445     1F4F                     WPUC            equ	8015	;# 
  5446     1F50                     ODCONC          equ	8016	;# 
  5447     1F51                     SLRCONC         equ	8017	;# 
  5448     1F52                     INLVLC          equ	8018	;# 
  5449     1F53                     IOCCP           equ	8019	;# 
  5450     1F54                     IOCCN           equ	8020	;# 
  5451     1F55                     IOCCF           equ	8021	;# 
  5452     1FE4                     STATUS_SHAD     equ	8164	;# 
  5453     1FE5                     WREG_SHAD       equ	8165	;# 
  5454     1FE6                     BSR_SHAD        equ	8166	;# 
  5455     1FE7                     PCLATH_SHAD     equ	8167	;# 
  5456     1FE8                     FSR0_SHAD       equ	8168	;# 
  5457     1FE8                     FSR0L_SHAD      equ	8168	;# 
  5458     1FE9                     FSR0H_SHAD      equ	8169	;# 
  5459     1FEA                     FSR1L_SHAD      equ	8170	;# 
  5460     1FEB                     FSR1H_SHAD      equ	8171	;# 
  5461     1FED                     STKPTR          equ	8173	;# 
  5462     1FEE                     TOSL            equ	8174	;# 
  5463     1FEF                     TOSH            equ	8175	;# 
  5464     0000                     INDF0           equ	0	;# 
  5465     0001                     INDF1           equ	1	;# 
  5466     0002                     PCL             equ	2	;# 
  5467     0003                     STATUS          equ	3	;# 
  5468     0004                     FSR0L           equ	4	;# 
  5469     0005                     FSR0H           equ	5	;# 
  5470     0006                     FSR1L           equ	6	;# 
  5471     0007                     FSR1H           equ	7	;# 
  5472     0008                     BSR             equ	8	;# 
  5473     0009                     WREG            equ	9	;# 
  5474     000A                     PCLATH          equ	10	;# 
  5475     000B                     INTCON          equ	11	;# 
  5476     000C                     PORTA           equ	12	;# 
  5477     000E                     PORTC           equ	14	;# 
  5478     0012                     TRISA           equ	18	;# 
  5479     0014                     TRISC           equ	20	;# 
  5480     0018                     LATA            equ	24	;# 
  5481     001A                     LATC            equ	26	;# 
  5482     008C                     ADLTH           equ	140	;# 
  5483     008C                     ADLTHL          equ	140	;# 
  5484     008D                     ADLTHH          equ	141	;# 
  5485     008E                     ADUTH           equ	142	;# 
  5486     008E                     ADUTHL          equ	142	;# 
  5487     008F                     ADUTHH          equ	143	;# 
  5488     0090                     ADERR           equ	144	;# 
  5489     0090                     ADERRL          equ	144	;# 
  5490     0091                     ADERRH          equ	145	;# 
  5491     0092                     ADSTPT          equ	146	;# 
  5492     0092                     ADSTPTL         equ	146	;# 
  5493     0093                     ADSTPTH         equ	147	;# 
  5494     0094                     ADFLTR          equ	148	;# 
  5495     0094                     ADFLTRL         equ	148	;# 
  5496     0095                     ADFLTRH         equ	149	;# 
  5497     0096                     ADACC           equ	150	;# 
  5498     0096                     ADACCL          equ	150	;# 
  5499     0097                     ADACCH          equ	151	;# 
  5500     0098                     ADACCU          equ	152	;# 
  5501     0099                     ADCNT           equ	153	;# 
  5502     009A                     ADRPT           equ	154	;# 
  5503     009B                     ADPREV          equ	155	;# 
  5504     009B                     ADPREVL         equ	155	;# 
  5505     009C                     ADPREVH         equ	156	;# 
  5506     009D                     ADRES           equ	157	;# 
  5507     009D                     ADRESL          equ	157	;# 
  5508     009E                     ADRESH          equ	158	;# 
  5509     009F                     ADPCH           equ	159	;# 
  5510     010C                     ADACQ           equ	268	;# 
  5511     010C                     ADACQL          equ	268	;# 
  5512     010D                     ADACQH          equ	269	;# 
  5513     010E                     ADCAP           equ	270	;# 
  5514     010F                     ADPRE           equ	271	;# 
  5515     010F                     ADPREL          equ	271	;# 
  5516     0110                     ADPREH          equ	272	;# 
  5517     0111                     ADCON0          equ	273	;# 
  5518     0112                     ADCON1          equ	274	;# 
  5519     0113                     ADCON2          equ	275	;# 
  5520     0114                     ADCON3          equ	276	;# 
  5521     0115                     ADSTAT          equ	277	;# 
  5522     0116                     ADREF           equ	278	;# 
  5523     0117                     ADACT           equ	279	;# 
  5524     0118                     ADCLK           equ	280	;# 
  5525     0119                     RC1REG          equ	281	;# 
  5526     0119                     RCREG           equ	281	;# 
  5527     0119                     RCREG1          equ	281	;# 
  5528     011A                     TX1REG          equ	282	;# 
  5529     011A                     TXREG1          equ	282	;# 
  5530     011A                     TXREG           equ	282	;# 
  5531     011B                     SP1BRG          equ	283	;# 
  5532     011B                     SPBRG           equ	283	;# 
  5533     011B                     SP1BRGL         equ	283	;# 
  5534     011B                     SPBRG1          equ	283	;# 
  5535     011B                     SPBRGL          equ	283	;# 
  5536     011C                     SP1BRGH         equ	284	;# 
  5537     011C                     SPBRGH          equ	284	;# 
  5538     011C                     SPBRGH1         equ	284	;# 
  5539     011D                     RC1STA          equ	285	;# 
  5540     011D                     RCSTA1          equ	285	;# 
  5541     011D                     RCSTA           equ	285	;# 
  5542     011E                     TX1STA          equ	286	;# 
  5543     011E                     TXSTA1          equ	286	;# 
  5544     011E                     TXSTA           equ	286	;# 
  5545     011F                     BAUD1CON        equ	287	;# 
  5546     011F                     BAUDCON1        equ	287	;# 
  5547     011F                     BAUDCTL1        equ	287	;# 
  5548     011F                     BAUDCON         equ	287	;# 
  5549     011F                     BAUDCTL         equ	287	;# 
  5550     018C                     SSP1BUF         equ	396	;# 
  5551     018D                     SSP1ADD         equ	397	;# 
  5552     018E                     SSP1MSK         equ	398	;# 
  5553     018F                     SSP1STAT        equ	399	;# 
  5554     0190                     SSP1CON1        equ	400	;# 
  5555     0191                     SSP1CON2        equ	401	;# 
  5556     0192                     SSP1CON3        equ	402	;# 
  5557     0196                     SSP2BUF         equ	406	;# 
  5558     0197                     SSP2ADD         equ	407	;# 
  5559     0198                     SSP2MSK         equ	408	;# 
  5560     0199                     SSP2STAT        equ	409	;# 
  5561     019A                     SSP2CON1        equ	410	;# 
  5562     019B                     SSP2CON2        equ	411	;# 
  5563     019C                     SSP2CON3        equ	412	;# 
  5564     020C                     TMR1            equ	524	;# 
  5565     020C                     TMR1L           equ	524	;# 
  5566     020D                     TMR1H           equ	525	;# 
  5567     020E                     T1CON           equ	526	;# 
  5568     020E                     TMR1CON         equ	526	;# 
  5569     020F                     T1GCON          equ	527	;# 
  5570     020F                     TMR1GCON        equ	527	;# 
  5571     0210                     T1GATE          equ	528	;# 
  5572     0210                     TMR1GATE        equ	528	;# 
  5573     0211                     T1CLK           equ	529	;# 
  5574     0211                     TMR1CLK         equ	529	;# 
  5575     0211                     PR1             equ	529	;# 
  5576     0212                     TMR3            equ	530	;# 
  5577     0212                     TMR3L           equ	530	;# 
  5578     0213                     TMR3H           equ	531	;# 
  5579     0214                     T3CON           equ	532	;# 
  5580     0214                     TMR3CON         equ	532	;# 
  5581     0215                     T3GCON          equ	533	;# 
  5582     0215                     TMR3GCON        equ	533	;# 
  5583     0216                     T3GATE          equ	534	;# 
  5584     0216                     TMR3GATE        equ	534	;# 
  5585     0217                     T3CLK           equ	535	;# 
  5586     0217                     TMR3CLK         equ	535	;# 
  5587     0217                     PR3             equ	535	;# 
  5588     0218                     TMR5            equ	536	;# 
  5589     0218                     TMR5L           equ	536	;# 
  5590     0219                     TMR5H           equ	537	;# 
  5591     021A                     T5CON           equ	538	;# 
  5592     021A                     TMR5CON         equ	538	;# 
  5593     021B                     T5GCON          equ	539	;# 
  5594     021B                     TMR5GCON        equ	539	;# 
  5595     021C                     T5GATE          equ	540	;# 
  5596     021C                     TMR5GATE        equ	540	;# 
  5597     021D                     T5CLK           equ	541	;# 
  5598     021D                     TMR5CLK         equ	541	;# 
  5599     021D                     PR5             equ	541	;# 
  5600     021E                     CCPTMRS0        equ	542	;# 
  5601     021F                     CCPTMRS1        equ	543	;# 
  5602     028C                     T2TMR           equ	652	;# 
  5603     028C                     TMR2            equ	652	;# 
  5604     028D                     T2PR            equ	653	;# 
  5605     028D                     PR2             equ	653	;# 
  5606     028E                     T2CON           equ	654	;# 
  5607     028F                     T2HLT           equ	655	;# 
  5608     0290                     T2CLKCON        equ	656	;# 
  5609     0291                     T2RST           equ	657	;# 
  5610     0292                     T4TMR           equ	658	;# 
  5611     0292                     TMR4            equ	658	;# 
  5612     0293                     T4PR            equ	659	;# 
  5613     0293                     PR4             equ	659	;# 
  5614     0294                     T4CON           equ	660	;# 
  5615     0295                     T4HLT           equ	661	;# 
  5616     0296                     T4CLKCON        equ	662	;# 
  5617     0297                     T4RST           equ	663	;# 
  5618     0298                     T6TMR           equ	664	;# 
  5619     0298                     TMR6            equ	664	;# 
  5620     0299                     T6PR            equ	665	;# 
  5621     0299                     PR6             equ	665	;# 
  5622     029A                     T6CON           equ	666	;# 
  5623     029B                     T6HLT           equ	667	;# 
  5624     029C                     T6CLKCON        equ	668	;# 
  5625     029D                     T6RST           equ	669	;# 
  5626     029F                     ADCPCON0        equ	671	;# 
  5627     030C                     CCPR1           equ	780	;# 
  5628     030C                     CCPR1L          equ	780	;# 
  5629     030D                     CCPR1H          equ	781	;# 
  5630     030E                     CCP1CON         equ	782	;# 
  5631     030F                     CCP1CAP         equ	783	;# 
  5632     0310                     CCPR2           equ	784	;# 
  5633     0310                     CCPR2L          equ	784	;# 
  5634     0311                     CCPR2H          equ	785	;# 
  5635     0312                     CCP2CON         equ	786	;# 
  5636     0313                     CCP2CAP         equ	787	;# 
  5637     0314                     CCPR3           equ	788	;# 
  5638     0314                     CCPR3L          equ	788	;# 
  5639     0315                     CCPR3H          equ	789	;# 
  5640     0316                     CCP3CON         equ	790	;# 
  5641     0317                     CCP3CAP         equ	791	;# 
  5642     0318                     CCPR4           equ	792	;# 
  5643     0318                     CCPR4L          equ	792	;# 
  5644     0319                     CCPR4H          equ	793	;# 
  5645     031A                     CCP4CON         equ	794	;# 
  5646     031B                     CCP4CAP         equ	795	;# 
  5647     038C                     PWM6DC          equ	908	;# 
  5648     038C                     PWM6DCL         equ	908	;# 
  5649     038D                     PWM6DCH         equ	909	;# 
  5650     038E                     PWM6CON         equ	910	;# 
  5651     0390                     PWM7DC          equ	912	;# 
  5652     0390                     PWM7DCL         equ	912	;# 
  5653     0391                     PWM7DCH         equ	913	;# 
  5654     0392                     PWM7CON         equ	914	;# 
  5655     048C                     SMT1TMR         equ	1164	;# 
  5656     048C                     SMT1TMRL        equ	1164	;# 
  5657     048D                     SMT1TMRH        equ	1165	;# 
  5658     048E                     SMT1TMRU        equ	1166	;# 
  5659     048F                     SMT1CPR         equ	1167	;# 
  5660     048F                     SMT1CPRL        equ	1167	;# 
  5661     0490                     SMT1CPRH        equ	1168	;# 
  5662     0491                     SMT1CPRU        equ	1169	;# 
  5663     0492                     SMT1CPW         equ	1170	;# 
  5664     0492                     SMT1CPWL        equ	1170	;# 
  5665     0493                     SMT1CPWH        equ	1171	;# 
  5666     0494                     SMT1CPWU        equ	1172	;# 
  5667     0495                     SMT1PR          equ	1173	;# 
  5668     0495                     SMT1PRL         equ	1173	;# 
  5669     0496                     SMT1PRH         equ	1174	;# 
  5670     0497                     SMT1PRU         equ	1175	;# 
  5671     0498                     SMT1CON0        equ	1176	;# 
  5672     0499                     SMT1CON1        equ	1177	;# 
  5673     049A                     SMT1STAT        equ	1178	;# 
  5674     049B                     SMT1CLK         equ	1179	;# 
  5675     049C                     SMT1SIG         equ	1180	;# 
  5676     049D                     SMT1WIN         equ	1181	;# 
  5677     058C                     NCO1ACC         equ	1420	;# 
  5678     058C                     NCO1ACCL        equ	1420	;# 
  5679     058D                     NCO1ACCH        equ	1421	;# 
  5680     058E                     NCO1ACCU        equ	1422	;# 
  5681     058F                     NCO1INC         equ	1423	;# 
  5682     058F                     NCO1INCL        equ	1423	;# 
  5683     0590                     NCO1INCH        equ	1424	;# 
  5684     0591                     NCO1INCU        equ	1425	;# 
  5685     0592                     NCO1CON         equ	1426	;# 
  5686     0593                     NCO1CLK         equ	1427	;# 
  5687     059C                     TMR0L           equ	1436	;# 
  5688     059C                     TMR0            equ	1436	;# 
  5689     059D                     TMR0H           equ	1437	;# 
  5690     059D                     PR0             equ	1437	;# 
  5691     059E                     T0CON0          equ	1438	;# 
  5692     059F                     T0CON1          equ	1439	;# 
  5693     060C                     CWG1CLK         equ	1548	;# 
  5694     060C                     CWG1CLKCON      equ	1548	;# 
  5695     060D                     CWG1ISM         equ	1549	;# 
  5696     060D                     CWG1DAT         equ	1549	;# 
  5697     060E                     CWG1DBR         equ	1550	;# 
  5698     060F                     CWG1DBF         equ	1551	;# 
  5699     0610                     CWG1CON0        equ	1552	;# 
  5700     0611                     CWG1CON1        equ	1553	;# 
  5701     0612                     CWG1AS0         equ	1554	;# 
  5702     0613                     CWG1AS1         equ	1555	;# 
  5703     0614                     CWG1STR         equ	1556	;# 
  5704     0616                     CWG2CLK         equ	1558	;# 
  5705     0616                     CWG2CLKCON      equ	1558	;# 
  5706     0617                     CWG2ISM         equ	1559	;# 
  5707     0617                     CWG2DAT         equ	1559	;# 
  5708     0618                     CWG2DBR         equ	1560	;# 
  5709     0619                     CWG2DBF         equ	1561	;# 
  5710     061A                     CWG2CON0        equ	1562	;# 
  5711     061B                     CWG2CON1        equ	1563	;# 
  5712     061C                     CWG2AS0         equ	1564	;# 
  5713     061D                     CWG2AS1         equ	1565	;# 
  5714     061E                     CWG2STR         equ	1566	;# 
  5715     070C                     PIR0            equ	1804	;# 
  5716     070D                     PIR1            equ	1805	;# 
  5717     070E                     PIR2            equ	1806	;# 
  5718     070F                     PIR3            equ	1807	;# 
  5719     0710                     PIR4            equ	1808	;# 
  5720     0711                     PIR5            equ	1809	;# 
  5721     0712                     PIR6            equ	1810	;# 
  5722     0713                     PIR7            equ	1811	;# 
  5723     0714                     PIR8            equ	1812	;# 
  5724     0716                     PIE0            equ	1814	;# 
  5725     0717                     PIE1            equ	1815	;# 
  5726     0718                     PIE2            equ	1816	;# 
  5727     0719                     PIE3            equ	1817	;# 
  5728     071A                     PIE4            equ	1818	;# 
  5729     071B                     PIE5            equ	1819	;# 
  5730     071C                     PIE6            equ	1820	;# 
  5731     071D                     PIE7            equ	1821	;# 
  5732     071E                     PIE8            equ	1822	;# 
  5733     0796                     PMD0            equ	1942	;# 
  5734     0797                     PMD1            equ	1943	;# 
  5735     0798                     PMD2            equ	1944	;# 
  5736     0799                     PMD3            equ	1945	;# 
  5737     079A                     PMD4            equ	1946	;# 
  5738     079B                     PMD5            equ	1947	;# 
  5739     079C                     PMD6            equ	1948	;# 
  5740     079D                     PMD7            equ	1949	;# 
  5741     080C                     WDTCON0         equ	2060	;# 
  5742     080D                     WDTCON1         equ	2061	;# 
  5743     080E                     WDTPSL          equ	2062	;# 
  5744     080F                     WDTPSH          equ	2063	;# 
  5745     0810                     WDTTMR          equ	2064	;# 
  5746     0811                     BORCON          equ	2065	;# 
  5747     0812                     VREGCON         equ	2066	;# 
  5748     0813                     PCON0           equ	2067	;# 
  5749     0814                     PCON1           equ	2068	;# 
  5750     081A                     NVMADR          equ	2074	;# 
  5751     081A                     NVMADRL         equ	2074	;# 
  5752     081B                     NVMADRH         equ	2075	;# 
  5753     081C                     NVMDAT          equ	2076	;# 
  5754     081C                     NVMDATL         equ	2076	;# 
  5755     081D                     NVMDATH         equ	2077	;# 
  5756     081E                     NVMCON1         equ	2078	;# 
  5757     081F                     NVMCON2         equ	2079	;# 
  5758     088C                     CPUDOZE         equ	2188	;# 
  5759     088D                     OSCCON1         equ	2189	;# 
  5760     088E                     OSCCON2         equ	2190	;# 
  5761     088F                     OSCCON3         equ	2191	;# 
  5762     0890                     OSCSTAT         equ	2192	;# 
  5763     0891                     OSCEN           equ	2193	;# 
  5764     0892                     OSCTUNE         equ	2194	;# 
  5765     0893                     OSCFRQ          equ	2195	;# 
  5766     0895                     CLKRCON         equ	2197	;# 
  5767     0896                     CLKRCLK         equ	2198	;# 
  5768     0897                     MD1CON0         equ	2199	;# 
  5769     0898                     MD1CON1         equ	2200	;# 
  5770     0899                     MD1SRC          equ	2201	;# 
  5771     089A                     MD1CARL         equ	2202	;# 
  5772     089B                     MD1CARH         equ	2203	;# 
  5773     090C                     FVRCON          equ	2316	;# 
  5774     090E                     DAC1CON0        equ	2318	;# 
  5775     090F                     DAC1CON1        equ	2319	;# 
  5776     091F                     ZCDCON          equ	2335	;# 
  5777     098F                     CMOUT           equ	2447	;# 
  5778     098F                     CMSTAT          equ	2447	;# 
  5779     0990                     CM1CON0         equ	2448	;# 
  5780     0991                     CM1CON1         equ	2449	;# 
  5781     0992                     CM1NCH          equ	2450	;# 
  5782     0993                     CM1PCH          equ	2451	;# 
  5783     0994                     CM2CON0         equ	2452	;# 
  5784     0995                     CM2CON1         equ	2453	;# 
  5785     0996                     CM2NCH          equ	2454	;# 
  5786     0997                     CM2PCH          equ	2455	;# 
  5787     1E0F                     CLCDATA         equ	7695	;# 
  5788     1E10                     CLC1CON         equ	7696	;# 
  5789     1E11                     CLC1POL         equ	7697	;# 
  5790     1E12                     CLC1SEL0        equ	7698	;# 
  5791     1E13                     CLC1SEL1        equ	7699	;# 
  5792     1E14                     CLC1SEL2        equ	7700	;# 
  5793     1E15                     CLC1SEL3        equ	7701	;# 
  5794     1E16                     CLC1GLS0        equ	7702	;# 
  5795     1E17                     CLC1GLS1        equ	7703	;# 
  5796     1E18                     CLC1GLS2        equ	7704	;# 
  5797     1E19                     CLC1GLS3        equ	7705	;# 
  5798     1E1A                     CLC2CON         equ	7706	;# 
  5799     1E1B                     CLC2POL         equ	7707	;# 
  5800     1E1C                     CLC2SEL0        equ	7708	;# 
  5801     1E1D                     CLC2SEL1        equ	7709	;# 
  5802     1E1E                     CLC2SEL2        equ	7710	;# 
  5803     1E1F                     CLC2SEL3        equ	7711	;# 
  5804     1E20                     CLC2GLS0        equ	7712	;# 
  5805     1E21                     CLC2GLS1        equ	7713	;# 
  5806     1E22                     CLC2GLS2        equ	7714	;# 
  5807     1E23                     CLC2GLS3        equ	7715	;# 
  5808     1E24                     CLC3CON         equ	7716	;# 
  5809     1E25                     CLC3POL         equ	7717	;# 
  5810     1E26                     CLC3SEL0        equ	7718	;# 
  5811     1E27                     CLC3SEL1        equ	7719	;# 
  5812     1E28                     CLC3SEL2        equ	7720	;# 
  5813     1E29                     CLC3SEL3        equ	7721	;# 
  5814     1E2A                     CLC3GLS0        equ	7722	;# 
  5815     1E2B                     CLC3GLS1        equ	7723	;# 
  5816     1E2C                     CLC3GLS2        equ	7724	;# 
  5817     1E2D                     CLC3GLS3        equ	7725	;# 
  5818     1E2E                     CLC4CON         equ	7726	;# 
  5819     1E2F                     CLC4POL         equ	7727	;# 
  5820     1E30                     CLC4SEL0        equ	7728	;# 
  5821     1E31                     CLC4SEL1        equ	7729	;# 
  5822     1E32                     CLC4SEL2        equ	7730	;# 
  5823     1E33                     CLC4SEL3        equ	7731	;# 
  5824     1E34                     CLC4GLS0        equ	7732	;# 
  5825     1E35                     CLC4GLS1        equ	7733	;# 
  5826     1E36                     CLC4GLS2        equ	7734	;# 
  5827     1E37                     CLC4GLS3        equ	7735	;# 
  5828     1E8F                     PPSLOCK         equ	7823	;# 
  5829     1E90                     INTPPS          equ	7824	;# 
  5830     1E91                     T0CKIPPS        equ	7825	;# 
  5831     1E92                     T1CKIPPS        equ	7826	;# 
  5832     1E93                     T1GPPS          equ	7827	;# 
  5833     1E94                     T3CKIPPS        equ	7828	;# 
  5834     1E95                     T3GPPS          equ	7829	;# 
  5835     1E96                     T5CKIPPS        equ	7830	;# 
  5836     1E97                     T5GPPS          equ	7831	;# 
  5837     1E9C                     T2INPPS         equ	7836	;# 
  5838     1E9D                     T4INPPS         equ	7837	;# 
  5839     1E9E                     T6INPPS         equ	7838	;# 
  5840     1EA1                     CCP1PPS         equ	7841	;# 
  5841     1EA2                     CCP2PPS         equ	7842	;# 
  5842     1EA3                     CCP3PPS         equ	7843	;# 
  5843     1EA4                     CCP4PPS         equ	7844	;# 
  5844     1EA9                     SMT1WINPPS      equ	7849	;# 
  5845     1EAA                     SMT1SIGPPS      equ	7850	;# 
  5846     1EB1                     CWG1PPS         equ	7857	;# 
  5847     1EB2                     CWG2PPS         equ	7858	;# 
  5848     1EB8                     MDCARLPPS       equ	7864	;# 
  5849     1EB9                     MDCARHPPS       equ	7865	;# 
  5850     1EBA                     MDSRCPPS        equ	7866	;# 
  5851     1EBB                     CLCIN0PPS       equ	7867	;# 
  5852     1EBC                     CLCIN1PPS       equ	7868	;# 
  5853     1EBD                     CLCIN2PPS       equ	7869	;# 
  5854     1EBE                     CLCIN3PPS       equ	7870	;# 
  5855     1EC3                     ADACTPPS        equ	7875	;# 
  5856     1EC5                     SSP1CLKPPS      equ	7877	;# 
  5857     1EC6                     SSP1DATPPS      equ	7878	;# 
  5858     1EC7                     SSP1SSPPS       equ	7879	;# 
  5859     1EC8                     SSP2CLKPPS      equ	7880	;# 
  5860     1EC9                     SSP2DATPPS      equ	7881	;# 
  5861     1ECA                     SSP2SSPPS       equ	7882	;# 
  5862     1ECB                     RX1PPS          equ	7883	;# 
  5863     1ECC                     CK1PPS          equ	7884	;# 
  5864     1F10                     RA0PPS          equ	7952	;# 
  5865     1F11                     RA1PPS          equ	7953	;# 
  5866     1F12                     RA2PPS          equ	7954	;# 
  5867     1F14                     RA4PPS          equ	7956	;# 
  5868     1F15                     RA5PPS          equ	7957	;# 
  5869     1F20                     RC0PPS          equ	7968	;# 
  5870     1F21                     RC1PPS          equ	7969	;# 
  5871     1F22                     RC2PPS          equ	7970	;# 
  5872     1F23                     RC3PPS          equ	7971	;# 
  5873     1F24                     RC4PPS          equ	7972	;# 
  5874     1F25                     RC5PPS          equ	7973	;# 
  5875     1F38                     ANSELA          equ	7992	;# 
  5876     1F39                     WPUA            equ	7993	;# 
  5877     1F3A                     ODCONA          equ	7994	;# 
  5878     1F3B                     SLRCONA         equ	7995	;# 
  5879     1F3C                     INLVLA          equ	7996	;# 
  5880     1F3D                     IOCAP           equ	7997	;# 
  5881     1F3E                     IOCAN           equ	7998	;# 
  5882     1F3F                     IOCAF           equ	7999	;# 
  5883     1F4E                     ANSELC          equ	8014	;# 
  5884     1F4F                     WPUC            equ	8015	;# 
  5885     1F50                     ODCONC          equ	8016	;# 
  5886     1F51                     SLRCONC         equ	8017	;# 
  5887     1F52                     INLVLC          equ	8018	;# 
  5888     1F53                     IOCCP           equ	8019	;# 
  5889     1F54                     IOCCN           equ	8020	;# 
  5890     1F55                     IOCCF           equ	8021	;# 
  5891     1FE4                     STATUS_SHAD     equ	8164	;# 
  5892     1FE5                     WREG_SHAD       equ	8165	;# 
  5893     1FE6                     BSR_SHAD        equ	8166	;# 
  5894     1FE7                     PCLATH_SHAD     equ	8167	;# 
  5895     1FE8                     FSR0_SHAD       equ	8168	;# 
  5896     1FE8                     FSR0L_SHAD      equ	8168	;# 
  5897     1FE9                     FSR0H_SHAD      equ	8169	;# 
  5898     1FEA                     FSR1L_SHAD      equ	8170	;# 
  5899     1FEB                     FSR1H_SHAD      equ	8171	;# 
  5900     1FED                     STKPTR          equ	8173	;# 
  5901     1FEE                     TOSL            equ	8174	;# 
  5902     1FEF                     TOSH            equ	8175	;# 
  5903     0000                     INDF0           equ	0	;# 
  5904     0001                     INDF1           equ	1	;# 
  5905     0002                     PCL             equ	2	;# 
  5906     0003                     STATUS          equ	3	;# 
  5907     0004                     FSR0L           equ	4	;# 
  5908     0005                     FSR0H           equ	5	;# 
  5909     0006                     FSR1L           equ	6	;# 
  5910     0007                     FSR1H           equ	7	;# 
  5911     0008                     BSR             equ	8	;# 
  5912     0009                     WREG            equ	9	;# 
  5913     000A                     PCLATH          equ	10	;# 
  5914     000B                     INTCON          equ	11	;# 
  5915     000C                     PORTA           equ	12	;# 
  5916     000E                     PORTC           equ	14	;# 
  5917     0012                     TRISA           equ	18	;# 
  5918     0014                     TRISC           equ	20	;# 
  5919     0018                     LATA            equ	24	;# 
  5920     001A                     LATC            equ	26	;# 
  5921     008C                     ADLTH           equ	140	;# 
  5922     008C                     ADLTHL          equ	140	;# 
  5923     008D                     ADLTHH          equ	141	;# 
  5924     008E                     ADUTH           equ	142	;# 
  5925     008E                     ADUTHL          equ	142	;# 
  5926     008F                     ADUTHH          equ	143	;# 
  5927     0090                     ADERR           equ	144	;# 
  5928     0090                     ADERRL          equ	144	;# 
  5929     0091                     ADERRH          equ	145	;# 
  5930     0092                     ADSTPT          equ	146	;# 
  5931     0092                     ADSTPTL         equ	146	;# 
  5932     0093                     ADSTPTH         equ	147	;# 
  5933     0094                     ADFLTR          equ	148	;# 
  5934     0094                     ADFLTRL         equ	148	;# 
  5935     0095                     ADFLTRH         equ	149	;# 
  5936     0096                     ADACC           equ	150	;# 
  5937     0096                     ADACCL          equ	150	;# 
  5938     0097                     ADACCH          equ	151	;# 
  5939     0098                     ADACCU          equ	152	;# 
  5940     0099                     ADCNT           equ	153	;# 
  5941     009A                     ADRPT           equ	154	;# 
  5942     009B                     ADPREV          equ	155	;# 
  5943     009B                     ADPREVL         equ	155	;# 
  5944     009C                     ADPREVH         equ	156	;# 
  5945     009D                     ADRES           equ	157	;# 
  5946     009D                     ADRESL          equ	157	;# 
  5947     009E                     ADRESH          equ	158	;# 
  5948     009F                     ADPCH           equ	159	;# 
  5949     010C                     ADACQ           equ	268	;# 
  5950     010C                     ADACQL          equ	268	;# 
  5951     010D                     ADACQH          equ	269	;# 
  5952     010E                     ADCAP           equ	270	;# 
  5953     010F                     ADPRE           equ	271	;# 
  5954     010F                     ADPREL          equ	271	;# 
  5955     0110                     ADPREH          equ	272	;# 
  5956     0111                     ADCON0          equ	273	;# 
  5957     0112                     ADCON1          equ	274	;# 
  5958     0113                     ADCON2          equ	275	;# 
  5959     0114                     ADCON3          equ	276	;# 
  5960     0115                     ADSTAT          equ	277	;# 
  5961     0116                     ADREF           equ	278	;# 
  5962     0117                     ADACT           equ	279	;# 
  5963     0118                     ADCLK           equ	280	;# 
  5964     0119                     RC1REG          equ	281	;# 
  5965     0119                     RCREG           equ	281	;# 
  5966     0119                     RCREG1          equ	281	;# 
  5967     011A                     TX1REG          equ	282	;# 
  5968     011A                     TXREG1          equ	282	;# 
  5969     011A                     TXREG           equ	282	;# 
  5970     011B                     SP1BRG          equ	283	;# 
  5971     011B                     SPBRG           equ	283	;# 
  5972     011B                     SP1BRGL         equ	283	;# 
  5973     011B                     SPBRG1          equ	283	;# 
  5974     011B                     SPBRGL          equ	283	;# 
  5975     011C                     SP1BRGH         equ	284	;# 
  5976     011C                     SPBRGH          equ	284	;# 
  5977     011C                     SPBRGH1         equ	284	;# 
  5978     011D                     RC1STA          equ	285	;# 
  5979     011D                     RCSTA1          equ	285	;# 
  5980     011D                     RCSTA           equ	285	;# 
  5981     011E                     TX1STA          equ	286	;# 
  5982     011E                     TXSTA1          equ	286	;# 
  5983     011E                     TXSTA           equ	286	;# 
  5984     011F                     BAUD1CON        equ	287	;# 
  5985     011F                     BAUDCON1        equ	287	;# 
  5986     011F                     BAUDCTL1        equ	287	;# 
  5987     011F                     BAUDCON         equ	287	;# 
  5988     011F                     BAUDCTL         equ	287	;# 
  5989     018C                     SSP1BUF         equ	396	;# 
  5990     018D                     SSP1ADD         equ	397	;# 
  5991     018E                     SSP1MSK         equ	398	;# 
  5992     018F                     SSP1STAT        equ	399	;# 
  5993     0190                     SSP1CON1        equ	400	;# 
  5994     0191                     SSP1CON2        equ	401	;# 
  5995     0192                     SSP1CON3        equ	402	;# 
  5996     0196                     SSP2BUF         equ	406	;# 
  5997     0197                     SSP2ADD         equ	407	;# 
  5998     0198                     SSP2MSK         equ	408	;# 
  5999     0199                     SSP2STAT        equ	409	;# 
  6000     019A                     SSP2CON1        equ	410	;# 
  6001     019B                     SSP2CON2        equ	411	;# 
  6002     019C                     SSP2CON3        equ	412	;# 
  6003     020C                     TMR1            equ	524	;# 
  6004     020C                     TMR1L           equ	524	;# 
  6005     020D                     TMR1H           equ	525	;# 
  6006     020E                     T1CON           equ	526	;# 
  6007     020E                     TMR1CON         equ	526	;# 
  6008     020F                     T1GCON          equ	527	;# 
  6009     020F                     TMR1GCON        equ	527	;# 
  6010     0210                     T1GATE          equ	528	;# 
  6011     0210                     TMR1GATE        equ	528	;# 
  6012     0211                     T1CLK           equ	529	;# 
  6013     0211                     TMR1CLK         equ	529	;# 
  6014     0211                     PR1             equ	529	;# 
  6015     0212                     TMR3            equ	530	;# 
  6016     0212                     TMR3L           equ	530	;# 
  6017     0213                     TMR3H           equ	531	;# 
  6018     0214                     T3CON           equ	532	;# 
  6019     0214                     TMR3CON         equ	532	;# 
  6020     0215                     T3GCON          equ	533	;# 
  6021     0215                     TMR3GCON        equ	533	;# 
  6022     0216                     T3GATE          equ	534	;# 
  6023     0216                     TMR3GATE        equ	534	;# 
  6024     0217                     T3CLK           equ	535	;# 
  6025     0217                     TMR3CLK         equ	535	;# 
  6026     0217                     PR3             equ	535	;# 
  6027     0218                     TMR5            equ	536	;# 
  6028     0218                     TMR5L           equ	536	;# 
  6029     0219                     TMR5H           equ	537	;# 
  6030     021A                     T5CON           equ	538	;# 
  6031     021A                     TMR5CON         equ	538	;# 
  6032     021B                     T5GCON          equ	539	;# 
  6033     021B                     TMR5GCON        equ	539	;# 
  6034     021C                     T5GATE          equ	540	;# 
  6035     021C                     TMR5GATE        equ	540	;# 
  6036     021D                     T5CLK           equ	541	;# 
  6037     021D                     TMR5CLK         equ	541	;# 
  6038     021D                     PR5             equ	541	;# 
  6039     021E                     CCPTMRS0        equ	542	;# 
  6040     021F                     CCPTMRS1        equ	543	;# 
  6041     028C                     T2TMR           equ	652	;# 
  6042     028C                     TMR2            equ	652	;# 
  6043     028D                     T2PR            equ	653	;# 
  6044     028D                     PR2             equ	653	;# 
  6045     028E                     T2CON           equ	654	;# 
  6046     028F                     T2HLT           equ	655	;# 
  6047     0290                     T2CLKCON        equ	656	;# 
  6048     0291                     T2RST           equ	657	;# 
  6049     0292                     T4TMR           equ	658	;# 
  6050     0292                     TMR4            equ	658	;# 
  6051     0293                     T4PR            equ	659	;# 
  6052     0293                     PR4             equ	659	;# 
  6053     0294                     T4CON           equ	660	;# 
  6054     0295                     T4HLT           equ	661	;# 
  6055     0296                     T4CLKCON        equ	662	;# 
  6056     0297                     T4RST           equ	663	;# 
  6057     0298                     T6TMR           equ	664	;# 
  6058     0298                     TMR6            equ	664	;# 
  6059     0299                     T6PR            equ	665	;# 
  6060     0299                     PR6             equ	665	;# 
  6061     029A                     T6CON           equ	666	;# 
  6062     029B                     T6HLT           equ	667	;# 
  6063     029C                     T6CLKCON        equ	668	;# 
  6064     029D                     T6RST           equ	669	;# 
  6065     029F                     ADCPCON0        equ	671	;# 
  6066     030C                     CCPR1           equ	780	;# 
  6067     030C                     CCPR1L          equ	780	;# 
  6068     030D                     CCPR1H          equ	781	;# 
  6069     030E                     CCP1CON         equ	782	;# 
  6070     030F                     CCP1CAP         equ	783	;# 
  6071     0310                     CCPR2           equ	784	;# 
  6072     0310                     CCPR2L          equ	784	;# 
  6073     0311                     CCPR2H          equ	785	;# 
  6074     0312                     CCP2CON         equ	786	;# 
  6075     0313                     CCP2CAP         equ	787	;# 
  6076     0314                     CCPR3           equ	788	;# 
  6077     0314                     CCPR3L          equ	788	;# 
  6078     0315                     CCPR3H          equ	789	;# 
  6079     0316                     CCP3CON         equ	790	;# 
  6080     0317                     CCP3CAP         equ	791	;# 
  6081     0318                     CCPR4           equ	792	;# 
  6082     0318                     CCPR4L          equ	792	;# 
  6083     0319                     CCPR4H          equ	793	;# 
  6084     031A                     CCP4CON         equ	794	;# 
  6085     031B                     CCP4CAP         equ	795	;# 
  6086     038C                     PWM6DC          equ	908	;# 
  6087     038C                     PWM6DCL         equ	908	;# 
  6088     038D                     PWM6DCH         equ	909	;# 
  6089     038E                     PWM6CON         equ	910	;# 
  6090     0390                     PWM7DC          equ	912	;# 
  6091     0390                     PWM7DCL         equ	912	;# 
  6092     0391                     PWM7DCH         equ	913	;# 
  6093     0392                     PWM7CON         equ	914	;# 
  6094     048C                     SMT1TMR         equ	1164	;# 
  6095     048C                     SMT1TMRL        equ	1164	;# 
  6096     048D                     SMT1TMRH        equ	1165	;# 
  6097     048E                     SMT1TMRU        equ	1166	;# 
  6098     048F                     SMT1CPR         equ	1167	;# 
  6099     048F                     SMT1CPRL        equ	1167	;# 
  6100     0490                     SMT1CPRH        equ	1168	;# 
  6101     0491                     SMT1CPRU        equ	1169	;# 
  6102     0492                     SMT1CPW         equ	1170	;# 
  6103     0492                     SMT1CPWL        equ	1170	;# 
  6104     0493                     SMT1CPWH        equ	1171	;# 
  6105     0494                     SMT1CPWU        equ	1172	;# 
  6106     0495                     SMT1PR          equ	1173	;# 
  6107     0495                     SMT1PRL         equ	1173	;# 
  6108     0496                     SMT1PRH         equ	1174	;# 
  6109     0497                     SMT1PRU         equ	1175	;# 
  6110     0498                     SMT1CON0        equ	1176	;# 
  6111     0499                     SMT1CON1        equ	1177	;# 
  6112     049A                     SMT1STAT        equ	1178	;# 
  6113     049B                     SMT1CLK         equ	1179	;# 
  6114     049C                     SMT1SIG         equ	1180	;# 
  6115     049D                     SMT1WIN         equ	1181	;# 
  6116     058C                     NCO1ACC         equ	1420	;# 
  6117     058C                     NCO1ACCL        equ	1420	;# 
  6118     058D                     NCO1ACCH        equ	1421	;# 
  6119     058E                     NCO1ACCU        equ	1422	;# 
  6120     058F                     NCO1INC         equ	1423	;# 
  6121     058F                     NCO1INCL        equ	1423	;# 
  6122     0590                     NCO1INCH        equ	1424	;# 
  6123     0591                     NCO1INCU        equ	1425	;# 
  6124     0592                     NCO1CON         equ	1426	;# 
  6125     0593                     NCO1CLK         equ	1427	;# 
  6126     059C                     TMR0L           equ	1436	;# 
  6127     059C                     TMR0            equ	1436	;# 
  6128     059D                     TMR0H           equ	1437	;# 
  6129     059D                     PR0             equ	1437	;# 
  6130     059E                     T0CON0          equ	1438	;# 
  6131     059F                     T0CON1          equ	1439	;# 
  6132     060C                     CWG1CLK         equ	1548	;# 
  6133     060C                     CWG1CLKCON      equ	1548	;# 
  6134     060D                     CWG1ISM         equ	1549	;# 
  6135     060D                     CWG1DAT         equ	1549	;# 
  6136     060E                     CWG1DBR         equ	1550	;# 
  6137     060F                     CWG1DBF         equ	1551	;# 
  6138     0610                     CWG1CON0        equ	1552	;# 
  6139     0611                     CWG1CON1        equ	1553	;# 
  6140     0612                     CWG1AS0         equ	1554	;# 
  6141     0613                     CWG1AS1         equ	1555	;# 
  6142     0614                     CWG1STR         equ	1556	;# 
  6143     0616                     CWG2CLK         equ	1558	;# 
  6144     0616                     CWG2CLKCON      equ	1558	;# 
  6145     0617                     CWG2ISM         equ	1559	;# 
  6146     0617                     CWG2DAT         equ	1559	;# 
  6147     0618                     CWG2DBR         equ	1560	;# 
  6148     0619                     CWG2DBF         equ	1561	;# 
  6149     061A                     CWG2CON0        equ	1562	;# 
  6150     061B                     CWG2CON1        equ	1563	;# 
  6151     061C                     CWG2AS0         equ	1564	;# 
  6152     061D                     CWG2AS1         equ	1565	;# 
  6153     061E                     CWG2STR         equ	1566	;# 
  6154     070C                     PIR0            equ	1804	;# 
  6155     070D                     PIR1            equ	1805	;# 
  6156     070E                     PIR2            equ	1806	;# 
  6157     070F                     PIR3            equ	1807	;# 
  6158     0710                     PIR4            equ	1808	;# 
  6159     0711                     PIR5            equ	1809	;# 
  6160     0712                     PIR6            equ	1810	;# 
  6161     0713                     PIR7            equ	1811	;# 
  6162     0714                     PIR8            equ	1812	;# 
  6163     0716                     PIE0            equ	1814	;# 
  6164     0717                     PIE1            equ	1815	;# 
  6165     0718                     PIE2            equ	1816	;# 
  6166     0719                     PIE3            equ	1817	;# 
  6167     071A                     PIE4            equ	1818	;# 
  6168     071B                     PIE5            equ	1819	;# 
  6169     071C                     PIE6            equ	1820	;# 
  6170     071D                     PIE7            equ	1821	;# 
  6171     071E                     PIE8            equ	1822	;# 
  6172     0796                     PMD0            equ	1942	;# 
  6173     0797                     PMD1            equ	1943	;# 
  6174     0798                     PMD2            equ	1944	;# 
  6175     0799                     PMD3            equ	1945	;# 
  6176     079A                     PMD4            equ	1946	;# 
  6177     079B                     PMD5            equ	1947	;# 
  6178     079C                     PMD6            equ	1948	;# 
  6179     079D                     PMD7            equ	1949	;# 
  6180     080C                     WDTCON0         equ	2060	;# 
  6181     080D                     WDTCON1         equ	2061	;# 
  6182     080E                     WDTPSL          equ	2062	;# 
  6183     080F                     WDTPSH          equ	2063	;# 
  6184     0810                     WDTTMR          equ	2064	;# 
  6185     0811                     BORCON          equ	2065	;# 
  6186     0812                     VREGCON         equ	2066	;# 
  6187     0813                     PCON0           equ	2067	;# 
  6188     0814                     PCON1           equ	2068	;# 
  6189     081A                     NVMADR          equ	2074	;# 
  6190     081A                     NVMADRL         equ	2074	;# 
  6191     081B                     NVMADRH         equ	2075	;# 
  6192     081C                     NVMDAT          equ	2076	;# 
  6193     081C                     NVMDATL         equ	2076	;# 
  6194     081D                     NVMDATH         equ	2077	;# 
  6195     081E                     NVMCON1         equ	2078	;# 
  6196     081F                     NVMCON2         equ	2079	;# 
  6197     088C                     CPUDOZE         equ	2188	;# 
  6198     088D                     OSCCON1         equ	2189	;# 
  6199     088E                     OSCCON2         equ	2190	;# 
  6200     088F                     OSCCON3         equ	2191	;# 
  6201     0890                     OSCSTAT         equ	2192	;# 
  6202     0891                     OSCEN           equ	2193	;# 
  6203     0892                     OSCTUNE         equ	2194	;# 
  6204     0893                     OSCFRQ          equ	2195	;# 
  6205     0895                     CLKRCON         equ	2197	;# 
  6206     0896                     CLKRCLK         equ	2198	;# 
  6207     0897                     MD1CON0         equ	2199	;# 
  6208     0898                     MD1CON1         equ	2200	;# 
  6209     0899                     MD1SRC          equ	2201	;# 
  6210     089A                     MD1CARL         equ	2202	;# 
  6211     089B                     MD1CARH         equ	2203	;# 
  6212     090C                     FVRCON          equ	2316	;# 
  6213     090E                     DAC1CON0        equ	2318	;# 
  6214     090F                     DAC1CON1        equ	2319	;# 
  6215     091F                     ZCDCON          equ	2335	;# 
  6216     098F                     CMOUT           equ	2447	;# 
  6217     098F                     CMSTAT          equ	2447	;# 
  6218     0990                     CM1CON0         equ	2448	;# 
  6219     0991                     CM1CON1         equ	2449	;# 
  6220     0992                     CM1NCH          equ	2450	;# 
  6221     0993                     CM1PCH          equ	2451	;# 
  6222     0994                     CM2CON0         equ	2452	;# 
  6223     0995                     CM2CON1         equ	2453	;# 
  6224     0996                     CM2NCH          equ	2454	;# 
  6225     0997                     CM2PCH          equ	2455	;# 
  6226     1E0F                     CLCDATA         equ	7695	;# 
  6227     1E10                     CLC1CON         equ	7696	;# 
  6228     1E11                     CLC1POL         equ	7697	;# 
  6229     1E12                     CLC1SEL0        equ	7698	;# 
  6230     1E13                     CLC1SEL1        equ	7699	;# 
  6231     1E14                     CLC1SEL2        equ	7700	;# 
  6232     1E15                     CLC1SEL3        equ	7701	;# 
  6233     1E16                     CLC1GLS0        equ	7702	;# 
  6234     1E17                     CLC1GLS1        equ	7703	;# 
  6235     1E18                     CLC1GLS2        equ	7704	;# 
  6236     1E19                     CLC1GLS3        equ	7705	;# 
  6237     1E1A                     CLC2CON         equ	7706	;# 
  6238     1E1B                     CLC2POL         equ	7707	;# 
  6239     1E1C                     CLC2SEL0        equ	7708	;# 
  6240     1E1D                     CLC2SEL1        equ	7709	;# 
  6241     1E1E                     CLC2SEL2        equ	7710	;# 
  6242     1E1F                     CLC2SEL3        equ	7711	;# 
  6243     1E20                     CLC2GLS0        equ	7712	;# 
  6244     1E21                     CLC2GLS1        equ	7713	;# 
  6245     1E22                     CLC2GLS2        equ	7714	;# 
  6246     1E23                     CLC2GLS3        equ	7715	;# 
  6247     1E24                     CLC3CON         equ	7716	;# 
  6248     1E25                     CLC3POL         equ	7717	;# 
  6249     1E26                     CLC3SEL0        equ	7718	;# 
  6250     1E27                     CLC3SEL1        equ	7719	;# 
  6251     1E28                     CLC3SEL2        equ	7720	;# 
  6252     1E29                     CLC3SEL3        equ	7721	;# 
  6253     1E2A                     CLC3GLS0        equ	7722	;# 
  6254     1E2B                     CLC3GLS1        equ	7723	;# 
  6255     1E2C                     CLC3GLS2        equ	7724	;# 
  6256     1E2D                     CLC3GLS3        equ	7725	;# 
  6257     1E2E                     CLC4CON         equ	7726	;# 
  6258     1E2F                     CLC4POL         equ	7727	;# 
  6259     1E30                     CLC4SEL0        equ	7728	;# 
  6260     1E31                     CLC4SEL1        equ	7729	;# 
  6261     1E32                     CLC4SEL2        equ	7730	;# 
  6262     1E33                     CLC4SEL3        equ	7731	;# 
  6263     1E34                     CLC4GLS0        equ	7732	;# 
  6264     1E35                     CLC4GLS1        equ	7733	;# 
  6265     1E36                     CLC4GLS2        equ	7734	;# 
  6266     1E37                     CLC4GLS3        equ	7735	;# 
  6267     1E8F                     PPSLOCK         equ	7823	;# 
  6268     1E90                     INTPPS          equ	7824	;# 
  6269     1E91                     T0CKIPPS        equ	7825	;# 
  6270     1E92                     T1CKIPPS        equ	7826	;# 
  6271     1E93                     T1GPPS          equ	7827	;# 
  6272     1E94                     T3CKIPPS        equ	7828	;# 
  6273     1E95                     T3GPPS          equ	7829	;# 
  6274     1E96                     T5CKIPPS        equ	7830	;# 
  6275     1E97                     T5GPPS          equ	7831	;# 
  6276     1E9C                     T2INPPS         equ	7836	;# 
  6277     1E9D                     T4INPPS         equ	7837	;# 
  6278     1E9E                     T6INPPS         equ	7838	;# 
  6279     1EA1                     CCP1PPS         equ	7841	;# 
  6280     1EA2                     CCP2PPS         equ	7842	;# 
  6281     1EA3                     CCP3PPS         equ	7843	;# 
  6282     1EA4                     CCP4PPS         equ	7844	;# 
  6283     1EA9                     SMT1WINPPS      equ	7849	;# 
  6284     1EAA                     SMT1SIGPPS      equ	7850	;# 
  6285     1EB1                     CWG1PPS         equ	7857	;# 
  6286     1EB2                     CWG2PPS         equ	7858	;# 
  6287     1EB8                     MDCARLPPS       equ	7864	;# 
  6288     1EB9                     MDCARHPPS       equ	7865	;# 
  6289     1EBA                     MDSRCPPS        equ	7866	;# 
  6290     1EBB                     CLCIN0PPS       equ	7867	;# 
  6291     1EBC                     CLCIN1PPS       equ	7868	;# 
  6292     1EBD                     CLCIN2PPS       equ	7869	;# 
  6293     1EBE                     CLCIN3PPS       equ	7870	;# 
  6294     1EC3                     ADACTPPS        equ	7875	;# 
  6295     1EC5                     SSP1CLKPPS      equ	7877	;# 
  6296     1EC6                     SSP1DATPPS      equ	7878	;# 
  6297     1EC7                     SSP1SSPPS       equ	7879	;# 
  6298     1EC8                     SSP2CLKPPS      equ	7880	;# 
  6299     1EC9                     SSP2DATPPS      equ	7881	;# 
  6300     1ECA                     SSP2SSPPS       equ	7882	;# 
  6301     1ECB                     RX1PPS          equ	7883	;# 
  6302     1ECC                     CK1PPS          equ	7884	;# 
  6303     1F10                     RA0PPS          equ	7952	;# 
  6304     1F11                     RA1PPS          equ	7953	;# 
  6305     1F12                     RA2PPS          equ	7954	;# 
  6306     1F14                     RA4PPS          equ	7956	;# 
  6307     1F15                     RA5PPS          equ	7957	;# 
  6308     1F20                     RC0PPS          equ	7968	;# 
  6309     1F21                     RC1PPS          equ	7969	;# 
  6310     1F22                     RC2PPS          equ	7970	;# 
  6311     1F23                     RC3PPS          equ	7971	;# 
  6312     1F24                     RC4PPS          equ	7972	;# 
  6313     1F25                     RC5PPS          equ	7973	;# 
  6314     1F38                     ANSELA          equ	7992	;# 
  6315     1F39                     WPUA            equ	7993	;# 
  6316     1F3A                     ODCONA          equ	7994	;# 
  6317     1F3B                     SLRCONA         equ	7995	;# 
  6318     1F3C                     INLVLA          equ	7996	;# 
  6319     1F3D                     IOCAP           equ	7997	;# 
  6320     1F3E                     IOCAN           equ	7998	;# 
  6321     1F3F                     IOCAF           equ	7999	;# 
  6322     1F4E                     ANSELC          equ	8014	;# 
  6323     1F4F                     WPUC            equ	8015	;# 
  6324     1F50                     ODCONC          equ	8016	;# 
  6325     1F51                     SLRCONC         equ	8017	;# 
  6326     1F52                     INLVLC          equ	8018	;# 
  6327     1F53                     IOCCP           equ	8019	;# 
  6328     1F54                     IOCCN           equ	8020	;# 
  6329     1F55                     IOCCF           equ	8021	;# 
  6330     1FE4                     STATUS_SHAD     equ	8164	;# 
  6331     1FE5                     WREG_SHAD       equ	8165	;# 
  6332     1FE6                     BSR_SHAD        equ	8166	;# 
  6333     1FE7                     PCLATH_SHAD     equ	8167	;# 
  6334     1FE8                     FSR0_SHAD       equ	8168	;# 
  6335     1FE8                     FSR0L_SHAD      equ	8168	;# 
  6336     1FE9                     FSR0H_SHAD      equ	8169	;# 
  6337     1FEA                     FSR1L_SHAD      equ	8170	;# 
  6338     1FEB                     FSR1H_SHAD      equ	8171	;# 
  6339     1FED                     STKPTR          equ	8173	;# 
  6340     1FEE                     TOSL            equ	8174	;# 
  6341     1FEF                     TOSH            equ	8175	;# 
  6342     0000                     INDF0           equ	0	;# 
  6343     0001                     INDF1           equ	1	;# 
  6344     0002                     PCL             equ	2	;# 
  6345     0003                     STATUS          equ	3	;# 
  6346     0004                     FSR0L           equ	4	;# 
  6347     0005                     FSR0H           equ	5	;# 
  6348     0006                     FSR1L           equ	6	;# 
  6349     0007                     FSR1H           equ	7	;# 
  6350     0008                     BSR             equ	8	;# 
  6351     0009                     WREG            equ	9	;# 
  6352     000A                     PCLATH          equ	10	;# 
  6353     000B                     INTCON          equ	11	;# 
  6354     000C                     PORTA           equ	12	;# 
  6355     000E                     PORTC           equ	14	;# 
  6356     0012                     TRISA           equ	18	;# 
  6357     0014                     TRISC           equ	20	;# 
  6358     0018                     LATA            equ	24	;# 
  6359     001A                     LATC            equ	26	;# 
  6360     008C                     ADLTH           equ	140	;# 
  6361     008C                     ADLTHL          equ	140	;# 
  6362     008D                     ADLTHH          equ	141	;# 
  6363     008E                     ADUTH           equ	142	;# 
  6364     008E                     ADUTHL          equ	142	;# 
  6365     008F                     ADUTHH          equ	143	;# 
  6366     0090                     ADERR           equ	144	;# 
  6367     0090                     ADERRL          equ	144	;# 
  6368     0091                     ADERRH          equ	145	;# 
  6369     0092                     ADSTPT          equ	146	;# 
  6370     0092                     ADSTPTL         equ	146	;# 
  6371     0093                     ADSTPTH         equ	147	;# 
  6372     0094                     ADFLTR          equ	148	;# 
  6373     0094                     ADFLTRL         equ	148	;# 
  6374     0095                     ADFLTRH         equ	149	;# 
  6375     0096                     ADACC           equ	150	;# 
  6376     0096                     ADACCL          equ	150	;# 
  6377     0097                     ADACCH          equ	151	;# 
  6378     0098                     ADACCU          equ	152	;# 
  6379     0099                     ADCNT           equ	153	;# 
  6380     009A                     ADRPT           equ	154	;# 
  6381     009B                     ADPREV          equ	155	;# 
  6382     009B                     ADPREVL         equ	155	;# 
  6383     009C                     ADPREVH         equ	156	;# 
  6384     009D                     ADRES           equ	157	;# 
  6385     009D                     ADRESL          equ	157	;# 
  6386     009E                     ADRESH          equ	158	;# 
  6387     009F                     ADPCH           equ	159	;# 
  6388     010C                     ADACQ           equ	268	;# 
  6389     010C                     ADACQL          equ	268	;# 
  6390     010D                     ADACQH          equ	269	;# 
  6391     010E                     ADCAP           equ	270	;# 
  6392     010F                     ADPRE           equ	271	;# 
  6393     010F                     ADPREL          equ	271	;# 
  6394     0110                     ADPREH          equ	272	;# 
  6395     0111                     ADCON0          equ	273	;# 
  6396     0112                     ADCON1          equ	274	;# 
  6397     0113                     ADCON2          equ	275	;# 
  6398     0114                     ADCON3          equ	276	;# 
  6399     0115                     ADSTAT          equ	277	;# 
  6400     0116                     ADREF           equ	278	;# 
  6401     0117                     ADACT           equ	279	;# 
  6402     0118                     ADCLK           equ	280	;# 
  6403     0119                     RC1REG          equ	281	;# 
  6404     0119                     RCREG           equ	281	;# 
  6405     0119                     RCREG1          equ	281	;# 
  6406     011A                     TX1REG          equ	282	;# 
  6407     011A                     TXREG1          equ	282	;# 
  6408     011A                     TXREG           equ	282	;# 
  6409     011B                     SP1BRG          equ	283	;# 
  6410     011B                     SPBRG           equ	283	;# 
  6411     011B                     SP1BRGL         equ	283	;# 
  6412     011B                     SPBRG1          equ	283	;# 
  6413     011B                     SPBRGL          equ	283	;# 
  6414     011C                     SP1BRGH         equ	284	;# 
  6415     011C                     SPBRGH          equ	284	;# 
  6416     011C                     SPBRGH1         equ	284	;# 
  6417     011D                     RC1STA          equ	285	;# 
  6418     011D                     RCSTA1          equ	285	;# 
  6419     011D                     RCSTA           equ	285	;# 
  6420     011E                     TX1STA          equ	286	;# 
  6421     011E                     TXSTA1          equ	286	;# 
  6422     011E                     TXSTA           equ	286	;# 
  6423     011F                     BAUD1CON        equ	287	;# 
  6424     011F                     BAUDCON1        equ	287	;# 
  6425     011F                     BAUDCTL1        equ	287	;# 
  6426     011F                     BAUDCON         equ	287	;# 
  6427     011F                     BAUDCTL         equ	287	;# 
  6428     018C                     SSP1BUF         equ	396	;# 
  6429     018D                     SSP1ADD         equ	397	;# 
  6430     018E                     SSP1MSK         equ	398	;# 
  6431     018F                     SSP1STAT        equ	399	;# 
  6432     0190                     SSP1CON1        equ	400	;# 
  6433     0191                     SSP1CON2        equ	401	;# 
  6434     0192                     SSP1CON3        equ	402	;# 
  6435     0196                     SSP2BUF         equ	406	;# 
  6436     0197                     SSP2ADD         equ	407	;# 
  6437     0198                     SSP2MSK         equ	408	;# 
  6438     0199                     SSP2STAT        equ	409	;# 
  6439     019A                     SSP2CON1        equ	410	;# 
  6440     019B                     SSP2CON2        equ	411	;# 
  6441     019C                     SSP2CON3        equ	412	;# 
  6442     020C                     TMR1            equ	524	;# 
  6443     020C                     TMR1L           equ	524	;# 
  6444     020D                     TMR1H           equ	525	;# 
  6445     020E                     T1CON           equ	526	;# 
  6446     020E                     TMR1CON         equ	526	;# 
  6447     020F                     T1GCON          equ	527	;# 
  6448     020F                     TMR1GCON        equ	527	;# 
  6449     0210                     T1GATE          equ	528	;# 
  6450     0210                     TMR1GATE        equ	528	;# 
  6451     0211                     T1CLK           equ	529	;# 
  6452     0211                     TMR1CLK         equ	529	;# 
  6453     0211                     PR1             equ	529	;# 
  6454     0212                     TMR3            equ	530	;# 
  6455     0212                     TMR3L           equ	530	;# 
  6456     0213                     TMR3H           equ	531	;# 
  6457     0214                     T3CON           equ	532	;# 
  6458     0214                     TMR3CON         equ	532	;# 
  6459     0215                     T3GCON          equ	533	;# 
  6460     0215                     TMR3GCON        equ	533	;# 
  6461     0216                     T3GATE          equ	534	;# 
  6462     0216                     TMR3GATE        equ	534	;# 
  6463     0217                     T3CLK           equ	535	;# 
  6464     0217                     TMR3CLK         equ	535	;# 
  6465     0217                     PR3             equ	535	;# 
  6466     0218                     TMR5            equ	536	;# 
  6467     0218                     TMR5L           equ	536	;# 
  6468     0219                     TMR5H           equ	537	;# 
  6469     021A                     T5CON           equ	538	;# 
  6470     021A                     TMR5CON         equ	538	;# 
  6471     021B                     T5GCON          equ	539	;# 
  6472     021B                     TMR5GCON        equ	539	;# 
  6473     021C                     T5GATE          equ	540	;# 
  6474     021C                     TMR5GATE        equ	540	;# 
  6475     021D                     T5CLK           equ	541	;# 
  6476     021D                     TMR5CLK         equ	541	;# 
  6477     021D                     PR5             equ	541	;# 
  6478     021E                     CCPTMRS0        equ	542	;# 
  6479     021F                     CCPTMRS1        equ	543	;# 
  6480     028C                     T2TMR           equ	652	;# 
  6481     028C                     TMR2            equ	652	;# 
  6482     028D                     T2PR            equ	653	;# 
  6483     028D                     PR2             equ	653	;# 
  6484     028E                     T2CON           equ	654	;# 
  6485     028F                     T2HLT           equ	655	;# 
  6486     0290                     T2CLKCON        equ	656	;# 
  6487     0291                     T2RST           equ	657	;# 
  6488     0292                     T4TMR           equ	658	;# 
  6489     0292                     TMR4            equ	658	;# 
  6490     0293                     T4PR            equ	659	;# 
  6491     0293                     PR4             equ	659	;# 
  6492     0294                     T4CON           equ	660	;# 
  6493     0295                     T4HLT           equ	661	;# 
  6494     0296                     T4CLKCON        equ	662	;# 
  6495     0297                     T4RST           equ	663	;# 
  6496     0298                     T6TMR           equ	664	;# 
  6497     0298                     TMR6            equ	664	;# 
  6498     0299                     T6PR            equ	665	;# 
  6499     0299                     PR6             equ	665	;# 
  6500     029A                     T6CON           equ	666	;# 
  6501     029B                     T6HLT           equ	667	;# 
  6502     029C                     T6CLKCON        equ	668	;# 
  6503     029D                     T6RST           equ	669	;# 
  6504     029F                     ADCPCON0        equ	671	;# 
  6505     030C                     CCPR1           equ	780	;# 
  6506     030C                     CCPR1L          equ	780	;# 
  6507     030D                     CCPR1H          equ	781	;# 
  6508     030E                     CCP1CON         equ	782	;# 
  6509     030F                     CCP1CAP         equ	783	;# 
  6510     0310                     CCPR2           equ	784	;# 
  6511     0310                     CCPR2L          equ	784	;# 
  6512     0311                     CCPR2H          equ	785	;# 
  6513     0312                     CCP2CON         equ	786	;# 
  6514     0313                     CCP2CAP         equ	787	;# 
  6515     0314                     CCPR3           equ	788	;# 
  6516     0314                     CCPR3L          equ	788	;# 
  6517     0315                     CCPR3H          equ	789	;# 
  6518     0316                     CCP3CON         equ	790	;# 
  6519     0317                     CCP3CAP         equ	791	;# 
  6520     0318                     CCPR4           equ	792	;# 
  6521     0318                     CCPR4L          equ	792	;# 
  6522     0319                     CCPR4H          equ	793	;# 
  6523     031A                     CCP4CON         equ	794	;# 
  6524     031B                     CCP4CAP         equ	795	;# 
  6525     038C                     PWM6DC          equ	908	;# 
  6526     038C                     PWM6DCL         equ	908	;# 
  6527     038D                     PWM6DCH         equ	909	;# 
  6528     038E                     PWM6CON         equ	910	;# 
  6529     0390                     PWM7DC          equ	912	;# 
  6530     0390                     PWM7DCL         equ	912	;# 
  6531     0391                     PWM7DCH         equ	913	;# 
  6532     0392                     PWM7CON         equ	914	;# 
  6533     048C                     SMT1TMR         equ	1164	;# 
  6534     048C                     SMT1TMRL        equ	1164	;# 
  6535     048D                     SMT1TMRH        equ	1165	;# 
  6536     048E                     SMT1TMRU        equ	1166	;# 
  6537     048F                     SMT1CPR         equ	1167	;# 
  6538     048F                     SMT1CPRL        equ	1167	;# 
  6539     0490                     SMT1CPRH        equ	1168	;# 
  6540     0491                     SMT1CPRU        equ	1169	;# 
  6541     0492                     SMT1CPW         equ	1170	;# 
  6542     0492                     SMT1CPWL        equ	1170	;# 
  6543     0493                     SMT1CPWH        equ	1171	;# 
  6544     0494                     SMT1CPWU        equ	1172	;# 
  6545     0495                     SMT1PR          equ	1173	;# 
  6546     0495                     SMT1PRL         equ	1173	;# 
  6547     0496                     SMT1PRH         equ	1174	;# 
  6548     0497                     SMT1PRU         equ	1175	;# 
  6549     0498                     SMT1CON0        equ	1176	;# 
  6550     0499                     SMT1CON1        equ	1177	;# 
  6551     049A                     SMT1STAT        equ	1178	;# 
  6552     049B                     SMT1CLK         equ	1179	;# 
  6553     049C                     SMT1SIG         equ	1180	;# 
  6554     049D                     SMT1WIN         equ	1181	;# 
  6555     058C                     NCO1ACC         equ	1420	;# 
  6556     058C                     NCO1ACCL        equ	1420	;# 
  6557     058D                     NCO1ACCH        equ	1421	;# 
  6558     058E                     NCO1ACCU        equ	1422	;# 
  6559     058F                     NCO1INC         equ	1423	;# 
  6560     058F                     NCO1INCL        equ	1423	;# 
  6561     0590                     NCO1INCH        equ	1424	;# 
  6562     0591                     NCO1INCU        equ	1425	;# 
  6563     0592                     NCO1CON         equ	1426	;# 
  6564     0593                     NCO1CLK         equ	1427	;# 
  6565     059C                     TMR0L           equ	1436	;# 
  6566     059C                     TMR0            equ	1436	;# 
  6567     059D                     TMR0H           equ	1437	;# 
  6568     059D                     PR0             equ	1437	;# 
  6569     059E                     T0CON0          equ	1438	;# 
  6570     059F                     T0CON1          equ	1439	;# 
  6571     060C                     CWG1CLK         equ	1548	;# 
  6572     060C                     CWG1CLKCON      equ	1548	;# 
  6573     060D                     CWG1ISM         equ	1549	;# 
  6574     060D                     CWG1DAT         equ	1549	;# 
  6575     060E                     CWG1DBR         equ	1550	;# 
  6576     060F                     CWG1DBF         equ	1551	;# 
  6577     0610                     CWG1CON0        equ	1552	;# 
  6578     0611                     CWG1CON1        equ	1553	;# 
  6579     0612                     CWG1AS0         equ	1554	;# 
  6580     0613                     CWG1AS1         equ	1555	;# 
  6581     0614                     CWG1STR         equ	1556	;# 
  6582     0616                     CWG2CLK         equ	1558	;# 
  6583     0616                     CWG2CLKCON      equ	1558	;# 
  6584     0617                     CWG2ISM         equ	1559	;# 
  6585     0617                     CWG2DAT         equ	1559	;# 
  6586     0618                     CWG2DBR         equ	1560	;# 
  6587     0619                     CWG2DBF         equ	1561	;# 
  6588     061A                     CWG2CON0        equ	1562	;# 
  6589     061B                     CWG2CON1        equ	1563	;# 
  6590     061C                     CWG2AS0         equ	1564	;# 
  6591     061D                     CWG2AS1         equ	1565	;# 
  6592     061E                     CWG2STR         equ	1566	;# 
  6593     070C                     PIR0            equ	1804	;# 
  6594     070D                     PIR1            equ	1805	;# 
  6595     070E                     PIR2            equ	1806	;# 
  6596     070F                     PIR3            equ	1807	;# 
  6597     0710                     PIR4            equ	1808	;# 
  6598     0711                     PIR5            equ	1809	;# 
  6599     0712                     PIR6            equ	1810	;# 
  6600     0713                     PIR7            equ	1811	;# 
  6601     0714                     PIR8            equ	1812	;# 
  6602     0716                     PIE0            equ	1814	;# 
  6603     0717                     PIE1            equ	1815	;# 
  6604     0718                     PIE2            equ	1816	;# 
  6605     0719                     PIE3            equ	1817	;# 
  6606     071A                     PIE4            equ	1818	;# 
  6607     071B                     PIE5            equ	1819	;# 
  6608     071C                     PIE6            equ	1820	;# 
  6609     071D                     PIE7            equ	1821	;# 
  6610     071E                     PIE8            equ	1822	;# 
  6611     0796                     PMD0            equ	1942	;# 
  6612     0797                     PMD1            equ	1943	;# 
  6613     0798                     PMD2            equ	1944	;# 
  6614     0799                     PMD3            equ	1945	;# 
  6615     079A                     PMD4            equ	1946	;# 
  6616     079B                     PMD5            equ	1947	;# 
  6617     079C                     PMD6            equ	1948	;# 
  6618     079D                     PMD7            equ	1949	;# 
  6619     080C                     WDTCON0         equ	2060	;# 
  6620     080D                     WDTCON1         equ	2061	;# 
  6621     080E                     WDTPSL          equ	2062	;# 
  6622     080F                     WDTPSH          equ	2063	;# 
  6623     0810                     WDTTMR          equ	2064	;# 
  6624     0811                     BORCON          equ	2065	;# 
  6625     0812                     VREGCON         equ	2066	;# 
  6626     0813                     PCON0           equ	2067	;# 
  6627     0814                     PCON1           equ	2068	;# 
  6628     081A                     NVMADR          equ	2074	;# 
  6629     081A                     NVMADRL         equ	2074	;# 
  6630     081B                     NVMADRH         equ	2075	;# 
  6631     081C                     NVMDAT          equ	2076	;# 
  6632     081C                     NVMDATL         equ	2076	;# 
  6633     081D                     NVMDATH         equ	2077	;# 
  6634     081E                     NVMCON1         equ	2078	;# 
  6635     081F                     NVMCON2         equ	2079	;# 
  6636     088C                     CPUDOZE         equ	2188	;# 
  6637     088D                     OSCCON1         equ	2189	;# 
  6638     088E                     OSCCON2         equ	2190	;# 
  6639     088F                     OSCCON3         equ	2191	;# 
  6640     0890                     OSCSTAT         equ	2192	;# 
  6641     0891                     OSCEN           equ	2193	;# 
  6642     0892                     OSCTUNE         equ	2194	;# 
  6643     0893                     OSCFRQ          equ	2195	;# 
  6644     0895                     CLKRCON         equ	2197	;# 
  6645     0896                     CLKRCLK         equ	2198	;# 
  6646     0897                     MD1CON0         equ	2199	;# 
  6647     0898                     MD1CON1         equ	2200	;# 
  6648     0899                     MD1SRC          equ	2201	;# 
  6649     089A                     MD1CARL         equ	2202	;# 
  6650     089B                     MD1CARH         equ	2203	;# 
  6651     090C                     FVRCON          equ	2316	;# 
  6652     090E                     DAC1CON0        equ	2318	;# 
  6653     090F                     DAC1CON1        equ	2319	;# 
  6654     091F                     ZCDCON          equ	2335	;# 
  6655     098F                     CMOUT           equ	2447	;# 
  6656     098F                     CMSTAT          equ	2447	;# 
  6657     0990                     CM1CON0         equ	2448	;# 
  6658     0991                     CM1CON1         equ	2449	;# 
  6659     0992                     CM1NCH          equ	2450	;# 
  6660     0993                     CM1PCH          equ	2451	;# 
  6661     0994                     CM2CON0         equ	2452	;# 
  6662     0995                     CM2CON1         equ	2453	;# 
  6663     0996                     CM2NCH          equ	2454	;# 
  6664     0997                     CM2PCH          equ	2455	;# 
  6665     1E0F                     CLCDATA         equ	7695	;# 
  6666     1E10                     CLC1CON         equ	7696	;# 
  6667     1E11                     CLC1POL         equ	7697	;# 
  6668     1E12                     CLC1SEL0        equ	7698	;# 
  6669     1E13                     CLC1SEL1        equ	7699	;# 
  6670     1E14                     CLC1SEL2        equ	7700	;# 
  6671     1E15                     CLC1SEL3        equ	7701	;# 
  6672     1E16                     CLC1GLS0        equ	7702	;# 
  6673     1E17                     CLC1GLS1        equ	7703	;# 
  6674     1E18                     CLC1GLS2        equ	7704	;# 
  6675     1E19                     CLC1GLS3        equ	7705	;# 
  6676     1E1A                     CLC2CON         equ	7706	;# 
  6677     1E1B                     CLC2POL         equ	7707	;# 
  6678     1E1C                     CLC2SEL0        equ	7708	;# 
  6679     1E1D                     CLC2SEL1        equ	7709	;# 
  6680     1E1E                     CLC2SEL2        equ	7710	;# 
  6681     1E1F                     CLC2SEL3        equ	7711	;# 
  6682     1E20                     CLC2GLS0        equ	7712	;# 
  6683     1E21                     CLC2GLS1        equ	7713	;# 
  6684     1E22                     CLC2GLS2        equ	7714	;# 
  6685     1E23                     CLC2GLS3        equ	7715	;# 
  6686     1E24                     CLC3CON         equ	7716	;# 
  6687     1E25                     CLC3POL         equ	7717	;# 
  6688     1E26                     CLC3SEL0        equ	7718	;# 
  6689     1E27                     CLC3SEL1        equ	7719	;# 
  6690     1E28                     CLC3SEL2        equ	7720	;# 
  6691     1E29                     CLC3SEL3        equ	7721	;# 
  6692     1E2A                     CLC3GLS0        equ	7722	;# 
  6693     1E2B                     CLC3GLS1        equ	7723	;# 
  6694     1E2C                     CLC3GLS2        equ	7724	;# 
  6695     1E2D                     CLC3GLS3        equ	7725	;# 
  6696     1E2E                     CLC4CON         equ	7726	;# 
  6697     1E2F                     CLC4POL         equ	7727	;# 
  6698     1E30                     CLC4SEL0        equ	7728	;# 
  6699     1E31                     CLC4SEL1        equ	7729	;# 
  6700     1E32                     CLC4SEL2        equ	7730	;# 
  6701     1E33                     CLC4SEL3        equ	7731	;# 
  6702     1E34                     CLC4GLS0        equ	7732	;# 
  6703     1E35                     CLC4GLS1        equ	7733	;# 
  6704     1E36                     CLC4GLS2        equ	7734	;# 
  6705     1E37                     CLC4GLS3        equ	7735	;# 
  6706     1E8F                     PPSLOCK         equ	7823	;# 
  6707     1E90                     INTPPS          equ	7824	;# 
  6708     1E91                     T0CKIPPS        equ	7825	;# 
  6709     1E92                     T1CKIPPS        equ	7826	;# 
  6710     1E93                     T1GPPS          equ	7827	;# 
  6711     1E94                     T3CKIPPS        equ	7828	;# 
  6712     1E95                     T3GPPS          equ	7829	;# 
  6713     1E96                     T5CKIPPS        equ	7830	;# 
  6714     1E97                     T5GPPS          equ	7831	;# 
  6715     1E9C                     T2INPPS         equ	7836	;# 
  6716     1E9D                     T4INPPS         equ	7837	;# 
  6717     1E9E                     T6INPPS         equ	7838	;# 
  6718     1EA1                     CCP1PPS         equ	7841	;# 
  6719     1EA2                     CCP2PPS         equ	7842	;# 
  6720     1EA3                     CCP3PPS         equ	7843	;# 
  6721     1EA4                     CCP4PPS         equ	7844	;# 
  6722     1EA9                     SMT1WINPPS      equ	7849	;# 
  6723     1EAA                     SMT1SIGPPS      equ	7850	;# 
  6724     1EB1                     CWG1PPS         equ	7857	;# 
  6725     1EB2                     CWG2PPS         equ	7858	;# 
  6726     1EB8                     MDCARLPPS       equ	7864	;# 
  6727     1EB9                     MDCARHPPS       equ	7865	;# 
  6728     1EBA                     MDSRCPPS        equ	7866	;# 
  6729     1EBB                     CLCIN0PPS       equ	7867	;# 
  6730     1EBC                     CLCIN1PPS       equ	7868	;# 
  6731     1EBD                     CLCIN2PPS       equ	7869	;# 
  6732     1EBE                     CLCIN3PPS       equ	7870	;# 
  6733     1EC3                     ADACTPPS        equ	7875	;# 
  6734     1EC5                     SSP1CLKPPS      equ	7877	;# 
  6735     1EC6                     SSP1DATPPS      equ	7878	;# 
  6736     1EC7                     SSP1SSPPS       equ	7879	;# 
  6737     1EC8                     SSP2CLKPPS      equ	7880	;# 
  6738     1EC9                     SSP2DATPPS      equ	7881	;# 
  6739     1ECA                     SSP2SSPPS       equ	7882	;# 
  6740     1ECB                     RX1PPS          equ	7883	;# 
  6741     1ECC                     CK1PPS          equ	7884	;# 
  6742     1F10                     RA0PPS          equ	7952	;# 
  6743     1F11                     RA1PPS          equ	7953	;# 
  6744     1F12                     RA2PPS          equ	7954	;# 
  6745     1F14                     RA4PPS          equ	7956	;# 
  6746     1F15                     RA5PPS          equ	7957	;# 
  6747     1F20                     RC0PPS          equ	7968	;# 
  6748     1F21                     RC1PPS          equ	7969	;# 
  6749     1F22                     RC2PPS          equ	7970	;# 
  6750     1F23                     RC3PPS          equ	7971	;# 
  6751     1F24                     RC4PPS          equ	7972	;# 
  6752     1F25                     RC5PPS          equ	7973	;# 
  6753     1F38                     ANSELA          equ	7992	;# 
  6754     1F39                     WPUA            equ	7993	;# 
  6755     1F3A                     ODCONA          equ	7994	;# 
  6756     1F3B                     SLRCONA         equ	7995	;# 
  6757     1F3C                     INLVLA          equ	7996	;# 
  6758     1F3D                     IOCAP           equ	7997	;# 
  6759     1F3E                     IOCAN           equ	7998	;# 
  6760     1F3F                     IOCAF           equ	7999	;# 
  6761     1F4E                     ANSELC          equ	8014	;# 
  6762     1F4F                     WPUC            equ	8015	;# 
  6763     1F50                     ODCONC          equ	8016	;# 
  6764     1F51                     SLRCONC         equ	8017	;# 
  6765     1F52                     INLVLC          equ	8018	;# 
  6766     1F53                     IOCCP           equ	8019	;# 
  6767     1F54                     IOCCN           equ	8020	;# 
  6768     1F55                     IOCCF           equ	8021	;# 
  6769     1FE4                     STATUS_SHAD     equ	8164	;# 
  6770     1FE5                     WREG_SHAD       equ	8165	;# 
  6771     1FE6                     BSR_SHAD        equ	8166	;# 
  6772     1FE7                     PCLATH_SHAD     equ	8167	;# 
  6773     1FE8                     FSR0_SHAD       equ	8168	;# 
  6774     1FE8                     FSR0L_SHAD      equ	8168	;# 
  6775     1FE9                     FSR0H_SHAD      equ	8169	;# 
  6776     1FEA                     FSR1L_SHAD      equ	8170	;# 
  6777     1FEB                     FSR1H_SHAD      equ	8171	;# 
  6778     1FED                     STKPTR          equ	8173	;# 
  6779     1FEE                     TOSL            equ	8174	;# 
  6780     1FEF                     TOSH            equ	8175	;# 
  6781                           
  6782 ;; Function _EUSART1_DefaultFramingErrorHandler is unused but had its address taken
  6783     0000                     _EUSART1_DefaultFramingErrorHandler equ	0
  6784                           
  6785                           	psect	idataBANK0
  6786     0982                     __pidataBANK0:
  6787                           
  6788                           ;initializer for _status
  6789     0982  3435               	retlw	53
  6790     0983  340C               	retlw	12
  6791     0984  340C               	retlw	12
  6792     0985  34FE               	retlw	254
  6793     0986  3400               	retlw	0
  6794     0987  3401               	retlw	1
  6795     0988  3400               	retlw	0
  6796                           
  6797                           ;initializer for _measureTime
  6798     0989  3401               	retlw	1
  6799                           
  6800                           	psect	idataBANK1
  6801     0BDE                     __pidataBANK1:
  6802                           
  6803                           ;initializer for main@F11276
  6804     0BDE  3400               	retlw	0
  6805     0BDF  3400               	retlw	0
  6806     0BE0  3400               	retlw	0
  6807     0BE1  3400               	retlw	0
  6808     0BE2  3400               	retlw	0
  6809     0BE3  3400               	retlw	0
  6810     0BE4  3430               	retlw	48
  6811     0BE5  3430               	retlw	48
  6812     0BE6  3430               	retlw	48
  6813     0BE7  3430               	retlw	48
  6814     0BE8  3430               	retlw	48
  6815                           
  6816                           ;initializer for sendSensorData@F11244
  6817     0BE9  344C               	retlw	76
  6818     0BEA  343E               	retlw	62
  6819     0BEB  3400               	retlw	0
  6820     0BEC  3400               	retlw	0
  6821     0BED  3400               	retlw	0
  6822     0BEE  3400               	retlw	0
  6823     0BEF  3400               	retlw	0
  6824     0BF0  3400               	retlw	0
  6825                           
  6826                           ;initializer for sendSensorInfo@F11239
  6827     0BF1  344C               	retlw	76
  6828     0BF2  343E               	retlw	62
  6829     0BF3  3445               	retlw	69
  6830     0BF4  3450               	retlw	80
  6831     0BF5  3431               	retlw	49
  6832     0BF6  3430               	retlw	48
  6833     0BF7  3430               	retlw	48
  6834                           
  6835                           ;initializer for _status_prev
  6836     0BF8  3435               	retlw	53
  6837     0BF9  340C               	retlw	12
  6838     0BFA  340C               	retlw	12
  6839     0BFB  34FE               	retlw	254
  6840     0BFC  3400               	retlw	0
  6841     0BFD  3401               	retlw	1
  6842     0BFE  3400               	retlw	0
  6843                           
  6844                           	psect	idataBANK2
  6845     0F83                     __pidataBANK2:
  6846                           
  6847                           ;initializer for _battery
  6848     0F83  3445               	retlw	69
  6849     0F84  3442               	retlw	66
  6850     0F85  3431               	retlw	49
  6851     0F86  3430               	retlw	48
  6852     0F87  3431               	retlw	49
  6853     0F88  3431               	retlw	49
  6854     0F89  3430               	retlw	48
  6855     0F8A  3431               	retlw	49
  6856     0F8B  3441               	retlw	65
  6857     0F8C  3443               	retlw	67
  6858     0F8D  341C               	retlw	28
  6859     0F8E  3436               	retlw	54
  6860     0F8F  341A               	retlw	26
  6861     0F90  3400               	retlw	0
  6862     0F91  3400               	retlw	0
  6863     0F92  3400               	retlw	0
  6864     0F93  3400               	retlw	0
  6865     0F94  3400               	retlw	0
  6866     0F95  3400               	retlw	0
  6867     0F96  3400               	retlw	0
  6868     0F97  3400               	retlw	0
  6869     0F98  3400               	retlw	0
  6870     0F99  3400               	retlw	0
  6871     0F9A  3400               	retlw	0
  6872     0F9B  3400               	retlw	0
  6873     0F9C  3400               	retlw	0
  6874     0F9D  3400               	retlw	0
  6875     0F9E  3400               	retlw	0
  6876     0F9F  3400               	retlw	0
  6877     0FA0  3400               	retlw	0
  6878     0FA1  3400               	retlw	0
  6879     0FA2  34FF               	retlw	255
  6880     0FA3  347F               	retlw	127
  6881     0FA4  3400               	retlw	0
  6882     0FA5  3400               	retlw	0
  6883     0FA6  3400               	retlw	0
  6884     0FA7  3400               	retlw	0
  6885     0FA8  3400               	retlw	0
  6886     0FA9  3400               	retlw	0
  6887     0FAA  3400               	retlw	0
  6888     0FAB  3400               	retlw	0
  6889     0FAC  3400               	retlw	0
  6890     0FAD  3400               	retlw	0
  6891     0FAE  3400               	retlw	0
  6892     0FAF  3400               	retlw	0
  6893     0FB0  3400               	retlw	0
  6894     0FB1  3400               	retlw	0
  6895     0FB2  3400               	retlw	0
  6896     0FB3  3400               	retlw	0
  6897     0FB4  3400               	retlw	0
  6898     0FB5  3400               	retlw	0
  6899     0FB6  3400               	retlw	0
  6900     0FB7  3400               	retlw	0
  6901     0FB8  3400               	retlw	0
  6902     0FB9  34FF               	retlw	255
  6903     0FBA  347F               	retlw	127
  6904     0FBB  3400               	retlw	0
  6905     0FBC  3400               	retlw	0
  6906     0FBD  3400               	retlw	0
  6907                           
  6908                           	psect	idataBANK3
  6909     0F48                     __pidataBANK3:
  6910                           
  6911                           ;initializer for _panel
  6912     0F48  3445               	retlw	69
  6913     0F49  3450               	retlw	80
  6914     0F4A  3431               	retlw	49
  6915     0F4B  3430               	retlw	48
  6916     0F4C  3430               	retlw	48
  6917     0F4D  3431               	retlw	49
  6918     0F4E  3430               	retlw	48
  6919     0F4F  3430               	retlw	48
  6920     0F50  3440               	retlw	64
  6921     0F51  3443               	retlw	67
  6922     0F52  343C               	retlw	60
  6923     0F53  3436               	retlw	54
  6924     0F54  341A               	retlw	26
  6925     0F55  3400               	retlw	0
  6926     0F56  3400               	retlw	0
  6927     0F57  3400               	retlw	0
  6928     0F58  3400               	retlw	0
  6929     0F59  3400               	retlw	0
  6930     0F5A  3400               	retlw	0
  6931     0F5B  3400               	retlw	0
  6932     0F5C  3400               	retlw	0
  6933     0F5D  3400               	retlw	0
  6934     0F5E  3400               	retlw	0
  6935     0F5F  3400               	retlw	0
  6936     0F60  3400               	retlw	0
  6937     0F61  3400               	retlw	0
  6938     0F62  3400               	retlw	0
  6939     0F63  3400               	retlw	0
  6940     0F64  3400               	retlw	0
  6941     0F65  3400               	retlw	0
  6942     0F66  3400               	retlw	0
  6943     0F67  34FF               	retlw	255
  6944     0F68  347F               	retlw	127
  6945     0F69  3400               	retlw	0
  6946     0F6A  3400               	retlw	0
  6947     0F6B  3400               	retlw	0
  6948     0F6C  3400               	retlw	0
  6949     0F6D  3400               	retlw	0
  6950     0F6E  3400               	retlw	0
  6951     0F6F  3400               	retlw	0
  6952     0F70  3400               	retlw	0
  6953     0F71  3400               	retlw	0
  6954     0F72  3400               	retlw	0
  6955     0F73  3400               	retlw	0
  6956     0F74  3400               	retlw	0
  6957     0F75  3400               	retlw	0
  6958     0F76  3400               	retlw	0
  6959     0F77  3400               	retlw	0
  6960     0F78  3400               	retlw	0
  6961     0F79  3400               	retlw	0
  6962     0F7A  3400               	retlw	0
  6963     0F7B  3400               	retlw	0
  6964     0F7C  3400               	retlw	0
  6965     0F7D  3400               	retlw	0
  6966     0F7E  34FF               	retlw	255
  6967     0F7F  347F               	retlw	127
  6968     0F80  3400               	retlw	0
  6969     0F81  3400               	retlw	0
  6970     0F82  3400               	retlw	0
  6971                           
  6972                           	psect	idataBANK4
  6973     0F0D                     __pidataBANK4:
  6974                           
  6975                           ;initializer for _cons
  6976     0F0D  3445               	retlw	69
  6977     0F0E  3443               	retlw	67
  6978     0F0F  3431               	retlw	49
  6979     0F10  3430               	retlw	48
  6980     0F11  3432               	retlw	50
  6981     0F12  3431               	retlw	49
  6982     0F13  3430               	retlw	48
  6983     0F14  3432               	retlw	50
  6984     0F15  3442               	retlw	66
  6985     0F16  3443               	retlw	67
  6986     0F17  341C               	retlw	28
  6987     0F18  3436               	retlw	54
  6988     0F19  341A               	retlw	26
  6989     0F1A  3400               	retlw	0
  6990     0F1B  3400               	retlw	0
  6991     0F1C  3400               	retlw	0
  6992     0F1D  3400               	retlw	0
  6993     0F1E  3400               	retlw	0
  6994     0F1F  3400               	retlw	0
  6995     0F20  3400               	retlw	0
  6996     0F21  3400               	retlw	0
  6997     0F22  3400               	retlw	0
  6998     0F23  3400               	retlw	0
  6999     0F24  3400               	retlw	0
  7000     0F25  3400               	retlw	0
  7001     0F26  3400               	retlw	0
  7002     0F27  3400               	retlw	0
  7003     0F28  3400               	retlw	0
  7004     0F29  3400               	retlw	0
  7005     0F2A  3400               	retlw	0
  7006     0F2B  3400               	retlw	0
  7007     0F2C  34FF               	retlw	255
  7008     0F2D  347F               	retlw	127
  7009     0F2E  3400               	retlw	0
  7010     0F2F  3400               	retlw	0
  7011     0F30  3400               	retlw	0
  7012     0F31  3400               	retlw	0
  7013     0F32  3400               	retlw	0
  7014     0F33  3400               	retlw	0
  7015     0F34  3400               	retlw	0
  7016     0F35  3400               	retlw	0
  7017     0F36  3400               	retlw	0
  7018     0F37  3400               	retlw	0
  7019     0F38  3400               	retlw	0
  7020     0F39  3400               	retlw	0
  7021     0F3A  3400               	retlw	0
  7022     0F3B  3400               	retlw	0
  7023     0F3C  3400               	retlw	0
  7024     0F3D  3400               	retlw	0
  7025     0F3E  3400               	retlw	0
  7026     0F3F  3400               	retlw	0
  7027     0F40  3400               	retlw	0
  7028     0F41  3400               	retlw	0
  7029     0F42  3400               	retlw	0
  7030     0F43  34FF               	retlw	255
  7031     0F44  347F               	retlw	127
  7032     0F45  3400               	retlw	0
  7033     0F46  3400               	retlw	0
  7034     0F47  3400               	retlw	0
  7035                           
  7036                           	psect	stringtext1
  7037     1000                     __pstringtext1:
  7038     1000                     _fsmStateTable:
  7039     1000  341F               	retlw	low _I2C1_DO_IDLE
  7040     1001  3409               	retlw	high _I2C1_DO_IDLE
  7041     1002  347A               	retlw	low _I2C1_DO_SEND_ADR_READ
  7042     1003  3409               	retlw	high _I2C1_DO_SEND_ADR_READ
  7043     1004  346B               	retlw	low _I2C1_DO_SEND_ADR_WRITE
  7044     1005  3409               	retlw	high _I2C1_DO_SEND_ADR_WRITE
  7045     1006  3443               	retlw	low _I2C1_DO_TX
  7046     1007  3407               	retlw	high _I2C1_DO_TX
  7047     1008  34BE               	retlw	low _I2C1_DO_RX
  7048     1009  340F               	retlw	high _I2C1_DO_RX
  7049     100A  3459               	retlw	low _I2C1_DO_RCEN
  7050     100B  3409               	retlw	high _I2C1_DO_RCEN
  7051     100C  3415               	retlw	low _I2C1_DO_TX_EMPTY
  7052     100D  340D               	retlw	high _I2C1_DO_TX_EMPTY
  7053     100E  34E8               	retlw	low _I2C1_DO_SEND_RESTART_READ
  7054     100F  3408               	retlw	high _I2C1_DO_SEND_RESTART_READ
  7055     1010  34EC               	retlw	low _I2C1_DO_SEND_RESTART_WRITE
  7056     1011  3408               	retlw	high _I2C1_DO_SEND_RESTART_WRITE
  7057     1012  34F0               	retlw	low _I2C1_DO_SEND_RESTART
  7058     1013  3408               	retlw	high _I2C1_DO_SEND_RESTART
  7059     1014  34F4               	retlw	low _I2C1_DO_SEND_STOP
  7060     1015  3408               	retlw	high _I2C1_DO_SEND_STOP
  7061     1016  34F8               	retlw	low _I2C1_DO_RX_ACK
  7062     1017  3408               	retlw	high _I2C1_DO_RX_ACK
  7063     1018  34FC               	retlw	low _I2C1_DO_RX_NACK_STOP
  7064     1019  3408               	retlw	high _I2C1_DO_RX_NACK_STOP
  7065     101A  3400               	retlw	low _I2C1_DO_RX_NACK_RESTART
  7066     101B  3409               	retlw	high _I2C1_DO_RX_NACK_RESTART
  7067     101C  3424               	retlw	low _I2C1_DO_RESET
  7068     101D  3409               	retlw	high _I2C1_DO_RESET
  7069     101E  34C2               	retlw	low _I2C1_DO_ADDRESS_NACK
  7070     101F  340C               	retlw	high _I2C1_DO_ADDRESS_NACK
  7071     1020                     __end_of_fsmStateTable:
  7072                           
  7073                           	psect	nvBANK0
  7074     005E                     __pnvBANK0:
  7075     005E                     _TMR0_InterruptHandler:
  7076     005E                     	ds	2
  7077     0060                     _TMR4_InterruptHandler:
  7078     0060                     	ds	2
  7079     0062                     _TMR2_InterruptHandler:
  7080     0062                     	ds	2
  7081                           
  7082                           	psect	nvBANK1
  7083     00E7                     __pnvBANK1:
  7084     00E7                     _EUSART1_ErrorHandler:
  7085     00E7                     	ds	2
  7086     00E9                     _EUSART1_OverrunErrorHandler:
  7087     00E9                     	ds	2
  7088     00EB                     _EUSART1_FramingErrorHandler:
  7089     00EB                     	ds	2
  7090     00ED                     _EUSART1_RxDefaultInterruptHandler:
  7091     00ED                     	ds	2
  7092     0018                     _LATAbits       set	24
  7093     000B                     _INTCONbits     set	11
  7094     0014                     _TRISC          set	20
  7095     0012                     _TRISA          set	18
  7096     001A                     _LATC           set	26
  7097     0018                     _LATA           set	24
  7098     001A                     _LATCbits       set	26
  7099     0119                     _RC1REG         set	281
  7100     011D                     _RC1STAbits     set	285
  7101     011A                     _TX1REG         set	282
  7102     011E                     _TX1STAbits     set	286
  7103     011C                     _SP1BRGH        set	284
  7104     011B                     _SP1BRGL        set	283
  7105     011E                     _TX1STA         set	286
  7106     011D                     _RC1STA         set	285
  7107     011F                     _BAUD1CON       set	287
  7108     0191                     _SSP1CON2bits   set	401
  7109     018C                     _SSP1BUF        set	396
  7110     0190                     _SSP1CON1bits   set	400
  7111     018D                     _SSP1ADD        set	397
  7112     0191                     _SSP1CON2       set	401
  7113     0190                     _SSP1CON1       set	400
  7114     018F                     _SSP1STAT       set	399
  7115     0294                     _T4CONbits      set	660
  7116     0294                     _T4CON          set	660
  7117     0292                     _T4TMR          set	658
  7118     0293                     _T4PR           set	659
  7119     0297                     _T4RST          set	663
  7120     0295                     _T4HLT          set	661
  7121     0296                     _T4CLKCON       set	662
  7122     028E                     _T2CONbits      set	654
  7123     028E                     _T2CON          set	654
  7124     028C                     _T2TMR          set	652
  7125     028D                     _T2PR           set	653
  7126     0291                     _T2RST          set	657
  7127     028F                     _T2HLT          set	655
  7128     0290                     _T2CLKCON       set	656
  7129     059E                     _T0CON0         set	1438
  7130     059C                     _TMR0L          set	1436
  7131     059D                     _TMR0H          set	1437
  7132     059F                     _T0CON1         set	1439
  7133     0710                     _PIR4bits       set	1808
  7134     071A                     _PIE4bits       set	1818
  7135     070E                     _PIR2bits       set	1806
  7136     0718                     _PIE2bits       set	1816
  7137     070C                     _PIR0bits       set	1804
  7138     0716                     _PIE0bits       set	1814
  7139     070F                     _PIR3bits       set	1807
  7140     0719                     _PIE3bits       set	1817
  7141     079D                     _PMD7           set	1949
  7142     079C                     _PMD6           set	1948
  7143     079B                     _PMD5           set	1947
  7144     079A                     _PMD4           set	1946
  7145     0799                     _PMD3           set	1945
  7146     0798                     _PMD2           set	1944
  7147     0797                     _PMD1           set	1943
  7148     0796                     _PMD0           set	1942
  7149     088C                     _CPUDOZE        set	2188
  7150     0892                     _OSCTUNE        set	2194
  7151     0893                     _OSCFRQ         set	2195
  7152     0891                     _OSCEN          set	2193
  7153     088F                     _OSCCON3        set	2191
  7154     088D                     _OSCCON1        set	2189
  7155     090F                     _DAC1CON1       set	2319
  7156     090E                     _DAC1CON0       set	2318
  7157     0990                     _CM1CON0bits    set	2448
  7158     0993                     _CM1PCH         set	2451
  7159     0992                     _CM1NCH         set	2450
  7160     0991                     _CM1CON1        set	2449
  7161     0990                     _CM1CON0        set	2448
  7162     1ECB                     _RX1PPS         set	7883
  7163     1EC6                     _SSP1DATPPS     set	7878
  7164     1EC5                     _SSP1CLKPPS     set	7877
  7165     1F24                     _RC4PPS         set	7972
  7166     1F21                     _RC1PPS         set	7969
  7167     1F20                     _RC0PPS         set	7968
  7168     1F52                     _INLVLC         set	8018
  7169     1F3C                     _INLVLA         set	7996
  7170     1F51                     _SLRCONC        set	8017
  7171     1F3B                     _SLRCONA        set	7995
  7172     1F50                     _ODCONC         set	8016
  7173     1F3A                     _ODCONA         set	7994
  7174     1F4F                     _WPUC           set	8015
  7175     1F39                     _WPUA           set	7993
  7176     1F38                     _ANSELA         set	7992
  7177     1F4E                     _ANSELC         set	8014
  7178                           
  7179                           	psect	cinit
  7180     0032                     start_initialization:	
  7181                           ; #config settings
  7182                           
  7183     0032                     __initialization:
  7184                           
  7185                           ; Initialize objects allocated to BANK0
  7186     0032  3082               	movlw	low __pidataBANK0
  7187     0033  0084               	movwf	4
  7188     0034  3089               	movlw	(high __pidataBANK0)| (0+128)
  7189     0035  0085               	movwf	5
  7190     0036  3056               	movlw	low __pdataBANK0
  7191     0037  0086               	movwf	6
  7192     0038  3000               	movlw	high __pdataBANK0
  7193     0039  0087               	movwf	7
  7194     003A  3008               	movlw	8
  7195     003B  3189  2165  3180   	fcall	init_ram
  7196                           
  7197                           ; Initialize objects allocated to BANK1
  7198     003E  30DE               	movlw	low __pidataBANK1
  7199     003F  0084               	movwf	4
  7200     0040  308B               	movlw	(high __pidataBANK1)| (0+128)
  7201     0041  0085               	movwf	5
  7202     0042  30C6               	movlw	low __pdataBANK1
  7203     0043  0086               	movwf	6
  7204     0044  3000               	movlw	high __pdataBANK1
  7205     0045  0087               	movwf	7
  7206     0046  3021               	movlw	33
  7207     0047  3189  2165  3180   	fcall	init_ram
  7208                           
  7209                           ; Initialize objects allocated to BANK2
  7210     004A  3083               	movlw	low __pidataBANK2
  7211     004B  0084               	movwf	4
  7212     004C  308F               	movlw	(high __pidataBANK2)| (0+128)
  7213     004D  0085               	movwf	5
  7214     004E  3020               	movlw	low __pdataBANK2
  7215     004F  0086               	movwf	6
  7216     0050  3001               	movlw	high __pdataBANK2
  7217     0051  0087               	movwf	7
  7218     0052  303B               	movlw	59
  7219     0053  3189  2165  3180   	fcall	init_ram
  7220                           
  7221                           ; Initialize objects allocated to BANK3
  7222     0056  3048               	movlw	low __pidataBANK3
  7223     0057  0084               	movwf	4
  7224     0058  308F               	movlw	(high __pidataBANK3)| (0+128)
  7225     0059  0085               	movwf	5
  7226     005A  30A0               	movlw	low __pdataBANK3
  7227     005B  0086               	movwf	6
  7228     005C  3001               	movlw	high __pdataBANK3
  7229     005D  0087               	movwf	7
  7230     005E  303B               	movlw	59
  7231     005F  3189  2165  3180   	fcall	init_ram
  7232                           
  7233                           ; Initialize objects allocated to BANK4
  7234     0062  300D               	movlw	low __pidataBANK4
  7235     0063  0084               	movwf	4
  7236     0064  308F               	movlw	(high __pidataBANK4)| (0+128)
  7237     0065  0085               	movwf	5
  7238     0066  3020               	movlw	low __pdataBANK4
  7239     0067  0086               	movwf	6
  7240     0068  3002               	movlw	high __pdataBANK4
  7241     0069  0087               	movwf	7
  7242     006A  303B               	movlw	59
  7243     006B  3189  2165  3180   	fcall	init_ram
  7244                           
  7245                           ; Clear objects allocated to COMMON
  7246     006E  01F6               	clrf	__pbssCOMMON& (0+127)
  7247     006F  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  7248     0070  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  7249     0071  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  7250                           
  7251                           ; Clear objects allocated to BANK0
  7252     0072  01E4               	clrf	__pbssBANK0& (0+127)
  7253     0073  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  7254     0074  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  7255                           
  7256                           ; Clear objects allocated to BANK1
  7257     0075  30A0               	movlw	low __pbssBANK1
  7258     0076  0084               	movwf	4
  7259     0077  3000               	movlw	high __pbssBANK1
  7260     0078  0085               	movwf	5
  7261     0079  3026               	movlw	38
  7262     007A  3189  215F  3180   	fcall	clear_ram0
  7263                           
  7264                           ; Clear objects allocated to BANK5
  7265     007D  30A0               	movlw	low __pbssBANK5
  7266     007E  0084               	movwf	4
  7267     007F  3002               	movlw	high __pbssBANK5
  7268     0080  0085               	movwf	5
  7269     0081  3040               	movlw	64
  7270     0082  3189  215F  3180   	fcall	clear_ram0
  7271                           
  7272                           ; Clear objects allocated to BANK6
  7273     0085  3020               	movlw	low __pbssBANK6
  7274     0086  0084               	movwf	4
  7275     0087  3003               	movlw	high __pbssBANK6
  7276     0088  0085               	movwf	5
  7277     0089  3040               	movlw	64
  7278     008A  3189  215F         	fcall	clear_ram0
  7279     008C                     end_of_initialization:	
  7280                           ;End of C runtime variable initialization code
  7281                           
  7282     008C                     __end_of__initialization:
  7283     008C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  7284     008D  0140               	movlb	0
  7285     008E  3180  2890         	ljmp	_main	;jump to C main() function
  7286                           
  7287                           	psect	bssCOMMON
  7288     0076                     __pbssCOMMON:
  7289     0076                     _eusart1RxLastError:
  7290     0076                     	ds	1
  7291     0077                     _eusart1RxCount:
  7292     0077                     	ds	1
  7293     0078                     _eusart1RxTail:
  7294     0078                     	ds	1
  7295     0079                     _eusart1RxHead:
  7296     0079                     	ds	1
  7297                           
  7298                           	psect	bssBANK0
  7299     0064                     __pbssBANK0:
  7300     0064                     _timer0ReloadVal16bit:
  7301     0064                     	ds	2
  7302     0066                     _eusart1PacketFinish:
  7303     0066                     	ds	1
  7304                           
  7305                           	psect	dataBANK0
  7306     0056                     __pdataBANK0:
  7307     0056                     _status:
  7308     0056                     	ds	7
  7309     005D                     _measureTime:
  7310     005D                     	ds	1
  7311                           
  7312                           	psect	bssBANK1
  7313     00A0                     __pbssBANK1:
  7314     00A0                     _I2C1_Status:
  7315     00A0                     	ds	30
  7316     00BE                     _BuffReg:
  7317     00BE                     	ds	8
  7318                           
  7319                           	psect	dataBANK1
  7320     00C6                     __pdataBANK1:
  7321     00C6                     main@F11276:
  7322     00C6                     	ds	11
  7323     00D1                     sendSensorData@F11244:
  7324     00D1                     	ds	8
  7325     00D9                     sendSensorInfo@F11239:
  7326     00D9                     	ds	7
  7327     00E0                     _status_prev:
  7328     00E0                     	ds	7
  7329                           
  7330                           	psect	dataBANK2
  7331     0120                     __pdataBANK2:
  7332     0120                     _battery:
  7333     0120                     	ds	59
  7334                           
  7335                           	psect	dataBANK3
  7336     01A0                     __pdataBANK3:
  7337     01A0                     _panel:
  7338     01A0                     	ds	59
  7339                           
  7340                           	psect	dataBANK4
  7341     0220                     __pdataBANK4:
  7342     0220                     _cons:
  7343     0220                     	ds	59
  7344                           
  7345                           	psect	bssBANK5
  7346     02A0                     __pbssBANK5:
  7347     02A0                     _eusart1RxBuffer:
  7348     02A0                     	ds	64
  7349                           
  7350                           	psect	bssBANK6
  7351     0320                     __pbssBANK6:
  7352     0320                     _eusart1RxStatusBuffer:
  7353     0320                     	ds	64
  7354                           
  7355                           	psect	inittext
  7356     0965                     init_ram:
  7357     0965  00FE               	movwf	126
  7358     0966                     initloop:
  7359     0966  0012               	moviw fsr0++
  7360     0967  001E               	movwi fsr1++
  7361     0968  0BFE               	decfsz	126,f
  7362     0969  2966               	goto	initloop
  7363     096A  3400               	retlw	0
  7364                           
  7365                           	psect	clrtext
  7366     095F                     clear_ram0:	
  7367                           ;	Called with FSR0 containing the base address, and
  7368                           ;	WREG with the size to clear
  7369                           
  7370     095F  0064               	clrwdt	;clear the watchdog before getting into this loop
  7371     0960                     clrloop0:
  7372     0960  0180               	clrf	0	;clear RAM location pointed to by FSR
  7373     0961  3101               	addfsr 0,1
  7374     0962  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  7375     0963  2960               	goto	clrloop0	;have we reached the end yet?
  7376     0964  3400               	retlw	0	;all done for this memory range, return
  7377                           
  7378                           	psect	cstackBANK2
  7379     015B                     __pcstackBANK2:
  7380     015B                     main@packet:
  7381                           
  7382                           ; 11 bytes @ 0x0
  7383     015B                     	ds	11
  7384                           
  7385                           	psect	cstackCOMMON
  7386     0070                     __pcstackCOMMON:
  7387     0070                     ?_I2C1_Open:
  7388     0070                     ?_I2C1_MasterWrite:	
  7389                           ; 1 bytes @ 0x0
  7390                           
  7391     0070                     ?_I2C1_Close:	
  7392                           ; 1 bytes @ 0x0
  7393                           
  7394     0070                     ?_I2C1_MasterRead:	
  7395                           ; 1 bytes @ 0x0
  7396                           
  7397     0070                     ?_EUSART1_Receive_ISR:	
  7398                           ; 1 bytes @ 0x0
  7399                           
  7400     0070                     ?_EUSART1_DefaultOverrunErrorHandler:	
  7401                           ; 1 bytes @ 0x0
  7402                           
  7403     0070                     ?_EUSART1_DefaultErrorHandler:	
  7404                           ; 1 bytes @ 0x0
  7405                           
  7406     0070                     ?_EUSART1_RxDataHandler:	
  7407                           ; 1 bytes @ 0x0
  7408                           
  7409     0070                     ?_PMD_Initialize:	
  7410                           ; 1 bytes @ 0x0
  7411                           
  7412     0070                     ?_I2C1_Initialize:	
  7413                           ; 1 bytes @ 0x0
  7414                           
  7415     0070                     ?_PIN_MANAGER_Initialize:	
  7416                           ; 1 bytes @ 0x0
  7417                           
  7418     0070                     ?_OSCILLATOR_Initialize:	
  7419                           ; 1 bytes @ 0x0
  7420                           
  7421     0070                     ?_CMP1_Initialize:	
  7422                           ; 1 bytes @ 0x0
  7423                           
  7424     0070                     ?_TMR4_Initialize:	
  7425                           ; 1 bytes @ 0x0
  7426                           
  7427     0070                     ?_DAC1_Initialize:	
  7428                           ; 1 bytes @ 0x0
  7429                           
  7430     0070                     ?_TMR2_Initialize:	
  7431                           ; 1 bytes @ 0x0
  7432                           
  7433     0070                     ?_TMR0_Initialize:	
  7434                           ; 1 bytes @ 0x0
  7435                           
  7436     0070                     ?_I2C1_DO_IDLE:	
  7437                           ; 1 bytes @ 0x0
  7438                           
  7439     0070                     ?_I2C1_DO_SEND_ADR_READ:	
  7440                           ; 1 bytes @ 0x0
  7441                           
  7442     0070                     ?_I2C1_DO_SEND_ADR_WRITE:	
  7443                           ; 1 bytes @ 0x0
  7444                           
  7445     0070                     ?_I2C1_DO_TX:	
  7446                           ; 1 bytes @ 0x0
  7447                           
  7448     0070                     ?_I2C1_DO_RX:	
  7449                           ; 1 bytes @ 0x0
  7450                           
  7451     0070                     ?_I2C1_DO_RCEN:	
  7452                           ; 1 bytes @ 0x0
  7453                           
  7454     0070                     ?_I2C1_DO_TX_EMPTY:	
  7455                           ; 1 bytes @ 0x0
  7456                           
  7457     0070                     ?_I2C1_DO_SEND_RESTART_READ:	
  7458                           ; 1 bytes @ 0x0
  7459                           
  7460     0070                     ?_I2C1_DO_SEND_RESTART_WRITE:	
  7461                           ; 1 bytes @ 0x0
  7462                           
  7463     0070                     ?_I2C1_DO_SEND_RESTART:	
  7464                           ; 1 bytes @ 0x0
  7465                           
  7466     0070                     ?_I2C1_DO_SEND_STOP:	
  7467                           ; 1 bytes @ 0x0
  7468                           
  7469     0070                     ?_I2C1_DO_RX_ACK:	
  7470                           ; 1 bytes @ 0x0
  7471                           
  7472     0070                     ?_I2C1_DO_RX_NACK_STOP:	
  7473                           ; 1 bytes @ 0x0
  7474                           
  7475     0070                     ?_I2C1_DO_RX_NACK_RESTART:	
  7476                           ; 1 bytes @ 0x0
  7477                           
  7478     0070                     ?_I2C1_DO_RESET:	
  7479                           ; 1 bytes @ 0x0
  7480                           
  7481     0070                     ?_I2C1_DO_ADDRESS_NACK:	
  7482                           ; 1 bytes @ 0x0
  7483                           
  7484     0070                     ?_I2C1_MasterClearIrq:	
  7485                           ; 1 bytes @ 0x0
  7486                           
  7487     0070                     ?_I2C1_MasterOpen:	
  7488                           ; 1 bytes @ 0x0
  7489                           
  7490     0070                     ?_I2C1_MasterDisableIrq:	
  7491                           ; 1 bytes @ 0x0
  7492                           
  7493     0070                     ?_I2C1_MasterClose:	
  7494                           ; 1 bytes @ 0x0
  7495                           
  7496     0070                     ?_I2C1_MasterStart:	
  7497                           ; 1 bytes @ 0x0
  7498                           
  7499     0070                     ?_I2C1_Poller:	
  7500                           ; 1 bytes @ 0x0
  7501                           
  7502     0070                     ?_I2C1_MasterWaitForEvent:	
  7503                           ; 1 bytes @ 0x0
  7504                           
  7505     0070                     ?_I2C1_MasterFsm:	
  7506                           ; 1 bytes @ 0x0
  7507                           
  7508     0070                     ?_I2C1_MasterIsNack:	
  7509                           ; 1 bytes @ 0x0
  7510                           
  7511     0070                     ?_I2C1_MasterSendTxData:	
  7512                           ; 1 bytes @ 0x0
  7513                           
  7514     0070                     ?_I2C1_MasterGetRxData:	
  7515                           ; 1 bytes @ 0x0
  7516                           
  7517     0070                     ?_I2C1_MasterSendAck:	
  7518                           ; 1 bytes @ 0x0
  7519                           
  7520     0070                     ?_I2C1_MasterStartRx:	
  7521                           ; 1 bytes @ 0x0
  7522                           
  7523     0070                     ?_I2C1_MasterSetIrq:	
  7524                           ; 1 bytes @ 0x0
  7525                           
  7526     0070                     ?_I2C1_MasterEnableRestart:	
  7527                           ; 1 bytes @ 0x0
  7528                           
  7529     0070                     ?_I2C1_MasterStop:	
  7530                           ; 1 bytes @ 0x0
  7531                           
  7532     0070                     ?_I2C1_MasterSendNack:	
  7533                           ; 1 bytes @ 0x0
  7534                           
  7535     0070                     ?_TMR0_ISR:	
  7536                           ; 1 bytes @ 0x0
  7537                           
  7538     0070                     ?_CMP1_ISR:	
  7539                           ; 1 bytes @ 0x0
  7540                           
  7541     0070                     ?_TMR4_ISR:	
  7542                           ; 1 bytes @ 0x0
  7543                           
  7544     0070                     ?_TMR2_ISR:	
  7545                           ; 1 bytes @ 0x0
  7546                           
  7547     0070                     ?_TMR2_DefaultInterruptHandler:	
  7548                           ; 1 bytes @ 0x0
  7549                           
  7550     0070                     ?_TMR4_DefaultInterruptHandler:	
  7551                           ; 1 bytes @ 0x0
  7552                           
  7553     0070                     ?_TMR0_DefaultInterruptHandler:	
  7554                           ; 1 bytes @ 0x0
  7555                           
  7556     0070                     ?_TxDeviceDisable:	
  7557                           ; 1 bytes @ 0x0
  7558                           
  7559     0070                     ?_TxDeviceEnable:	
  7560                           ; 1 bytes @ 0x0
  7561                           
  7562     0070                     ?_EUSART1_Initialize:	
  7563                           ; 1 bytes @ 0x0
  7564                           
  7565     0070                     ?_EUSART1_is_tx_ready:	
  7566                           ; 1 bytes @ 0x0
  7567                           
  7568     0070                     ?_EUSART1_is_tx_done:	
  7569                           ; 1 bytes @ 0x0
  7570                           
  7571     0070                     ?_EUSART1_Read:	
  7572                           ; 1 bytes @ 0x0
  7573                           
  7574     0070                     ?_EUSART1_Write:	
  7575                           ; 1 bytes @ 0x0
  7576                           
  7577     0070                     ?_SYSTEM_Initialize:	
  7578                           ; 1 bytes @ 0x0
  7579                           
  7580     0070                     ?_I2C1_MasterOperation:	
  7581                           ; 1 bytes @ 0x0
  7582                           
  7583     0070                     ?_INTERRUPT_InterruptManager:	
  7584                           ; 1 bytes @ 0x0
  7585                           
  7586     0070                     ?_CMP1_GetOutputStatus:	
  7587                           ; 1 bytes @ 0x0
  7588                           
  7589     0070                     ?_TMR2_Start:	
  7590                           ; 1 bytes @ 0x0
  7591                           
  7592     0070                     ?_TMR2_Stop:	
  7593                           ; 1 bytes @ 0x0
  7594                           
  7595     0070                     ?_TMR4_Start:	
  7596                           ; 1 bytes @ 0x0
  7597                           
  7598     0070                     ?_TMR4_Stop:	
  7599                           ; 1 bytes @ 0x0
  7600                           
  7601     0070                     ?_TMR0_Reload:	
  7602                           ; 1 bytes @ 0x0
  7603                           
  7604     0070                     ?_main:	
  7605                           ; 1 bytes @ 0x0
  7606                           
  7607     0070                     ??_EUSART1_DefaultOverrunErrorHandler:	
  7608                           ; 1 bytes @ 0x0
  7609                           
  7610     0070                     ??_EUSART1_RxDataHandler:	
  7611                           ; 1 bytes @ 0x0
  7612                           
  7613     0070                     ??_TMR0_ISR:	
  7614                           ; 1 bytes @ 0x0
  7615                           
  7616     0070                     ??_CMP1_ISR:	
  7617                           ; 1 bytes @ 0x0
  7618                           
  7619     0070                     ??_TMR4_ISR:	
  7620                           ; 1 bytes @ 0x0
  7621                           
  7622     0070                     ??_TMR2_ISR:	
  7623                           ; 1 bytes @ 0x0
  7624                           
  7625     0070                     ??_TMR2_DefaultInterruptHandler:	
  7626                           ; 1 bytes @ 0x0
  7627                           
  7628     0070                     ??_TMR4_DefaultInterruptHandler:	
  7629                           ; 1 bytes @ 0x0
  7630                           
  7631     0070                     ??_TMR0_DefaultInterruptHandler:	
  7632                           ; 1 bytes @ 0x0
  7633                           
  7634     0070                     ??_CMP1_GetOutputStatus:	
  7635                           ; 1 bytes @ 0x0
  7636                           
  7637                           
  7638                           ; 1 bytes @ 0x0
  7639     0070                     	ds	2
  7640     0072                     EUSART1_RxDataHandler@t:
  7641                           
  7642                           ; 2 bytes @ 0x2
  7643     0072                     	ds	2
  7644     0074                     ?_EUSART1_SetRxInterruptHandler:
  7645     0074                     ?_EUSART1_SetFramingErrorHandler:	
  7646                           ; 1 bytes @ 0x4
  7647                           
  7648     0074                     ?_EUSART1_SetOverrunErrorHandler:	
  7649                           ; 1 bytes @ 0x4
  7650                           
  7651     0074                     ?_EUSART1_SetErrorHandler:	
  7652                           ; 1 bytes @ 0x4
  7653                           
  7654     0074                     ?_TMR2_SetInterruptHandler:	
  7655                           ; 1 bytes @ 0x4
  7656                           
  7657     0074                     ?_TMR4_SetInterruptHandler:	
  7658                           ; 1 bytes @ 0x4
  7659                           
  7660     0074                     ?_TMR0_SetInterruptHandler:	
  7661                           ; 1 bytes @ 0x4
  7662                           
  7663     0074                     ?_stringlen:	
  7664                           ; 1 bytes @ 0x4
  7665                           
  7666     0074                     ?_getMax:	
  7667                           ; 1 bytes @ 0x4
  7668                           
  7669     0074                     ?_getMin:	
  7670                           ; 1 bytes @ 0x4
  7671                           
  7672     0074                     _EUSART1_is_tx_ready$357:	
  7673                           ; 1 bytes @ 0x4
  7674                           
  7675     0074                     EUSART1_Read@readValue:	
  7676                           ; 1 bytes @ 0x4
  7677                           
  7678     0074                     EUSART1_Write@txData:	
  7679                           ; 1 bytes @ 0x4
  7680                           
  7681     0074                     I2C1_Open@address:	
  7682                           ; 1 bytes @ 0x4
  7683                           
  7684     0074                     I2C1_Close@returnValue:	
  7685                           ; 1 bytes @ 0x4
  7686                           
  7687     0074                     I2C1_MasterSendTxData@data:	
  7688                           ; 1 bytes @ 0x4
  7689                           
  7690     0074                     ___lwmod@counter:	
  7691                           ; 1 bytes @ 0x4
  7692                           
  7693     0074                     EUSART1_SetFramingErrorHandler@interruptHandler:	
  7694                           ; 1 bytes @ 0x4
  7695                           
  7696     0074                     EUSART1_SetOverrunErrorHandler@interruptHandler:	
  7697                           ; 2 bytes @ 0x4
  7698                           
  7699     0074                     EUSART1_SetErrorHandler@interruptHandler:	
  7700                           ; 2 bytes @ 0x4
  7701                           
  7702     0074                     EUSART1_SetRxInterruptHandler@interruptHandler:	
  7703                           ; 2 bytes @ 0x4
  7704                           
  7705     0074                     TMR2_SetInterruptHandler@InterruptHandler:	
  7706                           ; 2 bytes @ 0x4
  7707                           
  7708     0074                     TMR4_SetInterruptHandler@InterruptHandler:	
  7709                           ; 2 bytes @ 0x4
  7710                           
  7711     0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  7712                           ; 2 bytes @ 0x4
  7713                           
  7714     0074                     initRxBuffer@i:	
  7715                           ; 2 bytes @ 0x4
  7716                           
  7717     0074                     stringlen@str:	
  7718                           ; 2 bytes @ 0x4
  7719                           
  7720     0074                     getMax@data:	
  7721                           ; 2 bytes @ 0x4
  7722                           
  7723     0074                     getMin@data:	
  7724                           ; 2 bytes @ 0x4
  7725                           
  7726     0074                     ___wmul@product:	
  7727                           ; 2 bytes @ 0x4
  7728                           
  7729     0074                     ??_I2C1_Open:	
  7730                           ; 2 bytes @ 0x4
  7731                           
  7732     0074                     ??_I2C1_SetBuffer:	
  7733                           ; 1 bytes @ 0x4
  7734                           
  7735     0074                     ??_I2C1_Close:	
  7736                           ; 1 bytes @ 0x4
  7737                           
  7738     0074                     ??_EUSART1_Receive_ISR:	
  7739                           ; 1 bytes @ 0x4
  7740                           
  7741     0074                     ??_EUSART1_DefaultErrorHandler:	
  7742                           ; 1 bytes @ 0x4
  7743                           
  7744     0074                     ??_PMD_Initialize:	
  7745                           ; 1 bytes @ 0x4
  7746                           
  7747     0074                     ??_I2C1_Initialize:	
  7748                           ; 1 bytes @ 0x4
  7749                           
  7750     0074                     ??_PIN_MANAGER_Initialize:	
  7751                           ; 1 bytes @ 0x4
  7752                           
  7753     0074                     ??_OSCILLATOR_Initialize:	
  7754                           ; 1 bytes @ 0x4
  7755                           
  7756     0074                     ??_CMP1_Initialize:	
  7757                           ; 1 bytes @ 0x4
  7758                           
  7759     0074                     ??_DAC1_Initialize:	
  7760                           ; 1 bytes @ 0x4
  7761                           
  7762     0074                     ??_I2C1_DO_IDLE:	
  7763                           ; 1 bytes @ 0x4
  7764                           
  7765     0074                     ??_I2C1_DO_SEND_ADR_READ:	
  7766                           ; 1 bytes @ 0x4
  7767                           
  7768     0074                     ??_I2C1_DO_RCEN:	
  7769                           ; 1 bytes @ 0x4
  7770                           
  7771     0074                     ??_I2C1_DO_SEND_RESTART_READ:	
  7772                           ; 1 bytes @ 0x4
  7773                           
  7774     0074                     ??_I2C1_DO_SEND_RESTART_WRITE:	
  7775                           ; 1 bytes @ 0x4
  7776                           
  7777     0074                     ??_I2C1_DO_SEND_RESTART:	
  7778                           ; 1 bytes @ 0x4
  7779                           
  7780     0074                     ??_I2C1_DO_SEND_STOP:	
  7781                           ; 1 bytes @ 0x4
  7782                           
  7783     0074                     ??_I2C1_DO_RX_ACK:	
  7784                           ; 1 bytes @ 0x4
  7785                           
  7786     0074                     ??_I2C1_DO_RX_NACK_STOP:	
  7787                           ; 1 bytes @ 0x4
  7788                           
  7789     0074                     ??_I2C1_DO_RX_NACK_RESTART:	
  7790                           ; 1 bytes @ 0x4
  7791                           
  7792     0074                     ??_I2C1_DO_RESET:	
  7793                           ; 1 bytes @ 0x4
  7794                           
  7795     0074                     ??_I2C1_MasterClearIrq:	
  7796                           ; 1 bytes @ 0x4
  7797                           
  7798     0074                     ??_I2C1_MasterOpen:	
  7799                           ; 1 bytes @ 0x4
  7800                           
  7801     0074                     ??_I2C1_MasterDisableIrq:	
  7802                           ; 1 bytes @ 0x4
  7803                           
  7804     0074                     ??_I2C1_MasterClose:	
  7805                           ; 1 bytes @ 0x4
  7806                           
  7807     0074                     ??_I2C1_MasterStart:	
  7808                           ; 1 bytes @ 0x4
  7809                           
  7810     0074                     ??_I2C1_SetCallback:	
  7811                           ; 1 bytes @ 0x4
  7812                           
  7813     0074                     ??_I2C1_MasterWaitForEvent:	
  7814                           ; 1 bytes @ 0x4
  7815                           
  7816     0074                     ??_I2C1_MasterIsNack:	
  7817                           ; 1 bytes @ 0x4
  7818                           
  7819     0074                     ??_I2C1_MasterSendTxData:	
  7820                           ; 1 bytes @ 0x4
  7821                           
  7822     0074                     ??_I2C1_MasterGetRxData:	
  7823                           ; 1 bytes @ 0x4
  7824                           
  7825     0074                     ??_I2C1_MasterSendAck:	
  7826                           ; 1 bytes @ 0x4
  7827                           
  7828     0074                     ??_I2C1_MasterStartRx:	
  7829                           ; 1 bytes @ 0x4
  7830                           
  7831     0074                     ??_I2C1_MasterSetIrq:	
  7832                           ; 1 bytes @ 0x4
  7833                           
  7834     0074                     ??_I2C1_MasterEnableRestart:	
  7835                           ; 1 bytes @ 0x4
  7836                           
  7837     0074                     ??_I2C1_MasterStop:	
  7838                           ; 1 bytes @ 0x4
  7839                           
  7840     0074                     ??_I2C1_MasterSendNack:	
  7841                           ; 1 bytes @ 0x4
  7842                           
  7843     0074                     ??_TxDeviceDisable:	
  7844                           ; 1 bytes @ 0x4
  7845                           
  7846     0074                     ??_stringCompare:	
  7847                           ; 1 bytes @ 0x4
  7848                           
  7849     0074                     ??_TxDeviceEnable:	
  7850                           ; 1 bytes @ 0x4
  7851                           
  7852     0074                     ??_EUSART1_is_tx_ready:	
  7853                           ; 1 bytes @ 0x4
  7854                           
  7855     0074                     ??_EUSART1_is_tx_done:	
  7856                           ; 1 bytes @ 0x4
  7857                           
  7858     0074                     ??_EUSART1_Read:	
  7859                           ; 1 bytes @ 0x4
  7860                           
  7861     0074                     ??_EUSART1_Write:	
  7862                           ; 1 bytes @ 0x4
  7863                           
  7864     0074                     ??_INTERRUPT_InterruptManager:	
  7865                           ; 1 bytes @ 0x4
  7866                           
  7867     0074                     ??_TMR2_Start:	
  7868                           ; 1 bytes @ 0x4
  7869                           
  7870     0074                     ??_TMR2_Stop:	
  7871                           ; 1 bytes @ 0x4
  7872                           
  7873     0074                     ??_TMR4_Start:	
  7874                           ; 1 bytes @ 0x4
  7875                           
  7876     0074                     ??_TMR4_Stop:	
  7877                           ; 1 bytes @ 0x4
  7878                           
  7879     0074                     ??_TMR0_Reload:	
  7880                           ; 1 bytes @ 0x4
  7881                           
  7882     0074                     ??___wmul:	
  7883                           ; 1 bytes @ 0x4
  7884                           
  7885     0074                     ??___aldiv:	
  7886                           ; 1 bytes @ 0x4
  7887                           
  7888     0074                     ??___lwdiv:	
  7889                           ; 1 bytes @ 0x4
  7890                           
  7891     0074                     ??___lwmod:	
  7892                           ; 1 bytes @ 0x4
  7893                           
  7894                           
  7895                           ; 1 bytes @ 0x4
  7896     0074                     	ds	1
  7897     0075                     I2C1_Open@returnValue:
  7898     0075                     ??_I2C1_DO_SEND_ADR_WRITE:	
  7899                           ; 1 bytes @ 0x5
  7900                           
  7901     0075                     ??_receiveData:	
  7902                           ; 1 bytes @ 0x5
  7903                           
  7904     0075                     ??_int16ToString:	
  7905                           ; 1 bytes @ 0x5
  7906                           
  7907                           
  7908                           ; 1 bytes @ 0x5
  7909     0075                     	ds	1
  7910     0076                     ??_I2C1_SetDataCompleteCallback:
  7911     0076                     ??_rd1RegCompleteHandler:	
  7912                           ; 1 bytes @ 0x6
  7913                           
  7914     0076                     ??_I2C1_SetAddressNackCallback:	
  7915                           ; 1 bytes @ 0x6
  7916                           
  7917     0076                     ??_I2C1_MasterWrite:	
  7918                           ; 1 bytes @ 0x6
  7919                           
  7920     0076                     ??_rd2RegCompleteHandler:	
  7921                           ; 1 bytes @ 0x6
  7922                           
  7923     0076                     ??_wr1RegCompleteHandler:	
  7924                           ; 1 bytes @ 0x6
  7925                           
  7926     0076                     ??_wr2RegCompleteHandler:	
  7927                           ; 1 bytes @ 0x6
  7928                           
  7929     0076                     ??_I2C1_MasterRead:	
  7930                           ; 1 bytes @ 0x6
  7931                           
  7932     0076                     ??_rdBlkRegCompleteHandler:	
  7933                           ; 1 bytes @ 0x6
  7934                           
  7935     0076                     ??_EUSART1_SetRxInterruptHandler:	
  7936                           ; 1 bytes @ 0x6
  7937                           
  7938     0076                     ??_EUSART1_SetFramingErrorHandler:	
  7939                           ; 1 bytes @ 0x6
  7940                           
  7941     0076                     ??_EUSART1_SetOverrunErrorHandler:	
  7942                           ; 1 bytes @ 0x6
  7943                           
  7944     0076                     ??_EUSART1_SetErrorHandler:	
  7945                           ; 1 bytes @ 0x6
  7946                           
  7947     0076                     ??_TMR4_Initialize:	
  7948                           ; 1 bytes @ 0x6
  7949                           
  7950     0076                     ??_TMR2_Initialize:	
  7951                           ; 1 bytes @ 0x6
  7952                           
  7953     0076                     ??_TMR0_Initialize:	
  7954                           ; 1 bytes @ 0x6
  7955                           
  7956     0076                     ??_I2C1_CallbackReturnStop:	
  7957                           ; 1 bytes @ 0x6
  7958                           
  7959     0076                     ??_I2C1_CallbackReturnReset:	
  7960                           ; 1 bytes @ 0x6
  7961                           
  7962     0076                     ??_I2C1_Poller:	
  7963                           ; 1 bytes @ 0x6
  7964                           
  7965     0076                     ??_TMR2_SetInterruptHandler:	
  7966                           ; 1 bytes @ 0x6
  7967                           
  7968     0076                     ??_TMR4_SetInterruptHandler:	
  7969                           ; 1 bytes @ 0x6
  7970                           
  7971     0076                     ??_TMR0_SetInterruptHandler:	
  7972                           ; 1 bytes @ 0x6
  7973                           
  7974     0076                     ??_getMetrics:	
  7975                           ; 1 bytes @ 0x6
  7976                           
  7977     0076                     ??_stringlen:	
  7978                           ; 1 bytes @ 0x6
  7979                           
  7980     0076                     ??_I2C1_WriteNBytes:	
  7981                           ; 1 bytes @ 0x6
  7982                           
  7983     0076                     ??_I2C1_ReadNBytes:	
  7984                           ; 1 bytes @ 0x6
  7985                           
  7986     0076                     ??_EUSART1_Initialize:	
  7987                           ; 1 bytes @ 0x6
  7988                           
  7989     0076                     ??_SYSTEM_Initialize:	
  7990                           ; 1 bytes @ 0x6
  7991                           
  7992     0076                     ??_I2C1_MasterOperation:	
  7993                           ; 1 bytes @ 0x6
  7994                           
  7995     0076                     ??_stringToInt16:	
  7996                           ; 1 bytes @ 0x6
  7997                           
  7998     0076                     ??_writeINA220:	
  7999                           ; 1 bytes @ 0x6
  8000                           
  8001                           
  8002                           	psect	cstackBANK0
  8003     0020                     __pcstackBANK0:	
  8004                           ; 1 bytes @ 0x6
  8005                           
  8006     0020                     ?_I2C1_SetBuffer:
  8007     0020                     ?_I2C1_SetCallback:	
  8008                           ; 1 bytes @ 0x0
  8009                           
  8010     0020                     ?_initRxBuffer:	
  8011                           ; 1 bytes @ 0x0
  8012                           
  8013     0020                     ?_receiveData:	
  8014                           ; 1 bytes @ 0x0
  8015                           
  8016     0020                     ?_stringCompare:	
  8017                           ; 1 bytes @ 0x0
  8018                           
  8019     0020                     ?___wmul:	
  8020                           ; 2 bytes @ 0x0
  8021                           
  8022     0020                     ?___lwdiv:	
  8023                           ; 2 bytes @ 0x0
  8024                           
  8025     0020                     ?___lwmod:	
  8026                           ; 2 bytes @ 0x0
  8027                           
  8028     0020                     ?___aldiv:	
  8029                           ; 2 bytes @ 0x0
  8030                           
  8031     0020                     stringlen@idx:	
  8032                           ; 4 bytes @ 0x0
  8033                           
  8034     0020                     I2C1_SetBuffer@buffer:	
  8035                           ; 1 bytes @ 0x0
  8036                           
  8037     0020                     I2C1_SetCallback@cb:	
  8038                           ; 2 bytes @ 0x0
  8039                           
  8040     0020                     initRxBuffer@buf:	
  8041                           ; 2 bytes @ 0x0
  8042                           
  8043     0020                     receiveData@data:	
  8044                           ; 2 bytes @ 0x0
  8045                           
  8046     0020                     stringCompare@str:	
  8047                           ; 2 bytes @ 0x0
  8048                           
  8049     0020                     ___wmul@multiplier:	
  8050                           ; 2 bytes @ 0x0
  8051                           
  8052     0020                     ___lwdiv@divisor:	
  8053                           ; 2 bytes @ 0x0
  8054                           
  8055     0020                     ___lwmod@divisor:	
  8056                           ; 2 bytes @ 0x0
  8057                           
  8058     0020                     ___aldiv@divisor:	
  8059                           ; 2 bytes @ 0x0
  8060                           
  8061     0020                     ??_getMax:	
  8062                           ; 4 bytes @ 0x0
  8063                           
  8064     0020                     ??_getMin:	
  8065                           ; 1 bytes @ 0x0
  8066                           
  8067                           
  8068                           ; 1 bytes @ 0x0
  8069     0020                     	ds	1
  8070     0021                     ?_sendPacket:
  8071     0021                     sendPacket@str:	
  8072                           ; 1 bytes @ 0x1
  8073                           
  8074                           
  8075                           ; 2 bytes @ 0x1
  8076     0021                     	ds	1
  8077     0022                     I2C1_SetCallback@ptr:
  8078     0022                     receiveData@maxdata:	
  8079                           ; 1 bytes @ 0x2
  8080                           
  8081     0022                     I2C1_SetBuffer@bufferSize:	
  8082                           ; 1 bytes @ 0x2
  8083                           
  8084     0022                     stringCompare@buf:	
  8085                           ; 2 bytes @ 0x2
  8086                           
  8087     0022                     ___wmul@multiplicand:	
  8088                           ; 2 bytes @ 0x2
  8089                           
  8090     0022                     ___lwdiv@dividend:	
  8091                           ; 2 bytes @ 0x2
  8092                           
  8093     0022                     ___lwmod@dividend:	
  8094                           ; 2 bytes @ 0x2
  8095                           
  8096     0022                     initRxBuffer@size:	
  8097                           ; 2 bytes @ 0x2
  8098                           
  8099                           
  8100                           ; 4 bytes @ 0x2
  8101     0022                     	ds	1
  8102     0023                     I2C1_SetCallback@idx:
  8103     0023                     receiveData@c:	
  8104                           ; 1 bytes @ 0x3
  8105                           
  8106     0023                     sendPacket@byteCount:	
  8107                           ; 1 bytes @ 0x3
  8108                           
  8109                           
  8110                           ; 4 bytes @ 0x3
  8111     0023                     	ds	1
  8112     0024                     ?_I2C1_SetDataCompleteCallback:
  8113     0024                     ?_I2C1_SetAddressNackCallback:	
  8114                           ; 1 bytes @ 0x4
  8115                           
  8116     0024                     ?_stringToInt16:	
  8117                           ; 1 bytes @ 0x4
  8118                           
  8119     0024                     receiveData@charCount:	
  8120                           ; 2 bytes @ 0x4
  8121                           
  8122     0024                     ___lwdiv@counter:	
  8123                           ; 1 bytes @ 0x4
  8124                           
  8125     0024                     I2C1_SetDataCompleteCallback@cb:	
  8126                           ; 1 bytes @ 0x4
  8127                           
  8128     0024                     I2C1_SetAddressNackCallback@cb:	
  8129                           ; 2 bytes @ 0x4
  8130                           
  8131     0024                     stringCompare@byte_count:	
  8132                           ; 2 bytes @ 0x4
  8133                           
  8134     0024                     stringToInt16@string:	
  8135                           ; 2 bytes @ 0x4
  8136                           
  8137     0024                     ___aldiv@dividend:	
  8138                           ; 2 bytes @ 0x4
  8139                           
  8140                           
  8141                           ; 4 bytes @ 0x4
  8142     0024                     	ds	1
  8143     0025                     ___lwdiv@quotient:
  8144                           
  8145                           ; 2 bytes @ 0x5
  8146     0025                     	ds	1
  8147     0026                     I2C1_SetDataCompleteCallback@ptr:
  8148     0026                     stringToInt16@strlen:	
  8149                           ; 1 bytes @ 0x6
  8150                           
  8151     0026                     I2C1_SetAddressNackCallback@ptr:	
  8152                           ; 1 bytes @ 0x6
  8153                           
  8154     0026                     stringCompare@idx:	
  8155                           ; 2 bytes @ 0x6
  8156                           
  8157     0026                     ??_initRxBuffer:	
  8158                           ; 2 bytes @ 0x6
  8159                           
  8160                           
  8161                           ; 1 bytes @ 0x6
  8162     0026                     	ds	1
  8163     0027                     ?_rd1RegCompleteHandler:
  8164     0027                     ?_rd2RegCompleteHandler:	
  8165                           ; 1 bytes @ 0x7
  8166                           
  8167     0027                     ?_wr1RegCompleteHandler:	
  8168                           ; 1 bytes @ 0x7
  8169                           
  8170     0027                     ?_wr2RegCompleteHandler:	
  8171                           ; 1 bytes @ 0x7
  8172                           
  8173     0027                     ?_rdBlkRegCompleteHandler:	
  8174                           ; 1 bytes @ 0x7
  8175                           
  8176     0027                     ?_I2C1_CallbackReturnStop:	
  8177                           ; 1 bytes @ 0x7
  8178                           
  8179     0027                     ?_I2C1_CallbackReturnReset:	
  8180                           ; 1 bytes @ 0x7
  8181                           
  8182     0027                     ?_int16ToString:	
  8183                           ; 1 bytes @ 0x7
  8184                           
  8185     0027                     rd1RegCompleteHandler@ptr:	
  8186                           ; 1 bytes @ 0x7
  8187                           
  8188     0027                     rd2RegCompleteHandler@ptr:	
  8189                           ; 1 bytes @ 0x7
  8190                           
  8191     0027                     wr1RegCompleteHandler@ptr:	
  8192                           ; 1 bytes @ 0x7
  8193                           
  8194     0027                     wr2RegCompleteHandler@ptr:	
  8195                           ; 1 bytes @ 0x7
  8196                           
  8197     0027                     rdBlkRegCompleteHandler@ptr:	
  8198                           ; 1 bytes @ 0x7
  8199                           
  8200     0027                     I2C1_CallbackReturnStop@funPtr:	
  8201                           ; 1 bytes @ 0x7
  8202                           
  8203     0027                     I2C1_CallbackReturnReset@funPtr:	
  8204                           ; 1 bytes @ 0x7
  8205                           
  8206     0027                     stringToInt16@sign:	
  8207                           ; 1 bytes @ 0x7
  8208                           
  8209     0027                     getMax@i:	
  8210                           ; 1 bytes @ 0x7
  8211                           
  8212     0027                     getMin@i:	
  8213                           ; 1 bytes @ 0x7
  8214                           
  8215     0027                     int16ToString@value:	
  8216                           ; 1 bytes @ 0x7
  8217                           
  8218     0027                     ??_sendPacket:	
  8219                           ; 2 bytes @ 0x7
  8220                           
  8221                           
  8222                           ; 1 bytes @ 0x7
  8223     0027                     	ds	1
  8224     0028                     getMax@aux:
  8225     0028                     getMin@aux:	
  8226                           ; 1 bytes @ 0x8
  8227                           
  8228     0028                     ___aldiv@counter:	
  8229                           ; 1 bytes @ 0x8
  8230                           
  8231     0028                     stringToInt16@multiple:	
  8232                           ; 1 bytes @ 0x8
  8233                           
  8234     0028                     ??_I2C1_DO_TX:	
  8235                           ; 2 bytes @ 0x8
  8236                           
  8237     0028                     ??_I2C1_DO_RX:	
  8238                           ; 1 bytes @ 0x8
  8239                           
  8240     0028                     ??_I2C1_DO_TX_EMPTY:	
  8241                           ; 1 bytes @ 0x8
  8242                           
  8243     0028                     ??_I2C1_DO_ADDRESS_NACK:	
  8244                           ; 1 bytes @ 0x8
  8245                           
  8246                           
  8247                           ; 1 bytes @ 0x8
  8248     0028                     	ds	1
  8249     0029                     ___aldiv@sign:
  8250     0029                     int16ToString@data:	
  8251                           ; 1 bytes @ 0x9
  8252                           
  8253                           
  8254                           ; 2 bytes @ 0x9
  8255     0029                     	ds	1
  8256     002A                     stringToInt16@result:
  8257     002A                     ___aldiv@quotient:	
  8258                           ; 2 bytes @ 0xA
  8259                           
  8260     002A                     ??_I2C1_MasterFsm:	
  8261                           ; 4 bytes @ 0xA
  8262                           
  8263                           
  8264                           ; 1 bytes @ 0xA
  8265     002A                     	ds	1
  8266     002B                     int16ToString@flag_0:
  8267     002B                     sendPacket@i:	
  8268                           ; 1 bytes @ 0xB
  8269                           
  8270                           
  8271                           ; 2 bytes @ 0xB
  8272     002B                     	ds	1
  8273     002C                     I2C1_MasterOperation@read:
  8274     002C                     int16ToString@result:	
  8275                           ; 1 bytes @ 0xC
  8276                           
  8277                           
  8278                           ; 2 bytes @ 0xC
  8279     002C                     	ds	1
  8280     002D                     ?_sendSensorInfo:
  8281     002D                     I2C1_MasterOperation@returnValue:	
  8282                           ; 1 bytes @ 0xD
  8283                           
  8284     002D                     sendSensorInfo@sensor_info:	
  8285                           ; 1 bytes @ 0xD
  8286                           
  8287                           
  8288                           ; 2 bytes @ 0xD
  8289     002D                     	ds	1
  8290     002E                     ?_getMed:
  8291     002E                     ?_I2C1_WriteNBytes:	
  8292                           ; 1 bytes @ 0xE
  8293                           
  8294     002E                     ?_I2C1_ReadNBytes:	
  8295                           ; 1 bytes @ 0xE
  8296                           
  8297     002E                     I2C1_WriteNBytes@data:	
  8298                           ; 1 bytes @ 0xE
  8299                           
  8300     002E                     I2C1_ReadNBytes@data:	
  8301                           ; 1 bytes @ 0xE
  8302                           
  8303     002E                     int16ToString@i:	
  8304                           ; 1 bytes @ 0xE
  8305                           
  8306     002E                     getMed@data:	
  8307                           ; 2 bytes @ 0xE
  8308                           
  8309                           
  8310                           ; 2 bytes @ 0xE
  8311     002E                     	ds	1
  8312     002F                     I2C1_WriteNBytes@len:
  8313     002F                     I2C1_ReadNBytes@len:	
  8314                           ; 2 bytes @ 0xF
  8315                           
  8316     002F                     ??_sendSensorInfo:	
  8317                           ; 2 bytes @ 0xF
  8318                           
  8319                           
  8320                           ; 1 bytes @ 0xF
  8321     002F                     	ds	1
  8322     0030                     int16ToString@dividend:
  8323     0030                     ??_getMed:	
  8324                           ; 2 bytes @ 0x10
  8325                           
  8326                           
  8327                           ; 1 bytes @ 0x10
  8328     0030                     	ds	1
  8329     0031                     I2C1_WriteNBytes@address:
  8330     0031                     I2C1_ReadNBytes@address:	
  8331                           ; 1 bytes @ 0x11
  8332                           
  8333                           
  8334                           ; 1 bytes @ 0x11
  8335     0031                     	ds	1
  8336     0032                     ?_writeINA220:
  8337     0032                     ?_readINA220:	
  8338                           ; 1 bytes @ 0x12
  8339                           
  8340     0032                     readINA220@address:	
  8341                           ; 2 bytes @ 0x12
  8342                           
  8343     0032                     int16ToString@divisor:	
  8344                           ; 1 bytes @ 0x12
  8345                           
  8346     0032                     writeINA220@regdata:	
  8347                           ; 2 bytes @ 0x12
  8348                           
  8349                           
  8350                           ; 2 bytes @ 0x12
  8351     0032                     	ds	1
  8352     0033                     sendSensorInfo@packet:
  8353                           
  8354                           ; 7 bytes @ 0x13
  8355     0033                     	ds	1
  8356     0034                     ?_sendSensorData:
  8357     0034                     writeINA220@address:	
  8358                           ; 1 bytes @ 0x14
  8359                           
  8360     0034                     sendSensorData@sensor_data:	
  8361                           ; 1 bytes @ 0x14
  8362                           
  8363     0034                     ??_readINA220:	
  8364                           ; 2 bytes @ 0x14
  8365                           
  8366                           
  8367                           ; 1 bytes @ 0x14
  8368     0034                     	ds	1
  8369     0035                     writeINA220@regadd:
  8370                           
  8371                           ; 1 bytes @ 0x15
  8372     0035                     	ds	1
  8373     0036                     readINA220@pRxbuffer:
  8374     0036                     writeINA220@pTxbuffer:	
  8375                           ; 1 bytes @ 0x16
  8376                           
  8377     0036                     ??_sendSensorData:	
  8378                           ; 1 bytes @ 0x16
  8379                           
  8380                           
  8381                           ; 1 bytes @ 0x16
  8382     0036                     	ds	1
  8383     0037                     readINA220@pTxbuffer:
  8384     0037                     writeINA220@Txbuffer:	
  8385                           ; 1 bytes @ 0x17
  8386                           
  8387                           
  8388                           ; 3 bytes @ 0x17
  8389     0037                     	ds	1
  8390     0038                     readINA220@buff:
  8391     0038                     getMed@buff:	
  8392                           ; 2 bytes @ 0x18
  8393                           
  8394     0038                     sendSensorData@packet:	
  8395                           ; 4 bytes @ 0x18
  8396                           
  8397                           
  8398                           ; 8 bytes @ 0x18
  8399     0038                     	ds	2
  8400     003A                     readINA220@regadd:
  8401     003A                     sendSensorInfo@idx:	
  8402                           ; 1 bytes @ 0x1A
  8403                           
  8404                           
  8405                           ; 2 bytes @ 0x1A
  8406     003A                     	ds	1
  8407     003B                     readINA220@ret:
  8408                           
  8409                           ; 2 bytes @ 0x1B
  8410     003B                     	ds	1
  8411     003C                     getMed@i:
  8412                           
  8413                           ; 1 bytes @ 0x1C
  8414     003C                     	ds	1
  8415     003D                     ?_getINA220Data:
  8416     003D                     getMed@aux:	
  8417                           ; 1 bytes @ 0x1D
  8418                           
  8419     003D                     getINA220Data@device:	
  8420                           ; 1 bytes @ 0x1D
  8421                           
  8422                           
  8423                           ; 2 bytes @ 0x1D
  8424     003D                     	ds	1
  8425     003E                     ?_getMetrics:
  8426     003E                     getMetrics@device:	
  8427                           ; 1 bytes @ 0x1E
  8428                           
  8429                           
  8430                           ; 2 bytes @ 0x1E
  8431     003E                     	ds	1
  8432     003F                     ??_getINA220Data:
  8433                           
  8434                           ; 1 bytes @ 0x1F
  8435     003F                     	ds	1
  8436     0040                     ?_getHis:
  8437     0040                     getHis@data:	
  8438                           ; 1 bytes @ 0x20
  8439                           
  8440                           
  8441                           ; 2 bytes @ 0x20
  8442     0040                     	ds	2
  8443     0042                     ??_getHis:
  8444                           
  8445                           ; 1 bytes @ 0x22
  8446     0042                     	ds	1
  8447     0043                     getINA220Data@buff:
  8448                           
  8449                           ; 2 bytes @ 0x23
  8450     0043                     	ds	1
  8451     0044                     getHis@i:
  8452                           
  8453                           ; 1 bytes @ 0x24
  8454     0044                     	ds	1
  8455     0045                     getHis@aux:
  8456                           
  8457                           ; 1 bytes @ 0x25
  8458     0045                     	ds	1
  8459     0046                     ?_processCommand:
  8460     0046                     processCommand@data:	
  8461                           ; 1 bytes @ 0x26
  8462                           
  8463                           
  8464                           ; 2 bytes @ 0x26
  8465     0046                     	ds	2
  8466     0048                     processCommand@sensor:
  8467                           
  8468                           ; 2 bytes @ 0x28
  8469     0048                     	ds	2
  8470     004A                     ??_processCommand:
  8471                           
  8472                           ; 1 bytes @ 0x2A
  8473     004A                     	ds	4
  8474     004E                     processCommand@command:
  8475                           
  8476                           ; 1 bytes @ 0x2E
  8477     004E                     	ds	1
  8478     004F                     ??_main:
  8479                           
  8480                           ; 1 bytes @ 0x2F
  8481     004F                     	ds	7
  8482                           
  8483                           	psect	maintext
  8484     0090                     __pmaintext:	
  8485 ;;
  8486 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  8487 ;;
  8488 ;; *************** function _main *****************
  8489 ;; Defined at:
  8490 ;;		line 99 in file "main.c"
  8491 ;; Parameters:    Size  Location     Type
  8492 ;;		None
  8493 ;; Auto vars:     Size  Location     Type
  8494 ;;  packet         11    0[BANK2 ] struct .
  8495 ;; Return value:  Size  Location     Type
  8496 ;;                  1    wreg      void 
  8497 ;; Registers used:
  8498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8499 ;; Tracked objects:
  8500 ;;		On entry : B3F/0
  8501 ;;		On exit  : 3F/0
  8502 ;;		Unchanged: 0/0
  8503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8505 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0
  8506 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8507 ;;      Totals:         0       7       0      11       0       0       0       0       0       0       0       0       
      +0       0
  8508 ;;Total ram usage:       18 bytes
  8509 ;; Hardware stack levels required when called: 16
  8510 ;; This function calls:
  8511 ;;		_SYSTEM_Initialize
  8512 ;;		_TMR2_Start
  8513 ;;		_TMR2_Stop
  8514 ;;		_TMR4_Start
  8515 ;;		_TMR4_Stop
  8516 ;;		_TxDeviceDisable
  8517 ;;		_getINA220Data
  8518 ;;		_getMetrics
  8519 ;;		_initRxBuffer
  8520 ;;		_processCommand
  8521 ;;		_receiveData
  8522 ;;		_stringCompare
  8523 ;; This function is called by:
  8524 ;;		Startup code after reset
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528     0090                     _main:	
  8529                           ;psect for function _main
  8530                           
  8531                           
  8532                           ;main.c: 101:     cmd_packet_t packet= {
  8533                           
  8534                           ;incstack = 0
  8535                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8536     0090  30C6               	movlw	low main@F11276
  8537     0091  0086               	movwf	6
  8538     0092  3000               	movlw	high main@F11276
  8539     0093  0087               	movwf	7
  8540     0094  305B               	movlw	low main@packet
  8541     0095  0084               	movwf	4
  8542     0096  3001               	movlw	high main@packet
  8543     0097  0085               	movwf	5
  8544     0098  300B               	movlw	11
  8545     0099  00CF               	movwf	??_main
  8546     009A                     u3320:
  8547     009A  0016               	moviw fsr1++
  8548     009B  001A               	movwi fsr0++
  8549     009C  0BCF               	decfsz	??_main,f
  8550     009D  289A               	goto	u3320
  8551                           
  8552                           ;main.c: 106:     SYSTEM_Initialize();
  8553     009E  318B  2383  3180   	fcall	_SYSTEM_Initialize
  8554                           
  8555                           ;main.c: 107:     TxDeviceDisable();
  8556     00A1  3188  20BD  3180   	fcall	_TxDeviceDisable
  8557     00A4  1498               	bsf	24,1	;volatile
  8558     00A5  1418               	bsf	24,0	;volatile
  8559     00A6  119A               	bcf	26,3	;volatile
  8560                           
  8561                           ;main.c: 113:     (INTCONbits.GIE = 1);
  8562     00A7  178B               	bsf	11,7	;volatile
  8563                           
  8564                           ;main.c: 114:     (INTCONbits.PEIE = 1);
  8565     00A8  170B               	bsf	11,6	;volatile
  8566     00A9                     l1050:	
  8567                           ;main.c: 117:     while(1)
  8568                           
  8569     00A9  0063               	sleep	;# 
  8570                           
  8571                           ;main.c: 120:         if(eusart1PacketFinish)
  8572     00AA  0140               	movlb	0	; select bank0
  8573     00AB  0866               	movf	_eusart1PacketFinish,w	;volatile
  8574     00AC  1903               	btfsc	3,2
  8575     00AD  292A               	goto	l5537
  8576                           
  8577                           ;main.c: 121:         {;main.c: 122:             eusart1PacketFinish--;
  8578     00AE  3001               	movlw	1
  8579     00AF  02E6               	subwf	_eusart1PacketFinish,f	;volatile
  8580                           
  8581                           ;main.c: 123:             initRxBuffer((char *)&packet.cmd_packet, sizeof(cmd_packet_fie
      +                          lds_t));
  8582     00B0  305B               	movlw	low main@packet
  8583     00B1  00A0               	movwf	initRxBuffer@buf
  8584     00B2  3001               	movlw	high main@packet
  8585     00B3  00A1               	movwf	initRxBuffer@buf+1
  8586     00B4  3000               	movlw	0
  8587     00B5  00A5               	movwf	initRxBuffer@size+3
  8588     00B6  3000               	movlw	0
  8589     00B7  00A4               	movwf	initRxBuffer@size+2
  8590     00B8  3000               	movlw	0
  8591     00B9  00A3               	movwf	initRxBuffer@size+1
  8592     00BA  300B               	movlw	11
  8593     00BB  00A2               	movwf	initRxBuffer@size
  8594     00BC  318C  244B  3180   	fcall	_initRxBuffer
  8595                           
  8596                           ;main.c: 124:             receiveData((char *)&packet.cmd_packet,sizeof(cmd_packet_field
      +                          s_t));
  8597     00BF  305B               	movlw	low main@packet
  8598     00C0  00A0               	movwf	receiveData@data
  8599     00C1  3001               	movlw	high main@packet
  8600     00C2  00A1               	movwf	receiveData@data+1
  8601     00C3  300B               	movlw	11
  8602     00C4  00A2               	movwf	receiveData@maxdata
  8603     00C5  318B  23BF  3180   	fcall	_receiveData
  8604                           
  8605                           ;main.c: 126:             if(stringCompare(packet.cmd_packet_fields.address, panel.senso
      +                          r_info.address, 3) == 0)
  8606     00C8  305D               	movlw	low (main@packet+2)
  8607     00C9  00A0               	movwf	stringCompare@str
  8608     00CA  3001               	movlw	high (main@packet+2)
  8609     00CB  00A1               	movwf	stringCompare@str+1
  8610     00CC  30A5               	movlw	low (_panel+5)
  8611     00CD  00A2               	movwf	stringCompare@buf
  8612     00CE  3001               	movlw	high (_panel+5)
  8613     00CF  00A3               	movwf	stringCompare@buf+1
  8614     00D0  3003               	movlw	3
  8615     00D1  00A4               	movwf	stringCompare@byte_count
  8616     00D2  3000               	movlw	0
  8617     00D3  00A5               	movwf	stringCompare@byte_count+1
  8618     00D4  318E  2603  3180   	fcall	_stringCompare
  8619     00D7  0820               	movf	?_stringCompare,w
  8620     00D8  0421               	iorwf	?_stringCompare+1,w
  8621     00D9  1D03               	btfss	3,2
  8622     00DA  28E8               	goto	l1052
  8623                           
  8624                           ;main.c: 127:             {;main.c: 128:                 processCommand(packet.cmd_packe
      +                          t_fields.command, &packet.cmd_packet_fields.data[0], &panel);
  8625     00DB  3061               	movlw	low (main@packet+6)
  8626     00DC  00C6               	movwf	processCommand@data
  8627     00DD  3001               	movlw	high (main@packet+6)
  8628     00DE  00C7               	movwf	processCommand@data+1
  8629     00DF  30A0               	movlw	low _panel
  8630     00E0  00C8               	movwf	processCommand@sensor
  8631     00E1  3001               	movlw	high _panel
  8632     00E2  00C9               	movwf	processCommand@sensor+1
  8633     00E3  0142               	movlb	2	; select bank2
  8634     00E4  0860               	movf	(main@packet^(0+256)+5),w
  8635     00E5  3182  221D  3180   	fcall	_processCommand
  8636     00E8                     l1052:	
  8637                           ;main.c: 129:             }
  8638                           
  8639                           
  8640                           ;main.c: 130:             if(stringCompare(packet.cmd_packet_fields.address, battery.sen
      +                          sor_info.address, 3) == 0)
  8641     00E8  305D               	movlw	low (main@packet+2)
  8642     00E9  0140               	movlb	0	; select bank0
  8643     00EA  00A0               	movwf	stringCompare@str
  8644     00EB  3001               	movlw	high (main@packet+2)
  8645     00EC  00A1               	movwf	stringCompare@str+1
  8646     00ED  3025               	movlw	low (_battery+5)
  8647     00EE  00A2               	movwf	stringCompare@buf
  8648     00EF  3001               	movlw	high (_battery+5)
  8649     00F0  00A3               	movwf	stringCompare@buf+1
  8650     00F1  3003               	movlw	3
  8651     00F2  00A4               	movwf	stringCompare@byte_count
  8652     00F3  3000               	movlw	0
  8653     00F4  00A5               	movwf	stringCompare@byte_count+1
  8654     00F5  318E  2603  3180   	fcall	_stringCompare
  8655     00F8  0820               	movf	?_stringCompare,w
  8656     00F9  0421               	iorwf	?_stringCompare+1,w
  8657     00FA  1D03               	btfss	3,2
  8658     00FB  2909               	goto	l1053
  8659                           
  8660                           ;main.c: 131:    {;main.c: 132:                 processCommand(packet.cmd_packet_fields.
      +                          command, &packet.cmd_packet_fields.data[0], &battery);
  8661     00FC  3061               	movlw	low (main@packet+6)
  8662     00FD  00C6               	movwf	processCommand@data
  8663     00FE  3001               	movlw	high (main@packet+6)
  8664     00FF  00C7               	movwf	processCommand@data+1
  8665     0100  3020               	movlw	low _battery
  8666     0101  00C8               	movwf	processCommand@sensor
  8667     0102  3001               	movlw	high _battery
  8668     0103  00C9               	movwf	processCommand@sensor+1
  8669     0104  0142               	movlb	2	; select bank2
  8670     0105  0860               	movf	(main@packet^(0+256)+5),w
  8671     0106  3182  221D  3180   	fcall	_processCommand
  8672     0109                     l1053:	
  8673                           ;main.c: 133:    }
  8674                           
  8675                           
  8676                           ;main.c: 134:             if(stringCompare(packet.cmd_packet_fields.address, cons.sensor
      +                          _info.address, 3) == 0)
  8677     0109  305D               	movlw	low (main@packet+2)
  8678     010A  0140               	movlb	0	; select bank0
  8679     010B  00A0               	movwf	stringCompare@str
  8680     010C  3001               	movlw	high (main@packet+2)
  8681     010D  00A1               	movwf	stringCompare@str+1
  8682     010E  3025               	movlw	low (_cons+5)
  8683     010F  00A2               	movwf	stringCompare@buf
  8684     0110  3002               	movlw	high (_cons+5)
  8685     0111  00A3               	movwf	stringCompare@buf+1
  8686     0112  3003               	movlw	3
  8687     0113  00A4               	movwf	stringCompare@byte_count
  8688     0114  3000               	movlw	0
  8689     0115  00A5               	movwf	stringCompare@byte_count+1
  8690     0116  318E  2603  3180   	fcall	_stringCompare
  8691     0119  0820               	movf	?_stringCompare,w
  8692     011A  0421               	iorwf	?_stringCompare+1,w
  8693     011B  1D03               	btfss	3,2
  8694     011C  292A               	goto	l5537
  8695                           
  8696                           ;main.c: 135:    {;main.c: 136:                 processCommand(packet.cmd_packet_fields.
      +                          command, &packet.cmd_packet_fields.data[0], &cons);
  8697     011D  3061               	movlw	low (main@packet+6)
  8698     011E  00C6               	movwf	processCommand@data
  8699     011F  3001               	movlw	high (main@packet+6)
  8700     0120  00C7               	movwf	processCommand@data+1
  8701     0121  3020               	movlw	low _cons
  8702     0122  00C8               	movwf	processCommand@sensor
  8703     0123  3002               	movlw	high _cons
  8704     0124  00C9               	movwf	processCommand@sensor+1
  8705     0125  0142               	movlb	2	; select bank2
  8706     0126  0860               	movf	(main@packet^(0+256)+5),w
  8707     0127  3182  221D  3180   	fcall	_processCommand
  8708     012A                     l5537:
  8709                           
  8710                           ;main.c: 139:         if(measureTime)
  8711     012A  0140               	movlb	0	; select bank0
  8712     012B  085D               	movf	_measureTime,w
  8713     012C  1903               	btfsc	3,2
  8714     012D  2959               	goto	l5543
  8715                           
  8716                           ;main.c: 140:         {;main.c: 141:             getINA220Data(&panel);
  8717     012E  30A0               	movlw	low _panel
  8718     012F  00BD               	movwf	getINA220Data@device
  8719     0130  3001               	movlw	high _panel
  8720     0131  00BE               	movwf	getINA220Data@device+1
  8721     0132  3183  2393  3180   	fcall	_getINA220Data
  8722                           
  8723                           ;main.c: 142:             getINA220Data(&battery);
  8724     0135  3020               	movlw	low _battery
  8725     0136  00BD               	movwf	getINA220Data@device
  8726     0137  3001               	movlw	high _battery
  8727     0138  00BE               	movwf	getINA220Data@device+1
  8728     0139  3183  2393  3180   	fcall	_getINA220Data
  8729                           
  8730                           ;main.c: 143:             getINA220Data(&cons);
  8731     013C  3020               	movlw	low _cons
  8732     013D  00BD               	movwf	getINA220Data@device
  8733     013E  3002               	movlw	high _cons
  8734     013F  00BE               	movwf	getINA220Data@device+1
  8735     0140  3183  2393  3180   	fcall	_getINA220Data
  8736                           
  8737                           ;main.c: 144:             getMetrics(&panel);
  8738     0143  30A0               	movlw	low _panel
  8739     0144  00BE               	movwf	getMetrics@device
  8740     0145  3001               	movlw	high _panel
  8741     0146  00BF               	movwf	getMetrics@device+1
  8742     0147  318E  266A  3180   	fcall	_getMetrics
  8743                           
  8744                           ;main.c: 145:             getMetrics(&battery);
  8745     014A  3020               	movlw	low _battery
  8746     014B  00BE               	movwf	getMetrics@device
  8747     014C  3001               	movlw	high _battery
  8748     014D  00BF               	movwf	getMetrics@device+1
  8749     014E  318E  266A  3180   	fcall	_getMetrics
  8750                           
  8751                           ;main.c: 146:             getMetrics(&cons);
  8752     0151  3020               	movlw	low _cons
  8753     0152  00BE               	movwf	getMetrics@device
  8754     0153  3002               	movlw	high _cons
  8755     0154  00BF               	movwf	getMetrics@device+1
  8756     0155  318E  266A  3180   	fcall	_getMetrics
  8757                           
  8758                           ;main.c: 147:             measureTime = 0;
  8759     0158  01DD               	clrf	_measureTime
  8760     0159                     l5543:
  8761                           
  8762                           ;main.c: 150:         if(status.chrg != status_prev.chrg)
  8763     0159  085B               	movf	_status+5,w
  8764     015A  0141               	movlb	1	; select bank1
  8765     015B  0665               	xorwf	(_status_prev^(0+128)+5),w
  8766     015C  1903               	skipnz
  8767     015D  2968               	goto	l1056
  8768                           
  8769                           ;main.c: 151:         {;main.c: 152:             if(status.chrg)
  8770     015E  0140               	movlb	0	; select bank0
  8771     015F  085B               	movf	_status+5,w
  8772     0160  1903               	btfsc	3,2
  8773     0161  2964               	goto	l1061
  8774                           
  8775                           ;main.c: 153:             {;main.c: 154:                 do { LATAbits.LATA1 = 1; } whil
      +                          e(0);
  8776     0162  1498               	bsf	24,1	;volatile
  8777     0163  2965               	goto	l5547
  8778     0164                     l1061:	
  8779                           ;main.c: 156:             {;main.c: 157:                 do { LATAbits.LATA1 = 0; } whil
      +                          e(0);
  8780                           
  8781     0164  1098               	bcf	24,1	;volatile
  8782     0165                     l5547:
  8783                           
  8784                           ;main.c: 159:             status_prev.chrg = status.chrg;
  8785     0165  085B               	movf	_status+5,w
  8786     0166  0141               	movlb	1	; select bank1
  8787     0167  00E5               	movwf	(_status_prev^(0+128)+5)
  8788     0168                     l1056:	
  8789                           ;main.c: 160:         }
  8790                           
  8791                           
  8792                           ;main.c: 162:         if(status.uvp != status_prev.uvp)
  8793     0168  0140               	movlb	0	; select bank0
  8794     0169  085C               	movf	_status+6,w
  8795     016A  0141               	movlb	1	; select bank1
  8796     016B  0666               	xorwf	(_status_prev^(0+128)+6),w
  8797     016C  1903               	skipnz
  8798     016D  2978               	goto	l1063
  8799                           
  8800                           ;main.c: 163:         {;main.c: 164:             if(status.uvp)
  8801     016E  0140               	movlb	0	; select bank0
  8802     016F  085C               	movf	_status+6,w
  8803     0170  1903               	btfsc	3,2
  8804     0171  2974               	goto	l1068
  8805                           
  8806                           ;main.c: 165:             {;main.c: 166:                 do { LATAbits.LATA0 = 0; } whil
      +                          e(0);
  8807     0172  1018               	bcf	24,0	;volatile
  8808     0173  2975               	goto	l5551
  8809     0174                     l1068:	
  8810                           ;main.c: 168:             {;main.c: 169:                 do { LATAbits.LATA0 = 1; } whil
      +                          e(0);
  8811                           
  8812     0174  1418               	bsf	24,0	;volatile
  8813     0175                     l5551:
  8814                           
  8815                           ;main.c: 171:             status_prev.uvp = status.uvp;
  8816     0175  085C               	movf	_status+6,w
  8817     0176  0141               	movlb	1	; select bank1
  8818     0177  00E6               	movwf	(_status_prev^(0+128)+6)
  8819     0178                     l1063:	
  8820                           ;main.c: 172:         }
  8821                           
  8822                           
  8823                           ;main.c: 174:         if(status.beacon != status_prev.beacon){
  8824     0178  0140               	movlb	0	; select bank0
  8825     0179  085A               	movf	_status+4,w
  8826     017A  0141               	movlb	1	; select bank1
  8827     017B  0664               	xorwf	(_status_prev^(0+128)+4),w
  8828     017C  1903               	skipnz
  8829     017D  2995               	goto	l5563
  8830                           
  8831                           ;main.c: 175:             if(status.beacon)
  8832     017E  0140               	movlb	0	; select bank0
  8833     017F  085A               	movf	_status+4,w
  8834     0180  1903               	btfsc	3,2
  8835     0181  2989               	goto	l5557
  8836                           
  8837                           ;main.c: 176:             {;main.c: 177:                 TMR4_Start();
  8838     0182  3188  20B7  3180   	fcall	_TMR4_Start
  8839                           
  8840                           ;main.c: 178:                 TMR2_Start();
  8841     0185  3188  20A7  3180   	fcall	_TMR2_Start
  8842                           
  8843                           ;main.c: 179:             }else
  8844     0188  2991               	goto	l5561
  8845     0189                     l5557:
  8846                           
  8847                           ;main.c: 180:             {;main.c: 181:                 TMR4_Stop();
  8848     0189  3188  20BA  3180   	fcall	_TMR4_Stop
  8849                           
  8850                           ;main.c: 182:                 TMR2_Stop();
  8851     018C  3188  20A9  3180   	fcall	_TMR2_Stop
  8852     018F  0140               	movlb	0	; select bank0
  8853     0190  1298               	bcf	24,5	;volatile
  8854     0191                     l5561:
  8855                           
  8856                           ;main.c: 185:             status_prev.beacon = status.beacon;
  8857     0191  0140               	movlb	0	; select bank0
  8858     0192  085A               	movf	_status+4,w
  8859     0193  0141               	movlb	1	; select bank1
  8860     0194  00E4               	movwf	(_status_prev^(0+128)+4)
  8861     0195                     l5563:
  8862                           
  8863                           ;main.c: 188:         if(battery.sensor_data.voltage.med > 3375)
  8864     0195  0142               	movlb	2	; select bank2
  8865     0196  0842               	movf	((_battery+1)^(0+256)+33),w
  8866     0197  3A80               	xorlw	128
  8867     0198  0140               	movlb	0	; select bank0
  8868     0199  00CF               	movwf	??_main
  8869     019A  308D               	movlw	141
  8870     019B  024F               	subwf	??_main,w
  8871     019C  1D03               	skipz
  8872     019D  29A1               	goto	u3445
  8873     019E  3030               	movlw	48
  8874     019F  0142               	movlb	2	; select bank2
  8875     01A0  0241               	subwf	(_battery^(0+256)+33),w
  8876     01A1                     u3445:
  8877     01A1  1C03               	skipc
  8878     01A2  29C7               	goto	l5569
  8879                           
  8880                           ;main.c: 189:         {;main.c: 190:             if(battery.sensor_data.current.hist[bat
      +                          tery.sensor_data.current.pWrite] > status.curr_tail)
  8881     01A3  0142               	movlb	2	; select bank2
  8882     01A4  085A               	movf	(_battery^(0+256)+58),w
  8883     01A5  0140               	movlb	0	; select bank0
  8884     01A6  00CF               	movwf	??_main
  8885     01A7  01D0               	clrf	??_main+1
  8886     01A8  35CF               	lslf	??_main,f
  8887     01A9  0DD0               	rlf	??_main+1,f
  8888     01AA  3044               	movlw	low (_battery+36)
  8889     01AB  00D1               	movwf	??_main+2
  8890     01AC  3001               	movlw	high (_battery+36)
  8891     01AD  00D2               	movwf	??_main+3
  8892     01AE  084F               	movf	??_main,w
  8893     01AF  0751               	addwf	??_main+2,w
  8894     01B0  0086               	movwf	6
  8895     01B1  0850               	movf	??_main+1,w
  8896     01B2  3D52               	addwfc	??_main+3,w
  8897     01B3  0087               	movwf	7
  8898     01B4  3F40               	moviw [0]fsr1
  8899     01B5  00D3               	movwf	??_main+4
  8900     01B6  3F41               	moviw [1]fsr1
  8901     01B7  00D4               	movwf	??_main+5
  8902     01B8  0859               	movf	_status+3,w
  8903     01B9  3A80               	xorlw	128
  8904     01BA  00D5               	movwf	??_main+6
  8905     01BB  0854               	movf	??_main+5,w
  8906     01BC  3A80               	xorlw	128
  8907     01BD  0255               	subwf	??_main+6,w
  8908     01BE  1D03               	skipz
  8909     01BF  29C2               	goto	u3455
  8910     01C0  0853               	movf	??_main+4,w
  8911     01C1  0258               	subwf	_status+2,w
  8912     01C2                     u3455:
  8913     01C2  1803               	skipnc
  8914     01C3  29D6               	goto	l5573
  8915                           
  8916                           ;main.c: 191:             {;main.c: 192:                 status.chrg = 0;
  8917     01C4  0140               	movlb	0	; select bank0
  8918     01C5  01DB               	clrf	_status+5
  8919     01C6  29D6               	goto	l5573
  8920     01C7                     l5569:
  8921     01C7  0140               	movlb	0	; select bank0
  8922     01C8  0857               	movf	_status+1,w
  8923     01C9  0142               	movlb	2	; select bank2
  8924     01CA  0242               	subwf	((_battery+1)^(0+256)+33),w
  8925     01CB  1D03               	skipz
  8926     01CC  29D1               	goto	u3465
  8927     01CD  0140               	movlb	0	; select bank0
  8928     01CE  0856               	movf	_status,w
  8929     01CF  0142               	movlb	2	; select bank2
  8930     01D0  0241               	subwf	(_battery^(0+256)+33),w
  8931     01D1                     u3465:
  8932     01D1  1803               	skipnc
  8933     01D2  29D6               	goto	l5573
  8934                           
  8935                           ;main.c: 196:         {;main.c: 197:             status.chrg = 1;
  8936     01D3  3001               	movlw	1
  8937     01D4  0140               	movlb	0	; select bank0
  8938     01D5  00DB               	movwf	_status+5
  8939     01D6                     l5573:
  8940                           
  8941                           ;main.c: 200:         if(battery.sensor_data.voltage.hist[battery.sensor_data.voltage.pW
      +                          rite] > 2750)
  8942     01D6  0142               	movlb	2	; select bank2
  8943     01D7  0843               	movf	(_battery^(0+256)+35),w
  8944     01D8  0140               	movlb	0	; select bank0
  8945     01D9  00CF               	movwf	??_main
  8946     01DA  01D0               	clrf	??_main+1
  8947     01DB  35CF               	lslf	??_main,f
  8948     01DC  0DD0               	rlf	??_main+1,f
  8949     01DD  302D               	movlw	low (_battery+13)
  8950     01DE  00D1               	movwf	??_main+2
  8951     01DF  3001               	movlw	high (_battery+13)
  8952     01E0  00D2               	movwf	??_main+3
  8953     01E1  084F               	movf	??_main,w
  8954     01E2  0751               	addwf	??_main+2,w
  8955     01E3  0086               	movwf	6
  8956     01E4  0850               	movf	??_main+1,w
  8957     01E5  3D52               	addwfc	??_main+3,w
  8958     01E6  0087               	movwf	7
  8959     01E7  3F40               	moviw [0]fsr1
  8960     01E8  00D3               	movwf	??_main+4
  8961     01E9  3F41               	moviw [1]fsr1
  8962     01EA  00D4               	movwf	??_main+5
  8963     01EB  0854               	movf	??_main+5,w
  8964     01EC  3A80               	xorlw	128
  8965     01ED  00D5               	movwf	??_main+6
  8966     01EE  308A               	movlw	138
  8967     01EF  0255               	subwf	??_main+6,w
  8968     01F0  1D03               	skipz
  8969     01F1  29F4               	goto	u3475
  8970     01F2  30BF               	movlw	191
  8971     01F3  0253               	subwf	??_main+4,w
  8972     01F4                     u3475:
  8973     01F4  1C03               	skipc
  8974     01F5  29F9               	goto	l5577
  8975                           
  8976                           ;main.c: 201:         {;main.c: 202:             status.uvp=0;
  8977     01F6  0140               	movlb	0	; select bank0
  8978     01F7  01DC               	clrf	_status+6
  8979                           
  8980                           ;main.c: 203:         }
  8981     01F8  28A9               	goto	l1050
  8982     01F9                     l5577:
  8983     01F9  0142               	movlb	2	; select bank2
  8984     01FA  0843               	movf	(_battery^(0+256)+35),w
  8985     01FB  0140               	movlb	0	; select bank0
  8986     01FC  00CF               	movwf	??_main
  8987     01FD  01D0               	clrf	??_main+1
  8988     01FE  35CF               	lslf	??_main,f
  8989     01FF  0DD0               	rlf	??_main+1,f
  8990     0200  302D               	movlw	low (_battery+13)
  8991     0201  00D1               	movwf	??_main+2
  8992     0202  3001               	movlw	high (_battery+13)
  8993     0203  00D2               	movwf	??_main+3
  8994     0204  084F               	movf	??_main,w
  8995     0205  0751               	addwf	??_main+2,w
  8996     0206  0086               	movwf	6
  8997     0207  0850               	movf	??_main+1,w
  8998     0208  3D52               	addwfc	??_main+3,w
  8999     0209  0087               	movwf	7
  9000     020A  3F40               	moviw [0]fsr1
  9001     020B  00D3               	movwf	??_main+4
  9002     020C  3F41               	moviw [1]fsr1
  9003     020D  00D4               	movwf	??_main+5
  9004     020E  0854               	movf	??_main+5,w
  9005     020F  3A80               	xorlw	128
  9006     0210  00D5               	movwf	??_main+6
  9007     0211  3089               	movlw	137
  9008     0212  0255               	subwf	??_main+6,w
  9009     0213  1D03               	skipz
  9010     0214  2A17               	goto	u3485
  9011     0215  30C4               	movlw	196
  9012     0216  0253               	subwf	??_main+4,w
  9013     0217                     u3485:
  9014     0217  1803               	skipnc
  9015     0218  28A9               	goto	l1050
  9016                           
  9017                           ;main.c: 205:         {;main.c: 206:             status.uvp=1;
  9018     0219  3001               	movlw	1
  9019     021A  0140               	movlb	0	; select bank0
  9020     021B  00DC               	movwf	_status+6
  9021     021C  28A9               	goto	l1050
  9022     021D                     __end_of_main:
  9023                           
  9024                           	psect	text1
  9025     0E03                     __ptext1:	
  9026 ;; *************** function _stringCompare *****************
  9027 ;; Defined at:
  9028 ;;		line 47 in file "device.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;  str             2    0[BANK0 ] PTR const unsigned char 
  9031 ;;		 -> main@packet$address(3), main@packet(11), 
  9032 ;;  buf             2    2[BANK0 ] PTR const unsigned char 
  9033 ;;		 -> cons$sensor_info(8), battery$sensor_info(8), panel$sensor_info(8), cons$sensor_info$codename$address(3), 
  9034 ;;		 -> cons$sensor_info$codename(5), cons(59), battery$sensor_info$codename$address(3), battery$sensor_info$codename(5)
      +, 
  9035 ;;		 -> battery(59), panel$sensor_info$codename$address(3), panel$sensor_info$codename(5), panel(59), 
  9036 ;;  byte_count      2    4[BANK0 ] int 
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;  idx             2    6[BANK0 ] int 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  2    0[BANK0 ] int 
  9041 ;; Registers used:
  9042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2
  9043 ;; Tracked objects:
  9044 ;;		On entry : 3F/0
  9045 ;;		On exit  : 3F/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9048 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;Total ram usage:        9 bytes
  9053 ;; Hardware stack levels used: 1
  9054 ;; Hardware stack levels required when called: 4
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		_main
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062     0E03                     _stringCompare:	
  9063                           ;psect for function _stringCompare
  9064                           
  9065                           
  9066                           ;device.c: 47: int stringCompare(const char* str, const char* buf, int byte_count);devic
      +                          e.c: 48: {;device.c: 49:  int idx = 0;
  9067                           
  9068                           ;incstack = 0
  9069                           ; Regs used in _stringCompare: [wreg-fsr1h+status,2]
  9070     0E03  01A6               	clrf	stringCompare@idx
  9071     0E04  01A7               	clrf	stringCompare@idx+1
  9072                           
  9073                           ;device.c: 51:  for(idx = 0; idx < byte_count; idx++)
  9074     0E05  01A6               	clrf	stringCompare@idx
  9075     0E06  01A7               	clrf	stringCompare@idx+1
  9076     0E07                     l1163:
  9077     0E07  0827               	movf	stringCompare@idx+1,w
  9078     0E08  3A80               	xorlw	128
  9079     0E09  00F4               	movwf	??_stringCompare
  9080     0E0A  0825               	movf	stringCompare@byte_count+1,w
  9081     0E0B  3A80               	xorlw	128
  9082     0E0C  0274               	subwf	??_stringCompare,w
  9083     0E0D  1D03               	skipz
  9084     0E0E  2E11               	goto	u3315
  9085     0E0F  0824               	movf	stringCompare@byte_count,w
  9086     0E10  0226               	subwf	stringCompare@idx,w
  9087     0E11                     u3315:
  9088     0E11  1803               	btfsc	3,0
  9089     0E12  2E32               	goto	l5451
  9090                           
  9091                           ;device.c: 52:  {;device.c: 53:   if(*str != *buf)
  9092     0E13  0140               	movlb	0	; select bank0
  9093     0E14  0822               	movf	stringCompare@buf,w
  9094     0E15  0086               	movwf	6
  9095     0E16  0823               	movf	stringCompare@buf+1,w
  9096     0E17  0087               	movwf	7
  9097     0E18  0820               	movf	stringCompare@str,w
  9098     0E19  0084               	movwf	4
  9099     0E1A  0821               	movf	stringCompare@str+1,w
  9100     0E1B  0085               	movwf	5
  9101     0E1C  0800               	movf	0,w
  9102     0E1D  0601               	xorwf	1,w
  9103     0E1E  1903               	skipnz
  9104     0E1F  2E25               	goto	l5449
  9105                           
  9106                           ;device.c: 54:    return -1;
  9107     0E20  30FF               	movlw	255
  9108     0E21  00A0               	movwf	?_stringCompare
  9109     0E22  30FF               	movlw	255
  9110     0E23  00A1               	movwf	?_stringCompare+1
  9111     0E24  0008               	return
  9112     0E25                     l5449:
  9113                           
  9114                           ;device.c: 56:   {;device.c: 57:    str++;
  9115     0E25  3001               	movlw	1
  9116     0E26  07A0               	addwf	stringCompare@str,f
  9117     0E27  3000               	movlw	0
  9118     0E28  3DA1               	addwfc	stringCompare@str+1,f
  9119                           
  9120                           ;device.c: 58:    buf++;
  9121     0E29  3001               	movlw	1
  9122     0E2A  07A2               	addwf	stringCompare@buf,f
  9123     0E2B  3000               	movlw	0
  9124     0E2C  3DA3               	addwfc	stringCompare@buf+1,f
  9125                           
  9126                           ;device.c: 60:  }
  9127                           
  9128                           ;device.c: 59:   }
  9129     0E2D  3001               	movlw	1
  9130     0E2E  07A6               	addwf	stringCompare@idx,f
  9131     0E2F  3000               	movlw	0
  9132     0E30  3DA7               	addwfc	stringCompare@idx+1,f
  9133     0E31  2E07               	goto	l1163
  9134     0E32                     l5451:
  9135                           
  9136                           ;device.c: 61:  return 0;
  9137     0E32  0140               	movlb	0	; select bank0
  9138     0E33  01A0               	clrf	?_stringCompare
  9139     0E34  01A1               	clrf	?_stringCompare+1
  9140     0E35  0008               	return
  9141     0E36                     __end_of_stringCompare:
  9142                           
  9143                           	psect	text2
  9144     0BBF                     __ptext2:	
  9145 ;; *************** function _receiveData *****************
  9146 ;; Defined at:
  9147 ;;		line 49 in file "communication.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;  data            2    0[BANK0 ] PTR unsigned char 
  9150 ;;		 -> main@packet(11), 
  9151 ;;  maxdata         1    2[BANK0 ] unsigned char 
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;  charCount       1    4[BANK0 ] unsigned char 
  9154 ;;  c               1    3[BANK0 ] unsigned char 
  9155 ;; Return value:  Size  Location     Type
  9156 ;;                  1    wreg      unsigned char 
  9157 ;; Registers used:
  9158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9159 ;; Tracked objects:
  9160 ;;		On entry : 3F/0
  9161 ;;		On exit  : 3F/0
  9162 ;;		Unchanged: 0/0
  9163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9164 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;Total ram usage:        5 bytes
  9169 ;; Hardware stack levels used: 1
  9170 ;; Hardware stack levels required when called: 5
  9171 ;; This function calls:
  9172 ;;		_EUSART1_Read
  9173 ;; This function is called by:
  9174 ;;		_main
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178     0BBF                     _receiveData:	
  9179                           ;psect for function _receiveData
  9180                           
  9181                           
  9182                           ;communication.c: 49: uint8_t receiveData(char *data, uint8_t maxdata);communication.c: 
      +                          50: {;communication.c: 51:     uint8_t charCount = 0;
  9183                           
  9184                           ;incstack = 0
  9185                           ; Regs used in _receiveData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9186     0BBF  01A4               	clrf	receiveData@charCount
  9187     0BC0                     l5425:
  9188                           
  9189                           ;communication.c: 55:     {;communication.c: 56:         c = EUSART1_Read();
  9190     0BC0  318A  2223  318B   	fcall	_EUSART1_Read
  9191     0BC3  00A3               	movwf	receiveData@c
  9192                           
  9193                           ;communication.c: 57:         if(charCount <= maxdata)
  9194     0BC4  0824               	movf	receiveData@charCount,w
  9195     0BC5  0222               	subwf	receiveData@maxdata,w
  9196     0BC6  1C03               	skipc
  9197     0BC7  2BD2               	goto	l5433
  9198                           
  9199                           ;communication.c: 58:         {;communication.c: 59:             data[charCount++] = c;
  9200     0BC8  0824               	movf	receiveData@charCount,w
  9201     0BC9  0720               	addwf	receiveData@data,w
  9202     0BCA  0086               	movwf	6
  9203     0BCB  3000               	movlw	0
  9204     0BCC  3D21               	addwfc	receiveData@data+1,w
  9205     0BCD  0087               	movwf	7
  9206     0BCE  0823               	movf	receiveData@c,w
  9207     0BCF  0081               	movwf	1
  9208     0BD0  3001               	movlw	1
  9209     0BD1  07A4               	addwf	receiveData@charCount,f
  9210     0BD2                     l5433:
  9211                           
  9212                           ;communication.c: 61:     }while(c != 0x0A);
  9213     0BD2  300A               	movlw	10
  9214     0BD3  0623               	xorwf	receiveData@c,w
  9215     0BD4  1D03               	btfss	3,2
  9216     0BD5  2BC0               	goto	l5425
  9217                           
  9218                           ;communication.c: 63:     data[charCount] = 0;
  9219     0BD6  0824               	movf	receiveData@charCount,w
  9220     0BD7  0720               	addwf	receiveData@data,w
  9221     0BD8  0086               	movwf	6
  9222     0BD9  3000               	movlw	0
  9223     0BDA  3D21               	addwfc	receiveData@data+1,w
  9224     0BDB  0087               	movwf	7
  9225     0BDC  0181               	clrf	1
  9226     0BDD  0008               	return
  9227     0BDE                     __end_of_receiveData:
  9228                           
  9229                           	psect	text3
  9230     0A23                     __ptext3:	
  9231 ;; *************** function _EUSART1_Read *****************
  9232 ;; Defined at:
  9233 ;;		line 139 in file "mcc_generated_files/eusart1.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;		None
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;  readValue       1    4[COMMON] unsigned char 
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  1    wreg      unsigned char 
  9240 ;; Registers used:
  9241 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9242 ;; Tracked objects:
  9243 ;;		On entry : 3F/0
  9244 ;;		On exit  : 3F/0
  9245 ;;		Unchanged: 3F/0
  9246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;Total ram usage:        1 bytes
  9252 ;; Hardware stack levels used: 1
  9253 ;; Hardware stack levels required when called: 4
  9254 ;; This function calls:
  9255 ;;		Nothing
  9256 ;; This function is called by:
  9257 ;;		_receiveData
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261     0A23                     _EUSART1_Read:	
  9262                           ;psect for function _EUSART1_Read
  9263                           
  9264     0A23                     l5141:	
  9265                           ;mcc_generated_files/eusart1.c: 148:     while(!(eusart1RxHead != eusart1RxTail));
  9266                           
  9267                           ;incstack = 0
  9268                           ; Regs used in _EUSART1_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  9269                           
  9270     0A23  0879               	movf	_eusart1RxHead,w	;volatile
  9271     0A24  0678               	xorwf	_eusart1RxTail,w	;volatile
  9272     0A25  1903               	skipnz
  9273     0A26  2A23               	goto	l5141
  9274                           
  9275                           ;mcc_generated_files/eusart1.c: 150:     readValue = eusart1RxBuffer[eusart1RxTail];
  9276     0A27  0878               	movf	_eusart1RxTail,w
  9277     0A28  3EA0               	addlw	(low (_eusart1RxBuffer| (0+512)))& (0+255)
  9278     0A29  0086               	movwf	6
  9279     0A2A  3002               	movlw	2	; select bank5/6
  9280     0A2B  0087               	movwf	7
  9281     0A2C  0801               	movf	1,w
  9282     0A2D  00F4               	movwf	EUSART1_Read@readValue
  9283                           
  9284                           ;mcc_generated_files/eusart1.c: 151:     eusart1RxTail = (eusart1RxTail + 1) % 64;
  9285     0A2E  0878               	movf	_eusart1RxTail,w	;volatile
  9286     0A2F  3E01               	addlw	1
  9287     0A30  393F               	andlw	63
  9288     0A31  00F8               	movwf	_eusart1RxTail	;volatile
  9289                           
  9290                           ;mcc_generated_files/eusart1.c: 156:     return readValue;
  9291     0A32  0874               	movf	EUSART1_Read@readValue,w
  9292     0A33  0008               	return
  9293     0A34                     __end_of_EUSART1_Read:
  9294                           
  9295                           	psect	text4
  9296     021D                     __ptext4:	
  9297 ;; *************** function _processCommand *****************
  9298 ;; Defined at:
  9299 ;;		line 182 in file "sensor.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;  command         1    wreg     unsigned char 
  9302 ;;  data            2   38[BANK0 ] PTR unsigned char 
  9303 ;;		 -> main@packet(11), 
  9304 ;;  sensor          2   40[BANK0 ] PTR struct .
  9305 ;;		 -> cons(59), battery(59), panel(59), 
  9306 ;; Auto vars:     Size  Location     Type
  9307 ;;  command         1   46[BANK0 ] unsigned char 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;                  1    wreg      void 
  9310 ;; Registers used:
  9311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9312 ;; Tracked objects:
  9313 ;;		On entry : 3F/2
  9314 ;;		On exit  : 34/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9317 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;Total ram usage:        9 bytes
  9322 ;; Hardware stack levels used: 1
  9323 ;; Hardware stack levels required when called: 15
  9324 ;; This function calls:
  9325 ;;		_TMR0_Reload
  9326 ;;		_getHis
  9327 ;;		_getINA220Data
  9328 ;;		_getMax
  9329 ;;		_getMed
  9330 ;;		_getMin
  9331 ;;		_sendSensorData
  9332 ;;		_sendSensorInfo
  9333 ;;		_stringToInt16
  9334 ;;		_stringlen
  9335 ;; This function is called by:
  9336 ;;		_main
  9337 ;; This function uses a non-reentrant model
  9338 ;;
  9339                           
  9340     021D                     _processCommand:	
  9341                           ;psect for function _processCommand
  9342                           
  9343                           
  9344                           ;incstack = 0
  9345                           ; Regs used in _processCommand: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9346                           ;processCommand@command stored from wreg
  9347     021D  0140               	movlb	0	; select bank0
  9348     021E  00CE               	movwf	processCommand@command
  9349                           
  9350                           ;sensor.c: 182: void processCommand(char command, char* data, sensor_t *sensor);sensor.c
      +                          : 183: {;sensor.c: 184: switch(command)
  9351     021F  2B6C               	goto	l5493
  9352     0220                     l5457:
  9353                           
  9354                           ;sensor.c: 187:         sendSensorInfo(&sensor->sensor_info);
  9355     0220  0849               	movf	processCommand@sensor+1,w
  9356     0221  00AE               	movwf	sendSensorInfo@sensor_info+1
  9357     0222  0848               	movf	processCommand@sensor,w
  9358     0223  00AD               	movwf	sendSensorInfo@sensor_info
  9359     0224  3187  2791         	fcall	_sendSensorInfo
  9360                           
  9361                           ;sensor.c: 188:         break;
  9362     0226  0008               	return
  9363     0227                     l5459:
  9364                           
  9365                           ;sensor.c: 190:         getINA220Data(sensor);
  9366     0227  0849               	movf	processCommand@sensor+1,w
  9367     0228  00BE               	movwf	getINA220Data@device+1
  9368     0229  0848               	movf	processCommand@sensor,w
  9369     022A  00BD               	movwf	getINA220Data@device
  9370     022B  3183  2393         	fcall	_getINA220Data
  9371                           
  9372                           ;sensor.c: 191:         break;
  9373     022D  0008               	return
  9374     022E                     l5461:
  9375                           
  9376                           ;sensor.c: 193:         sendSensorData(sensor->sensor_data.voltage.hist[sensor->sensor_d
      +                          ata.voltage.pWrite]);
  9377     022E  0848               	movf	processCommand@sensor,w
  9378     022F  3E23               	addlw	35
  9379     0230  0086               	movwf	6
  9380     0231  3000               	movlw	0
  9381     0232  3D49               	addwfc	processCommand@sensor+1,w
  9382     0233  0087               	movwf	7
  9383     0234  0801               	movf	1,w
  9384     0235  00CA               	movwf	??_processCommand
  9385     0236  01CB               	clrf	??_processCommand+1
  9386     0237  35CA               	lslf	??_processCommand,f
  9387     0238  0DCB               	rlf	??_processCommand+1,f
  9388     0239  084A               	movf	??_processCommand,w
  9389     023A  0748               	addwf	processCommand@sensor,w
  9390     023B  00CC               	movwf	??_processCommand+2
  9391     023C  084B               	movf	??_processCommand+1,w
  9392     023D  3D49               	addwfc	processCommand@sensor+1,w
  9393     023E  00CD               	movwf	??_processCommand+3
  9394     023F  084C               	movf	??_processCommand+2,w
  9395     0240  0086               	movwf	6
  9396     0241  084D               	movf	??_processCommand+3,w
  9397     0242  0087               	movwf	7
  9398     0243  314D               	addfsr 1,13
  9399     0244  3F40               	moviw [0]fsr1
  9400     0245  00B4               	movwf	sendSensorData@sensor_data
  9401     0246  3F41               	moviw [1]fsr1
  9402     0247  00B5               	movwf	sendSensorData@sensor_data+1
  9403     0248  318E  26D6  3182   	fcall	_sendSensorData
  9404                           
  9405                           ;sensor.c: 194:         sendSensorData(sensor->sensor_data.current.hist[sensor->sensor_d
      +                          ata.current.pWrite]);
  9406     024B  0848               	movf	processCommand@sensor,w
  9407     024C  3E3A               	addlw	58
  9408     024D  0086               	movwf	6
  9409     024E  3000               	movlw	0
  9410     024F  3D49               	addwfc	processCommand@sensor+1,w
  9411     0250  0087               	movwf	7
  9412     0251  0801               	movf	1,w
  9413     0252  00CA               	movwf	??_processCommand
  9414     0253  01CB               	clrf	??_processCommand+1
  9415     0254  35CA               	lslf	??_processCommand,f
  9416     0255  0DCB               	rlf	??_processCommand+1,f
  9417     0256  084A               	movf	??_processCommand,w
  9418     0257  0748               	addwf	processCommand@sensor,w
  9419     0258  00CC               	movwf	??_processCommand+2
  9420     0259  084B               	movf	??_processCommand+1,w
  9421     025A  3D49               	addwfc	processCommand@sensor+1,w
  9422     025B  00CD               	movwf	??_processCommand+3
  9423     025C  084C               	movf	??_processCommand+2,w
  9424     025D  3E24               	addlw	36
  9425     025E  0086               	movwf	6
  9426     025F  3000               	movlw	0
  9427     0260  3D4D               	addwfc	??_processCommand+3,w
  9428     0261  0087               	movwf	7
  9429     0262  3F40               	moviw [0]fsr1
  9430     0263  00B4               	movwf	sendSensorData@sensor_data
  9431     0264  3F41               	moviw [1]fsr1
  9432     0265  00B5               	movwf	sendSensorData@sensor_data+1
  9433     0266  318E  26D6         	fcall	_sendSensorData
  9434                           
  9435                           ;sensor.c: 195:         break;
  9436     0268  0008               	return
  9437     0269                     l5463:
  9438                           
  9439                           ;sensor.c: 197:         getMax(&sensor->sensor_data.voltage);
  9440     0269  0848               	movf	processCommand@sensor,w
  9441     026A  3E0D               	addlw	13
  9442     026B  00F4               	movwf	getMax@data
  9443     026C  3000               	movlw	0
  9444     026D  3D49               	addwfc	processCommand@sensor+1,w
  9445     026E  00F5               	movwf	getMax@data+1
  9446     026F  3186  26F4  3182   	fcall	_getMax
  9447                           
  9448                           ;sensor.c: 198:         getMax(&sensor->sensor_data.current);
  9449     0272  0848               	movf	processCommand@sensor,w
  9450     0273  3E24               	addlw	36
  9451     0274  00F4               	movwf	getMax@data
  9452     0275  3000               	movlw	0
  9453     0276  3D49               	addwfc	processCommand@sensor+1,w
  9454     0277  00F5               	movwf	getMax@data+1
  9455     0278  3186  26F4  3182   	fcall	_getMax
  9456                           
  9457                           ;sensor.c: 199:         sendSensorData(sensor->sensor_data.voltage.max);
  9458     027B  0848               	movf	processCommand@sensor,w
  9459     027C  0086               	movwf	6
  9460     027D  0849               	movf	processCommand@sensor+1,w
  9461     027E  0087               	movwf	7
  9462     027F  315D               	addfsr 1,29
  9463     0280  3F40               	moviw [0]fsr1
  9464     0281  00B4               	movwf	sendSensorData@sensor_data
  9465     0282  3F41               	moviw [1]fsr1
  9466     0283  00B5               	movwf	sendSensorData@sensor_data+1
  9467     0284  318E  26D6  3182   	fcall	_sendSensorData
  9468                           
  9469                           ;sensor.c: 200:         sendSensorData(sensor->sensor_data.current.max);
  9470     0287  0848               	movf	processCommand@sensor,w
  9471     0288  3E34               	addlw	52
  9472     0289  0086               	movwf	6
  9473     028A  3000               	movlw	0
  9474     028B  3D49               	addwfc	processCommand@sensor+1,w
  9475     028C  0087               	movwf	7
  9476     028D  3F40               	moviw [0]fsr1
  9477     028E  00B4               	movwf	sendSensorData@sensor_data
  9478     028F  3F41               	moviw [1]fsr1
  9479     0290  00B5               	movwf	sendSensorData@sensor_data+1
  9480     0291  318E  26D6         	fcall	_sendSensorData
  9481                           
  9482                           ;sensor.c: 201:         break;
  9483     0293  0008               	return
  9484     0294                     l5465:
  9485                           
  9486                           ;sensor.c: 203:         getMin(&sensor->sensor_data.voltage);
  9487     0294  0848               	movf	processCommand@sensor,w
  9488     0295  3E0D               	addlw	13
  9489     0296  00F4               	movwf	getMin@data
  9490     0297  3000               	movlw	0
  9491     0298  3D49               	addwfc	processCommand@sensor+1,w
  9492     0299  00F5               	movwf	getMin@data+1
  9493     029A  3186  26A5  3182   	fcall	_getMin
  9494                           
  9495                           ;sensor.c: 204:         getMin(&sensor->sensor_data.current);
  9496     029D  0848               	movf	processCommand@sensor,w
  9497     029E  3E24               	addlw	36
  9498     029F  00F4               	movwf	getMin@data
  9499     02A0  3000               	movlw	0
  9500     02A1  3D49               	addwfc	processCommand@sensor+1,w
  9501     02A2  00F5               	movwf	getMin@data+1
  9502     02A3  3186  26A5  3182   	fcall	_getMin
  9503                           
  9504                           ;sensor.c: 205:         sendSensorData(sensor->sensor_data.voltage.min);
  9505     02A6  0848               	movf	processCommand@sensor,w
  9506     02A7  0086               	movwf	6
  9507     02A8  0849               	movf	processCommand@sensor+1,w
  9508     02A9  0087               	movwf	7
  9509     02AA  315F               	addfsr 1,31
  9510     02AB  3F40               	moviw [0]fsr1
  9511     02AC  00B4               	movwf	sendSensorData@sensor_data
  9512     02AD  3F41               	moviw [1]fsr1
  9513     02AE  00B5               	movwf	sendSensorData@sensor_data+1
  9514     02AF  318E  26D6  3182   	fcall	_sendSensorData
  9515                           
  9516                           ;sensor.c: 206:         sendSensorData(sensor->sensor_data.current.min);
  9517     02B2  0848               	movf	processCommand@sensor,w
  9518     02B3  3E36               	addlw	54
  9519     02B4  0086               	movwf	6
  9520     02B5  3000               	movlw	0
  9521     02B6  3D49               	addwfc	processCommand@sensor+1,w
  9522     02B7  0087               	movwf	7
  9523     02B8  3F40               	moviw [0]fsr1
  9524     02B9  00B4               	movwf	sendSensorData@sensor_data
  9525     02BA  3F41               	moviw [1]fsr1
  9526     02BB  00B5               	movwf	sendSensorData@sensor_data+1
  9527     02BC  318E  26D6         	fcall	_sendSensorData
  9528                           
  9529                           ;sensor.c: 207:         break;
  9530     02BE  0008               	return
  9531     02BF                     l5467:
  9532                           
  9533                           ;sensor.c: 209:         getMed(&sensor->sensor_data.voltage);
  9534     02BF  0848               	movf	processCommand@sensor,w
  9535     02C0  3E0D               	addlw	13
  9536     02C1  00AE               	movwf	getMed@data
  9537     02C2  3000               	movlw	0
  9538     02C3  3D49               	addwfc	processCommand@sensor+1,w
  9539     02C4  00AF               	movwf	getMed@data+1
  9540     02C5  3185  25F9  3182   	fcall	_getMed
  9541                           
  9542                           ;sensor.c: 210:         getMed(&sensor->sensor_data.current);
  9543     02C8  0848               	movf	processCommand@sensor,w
  9544     02C9  3E24               	addlw	36
  9545     02CA  00AE               	movwf	getMed@data
  9546     02CB  3000               	movlw	0
  9547     02CC  3D49               	addwfc	processCommand@sensor+1,w
  9548     02CD  00AF               	movwf	getMed@data+1
  9549     02CE  3185  25F9  3182   	fcall	_getMed
  9550                           
  9551                           ;sensor.c: 211:         sendSensorData(sensor->sensor_data.voltage.med);
  9552     02D1  0848               	movf	processCommand@sensor,w
  9553     02D2  3E21               	addlw	33
  9554     02D3  0086               	movwf	6
  9555     02D4  3000               	movlw	0
  9556     02D5  3D49               	addwfc	processCommand@sensor+1,w
  9557     02D6  0087               	movwf	7
  9558     02D7  3F40               	moviw [0]fsr1
  9559     02D8  00B4               	movwf	sendSensorData@sensor_data
  9560     02D9  3F41               	moviw [1]fsr1
  9561     02DA  00B5               	movwf	sendSensorData@sensor_data+1
  9562     02DB  318E  26D6  3182   	fcall	_sendSensorData
  9563                           
  9564                           ;sensor.c: 212:         sendSensorData(sensor->sensor_data.current.med);
  9565     02DE  0848               	movf	processCommand@sensor,w
  9566     02DF  3E38               	addlw	56
  9567     02E0  0086               	movwf	6
  9568     02E1  3000               	movlw	0
  9569     02E2  3D49               	addwfc	processCommand@sensor+1,w
  9570     02E3  0087               	movwf	7
  9571     02E4  3F40               	moviw [0]fsr1
  9572     02E5  00B4               	movwf	sendSensorData@sensor_data
  9573     02E6  3F41               	moviw [1]fsr1
  9574     02E7  00B5               	movwf	sendSensorData@sensor_data+1
  9575     02E8  318E  26D6         	fcall	_sendSensorData
  9576                           
  9577                           ;sensor.c: 213:         break;
  9578     02EA  0008               	return
  9579     02EB                     l5473:
  9580                           
  9581                           ;sensor.c: 215:         getHis(&sensor->sensor_data.voltage);
  9582     02EB  0848               	movf	processCommand@sensor,w
  9583     02EC  3E0D               	addlw	13
  9584     02ED  00C0               	movwf	getHis@data
  9585     02EE  3000               	movlw	0
  9586     02EF  3D49               	addwfc	processCommand@sensor+1,w
  9587     02F0  00C1               	movwf	getHis@data+1
  9588     02F1  3187  27D9  3182   	fcall	_getHis
  9589                           
  9590                           ;sensor.c: 216:         getHis(&sensor->sensor_data.current);
  9591     02F4  0848               	movf	processCommand@sensor,w
  9592     02F5  3E24               	addlw	36
  9593     02F6  00C0               	movwf	getHis@data
  9594     02F7  3000               	movlw	0
  9595     02F8  3D49               	addwfc	processCommand@sensor+1,w
  9596     02F9  00C1               	movwf	getHis@data+1
  9597     02FA  3187  27D9         	fcall	_getHis
  9598                           
  9599                           ;sensor.c: 217:         break;
  9600     02FC  0008               	return
  9601     02FD                     l5475:
  9602                           
  9603                           ;sensor.c: 219:         timer0ReloadVal16bit = stringToInt16(data,stringlen(data));
  9604     02FD  0847               	movf	processCommand@data+1,w
  9605     02FE  00A5               	movwf	stringToInt16@string+1
  9606     02FF  0846               	movf	processCommand@data,w
  9607     0300  00A4               	movwf	stringToInt16@string
  9608     0301  0847               	movf	processCommand@data+1,w
  9609     0302  00F5               	movwf	stringlen@str+1
  9610     0303  0846               	movf	processCommand@data,w
  9611     0304  00F4               	movwf	stringlen@str
  9612     0305  318A  22EA  3182   	fcall	_stringlen
  9613     0308  00A6               	movwf	stringToInt16@strlen
  9614     0309  3185  258E  3182   	fcall	_stringToInt16
  9615     030C  0825               	movf	?_stringToInt16+1,w
  9616     030D  00E5               	movwf	_timer0ReloadVal16bit+1	;volatile
  9617     030E  0824               	movf	?_stringToInt16,w
  9618     030F  00E4               	movwf	_timer0ReloadVal16bit	;volatile
  9619                           
  9620                           ;sensor.c: 220:         TMR0_Reload();
  9621     0310  3189  2172         	fcall	_TMR0_Reload
  9622                           
  9623                           ;sensor.c: 221:         break;
  9624     0312  0008               	return
  9625     0313                     l5479:
  9626                           
  9627                           ;sensor.c: 226:             status.beacon = 0;
  9628     0313  01DA               	clrf	_status+4
  9629                           
  9630                           ;sensor.c: 227:             break;
  9631     0314  0008               	return
  9632     0315                     l1295:	
  9633                           ;sensor.c: 228:         case '1':
  9634                           
  9635                           
  9636                           ;sensor.c: 229:             status.beacon = 1;
  9637     0315  3001               	movlw	1
  9638     0316  00DA               	movwf	_status+4
  9639                           
  9640                           ;sensor.c: 230:             break;
  9641     0317  0008               	return
  9642     0318                     l5483:
  9643     0318  0846               	movf	processCommand@data,w
  9644     0319  0086               	movwf	6
  9645     031A  0847               	movf	processCommand@data+1,w
  9646     031B  0087               	movwf	7
  9647     031C  0801               	movf	1,w
  9648                           
  9649                           ; Switch size 1, requested type "simple"
  9650                           ; Number of cases is 2, Range of values is 48 to 49
  9651                           ; switch strategies available:
  9652                           ; Name         Instructions Cycles
  9653                           ; simple_byte            7     4 (average)
  9654                           ; direct_byte           13     9 (fixed)
  9655                           ; jumptable            263     9 (fixed)
  9656                           ;	Chosen strategy is simple_byte
  9657     031D  3A30               	xorlw	48	; case 48
  9658     031E  1903               	skipnz
  9659     031F  2B13               	goto	l5479
  9660     0320  3A01               	xorlw	1	; case 49
  9661     0321  1903               	skipnz
  9662     0322  2B15               	goto	l1295
  9663     0323  2B92               	goto	l1301
  9664     0324                     l5485:
  9665                           
  9666                           ;sensor.c: 236:         status.voltage_chrg_on = stringToInt16(data,stringlen(data));
  9667     0324  0847               	movf	processCommand@data+1,w
  9668     0325  00A5               	movwf	stringToInt16@string+1
  9669     0326  0846               	movf	processCommand@data,w
  9670     0327  00A4               	movwf	stringToInt16@string
  9671     0328  0847               	movf	processCommand@data+1,w
  9672     0329  00F5               	movwf	stringlen@str+1
  9673     032A  0846               	movf	processCommand@data,w
  9674     032B  00F4               	movwf	stringlen@str
  9675     032C  318A  22EA  3182   	fcall	_stringlen
  9676     032F  00A6               	movwf	stringToInt16@strlen
  9677     0330  3185  258E         	fcall	_stringToInt16
  9678     0332  0825               	movf	?_stringToInt16+1,w
  9679     0333  00D7               	movwf	_status+1
  9680     0334  0824               	movf	?_stringToInt16,w
  9681     0335  00D6               	movwf	_status
  9682                           
  9683                           ;sensor.c: 237:         break;
  9684     0336  0008               	return
  9685     0337                     l5487:
  9686                           
  9687                           ;sensor.c: 239:         status.curr_tail = stringToInt16(data,stringlen(data));
  9688     0337  0847               	movf	processCommand@data+1,w
  9689     0338  00A5               	movwf	stringToInt16@string+1
  9690     0339  0846               	movf	processCommand@data,w
  9691     033A  00A4               	movwf	stringToInt16@string
  9692     033B  0847               	movf	processCommand@data+1,w
  9693     033C  00F5               	movwf	stringlen@str+1
  9694     033D  0846               	movf	processCommand@data,w
  9695     033E  00F4               	movwf	stringlen@str
  9696     033F  318A  22EA  3182   	fcall	_stringlen
  9697     0342  00A6               	movwf	stringToInt16@strlen
  9698     0343  3185  258E         	fcall	_stringToInt16
  9699     0345  0825               	movf	?_stringToInt16+1,w
  9700     0346  00D9               	movwf	_status+3
  9701     0347  0824               	movf	?_stringToInt16,w
  9702     0348  00D8               	movwf	_status+2
  9703                           
  9704                           ;sensor.c: 240:         break;
  9705     0349  0008               	return
  9706     034A                     l5489:
  9707                           
  9708                           ;sensor.c: 242:         sendSensorData(status.voltage_chrg_on);
  9709     034A  0857               	movf	_status+1,w
  9710     034B  00B5               	movwf	sendSensorData@sensor_data+1
  9711     034C  0856               	movf	_status,w
  9712     034D  00B4               	movwf	sendSensorData@sensor_data
  9713     034E  318E  26D6  3182   	fcall	_sendSensorData
  9714                           
  9715                           ;sensor.c: 243:         sendSensorData(status.curr_tail);
  9716     0351  0859               	movf	_status+3,w
  9717     0352  00B5               	movwf	sendSensorData@sensor_data+1
  9718     0353  0858               	movf	_status+2,w
  9719     0354  00B4               	movwf	sendSensorData@sensor_data
  9720     0355  318E  26D6  3182   	fcall	_sendSensorData
  9721                           
  9722                           ;sensor.c: 244:         sendSensorData(status.beacon);
  9723     0358  085A               	movf	_status+4,w
  9724     0359  00CA               	movwf	??_processCommand
  9725     035A  01CB               	clrf	??_processCommand+1
  9726     035B  084A               	movf	??_processCommand,w
  9727     035C  00B4               	movwf	sendSensorData@sensor_data
  9728     035D  084B               	movf	??_processCommand+1,w
  9729     035E  00B5               	movwf	sendSensorData@sensor_data+1
  9730     035F  318E  26D6  3182   	fcall	_sendSensorData
  9731                           
  9732                           ;sensor.c: 245:         sendSensorData(status.chrg);
  9733     0362  085B               	movf	_status+5,w
  9734     0363  00CA               	movwf	??_processCommand
  9735     0364  01CB               	clrf	??_processCommand+1
  9736     0365  084A               	movf	??_processCommand,w
  9737     0366  00B4               	movwf	sendSensorData@sensor_data
  9738     0367  084B               	movf	??_processCommand+1,w
  9739     0368  00B5               	movwf	sendSensorData@sensor_data+1
  9740     0369  318E  26D6         	fcall	_sendSensorData
  9741                           
  9742                           ;sensor.c: 246:         break;
  9743     036B  0008               	return
  9744     036C                     l5493:
  9745     036C  084E               	movf	processCommand@command,w
  9746                           
  9747                           ; Switch size 1, requested type "simple"
  9748                           ; Number of cases is 12, Range of values is 66 to 109
  9749                           ; switch strategies available:
  9750                           ; Name         Instructions Cycles
  9751                           ; simple_byte           37    19 (average)
  9752                           ; direct_byte           97     9 (fixed)
  9753                           ; jumptable            263     9 (fixed)
  9754                           ;	Chosen strategy is simple_byte
  9755     036D  3A42               	xorlw	66	; case 66
  9756     036E  1903               	skipnz
  9757     036F  2B18               	goto	l5483
  9758     0370  3A01               	xorlw	1	; case 67
  9759     0371  1903               	skipnz
  9760     0372  2B24               	goto	l5485
  9761     0373  3A07               	xorlw	7	; case 68
  9762     0374  1903               	skipnz
  9763     0375  2A2E               	goto	l5461
  9764     0376  3A01               	xorlw	1	; case 69
  9765     0377  1903               	skipnz
  9766     0378  2B4A               	goto	l5489
  9767     0379  3A0D               	xorlw	13	; case 72
  9768     037A  1903               	skipnz
  9769     037B  2AEB               	goto	l5473
  9770     037C  3A01               	xorlw	1	; case 73
  9771     037D  1903               	skipnz
  9772     037E  2A20               	goto	l5457
  9773     037F  3A04               	xorlw	4	; case 77
  9774     0380  1903               	skipnz
  9775     0381  2A69               	goto	l5463
  9776     0382  3A1D               	xorlw	29	; case 80
  9777     0383  1903               	skipnz
  9778     0384  2ABF               	goto	l5467
  9779     0385  3A03               	xorlw	3	; case 83
  9780     0386  1903               	skipnz
  9781     0387  2A27               	goto	l5459
  9782     0388  3A07               	xorlw	7	; case 84
  9783     0389  1903               	skipnz
  9784     038A  2AFD               	goto	l5475
  9785     038B  3A3D               	xorlw	61	; case 105
  9786     038C  1903               	skipnz
  9787     038D  2B37               	goto	l5487
  9788     038E  3A04               	xorlw	4	; case 109
  9789     038F  1903               	skipnz
  9790     0390  2A94               	goto	l5465
  9791     0391  2B92               	goto	l1301
  9792     0392                     l1301:
  9793     0392  0008               	return
  9794     0393                     __end_of_processCommand:
  9795                           
  9796                           	psect	text5
  9797     058E                     __ptext5:	
  9798 ;; *************** function _stringToInt16 *****************
  9799 ;; Defined at:
  9800 ;;		line 201 in file "device.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;  string          2    4[BANK0 ] PTR unsigned char 
  9803 ;;		 -> main@packet(11), 
  9804 ;;  strlen          1    6[BANK0 ] unsigned char 
  9805 ;; Auto vars:     Size  Location     Type
  9806 ;;  result          2   10[BANK0 ] short 
  9807 ;;  multiple        2    8[BANK0 ] short 
  9808 ;;  sign            1    7[BANK0 ] char 
  9809 ;; Return value:  Size  Location     Type
  9810 ;;                  2    4[BANK0 ] short 
  9811 ;; Registers used:
  9812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9813 ;; Tracked objects:
  9814 ;;		On entry : 3F/0
  9815 ;;		On exit  : 3F/0
  9816 ;;		Unchanged: 0/0
  9817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9818 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;Total ram usage:        8 bytes
  9823 ;; Hardware stack levels used: 1
  9824 ;; Hardware stack levels required when called: 5
  9825 ;; This function calls:
  9826 ;;		___wmul
  9827 ;; This function is called by:
  9828 ;;		_processCommand
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832     058E                     _stringToInt16:	
  9833                           ;psect for function _stringToInt16
  9834                           
  9835                           
  9836                           ;device.c: 201: int16_t stringToInt16(char* string, uint8_t strlen);device.c: 202: {;dev
      +                          ice.c: 203:     int16_t result = 0;
  9837                           
  9838                           ;incstack = 0
  9839                           ; Regs used in _stringToInt16: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9840     058E  01AA               	clrf	stringToInt16@result
  9841     058F  01AB               	clrf	stringToInt16@result+1
  9842                           
  9843                           ;device.c: 204:     int16_t multiple = 1;
  9844     0590  3001               	movlw	1
  9845     0591  00A8               	movwf	stringToInt16@multiple
  9846     0592  3000               	movlw	0
  9847     0593  00A9               	movwf	stringToInt16@multiple+1
  9848                           
  9849                           ;device.c: 205:     int8_t sign = 1;
  9850     0594  3001               	movlw	1
  9851     0595  00A7               	movwf	stringToInt16@sign
  9852                           
  9853                           ;device.c: 207:     if (*string == '-')
  9854     0596  0824               	movf	stringToInt16@string,w
  9855     0597  0086               	movwf	6
  9856     0598  0825               	movf	stringToInt16@string+1,w
  9857     0599  0087               	movwf	7
  9858     059A  302D               	movlw	45
  9859     059B  0601               	xorwf	1,w
  9860     059C  1D03               	btfss	3,2
  9861     059D  2DA0               	goto	l5299
  9862                           
  9863                           ;device.c: 208:     {;device.c: 209:         sign = -1;
  9864     059E  30FF               	movlw	-1
  9865     059F  00A7               	movwf	stringToInt16@sign
  9866     05A0                     l5299:
  9867                           
  9868                           ;device.c: 211:     string = string+strlen;
  9869     05A0  0826               	movf	stringToInt16@strlen,w
  9870     05A1  0724               	addwf	stringToInt16@string,w
  9871     05A2  00A4               	movwf	stringToInt16@string
  9872     05A3  3000               	movlw	0
  9873     05A4  3D25               	addwfc	stringToInt16@string+1,w
  9874     05A5  00A5               	movwf	stringToInt16@string+1
  9875     05A6                     l5313:	
  9876                           ;device.c: 212:     while(strlen)
  9877                           
  9878                           
  9879                           ;device.c: 212:     while(strlen)
  9880     05A6  0826               	movf	stringToInt16@strlen,w
  9881     05A7  1903               	btfsc	3,2
  9882     05A8  2DE5               	goto	l5315
  9883                           
  9884                           ;device.c: 213:     {;device.c: 214:         string--;
  9885     05A9  3001               	movlw	1
  9886     05AA  02A4               	subwf	stringToInt16@string,f
  9887     05AB  3000               	movlw	0
  9888     05AC  3BA5               	subwfb	stringToInt16@string+1,f
  9889                           
  9890                           ;device.c: 215:         strlen--;
  9891     05AD  3001               	movlw	1
  9892     05AE  02A6               	subwf	stringToInt16@strlen,f
  9893                           
  9894                           ;device.c: 216:         if(*string >= '0' && *string <= '9')
  9895     05AF  0824               	movf	stringToInt16@string,w
  9896     05B0  0086               	movwf	6
  9897     05B1  0825               	movf	stringToInt16@string+1,w
  9898     05B2  0087               	movwf	7
  9899     05B3  3030               	movlw	48
  9900     05B4  0201               	subwf	1,w
  9901     05B5  1C03               	skipc
  9902     05B6  2DA6               	goto	l5313
  9903     05B7  0824               	movf	stringToInt16@string,w
  9904     05B8  0086               	movwf	6
  9905     05B9  0825               	movf	stringToInt16@string+1,w
  9906     05BA  0087               	movwf	7
  9907     05BB  303A               	movlw	58
  9908     05BC  0201               	subwf	1,w
  9909     05BD  1803               	skipnc
  9910     05BE  2DA6               	goto	l5313
  9911                           
  9912                           ;device.c: 217:         {;device.c: 218:             result += (*string - '0') * multipl
      +                          e;
  9913     05BF  0824               	movf	stringToInt16@string,w
  9914     05C0  0086               	movwf	6
  9915     05C1  0825               	movf	stringToInt16@string+1,w
  9916     05C2  0087               	movwf	7
  9917     05C3  0801               	movf	1,w
  9918     05C4  3ED0               	addlw	208
  9919     05C5  00A0               	movwf	___wmul@multiplier
  9920     05C6  30FF               	movlw	255
  9921     05C7  1803               	skipnc
  9922     05C8  3000               	movlw	0
  9923     05C9  00A1               	movwf	___wmul@multiplier+1
  9924     05CA  0829               	movf	stringToInt16@multiple+1,w
  9925     05CB  00A3               	movwf	___wmul@multiplicand+1
  9926     05CC  0828               	movf	stringToInt16@multiple,w
  9927     05CD  00A2               	movwf	___wmul@multiplicand
  9928     05CE  318B  234C  3185   	fcall	___wmul
  9929     05D1  0820               	movf	?___wmul,w
  9930     05D2  07AA               	addwf	stringToInt16@result,f
  9931     05D3  0821               	movf	?___wmul+1,w
  9932     05D4  3DAB               	addwfc	stringToInt16@result+1,f
  9933                           
  9934                           ;device.c: 219:             multiple *= 10;
  9935     05D5  300A               	movlw	10
  9936     05D6  00A0               	movwf	___wmul@multiplier
  9937     05D7  3000               	movlw	0
  9938     05D8  00A1               	movwf	___wmul@multiplier+1
  9939     05D9  0829               	movf	stringToInt16@multiple+1,w
  9940     05DA  00A3               	movwf	___wmul@multiplicand+1
  9941     05DB  0828               	movf	stringToInt16@multiple,w
  9942     05DC  00A2               	movwf	___wmul@multiplicand
  9943     05DD  318B  234C  3185   	fcall	___wmul
  9944     05E0  0821               	movf	?___wmul+1,w
  9945     05E1  00A9               	movwf	stringToInt16@multiple+1
  9946     05E2  0820               	movf	?___wmul,w
  9947     05E3  00A8               	movwf	stringToInt16@multiple
  9948     05E4  2DA6               	goto	l5313
  9949     05E5                     l5315:
  9950                           
  9951                           ;device.c: 222:     result = result * sign;
  9952     05E5  0827               	movf	stringToInt16@sign,w
  9953     05E6  00A0               	movwf	___wmul@multiplier
  9954     05E7  01A1               	clrf	___wmul@multiplier+1
  9955     05E8  1BA0               	btfsc	___wmul@multiplier,7
  9956     05E9  03A1               	decf	___wmul@multiplier+1,f
  9957     05EA  082B               	movf	stringToInt16@result+1,w
  9958     05EB  00A3               	movwf	___wmul@multiplicand+1
  9959     05EC  082A               	movf	stringToInt16@result,w
  9960     05ED  00A2               	movwf	___wmul@multiplicand
  9961     05EE  318B  234C         	fcall	___wmul
  9962     05F0  0821               	movf	?___wmul+1,w
  9963     05F1  00AB               	movwf	stringToInt16@result+1
  9964     05F2  0820               	movf	?___wmul,w
  9965     05F3  00AA               	movwf	stringToInt16@result
  9966                           
  9967                           ;device.c: 223:     return result;
  9968     05F4  082B               	movf	stringToInt16@result+1,w
  9969     05F5  00A5               	movwf	?_stringToInt16+1
  9970     05F6  082A               	movf	stringToInt16@result,w
  9971     05F7  00A4               	movwf	?_stringToInt16
  9972     05F8  0008               	return
  9973     05F9                     __end_of_stringToInt16:
  9974                           
  9975                           	psect	text6
  9976     0B4C                     __ptext6:	
  9977 ;; *************** function ___wmul *****************
  9978 ;; Defined at:
  9979 ;;		line 15 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/Umul16.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9982 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9983 ;; Auto vars:     Size  Location     Type
  9984 ;;  product         2    4[COMMON] unsigned int 
  9985 ;; Return value:  Size  Location     Type
  9986 ;;                  2    0[BANK0 ] unsigned int 
  9987 ;; Registers used:
  9988 ;;		wreg, status,2, status,0
  9989 ;; Tracked objects:
  9990 ;;		On entry : 3F/0
  9991 ;;		On exit  : 3F/0
  9992 ;;		Unchanged: 0/0
  9993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9994 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;Total ram usage:        6 bytes
  9999 ;; Hardware stack levels used: 1
 10000 ;; Hardware stack levels required when called: 4
 10001 ;; This function calls:
 10002 ;;		Nothing
 10003 ;; This function is called by:
 10004 ;;		_stringToInt16
 10005 ;; This function uses a non-reentrant model
 10006 ;;
 10007                           
 10008     0B4C                     ___wmul:	
 10009                           ;psect for function ___wmul
 10010                           
 10011                           
 10012                           ;incstack = 0
 10013                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10014     0B4C  01F4               	clrf	___wmul@product
 10015     0B4D  01F5               	clrf	___wmul@product+1
 10016     0B4E                     l5065:
 10017     0B4E  1C20               	btfss	___wmul@multiplier,0
 10018     0B4F  2B54               	goto	l1453
 10019     0B50  0822               	movf	___wmul@multiplicand,w
 10020     0B51  07F4               	addwf	___wmul@product,f
 10021     0B52  0823               	movf	___wmul@multiplicand+1,w
 10022     0B53  3DF5               	addwfc	___wmul@product+1,f
 10023     0B54                     l1453:
 10024     0B54  3001               	movlw	1
 10025     0B55                     u2955:
 10026     0B55  35A2               	lslf	___wmul@multiplicand,f
 10027     0B56  0DA3               	rlf	___wmul@multiplicand+1,f
 10028     0B57  0B89               	decfsz	9,f
 10029     0B58  2B55               	goto	u2955
 10030     0B59  3001               	movlw	1
 10031     0B5A                     u2965:
 10032     0B5A  36A1               	lsrf	___wmul@multiplier+1,f
 10033     0B5B  0CA0               	rrf	___wmul@multiplier,f
 10034     0B5C  0B89               	decfsz	9,f
 10035     0B5D  2B5A               	goto	u2965
 10036     0B5E  0820               	movf	___wmul@multiplier,w
 10037     0B5F  0421               	iorwf	___wmul@multiplier+1,w
 10038     0B60  1D03               	btfss	3,2
 10039     0B61  2B4E               	goto	l5065
 10040     0B62  0875               	movf	___wmul@product+1,w
 10041     0B63  00A1               	movwf	?___wmul+1
 10042     0B64  0874               	movf	___wmul@product,w
 10043     0B65  00A0               	movwf	?___wmul
 10044     0B66  0008               	return
 10045     0B67                     __end_of___wmul:
 10046                           
 10047                           	psect	text7
 10048     0791                     __ptext7:	
 10049 ;; *************** function _sendSensorInfo *****************
 10050 ;; Defined at:
 10051 ;;		line 8 in file "device.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;  sensor_info     2   13[BANK0 ] PTR struct .
 10054 ;;		 -> cons(59), battery(59), panel(59), 
 10055 ;; Auto vars:     Size  Location     Type
 10056 ;;  idx             2   26[BANK0 ] int 
 10057 ;;  packet          7   19[BANK0 ] struct .
 10058 ;; Return value:  Size  Location     Type
 10059 ;;                  1    wreg      void 
 10060 ;; Registers used:
 10061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10062 ;; Tracked objects:
 10063 ;;		On entry : 3F/0
 10064 ;;		On exit  : 3F/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10067 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;Total ram usage:       15 bytes
 10072 ;; Hardware stack levels used: 1
 10073 ;; Hardware stack levels required when called: 6
 10074 ;; This function calls:
 10075 ;;		_sendPacket
 10076 ;; This function is called by:
 10077 ;;		_processCommand
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081     0791                     _sendSensorInfo:	
 10082                           ;psect for function _sendSensorInfo
 10083                           
 10084                           
 10085                           ;device.c: 8: void sendSensorInfo(sensor_info_t* sensor_info);device.c: 9: {;device.c: 1
      +                          1:     info_packet_t packet = {
 10086                           
 10087                           ;incstack = 0
 10088                           ; Regs used in _sendSensorInfo: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10089     0791  30D9               	movlw	low sendSensorInfo@F11239
 10090     0792  0086               	movwf	6
 10091     0793  3000               	movlw	high sendSensorInfo@F11239
 10092     0794  0087               	movwf	7
 10093     0795  3033               	movlw	low sendSensorInfo@packet
 10094     0796  0084               	movwf	4
 10095     0797  3000               	movlw	high sendSensorInfo@packet
 10096     0798  0085               	movwf	5
 10097     0799  3007               	movlw	7
 10098     079A  00AF               	movwf	??_sendSensorInfo
 10099     079B                     u3110:
 10100     079B  0016               	moviw fsr1++
 10101     079C  001A               	movwi fsr0++
 10102     079D  0BAF               	decfsz	??_sendSensorInfo,f
 10103     079E  2F9B               	goto	u3110
 10104                           
 10105                           ;device.c: 15:     for(int idx = 0; idx < 5; idx++)
 10106     079F  01BA               	clrf	sendSensorInfo@idx
 10107     07A0  01BB               	clrf	sendSensorInfo@idx+1
 10108     07A1                     l5281:
 10109                           
 10110                           ;device.c: 16:         packet.codename[idx] = sensor_info->codename[idx];
 10111     07A1  0140               	movlb	0	; select bank0
 10112     07A2  083A               	movf	sendSensorInfo@idx,w
 10113     07A3  3E02               	addlw	2
 10114     07A4  00AF               	movwf	??_sendSensorInfo
 10115     07A5  3000               	movlw	0
 10116     07A6  3D3B               	addwfc	sendSensorInfo@idx+1,w
 10117     07A7  00B0               	movwf	??_sendSensorInfo+1
 10118     07A8  3033               	movlw	low sendSensorInfo@packet
 10119     07A9  00B1               	movwf	??_sendSensorInfo+2
 10120     07AA  3000               	movlw	high sendSensorInfo@packet
 10121     07AB  00B2               	movwf	??_sendSensorInfo+3
 10122     07AC  082F               	movf	??_sendSensorInfo,w
 10123     07AD  0731               	addwf	??_sendSensorInfo+2,w
 10124     07AE  0086               	movwf	6
 10125     07AF  0830               	movf	??_sendSensorInfo+1,w
 10126     07B0  3D32               	addwfc	??_sendSensorInfo+3,w
 10127     07B1  0087               	movwf	7
 10128     07B2  083A               	movf	sendSensorInfo@idx,w
 10129     07B3  072D               	addwf	sendSensorInfo@sensor_info,w
 10130     07B4  0084               	movwf	4
 10131     07B5  083B               	movf	sendSensorInfo@idx+1,w
 10132     07B6  3D2E               	addwfc	sendSensorInfo@sensor_info+1,w
 10133     07B7  0085               	movwf	5
 10134     07B8  0800               	movf	0,w
 10135     07B9  0081               	movwf	1
 10136     07BA  3001               	movlw	1
 10137     07BB  07BA               	addwf	sendSensorInfo@idx,f
 10138     07BC  3000               	movlw	0
 10139     07BD  3DBB               	addwfc	sendSensorInfo@idx+1,f
 10140     07BE  083B               	movf	sendSensorInfo@idx+1,w
 10141     07BF  3A80               	xorlw	128
 10142     07C0  00AF               	movwf	??_sendSensorInfo
 10143     07C1  3080               	movlw	128
 10144     07C2  022F               	subwf	??_sendSensorInfo,w
 10145     07C3  1D03               	skipz
 10146     07C4  2FC7               	goto	u3125
 10147     07C5  3005               	movlw	5
 10148     07C6  023A               	subwf	sendSensorInfo@idx,w
 10149     07C7                     u3125:
 10150     07C7  1C03               	skipc
 10151     07C8  2FA1               	goto	l5281
 10152                           
 10153                           ;device.c: 19:  sendPacket((char*)&packet, sizeof(info_packet_t));
 10154     07C9  3033               	movlw	low sendSensorInfo@packet
 10155     07CA  0140               	movlb	0	; select bank0
 10156     07CB  00A1               	movwf	sendPacket@str
 10157     07CC  3000               	movlw	high sendSensorInfo@packet
 10158     07CD  00A2               	movwf	sendPacket@str+1
 10159     07CE  3000               	movlw	0
 10160     07CF  00A6               	movwf	sendPacket@byteCount+3
 10161     07D0  3000               	movlw	0
 10162     07D1  00A5               	movwf	sendPacket@byteCount+2
 10163     07D2  3000               	movlw	0
 10164     07D3  00A4               	movwf	sendPacket@byteCount+1
 10165     07D4  3007               	movlw	7
 10166     07D5  00A3               	movwf	sendPacket@byteCount
 10167     07D6  3186  2651         	fcall	_sendPacket
 10168     07D8  0008               	return
 10169     07D9                     __end_of_sendSensorInfo:
 10170                           
 10171                           	psect	text8
 10172     0393                     __ptext8:	
 10173 ;; *************** function _getINA220Data *****************
 10174 ;; Defined at:
 10175 ;;		line 58 in file "sensor.c"
 10176 ;; Parameters:    Size  Location     Type
 10177 ;;  device          2   29[BANK0 ] PTR struct .
 10178 ;;		 -> cons(59), battery(59), panel(59), 
 10179 ;; Auto vars:     Size  Location     Type
 10180 ;;  buff            2   35[BANK0 ] short 
 10181 ;; Return value:  Size  Location     Type
 10182 ;;                  1    wreg      void 
 10183 ;; Registers used:
 10184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10185 ;; Tracked objects:
 10186 ;;		On entry : 3F/0
 10187 ;;		On exit  : 3F/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10190 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10191 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10192 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10193 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10194 ;;Total ram usage:        8 bytes
 10195 ;; Hardware stack levels used: 1
 10196 ;; Hardware stack levels required when called: 14
 10197 ;; This function calls:
 10198 ;;		_readINA220
 10199 ;;		_writeINA220
 10200 ;; This function is called by:
 10201 ;;		_main
 10202 ;;		_processCommand
 10203 ;; This function uses a non-reentrant model
 10204 ;;
 10205                           
 10206     0393                     _getINA220Data:	
 10207                           ;psect for function _getINA220Data
 10208                           
 10209                           
 10210                           ;incstack = 0
 10211                           ; Regs used in _getINA220Data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10212                           ;sensor.c: 58: void getINA220Data(sensor_t *device);sensor.c: 59: {;sensor.c: 60:     in
      +                          t16_t buff;;sensor.c: 62:     do { LATAbits.LATA4 = 1; } while(0);
 10213     0393  1618               	bsf	24,4	;volatile
 10214                           
 10215                           ;sensor.c: 63:     _delay((unsigned long)((10)*(1000000/4000.0)));
 10216     0394  3004               	movlw	4
 10217     0395  0140               	movlb	0	; select bank0
 10218     0396  00BF               	movwf	??_getINA220Data
 10219     0397  303D               	movlw	61
 10220     0398                     u3497:
 10221     0398  0B89               	decfsz	9,f
 10222     0399  2B98               	goto	u3497
 10223     039A  0BBF               	decfsz	??_getINA220Data,f
 10224     039B  2B98               	goto	u3497
 10225     039C  3200               	nop2
 10226                           
 10227                           ;sensor.c: 65:     writeINA220(0x00, device->sensor_config.config , device->sensor_confi
      +                          g.addressI2C);
 10228     039D  0140               	movlb	0	; select bank0
 10229     039E  083D               	movf	getINA220Data@device,w
 10230     039F  0086               	movwf	6
 10231     03A0  083E               	movf	getINA220Data@device+1,w
 10232     03A1  0087               	movwf	7
 10233     03A2  3149               	addfsr 1,9
 10234     03A3  3F40               	moviw [0]fsr1
 10235     03A4  00B2               	movwf	writeINA220@regdata
 10236     03A5  3F41               	moviw [1]fsr1
 10237     03A6  00B3               	movwf	writeINA220@regdata+1
 10238     03A7  083D               	movf	getINA220Data@device,w
 10239     03A8  0086               	movwf	6
 10240     03A9  083E               	movf	getINA220Data@device+1,w
 10241     03AA  0087               	movwf	7
 10242     03AB  3148               	addfsr 1,8
 10243     03AC  0801               	movf	1,w
 10244     03AD  00B4               	movwf	writeINA220@address
 10245     03AE  3000               	movlw	0
 10246     03AF  318A  2234  3183   	fcall	_writeINA220
 10247                           
 10248                           ;sensor.c: 66:     writeINA220(0x05,device->sensor_config.calib, device->sensor_config.a
      +                          ddressI2C);
 10249     03B2  0140               	movlb	0	; select bank0
 10250     03B3  083D               	movf	getINA220Data@device,w
 10251     03B4  0086               	movwf	6
 10252     03B5  083E               	movf	getINA220Data@device+1,w
 10253     03B6  0087               	movwf	7
 10254     03B7  314B               	addfsr 1,11
 10255     03B8  3F40               	moviw [0]fsr1
 10256     03B9  00B2               	movwf	writeINA220@regdata
 10257     03BA  3F41               	moviw [1]fsr1
 10258     03BB  00B3               	movwf	writeINA220@regdata+1
 10259     03BC  083D               	movf	getINA220Data@device,w
 10260     03BD  0086               	movwf	6
 10261     03BE  083E               	movf	getINA220Data@device+1,w
 10262     03BF  0087               	movwf	7
 10263     03C0  3148               	addfsr 1,8
 10264     03C1  0801               	movf	1,w
 10265     03C2  00B4               	movwf	writeINA220@address
 10266     03C3  3005               	movlw	5
 10267     03C4  318A  2234  3183   	fcall	_writeINA220
 10268                           
 10269                           ;sensor.c: 68:     buff = readINA220(0x02, device->sensor_config.addressI2C);
 10270     03C7  0140               	movlb	0	; select bank0
 10271     03C8  083D               	movf	getINA220Data@device,w
 10272     03C9  0086               	movwf	6
 10273     03CA  083E               	movf	getINA220Data@device+1,w
 10274     03CB  0087               	movwf	7
 10275     03CC  3148               	addfsr 1,8
 10276     03CD  0801               	movf	1,w
 10277     03CE  00B2               	movwf	readINA220@address
 10278     03CF  3002               	movlw	2
 10279     03D0  318E  2636  3183   	fcall	_readINA220
 10280     03D3  0833               	movf	?_readINA220+1,w
 10281     03D4  00C4               	movwf	getINA220Data@buff+1
 10282     03D5  0832               	movf	?_readINA220,w
 10283     03D6  00C3               	movwf	getINA220Data@buff
 10284                           
 10285                           ;sensor.c: 69:     buff = buff >> 3;
 10286     03D7  0844               	movf	getINA220Data@buff+1,w
 10287     03D8  00C0               	movwf	??_getINA220Data+1
 10288     03D9  0843               	movf	getINA220Data@buff,w
 10289     03DA  00BF               	movwf	??_getINA220Data
 10290     03DB  0D40               	rlf	??_getINA220Data+1,w
 10291     03DC  0CC0               	rrf	??_getINA220Data+1,f
 10292     03DD  0CBF               	rrf	??_getINA220Data,f
 10293     03DE  0D40               	rlf	??_getINA220Data+1,w
 10294     03DF  0CC0               	rrf	??_getINA220Data+1,f
 10295     03E0  0CBF               	rrf	??_getINA220Data,f
 10296     03E1  0D40               	rlf	??_getINA220Data+1,w
 10297     03E2  0CC0               	rrf	??_getINA220Data+1,f
 10298     03E3  0CBF               	rrf	??_getINA220Data,f
 10299     03E4  083F               	movf	??_getINA220Data,w
 10300     03E5  00C3               	movwf	getINA220Data@buff
 10301     03E6  0840               	movf	??_getINA220Data+1,w
 10302     03E7  00C4               	movwf	getINA220Data@buff+1
 10303                           
 10304                           ;sensor.c: 70:     buff &= 0x1FFF;
 10305     03E8  30FF               	movlw	255
 10306     03E9  05C3               	andwf	getINA220Data@buff,f
 10307     03EA  301F               	movlw	31
 10308     03EB  05C4               	andwf	getINA220Data@buff+1,f
 10309                           
 10310                           ;sensor.c: 72:     device->sensor_data.voltage.pWrite++;
 10311     03EC  083D               	movf	getINA220Data@device,w
 10312     03ED  3E23               	addlw	35
 10313     03EE  0086               	movwf	6
 10314     03EF  3000               	movlw	0
 10315     03F0  3D3E               	addwfc	getINA220Data@device+1,w
 10316     03F1  0087               	movwf	7
 10317     03F2  3001               	movlw	1
 10318     03F3  0781               	addwf	1,f
 10319                           
 10320                           ;sensor.c: 74:     if(device->sensor_data.voltage.pWrite == 8)
 10321     03F4  083D               	movf	getINA220Data@device,w
 10322     03F5  3E23               	addlw	35
 10323     03F6  0086               	movwf	6
 10324     03F7  3000               	movlw	0
 10325     03F8  3D3E               	addwfc	getINA220Data@device+1,w
 10326     03F9  0087               	movwf	7
 10327     03FA  3008               	movlw	8
 10328     03FB  0601               	xorwf	1,w
 10329     03FC  1D03               	btfss	3,2
 10330     03FD  2C17               	goto	l1245
 10331                           
 10332                           ;sensor.c: 75:     {;sensor.c: 76:         device->sensor_data.voltage.pWrite = 0;
 10333     03FE  083D               	movf	getINA220Data@device,w
 10334     03FF  3E23               	addlw	35
 10335     0400  0086               	movwf	6
 10336     0401  3000               	movlw	0
 10337     0402  3D3E               	addwfc	getINA220Data@device+1,w
 10338     0403  0087               	movwf	7
 10339     0404  0181               	clrf	1
 10340                           
 10341                           ;sensor.c: 77:         device->sensor_data.voltage.max = 0x8000;
 10342     0405  083D               	movf	getINA220Data@device,w
 10343     0406  0086               	movwf	6
 10344     0407  083E               	movf	getINA220Data@device+1,w
 10345     0408  0087               	movwf	7
 10346     0409  315D               	addfsr 1,29
 10347     040A  3000               	movlw	0
 10348     040B  3FC0               	movwi [0]fsr1
 10349     040C  3080               	movlw	128
 10350     040D  3FC1               	movwi [1]fsr1
 10351                           
 10352                           ;sensor.c: 78:         device->sensor_data.voltage.min = 0x7FFF;
 10353     040E  083D               	movf	getINA220Data@device,w
 10354     040F  0086               	movwf	6
 10355     0410  083E               	movf	getINA220Data@device+1,w
 10356     0411  0087               	movwf	7
 10357     0412  315F               	addfsr 1,31
 10358     0413  30FF               	movlw	255
 10359     0414  3FC0               	movwi [0]fsr1
 10360     0415  307F               	movlw	127
 10361     0416  3FC1               	movwi [1]fsr1
 10362     0417                     l1245:	
 10363                           ;sensor.c: 79:     }
 10364                           
 10365                           
 10366                           ;sensor.c: 81:     device->sensor_data.voltage.hist[device->sensor_data.voltage.pWrite] 
      +                          = buff;
 10367     0417  083D               	movf	getINA220Data@device,w
 10368     0418  3E23               	addlw	35
 10369     0419  0086               	movwf	6
 10370     041A  3000               	movlw	0
 10371     041B  3D3E               	addwfc	getINA220Data@device+1,w
 10372     041C  0087               	movwf	7
 10373     041D  0801               	movf	1,w
 10374     041E  00BF               	movwf	??_getINA220Data
 10375     041F  01C0               	clrf	??_getINA220Data+1
 10376     0420  35BF               	lslf	??_getINA220Data,f
 10377     0421  0DC0               	rlf	??_getINA220Data+1,f
 10378     0422  083F               	movf	??_getINA220Data,w
 10379     0423  073D               	addwf	getINA220Data@device,w
 10380     0424  00C1               	movwf	??_getINA220Data+2
 10381     0425  0840               	movf	??_getINA220Data+1,w
 10382     0426  3D3E               	addwfc	getINA220Data@device+1,w
 10383     0427  00C2               	movwf	??_getINA220Data+3
 10384     0428  0841               	movf	??_getINA220Data+2,w
 10385     0429  0086               	movwf	6
 10386     042A  0842               	movf	??_getINA220Data+3,w
 10387     042B  0087               	movwf	7
 10388     042C  314D               	addfsr 1,13
 10389     042D  0843               	movf	getINA220Data@buff,w
 10390     042E  3FC0               	movwi [0]fsr1
 10391     042F  0844               	movf	getINA220Data@buff+1,w
 10392     0430  3FC1               	movwi [1]fsr1
 10393                           
 10394                           ;sensor.c: 83:     buff = readINA220(0x01, device->sensor_config.addressI2C);
 10395     0431  083D               	movf	getINA220Data@device,w
 10396     0432  0086               	movwf	6
 10397     0433  083E               	movf	getINA220Data@device+1,w
 10398     0434  0087               	movwf	7
 10399     0435  3148               	addfsr 1,8
 10400     0436  0801               	movf	1,w
 10401     0437  00B2               	movwf	readINA220@address
 10402     0438  3001               	movlw	1
 10403     0439  318E  2636  3183   	fcall	_readINA220
 10404     043C  0833               	movf	?_readINA220+1,w
 10405     043D  00C4               	movwf	getINA220Data@buff+1
 10406     043E  0832               	movf	?_readINA220,w
 10407     043F  00C3               	movwf	getINA220Data@buff
 10408                           
 10409                           ;sensor.c: 85:     device->sensor_data.current.pWrite++;
 10410     0440  083D               	movf	getINA220Data@device,w
 10411     0441  3E3A               	addlw	58
 10412     0442  0086               	movwf	6
 10413     0443  3000               	movlw	0
 10414     0444  3D3E               	addwfc	getINA220Data@device+1,w
 10415     0445  0087               	movwf	7
 10416     0446  3001               	movlw	1
 10417     0447  0781               	addwf	1,f
 10418                           
 10419                           ;sensor.c: 87:     if(device->sensor_data.current.pWrite == 8)
 10420     0448  083D               	movf	getINA220Data@device,w
 10421     0449  3E3A               	addlw	58
 10422     044A  0086               	movwf	6
 10423     044B  3000               	movlw	0
 10424     044C  3D3E               	addwfc	getINA220Data@device+1,w
 10425     044D  0087               	movwf	7
 10426     044E  3008               	movlw	8
 10427     044F  0601               	xorwf	1,w
 10428     0450  1D03               	btfss	3,2
 10429     0451  2C6D               	goto	l1246
 10430                           
 10431                           ;sensor.c: 88:     {;sensor.c: 89:         device->sensor_data.current.pWrite = 0;
 10432     0452  083D               	movf	getINA220Data@device,w
 10433     0453  3E3A               	addlw	58
 10434     0454  0086               	movwf	6
 10435     0455  3000               	movlw	0
 10436     0456  3D3E               	addwfc	getINA220Data@device+1,w
 10437     0457  0087               	movwf	7
 10438     0458  0181               	clrf	1
 10439                           
 10440                           ;sensor.c: 90:         device->sensor_data.current.max = 0x8000;
 10441     0459  083D               	movf	getINA220Data@device,w
 10442     045A  3E34               	addlw	52
 10443     045B  0086               	movwf	6
 10444     045C  3000               	movlw	0
 10445     045D  3D3E               	addwfc	getINA220Data@device+1,w
 10446     045E  0087               	movwf	7
 10447     045F  3000               	movlw	0
 10448     0460  3FC0               	movwi [0]fsr1
 10449     0461  3080               	movlw	128
 10450     0462  3FC1               	movwi [1]fsr1
 10451                           
 10452                           ;sensor.c: 91:         device->sensor_data.current.min = 0x7FFF;
 10453     0463  083D               	movf	getINA220Data@device,w
 10454     0464  3E36               	addlw	54
 10455     0465  0086               	movwf	6
 10456     0466  3000               	movlw	0
 10457     0467  3D3E               	addwfc	getINA220Data@device+1,w
 10458     0468  0087               	movwf	7
 10459     0469  30FF               	movlw	255
 10460     046A  3FC0               	movwi [0]fsr1
 10461     046B  307F               	movlw	127
 10462     046C  3FC1               	movwi [1]fsr1
 10463     046D                     l1246:	
 10464                           ;sensor.c: 92:     }
 10465                           
 10466                           
 10467                           ;sensor.c: 94:     device->sensor_data.current.hist[device->sensor_data.current.pWrite] 
      +                          = buff;
 10468     046D  083D               	movf	getINA220Data@device,w
 10469     046E  3E3A               	addlw	58
 10470     046F  0086               	movwf	6
 10471     0470  3000               	movlw	0
 10472     0471  3D3E               	addwfc	getINA220Data@device+1,w
 10473     0472  0087               	movwf	7
 10474     0473  0801               	movf	1,w
 10475     0474  00BF               	movwf	??_getINA220Data
 10476     0475  01C0               	clrf	??_getINA220Data+1
 10477     0476  35BF               	lslf	??_getINA220Data,f
 10478     0477  0DC0               	rlf	??_getINA220Data+1,f
 10479     0478  083F               	movf	??_getINA220Data,w
 10480     0479  073D               	addwf	getINA220Data@device,w
 10481     047A  00C1               	movwf	??_getINA220Data+2
 10482     047B  0840               	movf	??_getINA220Data+1,w
 10483     047C  3D3E               	addwfc	getINA220Data@device+1,w
 10484     047D  00C2               	movwf	??_getINA220Data+3
 10485     047E  0841               	movf	??_getINA220Data+2,w
 10486     047F  3E24               	addlw	36
 10487     0480  0086               	movwf	6
 10488     0481  3000               	movlw	0
 10489     0482  3D42               	addwfc	??_getINA220Data+3,w
 10490     0483  0087               	movwf	7
 10491     0484  0843               	movf	getINA220Data@buff,w
 10492     0485  3FC0               	movwi [0]fsr1
 10493     0486  0844               	movf	getINA220Data@buff+1,w
 10494     0487  3FC1               	movwi [1]fsr1
 10495     0488  1218               	bcf	24,4	;volatile
 10496     0489  0008               	return
 10497     048A                     __end_of_getINA220Data:
 10498                           
 10499                           	psect	text9
 10500     0A34                     __ptext9:	
 10501 ;; *************** function _writeINA220 *****************
 10502 ;; Defined at:
 10503 ;;		line 35 in file "sensor.c"
 10504 ;; Parameters:    Size  Location     Type
 10505 ;;  regadd          1    wreg     unsigned char 
 10506 ;;  regdata         2   18[BANK0 ] unsigned short 
 10507 ;;  address         1   20[BANK0 ] unsigned char 
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;  regadd          1   21[BANK0 ] unsigned char 
 10510 ;;  Txbuffer        3   23[BANK0 ] unsigned char [3]
 10511 ;;  pTxbuffer       1   22[BANK0 ] PTR unsigned char 
 10512 ;;		 -> writeINA220@Txbuffer(3), 
 10513 ;; Return value:  Size  Location     Type
 10514 ;;                  1    wreg      void 
 10515 ;; Registers used:
 10516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10517 ;; Tracked objects:
 10518 ;;		On entry : 3F/0
 10519 ;;		On exit  : 3F/1
 10520 ;;		Unchanged: 0/0
 10521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10522 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;Total ram usage:        8 bytes
 10527 ;; Hardware stack levels used: 1
 10528 ;; Hardware stack levels required when called: 13
 10529 ;; This function calls:
 10530 ;;		_I2C1_WriteNBytes
 10531 ;; This function is called by:
 10532 ;;		_getINA220Data
 10533 ;; This function uses a non-reentrant model
 10534 ;;
 10535                           
 10536     0A34                     _writeINA220:	
 10537                           ;psect for function _writeINA220
 10538                           
 10539                           
 10540                           ;incstack = 0
 10541                           ; Regs used in _writeINA220: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10542                           ;writeINA220@regadd stored from wreg
 10543     0A34  00B5               	movwf	writeINA220@regadd
 10544                           
 10545                           ;sensor.c: 35: void writeINA220(uint8_t regadd, uint16_t regdata, uint8_t address);senso
      +                          r.c: 36: {;sensor.c: 37:     uint8_t Txbuffer[3];;sensor.c: 38:     uint8_t* pTxbuffer;;
      +                          sensor.c: 40:     Txbuffer[0] = regadd;
 10546     0A35  0835               	movf	writeINA220@regadd,w
 10547     0A36  00B7               	movwf	writeINA220@Txbuffer
 10548                           
 10549                           ;sensor.c: 41:     Txbuffer[1] = regdata & 0x00FF;
 10550     0A37  0832               	movf	writeINA220@regdata,w
 10551     0A38  00B8               	movwf	writeINA220@Txbuffer+1
 10552                           
 10553                           ;sensor.c: 42:     Txbuffer[2] = (regdata & 0xFF00) >> 8;
 10554     0A39  0833               	movf	writeINA220@regdata+1,w
 10555     0A3A  00B9               	movwf	writeINA220@Txbuffer+2
 10556                           
 10557                           ;sensor.c: 43:     pTxbuffer = &Txbuffer[0];
 10558     0A3B  3037               	movlw	(low (writeINA220@Txbuffer| 0))& (0+255)
 10559     0A3C  00B6               	movwf	writeINA220@pTxbuffer
 10560                           
 10561                           ;sensor.c: 44:     I2C1_WriteNBytes(address,pTxbuffer,3);
 10562     0A3D  0836               	movf	writeINA220@pTxbuffer,w
 10563     0A3E  00AE               	movwf	I2C1_WriteNBytes@data
 10564     0A3F  3003               	movlw	3
 10565     0A40  00AF               	movwf	I2C1_WriteNBytes@len
 10566     0A41  3000               	movlw	0
 10567     0A42  00B0               	movwf	I2C1_WriteNBytes@len+1
 10568     0A43  0834               	movf	writeINA220@address,w
 10569     0A44  318C  249A         	fcall	_I2C1_WriteNBytes
 10570     0A46  0008               	return
 10571     0A47                     __end_of_writeINA220:
 10572                           
 10573                           	psect	text10
 10574     0E36                     __ptext10:	
 10575 ;; *************** function _readINA220 *****************
 10576 ;; Defined at:
 10577 ;;		line 19 in file "sensor.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;  regadd          1    wreg     unsigned char 
 10580 ;;  address         1   18[BANK0 ] unsigned char 
 10581 ;; Auto vars:     Size  Location     Type
 10582 ;;  regadd          1   26[BANK0 ] unsigned char 
 10583 ;;  buff            2   24[BANK0 ] unsigned char [2]
 10584 ;;  ret             2   27[BANK0 ] unsigned short 
 10585 ;;  pTxbuffer       1   23[BANK0 ] PTR unsigned char 
 10586 ;;		 -> readINA220@regadd(1), 
 10587 ;;  pRxbuffer       1   22[BANK0 ] PTR unsigned char 
 10588 ;;		 -> readINA220@buff(2), 
 10589 ;; Return value:  Size  Location     Type
 10590 ;;                  2   18[BANK0 ] unsigned short 
 10591 ;; Registers used:
 10592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10593 ;; Tracked objects:
 10594 ;;		On entry : 3F/0
 10595 ;;		On exit  : 3F/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10598 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10599 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;Total ram usage:       11 bytes
 10603 ;; Hardware stack levels used: 1
 10604 ;; Hardware stack levels required when called: 13
 10605 ;; This function calls:
 10606 ;;		_I2C1_ReadNBytes
 10607 ;;		_I2C1_WriteNBytes
 10608 ;; This function is called by:
 10609 ;;		_getINA220Data
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613     0E36                     _readINA220:	
 10614                           ;psect for function _readINA220
 10615                           
 10616                           
 10617                           ;incstack = 0
 10618                           ; Regs used in _readINA220: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10619                           ;readINA220@regadd stored from wreg
 10620     0E36  00BA               	movwf	readINA220@regadd
 10621                           
 10622                           ;sensor.c: 19: uint16_t readINA220(uint8_t regadd, uint8_t address);sensor.c: 20: {;sens
      +                          or.c: 21:     uint8_t buff[2];;sensor.c: 22:     uint16_t ret;;sensor.c: 23:     uint8_t
      +                          * pRxbuffer;;sensor.c: 24:     uint8_t* pTxbuffer;;sensor.c: 25:     pRxbuffer = &buff[0
      +                          ];
 10623     0E37  3038               	movlw	(low (readINA220@buff| 0))& (0+255)
 10624     0E38  00B6               	movwf	readINA220@pRxbuffer
 10625                           
 10626                           ;sensor.c: 26:     pTxbuffer = &regadd;
 10627     0E39  303A               	movlw	(low (readINA220@regadd| 0))& (0+255)
 10628     0E3A  00B7               	movwf	readINA220@pTxbuffer
 10629                           
 10630                           ;sensor.c: 27:     I2C1_WriteNBytes(address,pTxbuffer,1);
 10631     0E3B  0837               	movf	readINA220@pTxbuffer,w
 10632     0E3C  00AE               	movwf	I2C1_WriteNBytes@data
 10633     0E3D  3001               	movlw	1
 10634     0E3E  00AF               	movwf	I2C1_WriteNBytes@len
 10635     0E3F  3000               	movlw	0
 10636     0E40  00B0               	movwf	I2C1_WriteNBytes@len+1
 10637     0E41  0832               	movf	readINA220@address,w
 10638     0E42  318C  249A  318E   	fcall	_I2C1_WriteNBytes
 10639                           
 10640                           ;sensor.c: 28:     I2C1_ReadNBytes(address,pRxbuffer,2);
 10641     0E45  0140               	movlb	0	; select bank0
 10642     0E46  0836               	movf	readINA220@pRxbuffer,w
 10643     0E47  00AE               	movwf	I2C1_ReadNBytes@data
 10644     0E48  3002               	movlw	2
 10645     0E49  00AF               	movwf	I2C1_ReadNBytes@len
 10646     0E4A  3000               	movlw	0
 10647     0E4B  00B0               	movwf	I2C1_ReadNBytes@len+1
 10648     0E4C  0832               	movf	readINA220@address,w
 10649     0E4D  318B  23A1         	fcall	_I2C1_ReadNBytes
 10650                           
 10651                           ;sensor.c: 29:     ret = buff[0];
 10652     0E4F  0140               	movlb	0	; select bank0
 10653     0E50  0838               	movf	readINA220@buff,w
 10654     0E51  00B4               	movwf	??_readINA220
 10655     0E52  01B5               	clrf	??_readINA220+1
 10656     0E53  0834               	movf	??_readINA220,w
 10657     0E54  00BB               	movwf	readINA220@ret
 10658     0E55  0835               	movf	??_readINA220+1,w
 10659     0E56  00BC               	movwf	readINA220@ret+1
 10660                           
 10661                           ;sensor.c: 30:     ret = ret << 8;
 10662     0E57  083B               	movf	readINA220@ret,w
 10663     0E58  00B5               	movwf	??_readINA220+1
 10664     0E59  01B4               	clrf	??_readINA220
 10665     0E5A  0834               	movf	??_readINA220,w
 10666     0E5B  00BB               	movwf	readINA220@ret
 10667     0E5C  0835               	movf	??_readINA220+1,w
 10668     0E5D  00BC               	movwf	readINA220@ret+1
 10669                           
 10670                           ;sensor.c: 31:     ret = ret + buff[1];
 10671     0E5E  0839               	movf	readINA220@buff+1,w
 10672     0E5F  073B               	addwf	readINA220@ret,w
 10673     0E60  00BB               	movwf	readINA220@ret
 10674     0E61  083C               	movf	readINA220@ret+1,w
 10675     0E62  1803               	skipnc
 10676     0E63  0A3C               	incf	readINA220@ret+1,w
 10677     0E64  00BC               	movwf	readINA220@ret+1
 10678                           
 10679                           ;sensor.c: 32:     return ret;
 10680     0E65  083C               	movf	readINA220@ret+1,w
 10681     0E66  00B3               	movwf	?_readINA220+1
 10682     0E67  083B               	movf	readINA220@ret,w
 10683     0E68  00B2               	movwf	?_readINA220
 10684     0E69  0008               	return
 10685     0E6A                     __end_of_readINA220:
 10686                           
 10687                           	psect	text11
 10688     0C9A                     __ptext11:	
 10689 ;; *************** function _I2C1_WriteNBytes *****************
 10690 ;; Defined at:
 10691 ;;		line 111 in file "mcc_generated_files/examples/i2c1_master_example.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;  address         1    wreg     unsigned char 
 10694 ;;  data            1   14[BANK0 ] PTR unsigned char 
 10695 ;;		 -> writeINA220@Txbuffer(3), readINA220@regadd(1), 
 10696 ;;  len             2   15[BANK0 ] unsigned int 
 10697 ;; Auto vars:     Size  Location     Type
 10698 ;;  address         1   17[BANK0 ] unsigned char 
 10699 ;; Return value:  Size  Location     Type
 10700 ;;                  1    wreg      void 
 10701 ;; Registers used:
 10702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10703 ;; Tracked objects:
 10704 ;;		On entry : 3F/0
 10705 ;;		On exit  : 3F/1
 10706 ;;		Unchanged: 0/0
 10707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10708 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;Total ram usage:        4 bytes
 10713 ;; Hardware stack levels used: 1
 10714 ;; Hardware stack levels required when called: 12
 10715 ;; This function calls:
 10716 ;;		_I2C1_Close
 10717 ;;		_I2C1_MasterWrite
 10718 ;;		_I2C1_Open
 10719 ;;		_I2C1_SetAddressNackCallback
 10720 ;;		_I2C1_SetBuffer
 10721 ;; This function is called by:
 10722 ;;		_readINA220
 10723 ;;		_writeINA220
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727     0C9A                     _I2C1_WriteNBytes:	
 10728                           ;psect for function _I2C1_WriteNBytes
 10729                           
 10730                           
 10731                           ;incstack = 0
 10732                           ; Regs used in _I2C1_WriteNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10733                           ;I2C1_WriteNBytes@address stored from wreg
 10734     0C9A  00B1               	movwf	I2C1_WriteNBytes@address
 10735     0C9B                     l4927:	
 10736                           ;mcc_generated_files/examples/i2c1_master_example.c: 111: void I2C1_WriteNBytes(i2c1_add
      +                          ress_t address, uint8_t* data, size_t len);mcc_generated_files/examples/i2c1_master_exam
      +                          ple.c: 112: {;mcc_generated_files/examples/i2c1_master_example.c: 113:     while(!I2C1_O
      +                          pen(address));
 10737                           
 10738     0C9B  0140               	movlb	0	; select bank0
 10739     0C9C  0831               	movf	I2C1_WriteNBytes@address,w
 10740     0C9D  318D  25D0  318C   	fcall	_I2C1_Open
 10741     0CA0  3A00               	xorlw	0
 10742     0CA1  1903               	skipnz
 10743     0CA2  2C9B               	goto	l4927
 10744                           
 10745                           ;mcc_generated_files/examples/i2c1_master_example.c: 114:     I2C1_SetBuffer(data,len);
 10746     0CA3  0140               	movlb	0	; select bank0
 10747     0CA4  082E               	movf	I2C1_WriteNBytes@data,w
 10748     0CA5  00A0               	movwf	I2C1_SetBuffer@buffer
 10749     0CA6  01A1               	clrf	I2C1_SetBuffer@buffer+1
 10750     0CA7  0830               	movf	I2C1_WriteNBytes@len+1,w
 10751     0CA8  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 10752     0CA9  082F               	movf	I2C1_WriteNBytes@len,w
 10753     0CAA  00A2               	movwf	I2C1_SetBuffer@bufferSize
 10754     0CAB  318A  22D5  318C   	fcall	_I2C1_SetBuffer
 10755                           
 10756                           ;mcc_generated_files/examples/i2c1_master_example.c: 115:     I2C1_SetAddressNackCallbac
      +                          k(((void*)0),((void*)0));
 10757     0CAE  3000               	movlw	0
 10758     0CAF  0140               	movlb	0	; select bank0
 10759     0CB0  00A4               	movwf	I2C1_SetAddressNackCallback@cb
 10760     0CB1  00A5               	movwf	I2C1_SetAddressNackCallback@cb+1
 10761     0CB2  3000               	movlw	0
 10762     0CB3  00A6               	movwf	I2C1_SetAddressNackCallback@ptr
 10763     0CB4  00A7               	movwf	I2C1_SetAddressNackCallback@ptr+1
 10764     0CB5  3189  21BC  318C   	fcall	_I2C1_SetAddressNackCallback
 10765                           
 10766                           ;mcc_generated_files/examples/i2c1_master_example.c: 116:     I2C1_MasterWrite();
 10767     0CB8  3189  210C  318C   	fcall	_I2C1_MasterWrite
 10768     0CBB                     l4935:	
 10769                           ;mcc_generated_files/examples/i2c1_master_example.c: 117:     while(I2C1_BUSY == I2C1_Cl
      +                          ose());
 10770                           
 10771     0CBB  318A  22C0  318C   	fcall	_I2C1_Close
 10772     0CBE  3A01               	xorlw	1
 10773     0CBF  1D03               	btfss	3,2
 10774     0CC0  0008               	return
 10775     0CC1  2CBB               	goto	l4935
 10776     0CC2                     __end_of_I2C1_WriteNBytes:
 10777                           
 10778                           	psect	text12
 10779     09BC                     __ptext12:	
 10780 ;; *************** function _I2C1_SetAddressNackCallback *****************
 10781 ;; Defined at:
 10782 ;;		line 283 in file "mcc_generated_files/i2c1_master.c"
 10783 ;; Parameters:    Size  Location     Type
 10784 ;;  cb              2    4[BANK0 ] PTR FTN(PTR void ,)enum 
 10785 ;;		 -> NULL(1), 
 10786 ;;  ptr             2    6[BANK0 ] PTR void 
 10787 ;;		 -> NULL(0), 
 10788 ;; Auto vars:     Size  Location     Type
 10789 ;;		None
 10790 ;; Return value:  Size  Location     Type
 10791 ;;                  1    wreg      void 
 10792 ;; Registers used:
 10793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10794 ;; Tracked objects:
 10795 ;;		On entry : 3F/0
 10796 ;;		On exit  : 3F/0
 10797 ;;		Unchanged: 0/0
 10798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10799 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10802 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10803 ;;Total ram usage:        4 bytes
 10804 ;; Hardware stack levels used: 1
 10805 ;; Hardware stack levels required when called: 5
 10806 ;; This function calls:
 10807 ;;		_I2C1_SetCallback
 10808 ;; This function is called by:
 10809 ;;		_I2C1_WriteNBytes
 10810 ;; This function uses a non-reentrant model
 10811 ;;
 10812                           
 10813     09BC                     _I2C1_SetAddressNackCallback:	
 10814                           ;psect for function _I2C1_SetAddressNackCallback
 10815                           
 10816                           
 10817                           ;mcc_generated_files/i2c1_master.c: 283: void I2C1_SetAddressNackCallback(i2c1_callback_
      +                          t cb, void *ptr);mcc_generated_files/i2c1_master.c: 284: {;mcc_generated_files/i2c1_mast
      +                          er.c: 285:     I2C1_SetCallback(I2C1_ADDR_NACK, cb, ptr);
 10818                           
 10819                           ;incstack = 0
 10820                           ; Regs used in _I2C1_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10821     09BC  0825               	movf	I2C1_SetAddressNackCallback@cb+1,w
 10822     09BD  00A1               	movwf	I2C1_SetCallback@cb+1
 10823     09BE  0824               	movf	I2C1_SetAddressNackCallback@cb,w
 10824     09BF  00A0               	movwf	I2C1_SetCallback@cb
 10825     09C0  0826               	movf	I2C1_SetAddressNackCallback@ptr,w
 10826     09C1  00A2               	movwf	I2C1_SetCallback@ptr
 10827     09C2  3002               	movlw	2
 10828     09C3  318E  26A0         	fcall	_I2C1_SetCallback
 10829     09C5  0008               	return
 10830     09C6                     __end_of_I2C1_SetAddressNackCallback:
 10831                           
 10832                           	psect	text13
 10833     090C                     __ptext13:	
 10834 ;; *************** function _I2C1_MasterWrite *****************
 10835 ;; Defined at:
 10836 ;;		line 251 in file "mcc_generated_files/i2c1_master.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;		None
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;		None
 10841 ;; Return value:  Size  Location     Type
 10842 ;;                  1    wreg      enum E358
 10843 ;; Registers used:
 10844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10845 ;; Tracked objects:
 10846 ;;		On entry : 3F/0
 10847 ;;		On exit  : 3F/0
 10848 ;;		Unchanged: 0/0
 10849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;Total ram usage:        0 bytes
 10855 ;; Hardware stack levels used: 1
 10856 ;; Hardware stack levels required when called: 11
 10857 ;; This function calls:
 10858 ;;		_I2C1_MasterOperation
 10859 ;; This function is called by:
 10860 ;;		_I2C1_WriteNBytes
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864     090C                     _I2C1_MasterWrite:	
 10865                           ;psect for function _I2C1_MasterWrite
 10866                           
 10867                           
 10868                           ;mcc_generated_files/i2c1_master.c: 253:     return I2C1_MasterOperation(0);;	Return val
      +                          ue of _I2C1_MasterWrite is never used
 10869                           
 10870                           ;incstack = 0
 10871                           ; Regs used in _I2C1_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10872     090C  3000               	movlw	0
 10873     090D  318B  2317         	fcall	_I2C1_MasterOperation
 10874     090F  0008               	return
 10875     0910                     __end_of_I2C1_MasterWrite:
 10876                           
 10877                           	psect	text14
 10878     0BA1                     __ptext14:	
 10879 ;; *************** function _I2C1_ReadNBytes *****************
 10880 ;; Defined at:
 10881 ;;		line 120 in file "mcc_generated_files/examples/i2c1_master_example.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  address         1    wreg     unsigned char 
 10884 ;;  data            1   14[BANK0 ] PTR unsigned char 
 10885 ;;		 -> readINA220@buff(2), 
 10886 ;;  len             2   15[BANK0 ] unsigned int 
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;  address         1   17[BANK0 ] unsigned char 
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  1    wreg      void 
 10891 ;; Registers used:
 10892 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10893 ;; Tracked objects:
 10894 ;;		On entry : 3F/0
 10895 ;;		On exit  : 3F/1
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10898 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;Total ram usage:        4 bytes
 10903 ;; Hardware stack levels used: 1
 10904 ;; Hardware stack levels required when called: 12
 10905 ;; This function calls:
 10906 ;;		_I2C1_Close
 10907 ;;		_I2C1_MasterRead
 10908 ;;		_I2C1_Open
 10909 ;;		_I2C1_SetBuffer
 10910 ;; This function is called by:
 10911 ;;		_readINA220
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915     0BA1                     _I2C1_ReadNBytes:	
 10916                           ;psect for function _I2C1_ReadNBytes
 10917                           
 10918                           
 10919                           ;incstack = 0
 10920                           ; Regs used in _I2C1_ReadNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10921                           ;I2C1_ReadNBytes@address stored from wreg
 10922     0BA1  00B1               	movwf	I2C1_ReadNBytes@address
 10923     0BA2                     l4939:	
 10924                           ;mcc_generated_files/examples/i2c1_master_example.c: 120: void I2C1_ReadNBytes(i2c1_addr
      +                          ess_t address, uint8_t *data, size_t len);mcc_generated_files/examples/i2c1_master_examp
      +                          le.c: 121: {;mcc_generated_files/examples/i2c1_master_example.c: 122:     while(!I2C1_Op
      +                          en(address));
 10925                           
 10926     0BA2  0140               	movlb	0	; select bank0
 10927     0BA3  0831               	movf	I2C1_ReadNBytes@address,w
 10928     0BA4  318D  25D0  318B   	fcall	_I2C1_Open
 10929     0BA7  3A00               	xorlw	0
 10930     0BA8  1903               	skipnz
 10931     0BA9  2BA2               	goto	l4939
 10932                           
 10933                           ;mcc_generated_files/examples/i2c1_master_example.c: 123:     I2C1_SetBuffer(data,len);
 10934     0BAA  0140               	movlb	0	; select bank0
 10935     0BAB  082E               	movf	I2C1_ReadNBytes@data,w
 10936     0BAC  00A0               	movwf	I2C1_SetBuffer@buffer
 10937     0BAD  01A1               	clrf	I2C1_SetBuffer@buffer+1
 10938     0BAE  0830               	movf	I2C1_ReadNBytes@len+1,w
 10939     0BAF  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 10940     0BB0  082F               	movf	I2C1_ReadNBytes@len,w
 10941     0BB1  00A2               	movwf	I2C1_SetBuffer@bufferSize
 10942     0BB2  318A  22D5  318B   	fcall	_I2C1_SetBuffer
 10943                           
 10944                           ;mcc_generated_files/examples/i2c1_master_example.c: 124:     I2C1_MasterRead();
 10945     0BB5  3189  2108  318B   	fcall	_I2C1_MasterRead
 10946     0BB8                     l4945:	
 10947                           ;mcc_generated_files/examples/i2c1_master_example.c: 125:     while(I2C1_BUSY == I2C1_Cl
      +                          ose());
 10948                           
 10949     0BB8  318A  22C0  318B   	fcall	_I2C1_Close
 10950     0BBB  3A01               	xorlw	1
 10951     0BBC  1D03               	btfss	3,2
 10952     0BBD  0008               	return
 10953     0BBE  2BB8               	goto	l4945
 10954     0BBF                     __end_of_I2C1_ReadNBytes:
 10955                           
 10956                           	psect	text15
 10957     0DD0                     __ptext15:	
 10958 ;; *************** function _I2C1_Open *****************
 10959 ;; Defined at:
 10960 ;;		line 176 in file "mcc_generated_files/i2c1_master.c"
 10961 ;; Parameters:    Size  Location     Type
 10962 ;;  address         1    wreg     unsigned char 
 10963 ;; Auto vars:     Size  Location     Type
 10964 ;;  address         1    4[COMMON] unsigned char 
 10965 ;;  returnValue     1    5[COMMON] enum E358
 10966 ;; Return value:  Size  Location     Type
 10967 ;;                  1    wreg      enum E358
 10968 ;; Registers used:
 10969 ;;		wreg, status,2, status,0, pclath, cstack
 10970 ;; Tracked objects:
 10971 ;;		On entry : 3F/0
 10972 ;;		On exit  : 3D/1
 10973 ;;		Unchanged: 0/0
 10974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;Total ram usage:        2 bytes
 10980 ;; Hardware stack levels used: 1
 10981 ;; Hardware stack levels required when called: 5
 10982 ;; This function calls:
 10983 ;;		_I2C1_MasterClearIrq
 10984 ;;		_I2C1_MasterOpen
 10985 ;; This function is called by:
 10986 ;;		_I2C1_WriteNBytes
 10987 ;;		_I2C1_ReadNBytes
 10988 ;; This function uses a non-reentrant model
 10989 ;;
 10990                           
 10991     0DD0                     _I2C1_Open:	
 10992                           ;psect for function _I2C1_Open
 10993                           
 10994                           
 10995                           ;incstack = 0
 10996                           ; Regs used in _I2C1_Open: [wreg+status,2+status,0+pclath+cstack]
 10997                           ;I2C1_Open@address stored from wreg
 10998     0DD0  00F4               	movwf	I2C1_Open@address
 10999                           
 11000                           ;mcc_generated_files/i2c1_master.c: 176: i2c1_error_t I2C1_Open(i2c1_address_t address);
      +                          mcc_generated_files/i2c1_master.c: 177: {;mcc_generated_files/i2c1_master.c: 178:     i2
      +                          c1_error_t returnValue = I2C1_BUSY;
 11001     0DD1  3001               	movlw	1
 11002     0DD2  00F5               	movwf	I2C1_Open@returnValue
 11003                           
 11004                           ;mcc_generated_files/i2c1_master.c: 180:     if(!I2C1_Status.inUse)
 11005     0DD3  0141               	movlb	1	; select bank1
 11006     0DD4  193D               	btfsc	(_I2C1_Status^(0+128)+29),2
 11007     0DD5  2E01               	goto	l4829
 11008                           
 11009                           ;mcc_generated_files/i2c1_master.c: 181:     {;mcc_generated_files/i2c1_master.c: 182:  
      +                                 I2C1_Status.address = address;
 11010     0DD6  0874               	movf	I2C1_Open@address,w
 11011     0DD7  00B6               	movwf	(_I2C1_Status^(0+128)+22)
 11012                           
 11013                           ;mcc_generated_files/i2c1_master.c: 183:         I2C1_Status.busy = 0;
 11014     0DD8  10BD               	bcf	(_I2C1_Status^(0+128)+29),1
 11015                           
 11016                           ;mcc_generated_files/i2c1_master.c: 184:         I2C1_Status.inUse = 1;
 11017     0DD9  153D               	bsf	(_I2C1_Status^(0+128)+29),2
 11018                           
 11019                           ;mcc_generated_files/i2c1_master.c: 185:         I2C1_Status.addressNackCheck = 0;
 11020     0DDA  103D               	bcf	(_I2C1_Status^(0+128)+29),0
 11021                           
 11022                           ;mcc_generated_files/i2c1_master.c: 186:         I2C1_Status.state = I2C1_RESET;
 11023     0DDB  300E               	movlw	14
 11024     0DDC  00BB               	movwf	(_I2C1_Status^(0+128)+27)
 11025                           
 11026                           ;mcc_generated_files/i2c1_master.c: 187:         I2C1_Status.time_out_value = 500;
 11027     0DDD  30F4               	movlw	244
 11028     0DDE  00B4               	movwf	(_I2C1_Status^(0+128)+20)
 11029     0DDF  3001               	movlw	1
 11030     0DE0  00B5               	movwf	(_I2C1_Status^(0+128)+21)
 11031                           
 11032                           ;mcc_generated_files/i2c1_master.c: 188:         I2C1_Status.bufferFree = 1;
 11033     0DE1  15BD               	bsf	(_I2C1_Status^(0+128)+29),3
 11034                           
 11035                           ;mcc_generated_files/i2c1_master.c: 191:         I2C1_Status.callbackTable[I2C1_DATA_COM
      +                          PLETE]=I2C1_CallbackReturnStop;
 11036     0DE2  30AF               	movlw	low _I2C1_CallbackReturnStop
 11037     0DE3  00A0               	movwf	_I2C1_Status^(0+128)
 11038     0DE4  3008               	movlw	high _I2C1_CallbackReturnStop
 11039     0DE5  00A1               	movwf	(_I2C1_Status^(0+128)+1)
 11040                           
 11041                           ;mcc_generated_files/i2c1_master.c: 192:         I2C1_Status.callbackPayload[I2C1_DATA_C
      +                          OMPLETE] = ((void*)0);
 11042     0DE6  01AC               	clrf	(_I2C1_Status^(0+128)+12)
 11043                           
 11044                           ;mcc_generated_files/i2c1_master.c: 193:         I2C1_Status.callbackTable[I2C1_WRITE_CO
      +                          LLISION]=I2C1_CallbackReturnStop;
 11045     0DE7  30AF               	movlw	low _I2C1_CallbackReturnStop
 11046     0DE8  00A2               	movwf	(_I2C1_Status^(0+128)+2)
 11047     0DE9  3008               	movlw	high _I2C1_CallbackReturnStop
 11048     0DEA  00A3               	movwf	(_I2C1_Status^(0+128)+3)
 11049                           
 11050                           ;mcc_generated_files/i2c1_master.c: 194:         I2C1_Status.callbackPayload[I2C1_WRITE_
      +                          COLLISION] = ((void*)0);
 11051     0DEB  01AD               	clrf	(_I2C1_Status^(0+128)+13)
 11052                           
 11053                           ;mcc_generated_files/i2c1_master.c: 195:         I2C1_Status.callbackTable[I2C1_ADDR_NAC
      +                          K]=I2C1_CallbackReturnStop;
 11054     0DEC  30AF               	movlw	low _I2C1_CallbackReturnStop
 11055     0DED  00A4               	movwf	(_I2C1_Status^(0+128)+4)
 11056     0DEE  3008               	movlw	high _I2C1_CallbackReturnStop
 11057     0DEF  00A5               	movwf	(_I2C1_Status^(0+128)+5)
 11058                           
 11059                           ;mcc_generated_files/i2c1_master.c: 196:         I2C1_Status.callbackPayload[I2C1_ADDR_N
      +                          ACK] = ((void*)0);
 11060     0DF0  01AE               	clrf	(_I2C1_Status^(0+128)+14)
 11061                           
 11062                           ;mcc_generated_files/i2c1_master.c: 197:         I2C1_Status.callbackTable[I2C1_DATA_NAC
      +                          K]=I2C1_CallbackReturnStop;
 11063     0DF1  30AF               	movlw	low _I2C1_CallbackReturnStop
 11064     0DF2  00A6               	movwf	(_I2C1_Status^(0+128)+6)
 11065     0DF3  3008               	movlw	high _I2C1_CallbackReturnStop
 11066     0DF4  00A7               	movwf	(_I2C1_Status^(0+128)+7)
 11067                           
 11068                           ;mcc_generated_files/i2c1_master.c: 198:         I2C1_Status.callbackPayload[I2C1_DATA_N
      +                          ACK] = ((void*)0);
 11069     0DF5  01AF               	clrf	(_I2C1_Status^(0+128)+15)
 11070                           
 11071                           ;mcc_generated_files/i2c1_master.c: 199:         I2C1_Status.callbackTable[I2C1_TIMEOUT]
      +                          =I2C1_CallbackReturnReset;
 11072     0DF6  3002               	movlw	low _I2C1_CallbackReturnReset
 11073     0DF7  00A8               	movwf	(_I2C1_Status^(0+128)+8)
 11074     0DF8  3000               	movlw	high _I2C1_CallbackReturnReset
 11075     0DF9  00A9               	movwf	(_I2C1_Status^(0+128)+9)
 11076                           
 11077                           ;mcc_generated_files/i2c1_master.c: 200:         I2C1_Status.callbackPayload[I2C1_TIMEOU
      +                          T] = ((void*)0);
 11078     0DFA  01B0               	clrf	(_I2C1_Status^(0+128)+16)
 11079                           
 11080                           ;mcc_generated_files/i2c1_master.c: 202:         I2C1_MasterClearIrq();
 11081     0DFB  3188  20C0  318D   	fcall	_I2C1_MasterClearIrq
 11082                           
 11083                           ;mcc_generated_files/i2c1_master.c: 203:         I2C1_MasterOpen();
 11084     0DFE  3189  21E9         	fcall	_I2C1_MasterOpen
 11085                           
 11086                           ;mcc_generated_files/i2c1_master.c: 204:         returnValue = I2C1_NOERR;
 11087     0E00  01F5               	clrf	I2C1_Open@returnValue
 11088     0E01                     l4829:
 11089                           
 11090                           ;mcc_generated_files/i2c1_master.c: 206:     return returnValue;
 11091     0E01  0875               	movf	I2C1_Open@returnValue,w
 11092     0E02  0008               	return
 11093     0E03                     __end_of_I2C1_Open:
 11094                           
 11095                           	psect	text16
 11096     09E9                     __ptext16:	
 11097 ;; *************** function _I2C1_MasterOpen *****************
 11098 ;; Defined at:
 11099 ;;		line 543 in file "mcc_generated_files/i2c1_master.c"
 11100 ;; Parameters:    Size  Location     Type
 11101 ;;		None
 11102 ;; Auto vars:     Size  Location     Type
 11103 ;;		None
 11104 ;; Return value:  Size  Location     Type
 11105 ;;                  1    wreg      _Bool 
 11106 ;; Registers used:
 11107 ;;		status,2
 11108 ;; Tracked objects:
 11109 ;;		On entry : 3F/E
 11110 ;;		On exit  : 3F/3
 11111 ;;		Unchanged: 0/0
 11112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;Total ram usage:        0 bytes
 11118 ;; Hardware stack levels used: 1
 11119 ;; Hardware stack levels required when called: 4
 11120 ;; This function calls:
 11121 ;;		Nothing
 11122 ;; This function is called by:
 11123 ;;		_I2C1_Open
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127     09E9                     _I2C1_MasterOpen:	
 11128                           ;psect for function _I2C1_MasterOpen
 11129                           
 11130                           
 11131                           ;mcc_generated_files/i2c1_master.c: 545:     if(!SSP1CON1bits.SSPEN)
 11132                           
 11133                           ;incstack = 0
 11134                           ; Regs used in _I2C1_MasterOpen: [status,2]
 11135     09E9  0143               	movlb	3	; select bank3
 11136     09EA  1A90               	btfsc	16,5	;volatile
 11137     09EB  0008               	return
 11138                           
 11139                           ;mcc_generated_files/i2c1_master.c: 546:     {;mcc_generated_files/i2c1_master.c: 547:  
      +                                 SSP1STAT = 0x80;
 11140     09EC  3080               	movlw	128
 11141     09ED  008F               	movwf	15	;volatile
 11142                           
 11143                           ;mcc_generated_files/i2c1_master.c: 548:         SSP1CON1 = 0x28;
 11144     09EE  3028               	movlw	40
 11145     09EF  0090               	movwf	16	;volatile
 11146                           
 11147                           ;mcc_generated_files/i2c1_master.c: 549:         SSP1CON2 = 0x00;
 11148     09F0  0191               	clrf	17	;volatile
 11149                           
 11150                           ;mcc_generated_files/i2c1_master.c: 550:         SSP1ADD = 0x04;
 11151     09F1  3004               	movlw	4
 11152     09F2  008D               	movwf	13	;volatile
 11153                           
 11154                           ;mcc_generated_files/i2c1_master.c: 551:         SSP1CON1bits.SSPEN = 1;
 11155     09F3  1690               	bsf	16,5	;volatile
 11156     09F4  0008               	return
 11157     09F5                     __end_of_I2C1_MasterOpen:
 11158                           
 11159                           	psect	text17
 11160     0908                     __ptext17:	
 11161 ;; *************** function _I2C1_MasterRead *****************
 11162 ;; Defined at:
 11163 ;;		line 246 in file "mcc_generated_files/i2c1_master.c"
 11164 ;; Parameters:    Size  Location     Type
 11165 ;;		None
 11166 ;; Auto vars:     Size  Location     Type
 11167 ;;		None
 11168 ;; Return value:  Size  Location     Type
 11169 ;;                  1    wreg      enum E358
 11170 ;; Registers used:
 11171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11172 ;; Tracked objects:
 11173 ;;		On entry : 3F/1
 11174 ;;		On exit  : 3F/0
 11175 ;;		Unchanged: 0/0
 11176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;Total ram usage:        0 bytes
 11182 ;; Hardware stack levels used: 1
 11183 ;; Hardware stack levels required when called: 11
 11184 ;; This function calls:
 11185 ;;		_I2C1_MasterOperation
 11186 ;; This function is called by:
 11187 ;;		_I2C1_ReadNBytes
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191     0908                     _I2C1_MasterRead:	
 11192                           ;psect for function _I2C1_MasterRead
 11193                           
 11194                           
 11195                           ;mcc_generated_files/i2c1_master.c: 248:     return I2C1_MasterOperation(1);;	Return val
      +                          ue of _I2C1_MasterRead is never used
 11196                           
 11197                           ;incstack = 0
 11198                           ; Regs used in _I2C1_MasterRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11199     0908  3001               	movlw	1
 11200     0909  318B  2317         	fcall	_I2C1_MasterOperation
 11201     090B  0008               	return
 11202     090C                     __end_of_I2C1_MasterRead:
 11203                           
 11204                           	psect	text18
 11205     0B17                     __ptext18:	
 11206 ;; *************** function _I2C1_MasterOperation *****************
 11207 ;; Defined at:
 11208 ;;		line 224 in file "mcc_generated_files/i2c1_master.c"
 11209 ;; Parameters:    Size  Location     Type
 11210 ;;  read            1    wreg     _Bool 
 11211 ;; Auto vars:     Size  Location     Type
 11212 ;;  read            1   12[BANK0 ] _Bool 
 11213 ;;  returnValue     1   13[BANK0 ] enum E358
 11214 ;; Return value:  Size  Location     Type
 11215 ;;                  1    wreg      enum E358
 11216 ;; Registers used:
 11217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11218 ;; Tracked objects:
 11219 ;;		On entry : 3E/0
 11220 ;;		On exit  : 3F/0
 11221 ;;		Unchanged: 0/0
 11222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;Total ram usage:        2 bytes
 11228 ;; Hardware stack levels used: 1
 11229 ;; Hardware stack levels required when called: 10
 11230 ;; This function calls:
 11231 ;;		_I2C1_MasterStart
 11232 ;;		_I2C1_Poller
 11233 ;; This function is called by:
 11234 ;;		_I2C1_MasterRead
 11235 ;;		_I2C1_MasterWrite
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239     0B17                     _I2C1_MasterOperation:	
 11240                           ;psect for function _I2C1_MasterOperation
 11241                           
 11242                           
 11243                           ;incstack = 0
 11244                           ; Regs used in _I2C1_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11245                           ;I2C1_MasterOperation@read stored from wreg
 11246     0B17  0140               	movlb	0	; select bank0
 11247     0B18  00AC               	movwf	I2C1_MasterOperation@read
 11248                           
 11249                           ;mcc_generated_files/i2c1_master.c: 224: i2c1_error_t I2C1_MasterOperation(_Bool read);m
      +                          cc_generated_files/i2c1_master.c: 225: {;mcc_generated_files/i2c1_master.c: 226:     i2c
      +                          1_error_t returnValue = I2C1_BUSY;
 11250     0B19  3001               	movlw	1
 11251     0B1A  00AD               	movwf	I2C1_MasterOperation@returnValue
 11252                           
 11253                           ;mcc_generated_files/i2c1_master.c: 227:     if(!I2C1_Status.busy)
 11254     0B1B  0141               	movlb	1	; select bank1
 11255     0B1C  18BD               	btfsc	(_I2C1_Status^(0+128)+29),1
 11256     0B1D  2B2E               	goto	l4793
 11257                           
 11258                           ;mcc_generated_files/i2c1_master.c: 228:     {;mcc_generated_files/i2c1_master.c: 229:  
      +                                 I2C1_Status.busy = 1;
 11259     0B1E  14BD               	bsf	(_I2C1_Status^(0+128)+29),1
 11260                           
 11261                           ;mcc_generated_files/i2c1_master.c: 230:         returnValue = I2C1_NOERR;
 11262     0B1F  0140               	movlb	0	; select bank0
 11263     0B20  01AD               	clrf	I2C1_MasterOperation@returnValue
 11264                           
 11265                           ;mcc_generated_files/i2c1_master.c: 232:         if(read)
 11266     0B21  082C               	movf	I2C1_MasterOperation@read,w
 11267     0B22  1903               	btfsc	3,2
 11268     0B23  2B26               	goto	l456
 11269                           
 11270                           ;mcc_generated_files/i2c1_master.c: 233:         {;mcc_generated_files/i2c1_master.c: 23
      +                          4:             I2C1_Status.state = I2C1_SEND_ADR_READ;
 11271     0B24  3001               	movlw	1
 11272     0B25  2B27               	goto	L1
 11273     0B26                     l456:	
 11274                           ;mcc_generated_files/i2c1_master.c: 236:         else
 11275                           
 11276                           ;mcc_generated_files/i2c1_master.c: 235:         }
 11277                           
 11278                           
 11279                           ;mcc_generated_files/i2c1_master.c: 237:         {;mcc_generated_files/i2c1_master.c: 23
      +                          8:             I2C1_Status.state = I2C1_SEND_ADR_WRITE;
 11280     0B26  3002               	movlw	2
 11281     0B27                     L1:
 11282     0B27  0141               	movlb	1	; select bank1
 11283     0B28  00BB               	movwf	(_I2C1_Status^(0+128)+27)
 11284                           
 11285                           ;mcc_generated_files/i2c1_master.c: 240:         I2C1_MasterStart();
 11286     0B29  3188  20C6  318B   	fcall	_I2C1_MasterStart
 11287                           
 11288                           ;mcc_generated_files/i2c1_master.c: 241:         I2C1_Poller();
 11289     0B2C  3189  21B2         	fcall	_I2C1_Poller
 11290     0B2E                     l4793:
 11291                           
 11292                           ;mcc_generated_files/i2c1_master.c: 243:     return returnValue;
 11293     0B2E  0140               	movlb	0	; select bank0
 11294     0B2F  082D               	movf	I2C1_MasterOperation@returnValue,w
 11295     0B30  0008               	return
 11296     0B31                     __end_of_I2C1_MasterOperation:
 11297                           
 11298                           	psect	text19
 11299     09B2                     __ptext19:	
 11300 ;; *************** function _I2C1_Poller *****************
 11301 ;; Defined at:
 11302 ;;		line 312 in file "mcc_generated_files/i2c1_master.c"
 11303 ;; Parameters:    Size  Location     Type
 11304 ;;		None
 11305 ;; Auto vars:     Size  Location     Type
 11306 ;;		None
 11307 ;; Return value:  Size  Location     Type
 11308 ;;                  1    wreg      void 
 11309 ;; Registers used:
 11310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11311 ;; Tracked objects:
 11312 ;;		On entry : 3F/3
 11313 ;;		On exit  : 3F/1
 11314 ;;		Unchanged: 0/0
 11315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;Total ram usage:        0 bytes
 11321 ;; Hardware stack levels used: 1
 11322 ;; Hardware stack levels required when called: 9
 11323 ;; This function calls:
 11324 ;;		_I2C1_MasterFsm
 11325 ;;		_I2C1_MasterWaitForEvent
 11326 ;; This function is called by:
 11327 ;;		_I2C1_MasterOperation
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331     09B2                     _I2C1_Poller:	
 11332                           ;psect for function _I2C1_Poller
 11333                           
 11334     09B2                     l4761:	
 11335                           ;mcc_generated_files/i2c1_master.c: 314:     while(I2C1_Status.busy)
 11336                           
 11337                           ;incstack = 0
 11338                           ; Regs used in _I2C1_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11339                           
 11340                           
 11341                           ;mcc_generated_files/i2c1_master.c: 314:     while(I2C1_Status.busy)
 11342     09B2  0141               	movlb	1	; select bank1
 11343     09B3  1CBD               	btfss	(_I2C1_Status^(0+128)+29),1
 11344     09B4  0008               	return
 11345                           
 11346                           ;mcc_generated_files/i2c1_master.c: 315:     {;mcc_generated_files/i2c1_master.c: 316:  
      +                                 I2C1_MasterWaitForEvent();
 11347     09B5  3189  2104  3189   	fcall	_I2C1_MasterWaitForEvent
 11348                           
 11349                           ;mcc_generated_files/i2c1_master.c: 317:         I2C1_MasterFsm();
 11350     09B8  318B  23FF  3189   	fcall	_I2C1_MasterFsm
 11351     09BB  29B2               	goto	l4761
 11352     09BC                     __end_of_I2C1_Poller:
 11353                           
 11354                           	psect	text20
 11355     0904                     __ptext20:	
 11356 ;; *************** function _I2C1_MasterWaitForEvent *****************
 11357 ;; Defined at:
 11358 ;;		line 650 in file "mcc_generated_files/i2c1_master.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;		None
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;		None
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  1    wreg      void 
 11365 ;; Registers used:
 11366 ;;		None
 11367 ;; Tracked objects:
 11368 ;;		On entry : 3D/1
 11369 ;;		On exit  : 3F/E
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;Total ram usage:        0 bytes
 11377 ;; Hardware stack levels used: 1
 11378 ;; Hardware stack levels required when called: 4
 11379 ;; This function calls:
 11380 ;;		Nothing
 11381 ;; This function is called by:
 11382 ;;		_I2C1_Poller
 11383 ;; This function uses a non-reentrant model
 11384 ;;
 11385                           
 11386     0904                     _I2C1_MasterWaitForEvent:	
 11387                           ;psect for function _I2C1_MasterWaitForEvent
 11388                           
 11389     0904                     l670:	
 11390                           ;incstack = 0
 11391                           ; Regs used in _I2C1_MasterWaitForEvent: []
 11392                           ;mcc_generated_files/i2c1_master.c: 652:     while(1)
 11393                           
 11394                           
 11395                           ;mcc_generated_files/i2c1_master.c: 653:     {;mcc_generated_files/i2c1_master.c: 654:  
      +                                 if(PIR3bits.SSP1IF)
 11396     0904  014E               	movlb	14	; select bank14
 11397     0905  180F               	btfsc	15,0	;volatile
 11398     0906  0008               	return
 11399     0907  2904               	goto	l670
 11400     0908                     __end_of_I2C1_MasterWaitForEvent:
 11401                           
 11402                           	psect	text21
 11403     0BFF                     __ptext21:	
 11404 ;; *************** function _I2C1_MasterFsm *****************
 11405 ;; Defined at:
 11406 ;;		line 321 in file "mcc_generated_files/i2c1_master.c"
 11407 ;; Parameters:    Size  Location     Type
 11408 ;;		None
 11409 ;; Auto vars:     Size  Location     Type
 11410 ;;		None
 11411 ;; Return value:  Size  Location     Type
 11412 ;;                  1    wreg      void 
 11413 ;; Registers used:
 11414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11415 ;; Tracked objects:
 11416 ;;		On entry : 3F/E
 11417 ;;		On exit  : 3F/1
 11418 ;;		Unchanged: 0/0
 11419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11422 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;Total ram usage:        2 bytes
 11425 ;; Hardware stack levels used: 1
 11426 ;; Hardware stack levels required when called: 8
 11427 ;; This function calls:
 11428 ;;		_I2C1_DO_ADDRESS_NACK
 11429 ;;		_I2C1_DO_IDLE
 11430 ;;		_I2C1_DO_RCEN
 11431 ;;		_I2C1_DO_RESET
 11432 ;;		_I2C1_DO_RX
 11433 ;;		_I2C1_DO_RX_ACK
 11434 ;;		_I2C1_DO_RX_NACK_RESTART
 11435 ;;		_I2C1_DO_RX_NACK_STOP
 11436 ;;		_I2C1_DO_SEND_ADR_READ
 11437 ;;		_I2C1_DO_SEND_ADR_WRITE
 11438 ;;		_I2C1_DO_SEND_RESTART
 11439 ;;		_I2C1_DO_SEND_RESTART_READ
 11440 ;;		_I2C1_DO_SEND_RESTART_WRITE
 11441 ;;		_I2C1_DO_SEND_STOP
 11442 ;;		_I2C1_DO_TX
 11443 ;;		_I2C1_DO_TX_EMPTY
 11444 ;;		_I2C1_MasterClearIrq
 11445 ;;		_I2C1_MasterIsNack
 11446 ;; This function is called by:
 11447 ;;		_I2C1_Poller
 11448 ;; This function uses a non-reentrant model
 11449 ;;
 11450                           
 11451     0BFF                     _I2C1_MasterFsm:	
 11452                           ;psect for function _I2C1_MasterFsm
 11453                           
 11454                           
 11455                           ;mcc_generated_files/i2c1_master.c: 323:     I2C1_MasterClearIrq();
 11456                           
 11457                           ;incstack = 0
 11458                           ; Regs used in _I2C1_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11459     0BFF  3188  20C0  318B   	fcall	_I2C1_MasterClearIrq
 11460                           
 11461                           ;mcc_generated_files/i2c1_master.c: 325:     if(I2C1_Status.addressNackCheck && I2C1_Mas
      +                          terIsNack())
 11462     0C02  0141               	movlb	1	; select bank1
 11463     0C03  1C3D               	btfss	(_I2C1_Status^(0+128)+29),0
 11464     0C04  2C0E               	goto	l4751
 11465     0C05  3189  2153  318B   	fcall	_I2C1_MasterIsNack
 11466     0C08  3A00               	xorlw	0
 11467     0C09  1903               	skipnz
 11468     0C0A  2C0E               	goto	l4751
 11469                           
 11470                           ;mcc_generated_files/i2c1_master.c: 326:     {;mcc_generated_files/i2c1_master.c: 327:  
      +                                 I2C1_Status.state = I2C1_ADDRESS_NACK;
 11471     0C0B  300F               	movlw	15
 11472     0C0C  0141               	movlb	1	; select bank1
 11473     0C0D  00BB               	movwf	(_I2C1_Status^(0+128)+27)
 11474     0C0E                     l4751:
 11475                           
 11476                           ;mcc_generated_files/i2c1_master.c: 329:     I2C1_Status.state = fsmStateTable[I2C1_Stat
      +                          us.state]();
 11477     0C0E  0141               	movlb	1	; select bank1
 11478     0C0F  083B               	movf	(_I2C1_Status^(0+128)+27),w
 11479     0C10  0140               	movlb	0	; select bank0
 11480     0C11  00AA               	movwf	??_I2C1_MasterFsm
 11481     0C12  01AB               	clrf	??_I2C1_MasterFsm+1
 11482     0C13  35AA               	lslf	??_I2C1_MasterFsm,f
 11483     0C14  0DAB               	rlf	??_I2C1_MasterFsm+1,f
 11484     0C15  3000               	movlw	low _fsmStateTable
 11485     0C16  072A               	addwf	??_I2C1_MasterFsm,w
 11486     0C17  0084               	movwf	4
 11487     0C18  3010               	movlw	high _fsmStateTable
 11488     0C19  3D2B               	addwfc	??_I2C1_MasterFsm+1,w
 11489     0C1A  3880               	iorlw	128
 11490     0C1B  0085               	movwf	5
 11491     0C1C  3F01               	moviw [1]fsr0
 11492     0C1D  008A               	movwf	10
 11493     0C1E  3F00               	moviw [0]fsr0
 11494     0C1F  000A               	callw
 11495     0C20  318B               	pagesel	$
 11496     0C21  0141               	movlb	1	; select bank1
 11497     0C22  00BB               	movwf	(_I2C1_Status^(0+128)+27)
 11498     0C23  0008               	return
 11499     0C24                     __end_of_I2C1_MasterFsm:
 11500                           
 11501                           	psect	text22
 11502     0CC2                     __ptext22:	
 11503 ;; *************** function _I2C1_DO_ADDRESS_NACK *****************
 11504 ;; Defined at:
 11505 ;;		line 500 in file "mcc_generated_files/i2c1_master.c"
 11506 ;; Parameters:    Size  Location     Type
 11507 ;;		None
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;		None
 11510 ;; Return value:  Size  Location     Type
 11511 ;;                  1    wreg      enum E10930
 11512 ;; Registers used:
 11513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11514 ;; Tracked objects:
 11515 ;;		On entry : 3F/0
 11516 ;;		On exit  : 3F/3
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;Total ram usage:        2 bytes
 11524 ;; Hardware stack levels used: 1
 11525 ;; Hardware stack levels required when called: 7
 11526 ;; This function calls:
 11527 ;;		NULL
 11528 ;;		_I2C1_CallbackReturnReset
 11529 ;;		_I2C1_CallbackReturnStop
 11530 ;;		_I2C1_DO_SEND_RESTART
 11531 ;;		_I2C1_DO_SEND_STOP
 11532 ;;		_rd1RegCompleteHandler
 11533 ;;		_rd2RegCompleteHandler
 11534 ;;		_rdBlkRegCompleteHandler
 11535 ;;		_wr1RegCompleteHandler
 11536 ;;		_wr2RegCompleteHandler
 11537 ;; This function is called by:
 11538 ;;		_I2C1_MasterFsm
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542     0CC2                     _I2C1_DO_ADDRESS_NACK:	
 11543                           ;psect for function _I2C1_DO_ADDRESS_NACK
 11544                           
 11545                           
 11546                           ;mcc_generated_files/i2c1_master.c: 502:     I2C1_Status.addressNackCheck = 0;
 11547                           
 11548                           ;incstack = 0
 11549                           ; Regs used in _I2C1_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11550     0CC2  0141               	movlb	1	; select bank1
 11551     0CC3  103D               	bcf	(_I2C1_Status^(0+128)+29),0
 11552                           
 11553                           ;mcc_generated_files/i2c1_master.c: 503:     I2C1_Status.error = I2C1_FAIL;
 11554     0CC4  3002               	movlw	2
 11555     0CC5  00BC               	movwf	(_I2C1_Status^(0+128)+28)
 11556                           
 11557                           ;mcc_generated_files/i2c1_master.c: 504:     switch(I2C1_Status.callbackTable[I2C1_ADDR_
      +                          NACK](I2C1_Status.callbackPayload[I2C1_ADDR_NACK]))
 11558     0CC6  2CCD               	goto	l4735
 11559     0CC7                     l4725:
 11560                           
 11561                           ;mcc_generated_files/i2c1_master.c: 508:             return I2C1_DO_SEND_RESTART();
 11562     0CC7  3188  20F0         	fcall	_I2C1_DO_SEND_RESTART
 11563     0CC9  0008               	return
 11564     0CCA                     l4729:
 11565                           
 11566                           ;mcc_generated_files/i2c1_master.c: 510:             return I2C1_DO_SEND_STOP();
 11567     0CCA  3188  20F4         	fcall	_I2C1_DO_SEND_STOP
 11568     0CCC  0008               	return
 11569     0CCD                     l4735:
 11570     0CCD  082E               	movf	(_I2C1_Status^(0+128)+14),w
 11571     0CCE  0140               	movlb	0	; select bank0
 11572     0CCF  00A7               	movwf	I2C1_CallbackReturnReset@funPtr
 11573     0CD0  30A0               	movlw	low _I2C1_Status
 11574     0CD1  0086               	movwf	6
 11575     0CD2  3000               	movlw	high _I2C1_Status
 11576     0CD3  0087               	movwf	7
 11577     0CD4  3144               	addfsr 1,4
 11578     0CD5  3F41               	moviw [1]fsr1
 11579     0CD6  008A               	movwf	10
 11580     0CD7  3F40               	moviw [0]fsr1
 11581     0CD8  000A               	callw
 11582     0CD9  318C               	pagesel	$
 11583     0CDA  0140               	movlb	0	; select bank0
 11584     0CDB  00A8               	movwf	??_I2C1_DO_ADDRESS_NACK
 11585     0CDC  01A9               	clrf	??_I2C1_DO_ADDRESS_NACK+1
 11586                           
 11587                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11588                           ; Switch size 1, requested type "simple"
 11589                           ; Number of cases is 1, Range of values is 0 to 0
 11590                           ; switch strategies available:
 11591                           ; Name         Instructions Cycles
 11592                           ; simple_byte            4     3 (average)
 11593                           ; direct_byte            8     6 (fixed)
 11594                           ; jumptable            260     6 (fixed)
 11595                           ;	Chosen strategy is simple_byte
 11596     0CDD  0829               	movf	??_I2C1_DO_ADDRESS_NACK+1,w
 11597     0CDE  3A00               	xorlw	0	; case 0
 11598     0CDF  1903               	skipnz
 11599     0CE0  2CE2               	goto	l5661
 11600     0CE1  2CCA               	goto	l4729
 11601     0CE2                     l5661:
 11602                           
 11603                           ; Switch size 1, requested type "simple"
 11604                           ; Number of cases is 2, Range of values is 2 to 3
 11605                           ; switch strategies available:
 11606                           ; Name         Instructions Cycles
 11607                           ; simple_byte            7     4 (average)
 11608                           ; direct_byte           13     9 (fixed)
 11609                           ; jumptable            263     9 (fixed)
 11610                           ;	Chosen strategy is simple_byte
 11611     0CE2  0828               	movf	??_I2C1_DO_ADDRESS_NACK,w
 11612     0CE3  3A02               	xorlw	2	; case 2
 11613     0CE4  1903               	skipnz
 11614     0CE5  2CC7               	goto	l4725
 11615     0CE6  3A01               	xorlw	1	; case 3
 11616     0CE7  1903               	skipnz
 11617     0CE8  2CC7               	goto	l4725
 11618     0CE9  2CCA               	goto	l4729
 11619     0CEA  0008               	return
 11620     0CEB                     __end_of_I2C1_DO_ADDRESS_NACK:
 11621                           
 11622                           	psect	text23
 11623     0924                     __ptext23:	
 11624 ;; *************** function _I2C1_DO_RESET *****************
 11625 ;; Defined at:
 11626 ;;		line 494 in file "mcc_generated_files/i2c1_master.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;		None
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;		None
 11631 ;; Return value:  Size  Location     Type
 11632 ;;                  1    wreg      enum E10930
 11633 ;; Registers used:
 11634 ;;		wreg, status,2
 11635 ;; Tracked objects:
 11636 ;;		On entry : 3F/0
 11637 ;;		On exit  : 3F/1
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;Total ram usage:        0 bytes
 11645 ;; Hardware stack levels used: 1
 11646 ;; Hardware stack levels required when called: 4
 11647 ;; This function calls:
 11648 ;;		Nothing
 11649 ;; This function is called by:
 11650 ;;		_I2C1_MasterFsm
 11651 ;; This function uses a non-reentrant model
 11652 ;;
 11653                           
 11654     0924                     _I2C1_DO_RESET:	
 11655                           ;psect for function _I2C1_DO_RESET
 11656                           
 11657                           
 11658                           ;mcc_generated_files/i2c1_master.c: 496:     I2C1_Status.busy = 0;
 11659                           
 11660                           ;incstack = 0
 11661                           ; Regs used in _I2C1_DO_RESET: [wreg+status,2]
 11662     0924  0141               	movlb	1	; select bank1
 11663     0925  10BD               	bcf	(_I2C1_Status^(0+128)+29),1
 11664                           
 11665                           ;mcc_generated_files/i2c1_master.c: 497:     I2C1_Status.error = I2C1_NOERR;
 11666     0926  01BC               	clrf	(_I2C1_Status^(0+128)+28)
 11667                           
 11668                           ;mcc_generated_files/i2c1_master.c: 498:     return I2C1_RESET;
 11669     0927  300E               	movlw	14
 11670     0928  0008               	return
 11671     0929                     __end_of_I2C1_DO_RESET:
 11672                           
 11673                           	psect	text24
 11674     0900                     __ptext24:	
 11675 ;; *************** function _I2C1_DO_RX_NACK_RESTART *****************
 11676 ;; Defined at:
 11677 ;;		line 488 in file "mcc_generated_files/i2c1_master.c"
 11678 ;; Parameters:    Size  Location     Type
 11679 ;;		None
 11680 ;; Auto vars:     Size  Location     Type
 11681 ;;		None
 11682 ;; Return value:  Size  Location     Type
 11683 ;;                  1    wreg      enum E10930
 11684 ;; Registers used:
 11685 ;;		wreg, status,2, status,0, pclath, cstack
 11686 ;; Tracked objects:
 11687 ;;		On entry : 3F/0
 11688 ;;		On exit  : 3F/3
 11689 ;;		Unchanged: 0/0
 11690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;Total ram usage:        0 bytes
 11696 ;; Hardware stack levels used: 1
 11697 ;; Hardware stack levels required when called: 5
 11698 ;; This function calls:
 11699 ;;		_I2C1_MasterSendNack
 11700 ;; This function is called by:
 11701 ;;		_I2C1_DO_RX
 11702 ;;		_I2C1_MasterFsm
 11703 ;; This function uses a non-reentrant model
 11704 ;;
 11705                           
 11706     0900                     _I2C1_DO_RX_NACK_RESTART:	
 11707                           ;psect for function _I2C1_DO_RX_NACK_RESTART
 11708                           
 11709                           
 11710                           ;mcc_generated_files/i2c1_master.c: 490:     I2C1_MasterSendNack();
 11711                           
 11712                           ;incstack = 0
 11713                           ; Regs used in _I2C1_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11714     0900  3188  20E0         	fcall	_I2C1_MasterSendNack
 11715                           
 11716                           ;mcc_generated_files/i2c1_master.c: 491:     return I2C1_SEND_RESTART;
 11717     0902  3009               	movlw	9
 11718     0903  0008               	return
 11719     0904                     __end_of_I2C1_DO_RX_NACK_RESTART:
 11720                           
 11721                           	psect	text25
 11722     08FC                     __ptext25:	
 11723 ;; *************** function _I2C1_DO_RX_NACK_STOP *****************
 11724 ;; Defined at:
 11725 ;;		line 482 in file "mcc_generated_files/i2c1_master.c"
 11726 ;; Parameters:    Size  Location     Type
 11727 ;;		None
 11728 ;; Auto vars:     Size  Location     Type
 11729 ;;		None
 11730 ;; Return value:  Size  Location     Type
 11731 ;;                  1    wreg      enum E10930
 11732 ;; Registers used:
 11733 ;;		wreg, status,2, status,0, pclath, cstack
 11734 ;; Tracked objects:
 11735 ;;		On entry : 3F/0
 11736 ;;		On exit  : 3F/3
 11737 ;;		Unchanged: 0/0
 11738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;Total ram usage:        0 bytes
 11744 ;; Hardware stack levels used: 1
 11745 ;; Hardware stack levels required when called: 5
 11746 ;; This function calls:
 11747 ;;		_I2C1_MasterSendNack
 11748 ;; This function is called by:
 11749 ;;		_I2C1_DO_RX
 11750 ;;		_I2C1_MasterFsm
 11751 ;; This function uses a non-reentrant model
 11752 ;;
 11753                           
 11754     08FC                     _I2C1_DO_RX_NACK_STOP:	
 11755                           ;psect for function _I2C1_DO_RX_NACK_STOP
 11756                           
 11757                           
 11758                           ;mcc_generated_files/i2c1_master.c: 484:     I2C1_MasterSendNack();
 11759                           
 11760                           ;incstack = 0
 11761                           ; Regs used in _I2C1_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 11762     08FC  3188  20E0         	fcall	_I2C1_MasterSendNack
 11763                           
 11764                           ;mcc_generated_files/i2c1_master.c: 485:     return I2C1_SEND_STOP;
 11765     08FE  300A               	movlw	10
 11766     08FF  0008               	return
 11767     0900                     __end_of_I2C1_DO_RX_NACK_STOP:
 11768                           
 11769                           	psect	text26
 11770     08F8                     __ptext26:	
 11771 ;; *************** function _I2C1_DO_RX_ACK *****************
 11772 ;; Defined at:
 11773 ;;		line 475 in file "mcc_generated_files/i2c1_master.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;		None
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  1    wreg      enum E10930
 11780 ;; Registers used:
 11781 ;;		wreg, status,2, status,0, pclath, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 3F/0
 11784 ;;		On exit  : 3F/3
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;Total ram usage:        0 bytes
 11792 ;; Hardware stack levels used: 1
 11793 ;; Hardware stack levels required when called: 5
 11794 ;; This function calls:
 11795 ;;		_I2C1_MasterSendAck
 11796 ;; This function is called by:
 11797 ;;		_I2C1_MasterFsm
 11798 ;; This function uses a non-reentrant model
 11799 ;;
 11800                           
 11801     08F8                     _I2C1_DO_RX_ACK:	
 11802                           ;psect for function _I2C1_DO_RX_ACK
 11803                           
 11804                           
 11805                           ;mcc_generated_files/i2c1_master.c: 477:     I2C1_MasterSendAck();
 11806                           
 11807                           ;incstack = 0
 11808                           ; Regs used in _I2C1_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 11809     08F8  3188  20E4         	fcall	_I2C1_MasterSendAck
 11810                           
 11811                           ;mcc_generated_files/i2c1_master.c: 478:     return I2C1_RCEN;
 11812     08FA  3005               	movlw	5
 11813     08FB  0008               	return
 11814     08FC                     __end_of_I2C1_DO_RX_ACK:
 11815                           
 11816                           	psect	text27
 11817     08F4                     __ptext27:	
 11818 ;; *************** function _I2C1_DO_SEND_STOP *****************
 11819 ;; Defined at:
 11820 ;;		line 469 in file "mcc_generated_files/i2c1_master.c"
 11821 ;; Parameters:    Size  Location     Type
 11822 ;;		None
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;		None
 11825 ;; Return value:  Size  Location     Type
 11826 ;;                  1    wreg      enum E10930
 11827 ;; Registers used:
 11828 ;;		wreg, status,2, status,0, pclath, cstack
 11829 ;; Tracked objects:
 11830 ;;		On entry : 3F/0
 11831 ;;		On exit  : 3F/3
 11832 ;;		Unchanged: 0/0
 11833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;Total ram usage:        0 bytes
 11839 ;; Hardware stack levels used: 1
 11840 ;; Hardware stack levels required when called: 5
 11841 ;; This function calls:
 11842 ;;		_I2C1_MasterStop
 11843 ;; This function is called by:
 11844 ;;		_I2C1_DO_TX
 11845 ;;		_I2C1_DO_TX_EMPTY
 11846 ;;		_I2C1_DO_ADDRESS_NACK
 11847 ;;		_I2C1_MasterFsm
 11848 ;; This function uses a non-reentrant model
 11849 ;;
 11850                           
 11851     08F4                     _I2C1_DO_SEND_STOP:	
 11852                           ;psect for function _I2C1_DO_SEND_STOP
 11853                           
 11854                           
 11855                           ;mcc_generated_files/i2c1_master.c: 471:     I2C1_MasterStop();
 11856                           
 11857                           ;incstack = 0
 11858                           ; Regs used in _I2C1_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 11859     08F4  3188  20CC         	fcall	_I2C1_MasterStop
 11860                           
 11861                           ;mcc_generated_files/i2c1_master.c: 472:     return I2C1_IDLE;
 11862     08F6  3000               	movlw	0
 11863     08F7  0008               	return
 11864     08F8                     __end_of_I2C1_DO_SEND_STOP:
 11865                           
 11866                           	psect	text28
 11867     08F0                     __ptext28:	
 11868 ;; *************** function _I2C1_DO_SEND_RESTART *****************
 11869 ;; Defined at:
 11870 ;;		line 463 in file "mcc_generated_files/i2c1_master.c"
 11871 ;; Parameters:    Size  Location     Type
 11872 ;;		None
 11873 ;; Auto vars:     Size  Location     Type
 11874 ;;		None
 11875 ;; Return value:  Size  Location     Type
 11876 ;;                  1    wreg      enum E10930
 11877 ;; Registers used:
 11878 ;;		wreg, status,2, status,0, pclath, cstack
 11879 ;; Tracked objects:
 11880 ;;		On entry : 3F/0
 11881 ;;		On exit  : 3F/3
 11882 ;;		Unchanged: 0/0
 11883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;Total ram usage:        0 bytes
 11889 ;; Hardware stack levels used: 1
 11890 ;; Hardware stack levels required when called: 5
 11891 ;; This function calls:
 11892 ;;		_I2C1_MasterEnableRestart
 11893 ;; This function is called by:
 11894 ;;		_I2C1_DO_TX_EMPTY
 11895 ;;		_I2C1_DO_ADDRESS_NACK
 11896 ;;		_I2C1_MasterFsm
 11897 ;; This function uses a non-reentrant model
 11898 ;;
 11899                           
 11900     08F0                     _I2C1_DO_SEND_RESTART:	
 11901                           ;psect for function _I2C1_DO_SEND_RESTART
 11902                           
 11903                           
 11904                           ;mcc_generated_files/i2c1_master.c: 465:     I2C1_MasterEnableRestart();
 11905                           
 11906                           ;incstack = 0
 11907                           ; Regs used in _I2C1_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11908     08F0  3188  20C9         	fcall	_I2C1_MasterEnableRestart
 11909                           
 11910                           ;mcc_generated_files/i2c1_master.c: 466:     return I2C1_SEND_ADR_READ;
 11911     08F2  3001               	movlw	1
 11912     08F3  0008               	return
 11913     08F4                     __end_of_I2C1_DO_SEND_RESTART:
 11914                           
 11915                           	psect	text29
 11916     08EC                     __ptext29:	
 11917 ;; *************** function _I2C1_DO_SEND_RESTART_WRITE *****************
 11918 ;; Defined at:
 11919 ;;		line 456 in file "mcc_generated_files/i2c1_master.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;		None
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;		None
 11924 ;; Return value:  Size  Location     Type
 11925 ;;                  1    wreg      enum E10930
 11926 ;; Registers used:
 11927 ;;		wreg, status,2, status,0, pclath, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 3F/0
 11930 ;;		On exit  : 3F/3
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;Total ram usage:        0 bytes
 11938 ;; Hardware stack levels used: 1
 11939 ;; Hardware stack levels required when called: 5
 11940 ;; This function calls:
 11941 ;;		_I2C1_MasterEnableRestart
 11942 ;; This function is called by:
 11943 ;;		_I2C1_DO_TX
 11944 ;;		_I2C1_MasterFsm
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948     08EC                     _I2C1_DO_SEND_RESTART_WRITE:	
 11949                           ;psect for function _I2C1_DO_SEND_RESTART_WRITE
 11950                           
 11951                           
 11952                           ;mcc_generated_files/i2c1_master.c: 458:     I2C1_MasterEnableRestart();
 11953                           
 11954                           ;incstack = 0
 11955                           ; Regs used in _I2C1_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11956     08EC  3188  20C9         	fcall	_I2C1_MasterEnableRestart
 11957                           
 11958                           ;mcc_generated_files/i2c1_master.c: 459:     return I2C1_SEND_ADR_WRITE;
 11959     08EE  3002               	movlw	2
 11960     08EF  0008               	return
 11961     08F0                     __end_of_I2C1_DO_SEND_RESTART_WRITE:
 11962                           
 11963                           	psect	text30
 11964     08E8                     __ptext30:	
 11965 ;; *************** function _I2C1_DO_SEND_RESTART_READ *****************
 11966 ;; Defined at:
 11967 ;;		line 450 in file "mcc_generated_files/i2c1_master.c"
 11968 ;; Parameters:    Size  Location     Type
 11969 ;;		None
 11970 ;; Auto vars:     Size  Location     Type
 11971 ;;		None
 11972 ;; Return value:  Size  Location     Type
 11973 ;;                  1    wreg      enum E10930
 11974 ;; Registers used:
 11975 ;;		wreg, status,2, status,0, pclath, cstack
 11976 ;; Tracked objects:
 11977 ;;		On entry : 3F/0
 11978 ;;		On exit  : 3F/3
 11979 ;;		Unchanged: 0/0
 11980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;Total ram usage:        0 bytes
 11986 ;; Hardware stack levels used: 1
 11987 ;; Hardware stack levels required when called: 5
 11988 ;; This function calls:
 11989 ;;		_I2C1_MasterEnableRestart
 11990 ;; This function is called by:
 11991 ;;		_I2C1_DO_TX
 11992 ;;		_I2C1_MasterFsm
 11993 ;; This function uses a non-reentrant model
 11994 ;;
 11995                           
 11996     08E8                     _I2C1_DO_SEND_RESTART_READ:	
 11997                           ;psect for function _I2C1_DO_SEND_RESTART_READ
 11998                           
 11999                           
 12000                           ;mcc_generated_files/i2c1_master.c: 452:     I2C1_MasterEnableRestart();
 12001                           
 12002                           ;incstack = 0
 12003                           ; Regs used in _I2C1_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 12004     08E8  3188  20C9         	fcall	_I2C1_MasterEnableRestart
 12005                           
 12006                           ;mcc_generated_files/i2c1_master.c: 453:     return I2C1_SEND_ADR_READ;
 12007     08EA  3001               	movlw	1
 12008     08EB  0008               	return
 12009     08EC                     __end_of_I2C1_DO_SEND_RESTART_READ:
 12010                           
 12011                           	psect	text31
 12012     0959                     __ptext31:	
 12013 ;; *************** function _I2C1_DO_RCEN *****************
 12014 ;; Defined at:
 12015 ;;		line 402 in file "mcc_generated_files/i2c1_master.c"
 12016 ;; Parameters:    Size  Location     Type
 12017 ;;		None
 12018 ;; Auto vars:     Size  Location     Type
 12019 ;;		None
 12020 ;; Return value:  Size  Location     Type
 12021 ;;                  1    wreg      enum E10930
 12022 ;; Registers used:
 12023 ;;		wreg, status,2, status,0, pclath, cstack
 12024 ;; Tracked objects:
 12025 ;;		On entry : 3F/0
 12026 ;;		On exit  : 3F/3
 12027 ;;		Unchanged: 0/0
 12028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;Total ram usage:        0 bytes
 12034 ;; Hardware stack levels used: 1
 12035 ;; Hardware stack levels required when called: 5
 12036 ;; This function calls:
 12037 ;;		_I2C1_MasterStartRx
 12038 ;; This function is called by:
 12039 ;;		_I2C1_MasterFsm
 12040 ;; This function uses a non-reentrant model
 12041 ;;
 12042                           
 12043     0959                     _I2C1_DO_RCEN:	
 12044                           ;psect for function _I2C1_DO_RCEN
 12045                           
 12046                           
 12047                           ;mcc_generated_files/i2c1_master.c: 404:     I2C1_Status.addressNackCheck = 0;
 12048                           
 12049                           ;incstack = 0
 12050                           ; Regs used in _I2C1_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 12051     0959  0141               	movlb	1	; select bank1
 12052     095A  103D               	bcf	(_I2C1_Status^(0+128)+29),0
 12053                           
 12054                           ;mcc_generated_files/i2c1_master.c: 405:     I2C1_MasterStartRx();
 12055     095B  3188  20CF         	fcall	_I2C1_MasterStartRx
 12056                           
 12057                           ;mcc_generated_files/i2c1_master.c: 406:     return I2C1_RX;
 12058     095D  3004               	movlw	4
 12059     095E  0008               	return
 12060     095F                     __end_of_I2C1_DO_RCEN:
 12061                           
 12062                           	psect	text32
 12063     0FBE                     __ptext32:	
 12064 ;; *************** function _I2C1_DO_RX *****************
 12065 ;; Defined at:
 12066 ;;		line 378 in file "mcc_generated_files/i2c1_master.c"
 12067 ;; Parameters:    Size  Location     Type
 12068 ;;		None
 12069 ;; Auto vars:     Size  Location     Type
 12070 ;;		None
 12071 ;; Return value:  Size  Location     Type
 12072 ;;                  1    wreg      enum E10930
 12073 ;; Registers used:
 12074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12075 ;; Tracked objects:
 12076 ;;		On entry : 3F/0
 12077 ;;		On exit  : 3F/3
 12078 ;;		Unchanged: 0/0
 12079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12083 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12084 ;;Total ram usage:        2 bytes
 12085 ;; Hardware stack levels used: 1
 12086 ;; Hardware stack levels required when called: 7
 12087 ;; This function calls:
 12088 ;;		NULL
 12089 ;;		_I2C1_CallbackReturnReset
 12090 ;;		_I2C1_CallbackReturnStop
 12091 ;;		_I2C1_DO_RX_NACK_RESTART
 12092 ;;		_I2C1_DO_RX_NACK_STOP
 12093 ;;		_I2C1_MasterGetRxData
 12094 ;;		_I2C1_MasterSendAck
 12095 ;;		_rd1RegCompleteHandler
 12096 ;;		_rd2RegCompleteHandler
 12097 ;;		_rdBlkRegCompleteHandler
 12098 ;;		_wr1RegCompleteHandler
 12099 ;;		_wr2RegCompleteHandler
 12100 ;; This function is called by:
 12101 ;;		_I2C1_MasterFsm
 12102 ;; This function uses a non-reentrant model
 12103 ;;
 12104                           
 12105     0FBE                     _I2C1_DO_RX:	
 12106                           ;psect for function _I2C1_DO_RX
 12107                           
 12108                           
 12109                           ;mcc_generated_files/i2c1_master.c: 380:     *I2C1_Status.data_ptr++ = I2C1_MasterGetRxD
      +                          ata();
 12110                           
 12111                           ;incstack = 0
 12112                           ; Regs used in _I2C1_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12113     0FBE  0141               	movlb	1	; select bank1
 12114     0FBF  0837               	movf	(_I2C1_Status^(0+128)+23),w
 12115     0FC0  0086               	movwf	6
 12116     0FC1  0838               	movf	((_I2C1_Status+1)^(0+128)+23),w
 12117     0FC2  0087               	movwf	7
 12118     0FC3  3188  20D2  318F   	fcall	_I2C1_MasterGetRxData
 12119     0FC6  0081               	movwf	1
 12120     0FC7  3001               	movlw	1
 12121     0FC8  0141               	movlb	1	; select bank1
 12122     0FC9  07B7               	addwf	(_I2C1_Status^(0+128)+23),f
 12123     0FCA  3000               	movlw	0
 12124     0FCB  3DB8               	addwfc	((_I2C1_Status+1)^(0+128)+23),f
 12125                           
 12126                           ;mcc_generated_files/i2c1_master.c: 381:     if(--I2C1_Status.data_length)
 12127     0FCC  3001               	movlw	1
 12128     0FCD  02B9               	subwf	(_I2C1_Status^(0+128)+25),f
 12129     0FCE  3000               	movlw	0
 12130     0FCF  3BBA               	subwfb	((_I2C1_Status+1)^(0+128)+25),f
 12131     0FD0  0839               	movf	(_I2C1_Status^(0+128)+25),w
 12132     0FD1  043A               	iorwf	((_I2C1_Status+1)^(0+128)+25),w
 12133     0FD2  1903               	btfsc	3,2
 12134     0FD3  2FD8               	goto	l529
 12135                           
 12136                           ;mcc_generated_files/i2c1_master.c: 382:     {;mcc_generated_files/i2c1_master.c: 383:  
      +                                 I2C1_MasterSendAck();
 12137     0FD4  3188  20E4         	fcall	_I2C1_MasterSendAck
 12138                           
 12139                           ;mcc_generated_files/i2c1_master.c: 384:         return I2C1_RCEN;
 12140     0FD6  3005               	movlw	5
 12141     0FD7  0008               	return
 12142     0FD8                     l529:	
 12143                           ;mcc_generated_files/i2c1_master.c: 386:     else
 12144                           
 12145                           
 12146                           ;mcc_generated_files/i2c1_master.c: 387:     {;mcc_generated_files/i2c1_master.c: 388:  
      +                                 I2C1_Status.bufferFree = 1;
 12147     0FD8  15BD               	bsf	(_I2C1_Status^(0+128)+29),3
 12148                           
 12149                           ;mcc_generated_files/i2c1_master.c: 389:         switch(I2C1_Status.callbackTable[I2C1_D
      +                          ATA_COMPLETE](I2C1_Status.callbackPayload[I2C1_DATA_COMPLETE]))
 12150     0FD9  2FE0               	goto	l4671
 12151     0FDA                     l4661:
 12152                           
 12153                           ;mcc_generated_files/i2c1_master.c: 393:                 return I2C1_DO_RX_NACK_RESTART(
      +                          );
 12154     0FDA  3189  2100         	fcall	_I2C1_DO_RX_NACK_RESTART
 12155     0FDC  0008               	return
 12156     0FDD                     l4665:
 12157                           
 12158                           ;mcc_generated_files/i2c1_master.c: 397:                 return I2C1_DO_RX_NACK_STOP();
 12159     0FDD  3188  20FC         	fcall	_I2C1_DO_RX_NACK_STOP
 12160     0FDF  0008               	return
 12161     0FE0                     l4671:
 12162     0FE0  082C               	movf	(_I2C1_Status^(0+128)+12),w
 12163     0FE1  0140               	movlb	0	; select bank0
 12164     0FE2  00A7               	movwf	I2C1_CallbackReturnReset@funPtr
 12165     0FE3  0141               	movlb	1	; select bank1
 12166     0FE4  0821               	movf	(_I2C1_Status+1)^(0+128),w
 12167     0FE5  008A               	movwf	10
 12168     0FE6  0820               	movf	_I2C1_Status^(0+128),w
 12169     0FE7  000A               	callw
 12170     0FE8  318F               	pagesel	$
 12171     0FE9  0140               	movlb	0	; select bank0
 12172     0FEA  00A8               	movwf	??_I2C1_DO_RX
 12173     0FEB  01A9               	clrf	??_I2C1_DO_RX+1
 12174                           
 12175                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12176                           ; Switch size 1, requested type "simple"
 12177                           ; Number of cases is 1, Range of values is 0 to 0
 12178                           ; switch strategies available:
 12179                           ; Name         Instructions Cycles
 12180                           ; simple_byte            4     3 (average)
 12181                           ; direct_byte            8     6 (fixed)
 12182                           ; jumptable            260     6 (fixed)
 12183                           ;	Chosen strategy is simple_byte
 12184     0FEC  0829               	movf	??_I2C1_DO_RX+1,w
 12185     0FED  3A00               	xorlw	0	; case 0
 12186     0FEE  1903               	skipnz
 12187     0FEF  2FF1               	goto	l5663
 12188     0FF0  2FDD               	goto	l4665
 12189     0FF1                     l5663:
 12190                           
 12191                           ; Switch size 1, requested type "simple"
 12192                           ; Number of cases is 4, Range of values is 1 to 4
 12193                           ; switch strategies available:
 12194                           ; Name         Instructions Cycles
 12195                           ; simple_byte           13     7 (average)
 12196                           ; direct_byte           17     9 (fixed)
 12197                           ; jumptable            263     9 (fixed)
 12198                           ;	Chosen strategy is simple_byte
 12199     0FF1  0828               	movf	??_I2C1_DO_RX,w
 12200     0FF2  3A01               	xorlw	1	; case 1
 12201     0FF3  1903               	skipnz
 12202     0FF4  2FDD               	goto	l4665
 12203     0FF5  3A03               	xorlw	3	; case 2
 12204     0FF6  1903               	skipnz
 12205     0FF7  2FDA               	goto	l4661
 12206     0FF8  3A01               	xorlw	1	; case 3
 12207     0FF9  1903               	skipnz
 12208     0FFA  2FDA               	goto	l4661
 12209     0FFB  3A07               	xorlw	7	; case 4
 12210     0FFC  1903               	skipnz
 12211     0FFD  2FDD               	goto	l4665
 12212     0FFE  2FDD               	goto	l4665
 12213     0FFF  0008               	return
 12214     1000                     __end_of_I2C1_DO_RX:
 12215                           
 12216                           	psect	text33
 12217     0743                     __ptext33:	
 12218 ;; *************** function _I2C1_DO_TX *****************
 12219 ;; Defined at:
 12220 ;;		line 354 in file "mcc_generated_files/i2c1_master.c"
 12221 ;; Parameters:    Size  Location     Type
 12222 ;;		None
 12223 ;; Auto vars:     Size  Location     Type
 12224 ;;		None
 12225 ;; Return value:  Size  Location     Type
 12226 ;;                  1    wreg      enum E10930
 12227 ;; Registers used:
 12228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12229 ;; Tracked objects:
 12230 ;;		On entry : 3F/0
 12231 ;;		On exit  : 3D/1
 12232 ;;		Unchanged: 0/0
 12233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12236 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12237 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;Total ram usage:        2 bytes
 12239 ;; Hardware stack levels used: 1
 12240 ;; Hardware stack levels required when called: 7
 12241 ;; This function calls:
 12242 ;;		NULL
 12243 ;;		_I2C1_CallbackReturnReset
 12244 ;;		_I2C1_CallbackReturnStop
 12245 ;;		_I2C1_DO_SEND_RESTART_READ
 12246 ;;		_I2C1_DO_SEND_RESTART_WRITE
 12247 ;;		_I2C1_DO_SEND_STOP
 12248 ;;		_I2C1_MasterIsNack
 12249 ;;		_I2C1_MasterSendTxData
 12250 ;;		_rd1RegCompleteHandler
 12251 ;;		_rd2RegCompleteHandler
 12252 ;;		_rdBlkRegCompleteHandler
 12253 ;;		_wr1RegCompleteHandler
 12254 ;;		_wr2RegCompleteHandler
 12255 ;; This function is called by:
 12256 ;;		_I2C1_MasterFsm
 12257 ;; This function uses a non-reentrant model
 12258 ;;
 12259                           
 12260     0743                     _I2C1_DO_TX:	
 12261                           ;psect for function _I2C1_DO_TX
 12262                           
 12263                           
 12264                           ;mcc_generated_files/i2c1_master.c: 356:     if(I2C1_MasterIsNack())
 12265                           
 12266                           ;incstack = 0
 12267                           ; Regs used in _I2C1_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12268     0743  3189  2153  3187   	fcall	_I2C1_MasterIsNack
 12269     0746  3A00               	xorlw	0
 12270     0747  1D03               	btfss	3,2
 12271     0748  2F53               	goto	l4631
 12272     0749  2F77               	goto	l513
 12273     074A                     l4617:
 12274                           
 12275                           ;mcc_generated_files/i2c1_master.c: 361:                 return I2C1_DO_SEND_RESTART_REA
      +                          D();
 12276     074A  3188  20E8         	fcall	_I2C1_DO_SEND_RESTART_READ
 12277     074C  0008               	return
 12278     074D                     l4621:
 12279                           
 12280                           ;mcc_generated_files/i2c1_master.c: 363:                   return I2C1_DO_SEND_RESTART_W
      +                          RITE();
 12281     074D  3188  20EC         	fcall	_I2C1_DO_SEND_RESTART_WRITE
 12282     074F  0008               	return
 12283     0750                     l4625:
 12284                           
 12285                           ;mcc_generated_files/i2c1_master.c: 367:                 return I2C1_DO_SEND_STOP();
 12286     0750  3188  20F4         	fcall	_I2C1_DO_SEND_STOP
 12287     0752  0008               	return
 12288     0753                     l4631:
 12289     0753  0141               	movlb	1	; select bank1
 12290     0754  082F               	movf	(_I2C1_Status^(0+128)+15),w
 12291     0755  0140               	movlb	0	; select bank0
 12292     0756  00A7               	movwf	I2C1_CallbackReturnReset@funPtr
 12293     0757  30A0               	movlw	low _I2C1_Status
 12294     0758  0086               	movwf	6
 12295     0759  3000               	movlw	high _I2C1_Status
 12296     075A  0087               	movwf	7
 12297     075B  3146               	addfsr 1,6
 12298     075C  3F41               	moviw [1]fsr1
 12299     075D  008A               	movwf	10
 12300     075E  3F40               	moviw [0]fsr1
 12301     075F  000A               	callw
 12302     0760  3187               	pagesel	$
 12303     0761  0140               	movlb	0	; select bank0
 12304     0762  00A8               	movwf	??_I2C1_DO_TX
 12305     0763  01A9               	clrf	??_I2C1_DO_TX+1
 12306                           
 12307                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12308                           ; Switch size 1, requested type "simple"
 12309                           ; Number of cases is 1, Range of values is 0 to 0
 12310                           ; switch strategies available:
 12311                           ; Name         Instructions Cycles
 12312                           ; simple_byte            4     3 (average)
 12313                           ; direct_byte            8     6 (fixed)
 12314                           ; jumptable            260     6 (fixed)
 12315                           ;	Chosen strategy is simple_byte
 12316     0764  0829               	movf	??_I2C1_DO_TX+1,w
 12317     0765  3A00               	xorlw	0	; case 0
 12318     0766  1903               	skipnz
 12319     0767  2F69               	goto	l5665
 12320     0768  2F50               	goto	l4625
 12321     0769                     l5665:
 12322                           
 12323                           ; Switch size 1, requested type "simple"
 12324                           ; Number of cases is 4, Range of values is 1 to 4
 12325                           ; switch strategies available:
 12326                           ; Name         Instructions Cycles
 12327                           ; simple_byte           13     7 (average)
 12328                           ; direct_byte           17     9 (fixed)
 12329                           ; jumptable            263     9 (fixed)
 12330                           ;	Chosen strategy is simple_byte
 12331     0769  0828               	movf	??_I2C1_DO_TX,w
 12332     076A  3A01               	xorlw	1	; case 1
 12333     076B  1903               	skipnz
 12334     076C  2F50               	goto	l4625
 12335     076D  3A03               	xorlw	3	; case 2
 12336     076E  1903               	skipnz
 12337     076F  2F4A               	goto	l4617
 12338     0770  3A01               	xorlw	1	; case 3
 12339     0771  1903               	skipnz
 12340     0772  2F4D               	goto	l4621
 12341     0773  3A07               	xorlw	7	; case 4
 12342     0774  1903               	skipnz
 12343     0775  2F50               	goto	l4625
 12344     0776  2F50               	goto	l4625
 12345     0777                     l513:	
 12346                           ;mcc_generated_files/i2c1_master.c: 370:     else
 12347                           
 12348                           
 12349                           ;mcc_generated_files/i2c1_master.c: 371:     {;mcc_generated_files/i2c1_master.c: 372:  
      +                                 I2C1_Status.addressNackCheck = 0;
 12350     0777  0141               	movlb	1	; select bank1
 12351     0778  103D               	bcf	(_I2C1_Status^(0+128)+29),0
 12352                           
 12353                           ;mcc_generated_files/i2c1_master.c: 373:         I2C1_MasterSendTxData(*I2C1_Status.data
      +                          _ptr++);
 12354     0779  0838               	movf	((_I2C1_Status+1)^(0+128)+23),w
 12355     077A  0087               	movwf	7
 12356     077B  0837               	movf	(_I2C1_Status^(0+128)+23),w
 12357     077C  0086               	movwf	6
 12358     077D  0AB7               	incf	(_I2C1_Status^(0+128)+23),f
 12359     077E  1903               	skipnz
 12360     077F  0AB8               	incf	((_I2C1_Status+1)^(0+128)+23),f
 12361     0780  0801               	movf	1,w
 12362     0781  3189  211A  3187   	fcall	_I2C1_MasterSendTxData
 12363                           
 12364                           ;mcc_generated_files/i2c1_master.c: 374:         return (--I2C1_Status.data_length)?I2C1
      +                          _TX:I2C1_TX_EMPTY;
 12365     0784  3001               	movlw	1
 12366     0785  0141               	movlb	1	; select bank1
 12367     0786  02B9               	subwf	(_I2C1_Status^(0+128)+25),f
 12368     0787  3000               	movlw	0
 12369     0788  3BBA               	subwfb	((_I2C1_Status+1)^(0+128)+25),f
 12370     0789  0839               	movf	(_I2C1_Status^(0+128)+25),w
 12371     078A  043A               	iorwf	((_I2C1_Status+1)^(0+128)+25),w
 12372     078B  1D03               	btfss	3,2
 12373     078C  2F8F               	goto	l4639
 12374     078D  3006               	movlw	6
 12375     078E  0008               	return
 12376     078F                     l4639:
 12377     078F  3003               	movlw	3
 12378     0790  0008               	return
 12379     0791                     __end_of_I2C1_DO_TX:
 12380                           
 12381                           	psect	text34
 12382     096B                     __ptext34:	
 12383 ;; *************** function _I2C1_DO_SEND_ADR_WRITE *****************
 12384 ;; Defined at:
 12385 ;;		line 347 in file "mcc_generated_files/i2c1_master.c"
 12386 ;; Parameters:    Size  Location     Type
 12387 ;;		None
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;		None
 12390 ;; Return value:  Size  Location     Type
 12391 ;;                  1    wreg      enum E10930
 12392 ;; Registers used:
 12393 ;;		wreg, status,2, status,0, pclath, cstack
 12394 ;; Tracked objects:
 12395 ;;		On entry : 3F/0
 12396 ;;		On exit  : 3F/3
 12397 ;;		Unchanged: 0/0
 12398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;Total ram usage:        0 bytes
 12404 ;; Hardware stack levels used: 1
 12405 ;; Hardware stack levels required when called: 5
 12406 ;; This function calls:
 12407 ;;		_I2C1_MasterSendTxData
 12408 ;; This function is called by:
 12409 ;;		_I2C1_MasterFsm
 12410 ;; This function uses a non-reentrant model
 12411 ;;
 12412                           
 12413     096B                     _I2C1_DO_SEND_ADR_WRITE:	
 12414                           ;psect for function _I2C1_DO_SEND_ADR_WRITE
 12415                           
 12416                           
 12417                           ;mcc_generated_files/i2c1_master.c: 349:     I2C1_Status.addressNackCheck = 1;
 12418                           
 12419                           ;incstack = 0
 12420                           ; Regs used in _I2C1_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12421     096B  0141               	movlb	1	; select bank1
 12422     096C  143D               	bsf	(_I2C1_Status^(0+128)+29),0
 12423                           
 12424                           ;mcc_generated_files/i2c1_master.c: 350:     I2C1_MasterSendTxData(I2C1_Status.address <
      +                          < 1);
 12425     096D  3536               	lslf	(_I2C1_Status^(0+128)+22),w
 12426     096E  3189  211A         	fcall	_I2C1_MasterSendTxData
 12427                           
 12428                           ;mcc_generated_files/i2c1_master.c: 351:     return I2C1_TX;
 12429     0970  3003               	movlw	3
 12430     0971  0008               	return
 12431     0972                     __end_of_I2C1_DO_SEND_ADR_WRITE:
 12432                           
 12433                           	psect	text35
 12434     097A                     __ptext35:	
 12435 ;; *************** function _I2C1_DO_SEND_ADR_READ *****************
 12436 ;; Defined at:
 12437 ;;		line 340 in file "mcc_generated_files/i2c1_master.c"
 12438 ;; Parameters:    Size  Location     Type
 12439 ;;		None
 12440 ;; Auto vars:     Size  Location     Type
 12441 ;;		None
 12442 ;; Return value:  Size  Location     Type
 12443 ;;                  1    wreg      enum E10930
 12444 ;; Registers used:
 12445 ;;		wreg, status,2, status,0, pclath, cstack
 12446 ;; Tracked objects:
 12447 ;;		On entry : 3F/0
 12448 ;;		On exit  : 3F/3
 12449 ;;		Unchanged: 0/0
 12450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;Total ram usage:        0 bytes
 12456 ;; Hardware stack levels used: 1
 12457 ;; Hardware stack levels required when called: 5
 12458 ;; This function calls:
 12459 ;;		_I2C1_MasterSendTxData
 12460 ;; This function is called by:
 12461 ;;		_I2C1_MasterFsm
 12462 ;; This function uses a non-reentrant model
 12463 ;;
 12464                           
 12465     097A                     _I2C1_DO_SEND_ADR_READ:	
 12466                           ;psect for function _I2C1_DO_SEND_ADR_READ
 12467                           
 12468                           
 12469                           ;mcc_generated_files/i2c1_master.c: 342:     I2C1_Status.addressNackCheck = 1;
 12470                           
 12471                           ;incstack = 0
 12472                           ; Regs used in _I2C1_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12473     097A  0141               	movlb	1	; select bank1
 12474     097B  143D               	bsf	(_I2C1_Status^(0+128)+29),0
 12475                           
 12476                           ;mcc_generated_files/i2c1_master.c: 343:     I2C1_MasterSendTxData(I2C1_Status.address <
      +                          < 1 | 1);
 12477     097C  1403               	setc
 12478     097D  0D36               	rlf	(_I2C1_Status^(0+128)+22),w
 12479     097E  3189  211A         	fcall	_I2C1_MasterSendTxData
 12480                           
 12481                           ;mcc_generated_files/i2c1_master.c: 344:     return I2C1_RCEN;
 12482     0980  3005               	movlw	5
 12483     0981  0008               	return
 12484     0982                     __end_of_I2C1_DO_SEND_ADR_READ:
 12485                           
 12486                           	psect	text36
 12487     091F                     __ptext36:	
 12488 ;; *************** function _I2C1_DO_IDLE *****************
 12489 ;; Defined at:
 12490 ;;		line 333 in file "mcc_generated_files/i2c1_master.c"
 12491 ;; Parameters:    Size  Location     Type
 12492 ;;		None
 12493 ;; Auto vars:     Size  Location     Type
 12494 ;;		None
 12495 ;; Return value:  Size  Location     Type
 12496 ;;                  1    wreg      enum E10930
 12497 ;; Registers used:
 12498 ;;		wreg, status,2
 12499 ;; Tracked objects:
 12500 ;;		On entry : 3F/0
 12501 ;;		On exit  : 3F/1
 12502 ;;		Unchanged: 0/0
 12503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;Total ram usage:        0 bytes
 12509 ;; Hardware stack levels used: 1
 12510 ;; Hardware stack levels required when called: 4
 12511 ;; This function calls:
 12512 ;;		Nothing
 12513 ;; This function is called by:
 12514 ;;		_I2C1_MasterFsm
 12515 ;; This function uses a non-reentrant model
 12516 ;;
 12517                           
 12518     091F                     _I2C1_DO_IDLE:	
 12519                           ;psect for function _I2C1_DO_IDLE
 12520                           
 12521                           
 12522                           ;mcc_generated_files/i2c1_master.c: 335:     I2C1_Status.busy = 0;
 12523                           
 12524                           ;incstack = 0
 12525                           ; Regs used in _I2C1_DO_IDLE: [wreg+status,2]
 12526     091F  0141               	movlb	1	; select bank1
 12527     0920  10BD               	bcf	(_I2C1_Status^(0+128)+29),1
 12528                           
 12529                           ;mcc_generated_files/i2c1_master.c: 336:     I2C1_Status.error = I2C1_NOERR;
 12530     0921  01BC               	clrf	(_I2C1_Status^(0+128)+28)
 12531                           
 12532                           ;mcc_generated_files/i2c1_master.c: 337:     return I2C1_RESET;
 12533     0922  300E               	movlw	14
 12534     0923  0008               	return
 12535     0924                     __end_of_I2C1_DO_IDLE:
 12536                           
 12537                           	psect	text37
 12538     0D15                     __ptext37:	
 12539 ;; *************** function _I2C1_DO_TX_EMPTY *****************
 12540 ;; Defined at:
 12541 ;;		line 409 in file "mcc_generated_files/i2c1_master.c"
 12542 ;; Parameters:    Size  Location     Type
 12543 ;;		None
 12544 ;; Auto vars:     Size  Location     Type
 12545 ;;		None
 12546 ;; Return value:  Size  Location     Type
 12547 ;;                  1    wreg      enum E10930
 12548 ;; Registers used:
 12549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12550 ;; Tracked objects:
 12551 ;;		On entry : 3F/0
 12552 ;;		On exit  : 32/2
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;Total ram usage:        2 bytes
 12560 ;; Hardware stack levels used: 1
 12561 ;; Hardware stack levels required when called: 7
 12562 ;; This function calls:
 12563 ;;		NULL
 12564 ;;		_I2C1_CallbackReturnReset
 12565 ;;		_I2C1_CallbackReturnStop
 12566 ;;		_I2C1_DO_SEND_RESTART
 12567 ;;		_I2C1_DO_SEND_STOP
 12568 ;;		_I2C1_MasterSetIrq
 12569 ;;		_rd1RegCompleteHandler
 12570 ;;		_rd2RegCompleteHandler
 12571 ;;		_rdBlkRegCompleteHandler
 12572 ;;		_wr1RegCompleteHandler
 12573 ;;		_wr2RegCompleteHandler
 12574 ;; This function is called by:
 12575 ;;		_I2C1_MasterFsm
 12576 ;; This function uses a non-reentrant model
 12577 ;;
 12578                           
 12579     0D15                     _I2C1_DO_TX_EMPTY:	
 12580                           ;psect for function _I2C1_DO_TX_EMPTY
 12581                           
 12582                           
 12583                           ;mcc_generated_files/i2c1_master.c: 411:     I2C1_Status.bufferFree = 1;
 12584                           
 12585                           ;incstack = 0
 12586                           ; Regs used in _I2C1_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12587     0D15  0141               	movlb	1	; select bank1
 12588     0D16  15BD               	bsf	(_I2C1_Status^(0+128)+29),3
 12589                           
 12590                           ;mcc_generated_files/i2c1_master.c: 412:     switch(I2C1_Status.callbackTable[I2C1_DATA_
      +                          COMPLETE](I2C1_Status.callbackPayload[I2C1_DATA_COMPLETE]))
 12591     0D17  2D22               	goto	l4703
 12592     0D18                     l4687:
 12593                           
 12594                           ;mcc_generated_files/i2c1_master.c: 416:             return I2C1_DO_SEND_RESTART();
 12595     0D18  3188  20F0         	fcall	_I2C1_DO_SEND_RESTART
 12596     0D1A  0008               	return
 12597     0D1B                     l4691:
 12598                           
 12599                           ;mcc_generated_files/i2c1_master.c: 418:             I2C1_MasterSetIrq();
 12600     0D1B  3188  20D5         	fcall	_I2C1_MasterSetIrq
 12601                           
 12602                           ;mcc_generated_files/i2c1_master.c: 419:             return I2C1_TX;
 12603     0D1D  3003               	movlw	3
 12604     0D1E  0008               	return
 12605     0D1F                     l4697:
 12606                           
 12607                           ;mcc_generated_files/i2c1_master.c: 422:             return I2C1_DO_SEND_STOP();
 12608     0D1F  3188  20F4         	fcall	_I2C1_DO_SEND_STOP
 12609     0D21  0008               	return
 12610     0D22                     l4703:
 12611     0D22  082C               	movf	(_I2C1_Status^(0+128)+12),w
 12612     0D23  0140               	movlb	0	; select bank0
 12613     0D24  00A7               	movwf	I2C1_CallbackReturnReset@funPtr
 12614     0D25  0141               	movlb	1	; select bank1
 12615     0D26  0821               	movf	(_I2C1_Status+1)^(0+128),w
 12616     0D27  008A               	movwf	10
 12617     0D28  0820               	movf	_I2C1_Status^(0+128),w
 12618     0D29  000A               	callw
 12619     0D2A  318D               	pagesel	$
 12620     0D2B  0140               	movlb	0	; select bank0
 12621     0D2C  00A8               	movwf	??_I2C1_DO_TX_EMPTY
 12622     0D2D  01A9               	clrf	??_I2C1_DO_TX_EMPTY+1
 12623                           
 12624                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12625                           ; Switch size 1, requested type "simple"
 12626                           ; Number of cases is 1, Range of values is 0 to 0
 12627                           ; switch strategies available:
 12628                           ; Name         Instructions Cycles
 12629                           ; simple_byte            4     3 (average)
 12630                           ; direct_byte            8     6 (fixed)
 12631                           ; jumptable            260     6 (fixed)
 12632                           ;	Chosen strategy is simple_byte
 12633     0D2E  0829               	movf	??_I2C1_DO_TX_EMPTY+1,w
 12634     0D2F  3A00               	xorlw	0	; case 0
 12635     0D30  1903               	skipnz
 12636     0D31  2D33               	goto	l5667
 12637     0D32  2D1F               	goto	l4697
 12638     0D33                     l5667:
 12639                           
 12640                           ; Switch size 1, requested type "simple"
 12641                           ; Number of cases is 4, Range of values is 1 to 4
 12642                           ; switch strategies available:
 12643                           ; Name         Instructions Cycles
 12644                           ; simple_byte           13     7 (average)
 12645                           ; direct_byte           17     9 (fixed)
 12646                           ; jumptable            263     9 (fixed)
 12647                           ;	Chosen strategy is simple_byte
 12648     0D33  0828               	movf	??_I2C1_DO_TX_EMPTY,w
 12649     0D34  3A01               	xorlw	1	; case 1
 12650     0D35  1903               	skipnz
 12651     0D36  2D1F               	goto	l4697
 12652     0D37  3A03               	xorlw	3	; case 2
 12653     0D38  1903               	skipnz
 12654     0D39  2D18               	goto	l4687
 12655     0D3A  3A01               	xorlw	1	; case 3
 12656     0D3B  1903               	skipnz
 12657     0D3C  2D18               	goto	l4687
 12658     0D3D  3A07               	xorlw	7	; case 4
 12659     0D3E  1903               	skipnz
 12660     0D3F  2D1B               	goto	l4691
 12661     0D40  2D1F               	goto	l4697
 12662     0D41  0008               	return
 12663     0D42                     __end_of_I2C1_DO_TX_EMPTY:
 12664                           
 12665                           	psect	text38
 12666     08D5                     __ptext38:	
 12667 ;; *************** function _I2C1_MasterSetIrq *****************
 12668 ;; Defined at:
 12669 ;;		line 645 in file "mcc_generated_files/i2c1_master.c"
 12670 ;; Parameters:    Size  Location     Type
 12671 ;;		None
 12672 ;; Auto vars:     Size  Location     Type
 12673 ;;		None
 12674 ;; Return value:  Size  Location     Type
 12675 ;;                  1    wreg      void 
 12676 ;; Registers used:
 12677 ;;		None
 12678 ;; Tracked objects:
 12679 ;;		On entry : 3F/0
 12680 ;;		On exit  : 3F/E
 12681 ;;		Unchanged: 0/0
 12682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12687 ;;Total ram usage:        0 bytes
 12688 ;; Hardware stack levels used: 1
 12689 ;; Hardware stack levels required when called: 4
 12690 ;; This function calls:
 12691 ;;		Nothing
 12692 ;; This function is called by:
 12693 ;;		_I2C1_DO_TX_EMPTY
 12694 ;; This function uses a non-reentrant model
 12695 ;;
 12696                           
 12697     08D5                     _I2C1_MasterSetIrq:	
 12698                           ;psect for function _I2C1_MasterSetIrq
 12699                           
 12700                           
 12701                           ;mcc_generated_files/i2c1_master.c: 647:     PIR3bits.SSP1IF = 1;
 12702                           
 12703                           ;incstack = 0
 12704                           ; Regs used in _I2C1_MasterSetIrq: []
 12705     08D5  014E               	movlb	14	; select bank14
 12706     08D6  140F               	bsf	15,0	;volatile
 12707     08D7  0008               	return
 12708     08D8                     __end_of_I2C1_MasterSetIrq:
 12709                           
 12710                           	psect	text39
 12711     0953                     __ptext39:	
 12712 ;; *************** function _I2C1_MasterIsNack *****************
 12713 ;; Defined at:
 12714 ;;		line 598 in file "mcc_generated_files/i2c1_master.c"
 12715 ;; Parameters:    Size  Location     Type
 12716 ;;		None
 12717 ;; Auto vars:     Size  Location     Type
 12718 ;;		None
 12719 ;; Return value:  Size  Location     Type
 12720 ;;                  1    wreg      _Bool 
 12721 ;; Registers used:
 12722 ;;		wreg, status,2, status,0
 12723 ;; Tracked objects:
 12724 ;;		On entry : 3E/1
 12725 ;;		On exit  : 3F/3
 12726 ;;		Unchanged: 0/0
 12727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;Total ram usage:        0 bytes
 12733 ;; Hardware stack levels used: 1
 12734 ;; Hardware stack levels required when called: 4
 12735 ;; This function calls:
 12736 ;;		Nothing
 12737 ;; This function is called by:
 12738 ;;		_I2C1_MasterFsm
 12739 ;;		_I2C1_DO_TX
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743     0953                     _I2C1_MasterIsNack:	
 12744                           ;psect for function _I2C1_MasterIsNack
 12745                           
 12746                           
 12747                           ;mcc_generated_files/i2c1_master.c: 600:     return SSP1CON2bits.ACKSTAT;
 12748                           
 12749                           ;incstack = 0
 12750                           ; Regs used in _I2C1_MasterIsNack: [wreg+status,2+status,0]
 12751     0953  0143               	movlb	3	; select bank3
 12752     0954  0E11               	swapf	17,w	;volatile
 12753     0955  0C89               	rrf	9,f
 12754     0956  0C89               	rrf	9,f
 12755     0957  3901               	andlw	1
 12756     0958  0008               	return
 12757     0959                     __end_of_I2C1_MasterIsNack:
 12758                           
 12759                           	psect	text40
 12760     091A                     __ptext40:	
 12761 ;; *************** function _I2C1_MasterSendTxData *****************
 12762 ;; Defined at:
 12763 ;;		line 568 in file "mcc_generated_files/i2c1_master.c"
 12764 ;; Parameters:    Size  Location     Type
 12765 ;;  data            1    wreg     unsigned char 
 12766 ;; Auto vars:     Size  Location     Type
 12767 ;;  data            1    4[COMMON] unsigned char 
 12768 ;; Return value:  Size  Location     Type
 12769 ;;                  1    wreg      void 
 12770 ;; Registers used:
 12771 ;;		wreg
 12772 ;; Tracked objects:
 12773 ;;		On entry : 3F/1
 12774 ;;		On exit  : 3F/3
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12781 ;;Total ram usage:        1 bytes
 12782 ;; Hardware stack levels used: 1
 12783 ;; Hardware stack levels required when called: 4
 12784 ;; This function calls:
 12785 ;;		Nothing
 12786 ;; This function is called by:
 12787 ;;		_I2C1_DO_SEND_ADR_READ
 12788 ;;		_I2C1_DO_SEND_ADR_WRITE
 12789 ;;		_I2C1_DO_TX
 12790 ;; This function uses a non-reentrant model
 12791 ;;
 12792                           
 12793     091A                     _I2C1_MasterSendTxData:	
 12794                           ;psect for function _I2C1_MasterSendTxData
 12795                           
 12796                           
 12797                           ;incstack = 0
 12798                           ; Regs used in _I2C1_MasterSendTxData: [wreg]
 12799                           ;I2C1_MasterSendTxData@data stored from wreg
 12800     091A  00F4               	movwf	I2C1_MasterSendTxData@data
 12801                           
 12802                           ;mcc_generated_files/i2c1_master.c: 568: static __attribute__((inline)) void I2C1_Master
      +                          SendTxData(uint8_t data);mcc_generated_files/i2c1_master.c: 569: {;mcc_generated_files/i
      +                          2c1_master.c: 570:     SSP1BUF = data;
 12803     091B  0874               	movf	I2C1_MasterSendTxData@data,w
 12804     091C  0143               	movlb	3	; select bank3
 12805     091D  008C               	movwf	12	;volatile
 12806     091E  0008               	return
 12807     091F                     __end_of_I2C1_MasterSendTxData:
 12808                           
 12809                           	psect	text41
 12810     08E4                     __ptext41:	
 12811 ;; *************** function _I2C1_MasterSendAck *****************
 12812 ;; Defined at:
 12813 ;;		line 603 in file "mcc_generated_files/i2c1_master.c"
 12814 ;; Parameters:    Size  Location     Type
 12815 ;;		None
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;		None
 12818 ;; Return value:  Size  Location     Type
 12819 ;;                  1    wreg      void 
 12820 ;; Registers used:
 12821 ;;		None
 12822 ;; Tracked objects:
 12823 ;;		On entry : 3E/0
 12824 ;;		On exit  : 3F/3
 12825 ;;		Unchanged: 0/0
 12826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;Total ram usage:        0 bytes
 12832 ;; Hardware stack levels used: 1
 12833 ;; Hardware stack levels required when called: 4
 12834 ;; This function calls:
 12835 ;;		Nothing
 12836 ;; This function is called by:
 12837 ;;		_I2C1_DO_RX
 12838 ;;		_I2C1_DO_RX_ACK
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842     08E4                     _I2C1_MasterSendAck:	
 12843                           ;psect for function _I2C1_MasterSendAck
 12844                           
 12845                           
 12846                           ;mcc_generated_files/i2c1_master.c: 605:     SSP1CON2bits.ACKDT = 0;
 12847                           
 12848                           ;incstack = 0
 12849                           ; Regs used in _I2C1_MasterSendAck: []
 12850     08E4  0143               	movlb	3	; select bank3
 12851     08E5  1291               	bcf	17,5	;volatile
 12852                           
 12853                           ;mcc_generated_files/i2c1_master.c: 606:     SSP1CON2bits.ACKEN = 1;
 12854     08E6  1611               	bsf	17,4	;volatile
 12855     08E7  0008               	return
 12856     08E8                     __end_of_I2C1_MasterSendAck:
 12857                           
 12858                           	psect	text42
 12859     08D2                     __ptext42:	
 12860 ;; *************** function _I2C1_MasterGetRxData *****************
 12861 ;; Defined at:
 12862 ;;		line 563 in file "mcc_generated_files/i2c1_master.c"
 12863 ;; Parameters:    Size  Location     Type
 12864 ;;		None
 12865 ;; Auto vars:     Size  Location     Type
 12866 ;;		None
 12867 ;; Return value:  Size  Location     Type
 12868 ;;                  1    wreg      unsigned char 
 12869 ;; Registers used:
 12870 ;;		wreg
 12871 ;; Tracked objects:
 12872 ;;		On entry : 3F/1
 12873 ;;		On exit  : 3F/3
 12874 ;;		Unchanged: 0/0
 12875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12880 ;;Total ram usage:        0 bytes
 12881 ;; Hardware stack levels used: 1
 12882 ;; Hardware stack levels required when called: 4
 12883 ;; This function calls:
 12884 ;;		Nothing
 12885 ;; This function is called by:
 12886 ;;		_I2C1_DO_RX
 12887 ;; This function uses a non-reentrant model
 12888 ;;
 12889                           
 12890     08D2                     _I2C1_MasterGetRxData:	
 12891                           ;psect for function _I2C1_MasterGetRxData
 12892                           
 12893                           
 12894                           ;mcc_generated_files/i2c1_master.c: 565:     return SSP1BUF;
 12895                           
 12896                           ;incstack = 0
 12897                           ; Regs used in _I2C1_MasterGetRxData: [wreg]
 12898     08D2  0143               	movlb	3	; select bank3
 12899     08D3  080C               	movf	12,w	;volatile
 12900     08D4  0008               	return
 12901     08D5                     __end_of_I2C1_MasterGetRxData:
 12902                           
 12903                           	psect	text43
 12904     08E0                     __ptext43:	
 12905 ;; *************** function _I2C1_MasterSendNack *****************
 12906 ;; Defined at:
 12907 ;;		line 609 in file "mcc_generated_files/i2c1_master.c"
 12908 ;; Parameters:    Size  Location     Type
 12909 ;;		None
 12910 ;; Auto vars:     Size  Location     Type
 12911 ;;		None
 12912 ;; Return value:  Size  Location     Type
 12913 ;;                  1    wreg      void 
 12914 ;; Registers used:
 12915 ;;		None
 12916 ;; Tracked objects:
 12917 ;;		On entry : 3F/0
 12918 ;;		On exit  : 3F/3
 12919 ;;		Unchanged: 0/0
 12920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;Total ram usage:        0 bytes
 12926 ;; Hardware stack levels used: 1
 12927 ;; Hardware stack levels required when called: 4
 12928 ;; This function calls:
 12929 ;;		Nothing
 12930 ;; This function is called by:
 12931 ;;		_I2C1_DO_RX_NACK_STOP
 12932 ;;		_I2C1_DO_RX_NACK_RESTART
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936     08E0                     _I2C1_MasterSendNack:	
 12937                           ;psect for function _I2C1_MasterSendNack
 12938                           
 12939                           
 12940                           ;mcc_generated_files/i2c1_master.c: 611:     SSP1CON2bits.ACKDT = 1;
 12941                           
 12942                           ;incstack = 0
 12943                           ; Regs used in _I2C1_MasterSendNack: []
 12944     08E0  0143               	movlb	3	; select bank3
 12945     08E1  1691               	bsf	17,5	;volatile
 12946                           
 12947                           ;mcc_generated_files/i2c1_master.c: 612:     SSP1CON2bits.ACKEN = 1;
 12948     08E2  1611               	bsf	17,4	;volatile
 12949     08E3  0008               	return
 12950     08E4                     __end_of_I2C1_MasterSendNack:
 12951                           
 12952                           	psect	text44
 12953     08CF                     __ptext44:	
 12954 ;; *************** function _I2C1_MasterStartRx *****************
 12955 ;; Defined at:
 12956 ;;		line 583 in file "mcc_generated_files/i2c1_master.c"
 12957 ;; Parameters:    Size  Location     Type
 12958 ;;		None
 12959 ;; Auto vars:     Size  Location     Type
 12960 ;;		None
 12961 ;; Return value:  Size  Location     Type
 12962 ;;                  1    wreg      void 
 12963 ;; Registers used:
 12964 ;;		None
 12965 ;; Tracked objects:
 12966 ;;		On entry : 3F/1
 12967 ;;		On exit  : 3F/3
 12968 ;;		Unchanged: 0/0
 12969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12974 ;;Total ram usage:        0 bytes
 12975 ;; Hardware stack levels used: 1
 12976 ;; Hardware stack levels required when called: 4
 12977 ;; This function calls:
 12978 ;;		Nothing
 12979 ;; This function is called by:
 12980 ;;		_I2C1_DO_RCEN
 12981 ;; This function uses a non-reentrant model
 12982 ;;
 12983                           
 12984     08CF                     _I2C1_MasterStartRx:	
 12985                           ;psect for function _I2C1_MasterStartRx
 12986                           
 12987                           
 12988                           ;mcc_generated_files/i2c1_master.c: 585:     SSP1CON2bits.RCEN = 1;
 12989                           
 12990                           ;incstack = 0
 12991                           ; Regs used in _I2C1_MasterStartRx: []
 12992     08CF  0143               	movlb	3	; select bank3
 12993     08D0  1591               	bsf	17,3	;volatile
 12994     08D1  0008               	return
 12995     08D2                     __end_of_I2C1_MasterStartRx:
 12996                           
 12997                           	psect	text45
 12998     0002                     __ptext45:	
 12999 ;; *************** function _I2C1_CallbackReturnReset *****************
 13000 ;; Defined at:
 13001 ;;		line 525 in file "mcc_generated_files/i2c1_master.c"
 13002 ;; Parameters:    Size  Location     Type
 13003 ;;  funPtr          1    7[BANK0 ] PTR void 
 13004 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 13005 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;		None
 13008 ;; Return value:  Size  Location     Type
 13009 ;;                  1    wreg      enum E363
 13010 ;; Registers used:
 13011 ;;		wreg
 13012 ;; Tracked objects:
 13013 ;;		On entry : 3E/1
 13014 ;;		On exit  : 3E/0
 13015 ;;		Unchanged: 3E/0
 13016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13017 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13020 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;Total ram usage:        1 bytes
 13022 ;; Hardware stack levels used: 1
 13023 ;; Hardware stack levels required when called: 4
 13024 ;; This function calls:
 13025 ;;		Nothing
 13026 ;; This function is called by:
 13027 ;;		_I2C1_Open
 13028 ;;		_I2C1_DO_TX
 13029 ;;		_I2C1_DO_RX
 13030 ;;		_I2C1_DO_TX_EMPTY
 13031 ;;		_I2C1_DO_ADDRESS_NACK
 13032 ;; This function uses a non-reentrant model
 13033 ;;
 13034                           
 13035     0002                     _I2C1_CallbackReturnReset:	
 13036                           ;psect for function _I2C1_CallbackReturnReset
 13037                           
 13038                           
 13039                           ;mcc_generated_files/i2c1_master.c: 525: i2c1_operations_t I2C1_CallbackReturnReset(void
      +                           *funPtr);mcc_generated_files/i2c1_master.c: 526: {;mcc_generated_files/i2c1_master.c: 5
      +                          27:     return I2C1_RESET_LINK;
 13040                           
 13041                           ;incstack = 0
 13042                           ; Regs used in _I2C1_CallbackReturnReset: [wreg]
 13043     0002  3005               	movlw	5
 13044     0003  0008               	return
 13045     0004                     __end_of_I2C1_CallbackReturnReset:
 13046                           
 13047                           	psect	text46
 13048     08AF                     __ptext46:	
 13049 ;; *************** function _I2C1_CallbackReturnStop *****************
 13050 ;; Defined at:
 13051 ;;		line 520 in file "mcc_generated_files/i2c1_master.c"
 13052 ;; Parameters:    Size  Location     Type
 13053 ;;  funPtr          1    7[BANK0 ] PTR void 
 13054 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 13055 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 13056 ;; Auto vars:     Size  Location     Type
 13057 ;;		None
 13058 ;; Return value:  Size  Location     Type
 13059 ;;                  1    wreg      enum E363
 13060 ;; Registers used:
 13061 ;;		wreg
 13062 ;; Tracked objects:
 13063 ;;		On entry : 3E/1
 13064 ;;		On exit  : 3E/0
 13065 ;;		Unchanged: 3E/0
 13066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13067 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13071 ;;Total ram usage:        1 bytes
 13072 ;; Hardware stack levels used: 1
 13073 ;; Hardware stack levels required when called: 4
 13074 ;; This function calls:
 13075 ;;		Nothing
 13076 ;; This function is called by:
 13077 ;;		_I2C1_Open
 13078 ;;		_I2C1_SetCallback
 13079 ;;		_I2C1_DO_TX
 13080 ;;		_I2C1_DO_RX
 13081 ;;		_I2C1_DO_TX_EMPTY
 13082 ;;		_I2C1_DO_ADDRESS_NACK
 13083 ;; This function uses a non-reentrant model
 13084 ;;
 13085                           
 13086     08AF                     _I2C1_CallbackReturnStop:	
 13087                           ;psect for function _I2C1_CallbackReturnStop
 13088                           
 13089                           
 13090                           ;mcc_generated_files/i2c1_master.c: 520: i2c1_operations_t I2C1_CallbackReturnStop(void 
      +                          *funPtr);mcc_generated_files/i2c1_master.c: 521: {;mcc_generated_files/i2c1_master.c: 52
      +                          2:     return I2C1_STOP;
 13091                           
 13092                           ;incstack = 0
 13093                           ; Regs used in _I2C1_CallbackReturnStop: [wreg]
 13094     08AF  3001               	movlw	1
 13095     08B0  0008               	return
 13096     08B1                     __end_of_I2C1_CallbackReturnStop:
 13097                           
 13098                           	psect	text47
 13099     0B67                     __ptext47:	
 13100 ;; *************** function _rdBlkRegCompleteHandler *****************
 13101 ;; Defined at:
 13102 ;;		line 170 in file "mcc_generated_files/examples/i2c1_master_example.c"
 13103 ;; Parameters:    Size  Location     Type
 13104 ;;  ptr             1    7[BANK0 ] PTR void 
 13105 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 13106 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 13107 ;; Auto vars:     Size  Location     Type
 13108 ;;		None
 13109 ;; Return value:  Size  Location     Type
 13110 ;;                  1    wreg      enum E363
 13111 ;; Registers used:
 13112 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13113 ;; Tracked objects:
 13114 ;;		On entry : 3E/1
 13115 ;;		On exit  : 3F/0
 13116 ;;		Unchanged: 0/0
 13117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13118 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13121 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13122 ;;Total ram usage:        1 bytes
 13123 ;; Hardware stack levels used: 1
 13124 ;; Hardware stack levels required when called: 6
 13125 ;; This function calls:
 13126 ;;		_I2C1_SetBuffer
 13127 ;;		_I2C1_SetDataCompleteCallback
 13128 ;; This function is called by:
 13129 ;;		_I2C1_DO_TX
 13130 ;;		_I2C1_DO_RX
 13131 ;;		_I2C1_DO_TX_EMPTY
 13132 ;;		_I2C1_DO_ADDRESS_NACK
 13133 ;; This function uses a non-reentrant model
 13134 ;;
 13135                           
 13136     0B67                     _rdBlkRegCompleteHandler:	
 13137                           ;psect for function _rdBlkRegCompleteHandler
 13138                           
 13139                           
 13140                           ;mcc_generated_files/examples/i2c1_master_example.c: 170: static i2c1_operations_t rdBlk
      +                          RegCompleteHandler(void *ptr);mcc_generated_files/examples/i2c1_master_example.c: 171: {
      +                          ;mcc_generated_files/examples/i2c1_master_example.c: 172:     I2C1_SetBuffer(((i2c1_buff
      +                          er_t *)ptr)->data,((i2c1_buffer_t*)ptr)->len);
 13141                           
 13142                           ;incstack = 0
 13143                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13144     0B67  0140               	movlb	0	; select bank0
 13145     0B68  0827               	movf	rdBlkRegCompleteHandler@ptr,w
 13146     0B69  3E02               	addlw	2
 13147     0B6A  0086               	movwf	6
 13148     0B6B  0187               	clrf	7
 13149     0B6C  0801               	movf	1,w
 13150     0B6D  00A0               	movwf	I2C1_SetBuffer@buffer
 13151     0B6E  3000               	movlw	0
 13152     0B6F  00A1               	movwf	I2C1_SetBuffer@buffer+1
 13153     0B70  0827               	movf	rdBlkRegCompleteHandler@ptr,w
 13154     0B71  0086               	movwf	6
 13155     0B72  0187               	clrf	7
 13156     0B73  3F40               	moviw [0]fsr1
 13157     0B74  00A2               	movwf	I2C1_SetBuffer@bufferSize
 13158     0B75  3F41               	moviw [1]fsr1
 13159     0B76  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 13160     0B77  318A  22D5  318B   	fcall	_I2C1_SetBuffer
 13161                           
 13162                           ;mcc_generated_files/examples/i2c1_master_example.c: 173:     I2C1_SetDataCompleteCallba
      +                          ck(((void*)0),((void*)0));
 13163     0B7A  3000               	movlw	0
 13164     0B7B  0140               	movlb	0	; select bank0
 13165     0B7C  00A4               	movwf	I2C1_SetDataCompleteCallback@cb
 13166     0B7D  00A5               	movwf	I2C1_SetDataCompleteCallback@cb+1
 13167     0B7E  01A6               	clrf	I2C1_SetDataCompleteCallback@ptr
 13168     0B7F  3189  21A8         	fcall	_I2C1_SetDataCompleteCallback
 13169                           
 13170                           ;mcc_generated_files/examples/i2c1_master_example.c: 174:     return I2C1_RESTART_READ;
 13171     0B81  3002               	movlw	2
 13172     0B82  0008               	return
 13173     0B83                     __end_of_rdBlkRegCompleteHandler:
 13174                           
 13175                           	psect	text48
 13176     0A97                     __ptext48:	
 13177 ;; *************** function _wr1RegCompleteHandler *****************
 13178 ;; Defined at:
 13179 ;;		line 156 in file "mcc_generated_files/examples/i2c1_master_example.c"
 13180 ;; Parameters:    Size  Location     Type
 13181 ;;  ptr             1    7[BANK0 ] PTR void 
 13182 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 13183 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 13184 ;; Auto vars:     Size  Location     Type
 13185 ;;		None
 13186 ;; Return value:  Size  Location     Type
 13187 ;;                  1    wreg      enum E363
 13188 ;; Registers used:
 13189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13190 ;; Tracked objects:
 13191 ;;		On entry : 3E/1
 13192 ;;		On exit  : 3F/0
 13193 ;;		Unchanged: 0/0
 13194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13195 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;Total ram usage:        1 bytes
 13200 ;; Hardware stack levels used: 1
 13201 ;; Hardware stack levels required when called: 6
 13202 ;; This function calls:
 13203 ;;		_I2C1_SetBuffer
 13204 ;;		_I2C1_SetDataCompleteCallback
 13205 ;; This function is called by:
 13206 ;;		_I2C1_DO_TX
 13207 ;;		_I2C1_DO_RX
 13208 ;;		_I2C1_DO_TX_EMPTY
 13209 ;;		_I2C1_DO_ADDRESS_NACK
 13210 ;; This function uses a non-reentrant model
 13211 ;;
 13212                           
 13213     0A97                     _wr1RegCompleteHandler:	
 13214                           ;psect for function _wr1RegCompleteHandler
 13215                           
 13216                           
 13217                           ;mcc_generated_files/examples/i2c1_master_example.c: 156: static i2c1_operations_t wr1Re
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c1_master_example.c: 157: {;m
      +                          cc_generated_files/examples/i2c1_master_example.c: 158:     I2C1_SetBuffer(ptr,1);
 13218                           
 13219                           ;incstack = 0
 13220                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13221     0A97  0140               	movlb	0	; select bank0
 13222     0A98  0827               	movf	wr1RegCompleteHandler@ptr,w
 13223     0A99  00A0               	movwf	I2C1_SetBuffer@buffer
 13224     0A9A  01A1               	clrf	I2C1_SetBuffer@buffer+1
 13225     0A9B  3001               	movlw	1
 13226     0A9C  00A2               	movwf	I2C1_SetBuffer@bufferSize
 13227     0A9D  3000               	movlw	0
 13228     0A9E  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 13229     0A9F  318A  22D5  318A   	fcall	_I2C1_SetBuffer
 13230                           
 13231                           ;mcc_generated_files/examples/i2c1_master_example.c: 159:     I2C1_SetDataCompleteCallba
      +                          ck(((void*)0),((void*)0));
 13232     0AA2  3000               	movlw	0
 13233     0AA3  0140               	movlb	0	; select bank0
 13234     0AA4  00A4               	movwf	I2C1_SetDataCompleteCallback@cb
 13235     0AA5  00A5               	movwf	I2C1_SetDataCompleteCallback@cb+1
 13236     0AA6  01A6               	clrf	I2C1_SetDataCompleteCallback@ptr
 13237     0AA7  3189  21A8         	fcall	_I2C1_SetDataCompleteCallback
 13238                           
 13239                           ;mcc_generated_files/examples/i2c1_master_example.c: 160:     return I2C1_CONTINUE;
 13240     0AA9  3004               	movlw	4
 13241     0AAA  0008               	return
 13242     0AAB                     __end_of_wr1RegCompleteHandler:
 13243                           
 13244                           	psect	text49
 13245     0A83                     __ptext49:	
 13246 ;; *************** function _rd2RegCompleteHandler *****************
 13247 ;; Defined at:
 13248 ;;		line 149 in file "mcc_generated_files/examples/i2c1_master_example.c"
 13249 ;; Parameters:    Size  Location     Type
 13250 ;;  ptr             1    7[BANK0 ] PTR void 
 13251 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 13252 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 13253 ;; Auto vars:     Size  Location     Type
 13254 ;;		None
 13255 ;; Return value:  Size  Location     Type
 13256 ;;                  1    wreg      enum E363
 13257 ;; Registers used:
 13258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13259 ;; Tracked objects:
 13260 ;;		On entry : 3E/1
 13261 ;;		On exit  : 3F/0
 13262 ;;		Unchanged: 0/0
 13263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13264 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13267 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;Total ram usage:        1 bytes
 13269 ;; Hardware stack levels used: 1
 13270 ;; Hardware stack levels required when called: 6
 13271 ;; This function calls:
 13272 ;;		_I2C1_SetBuffer
 13273 ;;		_I2C1_SetDataCompleteCallback
 13274 ;; This function is called by:
 13275 ;;		_I2C1_DO_TX
 13276 ;;		_I2C1_DO_RX
 13277 ;;		_I2C1_DO_TX_EMPTY
 13278 ;;		_I2C1_DO_ADDRESS_NACK
 13279 ;; This function uses a non-reentrant model
 13280 ;;
 13281                           
 13282     0A83                     _rd2RegCompleteHandler:	
 13283                           ;psect for function _rd2RegCompleteHandler
 13284                           
 13285                           
 13286                           ;mcc_generated_files/examples/i2c1_master_example.c: 149: static i2c1_operations_t rd2Re
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c1_master_example.c: 150: {;m
      +                          cc_generated_files/examples/i2c1_master_example.c: 151:     I2C1_SetBuffer(ptr,2);
 13287                           
 13288                           ;incstack = 0
 13289                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13290     0A83  0140               	movlb	0	; select bank0
 13291     0A84  0827               	movf	rd2RegCompleteHandler@ptr,w
 13292     0A85  00A0               	movwf	I2C1_SetBuffer@buffer
 13293     0A86  01A1               	clrf	I2C1_SetBuffer@buffer+1
 13294     0A87  3002               	movlw	2
 13295     0A88  00A2               	movwf	I2C1_SetBuffer@bufferSize
 13296     0A89  3000               	movlw	0
 13297     0A8A  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 13298     0A8B  318A  22D5  318A   	fcall	_I2C1_SetBuffer
 13299                           
 13300                           ;mcc_generated_files/examples/i2c1_master_example.c: 152:     I2C1_SetDataCompleteCallba
      +                          ck(((void*)0),((void*)0));
 13301     0A8E  3000               	movlw	0
 13302     0A8F  0140               	movlb	0	; select bank0
 13303     0A90  00A4               	movwf	I2C1_SetDataCompleteCallback@cb
 13304     0A91  00A5               	movwf	I2C1_SetDataCompleteCallback@cb+1
 13305     0A92  01A6               	clrf	I2C1_SetDataCompleteCallback@ptr
 13306     0A93  3189  21A8         	fcall	_I2C1_SetDataCompleteCallback
 13307                           
 13308                           ;mcc_generated_files/examples/i2c1_master_example.c: 153:     return I2C1_RESTART_READ;
 13309     0A95  3002               	movlw	2
 13310     0A96  0008               	return
 13311     0A97                     __end_of_rd2RegCompleteHandler:
 13312                           
 13313                           	psect	text50
 13314     0A6F                     __ptext50:	
 13315 ;; *************** function _rd1RegCompleteHandler *****************
 13316 ;; Defined at:
 13317 ;;		line 142 in file "mcc_generated_files/examples/i2c1_master_example.c"
 13318 ;; Parameters:    Size  Location     Type
 13319 ;;  ptr             1    7[BANK0 ] PTR void 
 13320 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 13321 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 13322 ;; Auto vars:     Size  Location     Type
 13323 ;;		None
 13324 ;; Return value:  Size  Location     Type
 13325 ;;                  1    wreg      enum E363
 13326 ;; Registers used:
 13327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13328 ;; Tracked objects:
 13329 ;;		On entry : 3E/1
 13330 ;;		On exit  : 3F/0
 13331 ;;		Unchanged: 0/0
 13332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13333 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13337 ;;Total ram usage:        1 bytes
 13338 ;; Hardware stack levels used: 1
 13339 ;; Hardware stack levels required when called: 6
 13340 ;; This function calls:
 13341 ;;		_I2C1_SetBuffer
 13342 ;;		_I2C1_SetDataCompleteCallback
 13343 ;; This function is called by:
 13344 ;;		_I2C1_DO_TX
 13345 ;;		_I2C1_DO_RX
 13346 ;;		_I2C1_DO_TX_EMPTY
 13347 ;;		_I2C1_DO_ADDRESS_NACK
 13348 ;; This function uses a non-reentrant model
 13349 ;;
 13350                           
 13351     0A6F                     _rd1RegCompleteHandler:	
 13352                           ;psect for function _rd1RegCompleteHandler
 13353                           
 13354                           
 13355                           ;mcc_generated_files/examples/i2c1_master_example.c: 142: static i2c1_operations_t rd1Re
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c1_master_example.c: 143: {;m
      +                          cc_generated_files/examples/i2c1_master_example.c: 144:     I2C1_SetBuffer(ptr,1);
 13356                           
 13357                           ;incstack = 0
 13358                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13359     0A6F  0140               	movlb	0	; select bank0
 13360     0A70  0827               	movf	rd1RegCompleteHandler@ptr,w
 13361     0A71  00A0               	movwf	I2C1_SetBuffer@buffer
 13362     0A72  01A1               	clrf	I2C1_SetBuffer@buffer+1
 13363     0A73  3001               	movlw	1
 13364     0A74  00A2               	movwf	I2C1_SetBuffer@bufferSize
 13365     0A75  3000               	movlw	0
 13366     0A76  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 13367     0A77  318A  22D5  318A   	fcall	_I2C1_SetBuffer
 13368                           
 13369                           ;mcc_generated_files/examples/i2c1_master_example.c: 145:     I2C1_SetDataCompleteCallba
      +                          ck(((void*)0),((void*)0));
 13370     0A7A  3000               	movlw	0
 13371     0A7B  0140               	movlb	0	; select bank0
 13372     0A7C  00A4               	movwf	I2C1_SetDataCompleteCallback@cb
 13373     0A7D  00A5               	movwf	I2C1_SetDataCompleteCallback@cb+1
 13374     0A7E  01A6               	clrf	I2C1_SetDataCompleteCallback@ptr
 13375     0A7F  3189  21A8         	fcall	_I2C1_SetDataCompleteCallback
 13376                           
 13377                           ;mcc_generated_files/examples/i2c1_master_example.c: 146:     return I2C1_RESTART_READ;
 13378     0A81  3002               	movlw	2
 13379     0A82  0008               	return
 13380     0A83                     __end_of_rd1RegCompleteHandler:
 13381                           
 13382                           	psect	text51
 13383     0A5B                     __ptext51:	
 13384 ;; *************** function _wr2RegCompleteHandler *****************
 13385 ;; Defined at:
 13386 ;;		line 163 in file "mcc_generated_files/examples/i2c1_master_example.c"
 13387 ;; Parameters:    Size  Location     Type
 13388 ;;  ptr             1    7[BANK0 ] PTR void 
 13389 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 13390 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 13391 ;; Auto vars:     Size  Location     Type
 13392 ;;		None
 13393 ;; Return value:  Size  Location     Type
 13394 ;;                  1    wreg      enum E363
 13395 ;; Registers used:
 13396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13397 ;; Tracked objects:
 13398 ;;		On entry : 3E/1
 13399 ;;		On exit  : 3F/0
 13400 ;;		Unchanged: 0/0
 13401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13402 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13406 ;;Total ram usage:        1 bytes
 13407 ;; Hardware stack levels used: 1
 13408 ;; Hardware stack levels required when called: 6
 13409 ;; This function calls:
 13410 ;;		_I2C1_SetBuffer
 13411 ;;		_I2C1_SetDataCompleteCallback
 13412 ;; This function is called by:
 13413 ;;		_I2C1_DO_TX
 13414 ;;		_I2C1_DO_RX
 13415 ;;		_I2C1_DO_TX_EMPTY
 13416 ;;		_I2C1_DO_ADDRESS_NACK
 13417 ;; This function uses a non-reentrant model
 13418 ;;
 13419                           
 13420     0A5B                     _wr2RegCompleteHandler:	
 13421                           ;psect for function _wr2RegCompleteHandler
 13422                           
 13423                           
 13424                           ;mcc_generated_files/examples/i2c1_master_example.c: 163: static i2c1_operations_t wr2Re
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c1_master_example.c: 164: {;m
      +                          cc_generated_files/examples/i2c1_master_example.c: 165:     I2C1_SetBuffer(ptr,2);
 13425                           
 13426                           ;incstack = 0
 13427                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13428     0A5B  0140               	movlb	0	; select bank0
 13429     0A5C  0827               	movf	wr2RegCompleteHandler@ptr,w
 13430     0A5D  00A0               	movwf	I2C1_SetBuffer@buffer
 13431     0A5E  01A1               	clrf	I2C1_SetBuffer@buffer+1
 13432     0A5F  3002               	movlw	2
 13433     0A60  00A2               	movwf	I2C1_SetBuffer@bufferSize
 13434     0A61  3000               	movlw	0
 13435     0A62  00A3               	movwf	I2C1_SetBuffer@bufferSize+1
 13436     0A63  318A  22D5  318A   	fcall	_I2C1_SetBuffer
 13437                           
 13438                           ;mcc_generated_files/examples/i2c1_master_example.c: 166:     I2C1_SetDataCompleteCallba
      +                          ck(((void*)0),((void*)0));
 13439     0A66  3000               	movlw	0
 13440     0A67  0140               	movlb	0	; select bank0
 13441     0A68  00A4               	movwf	I2C1_SetDataCompleteCallback@cb
 13442     0A69  00A5               	movwf	I2C1_SetDataCompleteCallback@cb+1
 13443     0A6A  01A6               	clrf	I2C1_SetDataCompleteCallback@ptr
 13444     0A6B  3189  21A8         	fcall	_I2C1_SetDataCompleteCallback
 13445                           
 13446                           ;mcc_generated_files/examples/i2c1_master_example.c: 167:     return I2C1_CONTINUE;
 13447     0A6D  3004               	movlw	4
 13448     0A6E  0008               	return
 13449     0A6F                     __end_of_wr2RegCompleteHandler:
 13450                           
 13451                           	psect	text52
 13452     09A8                     __ptext52:	
 13453 ;; *************** function _I2C1_SetDataCompleteCallback *****************
 13454 ;; Defined at:
 13455 ;;		line 273 in file "mcc_generated_files/i2c1_master.c"
 13456 ;; Parameters:    Size  Location     Type
 13457 ;;  cb              2    4[BANK0 ] PTR FTN(PTR void ,)enum 
 13458 ;;		 -> NULL(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
 13459 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 13460 ;;  ptr             1    6[BANK0 ] PTR void 
 13461 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 13462 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 13463 ;; Auto vars:     Size  Location     Type
 13464 ;;		None
 13465 ;; Return value:  Size  Location     Type
 13466 ;;                  1    wreg      void 
 13467 ;; Registers used:
 13468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13469 ;; Tracked objects:
 13470 ;;		On entry : 3F/0
 13471 ;;		On exit  : 3F/0
 13472 ;;		Unchanged: 0/0
 13473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13474 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;Total ram usage:        3 bytes
 13479 ;; Hardware stack levels used: 1
 13480 ;; Hardware stack levels required when called: 5
 13481 ;; This function calls:
 13482 ;;		_I2C1_SetCallback
 13483 ;; This function is called by:
 13484 ;;		_rd1RegCompleteHandler
 13485 ;;		_rd2RegCompleteHandler
 13486 ;;		_wr1RegCompleteHandler
 13487 ;;		_wr2RegCompleteHandler
 13488 ;;		_rdBlkRegCompleteHandler
 13489 ;; This function uses a non-reentrant model
 13490 ;;
 13491                           
 13492     09A8                     _I2C1_SetDataCompleteCallback:	
 13493                           ;psect for function _I2C1_SetDataCompleteCallback
 13494                           
 13495                           
 13496                           ;mcc_generated_files/i2c1_master.c: 273: void I2C1_SetDataCompleteCallback(i2c1_callback
      +                          _t cb, void *ptr);mcc_generated_files/i2c1_master.c: 274: {;mcc_generated_files/i2c1_mas
      +                          ter.c: 275:     I2C1_SetCallback(I2C1_DATA_COMPLETE, cb, ptr);
 13497                           
 13498                           ;incstack = 0
 13499                           ; Regs used in _I2C1_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13500     09A8  0825               	movf	I2C1_SetDataCompleteCallback@cb+1,w
 13501     09A9  00A1               	movwf	I2C1_SetCallback@cb+1
 13502     09AA  0824               	movf	I2C1_SetDataCompleteCallback@cb,w
 13503     09AB  00A0               	movwf	I2C1_SetCallback@cb
 13504     09AC  0826               	movf	I2C1_SetDataCompleteCallback@ptr,w
 13505     09AD  00A2               	movwf	I2C1_SetCallback@ptr
 13506     09AE  3000               	movlw	0
 13507     09AF  318E  26A0         	fcall	_I2C1_SetCallback
 13508     09B1  0008               	return
 13509     09B2                     __end_of_I2C1_SetDataCompleteCallback:
 13510                           
 13511                           	psect	text53
 13512     0EA0                     __ptext53:	
 13513 ;; *************** function _I2C1_SetCallback *****************
 13514 ;; Defined at:
 13515 ;;		line 298 in file "mcc_generated_files/i2c1_master.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;  idx             1    wreg     enum E10948
 13518 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
 13519 ;;		 -> NULL(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
 13520 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 13521 ;;  ptr             1    2[BANK0 ] PTR void 
 13522 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), I2C1_Write2ByteRegister@data(2), I2C1_Write1ByteRegister@data(1), I2C1_Read2B
      +yteRegister@returnValue(2), 
 13523 ;;		 -> NULL(0), I2C1_Read1ByteRegister@returnValue(1), 
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;  idx             1    3[BANK0 ] enum E10948
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      void 
 13528 ;; Registers used:
 13529 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13530 ;; Tracked objects:
 13531 ;;		On entry : 3F/0
 13532 ;;		On exit  : 3F/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13535 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;Total ram usage:        6 bytes
 13540 ;; Hardware stack levels used: 1
 13541 ;; Hardware stack levels required when called: 4
 13542 ;; This function calls:
 13543 ;;		Nothing
 13544 ;; This function is called by:
 13545 ;;		_I2C1_SetDataCompleteCallback
 13546 ;;		_I2C1_SetAddressNackCallback
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550     0EA0                     _I2C1_SetCallback:	
 13551                           ;psect for function _I2C1_SetCallback
 13552                           
 13553                           
 13554                           ;incstack = 0
 13555                           ; Regs used in _I2C1_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 13556                           ;I2C1_SetCallback@idx stored from wreg
 13557     0EA0  00A3               	movwf	I2C1_SetCallback@idx
 13558                           
 13559                           ;mcc_generated_files/i2c1_master.c: 298: static void I2C1_SetCallback(i2c1_callbackIndex
      +                          _t idx, i2c1_callback_t cb, void *ptr);mcc_generated_files/i2c1_master.c: 299: {;mcc_gen
      +                          erated_files/i2c1_master.c: 300:     if(cb)
 13560     0EA1  0820               	movf	I2C1_SetCallback@cb,w
 13561     0EA2  0421               	iorwf	I2C1_SetCallback@cb+1,w
 13562     0EA3  1903               	btfsc	3,2
 13563     0EA4  2EBE               	goto	l4473
 13564                           
 13565                           ;mcc_generated_files/i2c1_master.c: 301:     {;mcc_generated_files/i2c1_master.c: 302:  
      +                                 I2C1_Status.callbackTable[idx] = cb;
 13566     0EA5  3523               	lslf	I2C1_SetCallback@idx,w
 13567     0EA6  3EA0               	addlw	low _I2C1_Status
 13568     0EA7  0086               	movwf	6
 13569     0EA8  3000               	movlw	high _I2C1_Status
 13570     0EA9  3D87               	addwfc	7,f
 13571     0EAA  3523               	lslf	I2C1_SetCallback@idx,w
 13572     0EAB  3000               	movlw	0
 13573     0EAC  3D87               	addwfc	7,f
 13574     0EAD  0820               	movf	I2C1_SetCallback@cb,w
 13575     0EAE  3FC0               	movwi [0]fsr1
 13576     0EAF  0821               	movf	I2C1_SetCallback@cb+1,w
 13577     0EB0  3FC1               	movwi [1]fsr1
 13578                           
 13579                           ;mcc_generated_files/i2c1_master.c: 303:         I2C1_Status.callbackPayload[idx] = ptr;
 13580     0EB1  30AC               	movlw	low (_I2C1_Status+12)
 13581     0EB2  00F4               	movwf	??_I2C1_SetCallback
 13582     0EB3  3000               	movlw	high (_I2C1_Status+12)
 13583     0EB4  00F5               	movwf	??_I2C1_SetCallback+1
 13584     0EB5  0823               	movf	I2C1_SetCallback@idx,w
 13585     0EB6  0774               	addwf	??_I2C1_SetCallback,w
 13586     0EB7  0086               	movwf	6
 13587     0EB8  3000               	movlw	0
 13588     0EB9  3D75               	addwfc	??_I2C1_SetCallback+1,w
 13589     0EBA  0087               	movwf	7
 13590     0EBB  0822               	movf	I2C1_SetCallback@ptr,w
 13591     0EBC  0081               	movwf	1
 13592                           
 13593                           ;mcc_generated_files/i2c1_master.c: 304:     }
 13594     0EBD  0008               	return
 13595     0EBE                     l4473:
 13596                           
 13597                           ;mcc_generated_files/i2c1_master.c: 306:     {;mcc_generated_files/i2c1_master.c: 307:  
      +                                 I2C1_Status.callbackTable[idx] = I2C1_CallbackReturnStop;
 13598     0EBE  3523               	lslf	I2C1_SetCallback@idx,w
 13599     0EBF  3EA0               	addlw	low _I2C1_Status
 13600     0EC0  0086               	movwf	6
 13601     0EC1  3000               	movlw	high _I2C1_Status
 13602     0EC2  3D87               	addwfc	7,f
 13603     0EC3  3523               	lslf	I2C1_SetCallback@idx,w
 13604     0EC4  3000               	movlw	0
 13605     0EC5  3D87               	addwfc	7,f
 13606     0EC6  30AF               	movlw	low (low _I2C1_CallbackReturnStop)
 13607     0EC7  3FC0               	movwi [0]fsr1
 13608     0EC8  3000               	movlw	high (low _I2C1_CallbackReturnStop)
 13609     0EC9  3FC1               	movwi [1]fsr1
 13610                           
 13611                           ;mcc_generated_files/i2c1_master.c: 308:         I2C1_Status.callbackPayload[idx] = ((vo
      +                          id*)0);
 13612     0ECA  30AC               	movlw	low (_I2C1_Status+12)
 13613     0ECB  00F4               	movwf	??_I2C1_SetCallback
 13614     0ECC  3000               	movlw	high (_I2C1_Status+12)
 13615     0ECD  00F5               	movwf	??_I2C1_SetCallback+1
 13616     0ECE  0823               	movf	I2C1_SetCallback@idx,w
 13617     0ECF  0774               	addwf	??_I2C1_SetCallback,w
 13618     0ED0  0086               	movwf	6
 13619     0ED1  3000               	movlw	0
 13620     0ED2  3D75               	addwfc	??_I2C1_SetCallback+1,w
 13621     0ED3  0087               	movwf	7
 13622     0ED4  0181               	clrf	1
 13623     0ED5  0008               	return
 13624     0ED6                     __end_of_I2C1_SetCallback:
 13625                           
 13626                           	psect	text54
 13627     0AD5                     __ptext54:	
 13628 ;; *************** function _I2C1_SetBuffer *****************
 13629 ;; Defined at:
 13630 ;;		line 263 in file "mcc_generated_files/i2c1_master.c"
 13631 ;; Parameters:    Size  Location     Type
 13632 ;;  buffer          2    0[BANK0 ] PTR void 
 13633 ;;		 -> I2C1_Read1ByteRegister@returnValue$data(2), I2C1_Read2ByteRegister@returnValue$data(2), I2C1_Write1ByteRegister@
      +data$data(2), I2C1_Write2ByteRegister@data$data(2), 
 13634 ;;		 -> writeINA220@Txbuffer(3), readINA220@regadd(1), readINA220@buff(2), I2C1_ReadDataBlock@reg(1), 
 13635 ;;		 -> I2C1_ReadDataBlock@bufferBlock(4), bufferBlock$data(2), I2C1_Write2ByteRegister@reg(1), I2C1_Write2ByteRegister@
      +data(2), 
 13636 ;;		 -> I2C1_Write1ByteRegister@reg(1), I2C1_Write1ByteRegister@data(1), I2C1_Read2ByteRegister@reg(1), I2C1_Read2ByteRe
      +gister@returnValue(2), 
 13637 ;;		 -> NULL(0), I2C1_Read1ByteRegister@reg(1), I2C1_Read1ByteRegister@returnValue(1), 
 13638 ;;  bufferSize      2    2[BANK0 ] unsigned int 
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;		None
 13641 ;; Return value:  Size  Location     Type
 13642 ;;                  1    wreg      void 
 13643 ;; Registers used:
 13644 ;;		wreg
 13645 ;; Tracked objects:
 13646 ;;		On entry : 3F/0
 13647 ;;		On exit  : 3F/1
 13648 ;;		Unchanged: 0/0
 13649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13650 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;Total ram usage:        4 bytes
 13655 ;; Hardware stack levels used: 1
 13656 ;; Hardware stack levels required when called: 4
 13657 ;; This function calls:
 13658 ;;		Nothing
 13659 ;; This function is called by:
 13660 ;;		_I2C1_WriteNBytes
 13661 ;;		_I2C1_ReadNBytes
 13662 ;;		_rd1RegCompleteHandler
 13663 ;;		_rd2RegCompleteHandler
 13664 ;;		_wr1RegCompleteHandler
 13665 ;;		_wr2RegCompleteHandler
 13666 ;;		_rdBlkRegCompleteHandler
 13667 ;; This function uses a non-reentrant model
 13668 ;;
 13669                           
 13670     0AD5                     _I2C1_SetBuffer:	
 13671                           ;psect for function _I2C1_SetBuffer
 13672                           
 13673                           
 13674                           ;mcc_generated_files/i2c1_master.c: 263: void I2C1_SetBuffer(void *buffer, size_t buffer
      +                          Size);mcc_generated_files/i2c1_master.c: 264: {;mcc_generated_files/i2c1_master.c: 265: 
      +                              if(I2C1_Status.bufferFree)
 13675                           
 13676                           ;incstack = 0
 13677                           ; Regs used in _I2C1_SetBuffer: [wreg]
 13678     0AD5  0141               	movlb	1	; select bank1
 13679     0AD6  1DBD               	btfss	(_I2C1_Status^(0+128)+29),3
 13680     0AD7  0008               	return
 13681                           
 13682                           ;mcc_generated_files/i2c1_master.c: 266:     {;mcc_generated_files/i2c1_master.c: 267:  
      +                                 I2C1_Status.data_ptr = buffer;
 13683     0AD8  0140               	movlb	0	; select bank0
 13684     0AD9  0821               	movf	I2C1_SetBuffer@buffer+1,w
 13685     0ADA  0141               	movlb	1	; select bank1
 13686     0ADB  00B8               	movwf	((_I2C1_Status+1)^(0+128)+23)
 13687     0ADC  0140               	movlb	0	; select bank0
 13688     0ADD  0820               	movf	I2C1_SetBuffer@buffer,w
 13689     0ADE  0141               	movlb	1	; select bank1
 13690     0ADF  00B7               	movwf	(_I2C1_Status^(0+128)+23)
 13691                           
 13692                           ;mcc_generated_files/i2c1_master.c: 268:         I2C1_Status.data_length = bufferSize;
 13693     0AE0  0140               	movlb	0	; select bank0
 13694     0AE1  0823               	movf	I2C1_SetBuffer@bufferSize+1,w
 13695     0AE2  0141               	movlb	1	; select bank1
 13696     0AE3  00BA               	movwf	((_I2C1_Status+1)^(0+128)+25)
 13697     0AE4  0140               	movlb	0	; select bank0
 13698     0AE5  0822               	movf	I2C1_SetBuffer@bufferSize,w
 13699     0AE6  0141               	movlb	1	; select bank1
 13700     0AE7  00B9               	movwf	(_I2C1_Status^(0+128)+25)
 13701                           
 13702                           ;mcc_generated_files/i2c1_master.c: 269:         I2C1_Status.bufferFree = 0;
 13703     0AE8  11BD               	bcf	(_I2C1_Status^(0+128)+29),3
 13704     0AE9  0008               	return
 13705     0AEA                     __end_of_I2C1_SetBuffer:
 13706                           
 13707                           	psect	text55
 13708     08CC                     __ptext55:	
 13709 ;; *************** function _I2C1_MasterStop *****************
 13710 ;; Defined at:
 13711 ;;		line 593 in file "mcc_generated_files/i2c1_master.c"
 13712 ;; Parameters:    Size  Location     Type
 13713 ;;		None
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;		None
 13716 ;; Return value:  Size  Location     Type
 13717 ;;                  1    wreg      void 
 13718 ;; Registers used:
 13719 ;;		None
 13720 ;; Tracked objects:
 13721 ;;		On entry : 3F/0
 13722 ;;		On exit  : 3F/3
 13723 ;;		Unchanged: 0/0
 13724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;Total ram usage:        0 bytes
 13730 ;; Hardware stack levels used: 1
 13731 ;; Hardware stack levels required when called: 4
 13732 ;; This function calls:
 13733 ;;		Nothing
 13734 ;; This function is called by:
 13735 ;;		_I2C1_DO_SEND_STOP
 13736 ;; This function uses a non-reentrant model
 13737 ;;
 13738                           
 13739     08CC                     _I2C1_MasterStop:	
 13740                           ;psect for function _I2C1_MasterStop
 13741                           
 13742                           
 13743                           ;mcc_generated_files/i2c1_master.c: 595:     SSP1CON2bits.PEN = 1;
 13744                           
 13745                           ;incstack = 0
 13746                           ; Regs used in _I2C1_MasterStop: []
 13747     08CC  0143               	movlb	3	; select bank3
 13748     08CD  1511               	bsf	17,2	;volatile
 13749     08CE  0008               	return
 13750     08CF                     __end_of_I2C1_MasterStop:
 13751                           
 13752                           	psect	text56
 13753     08C9                     __ptext56:	
 13754 ;; *************** function _I2C1_MasterEnableRestart *****************
 13755 ;; Defined at:
 13756 ;;		line 573 in file "mcc_generated_files/i2c1_master.c"
 13757 ;; Parameters:    Size  Location     Type
 13758 ;;		None
 13759 ;; Auto vars:     Size  Location     Type
 13760 ;;		None
 13761 ;; Return value:  Size  Location     Type
 13762 ;;                  1    wreg      void 
 13763 ;; Registers used:
 13764 ;;		None
 13765 ;; Tracked objects:
 13766 ;;		On entry : 3F/0
 13767 ;;		On exit  : 3F/3
 13768 ;;		Unchanged: 0/0
 13769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13774 ;;Total ram usage:        0 bytes
 13775 ;; Hardware stack levels used: 1
 13776 ;; Hardware stack levels required when called: 4
 13777 ;; This function calls:
 13778 ;;		Nothing
 13779 ;; This function is called by:
 13780 ;;		_I2C1_DO_SEND_RESTART_READ
 13781 ;;		_I2C1_DO_SEND_RESTART_WRITE
 13782 ;;		_I2C1_DO_SEND_RESTART
 13783 ;; This function uses a non-reentrant model
 13784 ;;
 13785                           
 13786     08C9                     _I2C1_MasterEnableRestart:	
 13787                           ;psect for function _I2C1_MasterEnableRestart
 13788                           
 13789                           
 13790                           ;mcc_generated_files/i2c1_master.c: 575:     SSP1CON2bits.RSEN = 1;
 13791                           
 13792                           ;incstack = 0
 13793                           ; Regs used in _I2C1_MasterEnableRestart: []
 13794     08C9  0143               	movlb	3	; select bank3
 13795     08CA  1491               	bsf	17,1	;volatile
 13796     08CB  0008               	return
 13797     08CC                     __end_of_I2C1_MasterEnableRestart:
 13798                           
 13799                           	psect	text57
 13800     08C6                     __ptext57:	
 13801 ;; *************** function _I2C1_MasterStart *****************
 13802 ;; Defined at:
 13803 ;;		line 588 in file "mcc_generated_files/i2c1_master.c"
 13804 ;; Parameters:    Size  Location     Type
 13805 ;;		None
 13806 ;; Auto vars:     Size  Location     Type
 13807 ;;		None
 13808 ;; Return value:  Size  Location     Type
 13809 ;;                  1    wreg      void 
 13810 ;; Registers used:
 13811 ;;		None
 13812 ;; Tracked objects:
 13813 ;;		On entry : 3F/1
 13814 ;;		On exit  : 3F/3
 13815 ;;		Unchanged: 0/0
 13816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;Total ram usage:        0 bytes
 13822 ;; Hardware stack levels used: 1
 13823 ;; Hardware stack levels required when called: 4
 13824 ;; This function calls:
 13825 ;;		Nothing
 13826 ;; This function is called by:
 13827 ;;		_I2C1_MasterOperation
 13828 ;; This function uses a non-reentrant model
 13829 ;;
 13830                           
 13831     08C6                     _I2C1_MasterStart:	
 13832                           ;psect for function _I2C1_MasterStart
 13833                           
 13834                           
 13835                           ;mcc_generated_files/i2c1_master.c: 590:     SSP1CON2bits.SEN = 1;
 13836                           
 13837                           ;incstack = 0
 13838                           ; Regs used in _I2C1_MasterStart: []
 13839     08C6  0143               	movlb	3	; select bank3
 13840     08C7  1411               	bsf	17,0	;volatile
 13841     08C8  0008               	return
 13842     08C9                     __end_of_I2C1_MasterStart:
 13843                           
 13844                           	psect	text58
 13845     0AC0                     __ptext58:	
 13846 ;; *************** function _I2C1_Close *****************
 13847 ;; Defined at:
 13848 ;;		line 209 in file "mcc_generated_files/i2c1_master.c"
 13849 ;; Parameters:    Size  Location     Type
 13850 ;;		None
 13851 ;; Auto vars:     Size  Location     Type
 13852 ;;  returnValue     1    4[COMMON] enum E358
 13853 ;; Return value:  Size  Location     Type
 13854 ;;                  1    wreg      enum E358
 13855 ;; Registers used:
 13856 ;;		wreg, status,2, status,0, pclath, cstack
 13857 ;; Tracked objects:
 13858 ;;		On entry : 3E/0
 13859 ;;		On exit  : 3F/1
 13860 ;;		Unchanged: 0/0
 13861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13863 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13865 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13866 ;;Total ram usage:        1 bytes
 13867 ;; Hardware stack levels used: 1
 13868 ;; Hardware stack levels required when called: 5
 13869 ;; This function calls:
 13870 ;;		_I2C1_MasterClearIrq
 13871 ;;		_I2C1_MasterClose
 13872 ;;		_I2C1_MasterDisableIrq
 13873 ;; This function is called by:
 13874 ;;		_I2C1_WriteNBytes
 13875 ;;		_I2C1_ReadNBytes
 13876 ;; This function uses a non-reentrant model
 13877 ;;
 13878                           
 13879     0AC0                     _I2C1_Close:	
 13880                           ;psect for function _I2C1_Close
 13881                           
 13882                           
 13883                           ;mcc_generated_files/i2c1_master.c: 211:     i2c1_error_t returnValue = I2C1_BUSY;
 13884                           
 13885                           ;incstack = 0
 13886                           ; Regs used in _I2C1_Close: [wreg+status,2+status,0+pclath+cstack]
 13887     0AC0  3001               	movlw	1
 13888     0AC1  00F4               	movwf	I2C1_Close@returnValue
 13889                           
 13890                           ;mcc_generated_files/i2c1_master.c: 212:     if(!I2C1_Status.busy)
 13891     0AC2  0141               	movlb	1	; select bank1
 13892     0AC3  18BD               	btfsc	(_I2C1_Status^(0+128)+29),1
 13893     0AC4  2AD3               	goto	l4847
 13894                           
 13895                           ;mcc_generated_files/i2c1_master.c: 213:     {;mcc_generated_files/i2c1_master.c: 214:  
      +                                 I2C1_Status.inUse = 0;
 13896     0AC5  113D               	bcf	(_I2C1_Status^(0+128)+29),2
 13897                           
 13898                           ;mcc_generated_files/i2c1_master.c: 215:         I2C1_Status.address = 0xff;
 13899     0AC6  30FF               	movlw	255
 13900     0AC7  00B6               	movwf	(_I2C1_Status^(0+128)+22)
 13901                           
 13902                           ;mcc_generated_files/i2c1_master.c: 216:         I2C1_MasterClearIrq();
 13903     0AC8  3188  20C0  318A   	fcall	_I2C1_MasterClearIrq
 13904                           
 13905                           ;mcc_generated_files/i2c1_master.c: 217:         I2C1_MasterDisableIrq();
 13906     0ACB  3188  20AD  318A   	fcall	_I2C1_MasterDisableIrq
 13907                           
 13908                           ;mcc_generated_files/i2c1_master.c: 218:         I2C1_MasterClose();
 13909     0ACE  3188  20C3         	fcall	_I2C1_MasterClose
 13910                           
 13911                           ;mcc_generated_files/i2c1_master.c: 219:         returnValue = I2C1_Status.error;
 13912     0AD0  0141               	movlb	1	; select bank1
 13913     0AD1  083C               	movf	(_I2C1_Status^(0+128)+28),w
 13914     0AD2  00F4               	movwf	I2C1_Close@returnValue
 13915     0AD3                     l4847:
 13916                           
 13917                           ;mcc_generated_files/i2c1_master.c: 221:     return returnValue;
 13918     0AD3  0874               	movf	I2C1_Close@returnValue,w
 13919     0AD4  0008               	return
 13920     0AD5                     __end_of_I2C1_Close:
 13921                           
 13922                           	psect	text59
 13923     08AD                     __ptext59:	
 13924 ;; *************** function _I2C1_MasterDisableIrq *****************
 13925 ;; Defined at:
 13926 ;;		line 635 in file "mcc_generated_files/i2c1_master.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;		None
 13929 ;; Auto vars:     Size  Location     Type
 13930 ;;		None
 13931 ;; Return value:  Size  Location     Type
 13932 ;;                  1    wreg      void 
 13933 ;; Registers used:
 13934 ;;		None
 13935 ;; Tracked objects:
 13936 ;;		On entry : 3F/E
 13937 ;;		On exit  : 3F/E
 13938 ;;		Unchanged: 0/0
 13939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;Total ram usage:        0 bytes
 13945 ;; Hardware stack levels used: 1
 13946 ;; Hardware stack levels required when called: 4
 13947 ;; This function calls:
 13948 ;;		Nothing
 13949 ;; This function is called by:
 13950 ;;		_I2C1_Close
 13951 ;; This function uses a non-reentrant model
 13952 ;;
 13953                           
 13954     08AD                     _I2C1_MasterDisableIrq:	
 13955                           ;psect for function _I2C1_MasterDisableIrq
 13956                           
 13957                           
 13958                           ;mcc_generated_files/i2c1_master.c: 637:     PIE3bits.SSP1IE = 0;
 13959                           
 13960                           ;incstack = 0
 13961                           ; Regs used in _I2C1_MasterDisableIrq: []
 13962     08AD  1019               	bcf	25,0	;volatile
 13963     08AE  0008               	return
 13964     08AF                     __end_of_I2C1_MasterDisableIrq:
 13965                           
 13966                           	psect	text60
 13967     08C3                     __ptext60:	
 13968 ;; *************** function _I2C1_MasterClose *****************
 13969 ;; Defined at:
 13970 ;;		line 557 in file "mcc_generated_files/i2c1_master.c"
 13971 ;; Parameters:    Size  Location     Type
 13972 ;;		None
 13973 ;; Auto vars:     Size  Location     Type
 13974 ;;		None
 13975 ;; Return value:  Size  Location     Type
 13976 ;;                  1    wreg      void 
 13977 ;; Registers used:
 13978 ;;		None
 13979 ;; Tracked objects:
 13980 ;;		On entry : 3F/E
 13981 ;;		On exit  : 3F/3
 13982 ;;		Unchanged: 0/0
 13983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13988 ;;Total ram usage:        0 bytes
 13989 ;; Hardware stack levels used: 1
 13990 ;; Hardware stack levels required when called: 4
 13991 ;; This function calls:
 13992 ;;		Nothing
 13993 ;; This function is called by:
 13994 ;;		_I2C1_Close
 13995 ;; This function uses a non-reentrant model
 13996 ;;
 13997                           
 13998     08C3                     _I2C1_MasterClose:	
 13999                           ;psect for function _I2C1_MasterClose
 14000                           
 14001                           
 14002                           ;mcc_generated_files/i2c1_master.c: 560:     SSP1CON1bits.SSPEN = 0;
 14003                           
 14004                           ;incstack = 0
 14005                           ; Regs used in _I2C1_MasterClose: []
 14006     08C3  0143               	movlb	3	; select bank3
 14007     08C4  1290               	bcf	16,5	;volatile
 14008     08C5  0008               	return
 14009     08C6                     __end_of_I2C1_MasterClose:
 14010                           
 14011                           	psect	text61
 14012     08C0                     __ptext61:	
 14013 ;; *************** function _I2C1_MasterClearIrq *****************
 14014 ;; Defined at:
 14015 ;;		line 640 in file "mcc_generated_files/i2c1_master.c"
 14016 ;; Parameters:    Size  Location     Type
 14017 ;;		None
 14018 ;; Auto vars:     Size  Location     Type
 14019 ;;		None
 14020 ;; Return value:  Size  Location     Type
 14021 ;;                  1    wreg      void 
 14022 ;; Registers used:
 14023 ;;		None
 14024 ;; Tracked objects:
 14025 ;;		On entry : 30/1
 14026 ;;		On exit  : 3F/E
 14027 ;;		Unchanged: 0/0
 14028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14033 ;;Total ram usage:        0 bytes
 14034 ;; Hardware stack levels used: 1
 14035 ;; Hardware stack levels required when called: 4
 14036 ;; This function calls:
 14037 ;;		Nothing
 14038 ;; This function is called by:
 14039 ;;		_I2C1_Open
 14040 ;;		_I2C1_Close
 14041 ;;		_I2C1_MasterFsm
 14042 ;; This function uses a non-reentrant model
 14043 ;;
 14044                           
 14045     08C0                     _I2C1_MasterClearIrq:	
 14046                           ;psect for function _I2C1_MasterClearIrq
 14047                           
 14048                           
 14049                           ;mcc_generated_files/i2c1_master.c: 642:     PIR3bits.SSP1IF = 0;
 14050                           
 14051                           ;incstack = 0
 14052                           ; Regs used in _I2C1_MasterClearIrq: []
 14053     08C0  014E               	movlb	14	; select bank14
 14054     08C1  100F               	bcf	15,0	;volatile
 14055     08C2  0008               	return
 14056     08C3                     __end_of_I2C1_MasterClearIrq:
 14057                           
 14058                           	psect	text62
 14059     07D9                     __ptext62:	
 14060 ;; *************** function _getHis *****************
 14061 ;; Defined at:
 14062 ;;		line 167 in file "sensor.c"
 14063 ;; Parameters:    Size  Location     Type
 14064 ;;  data            2   32[BANK0 ] PTR struct .
 14065 ;;		 -> cons$sensor_config$addressI2C(1), battery$sensor_config$addressI2C(1), panel$sensor_config$addressI2C(1), 
 14066 ;; Auto vars:     Size  Location     Type
 14067 ;;  i               1   36[BANK0 ] unsigned char 
 14068 ;;  aux             1   37[BANK0 ] unsigned char 
 14069 ;; Return value:  Size  Location     Type
 14070 ;;                  1    wreg      void 
 14071 ;; Registers used:
 14072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14073 ;; Tracked objects:
 14074 ;;		On entry : 3F/0
 14075 ;;		On exit  : 3F/0
 14076 ;;		Unchanged: 0/0
 14077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14078 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;Total ram usage:        6 bytes
 14083 ;; Hardware stack levels used: 1
 14084 ;; Hardware stack levels required when called: 7
 14085 ;; This function calls:
 14086 ;;		_sendSensorData
 14087 ;; This function is called by:
 14088 ;;		_processCommand
 14089 ;; This function uses a non-reentrant model
 14090 ;;
 14091                           
 14092     07D9                     _getHis:	
 14093                           ;psect for function _getHis
 14094                           
 14095                           
 14096                           ;sensor.c: 167: void getHis(measure_data_t *data);sensor.c: 168: {;sensor.c: 169:     ui
      +                          nt8_t aux;;sensor.c: 170:     aux = data->pWrite;
 14097                           
 14098                           ;incstack = 0
 14099                           ; Regs used in _getHis: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14100     07D9  0840               	movf	getHis@data,w
 14101     07DA  0086               	movwf	6
 14102     07DB  0841               	movf	getHis@data+1,w
 14103     07DC  0087               	movwf	7
 14104     07DD  3156               	addfsr 1,22
 14105     07DE  0801               	movf	1,w
 14106     07DF  00C5               	movwf	getHis@aux
 14107                           
 14108                           ;sensor.c: 171:     for(uint8_t i=0; i<8; i++)
 14109     07E0  01C4               	clrf	getHis@i
 14110     07E1                     l5391:
 14111                           
 14112                           ;sensor.c: 172:     {;sensor.c: 173:         sendSensorData(data->hist[aux]);
 14113     07E1  0845               	movf	getHis@aux,w
 14114     07E2  00C2               	movwf	??_getHis
 14115     07E3  01C3               	clrf	??_getHis+1
 14116     07E4  35C2               	lslf	??_getHis,f
 14117     07E5  0DC3               	rlf	??_getHis+1,f
 14118     07E6  0842               	movf	??_getHis,w
 14119     07E7  0740               	addwf	getHis@data,w
 14120     07E8  0086               	movwf	6
 14121     07E9  0843               	movf	??_getHis+1,w
 14122     07EA  3D41               	addwfc	getHis@data+1,w
 14123     07EB  0087               	movwf	7
 14124     07EC  3F40               	moviw [0]fsr1
 14125     07ED  00B4               	movwf	sendSensorData@sensor_data
 14126     07EE  3F41               	moviw [1]fsr1
 14127     07EF  00B5               	movwf	sendSensorData@sensor_data+1
 14128     07F0  318E  26D6  3187   	fcall	_sendSensorData
 14129                           
 14130                           ;sensor.c: 174:         if(aux == 0)
 14131     07F3  0845               	movf	getHis@aux,w
 14132                           
 14133                           ;sensor.c: 175:         {;sensor.c: 176:             aux = 8;
 14134     07F4  3008               	movlw	8
 14135     07F5  1903               	btfsc	3,2
 14136     07F6  00C5               	movwf	getHis@aux
 14137                           
 14138                           ;sensor.c: 178:         aux--;
 14139     07F7  3001               	movlw	1
 14140     07F8  02C5               	subwf	getHis@aux,f
 14141                           
 14142                           ;sensor.c: 179:     }
 14143     07F9  3001               	movlw	1
 14144     07FA  07C4               	addwf	getHis@i,f
 14145     07FB  3008               	movlw	8
 14146     07FC  0244               	subwf	getHis@i,w
 14147     07FD  1803               	btfsc	3,0
 14148     07FE  0008               	return
 14149     07FF  2FE1               	goto	l5391
 14150     0800                     __end_of_getHis:
 14151                           
 14152                           	psect	text63
 14153     0ED6                     __ptext63:	
 14154 ;; *************** function _sendSensorData *****************
 14155 ;; Defined at:
 14156 ;;		line 29 in file "device.c"
 14157 ;; Parameters:    Size  Location     Type
 14158 ;;  sensor_data     2   20[BANK0 ] short 
 14159 ;; Auto vars:     Size  Location     Type
 14160 ;;  packet          8   24[BANK0 ] struct .
 14161 ;; Return value:  Size  Location     Type
 14162 ;;                  1    wreg      void 
 14163 ;; Registers used:
 14164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14165 ;; Tracked objects:
 14166 ;;		On entry : 3F/0
 14167 ;;		On exit  : 3F/0
 14168 ;;		Unchanged: 0/0
 14169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14170 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14171 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14173 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;Total ram usage:       12 bytes
 14175 ;; Hardware stack levels used: 1
 14176 ;; Hardware stack levels required when called: 6
 14177 ;; This function calls:
 14178 ;;		_int16ToString
 14179 ;;		_sendPacket
 14180 ;;		_stringlen
 14181 ;; This function is called by:
 14182 ;;		_getHis
 14183 ;;		_processCommand
 14184 ;; This function uses a non-reentrant model
 14185 ;;
 14186                           
 14187     0ED6                     _sendSensorData:	
 14188                           ;psect for function _sendSensorData
 14189                           
 14190                           
 14191                           ;device.c: 29: void sendSensorData(int16_t sensor_data);device.c: 30: {;device.c: 31:   
      +                            data_packet_t packet = {.preamble = "L>"};
 14192                           
 14193                           ;incstack = 0
 14194                           ; Regs used in _sendSensorData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14195     0ED6  30D1               	movlw	low sendSensorData@F11244
 14196     0ED7  0086               	movwf	6
 14197     0ED8  3000               	movlw	high sendSensorData@F11244
 14198     0ED9  0087               	movwf	7
 14199     0EDA  3038               	movlw	low sendSensorData@packet
 14200     0EDB  0084               	movwf	4
 14201     0EDC  3000               	movlw	high sendSensorData@packet
 14202     0EDD  0085               	movwf	5
 14203     0EDE  3008               	movlw	8
 14204     0EDF  00B6               	movwf	??_sendSensorData
 14205     0EE0                     u2930:
 14206     0EE0  0016               	moviw fsr1++
 14207     0EE1  001A               	movwi fsr0++
 14208     0EE2  0BB6               	decfsz	??_sendSensorData,f
 14209     0EE3  2EE0               	goto	u2930
 14210                           
 14211                           ;device.c: 32:     int16ToString(sensor_data, packet.value);
 14212     0EE4  0835               	movf	sendSensorData@sensor_data+1,w
 14213     0EE5  00A8               	movwf	int16ToString@value+1
 14214     0EE6  0834               	movf	sendSensorData@sensor_data,w
 14215     0EE7  00A7               	movwf	int16ToString@value
 14216     0EE8  303A               	movlw	low (sendSensorData@packet+2)
 14217     0EE9  00A9               	movwf	int16ToString@data
 14218     0EEA  3000               	movlw	high (sendSensorData@packet+2)
 14219     0EEB  00AA               	movwf	int16ToString@data+1
 14220     0EEC  3184  248A  318E   	fcall	_int16ToString
 14221                           
 14222                           ;device.c: 34:     sendPacket((char*)&packet, (2 +stringlen(packet.value)));
 14223     0EEF  3038               	movlw	low sendSensorData@packet
 14224     0EF0  0140               	movlb	0	; select bank0
 14225     0EF1  00A1               	movwf	sendPacket@str
 14226     0EF2  3000               	movlw	high sendSensorData@packet
 14227     0EF3  00A2               	movwf	sendPacket@str+1
 14228     0EF4  303A               	movlw	low (sendSensorData@packet+2)
 14229     0EF5  00F4               	movwf	stringlen@str
 14230     0EF6  3000               	movlw	high (sendSensorData@packet+2)
 14231     0EF7  00F5               	movwf	stringlen@str+1
 14232     0EF8  318A  22EA  318E   	fcall	_stringlen
 14233     0EFB  3E02               	addlw	2
 14234     0EFC  00B6               	movwf	??_sendSensorData
 14235     0EFD  3000               	movlw	0
 14236     0EFE  1803               	skipnc
 14237     0EFF  3001               	movlw	1
 14238     0F00  00B7               	movwf	??_sendSensorData+1
 14239     0F01  0836               	movf	??_sendSensorData,w
 14240     0F02  00A3               	movwf	sendPacket@byteCount
 14241     0F03  0837               	movf	??_sendSensorData+1,w
 14242     0F04  00A4               	movwf	sendPacket@byteCount+1
 14243     0F05  0D89               	rlf	9,f
 14244     0F06  3B89               	subwfb	9,f
 14245     0F07  0989               	comf	9,f
 14246     0F08  00A5               	movwf	sendPacket@byteCount+2
 14247     0F09  00A6               	movwf	sendPacket@byteCount+3
 14248     0F0A  3186  2651         	fcall	_sendPacket
 14249     0F0C  0008               	return
 14250     0F0D                     __end_of_sendSensorData:
 14251                           
 14252                           	psect	text64
 14253     0AEA                     __ptext64:	
 14254 ;; *************** function _stringlen *****************
 14255 ;; Defined at:
 14256 ;;		line 69 in file "device.c"
 14257 ;; Parameters:    Size  Location     Type
 14258 ;;  str             2    4[COMMON] PTR const unsigned char 
 14259 ;;		 -> packet$value(6), sendSensorData@packet(8), main@packet(11), 
 14260 ;; Auto vars:     Size  Location     Type
 14261 ;;  idx             1    0[BANK0 ] unsigned char 
 14262 ;; Return value:  Size  Location     Type
 14263 ;;                  1    wreg      unsigned char 
 14264 ;; Registers used:
 14265 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14266 ;; Tracked objects:
 14267 ;;		On entry : 3F/0
 14268 ;;		On exit  : 3F/0
 14269 ;;		Unchanged: 0/0
 14270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14271 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14275 ;;Total ram usage:        3 bytes
 14276 ;; Hardware stack levels used: 1
 14277 ;; Hardware stack levels required when called: 4
 14278 ;; This function calls:
 14279 ;;		Nothing
 14280 ;; This function is called by:
 14281 ;;		_sendSensorData
 14282 ;;		_processCommand
 14283 ;; This function uses a non-reentrant model
 14284 ;;
 14285                           
 14286     0AEA                     _stringlen:	
 14287                           ;psect for function _stringlen
 14288                           
 14289                           
 14290                           ;device.c: 69: uint8_t stringlen(const char* str);device.c: 70: {;device.c: 71:  uint8_t
      +                           idx = 0;
 14291                           
 14292                           ;incstack = 0
 14293                           ; Regs used in _stringlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 14294     0AEA  01A0               	clrf	stringlen@idx
 14295                           
 14296                           ;device.c: 73:  for(idx = 0; idx < 255; idx++)
 14297     0AEB  01A0               	clrf	stringlen@idx
 14298     0AEC                     l5015:
 14299                           
 14300                           ;device.c: 74:  {;device.c: 75:   if(*str == 0)
 14301     0AEC  0874               	movf	stringlen@str,w
 14302     0AED  0086               	movwf	6
 14303     0AEE  0875               	movf	stringlen@str+1,w
 14304     0AEF  0087               	movwf	7
 14305     0AF0  0801               	movf	1,w
 14306     0AF1  1D03               	btfss	3,2
 14307     0AF2  2AF5               	goto	l5021
 14308                           
 14309                           ;device.c: 76:    return idx;
 14310     0AF3  0820               	movf	stringlen@idx,w
 14311     0AF4  0008               	return
 14312     0AF5                     l5021:
 14313                           
 14314                           ;device.c: 77:         str++;
 14315     0AF5  3001               	movlw	1
 14316     0AF6  07F4               	addwf	stringlen@str,f
 14317     0AF7  3000               	movlw	0
 14318     0AF8  3DF5               	addwfc	stringlen@str+1,f
 14319                           
 14320                           ;device.c: 78:  }
 14321     0AF9  3001               	movlw	1
 14322     0AFA  07A0               	addwf	stringlen@idx,f
 14323     0AFB  0A20               	incf	stringlen@idx,w
 14324     0AFC  1D03               	btfss	3,2
 14325     0AFD  2AEC               	goto	l5015
 14326                           
 14327                           ;device.c: 79:  return -1;
 14328     0AFE  30FF               	movlw	255
 14329     0AFF  0008               	return
 14330     0B00                     __end_of_stringlen:
 14331                           
 14332                           	psect	text65
 14333     0651                     __ptext65:	
 14334 ;; *************** function _sendPacket *****************
 14335 ;; Defined at:
 14336 ;;		line 20 in file "communication.c"
 14337 ;; Parameters:    Size  Location     Type
 14338 ;;  str             2    1[BANK0 ] PTR const unsigned char 
 14339 ;;		 -> sendSensorData@packet(8), sendSensorInfo@packet(7), 
 14340 ;;  byteCount       4    3[BANK0 ] unsigned long 
 14341 ;; Auto vars:     Size  Location     Type
 14342 ;;  i               2   11[BANK0 ] int 
 14343 ;; Return value:  Size  Location     Type
 14344 ;;                  1    wreg      void 
 14345 ;; Registers used:
 14346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14347 ;; Tracked objects:
 14348 ;;		On entry : 3F/0
 14349 ;;		On exit  : 3F/0
 14350 ;;		Unchanged: 0/0
 14351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14352 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;Total ram usage:       12 bytes
 14357 ;; Hardware stack levels used: 1
 14358 ;; Hardware stack levels required when called: 5
 14359 ;; This function calls:
 14360 ;;		_EUSART1_Write
 14361 ;;		_EUSART1_is_tx_done
 14362 ;;		_EUSART1_is_tx_ready
 14363 ;;		_TxDeviceDisable
 14364 ;;		_TxDeviceEnable
 14365 ;; This function is called by:
 14366 ;;		_sendSensorInfo
 14367 ;;		_sendSensorData
 14368 ;; This function uses a non-reentrant model
 14369 ;;
 14370                           
 14371     0651                     _sendPacket:	
 14372                           ;psect for function _sendPacket
 14373                           
 14374                           
 14375                           ;communication.c: 20: void sendPacket(const char *str, uint32_t byteCount);communication
      +                          .c: 21: {;communication.c: 22:     TxDeviceEnable();
 14376                           
 14377                           ;incstack = 0
 14378                           ; Regs used in _sendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14379     0651  3188  20AB  3186   	fcall	_TxDeviceEnable
 14380                           
 14381                           ;communication.c: 24:     for(int i=0; i<byteCount; i++)
 14382     0654  01AB               	clrf	sendPacket@i
 14383     0655  01AC               	clrf	sendPacket@i+1
 14384     0656                     l1111:
 14385     0656  082B               	movf	sendPacket@i,w
 14386     0657  00A7               	movwf	??_sendPacket
 14387     0658  082C               	movf	sendPacket@i+1,w
 14388     0659  00A8               	movwf	??_sendPacket+1
 14389     065A  3000               	movlw	0
 14390     065B  1BA8               	btfsc	??_sendPacket+1,7
 14391     065C  30FF               	movlw	255
 14392     065D  00A9               	movwf	??_sendPacket+2
 14393     065E  00AA               	movwf	??_sendPacket+3
 14394     065F  0826               	movf	sendPacket@byteCount+3,w
 14395     0660  022A               	subwf	??_sendPacket+3,w
 14396     0661  1D03               	skipz
 14397     0662  2E6D               	goto	u2825
 14398     0663  0825               	movf	sendPacket@byteCount+2,w
 14399     0664  0229               	subwf	??_sendPacket+2,w
 14400     0665  1D03               	skipz
 14401     0666  2E6D               	goto	u2825
 14402     0667  0824               	movf	sendPacket@byteCount+1,w
 14403     0668  0228               	subwf	??_sendPacket+1,w
 14404     0669  1D03               	skipz
 14405     066A  2E6D               	goto	u2825
 14406     066B  0823               	movf	sendPacket@byteCount,w
 14407     066C  0227               	subwf	??_sendPacket,w
 14408     066D                     u2825:
 14409     066D  1803               	btfsc	3,0
 14410     066E  2E90               	goto	l4959
 14411                           
 14412                           ;communication.c: 25:     {;communication.c: 26:         if(EUSART1_is_tx_ready())
 14413     066F  3189  21C6  3186   	fcall	_EUSART1_is_tx_ready
 14414     0672  3A00               	xorlw	0
 14415     0673  1903               	skipnz
 14416     0674  2E8A               	goto	l1113
 14417                           
 14418                           ;communication.c: 27:         {;communication.c: 29:             EUSART1_Write(*str);
 14419     0675  0140               	movlb	0	; select bank0
 14420     0676  0821               	movf	sendPacket@str,w
 14421     0677  0086               	movwf	6
 14422     0678  0822               	movf	sendPacket@str+1,w
 14423     0679  0087               	movwf	7
 14424     067A  0801               	movf	1,w
 14425     067B  3189  219E  3186   	fcall	_EUSART1_Write
 14426     067E                     l4955:	
 14427                           ;communication.c: 30:             while(!EUSART1_is_tx_done());
 14428                           
 14429     067E  3188  20DC  3186   	fcall	_EUSART1_is_tx_done
 14430     0681  3A00               	xorlw	0
 14431     0682  1903               	skipnz
 14432     0683  2E7E               	goto	l4955
 14433                           
 14434                           ;communication.c: 31:             do { LATCbits.LATC3 = 0; } while(0);
 14435     0684  0140               	movlb	0	; select bank0
 14436     0685  119A               	bcf	26,3	;volatile
 14437                           
 14438                           ;communication.c: 32:             str++;
 14439     0686  3001               	movlw	1
 14440     0687  07A1               	addwf	sendPacket@str,f
 14441     0688  3000               	movlw	0
 14442     0689  3DA2               	addwfc	sendPacket@str+1,f
 14443     068A                     l1113:	
 14444                           ;communication.c: 33:         }
 14445                           
 14446                           
 14447                           ;communication.c: 34:     }
 14448     068A  3001               	movlw	1
 14449     068B  0140               	movlb	0	; select bank0
 14450     068C  07AB               	addwf	sendPacket@i,f
 14451     068D  3000               	movlw	0
 14452     068E  3DAC               	addwfc	sendPacket@i+1,f
 14453     068F  2E56               	goto	l1111
 14454     0690                     l4959:
 14455                           
 14456                           ;communication.c: 35:     if(EUSART1_is_tx_ready())
 14457     0690  3189  21C6  3186   	fcall	_EUSART1_is_tx_ready
 14458     0693  3A00               	xorlw	0
 14459     0694  1903               	skipnz
 14460     0695  2EA2               	goto	l4965
 14461                           
 14462                           ;communication.c: 36:         {;communication.c: 37:             EUSART1_Write('\n');
 14463     0696  300A               	movlw	10
 14464     0697  3189  219E  3186   	fcall	_EUSART1_Write
 14465     069A                     l4963:	
 14466                           ;communication.c: 38:             while(!EUSART1_is_tx_done());
 14467                           
 14468     069A  3188  20DC  3186   	fcall	_EUSART1_is_tx_done
 14469     069D  3A00               	xorlw	0
 14470     069E  1903               	skipnz
 14471     069F  2E9A               	goto	l4963
 14472                           
 14473                           ;communication.c: 39:             do { LATCbits.LATC3 = 0; } while(0);
 14474     06A0  0140               	movlb	0	; select bank0
 14475     06A1  119A               	bcf	26,3	;volatile
 14476     06A2                     l4965:
 14477                           
 14478                           ;communication.c: 41:     TxDeviceDisable();
 14479     06A2  3188  20BD         	fcall	_TxDeviceDisable
 14480     06A4  0008               	return
 14481     06A5                     __end_of_sendPacket:
 14482                           
 14483                           	psect	text66
 14484     08AB                     __ptext66:	
 14485 ;; *************** function _TxDeviceEnable *****************
 14486 ;; Defined at:
 14487 ;;		line 67 in file "communication.c"
 14488 ;; Parameters:    Size  Location     Type
 14489 ;;		None
 14490 ;; Auto vars:     Size  Location     Type
 14491 ;;		None
 14492 ;; Return value:  Size  Location     Type
 14493 ;;                  1    wreg      void 
 14494 ;; Registers used:
 14495 ;;		None
 14496 ;; Tracked objects:
 14497 ;;		On entry : 3F/0
 14498 ;;		On exit  : 3F/0
 14499 ;;		Unchanged: 0/0
 14500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;Total ram usage:        0 bytes
 14506 ;; Hardware stack levels used: 1
 14507 ;; Hardware stack levels required when called: 4
 14508 ;; This function calls:
 14509 ;;		Nothing
 14510 ;; This function is called by:
 14511 ;;		_sendPacket
 14512 ;; This function uses a non-reentrant model
 14513 ;;
 14514                           
 14515     08AB                     _TxDeviceEnable:	
 14516                           ;psect for function _TxDeviceEnable
 14517                           
 14518                           
 14519                           ;communication.c: 69:     LATCbits.LATC3 = 1;
 14520                           
 14521                           ;incstack = 0
 14522                           ; Regs used in _TxDeviceEnable: []
 14523     08AB  159A               	bsf	26,3	;volatile
 14524     08AC  0008               	return
 14525     08AD                     __end_of_TxDeviceEnable:
 14526                           
 14527                           	psect	text67
 14528     08BD                     __ptext67:	
 14529 ;; *************** function _TxDeviceDisable *****************
 14530 ;; Defined at:
 14531 ;;		line 72 in file "communication.c"
 14532 ;; Parameters:    Size  Location     Type
 14533 ;;		None
 14534 ;; Auto vars:     Size  Location     Type
 14535 ;;		None
 14536 ;; Return value:  Size  Location     Type
 14537 ;;                  1    wreg      void 
 14538 ;; Registers used:
 14539 ;;		None
 14540 ;; Tracked objects:
 14541 ;;		On entry : 31/E
 14542 ;;		On exit  : 3F/0
 14543 ;;		Unchanged: 0/0
 14544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14549 ;;Total ram usage:        0 bytes
 14550 ;; Hardware stack levels used: 1
 14551 ;; Hardware stack levels required when called: 4
 14552 ;; This function calls:
 14553 ;;		Nothing
 14554 ;; This function is called by:
 14555 ;;		_main
 14556 ;;		_sendPacket
 14557 ;; This function uses a non-reentrant model
 14558 ;;
 14559                           
 14560     08BD                     _TxDeviceDisable:	
 14561                           ;psect for function _TxDeviceDisable
 14562                           
 14563                           
 14564                           ;communication.c: 74:     LATCbits.LATC3 = 0;
 14565                           
 14566                           ;incstack = 0
 14567                           ; Regs used in _TxDeviceDisable: []
 14568     08BD  0140               	movlb	0	; select bank0
 14569     08BE  119A               	bcf	26,3	;volatile
 14570     08BF  0008               	return
 14571     08C0                     __end_of_TxDeviceDisable:
 14572                           
 14573                           	psect	text68
 14574     09C6                     __ptext68:	
 14575 ;; *************** function _EUSART1_is_tx_ready *****************
 14576 ;; Defined at:
 14577 ;;		line 119 in file "mcc_generated_files/eusart1.c"
 14578 ;; Parameters:    Size  Location     Type
 14579 ;;		None
 14580 ;; Auto vars:     Size  Location     Type
 14581 ;;		None
 14582 ;; Return value:  Size  Location     Type
 14583 ;;                  1    wreg      _Bool 
 14584 ;; Registers used:
 14585 ;;		wreg, status,2
 14586 ;; Tracked objects:
 14587 ;;		On entry : 3F/0
 14588 ;;		On exit  : 33/2
 14589 ;;		Unchanged: 0/0
 14590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14595 ;;Total ram usage:        1 bytes
 14596 ;; Hardware stack levels used: 1
 14597 ;; Hardware stack levels required when called: 4
 14598 ;; This function calls:
 14599 ;;		Nothing
 14600 ;; This function is called by:
 14601 ;;		_sendPacket
 14602 ;; This function uses a non-reentrant model
 14603 ;;
 14604                           
 14605     09C6                     _EUSART1_is_tx_ready:	
 14606                           ;psect for function _EUSART1_is_tx_ready
 14607                           
 14608                           
 14609                           ;mcc_generated_files/eusart1.c: 121:     return (_Bool)(PIR3bits.TX1IF && TX1STAbits.TXE
      +                          N);
 14610                           
 14611                           ;incstack = 0
 14612                           ; Regs used in _EUSART1_is_tx_ready: [wreg+status,2]
 14613     09C6  01F4               	clrf	_EUSART1_is_tx_ready$357
 14614     09C7  014E               	movlb	14	; select bank14
 14615     09C8  1E0F               	btfss	15,4	;volatile
 14616     09C9  29CF               	goto	l4863
 14617     09CA  0142               	movlb	2	; select bank2
 14618     09CB  1E9E               	btfss	30,5	;volatile
 14619     09CC  29CF               	goto	l4863
 14620     09CD  3001               	movlw	1
 14621     09CE  00F4               	movwf	_EUSART1_is_tx_ready$357
 14622     09CF                     l4863:
 14623     09CF  0874               	movf	_EUSART1_is_tx_ready$357,w
 14624     09D0  0008               	return
 14625     09D1                     __end_of_EUSART1_is_tx_ready:
 14626                           
 14627                           	psect	text69
 14628     08DC                     __ptext69:	
 14629 ;; *************** function _EUSART1_is_tx_done *****************
 14630 ;; Defined at:
 14631 ;;		line 129 in file "mcc_generated_files/eusart1.c"
 14632 ;; Parameters:    Size  Location     Type
 14633 ;;		None
 14634 ;; Auto vars:     Size  Location     Type
 14635 ;;		None
 14636 ;; Return value:  Size  Location     Type
 14637 ;;                  1    wreg      _Bool 
 14638 ;; Registers used:
 14639 ;;		wreg, status,2, status,0
 14640 ;; Tracked objects:
 14641 ;;		On entry : 3D/2
 14642 ;;		On exit  : 3F/2
 14643 ;;		Unchanged: 0/0
 14644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14649 ;;Total ram usage:        0 bytes
 14650 ;; Hardware stack levels used: 1
 14651 ;; Hardware stack levels required when called: 4
 14652 ;; This function calls:
 14653 ;;		Nothing
 14654 ;; This function is called by:
 14655 ;;		_sendPacket
 14656 ;; This function uses a non-reentrant model
 14657 ;;
 14658                           
 14659     08DC                     _EUSART1_is_tx_done:	
 14660                           ;psect for function _EUSART1_is_tx_done
 14661                           
 14662                           
 14663                           ;mcc_generated_files/eusart1.c: 131:     return TX1STAbits.TRMT;
 14664                           
 14665                           ;incstack = 0
 14666                           ; Regs used in _EUSART1_is_tx_done: [wreg+status,2+status,0]
 14667     08DC  0142               	movlb	2	; select bank2
 14668     08DD  0C1E               	rrf	30,w	;volatile
 14669     08DE  3901               	andlw	1
 14670     08DF  0008               	return
 14671     08E0                     __end_of_EUSART1_is_tx_done:
 14672                           
 14673                           	psect	text70
 14674     099E                     __ptext70:	
 14675 ;; *************** function _EUSART1_Write *****************
 14676 ;; Defined at:
 14677 ;;		line 159 in file "mcc_generated_files/eusart1.c"
 14678 ;; Parameters:    Size  Location     Type
 14679 ;;  txData          1    wreg     unsigned char 
 14680 ;; Auto vars:     Size  Location     Type
 14681 ;;  txData          1    4[COMMON] unsigned char 
 14682 ;; Return value:  Size  Location     Type
 14683 ;;                  1    wreg      void 
 14684 ;; Registers used:
 14685 ;;		wreg
 14686 ;; Tracked objects:
 14687 ;;		On entry : 31/0
 14688 ;;		On exit  : 3F/2
 14689 ;;		Unchanged: 0/0
 14690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14694 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14695 ;;Total ram usage:        1 bytes
 14696 ;; Hardware stack levels used: 1
 14697 ;; Hardware stack levels required when called: 4
 14698 ;; This function calls:
 14699 ;;		Nothing
 14700 ;; This function is called by:
 14701 ;;		_sendPacket
 14702 ;; This function uses a non-reentrant model
 14703 ;;
 14704                           
 14705     099E                     _EUSART1_Write:	
 14706                           ;psect for function _EUSART1_Write
 14707                           
 14708                           
 14709                           ;incstack = 0
 14710                           ; Regs used in _EUSART1_Write: [wreg]
 14711                           ;EUSART1_Write@txData stored from wreg
 14712     099E  00F4               	movwf	EUSART1_Write@txData
 14713                           
 14714                           ;mcc_generated_files/eusart1.c: 159: void EUSART1_Write(uint8_t txData);mcc_generated_fi
      +                          les/eusart1.c: 160: {;mcc_generated_files/eusart1.c: 161:     do { LATCbits.LATC3 = 1; }
      +                           while(0);
 14715     099F  0140               	movlb	0	; select bank0
 14716     09A0  159A               	bsf	26,3	;volatile
 14717     09A1                     l196:	
 14718                           ;mcc_generated_files/eusart1.c: 163:     {;mcc_generated_files/eusart1.c: 164:     }
 14719                           
 14720                           
 14721                           ;mcc_generated_files/eusart1.c: 162:     while(0 == PIR3bits.TX1IF)
 14722     09A1  014E               	movlb	14	; select bank14
 14723     09A2  1E0F               	btfss	15,4	;volatile
 14724     09A3  29A1               	goto	l196
 14725                           
 14726                           ;mcc_generated_files/eusart1.c: 166:     TX1REG = txData;
 14727     09A4  0874               	movf	EUSART1_Write@txData,w
 14728     09A5  0142               	movlb	2	; select bank2
 14729     09A6  009A               	movwf	26	;volatile
 14730     09A7  0008               	return
 14731     09A8                     __end_of_EUSART1_Write:
 14732                           
 14733                           	psect	text71
 14734     048A                     __ptext71:	
 14735 ;; *************** function _int16ToString *****************
 14736 ;; Defined at:
 14737 ;;		line 88 in file "device.c"
 14738 ;; Parameters:    Size  Location     Type
 14739 ;;  value           2    7[BANK0 ] short 
 14740 ;;  data            2    9[BANK0 ] PTR unsigned char 
 14741 ;;		 -> sendSensorData@packet(8), 
 14742 ;; Auto vars:     Size  Location     Type
 14743 ;;  i               2   14[BANK0 ] int 
 14744 ;;  divisor         2   18[BANK0 ] unsigned short 
 14745 ;;  dividend        2   16[BANK0 ] short 
 14746 ;;  result          2   12[BANK0 ] short 
 14747 ;;  flag_0          1   11[BANK0 ] _Bool 
 14748 ;; Return value:  Size  Location     Type
 14749 ;;                  1    wreg      void 
 14750 ;; Registers used:
 14751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14752 ;; Tracked objects:
 14753 ;;		On entry : 3F/0
 14754 ;;		On exit  : 0/0
 14755 ;;		Unchanged: 0/0
 14756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14757 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14760 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14761 ;;Total ram usage:       14 bytes
 14762 ;; Hardware stack levels used: 1
 14763 ;; Hardware stack levels required when called: 5
 14764 ;; This function calls:
 14765 ;;		___lwdiv
 14766 ;;		___lwmod
 14767 ;; This function is called by:
 14768 ;;		_sendSensorData
 14769 ;; This function uses a non-reentrant model
 14770 ;;
 14771                           
 14772     048A                     _int16ToString:	
 14773                           ;psect for function _int16ToString
 14774                           
 14775                           
 14776                           ;device.c: 88: void int16ToString(int16_t value, char *data);device.c: 89: {;device.c: 9
      +                          0:     uint16_t divisor = 10000;
 14777                           
 14778                           ;incstack = 0
 14779                           ; Regs used in _int16ToString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14780     048A  3010               	movlw	16
 14781     048B  00B2               	movwf	int16ToString@divisor
 14782     048C  3027               	movlw	39
 14783     048D  00B3               	movwf	int16ToString@divisor+1
 14784                           
 14785                           ;device.c: 91:     int16_t dividend = value;
 14786     048E  0828               	movf	int16ToString@value+1,w
 14787     048F  00B1               	movwf	int16ToString@dividend+1
 14788     0490  0827               	movf	int16ToString@value,w
 14789     0491  00B0               	movwf	int16ToString@dividend
 14790                           
 14791                           ;device.c: 92:     int16_t result;;device.c: 93:     _Bool flag_0 = 0;
 14792     0492  01AB               	clrf	int16ToString@flag_0
 14793                           
 14794                           ;device.c: 94:     if((value == 0)||(value == 0xFFFF))
 14795     0493  0827               	movf	int16ToString@value,w
 14796     0494  0428               	iorwf	int16ToString@value+1,w
 14797     0495  1903               	btfsc	3,2
 14798     0496  2C9D               	goto	l4975
 14799     0497  0A27               	incf	int16ToString@value,w
 14800     0498  1D03               	skipz
 14801     0499  2CA4               	goto	l1177
 14802     049A  0A28               	incf	int16ToString@value+1,w
 14803     049B  1D03               	btfss	3,2
 14804     049C  2CA4               	goto	l1177
 14805     049D                     l4975:
 14806                           
 14807                           ;device.c: 95:     {;device.c: 96:         *data = '0';
 14808     049D  0829               	movf	int16ToString@data,w
 14809     049E  0086               	movwf	6
 14810     049F  082A               	movf	int16ToString@data+1,w
 14811     04A0  0087               	movwf	7
 14812     04A1  3030               	movlw	48
 14813     04A2  0081               	movwf	1
 14814                           
 14815                           ;device.c: 97:     }
 14816     04A3  0008               	return
 14817     04A4                     l1177:	
 14818                           ;device.c: 98:     else
 14819                           
 14820                           
 14821                           ;device.c: 99:     {;device.c: 100:         if(value < 0)
 14822     04A4  1FA8               	btfss	int16ToString@value+1,7
 14823     04A5  2CB4               	goto	l4983
 14824                           
 14825                           ;device.c: 101:         {;device.c: 102:             *data = '-';
 14826     04A6  0829               	movf	int16ToString@data,w
 14827     04A7  0086               	movwf	6
 14828     04A8  082A               	movf	int16ToString@data+1,w
 14829     04A9  0087               	movwf	7
 14830     04AA  302D               	movlw	45
 14831     04AB  0081               	movwf	1
 14832                           
 14833                           ;device.c: 103:             dividend =~ value;
 14834     04AC  0927               	comf	int16ToString@value,w
 14835     04AD  00B0               	movwf	int16ToString@dividend
 14836     04AE  0928               	comf	int16ToString@value+1,w
 14837     04AF  00B1               	movwf	int16ToString@dividend+1
 14838                           
 14839                           ;device.c: 104:             data++;
 14840     04B0  3001               	movlw	1
 14841     04B1  07A9               	addwf	int16ToString@data,f
 14842     04B2  3000               	movlw	0
 14843     04B3  3DAA               	addwfc	int16ToString@data+1,f
 14844     04B4                     l4983:
 14845                           
 14846                           ;device.c: 106:         for(int i=0; i<5; i++)
 14847     04B4  01AE               	clrf	int16ToString@i
 14848     04B5  01AF               	clrf	int16ToString@i+1
 14849     04B6                     l4989:
 14850                           
 14851                           ;device.c: 107:         {;device.c: 108:             result = dividend / divisor;
 14852     04B6  0140               	movlb	0	; select bank0
 14853     04B7  0833               	movf	int16ToString@divisor+1,w
 14854     04B8  00A1               	movwf	___lwdiv@divisor+1
 14855     04B9  0832               	movf	int16ToString@divisor,w
 14856     04BA  00A0               	movwf	___lwdiv@divisor
 14857     04BB  0831               	movf	int16ToString@dividend+1,w
 14858     04BC  00A3               	movwf	___lwdiv@dividend+1
 14859     04BD  0830               	movf	int16ToString@dividend,w
 14860     04BE  00A2               	movwf	___lwdiv@dividend
 14861     04BF  318D  259E  3184   	fcall	___lwdiv
 14862     04C2  0821               	movf	?___lwdiv+1,w
 14863     04C3  00AD               	movwf	int16ToString@result+1
 14864     04C4  0820               	movf	?___lwdiv,w
 14865     04C5  00AC               	movwf	int16ToString@result
 14866                           
 14867                           ;device.c: 109:             if((result > 0) || (flag_0 == 1))
 14868     04C6  082D               	movf	int16ToString@result+1,w
 14869     04C7  3A80               	xorlw	128
 14870     04C8  00F5               	movwf	??_int16ToString
 14871     04C9  3080               	movlw	128
 14872     04CA  0275               	subwf	??_int16ToString,w
 14873     04CB  1D03               	skipz
 14874     04CC  2CCF               	goto	u2885
 14875     04CD  3001               	movlw	1
 14876     04CE  022C               	subwf	int16ToString@result,w
 14877     04CF                     u2885:
 14878     04CF  1803               	skipnc
 14879     04D0  2CD5               	goto	l4995
 14880     04D1  0140               	movlb	0	; select bank0
 14881     04D2  032B               	decf	int16ToString@flag_0,w
 14882     04D3  1D03               	btfss	3,2
 14883     04D4  2CE3               	goto	l5001
 14884     04D5                     l4995:
 14885                           
 14886                           ;device.c: 110:             {;device.c: 111:                 *data = '0'+result;
 14887     04D5  0140               	movlb	0	; select bank0
 14888     04D6  0829               	movf	int16ToString@data,w
 14889     04D7  0086               	movwf	6
 14890     04D8  082A               	movf	int16ToString@data+1,w
 14891     04D9  0087               	movwf	7
 14892     04DA  082C               	movf	int16ToString@result,w
 14893     04DB  3E30               	addlw	48
 14894     04DC  0081               	movwf	1
 14895                           
 14896                           ;device.c: 112:                 data++;
 14897     04DD  3001               	movlw	1
 14898     04DE  07A9               	addwf	int16ToString@data,f
 14899     04DF  3000               	movlw	0
 14900     04E0  3DAA               	addwfc	int16ToString@data+1,f
 14901                           
 14902                           ;device.c: 113:                 flag_0 = 1;
 14903     04E1  3001               	movlw	1
 14904     04E2  00AB               	movwf	int16ToString@flag_0
 14905     04E3                     l5001:
 14906                           
 14907                           ;device.c: 115:             dividend = dividend % divisor;
 14908     04E3  0833               	movf	int16ToString@divisor+1,w
 14909     04E4  00A1               	movwf	___lwmod@divisor+1
 14910     04E5  0832               	movf	int16ToString@divisor,w
 14911     04E6  00A0               	movwf	___lwmod@divisor
 14912     04E7  0831               	movf	int16ToString@dividend+1,w
 14913     04E8  00A3               	movwf	___lwmod@dividend+1
 14914     04E9  0830               	movf	int16ToString@dividend,w
 14915     04EA  00A2               	movwf	___lwmod@dividend
 14916     04EB  318C  24EB  3184   	fcall	___lwmod
 14917     04EE  0821               	movf	?___lwmod+1,w
 14918     04EF  00B1               	movwf	int16ToString@dividend+1
 14919     04F0  0820               	movf	?___lwmod,w
 14920     04F1  00B0               	movwf	int16ToString@dividend
 14921                           
 14922                           ;device.c: 116:             divisor /= 10;
 14923     04F2  300A               	movlw	10
 14924     04F3  00A0               	movwf	___lwdiv@divisor
 14925     04F4  3000               	movlw	0
 14926     04F5  00A1               	movwf	___lwdiv@divisor+1
 14927     04F6  0833               	movf	int16ToString@divisor+1,w
 14928     04F7  00A3               	movwf	___lwdiv@dividend+1
 14929     04F8  0832               	movf	int16ToString@divisor,w
 14930     04F9  00A2               	movwf	___lwdiv@dividend
 14931     04FA  318D  259E  3184   	fcall	___lwdiv
 14932     04FD  0821               	movf	?___lwdiv+1,w
 14933     04FE  00B3               	movwf	int16ToString@divisor+1
 14934     04FF  0820               	movf	?___lwdiv,w
 14935     0500  00B2               	movwf	int16ToString@divisor
 14936                           
 14937                           ;device.c: 117:         }
 14938     0501  3001               	movlw	1
 14939     0502  07AE               	addwf	int16ToString@i,f
 14940     0503  3000               	movlw	0
 14941     0504  3DAF               	addwfc	int16ToString@i+1,f
 14942     0505  082F               	movf	int16ToString@i+1,w
 14943     0506  3A80               	xorlw	128
 14944     0507  00F5               	movwf	??_int16ToString
 14945     0508  3080               	movlw	128
 14946     0509  0275               	subwf	??_int16ToString,w
 14947     050A  1D03               	skipz
 14948     050B  2D0E               	goto	u2905
 14949     050C  3005               	movlw	5
 14950     050D  022E               	subwf	int16ToString@i,w
 14951     050E                     u2905:
 14952     050E  1803               	btfsc	3,0
 14953     050F  0008               	return
 14954     0510  2CB6               	goto	l4989
 14955     0511                     __end_of_int16ToString:
 14956                           
 14957                           	psect	text72
 14958     0CEB                     __ptext72:	
 14959 ;; *************** function ___lwmod *****************
 14960 ;; Defined at:
 14961 ;;		line 5 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/lwmod.c"
 14962 ;; Parameters:    Size  Location     Type
 14963 ;;  divisor         2    0[BANK0 ] unsigned int 
 14964 ;;  dividend        2    2[BANK0 ] unsigned int 
 14965 ;; Auto vars:     Size  Location     Type
 14966 ;;  counter         1    4[COMMON] unsigned char 
 14967 ;; Return value:  Size  Location     Type
 14968 ;;                  2    0[BANK0 ] unsigned int 
 14969 ;; Registers used:
 14970 ;;		wreg, status,2, status,0
 14971 ;; Tracked objects:
 14972 ;;		On entry : 3F/0
 14973 ;;		On exit  : 3F/0
 14974 ;;		Unchanged: 0/0
 14975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14976 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14977 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;Total ram usage:        5 bytes
 14981 ;; Hardware stack levels used: 1
 14982 ;; Hardware stack levels required when called: 4
 14983 ;; This function calls:
 14984 ;;		Nothing
 14985 ;; This function is called by:
 14986 ;;		_int16ToString
 14987 ;; This function uses a non-reentrant model
 14988 ;;
 14989                           
 14990     0CEB                     ___lwmod:	
 14991                           ;psect for function ___lwmod
 14992                           
 14993                           
 14994                           ;incstack = 0
 14995                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 14996     0CEB  0820               	movf	___lwmod@divisor,w
 14997     0CEC  0421               	iorwf	___lwmod@divisor+1,w
 14998     0CED  1903               	btfsc	3,2
 14999     0CEE  2D10               	goto	l4921
 15000     0CEF  3001               	movlw	1
 15001     0CF0  00F4               	movwf	___lwmod@counter
 15002     0CF1                     l4911:
 15003     0CF1  1BA1               	btfsc	___lwmod@divisor+1,7
 15004     0CF2  2CFB               	goto	l4913
 15005     0CF3  3001               	movlw	1
 15006     0CF4                     u2715:
 15007     0CF4  35A0               	lslf	___lwmod@divisor,f
 15008     0CF5  0DA1               	rlf	___lwmod@divisor+1,f
 15009     0CF6  0B89               	decfsz	9,f
 15010     0CF7  2CF4               	goto	u2715
 15011     0CF8  3001               	movlw	1
 15012     0CF9  07F4               	addwf	___lwmod@counter,f
 15013     0CFA  2CF1               	goto	l4911
 15014     0CFB                     l4913:
 15015     0CFB  0821               	movf	___lwmod@divisor+1,w
 15016     0CFC  0223               	subwf	___lwmod@dividend+1,w
 15017     0CFD  1D03               	skipz
 15018     0CFE  2D01               	goto	u2735
 15019     0CFF  0820               	movf	___lwmod@divisor,w
 15020     0D00  0222               	subwf	___lwmod@dividend,w
 15021     0D01                     u2735:
 15022     0D01  1C03               	skipc
 15023     0D02  2D07               	goto	l4917
 15024     0D03  0820               	movf	___lwmod@divisor,w
 15025     0D04  02A2               	subwf	___lwmod@dividend,f
 15026     0D05  0821               	movf	___lwmod@divisor+1,w
 15027     0D06  3BA3               	subwfb	___lwmod@dividend+1,f
 15028     0D07                     l4917:
 15029     0D07  3001               	movlw	1
 15030     0D08                     u2745:
 15031     0D08  36A1               	lsrf	___lwmod@divisor+1,f
 15032     0D09  0CA0               	rrf	___lwmod@divisor,f
 15033     0D0A  0B89               	decfsz	9,f
 15034     0D0B  2D08               	goto	u2745
 15035     0D0C  3001               	movlw	1
 15036     0D0D  02F4               	subwf	___lwmod@counter,f
 15037     0D0E  1D03               	btfss	3,2
 15038     0D0F  2CFB               	goto	l4913
 15039     0D10                     l4921:
 15040     0D10  0823               	movf	___lwmod@dividend+1,w
 15041     0D11  00A1               	movwf	?___lwmod+1
 15042     0D12  0822               	movf	___lwmod@dividend,w
 15043     0D13  00A0               	movwf	?___lwmod
 15044     0D14  0008               	return
 15045     0D15                     __end_of___lwmod:
 15046                           
 15047                           	psect	text73
 15048     0D9E                     __ptext73:	
 15049 ;; *************** function ___lwdiv *****************
 15050 ;; Defined at:
 15051 ;;		line 5 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/lwdiv.c"
 15052 ;; Parameters:    Size  Location     Type
 15053 ;;  divisor         2    0[BANK0 ] unsigned int 
 15054 ;;  dividend        2    2[BANK0 ] unsigned int 
 15055 ;; Auto vars:     Size  Location     Type
 15056 ;;  quotient        2    5[BANK0 ] unsigned int 
 15057 ;;  counter         1    4[BANK0 ] unsigned char 
 15058 ;; Return value:  Size  Location     Type
 15059 ;;                  2    0[BANK0 ] unsigned int 
 15060 ;; Registers used:
 15061 ;;		wreg, status,2, status,0
 15062 ;; Tracked objects:
 15063 ;;		On entry : 3F/0
 15064 ;;		On exit  : 3F/0
 15065 ;;		Unchanged: 0/0
 15066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15067 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15068 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15070 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15071 ;;Total ram usage:        7 bytes
 15072 ;; Hardware stack levels used: 1
 15073 ;; Hardware stack levels required when called: 4
 15074 ;; This function calls:
 15075 ;;		Nothing
 15076 ;; This function is called by:
 15077 ;;		_int16ToString
 15078 ;; This function uses a non-reentrant model
 15079 ;;
 15080                           
 15081     0D9E                     ___lwdiv:	
 15082                           ;psect for function ___lwdiv
 15083                           
 15084                           
 15085                           ;incstack = 0
 15086                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 15087     0D9E  01A5               	clrf	___lwdiv@quotient
 15088     0D9F  01A6               	clrf	___lwdiv@quotient+1
 15089     0DA0  0820               	movf	___lwdiv@divisor,w
 15090     0DA1  0421               	iorwf	___lwdiv@divisor+1,w
 15091     0DA2  1903               	btfsc	3,2
 15092     0DA3  2DCB               	goto	l4899
 15093     0DA4  3001               	movlw	1
 15094     0DA5  00A4               	movwf	___lwdiv@counter
 15095     0DA6                     l4887:
 15096     0DA6  1BA1               	btfsc	___lwdiv@divisor+1,7
 15097     0DA7  2DB0               	goto	l4889
 15098     0DA8  3001               	movlw	1
 15099     0DA9                     u2645:
 15100     0DA9  35A0               	lslf	___lwdiv@divisor,f
 15101     0DAA  0DA1               	rlf	___lwdiv@divisor+1,f
 15102     0DAB  0B89               	decfsz	9,f
 15103     0DAC  2DA9               	goto	u2645
 15104     0DAD  3001               	movlw	1
 15105     0DAE  07A4               	addwf	___lwdiv@counter,f
 15106     0DAF  2DA6               	goto	l4887
 15107     0DB0                     l4889:
 15108     0DB0  3001               	movlw	1
 15109     0DB1                     u2665:
 15110     0DB1  35A5               	lslf	___lwdiv@quotient,f
 15111     0DB2  0DA6               	rlf	___lwdiv@quotient+1,f
 15112     0DB3  0B89               	decfsz	9,f
 15113     0DB4  2DB1               	goto	u2665
 15114     0DB5  0821               	movf	___lwdiv@divisor+1,w
 15115     0DB6  0223               	subwf	___lwdiv@dividend+1,w
 15116     0DB7  1D03               	skipz
 15117     0DB8  2DBB               	goto	u2675
 15118     0DB9  0820               	movf	___lwdiv@divisor,w
 15119     0DBA  0222               	subwf	___lwdiv@dividend,w
 15120     0DBB                     u2675:
 15121     0DBB  1C03               	skipc
 15122     0DBC  2DC2               	goto	l4895
 15123     0DBD  0820               	movf	___lwdiv@divisor,w
 15124     0DBE  02A2               	subwf	___lwdiv@dividend,f
 15125     0DBF  0821               	movf	___lwdiv@divisor+1,w
 15126     0DC0  3BA3               	subwfb	___lwdiv@dividend+1,f
 15127     0DC1  1425               	bsf	___lwdiv@quotient,0
 15128     0DC2                     l4895:
 15129     0DC2  3001               	movlw	1
 15130     0DC3                     u2685:
 15131     0DC3  36A1               	lsrf	___lwdiv@divisor+1,f
 15132     0DC4  0CA0               	rrf	___lwdiv@divisor,f
 15133     0DC5  0B89               	decfsz	9,f
 15134     0DC6  2DC3               	goto	u2685
 15135     0DC7  3001               	movlw	1
 15136     0DC8  02A4               	subwf	___lwdiv@counter,f
 15137     0DC9  1D03               	btfss	3,2
 15138     0DCA  2DB0               	goto	l4889
 15139     0DCB                     l4899:
 15140     0DCB  0826               	movf	___lwdiv@quotient+1,w
 15141     0DCC  00A1               	movwf	?___lwdiv+1
 15142     0DCD  0825               	movf	___lwdiv@quotient,w
 15143     0DCE  00A0               	movwf	?___lwdiv
 15144     0DCF  0008               	return
 15145     0DD0                     __end_of___lwdiv:
 15146                           
 15147                           	psect	text74
 15148     0972                     __ptext74:	
 15149 ;; *************** function _TMR0_Reload *****************
 15150 ;; Defined at:
 15151 ;;		line 127 in file "mcc_generated_files/tmr0.c"
 15152 ;; Parameters:    Size  Location     Type
 15153 ;;		None
 15154 ;; Auto vars:     Size  Location     Type
 15155 ;;		None
 15156 ;; Return value:  Size  Location     Type
 15157 ;;                  1    wreg      void 
 15158 ;; Registers used:
 15159 ;;		wreg
 15160 ;; Tracked objects:
 15161 ;;		On entry : 3F/0
 15162 ;;		On exit  : 3F/B
 15163 ;;		Unchanged: 0/0
 15164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15169 ;;Total ram usage:        0 bytes
 15170 ;; Hardware stack levels used: 1
 15171 ;; Hardware stack levels required when called: 4
 15172 ;; This function calls:
 15173 ;;		Nothing
 15174 ;; This function is called by:
 15175 ;;		_processCommand
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179     0972                     _TMR0_Reload:	
 15180                           ;psect for function _TMR0_Reload
 15181                           
 15182                           
 15183                           ;mcc_generated_files/tmr0.c: 130:     TMR0H = timer0ReloadVal16bit >> 8;
 15184                           
 15185                           ;incstack = 0
 15186                           ; Regs used in _TMR0_Reload: [wreg]
 15187     0972  0865               	movf	_timer0ReloadVal16bit+1,w	;volatile
 15188     0973  014B               	movlb	11	; select bank11
 15189     0974  009D               	movwf	29	;volatile
 15190                           
 15191                           ;mcc_generated_files/tmr0.c: 131:     TMR0L = (uint8_t) timer0ReloadVal16bit;
 15192     0975  0140               	movlb	0	; select bank0
 15193     0976  0864               	movf	_timer0ReloadVal16bit,w	;volatile
 15194     0977  014B               	movlb	11	; select bank11
 15195     0978  009C               	movwf	28	;volatile
 15196     0979  0008               	return
 15197     097A                     __end_of_TMR0_Reload:
 15198                           
 15199                           	psect	text75
 15200     0C4B                     __ptext75:	
 15201 ;; *************** function _initRxBuffer *****************
 15202 ;; Defined at:
 15203 ;;		line 8 in file "communication.c"
 15204 ;; Parameters:    Size  Location     Type
 15205 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 15206 ;;		 -> main@packet(11), 
 15207 ;;  size            4    2[BANK0 ] unsigned long 
 15208 ;; Auto vars:     Size  Location     Type
 15209 ;;  i               2    4[COMMON] int 
 15210 ;; Return value:  Size  Location     Type
 15211 ;;                  1    wreg      void 
 15212 ;; Registers used:
 15213 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15214 ;; Tracked objects:
 15215 ;;		On entry : 3F/0
 15216 ;;		On exit  : 3F/0
 15217 ;;		Unchanged: 0/0
 15218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15219 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;Total ram usage:       12 bytes
 15224 ;; Hardware stack levels used: 1
 15225 ;; Hardware stack levels required when called: 4
 15226 ;; This function calls:
 15227 ;;		Nothing
 15228 ;; This function is called by:
 15229 ;;		_main
 15230 ;; This function uses a non-reentrant model
 15231 ;;
 15232                           
 15233     0C4B                     _initRxBuffer:	
 15234                           ;psect for function _initRxBuffer
 15235                           
 15236                           
 15237                           ;communication.c: 8: void initRxBuffer(char* buf, uint32_t size);communication.c: 9: {;c
      +                          ommunication.c: 10:     for(int i=0; i<size; i++)
 15238                           
 15239                           ;incstack = 0
 15240                           ; Regs used in _initRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 15241     0C4B  01F4               	clrf	initRxBuffer@i
 15242     0C4C  01F5               	clrf	initRxBuffer@i+1
 15243     0C4D                     l5421:
 15244     0C4D  0874               	movf	initRxBuffer@i,w
 15245     0C4E  00A6               	movwf	??_initRxBuffer
 15246     0C4F  0875               	movf	initRxBuffer@i+1,w
 15247     0C50  00A7               	movwf	??_initRxBuffer+1
 15248     0C51  3000               	movlw	0
 15249     0C52  1BA7               	btfsc	??_initRxBuffer+1,7
 15250     0C53  30FF               	movlw	255
 15251     0C54  00A8               	movwf	??_initRxBuffer+2
 15252     0C55  00A9               	movwf	??_initRxBuffer+3
 15253     0C56  0825               	movf	initRxBuffer@size+3,w
 15254     0C57  0229               	subwf	??_initRxBuffer+3,w
 15255     0C58  1D03               	skipz
 15256     0C59  2C64               	goto	u3275
 15257     0C5A  0824               	movf	initRxBuffer@size+2,w
 15258     0C5B  0228               	subwf	??_initRxBuffer+2,w
 15259     0C5C  1D03               	skipz
 15260     0C5D  2C64               	goto	u3275
 15261     0C5E  0823               	movf	initRxBuffer@size+1,w
 15262     0C5F  0227               	subwf	??_initRxBuffer+1,w
 15263     0C60  1D03               	skipz
 15264     0C61  2C64               	goto	u3275
 15265     0C62  0822               	movf	initRxBuffer@size,w
 15266     0C63  0226               	subwf	??_initRxBuffer,w
 15267     0C64                     u3275:
 15268     0C64  1803               	btfsc	3,0
 15269     0C65  0008               	return
 15270                           
 15271                           ;communication.c: 11:     {;communication.c: 12:         buf[i]='\0';
 15272     0C66  0874               	movf	initRxBuffer@i,w
 15273     0C67  0720               	addwf	initRxBuffer@buf,w
 15274     0C68  0086               	movwf	6
 15275     0C69  0875               	movf	initRxBuffer@i+1,w
 15276     0C6A  3D21               	addwfc	initRxBuffer@buf+1,w
 15277     0C6B  0087               	movwf	7
 15278     0C6C  0181               	clrf	1
 15279                           
 15280                           ;communication.c: 13:     }
 15281     0C6D  3001               	movlw	1
 15282     0C6E  07F4               	addwf	initRxBuffer@i,f
 15283     0C6F  3000               	movlw	0
 15284     0C70  3DF5               	addwfc	initRxBuffer@i+1,f
 15285     0C71  2C4D               	goto	l5421
 15286     0C72                     __end_of_initRxBuffer:
 15287                           
 15288                           	psect	text76
 15289     0E6A                     __ptext76:	
 15290 ;; *************** function _getMetrics *****************
 15291 ;; Defined at:
 15292 ;;		line 100 in file "sensor.c"
 15293 ;; Parameters:    Size  Location     Type
 15294 ;;  device          2   30[BANK0 ] PTR struct .
 15295 ;;		 -> cons(59), battery(59), panel(59), 
 15296 ;; Auto vars:     Size  Location     Type
 15297 ;;		None
 15298 ;; Return value:  Size  Location     Type
 15299 ;;                  1    wreg      void 
 15300 ;; Registers used:
 15301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15302 ;; Tracked objects:
 15303 ;;		On entry : 3F/0
 15304 ;;		On exit  : 3F/0
 15305 ;;		Unchanged: 0/0
 15306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15307 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15310 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15311 ;;Total ram usage:        2 bytes
 15312 ;; Hardware stack levels used: 1
 15313 ;; Hardware stack levels required when called: 6
 15314 ;; This function calls:
 15315 ;;		_getMax
 15316 ;;		_getMed
 15317 ;;		_getMin
 15318 ;; This function is called by:
 15319 ;;		_main
 15320 ;; This function uses a non-reentrant model
 15321 ;;
 15322                           
 15323     0E6A                     _getMetrics:	
 15324                           ;psect for function _getMetrics
 15325                           
 15326                           
 15327                           ;sensor.c: 100: void getMetrics(sensor_t *device);sensor.c: 101: {;sensor.c: 102:     ge
      +                          tMax(&device->sensor_data.current);
 15328                           
 15329                           ;incstack = 0
 15330                           ; Regs used in _getMetrics: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15331     0E6A  083E               	movf	getMetrics@device,w
 15332     0E6B  3E24               	addlw	36
 15333     0E6C  00F4               	movwf	getMax@data
 15334     0E6D  3000               	movlw	0
 15335     0E6E  3D3F               	addwfc	getMetrics@device+1,w
 15336     0E6F  00F5               	movwf	getMax@data+1
 15337     0E70  3186  26F4  318E   	fcall	_getMax
 15338                           
 15339                           ;sensor.c: 103:     getMin(&device->sensor_data.current);
 15340     0E73  083E               	movf	getMetrics@device,w
 15341     0E74  3E24               	addlw	36
 15342     0E75  00F4               	movwf	getMin@data
 15343     0E76  3000               	movlw	0
 15344     0E77  3D3F               	addwfc	getMetrics@device+1,w
 15345     0E78  00F5               	movwf	getMin@data+1
 15346     0E79  3186  26A5  318E   	fcall	_getMin
 15347                           
 15348                           ;sensor.c: 104:     getMed(&device->sensor_data.current);
 15349     0E7C  083E               	movf	getMetrics@device,w
 15350     0E7D  3E24               	addlw	36
 15351     0E7E  00AE               	movwf	getMed@data
 15352     0E7F  3000               	movlw	0
 15353     0E80  3D3F               	addwfc	getMetrics@device+1,w
 15354     0E81  00AF               	movwf	getMed@data+1
 15355     0E82  3185  25F9  318E   	fcall	_getMed
 15356                           
 15357                           ;sensor.c: 105:     getMax(&device->sensor_data.voltage);
 15358     0E85  083E               	movf	getMetrics@device,w
 15359     0E86  3E0D               	addlw	13
 15360     0E87  00F4               	movwf	getMax@data
 15361     0E88  3000               	movlw	0
 15362     0E89  3D3F               	addwfc	getMetrics@device+1,w
 15363     0E8A  00F5               	movwf	getMax@data+1
 15364     0E8B  3186  26F4  318E   	fcall	_getMax
 15365                           
 15366                           ;sensor.c: 106:     getMin(&device->sensor_data.voltage);
 15367     0E8E  083E               	movf	getMetrics@device,w
 15368     0E8F  3E0D               	addlw	13
 15369     0E90  00F4               	movwf	getMin@data
 15370     0E91  3000               	movlw	0
 15371     0E92  3D3F               	addwfc	getMetrics@device+1,w
 15372     0E93  00F5               	movwf	getMin@data+1
 15373     0E94  3186  26A5  318E   	fcall	_getMin
 15374                           
 15375                           ;sensor.c: 107:     getMed(&device->sensor_data.voltage);
 15376     0E97  083E               	movf	getMetrics@device,w
 15377     0E98  3E0D               	addlw	13
 15378     0E99  00AE               	movwf	getMed@data
 15379     0E9A  3000               	movlw	0
 15380     0E9B  3D3F               	addwfc	getMetrics@device+1,w
 15381     0E9C  00AF               	movwf	getMed@data+1
 15382     0E9D  3185  25F9         	fcall	_getMed
 15383     0E9F  0008               	return
 15384     0EA0                     __end_of_getMetrics:
 15385                           
 15386                           	psect	text77
 15387     06A5                     __ptext77:	
 15388 ;; *************** function _getMin *****************
 15389 ;; Defined at:
 15390 ;;		line 130 in file "sensor.c"
 15391 ;; Parameters:    Size  Location     Type
 15392 ;;  data            2    4[COMMON] PTR struct .
 15393 ;;		 -> cons$sensor_config$addressI2C(1), battery$sensor_config$addressI2C(1), panel$sensor_config$addressI2C(1), 
 15394 ;; Auto vars:     Size  Location     Type
 15395 ;;  i               1    7[BANK0 ] unsigned char 
 15396 ;;  aux             1    8[BANK0 ] unsigned char 
 15397 ;; Return value:  Size  Location     Type
 15398 ;;                  1    wreg      void 
 15399 ;; Registers used:
 15400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15401 ;; Tracked objects:
 15402 ;;		On entry : 3F/0
 15403 ;;		On exit  : 3F/0
 15404 ;;		Unchanged: 0/0
 15405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15406 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15408 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15409 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15410 ;;Total ram usage:       11 bytes
 15411 ;; Hardware stack levels used: 1
 15412 ;; Hardware stack levels required when called: 4
 15413 ;; This function calls:
 15414 ;;		Nothing
 15415 ;; This function is called by:
 15416 ;;		_getMetrics
 15417 ;;		_processCommand
 15418 ;; This function uses a non-reentrant model
 15419 ;;
 15420                           
 15421     06A5                     _getMin:	
 15422                           ;psect for function _getMin
 15423                           
 15424                           
 15425                           ;sensor.c: 130: void getMin(measure_data_t *data);sensor.c: 131: {;sensor.c: 132:     ui
      +                          nt8_t aux;;sensor.c: 133:     aux = data->pWrite;
 15426                           
 15427                           ;incstack = 0
 15428                           ; Regs used in _getMin: [wreg-fsr1h+status,2+status,0]
 15429     06A5  0874               	movf	getMin@data,w
 15430     06A6  0086               	movwf	6
 15431     06A7  0875               	movf	getMin@data+1,w
 15432     06A8  0087               	movwf	7
 15433     06A9  3156               	addfsr 1,22
 15434     06AA  0801               	movf	1,w
 15435     06AB  00A8               	movwf	getMin@aux
 15436                           
 15437                           ;sensor.c: 135:     for(uint8_t i=0; i<8; i++)
 15438     06AC  01A7               	clrf	getMin@i
 15439     06AD                     l5349:
 15440                           
 15441                           ;sensor.c: 136:     {;sensor.c: 137:         if(data->min > data->hist[aux])
 15442     06AD  0874               	movf	getMin@data,w
 15443     06AE  0086               	movwf	6
 15444     06AF  0875               	movf	getMin@data+1,w
 15445     06B0  0087               	movwf	7
 15446     06B1  3152               	addfsr 1,18
 15447     06B2  3F40               	moviw [0]fsr1
 15448     06B3  00A0               	movwf	??_getMin
 15449     06B4  3F41               	moviw [1]fsr1
 15450     06B5  00A1               	movwf	??_getMin+1
 15451     06B6  0828               	movf	getMin@aux,w
 15452     06B7  00A2               	movwf	??_getMin+2
 15453     06B8  01A3               	clrf	??_getMin+3
 15454     06B9  35A2               	lslf	??_getMin+2,f
 15455     06BA  0DA3               	rlf	??_getMin+3,f
 15456     06BB  0822               	movf	??_getMin+2,w
 15457     06BC  0774               	addwf	getMin@data,w
 15458     06BD  0086               	movwf	6
 15459     06BE  0823               	movf	??_getMin+3,w
 15460     06BF  3D75               	addwfc	getMin@data+1,w
 15461     06C0  0087               	movwf	7
 15462     06C1  3F40               	moviw [0]fsr1
 15463     06C2  00A4               	movwf	??_getMin+4
 15464     06C3  3F41               	moviw [1]fsr1
 15465     06C4  00A5               	movwf	??_getMin+5
 15466     06C5  0825               	movf	??_getMin+5,w
 15467     06C6  3A80               	xorlw	128
 15468     06C7  00A6               	movwf	??_getMin+6
 15469     06C8  0821               	movf	??_getMin+1,w
 15470     06C9  3A80               	xorlw	128
 15471     06CA  0226               	subwf	??_getMin+6,w
 15472     06CB  1D03               	skipz
 15473     06CC  2ECF               	goto	u3205
 15474     06CD  0820               	movf	??_getMin,w
 15475     06CE  0224               	subwf	??_getMin+4,w
 15476     06CF                     u3205:
 15477     06CF  1803               	skipnc
 15478     06D0  2EE6               	goto	l5353
 15479                           
 15480                           ;sensor.c: 138:         {;sensor.c: 139:             data->min = data->hist[aux];
 15481     06D1  0140               	movlb	0	; select bank0
 15482     06D2  0828               	movf	getMin@aux,w
 15483     06D3  00A0               	movwf	??_getMin
 15484     06D4  01A1               	clrf	??_getMin+1
 15485     06D5  35A0               	lslf	??_getMin,f
 15486     06D6  0DA1               	rlf	??_getMin+1,f
 15487     06D7  0820               	movf	??_getMin,w
 15488     06D8  0774               	addwf	getMin@data,w
 15489     06D9  0086               	movwf	6
 15490     06DA  0821               	movf	??_getMin+1,w
 15491     06DB  3D75               	addwfc	getMin@data+1,w
 15492     06DC  0087               	movwf	7
 15493     06DD  0874               	movf	getMin@data,w
 15494     06DE  0084               	movwf	4
 15495     06DF  0875               	movf	getMin@data+1,w
 15496     06E0  0085               	movwf	5
 15497     06E1  3112               	addfsr 0,18
 15498     06E2  3F40               	moviw [0]fsr1
 15499     06E3  3F80               	movwi [0]fsr0
 15500     06E4  3F41               	moviw [1]fsr1
 15501     06E5  3F81               	movwi [1]fsr0
 15502     06E6                     l5353:
 15503                           
 15504                           ;sensor.c: 141:         if(aux == 0)
 15505     06E6  0140               	movlb	0	; select bank0
 15506     06E7  0828               	movf	getMin@aux,w
 15507                           
 15508                           ;sensor.c: 142:         {;sensor.c: 143:             aux = 8;
 15509     06E8  3008               	movlw	8
 15510     06E9  1903               	btfsc	3,2
 15511     06EA  00A8               	movwf	getMin@aux
 15512                           
 15513                           ;sensor.c: 145:         aux--;
 15514     06EB  3001               	movlw	1
 15515     06EC  02A8               	subwf	getMin@aux,f
 15516                           
 15517                           ;sensor.c: 146:     }
 15518     06ED  3001               	movlw	1
 15519     06EE  07A7               	addwf	getMin@i,f
 15520     06EF  3008               	movlw	8
 15521     06F0  0227               	subwf	getMin@i,w
 15522     06F1  1803               	btfsc	3,0
 15523     06F2  0008               	return
 15524     06F3  2EAD               	goto	l5349
 15525     06F4                     __end_of_getMin:
 15526                           
 15527                           	psect	text78
 15528     05F9                     __ptext78:	
 15529 ;; *************** function _getMed *****************
 15530 ;; Defined at:
 15531 ;;		line 150 in file "sensor.c"
 15532 ;; Parameters:    Size  Location     Type
 15533 ;;  data            2   14[BANK0 ] PTR struct .
 15534 ;;		 -> cons$sensor_config$addressI2C(1), battery$sensor_config$addressI2C(1), panel$sensor_config$addressI2C(1), 
 15535 ;; Auto vars:     Size  Location     Type
 15536 ;;  i               1   28[BANK0 ] unsigned char 
 15537 ;;  buff            4   24[BANK0 ] long 
 15538 ;;  aux             1   29[BANK0 ] unsigned char 
 15539 ;; Return value:  Size  Location     Type
 15540 ;;                  1    wreg      void 
 15541 ;; Registers used:
 15542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15543 ;; Tracked objects:
 15544 ;;		On entry : 3F/0
 15545 ;;		On exit  : 3F/0
 15546 ;;		Unchanged: 0/0
 15547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15548 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15549 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15550 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15552 ;;Total ram usage:       16 bytes
 15553 ;; Hardware stack levels used: 1
 15554 ;; Hardware stack levels required when called: 5
 15555 ;; This function calls:
 15556 ;;		___aldiv
 15557 ;; This function is called by:
 15558 ;;		_getMetrics
 15559 ;;		_processCommand
 15560 ;; This function uses a non-reentrant model
 15561 ;;
 15562                           
 15563     05F9                     _getMed:	
 15564                           ;psect for function _getMed
 15565                           
 15566                           
 15567                           ;sensor.c: 150: void getMed(measure_data_t *data);sensor.c: 151: {;sensor.c: 152:     in
      +                          t32_t buff = 0;
 15568                           
 15569                           ;incstack = 0
 15570                           ; Regs used in _getMed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15571     05F9  3000               	movlw	0
 15572     05FA  00BB               	movwf	getMed@buff+3
 15573     05FB  3000               	movlw	0
 15574     05FC  00BA               	movwf	getMed@buff+2
 15575     05FD  3000               	movlw	0
 15576     05FE  00B9               	movwf	getMed@buff+1
 15577     05FF  3000               	movlw	0
 15578     0600  00B8               	movwf	getMed@buff
 15579                           
 15580                           ;sensor.c: 153:     uint8_t aux;;sensor.c: 154:     aux = data->pWrite;
 15581     0601  082E               	movf	getMed@data,w
 15582     0602  0086               	movwf	6
 15583     0603  082F               	movf	getMed@data+1,w
 15584     0604  0087               	movwf	7
 15585     0605  3156               	addfsr 1,22
 15586     0606  0801               	movf	1,w
 15587     0607  00BD               	movwf	getMed@aux
 15588                           
 15589                           ;sensor.c: 155:     for(uint8_t i=0; i<8; i++)
 15590     0608  01BC               	clrf	getMed@i
 15591     0609                     l5371:
 15592                           
 15593                           ;sensor.c: 156:     {;sensor.c: 157:         buff += data->hist[aux];
 15594     0609  083D               	movf	getMed@aux,w
 15595     060A  00B0               	movwf	??_getMed
 15596     060B  01B1               	clrf	??_getMed+1
 15597     060C  35B0               	lslf	??_getMed,f
 15598     060D  0DB1               	rlf	??_getMed+1,f
 15599     060E  0830               	movf	??_getMed,w
 15600     060F  072E               	addwf	getMed@data,w
 15601     0610  0086               	movwf	6
 15602     0611  0831               	movf	??_getMed+1,w
 15603     0612  3D2F               	addwfc	getMed@data+1,w
 15604     0613  0087               	movwf	7
 15605     0614  3F40               	moviw [0]fsr1
 15606     0615  00B2               	movwf	??_getMed+2
 15607     0616  3F41               	moviw [1]fsr1
 15608     0617  00B3               	movwf	??_getMed+3
 15609     0618  0832               	movf	??_getMed+2,w
 15610     0619  00B4               	movwf	??_getMed+4
 15611     061A  0833               	movf	??_getMed+3,w
 15612     061B  00B5               	movwf	??_getMed+5
 15613     061C  3000               	movlw	0
 15614     061D  1BB5               	btfsc	??_getMed+5,7
 15615     061E  30FF               	movlw	255
 15616     061F  00B6               	movwf	??_getMed+6
 15617     0620  00B7               	movwf	??_getMed+7
 15618     0621  0834               	movf	??_getMed+4,w
 15619     0622  07B8               	addwf	getMed@buff,f
 15620     0623  0835               	movf	??_getMed+5,w
 15621     0624  3DB9               	addwfc	getMed@buff+1,f
 15622     0625  0836               	movf	??_getMed+6,w
 15623     0626  3DBA               	addwfc	getMed@buff+2,f
 15624     0627  0837               	movf	??_getMed+7,w
 15625     0628  3DBB               	addwfc	getMed@buff+3,f
 15626                           
 15627                           ;sensor.c: 158:         if(aux == 0)
 15628     0629  083D               	movf	getMed@aux,w
 15629                           
 15630                           ;sensor.c: 159:         {;sensor.c: 160:             aux = 8;
 15631     062A  3008               	movlw	8
 15632     062B  1903               	btfsc	3,2
 15633     062C  00BD               	movwf	getMed@aux
 15634                           
 15635                           ;sensor.c: 162:         aux--;
 15636     062D  3001               	movlw	1
 15637     062E  02BD               	subwf	getMed@aux,f
 15638                           
 15639                           ;sensor.c: 163:     }
 15640     062F  3001               	movlw	1
 15641     0630  07BC               	addwf	getMed@i,f
 15642     0631  3008               	movlw	8
 15643     0632  023C               	subwf	getMed@i,w
 15644     0633  1C03               	skipc
 15645     0634  2E09               	goto	l5371
 15646                           
 15647                           ;sensor.c: 164:     data->med = buff/8;
 15648     0635  3000               	movlw	0
 15649     0636  00A3               	movwf	___aldiv@divisor+3
 15650     0637  3000               	movlw	0
 15651     0638  00A2               	movwf	___aldiv@divisor+2
 15652     0639  3000               	movlw	0
 15653     063A  00A1               	movwf	___aldiv@divisor+1
 15654     063B  3008               	movlw	8
 15655     063C  00A0               	movwf	___aldiv@divisor
 15656     063D  083B               	movf	getMed@buff+3,w
 15657     063E  00A7               	movwf	___aldiv@dividend+3
 15658     063F  083A               	movf	getMed@buff+2,w
 15659     0640  00A6               	movwf	___aldiv@dividend+2
 15660     0641  0839               	movf	getMed@buff+1,w
 15661     0642  00A5               	movwf	___aldiv@dividend+1
 15662     0643  0838               	movf	getMed@buff,w
 15663     0644  00A4               	movwf	___aldiv@dividend
 15664     0645  3185  2511         	fcall	___aldiv
 15665     0647  082E               	movf	getMed@data,w
 15666     0648  0086               	movwf	6
 15667     0649  082F               	movf	getMed@data+1,w
 15668     064A  0087               	movwf	7
 15669     064B  3154               	addfsr 1,20
 15670     064C  0820               	movf	?___aldiv,w
 15671     064D  3FC0               	movwi [0]fsr1
 15672     064E  0821               	movf	?___aldiv+1,w
 15673     064F  3FC1               	movwi [1]fsr1
 15674     0650  0008               	return
 15675     0651                     __end_of_getMed:
 15676                           
 15677                           	psect	text79
 15678     0511                     __ptext79:	
 15679 ;; *************** function ___aldiv *****************
 15680 ;; Defined at:
 15681 ;;		line 5 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/aldiv.c"
 15682 ;; Parameters:    Size  Location     Type
 15683 ;;  divisor         4    0[BANK0 ] long 
 15684 ;;  dividend        4    4[BANK0 ] long 
 15685 ;; Auto vars:     Size  Location     Type
 15686 ;;  quotient        4   10[BANK0 ] long 
 15687 ;;  sign            1    9[BANK0 ] unsigned char 
 15688 ;;  counter         1    8[BANK0 ] unsigned char 
 15689 ;; Return value:  Size  Location     Type
 15690 ;;                  4    0[BANK0 ] long 
 15691 ;; Registers used:
 15692 ;;		wreg, status,2, status,0
 15693 ;; Tracked objects:
 15694 ;;		On entry : 3F/0
 15695 ;;		On exit  : 3F/0
 15696 ;;		Unchanged: 0/0
 15697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15698 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15699 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15701 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15702 ;;Total ram usage:       14 bytes
 15703 ;; Hardware stack levels used: 1
 15704 ;; Hardware stack levels required when called: 4
 15705 ;; This function calls:
 15706 ;;		Nothing
 15707 ;; This function is called by:
 15708 ;;		_getMed
 15709 ;; This function uses a non-reentrant model
 15710 ;;
 15711                           
 15712     0511                     ___aldiv:	
 15713                           ;psect for function ___aldiv
 15714                           
 15715                           
 15716                           ;incstack = 0
 15717                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 15718     0511  01A9               	clrf	___aldiv@sign
 15719     0512  1FA3               	btfss	___aldiv@divisor+3,7
 15720     0513  2D21               	goto	l1518
 15721     0514  09A0               	comf	___aldiv@divisor,f
 15722     0515  09A1               	comf	___aldiv@divisor+1,f
 15723     0516  09A2               	comf	___aldiv@divisor+2,f
 15724     0517  09A3               	comf	___aldiv@divisor+3,f
 15725     0518  0AA0               	incf	___aldiv@divisor,f
 15726     0519  1903               	skipnz
 15727     051A  0AA1               	incf	___aldiv@divisor+1,f
 15728     051B  1903               	skipnz
 15729     051C  0AA2               	incf	___aldiv@divisor+2,f
 15730     051D  1903               	skipnz
 15731     051E  0AA3               	incf	___aldiv@divisor+3,f
 15732     051F  3001               	movlw	1
 15733     0520  00A9               	movwf	___aldiv@sign
 15734     0521                     l1518:
 15735     0521  1FA7               	btfss	___aldiv@dividend+3,7
 15736     0522  2D30               	goto	l5087
 15737     0523  09A4               	comf	___aldiv@dividend,f
 15738     0524  09A5               	comf	___aldiv@dividend+1,f
 15739     0525  09A6               	comf	___aldiv@dividend+2,f
 15740     0526  09A7               	comf	___aldiv@dividend+3,f
 15741     0527  0AA4               	incf	___aldiv@dividend,f
 15742     0528  1903               	skipnz
 15743     0529  0AA5               	incf	___aldiv@dividend+1,f
 15744     052A  1903               	skipnz
 15745     052B  0AA6               	incf	___aldiv@dividend+2,f
 15746     052C  1903               	skipnz
 15747     052D  0AA7               	incf	___aldiv@dividend+3,f
 15748     052E  3001               	movlw	1
 15749     052F  06A9               	xorwf	___aldiv@sign,f
 15750     0530                     l5087:
 15751     0530  3000               	movlw	0
 15752     0531  00AD               	movwf	___aldiv@quotient+3
 15753     0532  3000               	movlw	0
 15754     0533  00AC               	movwf	___aldiv@quotient+2
 15755     0534  3000               	movlw	0
 15756     0535  00AB               	movwf	___aldiv@quotient+1
 15757     0536  3000               	movlw	0
 15758     0537  00AA               	movwf	___aldiv@quotient
 15759     0538  0823               	movf	___aldiv@divisor+3,w
 15760     0539  0422               	iorwf	___aldiv@divisor+2,w
 15761     053A  0421               	iorwf	___aldiv@divisor+1,w
 15762     053B  0420               	iorwf	___aldiv@divisor,w
 15763     053C  1903               	skipnz
 15764     053D  2D77               	goto	l5109
 15765     053E  3001               	movlw	1
 15766     053F  00A8               	movwf	___aldiv@counter
 15767     0540                     l5095:
 15768     0540  1BA3               	btfsc	___aldiv@divisor+3,7
 15769     0541  2D4C               	goto	l5097
 15770     0542  3001               	movlw	1
 15771     0543                     u3015:
 15772     0543  35A0               	lslf	___aldiv@divisor,f
 15773     0544  0DA1               	rlf	___aldiv@divisor+1,f
 15774     0545  0DA2               	rlf	___aldiv@divisor+2,f
 15775     0546  0DA3               	rlf	___aldiv@divisor+3,f
 15776     0547  0B89               	decfsz	9,f
 15777     0548  2D43               	goto	u3015
 15778     0549  3001               	movlw	1
 15779     054A  07A8               	addwf	___aldiv@counter,f
 15780     054B  2D40               	goto	l5095
 15781     054C                     l5097:
 15782     054C  3001               	movlw	1
 15783     054D                     u3035:
 15784     054D  35AA               	lslf	___aldiv@quotient,f
 15785     054E  0DAB               	rlf	___aldiv@quotient+1,f
 15786     054F  0DAC               	rlf	___aldiv@quotient+2,f
 15787     0550  0DAD               	rlf	___aldiv@quotient+3,f
 15788     0551  0B89               	decfsz	9,f
 15789     0552  2D4D               	goto	u3035
 15790     0553  0823               	movf	___aldiv@divisor+3,w
 15791     0554  0227               	subwf	___aldiv@dividend+3,w
 15792     0555  1D03               	skipz
 15793     0556  2D61               	goto	u3045
 15794     0557  0822               	movf	___aldiv@divisor+2,w
 15795     0558  0226               	subwf	___aldiv@dividend+2,w
 15796     0559  1D03               	skipz
 15797     055A  2D61               	goto	u3045
 15798     055B  0821               	movf	___aldiv@divisor+1,w
 15799     055C  0225               	subwf	___aldiv@dividend+1,w
 15800     055D  1D03               	skipz
 15801     055E  2D61               	goto	u3045
 15802     055F  0820               	movf	___aldiv@divisor,w
 15803     0560  0224               	subwf	___aldiv@dividend,w
 15804     0561                     u3045:
 15805     0561  1C03               	skipc
 15806     0562  2D6C               	goto	l5105
 15807     0563  0820               	movf	___aldiv@divisor,w
 15808     0564  02A4               	subwf	___aldiv@dividend,f
 15809     0565  0821               	movf	___aldiv@divisor+1,w
 15810     0566  3BA5               	subwfb	___aldiv@dividend+1,f
 15811     0567  0822               	movf	___aldiv@divisor+2,w
 15812     0568  3BA6               	subwfb	___aldiv@dividend+2,f
 15813     0569  0823               	movf	___aldiv@divisor+3,w
 15814     056A  3BA7               	subwfb	___aldiv@dividend+3,f
 15815     056B  142A               	bsf	___aldiv@quotient,0
 15816     056C                     l5105:
 15817     056C  3001               	movlw	1
 15818     056D                     u3055:
 15819     056D  36A3               	lsrf	___aldiv@divisor+3,f
 15820     056E  0CA2               	rrf	___aldiv@divisor+2,f
 15821     056F  0CA1               	rrf	___aldiv@divisor+1,f
 15822     0570  0CA0               	rrf	___aldiv@divisor,f
 15823     0571  0B89               	decfsz	9,f
 15824     0572  2D6D               	goto	u3055
 15825     0573  3001               	movlw	1
 15826     0574  02A8               	subwf	___aldiv@counter,f
 15827     0575  1D03               	btfss	3,2
 15828     0576  2D4C               	goto	l5097
 15829     0577                     l5109:
 15830     0577  0829               	movf	___aldiv@sign,w
 15831     0578  1903               	btfsc	3,2
 15832     0579  2D85               	goto	l5113
 15833     057A  09AA               	comf	___aldiv@quotient,f
 15834     057B  09AB               	comf	___aldiv@quotient+1,f
 15835     057C  09AC               	comf	___aldiv@quotient+2,f
 15836     057D  09AD               	comf	___aldiv@quotient+3,f
 15837     057E  0AAA               	incf	___aldiv@quotient,f
 15838     057F  1903               	skipnz
 15839     0580  0AAB               	incf	___aldiv@quotient+1,f
 15840     0581  1903               	skipnz
 15841     0582  0AAC               	incf	___aldiv@quotient+2,f
 15842     0583  1903               	skipnz
 15843     0584  0AAD               	incf	___aldiv@quotient+3,f
 15844     0585                     l5113:
 15845     0585  082D               	movf	___aldiv@quotient+3,w
 15846     0586  00A3               	movwf	?___aldiv+3
 15847     0587  082C               	movf	___aldiv@quotient+2,w
 15848     0588  00A2               	movwf	?___aldiv+2
 15849     0589  082B               	movf	___aldiv@quotient+1,w
 15850     058A  00A1               	movwf	?___aldiv+1
 15851     058B  082A               	movf	___aldiv@quotient,w
 15852     058C  00A0               	movwf	?___aldiv
 15853     058D  0008               	return
 15854     058E                     __end_of___aldiv:
 15855                           
 15856                           	psect	text80
 15857     06F4                     __ptext80:	
 15858 ;; *************** function _getMax *****************
 15859 ;; Defined at:
 15860 ;;		line 110 in file "sensor.c"
 15861 ;; Parameters:    Size  Location     Type
 15862 ;;  data            2    4[COMMON] PTR struct .
 15863 ;;		 -> cons$sensor_config$addressI2C(1), battery$sensor_config$addressI2C(1), panel$sensor_config$addressI2C(1), 
 15864 ;; Auto vars:     Size  Location     Type
 15865 ;;  i               1    7[BANK0 ] unsigned char 
 15866 ;;  aux             1    8[BANK0 ] unsigned char 
 15867 ;; Return value:  Size  Location     Type
 15868 ;;                  1    wreg      void 
 15869 ;; Registers used:
 15870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15871 ;; Tracked objects:
 15872 ;;		On entry : 3F/0
 15873 ;;		On exit  : 3F/0
 15874 ;;		Unchanged: 0/0
 15875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15877 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15878 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;Total ram usage:       11 bytes
 15881 ;; Hardware stack levels used: 1
 15882 ;; Hardware stack levels required when called: 4
 15883 ;; This function calls:
 15884 ;;		Nothing
 15885 ;; This function is called by:
 15886 ;;		_getMetrics
 15887 ;;		_processCommand
 15888 ;; This function uses a non-reentrant model
 15889 ;;
 15890                           
 15891     06F4                     _getMax:	
 15892                           ;psect for function _getMax
 15893                           
 15894                           
 15895                           ;sensor.c: 110: void getMax(measure_data_t *data);sensor.c: 111: {;sensor.c: 112:     ui
      +                          nt8_t aux;;sensor.c: 113:     aux = data->pWrite;
 15896                           
 15897                           ;incstack = 0
 15898                           ; Regs used in _getMax: [wreg-fsr1h+status,2+status,0]
 15899     06F4  0874               	movf	getMax@data,w
 15900     06F5  0086               	movwf	6
 15901     06F6  0875               	movf	getMax@data+1,w
 15902     06F7  0087               	movwf	7
 15903     06F8  3156               	addfsr 1,22
 15904     06F9  0801               	movf	1,w
 15905     06FA  00A8               	movwf	getMax@aux
 15906                           
 15907                           ;sensor.c: 115:     for(uint8_t i=0; i<8; i++)
 15908     06FB  01A7               	clrf	getMax@i
 15909     06FC                     l5329:
 15910                           
 15911                           ;sensor.c: 116:     {;sensor.c: 117:         if(data->max < data->hist[aux])
 15912     06FC  0828               	movf	getMax@aux,w
 15913     06FD  00A0               	movwf	??_getMax
 15914     06FE  01A1               	clrf	??_getMax+1
 15915     06FF  35A0               	lslf	??_getMax,f
 15916     0700  0DA1               	rlf	??_getMax+1,f
 15917     0701  0820               	movf	??_getMax,w
 15918     0702  0774               	addwf	getMax@data,w
 15919     0703  0086               	movwf	6
 15920     0704  0821               	movf	??_getMax+1,w
 15921     0705  3D75               	addwfc	getMax@data+1,w
 15922     0706  0087               	movwf	7
 15923     0707  3F40               	moviw [0]fsr1
 15924     0708  00A2               	movwf	??_getMax+2
 15925     0709  3F41               	moviw [1]fsr1
 15926     070A  00A3               	movwf	??_getMax+3
 15927     070B  0874               	movf	getMax@data,w
 15928     070C  0086               	movwf	6
 15929     070D  0875               	movf	getMax@data+1,w
 15930     070E  0087               	movwf	7
 15931     070F  3150               	addfsr 1,16
 15932     0710  3F40               	moviw [0]fsr1
 15933     0711  00A4               	movwf	??_getMax+4
 15934     0712  3F41               	moviw [1]fsr1
 15935     0713  00A5               	movwf	??_getMax+5
 15936     0714  0825               	movf	??_getMax+5,w
 15937     0715  3A80               	xorlw	128
 15938     0716  00A6               	movwf	??_getMax+6
 15939     0717  0823               	movf	??_getMax+3,w
 15940     0718  3A80               	xorlw	128
 15941     0719  0226               	subwf	??_getMax+6,w
 15942     071A  1D03               	skipz
 15943     071B  2F1E               	goto	u3175
 15944     071C  0822               	movf	??_getMax+2,w
 15945     071D  0224               	subwf	??_getMax+4,w
 15946     071E                     u3175:
 15947     071E  1803               	skipnc
 15948     071F  2F35               	goto	l5333
 15949                           
 15950                           ;sensor.c: 118:         {;sensor.c: 119:             data->max = data->hist[aux];
 15951     0720  0140               	movlb	0	; select bank0
 15952     0721  0828               	movf	getMax@aux,w
 15953     0722  00A0               	movwf	??_getMax
 15954     0723  01A1               	clrf	??_getMax+1
 15955     0724  35A0               	lslf	??_getMax,f
 15956     0725  0DA1               	rlf	??_getMax+1,f
 15957     0726  0820               	movf	??_getMax,w
 15958     0727  0774               	addwf	getMax@data,w
 15959     0728  0086               	movwf	6
 15960     0729  0821               	movf	??_getMax+1,w
 15961     072A  3D75               	addwfc	getMax@data+1,w
 15962     072B  0087               	movwf	7
 15963     072C  0874               	movf	getMax@data,w
 15964     072D  0084               	movwf	4
 15965     072E  0875               	movf	getMax@data+1,w
 15966     072F  0085               	movwf	5
 15967     0730  3110               	addfsr 0,16
 15968     0731  3F40               	moviw [0]fsr1
 15969     0732  3F80               	movwi [0]fsr0
 15970     0733  3F41               	moviw [1]fsr1
 15971     0734  3F81               	movwi [1]fsr0
 15972     0735                     l5333:
 15973                           
 15974                           ;sensor.c: 121:         if(aux == 0)
 15975     0735  0140               	movlb	0	; select bank0
 15976     0736  0828               	movf	getMax@aux,w
 15977                           
 15978                           ;sensor.c: 122:         {;sensor.c: 123:             aux = 8;
 15979     0737  3008               	movlw	8
 15980     0738  1903               	btfsc	3,2
 15981     0739  00A8               	movwf	getMax@aux
 15982                           
 15983                           ;sensor.c: 125:         aux--;
 15984     073A  3001               	movlw	1
 15985     073B  02A8               	subwf	getMax@aux,f
 15986                           
 15987                           ;sensor.c: 126:     }
 15988     073C  3001               	movlw	1
 15989     073D  07A7               	addwf	getMax@i,f
 15990     073E  3008               	movlw	8
 15991     073F  0227               	subwf	getMax@i,w
 15992     0740  1803               	btfsc	3,0
 15993     0741  0008               	return
 15994     0742  2EFC               	goto	l5329
 15995     0743                     __end_of_getMax:
 15996                           
 15997                           	psect	text81
 15998     08BA                     __ptext81:	
 15999 ;; *************** function _TMR4_Stop *****************
 16000 ;; Defined at:
 16001 ;;		line 120 in file "mcc_generated_files/tmr4.c"
 16002 ;; Parameters:    Size  Location     Type
 16003 ;;		None
 16004 ;; Auto vars:     Size  Location     Type
 16005 ;;		None
 16006 ;; Return value:  Size  Location     Type
 16007 ;;                  1    wreg      void 
 16008 ;; Registers used:
 16009 ;;		None
 16010 ;; Tracked objects:
 16011 ;;		On entry : 3F/0
 16012 ;;		On exit  : 3F/5
 16013 ;;		Unchanged: 0/0
 16014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16019 ;;Total ram usage:        0 bytes
 16020 ;; Hardware stack levels used: 1
 16021 ;; Hardware stack levels required when called: 4
 16022 ;; This function calls:
 16023 ;;		Nothing
 16024 ;; This function is called by:
 16025 ;;		_main
 16026 ;; This function uses a non-reentrant model
 16027 ;;
 16028                           
 16029     08BA                     _TMR4_Stop:	
 16030                           ;psect for function _TMR4_Stop
 16031                           
 16032                           
 16033                           ;mcc_generated_files/tmr4.c: 123:     T4CONbits.TMR4ON = 0;
 16034                           
 16035                           ;incstack = 0
 16036                           ; Regs used in _TMR4_Stop: []
 16037     08BA  0145               	movlb	5	; select bank5
 16038     08BB  1394               	bcf	20,7	;volatile
 16039     08BC  0008               	return
 16040     08BD                     __end_of_TMR4_Stop:
 16041                           
 16042                           	psect	text82
 16043     08B7                     __ptext82:	
 16044 ;; *************** function _TMR4_Start *****************
 16045 ;; Defined at:
 16046 ;;		line 109 in file "mcc_generated_files/tmr4.c"
 16047 ;; Parameters:    Size  Location     Type
 16048 ;;		None
 16049 ;; Auto vars:     Size  Location     Type
 16050 ;;		None
 16051 ;; Return value:  Size  Location     Type
 16052 ;;                  1    wreg      void 
 16053 ;; Registers used:
 16054 ;;		None
 16055 ;; Tracked objects:
 16056 ;;		On entry : 3F/0
 16057 ;;		On exit  : 3F/5
 16058 ;;		Unchanged: 0/0
 16059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16064 ;;Total ram usage:        0 bytes
 16065 ;; Hardware stack levels used: 1
 16066 ;; Hardware stack levels required when called: 4
 16067 ;; This function calls:
 16068 ;;		Nothing
 16069 ;; This function is called by:
 16070 ;;		_main
 16071 ;; This function uses a non-reentrant model
 16072 ;;
 16073                           
 16074     08B7                     _TMR4_Start:	
 16075                           ;psect for function _TMR4_Start
 16076                           
 16077                           
 16078                           ;mcc_generated_files/tmr4.c: 112:     T4CONbits.TMR4ON = 1;
 16079                           
 16080                           ;incstack = 0
 16081                           ; Regs used in _TMR4_Start: []
 16082     08B7  0145               	movlb	5	; select bank5
 16083     08B8  1794               	bsf	20,7	;volatile
 16084     08B9  0008               	return
 16085     08BA                     __end_of_TMR4_Start:
 16086                           
 16087                           	psect	text83
 16088     08A9                     __ptext83:	
 16089 ;; *************** function _TMR2_Stop *****************
 16090 ;; Defined at:
 16091 ;;		line 120 in file "mcc_generated_files/tmr2.c"
 16092 ;; Parameters:    Size  Location     Type
 16093 ;;		None
 16094 ;; Auto vars:     Size  Location     Type
 16095 ;;		None
 16096 ;; Return value:  Size  Location     Type
 16097 ;;                  1    wreg      void 
 16098 ;; Registers used:
 16099 ;;		None
 16100 ;; Tracked objects:
 16101 ;;		On entry : 3F/5
 16102 ;;		On exit  : 3F/5
 16103 ;;		Unchanged: 0/0
 16104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;Total ram usage:        0 bytes
 16110 ;; Hardware stack levels used: 1
 16111 ;; Hardware stack levels required when called: 4
 16112 ;; This function calls:
 16113 ;;		Nothing
 16114 ;; This function is called by:
 16115 ;;		_main
 16116 ;; This function uses a non-reentrant model
 16117 ;;
 16118                           
 16119     08A9                     _TMR2_Stop:	
 16120                           ;psect for function _TMR2_Stop
 16121                           
 16122                           
 16123                           ;mcc_generated_files/tmr2.c: 123:     T2CONbits.TMR2ON = 0;
 16124                           
 16125                           ;incstack = 0
 16126                           ; Regs used in _TMR2_Stop: []
 16127     08A9  138E               	bcf	14,7	;volatile
 16128     08AA  0008               	return
 16129     08AB                     __end_of_TMR2_Stop:
 16130                           
 16131                           	psect	text84
 16132     08A7                     __ptext84:	
 16133 ;; *************** function _TMR2_Start *****************
 16134 ;; Defined at:
 16135 ;;		line 109 in file "mcc_generated_files/tmr2.c"
 16136 ;; Parameters:    Size  Location     Type
 16137 ;;		None
 16138 ;; Auto vars:     Size  Location     Type
 16139 ;;		None
 16140 ;; Return value:  Size  Location     Type
 16141 ;;                  1    wreg      void 
 16142 ;; Registers used:
 16143 ;;		None
 16144 ;; Tracked objects:
 16145 ;;		On entry : 3F/5
 16146 ;;		On exit  : 3F/5
 16147 ;;		Unchanged: 0/0
 16148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16153 ;;Total ram usage:        0 bytes
 16154 ;; Hardware stack levels used: 1
 16155 ;; Hardware stack levels required when called: 4
 16156 ;; This function calls:
 16157 ;;		Nothing
 16158 ;; This function is called by:
 16159 ;;		_main
 16160 ;; This function uses a non-reentrant model
 16161 ;;
 16162                           
 16163     08A7                     _TMR2_Start:	
 16164                           ;psect for function _TMR2_Start
 16165                           
 16166                           
 16167                           ;mcc_generated_files/tmr2.c: 112:     T2CONbits.TMR2ON = 1;
 16168                           
 16169                           ;incstack = 0
 16170                           ; Regs used in _TMR2_Start: []
 16171     08A7  178E               	bsf	14,7	;volatile
 16172     08A8  0008               	return
 16173     08A9                     __end_of_TMR2_Start:
 16174                           
 16175                           	psect	text85
 16176     0B83                     __ptext85:	
 16177 ;; *************** function _SYSTEM_Initialize *****************
 16178 ;; Defined at:
 16179 ;;		line 50 in file "mcc_generated_files/mcc.c"
 16180 ;; Parameters:    Size  Location     Type
 16181 ;;		None
 16182 ;; Auto vars:     Size  Location     Type
 16183 ;;		None
 16184 ;; Return value:  Size  Location     Type
 16185 ;;                  1    wreg      void 
 16186 ;; Registers used:
 16187 ;;		wreg, status,2, status,0, pclath, cstack
 16188 ;; Tracked objects:
 16189 ;;		On entry : B3F/0
 16190 ;;		On exit  : 3F/E
 16191 ;;		Unchanged: 0/0
 16192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16197 ;;Total ram usage:        0 bytes
 16198 ;; Hardware stack levels used: 1
 16199 ;; Hardware stack levels required when called: 6
 16200 ;; This function calls:
 16201 ;;		_CMP1_Initialize
 16202 ;;		_DAC1_Initialize
 16203 ;;		_EUSART1_Initialize
 16204 ;;		_I2C1_Initialize
 16205 ;;		_OSCILLATOR_Initialize
 16206 ;;		_PIN_MANAGER_Initialize
 16207 ;;		_PMD_Initialize
 16208 ;;		_TMR0_Initialize
 16209 ;;		_TMR2_Initialize
 16210 ;;		_TMR4_Initialize
 16211 ;; This function is called by:
 16212 ;;		_main
 16213 ;; This function uses a non-reentrant model
 16214 ;;
 16215                           
 16216     0B83                     _SYSTEM_Initialize:	
 16217                           ;psect for function _SYSTEM_Initialize
 16218                           
 16219                           
 16220                           ;mcc_generated_files/mcc.c: 52:     PMD_Initialize();
 16221                           
 16222                           ;incstack = 0
 16223                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 16224     0B83  318A  2212  318B   	fcall	_PMD_Initialize
 16225                           
 16226                           ;mcc_generated_files/mcc.c: 53:     I2C1_Initialize();
 16227     0B86  3189  218A  318B   	fcall	_I2C1_Initialize
 16228                           
 16229                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 16230     0B89  318C  2472  318B   	fcall	_PIN_MANAGER_Initialize
 16231                           
 16232                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 16233     0B8C  3189  2194  318B   	fcall	_OSCILLATOR_Initialize
 16234                           
 16235                           ;mcc_generated_files/mcc.c: 56:     CMP1_Initialize();
 16236     0B8F  318A  2203  318B   	fcall	_CMP1_Initialize
 16237                           
 16238                           ;mcc_generated_files/mcc.c: 57:     TMR4_Initialize();
 16239     0B92  318A  22AB  318B   	fcall	_TMR4_Initialize
 16240                           
 16241                           ;mcc_generated_files/mcc.c: 58:     DAC1_Initialize();
 16242     0B95  3189  212F  318B   	fcall	_DAC1_Initialize
 16243                           
 16244                           ;mcc_generated_files/mcc.c: 59:     TMR2_Initialize();
 16245     0B98  318B  2300  318B   	fcall	_TMR2_Initialize
 16246                           
 16247                           ;mcc_generated_files/mcc.c: 60:     TMR0_Initialize();
 16248     0B9B  318B  2331  318B   	fcall	_TMR0_Initialize
 16249                           
 16250                           ;mcc_generated_files/mcc.c: 61:     EUSART1_Initialize();
 16251     0B9E  318D  2570         	fcall	_EUSART1_Initialize
 16252     0BA0  0008               	return
 16253     0BA1                     __end_of_SYSTEM_Initialize:
 16254                           
 16255                           	psect	text86
 16256     0AAB                     __ptext86:	
 16257 ;; *************** function _TMR4_Initialize *****************
 16258 ;; Defined at:
 16259 ;;		line 65 in file "mcc_generated_files/tmr4.c"
 16260 ;; Parameters:    Size  Location     Type
 16261 ;;		None
 16262 ;; Auto vars:     Size  Location     Type
 16263 ;;		None
 16264 ;; Return value:  Size  Location     Type
 16265 ;;                  1    wreg      void 
 16266 ;; Registers used:
 16267 ;;		wreg, status,2, status,0, pclath, cstack
 16268 ;; Tracked objects:
 16269 ;;		On entry : B3F/E
 16270 ;;		On exit  : B3F/5
 16271 ;;		Unchanged: B00/0
 16272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;Total ram usage:        0 bytes
 16278 ;; Hardware stack levels used: 1
 16279 ;; Hardware stack levels required when called: 5
 16280 ;; This function calls:
 16281 ;;		_TMR4_SetInterruptHandler
 16282 ;; This function is called by:
 16283 ;;		_SYSTEM_Initialize
 16284 ;; This function uses a non-reentrant model
 16285 ;;
 16286                           
 16287     0AAB                     _TMR4_Initialize:	
 16288                           ;psect for function _TMR4_Initialize
 16289                           
 16290                           
 16291                           ;mcc_generated_files/tmr4.c: 70:     T4CLKCON = 0x04;
 16292                           
 16293                           ;incstack = 0
 16294                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 16295     0AAB  3004               	movlw	4
 16296     0AAC  0145               	movlb	5	; select bank5
 16297     0AAD  0096               	movwf	22	;volatile
 16298                           
 16299                           ;mcc_generated_files/tmr4.c: 73:     T4HLT = 0x00;
 16300     0AAE  0195               	clrf	21	;volatile
 16301                           
 16302                           ;mcc_generated_files/tmr4.c: 76:     T4RST = 0x00;
 16303     0AAF  0197               	clrf	23	;volatile
 16304                           
 16305                           ;mcc_generated_files/tmr4.c: 79:     T4PR = 0x78;
 16306     0AB0  3078               	movlw	120
 16307     0AB1  0093               	movwf	19	;volatile
 16308                           
 16309                           ;mcc_generated_files/tmr4.c: 82:     T4TMR = 0x00;
 16310     0AB2  0192               	clrf	18	;volatile
 16311                           
 16312                           ;mcc_generated_files/tmr4.c: 85:     PIR4bits.TMR4IF = 0;
 16313     0AB3  014E               	movlb	14	; select bank14
 16314     0AB4  1190               	bcf	16,3	;volatile
 16315                           
 16316                           ;mcc_generated_files/tmr4.c: 88:     PIE4bits.TMR4IE = 1;
 16317     0AB5  159A               	bsf	26,3	;volatile
 16318                           
 16319                           ;mcc_generated_files/tmr4.c: 91:     TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandl
      +                          er);
 16320     0AB6  30A5               	movlw	low _TMR4_DefaultInterruptHandler
 16321     0AB7  00F4               	movwf	TMR4_SetInterruptHandler@InterruptHandler
 16322     0AB8  3008               	movlw	high _TMR4_DefaultInterruptHandler
 16323     0AB9  00F5               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
 16324     0ABA  3189  214D         	fcall	_TMR4_SetInterruptHandler
 16325                           
 16326                           ;mcc_generated_files/tmr4.c: 94:     T4CON = 0x79;
 16327     0ABC  3079               	movlw	121
 16328     0ABD  0145               	movlb	5	; select bank5
 16329     0ABE  0094               	movwf	20	;volatile
 16330     0ABF  0008               	return
 16331     0AC0                     __end_of_TMR4_Initialize:
 16332                           
 16333                           	psect	text87
 16334     094D                     __ptext87:	
 16335 ;; *************** function _TMR4_SetInterruptHandler *****************
 16336 ;; Defined at:
 16337 ;;		line 179 in file "mcc_generated_files/tmr4.c"
 16338 ;; Parameters:    Size  Location     Type
 16339 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
 16340 ;;		 -> TMR4_DefaultInterruptHandler(1), 
 16341 ;; Auto vars:     Size  Location     Type
 16342 ;;		None
 16343 ;; Return value:  Size  Location     Type
 16344 ;;                  1    wreg      void 
 16345 ;; Registers used:
 16346 ;;		wreg
 16347 ;; Tracked objects:
 16348 ;;		On entry : B3F/E
 16349 ;;		On exit  : B3F/0
 16350 ;;		Unchanged: B00/0
 16351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16352 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;Total ram usage:        2 bytes
 16357 ;; Hardware stack levels used: 1
 16358 ;; Hardware stack levels required when called: 4
 16359 ;; This function calls:
 16360 ;;		Nothing
 16361 ;; This function is called by:
 16362 ;;		_TMR4_Initialize
 16363 ;; This function uses a non-reentrant model
 16364 ;;
 16365                           
 16366     094D                     _TMR4_SetInterruptHandler:	
 16367                           ;psect for function _TMR4_SetInterruptHandler
 16368                           
 16369                           
 16370                           ;mcc_generated_files/tmr4.c: 180:     TMR4_InterruptHandler = InterruptHandler;
 16371                           
 16372                           ;incstack = 0
 16373                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
 16374     094D  0875               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
 16375     094E  0140               	movlb	0	; select bank0
 16376     094F  00E1               	movwf	_TMR4_InterruptHandler+1
 16377     0950  0874               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
 16378     0951  00E0               	movwf	_TMR4_InterruptHandler
 16379     0952  0008               	return
 16380     0953                     __end_of_TMR4_SetInterruptHandler:
 16381                           
 16382                           	psect	text88
 16383     0B00                     __ptext88:	
 16384 ;; *************** function _TMR2_Initialize *****************
 16385 ;; Defined at:
 16386 ;;		line 65 in file "mcc_generated_files/tmr2.c"
 16387 ;; Parameters:    Size  Location     Type
 16388 ;;		None
 16389 ;; Auto vars:     Size  Location     Type
 16390 ;;		None
 16391 ;; Return value:  Size  Location     Type
 16392 ;;                  1    wreg      void 
 16393 ;; Registers used:
 16394 ;;		wreg, status,2, status,0, pclath, cstack
 16395 ;; Tracked objects:
 16396 ;;		On entry : B3F/12
 16397 ;;		On exit  : B3F/5
 16398 ;;		Unchanged: B00/0
 16399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;Total ram usage:        0 bytes
 16405 ;; Hardware stack levels used: 1
 16406 ;; Hardware stack levels required when called: 5
 16407 ;; This function calls:
 16408 ;;		_TMR2_SetInterruptHandler
 16409 ;; This function is called by:
 16410 ;;		_SYSTEM_Initialize
 16411 ;; This function uses a non-reentrant model
 16412 ;;
 16413                           
 16414     0B00                     _TMR2_Initialize:	
 16415                           ;psect for function _TMR2_Initialize
 16416                           
 16417                           
 16418                           ;mcc_generated_files/tmr2.c: 70:     T2CLKCON = 0x04;
 16419                           
 16420                           ;incstack = 0
 16421                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 16422     0B00  3004               	movlw	4
 16423     0B01  0145               	movlb	5	; select bank5
 16424     0B02  0090               	movwf	16	;volatile
 16425                           
 16426                           ;mcc_generated_files/tmr2.c: 73:     T2HLT = 0x11;
 16427     0B03  3011               	movlw	17
 16428     0B04  008F               	movwf	15	;volatile
 16429                           
 16430                           ;mcc_generated_files/tmr2.c: 76:     T2RST = 0x02;
 16431     0B05  3002               	movlw	2
 16432     0B06  0091               	movwf	17	;volatile
 16433                           
 16434                           ;mcc_generated_files/tmr2.c: 79:     T2PR = 0x2F;
 16435     0B07  302F               	movlw	47
 16436     0B08  008D               	movwf	13	;volatile
 16437                           
 16438                           ;mcc_generated_files/tmr2.c: 82:     T2TMR = 0x00;
 16439     0B09  018C               	clrf	12	;volatile
 16440                           
 16441                           ;mcc_generated_files/tmr2.c: 85:     PIR4bits.TMR2IF = 0;
 16442     0B0A  014E               	movlb	14	; select bank14
 16443     0B0B  1090               	bcf	16,1	;volatile
 16444                           
 16445                           ;mcc_generated_files/tmr2.c: 88:     PIE4bits.TMR2IE = 1;
 16446     0B0C  149A               	bsf	26,1	;volatile
 16447                           
 16448                           ;mcc_generated_files/tmr2.c: 91:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
 16449     0B0D  30A3               	movlw	low _TMR2_DefaultInterruptHandler
 16450     0B0E  00F4               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 16451     0B0F  3008               	movlw	high _TMR2_DefaultInterruptHandler
 16452     0B10  00F5               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 16453     0B11  3189  2147         	fcall	_TMR2_SetInterruptHandler
 16454                           
 16455                           ;mcc_generated_files/tmr2.c: 94:     T2CON = 0x60;
 16456     0B13  3060               	movlw	96
 16457     0B14  0145               	movlb	5	; select bank5
 16458     0B15  008E               	movwf	14	;volatile
 16459     0B16  0008               	return
 16460     0B17                     __end_of_TMR2_Initialize:
 16461                           
 16462                           	psect	text89
 16463     0947                     __ptext89:	
 16464 ;; *************** function _TMR2_SetInterruptHandler *****************
 16465 ;; Defined at:
 16466 ;;		line 179 in file "mcc_generated_files/tmr2.c"
 16467 ;; Parameters:    Size  Location     Type
 16468 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
 16469 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 16470 ;; Auto vars:     Size  Location     Type
 16471 ;;		None
 16472 ;; Return value:  Size  Location     Type
 16473 ;;                  1    wreg      void 
 16474 ;; Registers used:
 16475 ;;		wreg
 16476 ;; Tracked objects:
 16477 ;;		On entry : B3F/E
 16478 ;;		On exit  : B3F/0
 16479 ;;		Unchanged: B00/0
 16480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16481 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16484 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16485 ;;Total ram usage:        2 bytes
 16486 ;; Hardware stack levels used: 1
 16487 ;; Hardware stack levels required when called: 4
 16488 ;; This function calls:
 16489 ;;		Nothing
 16490 ;; This function is called by:
 16491 ;;		_TMR2_Initialize
 16492 ;; This function uses a non-reentrant model
 16493 ;;
 16494                           
 16495     0947                     _TMR2_SetInterruptHandler:	
 16496                           ;psect for function _TMR2_SetInterruptHandler
 16497                           
 16498                           
 16499                           ;mcc_generated_files/tmr2.c: 180:     TMR2_InterruptHandler = InterruptHandler;
 16500                           
 16501                           ;incstack = 0
 16502                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 16503     0947  0875               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 16504     0948  0140               	movlb	0	; select bank0
 16505     0949  00E3               	movwf	_TMR2_InterruptHandler+1
 16506     094A  0874               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 16507     094B  00E2               	movwf	_TMR2_InterruptHandler
 16508     094C  0008               	return
 16509     094D                     __end_of_TMR2_SetInterruptHandler:
 16510                           
 16511                           	psect	text90
 16512     0B31                     __ptext90:	
 16513 ;; *************** function _TMR0_Initialize *****************
 16514 ;; Defined at:
 16515 ;;		line 66 in file "mcc_generated_files/tmr0.c"
 16516 ;; Parameters:    Size  Location     Type
 16517 ;;		None
 16518 ;; Auto vars:     Size  Location     Type
 16519 ;;		None
 16520 ;; Return value:  Size  Location     Type
 16521 ;;                  1    wreg      void 
 16522 ;; Registers used:
 16523 ;;		wreg, status,2, status,0, pclath, cstack
 16524 ;; Tracked objects:
 16525 ;;		On entry : B3F/5
 16526 ;;		On exit  : 3F/B
 16527 ;;		Unchanged: 0/0
 16528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16533 ;;Total ram usage:        0 bytes
 16534 ;; Hardware stack levels used: 1
 16535 ;; Hardware stack levels required when called: 5
 16536 ;; This function calls:
 16537 ;;		_TMR0_SetInterruptHandler
 16538 ;; This function is called by:
 16539 ;;		_SYSTEM_Initialize
 16540 ;; This function uses a non-reentrant model
 16541 ;;
 16542                           
 16543     0B31                     _TMR0_Initialize:	
 16544                           ;psect for function _TMR0_Initialize
 16545                           
 16546                           
 16547                           ;mcc_generated_files/tmr0.c: 71:     T0CON1 = 0x48;
 16548                           
 16549                           ;incstack = 0
 16550                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 16551     0B31  3048               	movlw	72
 16552     0B32  014B               	movlb	11	; select bank11
 16553     0B33  009F               	movwf	31	;volatile
 16554                           
 16555                           ;mcc_generated_files/tmr0.c: 74:     TMR0H = 0xFF;
 16556     0B34  30FF               	movlw	255
 16557     0B35  009D               	movwf	29	;volatile
 16558                           
 16559                           ;mcc_generated_files/tmr0.c: 77:     TMR0L = 0xCD;
 16560     0B36  30CD               	movlw	205
 16561     0B37  009C               	movwf	28	;volatile
 16562                           
 16563                           ;mcc_generated_files/tmr0.c: 80:     timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 16564     0B38  081D               	movf	29,w	;volatile
 16565     0B39  0140               	movlb	0	; select bank0
 16566     0B3A  00E5               	movwf	_timer0ReloadVal16bit+1	;volatile
 16567     0B3B  014B               	movlb	11	; select bank11
 16568     0B3C  081C               	movf	28,w	;volatile
 16569     0B3D  0140               	movlb	0	; select bank0
 16570     0B3E  00E4               	movwf	_timer0ReloadVal16bit	;volatile
 16571                           
 16572                           ;mcc_generated_files/tmr0.c: 83:     PIR0bits.TMR0IF = 0;
 16573     0B3F  014E               	movlb	14	; select bank14
 16574     0B40  128C               	bcf	12,5	;volatile
 16575                           
 16576                           ;mcc_generated_files/tmr0.c: 86:     PIE0bits.TMR0IE = 1;
 16577     0B41  1696               	bsf	22,5	;volatile
 16578                           
 16579                           ;mcc_generated_files/tmr0.c: 89:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 16580     0B42  30B4               	movlw	low _TMR0_DefaultInterruptHandler
 16581     0B43  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 16582     0B44  3008               	movlw	high _TMR0_DefaultInterruptHandler
 16583     0B45  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 16584     0B46  3189  2141         	fcall	_TMR0_SetInterruptHandler
 16585                           
 16586                           ;mcc_generated_files/tmr0.c: 92:     T0CON0 = 0x90;
 16587     0B48  3090               	movlw	144
 16588     0B49  014B               	movlb	11	; select bank11
 16589     0B4A  009E               	movwf	30	;volatile
 16590     0B4B  0008               	return
 16591     0B4C                     __end_of_TMR0_Initialize:
 16592                           
 16593                           	psect	text91
 16594     0941                     __ptext91:	
 16595 ;; *************** function _TMR0_SetInterruptHandler *****************
 16596 ;; Defined at:
 16597 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 16598 ;; Parameters:    Size  Location     Type
 16599 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
 16600 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 16601 ;; Auto vars:     Size  Location     Type
 16602 ;;		None
 16603 ;; Return value:  Size  Location     Type
 16604 ;;                  1    wreg      void 
 16605 ;; Registers used:
 16606 ;;		wreg
 16607 ;; Tracked objects:
 16608 ;;		On entry : B3F/E
 16609 ;;		On exit  : B3F/0
 16610 ;;		Unchanged: B00/0
 16611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;Total ram usage:        2 bytes
 16617 ;; Hardware stack levels used: 1
 16618 ;; Hardware stack levels required when called: 4
 16619 ;; This function calls:
 16620 ;;		Nothing
 16621 ;; This function is called by:
 16622 ;;		_TMR0_Initialize
 16623 ;; This function uses a non-reentrant model
 16624 ;;
 16625                           
 16626     0941                     _TMR0_SetInterruptHandler:	
 16627                           ;psect for function _TMR0_SetInterruptHandler
 16628                           
 16629                           
 16630                           ;mcc_generated_files/tmr0.c: 152:     TMR0_InterruptHandler = InterruptHandler;
 16631                           
 16632                           ;incstack = 0
 16633                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 16634     0941  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 16635     0942  0140               	movlb	0	; select bank0
 16636     0943  00DF               	movwf	_TMR0_InterruptHandler+1
 16637     0944  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 16638     0945  00DE               	movwf	_TMR0_InterruptHandler
 16639     0946  0008               	return
 16640     0947                     __end_of_TMR0_SetInterruptHandler:
 16641                           
 16642                           	psect	text92
 16643     0A12                     __ptext92:	
 16644 ;; *************** function _PMD_Initialize *****************
 16645 ;; Defined at:
 16646 ;;		line 80 in file "mcc_generated_files/mcc.c"
 16647 ;; Parameters:    Size  Location     Type
 16648 ;;		None
 16649 ;; Auto vars:     Size  Location     Type
 16650 ;;		None
 16651 ;; Return value:  Size  Location     Type
 16652 ;;                  1    wreg      void 
 16653 ;; Registers used:
 16654 ;;		status,2
 16655 ;; Tracked objects:
 16656 ;;		On entry : B3F/0
 16657 ;;		On exit  : B3F/F
 16658 ;;		Unchanged: B00/0
 16659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16664 ;;Total ram usage:        0 bytes
 16665 ;; Hardware stack levels used: 1
 16666 ;; Hardware stack levels required when called: 4
 16667 ;; This function calls:
 16668 ;;		Nothing
 16669 ;; This function is called by:
 16670 ;;		_SYSTEM_Initialize
 16671 ;; This function uses a non-reentrant model
 16672 ;;
 16673                           
 16674     0A12                     _PMD_Initialize:	
 16675                           ;psect for function _PMD_Initialize
 16676                           
 16677                           
 16678                           ;mcc_generated_files/mcc.c: 83:     PMD0 = 0x47;
 16679                           
 16680                           ;incstack = 0
 16681                           ; Regs used in _PMD_Initialize: [status,2]
 16682     0A12  3047               	movlw	71
 16683     0A13  014F               	movlb	15	; select bank15
 16684     0A14  0096               	movwf	22	;volatile
 16685                           
 16686                           ;mcc_generated_files/mcc.c: 85:     PMD1 = 0x6A;
 16687     0A15  306A               	movlw	106
 16688     0A16  0097               	movwf	23	;volatile
 16689                           
 16690                           ;mcc_generated_files/mcc.c: 87:     PMD2 = 0x80;
 16691     0A17  3080               	movlw	128
 16692     0A18  0098               	movwf	24	;volatile
 16693                           
 16694                           ;mcc_generated_files/mcc.c: 89:     PMD3 = 0x25;
 16695     0A19  3025               	movlw	37
 16696     0A1A  0099               	movwf	25	;volatile
 16697                           
 16698                           ;mcc_generated_files/mcc.c: 91:     PMD4 = 0x6F;
 16699     0A1B  306F               	movlw	111
 16700     0A1C  009A               	movwf	26	;volatile
 16701                           
 16702                           ;mcc_generated_files/mcc.c: 93:     PMD5 = 0x60;
 16703     0A1D  3060               	movlw	96
 16704     0A1E  009B               	movwf	27	;volatile
 16705                           
 16706                           ;mcc_generated_files/mcc.c: 95:     PMD6 = 0x00;
 16707     0A1F  019C               	clrf	28	;volatile
 16708                           
 16709                           ;mcc_generated_files/mcc.c: 97:     PMD7 = 0x3F;
 16710     0A20  303F               	movlw	63
 16711     0A21  009D               	movwf	29	;volatile
 16712     0A22  0008               	return
 16713     0A23                     __end_of_PMD_Initialize:
 16714                           
 16715                           	psect	text93
 16716     0C72                     __ptext93:	
 16717 ;; *************** function _PIN_MANAGER_Initialize *****************
 16718 ;; Defined at:
 16719 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 16720 ;; Parameters:    Size  Location     Type
 16721 ;;		None
 16722 ;; Auto vars:     Size  Location     Type
 16723 ;;		None
 16724 ;; Return value:  Size  Location     Type
 16725 ;;                  1    wreg      void 
 16726 ;; Registers used:
 16727 ;;		status,2
 16728 ;; Tracked objects:
 16729 ;;		On entry : B3F/3
 16730 ;;		On exit  : B3F/3D
 16731 ;;		Unchanged: B00/0
 16732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16737 ;;Total ram usage:        0 bytes
 16738 ;; Hardware stack levels used: 1
 16739 ;; Hardware stack levels required when called: 4
 16740 ;; This function calls:
 16741 ;;		Nothing
 16742 ;; This function is called by:
 16743 ;;		_SYSTEM_Initialize
 16744 ;; This function uses a non-reentrant model
 16745 ;;
 16746                           
 16747     0C72                     _PIN_MANAGER_Initialize:	
 16748                           ;psect for function _PIN_MANAGER_Initialize
 16749                           
 16750                           
 16751                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 16752                           
 16753                           ;incstack = 0
 16754                           ; Regs used in _PIN_MANAGER_Initialize: [status,2]
 16755     0C72  0140               	movlb	0	; select bank0
 16756     0C73  0198               	clrf	24	;volatile
 16757                           
 16758                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
 16759     0C74  019A               	clrf	26	;volatile
 16760                           
 16761                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x0C;
 16762     0C75  300C               	movlw	12
 16763     0C76  0092               	movwf	18	;volatile
 16764                           
 16765                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x27;
 16766     0C77  3027               	movlw	39
 16767     0C78  0094               	movwf	20	;volatile
 16768                           
 16769                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x04;
 16770     0C79  3004               	movlw	4
 16771     0C7A  017E               	movlb	62	; select bank62
 16772     0C7B  00CE               	movwf	78	;volatile
 16773                           
 16774                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x04;
 16775     0C7C  3004               	movlw	4
 16776     0C7D  00B8               	movwf	56	;volatile
 16777                           
 16778                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
 16779     0C7E  01B9               	clrf	57	;volatile
 16780                           
 16781                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
 16782     0C7F  01CF               	clrf	79	;volatile
 16783                           
 16784                           ;mcc_generated_files/pin_manager.c: 84:     ODCONA = 0x00;
 16785     0C80  01BA               	clrf	58	;volatile
 16786                           
 16787                           ;mcc_generated_files/pin_manager.c: 85:     ODCONC = 0x00;
 16788     0C81  01D0               	clrf	80	;volatile
 16789                           
 16790                           ;mcc_generated_files/pin_manager.c: 90:     SLRCONA = 0x37;
 16791     0C82  3037               	movlw	55
 16792     0C83  00BB               	movwf	59	;volatile
 16793                           
 16794                           ;mcc_generated_files/pin_manager.c: 91:     SLRCONC = 0x3F;
 16795     0C84  303F               	movlw	63
 16796     0C85  00D1               	movwf	81	;volatile
 16797                           
 16798                           ;mcc_generated_files/pin_manager.c: 96:     INLVLA = 0x3F;
 16799     0C86  303F               	movlw	63
 16800     0C87  00BC               	movwf	60	;volatile
 16801                           
 16802                           ;mcc_generated_files/pin_manager.c: 97:     INLVLC = 0x3F;
 16803     0C88  303F               	movlw	63
 16804     0C89  00D2               	movwf	82	;volatile
 16805                           
 16806                           ;mcc_generated_files/pin_manager.c: 106:     RC0PPS = 0x13;
 16807     0C8A  3013               	movlw	19
 16808     0C8B  00A0               	movwf	32	;volatile
 16809                           
 16810                           ;mcc_generated_files/pin_manager.c: 107:     SSP1CLKPPS = 0x10;
 16811     0C8C  3010               	movlw	16
 16812     0C8D  017D               	movlb	61	; select bank61
 16813     0C8E  00C5               	movwf	69	;volatile
 16814                           
 16815                           ;mcc_generated_files/pin_manager.c: 108:     RC1PPS = 0x14;
 16816     0C8F  3014               	movlw	20
 16817     0C90  017E               	movlb	62	; select bank62
 16818     0C91  00A1               	movwf	33	;volatile
 16819                           
 16820                           ;mcc_generated_files/pin_manager.c: 109:     RC4PPS = 0x0F;
 16821     0C92  300F               	movlw	15
 16822     0C93  00A4               	movwf	36	;volatile
 16823                           
 16824                           ;mcc_generated_files/pin_manager.c: 110:     SSP1DATPPS = 0x11;
 16825     0C94  3011               	movlw	17
 16826     0C95  017D               	movlb	61	; select bank61
 16827     0C96  00C6               	movwf	70	;volatile
 16828                           
 16829                           ;mcc_generated_files/pin_manager.c: 111:     RX1PPS = 0x15;
 16830     0C97  3015               	movlw	21
 16831     0C98  00CB               	movwf	75	;volatile
 16832     0C99  0008               	return
 16833     0C9A                     __end_of_PIN_MANAGER_Initialize:
 16834                           
 16835                           	psect	text94
 16836     0994                     __ptext94:	
 16837 ;; *************** function _OSCILLATOR_Initialize *****************
 16838 ;; Defined at:
 16839 ;;		line 64 in file "mcc_generated_files/mcc.c"
 16840 ;; Parameters:    Size  Location     Type
 16841 ;;		None
 16842 ;; Auto vars:     Size  Location     Type
 16843 ;;		None
 16844 ;; Return value:  Size  Location     Type
 16845 ;;                  1    wreg      void 
 16846 ;; Registers used:
 16847 ;;		status,2
 16848 ;; Tracked objects:
 16849 ;;		On entry : B3F/3D
 16850 ;;		On exit  : B3F/11
 16851 ;;		Unchanged: B00/0
 16852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16857 ;;Total ram usage:        0 bytes
 16858 ;; Hardware stack levels used: 1
 16859 ;; Hardware stack levels required when called: 4
 16860 ;; This function calls:
 16861 ;;		Nothing
 16862 ;; This function is called by:
 16863 ;;		_SYSTEM_Initialize
 16864 ;; This function uses a non-reentrant model
 16865 ;;
 16866                           
 16867     0994                     _OSCILLATOR_Initialize:	
 16868                           ;psect for function _OSCILLATOR_Initialize
 16869                           
 16870                           
 16871                           ;mcc_generated_files/mcc.c: 67:     OSCCON1 = 0x60;
 16872                           
 16873                           ;incstack = 0
 16874                           ; Regs used in _OSCILLATOR_Initialize: [status,2]
 16875     0994  3060               	movlw	96
 16876     0995  0151               	movlb	17	; select bank17
 16877     0996  008D               	movwf	13	;volatile
 16878                           
 16879                           ;mcc_generated_files/mcc.c: 69:     OSCCON3 = 0x00;
 16880     0997  018F               	clrf	15	;volatile
 16881                           
 16882                           ;mcc_generated_files/mcc.c: 71:     OSCEN = 0x00;
 16883     0998  0191               	clrf	17	;volatile
 16884                           
 16885                           ;mcc_generated_files/mcc.c: 73:     OSCFRQ = 0x00;
 16886     0999  0193               	clrf	19	;volatile
 16887                           
 16888                           ;mcc_generated_files/mcc.c: 75:     OSCTUNE = 0x00;
 16889     099A  0192               	clrf	18	;volatile
 16890                           
 16891                           ;mcc_generated_files/mcc.c: 77:     CPUDOZE = 0x80;
 16892     099B  3080               	movlw	128
 16893     099C  008C               	movwf	12	;volatile
 16894     099D  0008               	return
 16895     099E                     __end_of_OSCILLATOR_Initialize:
 16896                           
 16897                           	psect	text95
 16898     098A                     __ptext95:	
 16899 ;; *************** function _I2C1_Initialize *****************
 16900 ;; Defined at:
 16901 ;;		line 167 in file "mcc_generated_files/i2c1_master.c"
 16902 ;; Parameters:    Size  Location     Type
 16903 ;;		None
 16904 ;; Auto vars:     Size  Location     Type
 16905 ;;		None
 16906 ;; Return value:  Size  Location     Type
 16907 ;;                  1    wreg      void 
 16908 ;; Registers used:
 16909 ;;		status,2
 16910 ;; Tracked objects:
 16911 ;;		On entry : B3F/F
 16912 ;;		On exit  : B3F/3
 16913 ;;		Unchanged: B00/0
 16914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16919 ;;Total ram usage:        0 bytes
 16920 ;; Hardware stack levels used: 1
 16921 ;; Hardware stack levels required when called: 4
 16922 ;; This function calls:
 16923 ;;		Nothing
 16924 ;; This function is called by:
 16925 ;;		_SYSTEM_Initialize
 16926 ;; This function uses a non-reentrant model
 16927 ;;
 16928                           
 16929     098A                     _I2C1_Initialize:	
 16930                           ;psect for function _I2C1_Initialize
 16931                           
 16932                           
 16933                           ;mcc_generated_files/i2c1_master.c: 169:     SSP1STAT = 0x80;
 16934                           
 16935                           ;incstack = 0
 16936                           ; Regs used in _I2C1_Initialize: [status,2]
 16937     098A  3080               	movlw	128
 16938     098B  0143               	movlb	3	; select bank3
 16939     098C  008F               	movwf	15	;volatile
 16940                           
 16941                           ;mcc_generated_files/i2c1_master.c: 170:     SSP1CON1 = 0x28;
 16942     098D  3028               	movlw	40
 16943     098E  0090               	movwf	16	;volatile
 16944                           
 16945                           ;mcc_generated_files/i2c1_master.c: 171:     SSP1CON2 = 0x00;
 16946     098F  0191               	clrf	17	;volatile
 16947                           
 16948                           ;mcc_generated_files/i2c1_master.c: 172:     SSP1ADD = 0x04;
 16949     0990  3004               	movlw	4
 16950     0991  008D               	movwf	13	;volatile
 16951                           
 16952                           ;mcc_generated_files/i2c1_master.c: 173:     SSP1CON1bits.SSPEN = 0;
 16953     0992  1290               	bcf	16,5	;volatile
 16954     0993  0008               	return
 16955     0994                     __end_of_I2C1_Initialize:
 16956                           
 16957                           	psect	text96
 16958     0D70                     __ptext96:	
 16959 ;; *************** function _EUSART1_Initialize *****************
 16960 ;; Defined at:
 16961 ;;		line 81 in file "mcc_generated_files/eusart1.c"
 16962 ;; Parameters:    Size  Location     Type
 16963 ;;		None
 16964 ;; Auto vars:     Size  Location     Type
 16965 ;;		None
 16966 ;; Return value:  Size  Location     Type
 16967 ;;                  1    wreg      void 
 16968 ;; Registers used:
 16969 ;;		wreg, status,2, status,0, pclath, cstack
 16970 ;; Tracked objects:
 16971 ;;		On entry : 3F/B
 16972 ;;		On exit  : 3F/E
 16973 ;;		Unchanged: 0/0
 16974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16979 ;;Total ram usage:        0 bytes
 16980 ;; Hardware stack levels used: 1
 16981 ;; Hardware stack levels required when called: 5
 16982 ;; This function calls:
 16983 ;;		_EUSART1_SetErrorHandler
 16984 ;;		_EUSART1_SetFramingErrorHandler
 16985 ;;		_EUSART1_SetOverrunErrorHandler
 16986 ;;		_EUSART1_SetRxInterruptHandler
 16987 ;; This function is called by:
 16988 ;;		_SYSTEM_Initialize
 16989 ;; This function uses a non-reentrant model
 16990 ;;
 16991                           
 16992     0D70                     _EUSART1_Initialize:	
 16993                           ;psect for function _EUSART1_Initialize
 16994                           
 16995                           
 16996                           ;mcc_generated_files/eusart1.c: 84:     PIE3bits.RC1IE = 0;
 16997                           
 16998                           ;incstack = 0
 16999                           ; Regs used in _EUSART1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 17000     0D70  014E               	movlb	14	; select bank14
 17001     0D71  1299               	bcf	25,5	;volatile
 17002                           
 17003                           ;mcc_generated_files/eusart1.c: 85:     EUSART1_SetRxInterruptHandler(EUSART1_Receive_IS
      +                          R);
 17004     0D72  3024               	movlw	low _EUSART1_Receive_ISR
 17005     0D73  00F4               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler
 17006     0D74  300C               	movlw	high _EUSART1_Receive_ISR
 17007     0D75  00F5               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler+1
 17008     0D76  3189  213B  318D   	fcall	_EUSART1_SetRxInterruptHandler
 17009                           
 17010                           ;mcc_generated_files/eusart1.c: 89:     BAUD1CON = 0x0A;
 17011     0D79  300A               	movlw	10
 17012     0D7A  0142               	movlb	2	; select bank2
 17013     0D7B  009F               	movwf	31	;volatile
 17014                           
 17015                           ;mcc_generated_files/eusart1.c: 92:     RC1STA = 0x90;
 17016     0D7C  3090               	movlw	144
 17017     0D7D  009D               	movwf	29	;volatile
 17018                           
 17019                           ;mcc_generated_files/eusart1.c: 95:     TX1STA = 0x24;
 17020     0D7E  3024               	movlw	36
 17021     0D7F  009E               	movwf	30	;volatile
 17022                           
 17023                           ;mcc_generated_files/eusart1.c: 98:     SP1BRGL = 0x19;
 17024     0D80  3019               	movlw	25
 17025     0D81  009B               	movwf	27	;volatile
 17026                           
 17027                           ;mcc_generated_files/eusart1.c: 101:     SP1BRGH = 0x00;
 17028     0D82  019C               	clrf	28	;volatile
 17029                           
 17030                           ;mcc_generated_files/eusart1.c: 104:     EUSART1_SetFramingErrorHandler(EUSART1_DefaultF
      +                          ramingErrorHandler);
 17031     0D83  3000               	movlw	0
 17032     0D84  00F4               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler
 17033     0D85  3000               	movlw	0
 17034     0D86  00F5               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler+1
 17035     0D87  3189  2135  318D   	fcall	_EUSART1_SetFramingErrorHandler
 17036                           
 17037                           ;mcc_generated_files/eusart1.c: 105:     EUSART1_SetOverrunErrorHandler(EUSART1_DefaultO
      +                          verrunErrorHandler);
 17038     0D8A  30D8               	movlw	low _EUSART1_DefaultOverrunErrorHandler
 17039     0D8B  00F4               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler
 17040     0D8C  3008               	movlw	high _EUSART1_DefaultOverrunErrorHandler
 17041     0D8D  00F5               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler+1
 17042     0D8E  3189  2115  318D   	fcall	_EUSART1_SetOverrunErrorHandler
 17043                           
 17044                           ;mcc_generated_files/eusart1.c: 106:     EUSART1_SetErrorHandler(EUSART1_DefaultErrorHan
      +                          dler);
 17045     0D91  30B1               	movlw	low _EUSART1_DefaultErrorHandler
 17046     0D92  00F4               	movwf	EUSART1_SetErrorHandler@interruptHandler
 17047     0D93  3008               	movlw	high _EUSART1_DefaultErrorHandler
 17048     0D94  00F5               	movwf	EUSART1_SetErrorHandler@interruptHandler+1
 17049     0D95  3189  2110         	fcall	_EUSART1_SetErrorHandler
 17050                           
 17051                           ;mcc_generated_files/eusart1.c: 108:     eusart1RxLastError.status = 0;
 17052     0D97  01F6               	clrf	_eusart1RxLastError	;volatile
 17053                           
 17054                           ;mcc_generated_files/eusart1.c: 111:     eusart1RxHead = 0;
 17055     0D98  01F9               	clrf	_eusart1RxHead	;volatile
 17056                           
 17057                           ;mcc_generated_files/eusart1.c: 112:     eusart1RxTail = 0;
 17058     0D99  01F8               	clrf	_eusart1RxTail	;volatile
 17059                           
 17060                           ;mcc_generated_files/eusart1.c: 113:     eusart1RxCount = 0;
 17061     0D9A  01F7               	clrf	_eusart1RxCount	;volatile
 17062                           
 17063                           ;mcc_generated_files/eusart1.c: 116:     PIE3bits.RC1IE = 1;
 17064     0D9B  014E               	movlb	14	; select bank14
 17065     0D9C  1699               	bsf	25,5	;volatile
 17066     0D9D  0008               	return
 17067     0D9E                     __end_of_EUSART1_Initialize:
 17068                           
 17069                           	psect	text97
 17070     093B                     __ptext97:	
 17071 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
 17072 ;; Defined at:
 17073 ;;		line 242 in file "mcc_generated_files/eusart1.c"
 17074 ;; Parameters:    Size  Location     Type
 17075 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
 17076 ;;		 -> EUSART1_Receive_ISR(1), 
 17077 ;; Auto vars:     Size  Location     Type
 17078 ;;		None
 17079 ;; Return value:  Size  Location     Type
 17080 ;;                  1    wreg      void 
 17081 ;; Registers used:
 17082 ;;		wreg
 17083 ;; Tracked objects:
 17084 ;;		On entry : 3F/E
 17085 ;;		On exit  : 3F/1
 17086 ;;		Unchanged: 0/0
 17087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17088 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17092 ;;Total ram usage:        2 bytes
 17093 ;; Hardware stack levels used: 1
 17094 ;; Hardware stack levels required when called: 4
 17095 ;; This function calls:
 17096 ;;		Nothing
 17097 ;; This function is called by:
 17098 ;;		_EUSART1_Initialize
 17099 ;; This function uses a non-reentrant model
 17100 ;;
 17101                           
 17102     093B                     _EUSART1_SetRxInterruptHandler:	
 17103                           ;psect for function _EUSART1_SetRxInterruptHandler
 17104                           
 17105                           
 17106                           ;mcc_generated_files/eusart1.c: 243:     EUSART1_RxDefaultInterruptHandler = interruptHa
      +                          ndler;
 17107                           
 17108                           ;incstack = 0
 17109                           ; Regs used in _EUSART1_SetRxInterruptHandler: [wreg]
 17110     093B  0875               	movf	EUSART1_SetRxInterruptHandler@interruptHandler+1,w
 17111     093C  0141               	movlb	1	; select bank1
 17112     093D  00EE               	movwf	(_EUSART1_RxDefaultInterruptHandler+1)^(0+128)
 17113     093E  0874               	movf	EUSART1_SetRxInterruptHandler@interruptHandler,w
 17114     093F  00ED               	movwf	_EUSART1_RxDefaultInterruptHandler^(0+128)
 17115     0940  0008               	return
 17116     0941                     __end_of_EUSART1_SetRxInterruptHandler:
 17117                           
 17118                           	psect	text98
 17119     0915                     __ptext98:	
 17120 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
 17121 ;; Defined at:
 17122 ;;		line 233 in file "mcc_generated_files/eusart1.c"
 17123 ;; Parameters:    Size  Location     Type
 17124 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
 17125 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
 17126 ;; Auto vars:     Size  Location     Type
 17127 ;;		None
 17128 ;; Return value:  Size  Location     Type
 17129 ;;                  1    wreg      void 
 17130 ;; Registers used:
 17131 ;;		wreg
 17132 ;; Tracked objects:
 17133 ;;		On entry : 3F/1
 17134 ;;		On exit  : 3F/1
 17135 ;;		Unchanged: 0/0
 17136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17137 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17140 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17141 ;;Total ram usage:        2 bytes
 17142 ;; Hardware stack levels used: 1
 17143 ;; Hardware stack levels required when called: 4
 17144 ;; This function calls:
 17145 ;;		Nothing
 17146 ;; This function is called by:
 17147 ;;		_EUSART1_Initialize
 17148 ;; This function uses a non-reentrant model
 17149 ;;
 17150                           
 17151     0915                     _EUSART1_SetOverrunErrorHandler:	
 17152                           ;psect for function _EUSART1_SetOverrunErrorHandler
 17153                           
 17154                           
 17155                           ;mcc_generated_files/eusart1.c: 234:     EUSART1_OverrunErrorHandler = interruptHandler;
 17156                           
 17157                           ;incstack = 0
 17158                           ; Regs used in _EUSART1_SetOverrunErrorHandler: [wreg]
 17159     0915  0875               	movf	EUSART1_SetOverrunErrorHandler@interruptHandler+1,w
 17160     0916  00EA               	movwf	(_EUSART1_OverrunErrorHandler+1)^(0+128)
 17161     0917  0874               	movf	EUSART1_SetOverrunErrorHandler@interruptHandler,w
 17162     0918  00E9               	movwf	_EUSART1_OverrunErrorHandler^(0+128)
 17163     0919  0008               	return
 17164     091A                     __end_of_EUSART1_SetOverrunErrorHandler:
 17165                           
 17166                           	psect	text99
 17167     0935                     __ptext99:	
 17168 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
 17169 ;; Defined at:
 17170 ;;		line 229 in file "mcc_generated_files/eusart1.c"
 17171 ;; Parameters:    Size  Location     Type
 17172 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
 17173 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
 17174 ;; Auto vars:     Size  Location     Type
 17175 ;;		None
 17176 ;; Return value:  Size  Location     Type
 17177 ;;                  1    wreg      void 
 17178 ;; Registers used:
 17179 ;;		wreg
 17180 ;; Tracked objects:
 17181 ;;		On entry : 3F/2
 17182 ;;		On exit  : 3F/1
 17183 ;;		Unchanged: 0/0
 17184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17185 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17188 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17189 ;;Total ram usage:        2 bytes
 17190 ;; Hardware stack levels used: 1
 17191 ;; Hardware stack levels required when called: 4
 17192 ;; This function calls:
 17193 ;;		Nothing
 17194 ;; This function is called by:
 17195 ;;		_EUSART1_Initialize
 17196 ;; This function uses a non-reentrant model
 17197 ;;
 17198                           
 17199     0935                     _EUSART1_SetFramingErrorHandler:	
 17200                           ;psect for function _EUSART1_SetFramingErrorHandler
 17201                           
 17202                           
 17203                           ;mcc_generated_files/eusart1.c: 230:     EUSART1_FramingErrorHandler = interruptHandler;
 17204                           
 17205                           ;incstack = 0
 17206                           ; Regs used in _EUSART1_SetFramingErrorHandler: [wreg]
 17207     0935  0875               	movf	EUSART1_SetFramingErrorHandler@interruptHandler+1,w
 17208     0936  0141               	movlb	1	; select bank1
 17209     0937  00EC               	movwf	(_EUSART1_FramingErrorHandler+1)^(0+128)
 17210     0938  0874               	movf	EUSART1_SetFramingErrorHandler@interruptHandler,w
 17211     0939  00EB               	movwf	_EUSART1_FramingErrorHandler^(0+128)
 17212     093A  0008               	return
 17213     093B                     __end_of_EUSART1_SetFramingErrorHandler:
 17214                           
 17215                           	psect	text100
 17216     0910                     __ptext100:	
 17217 ;; *************** function _EUSART1_SetErrorHandler *****************
 17218 ;; Defined at:
 17219 ;;		line 237 in file "mcc_generated_files/eusart1.c"
 17220 ;; Parameters:    Size  Location     Type
 17221 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
 17222 ;;		 -> EUSART1_DefaultErrorHandler(1), 
 17223 ;; Auto vars:     Size  Location     Type
 17224 ;;		None
 17225 ;; Return value:  Size  Location     Type
 17226 ;;                  1    wreg      void 
 17227 ;; Registers used:
 17228 ;;		wreg
 17229 ;; Tracked objects:
 17230 ;;		On entry : 3F/1
 17231 ;;		On exit  : 3F/1
 17232 ;;		Unchanged: 0/0
 17233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17234 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17237 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17238 ;;Total ram usage:        2 bytes
 17239 ;; Hardware stack levels used: 1
 17240 ;; Hardware stack levels required when called: 4
 17241 ;; This function calls:
 17242 ;;		Nothing
 17243 ;; This function is called by:
 17244 ;;		_EUSART1_Initialize
 17245 ;; This function uses a non-reentrant model
 17246 ;;
 17247                           
 17248     0910                     _EUSART1_SetErrorHandler:	
 17249                           ;psect for function _EUSART1_SetErrorHandler
 17250                           
 17251                           
 17252                           ;mcc_generated_files/eusart1.c: 238:     EUSART1_ErrorHandler = interruptHandler;
 17253                           
 17254                           ;incstack = 0
 17255                           ; Regs used in _EUSART1_SetErrorHandler: [wreg]
 17256     0910  0875               	movf	EUSART1_SetErrorHandler@interruptHandler+1,w
 17257     0911  00E8               	movwf	(_EUSART1_ErrorHandler+1)^(0+128)
 17258     0912  0874               	movf	EUSART1_SetErrorHandler@interruptHandler,w
 17259     0913  00E7               	movwf	_EUSART1_ErrorHandler^(0+128)
 17260     0914  0008               	return
 17261     0915                     __end_of_EUSART1_SetErrorHandler:
 17262                           
 17263                           	psect	text101
 17264     092F                     __ptext101:	
 17265 ;; *************** function _DAC1_Initialize *****************
 17266 ;; Defined at:
 17267 ;;		line 58 in file "mcc_generated_files/dac1.c"
 17268 ;; Parameters:    Size  Location     Type
 17269 ;;		None
 17270 ;; Auto vars:     Size  Location     Type
 17271 ;;		None
 17272 ;; Return value:  Size  Location     Type
 17273 ;;                  1    wreg      void 
 17274 ;; Registers used:
 17275 ;;		None
 17276 ;; Tracked objects:
 17277 ;;		On entry : B3F/5
 17278 ;;		On exit  : B3F/12
 17279 ;;		Unchanged: B00/0
 17280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17285 ;;Total ram usage:        0 bytes
 17286 ;; Hardware stack levels used: 1
 17287 ;; Hardware stack levels required when called: 4
 17288 ;; This function calls:
 17289 ;;		Nothing
 17290 ;; This function is called by:
 17291 ;;		_SYSTEM_Initialize
 17292 ;; This function uses a non-reentrant model
 17293 ;;
 17294                           
 17295     092F                     _DAC1_Initialize:	
 17296                           ;psect for function _DAC1_Initialize
 17297                           
 17298                           
 17299                           ;mcc_generated_files/dac1.c: 61:     DAC1CON0 = 0x80;
 17300                           
 17301                           ;incstack = 0
 17302                           ; Regs used in _DAC1_Initialize: []
 17303     092F  3080               	movlw	128
 17304     0930  0152               	movlb	18	; select bank18
 17305     0931  008E               	movwf	14	;volatile
 17306                           
 17307                           ;mcc_generated_files/dac1.c: 63:     DAC1CON1 = 0x18;
 17308     0932  3018               	movlw	24
 17309     0933  008F               	movwf	15	;volatile
 17310     0934  0008               	return
 17311     0935                     __end_of_DAC1_Initialize:
 17312                           
 17313                           	psect	text102
 17314     0A03                     __ptext102:	
 17315 ;; *************** function _CMP1_Initialize *****************
 17316 ;; Defined at:
 17317 ;;		line 61 in file "mcc_generated_files/cmp1.c"
 17318 ;; Parameters:    Size  Location     Type
 17319 ;;		None
 17320 ;; Auto vars:     Size  Location     Type
 17321 ;;		None
 17322 ;; Return value:  Size  Location     Type
 17323 ;;                  1    wreg      void 
 17324 ;; Registers used:
 17325 ;;		None
 17326 ;; Tracked objects:
 17327 ;;		On entry : B3F/11
 17328 ;;		On exit  : B3F/E
 17329 ;;		Unchanged: B00/0
 17330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17335 ;;Total ram usage:        0 bytes
 17336 ;; Hardware stack levels used: 1
 17337 ;; Hardware stack levels required when called: 4
 17338 ;; This function calls:
 17339 ;;		Nothing
 17340 ;; This function is called by:
 17341 ;;		_SYSTEM_Initialize
 17342 ;; This function uses a non-reentrant model
 17343 ;;
 17344                           
 17345     0A03                     _CMP1_Initialize:	
 17346                           ;psect for function _CMP1_Initialize
 17347                           
 17348                           
 17349                           ;mcc_generated_files/cmp1.c: 68:     PIE2bits.C1IE = 0;
 17350                           
 17351                           ;incstack = 0
 17352                           ; Regs used in _CMP1_Initialize: []
 17353     0A03  014E               	movlb	14	; select bank14
 17354     0A04  1018               	bcf	24,0	;volatile
 17355                           
 17356                           ;mcc_generated_files/cmp1.c: 71:     CM1CON0 = 0x80;
 17357     0A05  3080               	movlw	128
 17358     0A06  0153               	movlb	19	; select bank19
 17359     0A07  0090               	movwf	16	;volatile
 17360                           
 17361                           ;mcc_generated_files/cmp1.c: 74:     CM1CON1 = 0x03;
 17362     0A08  3003               	movlw	3
 17363     0A09  0091               	movwf	17	;volatile
 17364                           
 17365                           ;mcc_generated_files/cmp1.c: 77:     CM1NCH = 0x02;
 17366     0A0A  3002               	movlw	2
 17367     0A0B  0092               	movwf	18	;volatile
 17368                           
 17369                           ;mcc_generated_files/cmp1.c: 80:     CM1PCH = 0x05;
 17370     0A0C  3005               	movlw	5
 17371     0A0D  0093               	movwf	19	;volatile
 17372                           
 17373                           ;mcc_generated_files/cmp1.c: 83:     PIR2bits.C1IF = 0;
 17374     0A0E  014E               	movlb	14	; select bank14
 17375     0A0F  100E               	bcf	14,0	;volatile
 17376                           
 17377                           ;mcc_generated_files/cmp1.c: 86:     PIE2bits.C1IE = 1;
 17378     0A10  1418               	bsf	24,0	;volatile
 17379     0A11  0008               	return
 17380     0A12                     __end_of_CMP1_Initialize:
 17381                           
 17382                           	psect	intentry
 17383     0004                     __pintentry:	
 17384 ;; *************** function _INTERRUPT_InterruptManager *****************
 17385 ;; Defined at:
 17386 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 17387 ;; Parameters:    Size  Location     Type
 17388 ;;		None
 17389 ;; Auto vars:     Size  Location     Type
 17390 ;;		None
 17391 ;; Return value:  Size  Location     Type
 17392 ;;                  1    wreg      void 
 17393 ;; Registers used:
 17394 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17395 ;; Tracked objects:
 17396 ;;		On entry : 0/0
 17397 ;;		On exit  : 0/0
 17398 ;;		Unchanged: 0/0
 17399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17404 ;;Total ram usage:        0 bytes
 17405 ;; Hardware stack levels used: 1
 17406 ;; Hardware stack levels required when called: 3
 17407 ;; This function calls:
 17408 ;;		NULL
 17409 ;;		_CMP1_ISR
 17410 ;;		_EUSART1_Receive_ISR
 17411 ;;		_TMR0_ISR
 17412 ;;		_TMR2_ISR
 17413 ;;		_TMR4_ISR
 17414 ;; This function is called by:
 17415 ;;		Interrupt level 1
 17416 ;; This function uses a non-reentrant model
 17417 ;;
 17418                           
 17419     0004                     _INTERRUPT_InterruptManager:
 17420                           
 17421                           ;incstack = 0
 17422     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17423                           
 17424                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17425     0005  3180               	pagesel	$
 17426                           
 17427                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.TMR0IE == 1 && PIR0bits.TM
      +                          R0IF == 1)
 17428     0006  014E               	movlb	14	; select bank14
 17429     0007  1A96               	btfsc	22,5	;volatile
 17430     0008  1E8C               	btfss	12,5	;volatile
 17431     0009  280E               	goto	i1l711
 17432                           
 17433                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 17434     000A  318A  2247  3180   	fcall	_TMR0_ISR
 17435                           
 17436                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 17437     000D  282E               	goto	i1l723
 17438     000E                     i1l711:	
 17439                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 17440                           
 17441     000E  1F0B               	btfss	11,6	;volatile
 17442     000F  282E               	goto	i1l723
 17443                           
 17444                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.C1IE == 1 && PIR2bits.C1IF == 1)
 17445     0010  1818               	btfsc	24,0	;volatile
 17446     0011  1C0E               	btfss	14,0	;volatile
 17447     0012  2817               	goto	i1l714
 17448                           
 17449                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             CMP1_ISR();
 17450     0013  3189  21F5  3180   	fcall	_CMP1_ISR
 17451                           
 17452                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 17453     0016  282E               	goto	i1l723
 17454     0017                     i1l714:	
 17455                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE4bits.TMR4IE == 1 && PI
      +                          R4bits.TMR4IF == 1)
 17456                           
 17457     0017  199A               	btfsc	26,3	;volatile
 17458     0018  1D90               	btfss	16,3	;volatile
 17459     0019  281E               	goto	i1l716
 17460                           
 17461                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             TMR4_ISR();
 17462     001A  3189  21DD  3180   	fcall	_TMR4_ISR
 17463                           
 17464                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 17465     001D  282E               	goto	i1l723
 17466     001E                     i1l716:	
 17467                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE4bits.TMR2IE == 1 && PI
      +                          R4bits.TMR2IF == 1)
 17468                           
 17469     001E  189A               	btfsc	26,1	;volatile
 17470     001F  1C90               	btfss	16,1	;volatile
 17471     0020  2825               	goto	i1l718
 17472                           
 17473                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             TMR2_ISR();
 17474     0021  3189  21D1  3180   	fcall	_TMR2_ISR
 17475                           
 17476                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 17477     0024  282E               	goto	i1l723
 17478     0025                     i1l718:	
 17479                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE3bits.RC1IE == 1 && PIR
      +                          3bits.RC1IF == 1)
 17480                           
 17481     0025  1A99               	btfsc	25,5	;volatile
 17482     0026  1E8F               	btfss	15,5	;volatile
 17483     0027  282E               	goto	i1l723
 17484                           
 17485                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             EUSART1_RxDefaultInterruptHandler();
 17486     0028  0141               	movlb	1	; select bank1
 17487     0029  086E               	movf	(_EUSART1_RxDefaultInterruptHandler+1)^(0+128),w
 17488     002A  008A               	movwf	10
 17489     002B  086D               	movf	_EUSART1_RxDefaultInterruptHandler^(0+128),w
 17490     002C  000A               	callw
 17491     002D  3180               	pagesel	$
 17492     002E                     i1l723:	
 17493                           ;mcc_generated_files/interrupt_manager.c: 76:         }
 17494                           
 17495     002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17496     002F  0009               	retfie
 17497     0030                     __end_of_INTERRUPT_InterruptManager:
 17498                           
 17499                           	psect	text104
 17500     09DD                     __ptext104:	
 17501 ;; *************** function _TMR4_ISR *****************
 17502 ;; Defined at:
 17503 ;;		line 166 in file "mcc_generated_files/tmr4.c"
 17504 ;; Parameters:    Size  Location     Type
 17505 ;;		None
 17506 ;; Auto vars:     Size  Location     Type
 17507 ;;		None
 17508 ;; Return value:  Size  Location     Type
 17509 ;;                  1    wreg      void 
 17510 ;; Registers used:
 17511 ;;		wreg, status,2, status,0, pclath, cstack
 17512 ;; Tracked objects:
 17513 ;;		On entry : 3F/E
 17514 ;;		On exit  : 0/0
 17515 ;;		Unchanged: 0/0
 17516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17521 ;;Total ram usage:        0 bytes
 17522 ;; Hardware stack levels used: 1
 17523 ;; Hardware stack levels required when called: 1
 17524 ;; This function calls:
 17525 ;;		NULL
 17526 ;;		_TMR4_DefaultInterruptHandler
 17527 ;; This function is called by:
 17528 ;;		_INTERRUPT_InterruptManager
 17529 ;; This function uses a non-reentrant model
 17530 ;;
 17531                           
 17532     09DD                     _TMR4_ISR:	
 17533                           ;psect for function _TMR4_ISR
 17534                           
 17535                           
 17536                           ;mcc_generated_files/tmr4.c: 170:     PIR4bits.TMR4IF = 0;
 17537                           
 17538                           ;incstack = 0
 17539                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 17540     09DD  1190               	bcf	16,3	;volatile
 17541                           
 17542                           ;mcc_generated_files/tmr4.c: 172:     if(TMR4_InterruptHandler)
 17543     09DE  0140               	movlb	0	; select bank0
 17544     09DF  0860               	movf	_TMR4_InterruptHandler,w
 17545     09E0  0461               	iorwf	_TMR4_InterruptHandler+1,w
 17546     09E1  1903               	btfsc	3,2
 17547     09E2  0008               	return
 17548                           
 17549                           ;mcc_generated_files/tmr4.c: 173:     {;mcc_generated_files/tmr4.c: 174:         TMR4_In
      +                          terruptHandler();
 17550     09E3  0861               	movf	_TMR4_InterruptHandler+1,w
 17551     09E4  008A               	movwf	10
 17552     09E5  0860               	movf	_TMR4_InterruptHandler,w
 17553     09E6  000A               	callw
 17554     09E7  3189               	pagesel	$
 17555     09E8  0008               	return
 17556     09E9                     __end_of_TMR4_ISR:
 17557                           
 17558                           	psect	text105
 17559     08A5                     __ptext105:	
 17560 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 17561 ;; Defined at:
 17562 ;;		line 183 in file "mcc_generated_files/tmr4.c"
 17563 ;; Parameters:    Size  Location     Type
 17564 ;;		None
 17565 ;; Auto vars:     Size  Location     Type
 17566 ;;		None
 17567 ;; Return value:  Size  Location     Type
 17568 ;;                  1    wreg      void 
 17569 ;; Registers used:
 17570 ;;		None
 17571 ;; Tracked objects:
 17572 ;;		On entry : 3F/0
 17573 ;;		On exit  : 3F/0
 17574 ;;		Unchanged: 0/0
 17575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17580 ;;Total ram usage:        0 bytes
 17581 ;; Hardware stack levels used: 1
 17582 ;; This function calls:
 17583 ;;		Nothing
 17584 ;; This function is called by:
 17585 ;;		_TMR4_Initialize
 17586 ;;		_TMR4_ISR
 17587 ;; This function uses a non-reentrant model
 17588 ;;
 17589                           
 17590     08A5                     _TMR4_DefaultInterruptHandler:	
 17591                           ;psect for function _TMR4_DefaultInterruptHandler
 17592                           
 17593                           
 17594                           ;incstack = 0
 17595                           ; Regs used in _TMR4_DefaultInterruptHandler: []
 17596                           ;mcc_generated_files/tmr4.c: 186:     do { LATAbits.LATA5 = 1; } while(0);
 17597     08A5  1698               	bsf	24,5	;volatile
 17598     08A6  0008               	return
 17599     08A7                     __end_of_TMR4_DefaultInterruptHandler:
 17600                           
 17601                           	psect	text106
 17602     09D1                     __ptext106:	
 17603 ;; *************** function _TMR2_ISR *****************
 17604 ;; Defined at:
 17605 ;;		line 166 in file "mcc_generated_files/tmr2.c"
 17606 ;; Parameters:    Size  Location     Type
 17607 ;;		None
 17608 ;; Auto vars:     Size  Location     Type
 17609 ;;		None
 17610 ;; Return value:  Size  Location     Type
 17611 ;;                  1    wreg      void 
 17612 ;; Registers used:
 17613 ;;		wreg, status,2, status,0, pclath, cstack
 17614 ;; Tracked objects:
 17615 ;;		On entry : 3F/E
 17616 ;;		On exit  : 0/0
 17617 ;;		Unchanged: 0/0
 17618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17623 ;;Total ram usage:        0 bytes
 17624 ;; Hardware stack levels used: 1
 17625 ;; Hardware stack levels required when called: 1
 17626 ;; This function calls:
 17627 ;;		NULL
 17628 ;;		_TMR2_DefaultInterruptHandler
 17629 ;; This function is called by:
 17630 ;;		_INTERRUPT_InterruptManager
 17631 ;; This function uses a non-reentrant model
 17632 ;;
 17633                           
 17634     09D1                     _TMR2_ISR:	
 17635                           ;psect for function _TMR2_ISR
 17636                           
 17637                           
 17638                           ;mcc_generated_files/tmr2.c: 170:     PIR4bits.TMR2IF = 0;
 17639                           
 17640                           ;incstack = 0
 17641                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 17642     09D1  1090               	bcf	16,1	;volatile
 17643                           
 17644                           ;mcc_generated_files/tmr2.c: 172:     if(TMR2_InterruptHandler)
 17645     09D2  0140               	movlb	0	; select bank0
 17646     09D3  0862               	movf	_TMR2_InterruptHandler,w
 17647     09D4  0463               	iorwf	_TMR2_InterruptHandler+1,w
 17648     09D5  1903               	btfsc	3,2
 17649     09D6  0008               	return
 17650                           
 17651                           ;mcc_generated_files/tmr2.c: 173:     {;mcc_generated_files/tmr2.c: 174:         TMR2_In
      +                          terruptHandler();
 17652     09D7  0863               	movf	_TMR2_InterruptHandler+1,w
 17653     09D8  008A               	movwf	10
 17654     09D9  0862               	movf	_TMR2_InterruptHandler,w
 17655     09DA  000A               	callw
 17656     09DB  3189               	pagesel	$
 17657     09DC  0008               	return
 17658     09DD                     __end_of_TMR2_ISR:
 17659                           
 17660                           	psect	text107
 17661     08A3                     __ptext107:	
 17662 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 17663 ;; Defined at:
 17664 ;;		line 183 in file "mcc_generated_files/tmr2.c"
 17665 ;; Parameters:    Size  Location     Type
 17666 ;;		None
 17667 ;; Auto vars:     Size  Location     Type
 17668 ;;		None
 17669 ;; Return value:  Size  Location     Type
 17670 ;;                  1    wreg      void 
 17671 ;; Registers used:
 17672 ;;		None
 17673 ;; Tracked objects:
 17674 ;;		On entry : 3F/0
 17675 ;;		On exit  : 3F/0
 17676 ;;		Unchanged: 0/0
 17677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;Total ram usage:        0 bytes
 17683 ;; Hardware stack levels used: 1
 17684 ;; This function calls:
 17685 ;;		Nothing
 17686 ;; This function is called by:
 17687 ;;		_TMR2_Initialize
 17688 ;;		_TMR2_ISR
 17689 ;; This function uses a non-reentrant model
 17690 ;;
 17691                           
 17692     08A3                     _TMR2_DefaultInterruptHandler:	
 17693                           ;psect for function _TMR2_DefaultInterruptHandler
 17694                           
 17695                           
 17696                           ;incstack = 0
 17697                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 17698                           ;mcc_generated_files/tmr2.c: 186:     do { LATAbits.LATA5 = 0; } while(0);
 17699     08A3  1298               	bcf	24,5	;volatile
 17700     08A4  0008               	return
 17701     08A5                     __end_of_TMR2_DefaultInterruptHandler:
 17702                           
 17703                           	psect	text108
 17704     0A47                     __ptext108:	
 17705 ;; *************** function _TMR0_ISR *****************
 17706 ;; Defined at:
 17707 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 17708 ;; Parameters:    Size  Location     Type
 17709 ;;		None
 17710 ;; Auto vars:     Size  Location     Type
 17711 ;;		None
 17712 ;; Return value:  Size  Location     Type
 17713 ;;                  1    wreg      void 
 17714 ;; Registers used:
 17715 ;;		wreg, status,2, status,0, pclath, cstack
 17716 ;; Tracked objects:
 17717 ;;		On entry : 3F/E
 17718 ;;		On exit  : 0/0
 17719 ;;		Unchanged: 0/0
 17720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17725 ;;Total ram usage:        0 bytes
 17726 ;; Hardware stack levels used: 1
 17727 ;; Hardware stack levels required when called: 1
 17728 ;; This function calls:
 17729 ;;		NULL
 17730 ;;		_TMR0_DefaultInterruptHandler
 17731 ;; This function is called by:
 17732 ;;		_INTERRUPT_InterruptManager
 17733 ;; This function uses a non-reentrant model
 17734 ;;
 17735                           
 17736     0A47                     _TMR0_ISR:	
 17737                           ;psect for function _TMR0_ISR
 17738                           
 17739                           
 17740                           ;mcc_generated_files/tmr0.c: 137:    PIR0bits.TMR0IF = 0;
 17741                           
 17742                           ;incstack = 0
 17743                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 17744     0A47  128C               	bcf	12,5	;volatile
 17745                           
 17746                           ;mcc_generated_files/tmr0.c: 139:     TMR0H = timer0ReloadVal16bit >> 8;
 17747     0A48  0140               	movlb	0	; select bank0
 17748     0A49  0865               	movf	_timer0ReloadVal16bit+1,w	;volatile
 17749     0A4A  014B               	movlb	11	; select bank11
 17750     0A4B  009D               	movwf	29	;volatile
 17751                           
 17752                           ;mcc_generated_files/tmr0.c: 140:     TMR0L = (uint8_t) timer0ReloadVal16bit;
 17753     0A4C  0140               	movlb	0	; select bank0
 17754     0A4D  0864               	movf	_timer0ReloadVal16bit,w	;volatile
 17755     0A4E  014B               	movlb	11	; select bank11
 17756     0A4F  009C               	movwf	28	;volatile
 17757                           
 17758                           ;mcc_generated_files/tmr0.c: 142:     if(TMR0_InterruptHandler)
 17759     0A50  0140               	movlb	0	; select bank0
 17760     0A51  085E               	movf	_TMR0_InterruptHandler,w
 17761     0A52  045F               	iorwf	_TMR0_InterruptHandler+1,w
 17762     0A53  1903               	btfsc	3,2
 17763     0A54  0008               	return
 17764                           
 17765                           ;mcc_generated_files/tmr0.c: 143:     {;mcc_generated_files/tmr0.c: 144:         TMR0_In
      +                          terruptHandler();
 17766     0A55  085F               	movf	_TMR0_InterruptHandler+1,w
 17767     0A56  008A               	movwf	10
 17768     0A57  085E               	movf	_TMR0_InterruptHandler,w
 17769     0A58  000A               	callw
 17770     0A59  318A               	pagesel	$
 17771     0A5A  0008               	return
 17772     0A5B                     __end_of_TMR0_ISR:
 17773                           
 17774                           	psect	text109
 17775     08B4                     __ptext109:	
 17776 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17777 ;; Defined at:
 17778 ;;		line 155 in file "mcc_generated_files/tmr0.c"
 17779 ;; Parameters:    Size  Location     Type
 17780 ;;		None
 17781 ;; Auto vars:     Size  Location     Type
 17782 ;;		None
 17783 ;; Return value:  Size  Location     Type
 17784 ;;                  1    wreg      void 
 17785 ;; Registers used:
 17786 ;;		None
 17787 ;; Tracked objects:
 17788 ;;		On entry : 3F/0
 17789 ;;		On exit  : 3F/0
 17790 ;;		Unchanged: 0/0
 17791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17796 ;;Total ram usage:        0 bytes
 17797 ;; Hardware stack levels used: 1
 17798 ;; This function calls:
 17799 ;;		Nothing
 17800 ;; This function is called by:
 17801 ;;		_TMR0_Initialize
 17802 ;;		_TMR0_ISR
 17803 ;; This function uses a non-reentrant model
 17804 ;;
 17805                           
 17806     08B4                     _TMR0_DefaultInterruptHandler:	
 17807                           ;psect for function _TMR0_DefaultInterruptHandler
 17808                           
 17809                           
 17810                           ;mcc_generated_files/tmr0.c: 158:     measureTime = 1;
 17811                           
 17812                           ;incstack = 0
 17813                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 17814     08B4  3001               	movlw	1
 17815     08B5  00DD               	movwf	_measureTime
 17816     08B6  0008               	return
 17817     08B7                     __end_of_TMR0_DefaultInterruptHandler:
 17818                           
 17819                           	psect	text110
 17820     0C24                     __ptext110:	
 17821 ;; *************** function _EUSART1_Receive_ISR *****************
 17822 ;; Defined at:
 17823 ;;		line 171 in file "mcc_generated_files/eusart1.c"
 17824 ;; Parameters:    Size  Location     Type
 17825 ;;		None
 17826 ;; Auto vars:     Size  Location     Type
 17827 ;;		None
 17828 ;; Return value:  Size  Location     Type
 17829 ;;                  1    wreg      void 
 17830 ;; Registers used:
 17831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17832 ;; Tracked objects:
 17833 ;;		On entry : 3F/1
 17834 ;;		On exit  : 0/0
 17835 ;;		Unchanged: 0/0
 17836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17841 ;;Total ram usage:        0 bytes
 17842 ;; Hardware stack levels used: 1
 17843 ;; Hardware stack levels required when called: 2
 17844 ;; This function calls:
 17845 ;;		NULL
 17846 ;;		_EUSART1_DefaultErrorHandler
 17847 ;;		_EUSART1_DefaultOverrunErrorHandler
 17848 ;;		_EUSART1_RxDataHandler
 17849 ;; This function is called by:
 17850 ;;		_EUSART1_Initialize
 17851 ;;		_INTERRUPT_InterruptManager
 17852 ;; This function uses a non-reentrant model
 17853 ;;
 17854                           
 17855     0C24                     _EUSART1_Receive_ISR:	
 17856                           ;psect for function _EUSART1_Receive_ISR
 17857                           
 17858                           
 17859                           ;mcc_generated_files/eusart1.c: 174:     eusart1RxStatusBuffer[eusart1RxHead].status = 0
      +                          ;
 17860                           
 17861                           ;incstack = 0
 17862                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17863     0C24  0879               	movf	_eusart1RxHead,w	;volatile
 17864     0C25  3E20               	addlw	(low (_eusart1RxStatusBuffer| (0+768)))& (0+255)
 17865     0C26  0086               	movwf	6
 17866     0C27  3003               	movlw	3	; select bank6/7
 17867     0C28  0087               	movwf	7
 17868     0C29  0181               	clrf	1
 17869                           
 17870                           ;mcc_generated_files/eusart1.c: 181:     if(RC1STAbits.OERR){
 17871     0C2A  0142               	movlb	2	; select bank2
 17872     0C2B  1C9D               	btfss	29,1	;volatile
 17873     0C2C  2C39               	goto	i1l4151
 17874                           
 17875                           ;mcc_generated_files/eusart1.c: 182:         eusart1RxStatusBuffer[eusart1RxHead].oerr =
      +                           1;
 17876     0C2D  0879               	movf	_eusart1RxHead,w	;volatile
 17877     0C2E  3E20               	addlw	(low (_eusart1RxStatusBuffer| (0+768)))& (0+255)
 17878     0C2F  0086               	movwf	6
 17879     0C30  3003               	movlw	3	; select bank6/7
 17880     0C31  0087               	movwf	7
 17881     0C32  1501               	bsf	1,2
 17882                           
 17883                           ;mcc_generated_files/eusart1.c: 183:         EUSART1_OverrunErrorHandler();
 17884     0C33  0141               	movlb	1	; select bank1
 17885     0C34  086A               	movf	(_EUSART1_OverrunErrorHandler+1)^(0+128),w
 17886     0C35  008A               	movwf	10
 17887     0C36  0869               	movf	_EUSART1_OverrunErrorHandler^(0+128),w
 17888     0C37  000A               	callw
 17889     0C38  318C               	pagesel	$
 17890     0C39                     i1l4151:
 17891                           
 17892                           ;mcc_generated_files/eusart1.c: 186:     if(eusart1RxStatusBuffer[eusart1RxHead].status)
      +                          {
 17893     0C39  0879               	movf	_eusart1RxHead,w	;volatile
 17894     0C3A  3E20               	addlw	(low (_eusart1RxStatusBuffer| (0+768)))& (0+255)
 17895     0C3B  0086               	movwf	6
 17896     0C3C  3003               	movlw	3	; select bank6/7
 17897     0C3D  0087               	movwf	7
 17898     0C3E  0801               	movf	1,w
 17899     0C3F  1903               	btfsc	3,2
 17900     0C40  2C48               	goto	i1l4155
 17901                           
 17902                           ;mcc_generated_files/eusart1.c: 187:         EUSART1_ErrorHandler();
 17903     0C41  0141               	movlb	1	; select bank1
 17904     0C42  0868               	movf	(_EUSART1_ErrorHandler+1)^(0+128),w
 17905     0C43  008A               	movwf	10
 17906     0C44  0867               	movf	_EUSART1_ErrorHandler^(0+128),w
 17907     0C45  000A               	callw
 17908     0C46  318C               	pagesel	$
 17909                           
 17910                           ;mcc_generated_files/eusart1.c: 188:     } else {
 17911     0C47  0008               	return
 17912     0C48                     i1l4155:
 17913                           
 17914                           ;mcc_generated_files/eusart1.c: 189:         EUSART1_RxDataHandler();
 17915     0C48  318D  2542         	fcall	_EUSART1_RxDataHandler
 17916     0C4A  0008               	return
 17917     0C4B                     __end_of_EUSART1_Receive_ISR:
 17918                           
 17919                           	psect	text111
 17920     08D8                     __ptext111:	
 17921 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
 17922 ;; Defined at:
 17923 ;;		line 217 in file "mcc_generated_files/eusart1.c"
 17924 ;; Parameters:    Size  Location     Type
 17925 ;;		None
 17926 ;; Auto vars:     Size  Location     Type
 17927 ;;		None
 17928 ;; Return value:  Size  Location     Type
 17929 ;;                  1    wreg      void 
 17930 ;; Registers used:
 17931 ;;		None
 17932 ;; Tracked objects:
 17933 ;;		On entry : 3F/1
 17934 ;;		On exit  : 3F/2
 17935 ;;		Unchanged: 0/0
 17936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17941 ;;Total ram usage:        0 bytes
 17942 ;; Hardware stack levels used: 1
 17943 ;; This function calls:
 17944 ;;		Nothing
 17945 ;; This function is called by:
 17946 ;;		_EUSART1_Initialize
 17947 ;;		_EUSART1_Receive_ISR
 17948 ;; This function uses a non-reentrant model
 17949 ;;
 17950                           
 17951     08D8                     _EUSART1_DefaultOverrunErrorHandler:	
 17952                           ;psect for function _EUSART1_DefaultOverrunErrorHandler
 17953                           
 17954                           
 17955                           ;mcc_generated_files/eusart1.c: 220:     RC1STAbits.CREN = 0;
 17956                           
 17957                           ;incstack = 0
 17958                           ; Regs used in _EUSART1_DefaultOverrunErrorHandler: []
 17959     08D8  0142               	movlb	2	; select bank2
 17960     08D9  121D               	bcf	29,4	;volatile
 17961                           
 17962                           ;mcc_generated_files/eusart1.c: 221:     RC1STAbits.CREN = 1;
 17963     08DA  161D               	bsf	29,4	;volatile
 17964     08DB  0008               	return
 17965     08DC                     __end_of_EUSART1_DefaultOverrunErrorHandler:
 17966                           
 17967                           	psect	text112
 17968     08B1                     __ptext112:	
 17969 ;; *************** function _EUSART1_DefaultErrorHandler *****************
 17970 ;; Defined at:
 17971 ;;		line 225 in file "mcc_generated_files/eusart1.c"
 17972 ;; Parameters:    Size  Location     Type
 17973 ;;		None
 17974 ;; Auto vars:     Size  Location     Type
 17975 ;;		None
 17976 ;; Return value:  Size  Location     Type
 17977 ;;                  1    wreg      void 
 17978 ;; Registers used:
 17979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17980 ;; Tracked objects:
 17981 ;;		On entry : 3F/1
 17982 ;;		On exit  : 3D/0
 17983 ;;		Unchanged: 0/0
 17984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17989 ;;Total ram usage:        0 bytes
 17990 ;; Hardware stack levels used: 1
 17991 ;; Hardware stack levels required when called: 1
 17992 ;; This function calls:
 17993 ;;		_EUSART1_RxDataHandler
 17994 ;; This function is called by:
 17995 ;;		_EUSART1_Initialize
 17996 ;;		_EUSART1_Receive_ISR
 17997 ;; This function uses a non-reentrant model
 17998 ;;
 17999                           
 18000     08B1                     _EUSART1_DefaultErrorHandler:	
 18001                           ;psect for function _EUSART1_DefaultErrorHandler
 18002                           
 18003                           
 18004                           ;mcc_generated_files/eusart1.c: 226:     EUSART1_RxDataHandler();
 18005                           
 18006                           ;incstack = 0
 18007                           ; Regs used in _EUSART1_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 18008     08B1  318D  2542         	fcall	_EUSART1_RxDataHandler
 18009     08B3  0008               	return
 18010     08B4                     __end_of_EUSART1_DefaultErrorHandler:
 18011                           
 18012                           	psect	text113
 18013     0D42                     __ptext113:	
 18014 ;; *************** function _EUSART1_RxDataHandler *****************
 18015 ;; Defined at:
 18016 ;;		line 195 in file "mcc_generated_files/eusart1.c"
 18017 ;; Parameters:    Size  Location     Type
 18018 ;;		None
 18019 ;; Auto vars:     Size  Location     Type
 18020 ;;  t               2    2[COMMON] int 
 18021 ;; Return value:  Size  Location     Type
 18022 ;;                  1    wreg      void 
 18023 ;; Registers used:
 18024 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18025 ;; Tracked objects:
 18026 ;;		On entry : 0/2
 18027 ;;		On exit  : 3D/0
 18028 ;;		Unchanged: 0/0
 18029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18031 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18032 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18033 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18034 ;;Total ram usage:        4 bytes
 18035 ;; Hardware stack levels used: 1
 18036 ;; This function calls:
 18037 ;;		Nothing
 18038 ;; This function is called by:
 18039 ;;		_EUSART1_Receive_ISR
 18040 ;;		_EUSART1_DefaultErrorHandler
 18041 ;; This function uses a non-reentrant model
 18042 ;;
 18043                           
 18044     0D42                     _EUSART1_RxDataHandler:	
 18045                           ;psect for function _EUSART1_RxDataHandler
 18046                           
 18047                           
 18048                           ;mcc_generated_files/eusart1.c: 197:     int t;;mcc_generated_files/eusart1.c: 198:     
      +                          eusart1RxBuffer[eusart1RxHead] = RC1REG;
 18049                           
 18050                           ;incstack = 0
 18051                           ; Regs used in _EUSART1_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 18052     0D42  0879               	movf	_eusart1RxHead,w
 18053     0D43  3EA0               	addlw	(low (_eusart1RxBuffer| (0+512)))& (0+255)
 18054     0D44  0086               	movwf	6
 18055     0D45  3002               	movlw	2	; select bank5/6
 18056     0D46  0087               	movwf	7
 18057     0D47  0142               	movlb	2	; select bank2
 18058     0D48  0819               	movf	25,w	;volatile
 18059     0D49  0081               	movwf	1
 18060                           
 18061                           ;mcc_generated_files/eusart1.c: 199:     if(eusart1RxBuffer[eusart1RxHead])
 18062     0D4A  0879               	movf	_eusart1RxHead,w
 18063     0D4B  3EA0               	addlw	(low (_eusart1RxBuffer| (0+512)))& (0+255)
 18064     0D4C  0086               	movwf	6
 18065     0D4D  3002               	movlw	2	; select bank5/6
 18066     0D4E  0087               	movwf	7
 18067     0D4F  0801               	movf	1,w
 18068     0D50  1903               	btfsc	3,2
 18069     0D51  0008               	return
 18070                           
 18071                           ;mcc_generated_files/eusart1.c: 200:     {;mcc_generated_files/eusart1.c: 201:         i
      +                          f(eusart1RxBuffer[eusart1RxHead] == 0x0A)
 18072     0D52  0879               	movf	_eusart1RxHead,w
 18073     0D53  3EA0               	addlw	(low (_eusart1RxBuffer| (0+512)))& (0+255)
 18074     0D54  0086               	movwf	6
 18075     0D55  3002               	movlw	2	; select bank5/6
 18076     0D56  0087               	movwf	7
 18077     0D57  300A               	movlw	10
 18078     0D58  0601               	xorwf	1,w
 18079     0D59  1D03               	btfss	3,2
 18080     0D5A  2D5E               	goto	i1l3765
 18081                           
 18082                           ;mcc_generated_files/eusart1.c: 202:         {;mcc_generated_files/eusart1.c: 203:      
      +                                 eusart1PacketFinish++;
 18083     0D5B  3001               	movlw	1
 18084     0D5C  0140               	movlb	0	; select bank0
 18085     0D5D  07E6               	addwf	_eusart1PacketFinish,f	;volatile
 18086     0D5E                     i1l3765:
 18087                           
 18088                           ;mcc_generated_files/eusart1.c: 205:         t=eusart1RxHead;
 18089     0D5E  0879               	movf	_eusart1RxHead,w	;volatile
 18090     0D5F  00F0               	movwf	??_EUSART1_RxDataHandler
 18091     0D60  01F1               	clrf	??_EUSART1_RxDataHandler+1
 18092     0D61  0870               	movf	??_EUSART1_RxDataHandler,w
 18093     0D62  00F2               	movwf	EUSART1_RxDataHandler@t
 18094     0D63  0871               	movf	??_EUSART1_RxDataHandler+1,w
 18095     0D64  00F3               	movwf	EUSART1_RxDataHandler@t+1
 18096                           
 18097                           ;mcc_generated_files/eusart1.c: 206:         eusart1RxHead = (eusart1RxHead + 1)% 64;
 18098     0D65  0879               	movf	_eusart1RxHead,w	;volatile
 18099     0D66  3E01               	addlw	1
 18100     0D67  393F               	andlw	63
 18101     0D68  00F9               	movwf	_eusart1RxHead	;volatile
 18102                           
 18103                           ;mcc_generated_files/eusart1.c: 207:         if(eusart1RxHead == eusart1RxTail)
 18104     0D69  0879               	movf	_eusart1RxHead,w	;volatile
 18105     0D6A  0678               	xorwf	_eusart1RxTail,w	;volatile
 18106     0D6B  1D03               	skipz
 18107     0D6C  0008               	return
 18108                           
 18109                           ;mcc_generated_files/eusart1.c: 208:         {;mcc_generated_files/eusart1.c: 209:      
      +                                 eusart1RxHead = t;
 18110     0D6D  0872               	movf	EUSART1_RxDataHandler@t,w
 18111     0D6E  00F9               	movwf	_eusart1RxHead	;volatile
 18112     0D6F  0008               	return
 18113     0D70                     __end_of_EUSART1_RxDataHandler:
 18114                           
 18115                           	psect	text114
 18116     09F5                     __ptext114:	
 18117 ;; *************** function _CMP1_ISR *****************
 18118 ;; Defined at:
 18119 ;;		line 94 in file "mcc_generated_files/cmp1.c"
 18120 ;; Parameters:    Size  Location     Type
 18121 ;;		None
 18122 ;; Auto vars:     Size  Location     Type
 18123 ;;		None
 18124 ;; Return value:  Size  Location     Type
 18125 ;;                  1    wreg      void 
 18126 ;; Registers used:
 18127 ;;		wreg, status,2, status,0, pclath, cstack
 18128 ;; Tracked objects:
 18129 ;;		On entry : 3F/E
 18130 ;;		On exit  : 3F/0
 18131 ;;		Unchanged: 0/0
 18132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18137 ;;Total ram usage:        0 bytes
 18138 ;; Hardware stack levels used: 1
 18139 ;; Hardware stack levels required when called: 1
 18140 ;; This function calls:
 18141 ;;		_CMP1_GetOutputStatus
 18142 ;; This function is called by:
 18143 ;;		_INTERRUPT_InterruptManager
 18144 ;; This function uses a non-reentrant model
 18145 ;;
 18146                           
 18147     09F5                     _CMP1_ISR:	
 18148                           ;psect for function _CMP1_ISR
 18149                           
 18150                           
 18151                           ;mcc_generated_files/cmp1.c: 97:     PIR2bits.C1IF = 0;
 18152                           
 18153                           ;incstack = 0
 18154                           ; Regs used in _CMP1_ISR: [wreg+status,2+status,0+pclath+cstack]
 18155     09F5  100E               	bcf	14,0	;volatile
 18156                           
 18157                           ;mcc_generated_files/cmp1.c: 98:     if(CMP1_GetOutputStatus())
 18158     09F6  3189  2129  3189   	fcall	_CMP1_GetOutputStatus
 18159     09F9  3A00               	xorlw	0
 18160     09FA  1903               	skipnz
 18161     09FB  2A00               	goto	i1l4177
 18162                           
 18163                           ;mcc_generated_files/cmp1.c: 99:     {;mcc_generated_files/cmp1.c: 100:         status.b
      +                          eacon = 1;
 18164     09FC  3001               	movlw	1
 18165     09FD  0140               	movlb	0	; select bank0
 18166     09FE  00DA               	movwf	_status+4
 18167                           
 18168                           ;mcc_generated_files/cmp1.c: 101:     }else
 18169     09FF  0008               	return
 18170     0A00                     i1l4177:
 18171                           
 18172                           ;mcc_generated_files/cmp1.c: 102:     {;mcc_generated_files/cmp1.c: 103:         status.
      +                          beacon = 0;
 18173     0A00  0140               	movlb	0	; select bank0
 18174     0A01  01DA               	clrf	_status+4
 18175     0A02  0008               	return
 18176     0A03                     __end_of_CMP1_ISR:
 18177                           
 18178                           	psect	text115
 18179     0929                     __ptext115:	
 18180 ;; *************** function _CMP1_GetOutputStatus *****************
 18181 ;; Defined at:
 18182 ;;		line 89 in file "mcc_generated_files/cmp1.c"
 18183 ;; Parameters:    Size  Location     Type
 18184 ;;		None
 18185 ;; Auto vars:     Size  Location     Type
 18186 ;;		None
 18187 ;; Return value:  Size  Location     Type
 18188 ;;                  1    wreg      _Bool 
 18189 ;; Registers used:
 18190 ;;		wreg, status,2, status,0
 18191 ;; Tracked objects:
 18192 ;;		On entry : 3F/E
 18193 ;;		On exit  : 3F/13
 18194 ;;		Unchanged: 0/0
 18195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18200 ;;Total ram usage:        0 bytes
 18201 ;; Hardware stack levels used: 1
 18202 ;; This function calls:
 18203 ;;		Nothing
 18204 ;; This function is called by:
 18205 ;;		_CMP1_ISR
 18206 ;; This function uses a non-reentrant model
 18207 ;;
 18208                           
 18209     0929                     _CMP1_GetOutputStatus:	
 18210                           ;psect for function _CMP1_GetOutputStatus
 18211                           
 18212                           
 18213                           ;mcc_generated_files/cmp1.c: 91:  return (CM1CON0bits.C1OUT);
 18214                           
 18215                           ;incstack = 0
 18216                           ; Regs used in _CMP1_GetOutputStatus: [wreg+status,2+status,0]
 18217     0929  0153               	movlb	19	; select bank19
 18218     092A  0E10               	swapf	16,w	;volatile
 18219     092B  0C89               	rrf	9,f
 18220     092C  0C89               	rrf	9,f
 18221     092D  3901               	andlw	1
 18222     092E  0008               	return
 18223     092F                     __end_of_CMP1_GetOutputStatus:
 18224     0002                     ___latbits      equ	2
 18225     007E                     btemp           set	126	;btemp
 18226     007E                     int$flags       set	126
 18227     007E                     wtemp0          set	126
 18228                           
 18229                           	psect	idloc
 18230                           
 18231                           ;Config register IDLOC0 @ 0x8000
 18232                           ;	unspecified, using default values
 18233     8000                     	org	32768
 18234     8000  3FFF               	dw	16383
 18235                           
 18236                           ;Config register IDLOC1 @ 0x8001
 18237                           ;	unspecified, using default values
 18238     8001                     	org	32769
 18239     8001  3FFF               	dw	16383
 18240                           
 18241                           ;Config register IDLOC2 @ 0x8002
 18242                           ;	unspecified, using default values
 18243     8002                     	org	32770
 18244     8002  3FFF               	dw	16383
 18245                           
 18246                           ;Config register IDLOC3 @ 0x8003
 18247                           ;	unspecified, using default values
 18248     8003                     	org	32771
 18249     8003  3FFF               	dw	16383
 18250                           
 18251                           	psect	config
 18252                           
 18253                           ;Config register CONFIG1 @ 0x8007
 18254                           ;	External Oscillator mode selection bits
 18255                           ;	FEXTOSC = OFF, Oscillator not enabled
 18256                           ;	Power-up default value for COSC bits
 18257                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
 18258                           ;	Clock Out Enable bit
 18259                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
 18260                           ;	Clock Switch Enable bit
 18261                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 18262                           ;	Fail-Safe Clock Monitor Enable bit
 18263                           ;	FCMEN = ON, FSCM timer enabled
 18264     8007                     	org	32775
 18265     8007  3FEC               	dw	16364
 18266                           
 18267                           ;Config register CONFIG2 @ 0x8008
 18268                           ;	Master Clear Enable bit
 18269                           ;	MCLRE = ON, MCLR pin is Master Clear function
 18270                           ;	Power-up Timer Enable bit
 18271                           ;	PWRTS = OFF, PWRT disabled
 18272                           ;	Low-Power BOR enable bit
 18273                           ;	LPBOREN = OFF, ULPBOR disabled
 18274                           ;	Brown-out reset enable bits
 18275                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
 18276                           ;	Brown-out Reset Voltage Selection
 18277                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 2.45V
 18278                           ;	Zero-cross detect disable
 18279                           ;	ZCD = 0x1, unprogrammed default
 18280                           ;	Peripheral Pin Select one-way control
 18281                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
 18282                           ;	Stack Overflow/Underflow Reset Enable bit
 18283                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
 18284                           ;	Background Debugger
 18285                           ;	DEBUG = 0x1, unprogrammed default
 18286     8008                     	org	32776
 18287     8008  3FFF               	dw	16383
 18288                           
 18289                           ;Config register CONFIG3 @ 0x8009
 18290                           ;	WDT Period Select bits
 18291                           ;	WDTCPS = WDTCPS_10, Divider ratio 1:32768
 18292                           ;	WDT operating mode
 18293                           ;	WDTE = ON, WDT enabled regardless of sleep; SWDTEN ignored
 18294                           ;	WDT Window Select bits
 18295                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 18296                           ;	WDT input clock selector
 18297                           ;	WDTCCS = SC, Software Control
 18298     8009                     	org	32777
 18299     8009  3FEA               	dw	16362
 18300                           
 18301                           ;Config register CONFIG4 @ 0x800A
 18302                           ;	Boot Block Size Selection bits
 18303                           ;	BBSIZE = BB512, 512 words boot block size
 18304                           ;	Boot Block Enable bit
 18305                           ;	BBEN = OFF, Boot Block disabled
 18306                           ;	SAF Enable bit
 18307                           ;	SAFEN = OFF, SAF disabled
 18308                           ;	Application Block Write Protection bit
 18309                           ;	WRTAPP = OFF, Application Block not write protected
 18310                           ;	Boot Block Write Protection bit
 18311                           ;	WRTB = OFF, Boot Block not write protected
 18312                           ;	Configuration Register Write Protection bit
 18313                           ;	WRTC = OFF, Configuration Register not write protected
 18314                           ;	Data EEPROM write protection bit
 18315                           ;	WRTD = OFF, Data EEPROM NOT write protected
 18316                           ;	Storage Area Flash Write Protection bit
 18317                           ;	WRTSAF = OFF, SAF not write protected
 18318                           ;	Low Voltage Programming Enable bit
 18319                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
 18320     800A                     	org	32778
 18321     800A  3FFF               	dw	16383
 18322                           
 18323                           ;Config register CONFIG5 @ 0x800B
 18324                           ;	UserNVM Program memory code protection bit
 18325                           ;	CP = OFF, UserNVM code protection disabled
 18326     800B                     	org	32779
 18327     800B  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    32
    Data        218
    BSS         173
    Persistent  46
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     54      71
    BANK1            80      0      79
    BANK2            80     11      70
    BANK3            80      0      59
    BANK4            80      0      59
    BANK5            80      0      64
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    bufferBlock$data	PTR unsigned char  size(2) Largest target is 0

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), NULL(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), NULL(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), NULL(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), NULL(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    fsmStateTable	const PTR FTN()enum E10930[16] size(2) Largest target is 1
		 -> I2C1_DO_ADDRESS_NACK(), I2C1_DO_IDLE(), I2C1_DO_RCEN(), I2C1_DO_RESET(), 
		 -> I2C1_DO_RX(), I2C1_DO_RX_ACK(), I2C1_DO_RX_NACK_RESTART(), I2C1_DO_RX_NACK_STOP(), 
		 -> I2C1_DO_SEND_ADR_READ(), I2C1_DO_SEND_ADR_WRITE(), I2C1_DO_SEND_RESTART(), I2C1_DO_SEND_RESTART_READ(), 
		 -> I2C1_DO_SEND_RESTART_WRITE(), I2C1_DO_SEND_STOP(), I2C1_DO_TX(), I2C1_DO_TX_EMPTY(), 

    getHis@data	PTR struct . size(2) Largest target is 1
		 -> battery$sensor_config$addressI2C(BANK2[1]), cons$sensor_config$addressI2C(BANK4[1]), panel$sensor_config$addressI2C(BANK3[1]), 

    getINA220Data@device	PTR struct . size(2) Largest target is 59
		 -> battery(BANK2[59]), cons(BANK4[59]), panel(BANK3[59]), 

    getMax@data	PTR struct . size(2) Largest target is 1
		 -> battery$sensor_config$addressI2C(BANK2[1]), cons$sensor_config$addressI2C(BANK4[1]), panel$sensor_config$addressI2C(BANK3[1]), 

    getMed@data	PTR struct . size(2) Largest target is 1
		 -> battery$sensor_config$addressI2C(BANK2[1]), cons$sensor_config$addressI2C(BANK4[1]), panel$sensor_config$addressI2C(BANK3[1]), 

    getMetrics@device	PTR struct . size(2) Largest target is 59
		 -> battery(BANK2[59]), cons(BANK4[59]), panel(BANK3[59]), 

    getMin@data	PTR struct . size(2) Largest target is 1
		 -> battery$sensor_config$addressI2C(BANK2[1]), cons$sensor_config$addressI2C(BANK4[1]), panel$sensor_config$addressI2C(BANK3[1]), 

    I2C1_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_DO_TX$3601	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> I2C1_CallbackReturnReset(), I2C1_CallbackReturnStop(), rd1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rdBlkRegCompleteHandler(), wr1RegCompleteHandler(), wr2RegCompleteHandler(), NULL(), 

    I2C1_DO_TX$3601$0	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_DO_TX$3606	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_MasterFsm$3600	const PTR FTN()enum E10930 size(2) Largest target is 1
		 -> I2C1_DO_ADDRESS_NACK(), I2C1_DO_IDLE(), I2C1_DO_RCEN(), I2C1_DO_RESET(), 
		 -> I2C1_DO_RX(), I2C1_DO_RX_ACK(), I2C1_DO_RX_NACK_RESTART(), I2C1_DO_RX_NACK_STOP(), 
		 -> I2C1_DO_SEND_ADR_READ(), I2C1_DO_SEND_ADR_WRITE(), I2C1_DO_SEND_RESTART(), I2C1_DO_SEND_RESTART_READ(), 
		 -> I2C1_DO_SEND_RESTART_WRITE(), I2C1_DO_SEND_STOP(), I2C1_DO_TX(), I2C1_DO_TX_EMPTY(), 

    I2C1_Read1ByteRegister@returnValue$data	PTR unsigned char  size(2) Largest target is 0

    I2C1_Read2ByteRegister@returnValue$data	PTR unsigned char  size(2) Largest target is 0

    I2C1_ReadNBytes@data	PTR unsigned char  size(1) Largest target is 2
		 -> readINA220@buff(BANK0[2]), 

    I2C1_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> NULL(), 

    I2C1_SetAddressNackCallback@ptr	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C1_SetBuffer@buffer	PTR void  size(2) Largest target is 4
		 -> bufferBlock$data(COMMON[2]), I2C1_Read1ByteRegister@reg(COMMON[1]), I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read1ByteRegister@returnValue$data(COMMON[2]), 
		 -> I2C1_Read2ByteRegister@reg(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_Read2ByteRegister@returnValue$data(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> I2C1_ReadDataBlock@reg(COMMON[1]), I2C1_Write1ByteRegister@data(COMMON[1]), I2C1_Write1ByteRegister@data$data(COMMON[2]), I2C1_Write1ByteRegister@reg(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), I2C1_Write2ByteRegister@data$data(COMMON[2]), I2C1_Write2ByteRegister@reg(COMMON[1]), readINA220@buff(BANK0[2]), 
		 -> readINA220@regadd(BANK0[1]), writeINA220@Txbuffer(BANK0[3]), NULL(NULL[0]), 

    I2C1_SetCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> rd1RegCompleteHandler(), rd2RegCompleteHandler(), rdBlkRegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), NULL(), 

    I2C1_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E363 size(2) Largest target is 1
		 -> rd1RegCompleteHandler(), rd2RegCompleteHandler(), rdBlkRegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), NULL(), 

    I2C1_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_Status$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    I2C1_Status$callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> I2C1_CallbackReturnReset(), I2C1_CallbackReturnStop(), rd1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rdBlkRegCompleteHandler(), wr1RegCompleteHandler(), wr2RegCompleteHandler(), NULL(), 

    I2C1_Status$data_ptr	PTR unsigned char  size(2) Largest target is 4
		 -> bufferBlock$data(COMMON[2]), I2C1_Read1ByteRegister@reg(COMMON[1]), I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read1ByteRegister@returnValue$data(COMMON[2]), 
		 -> I2C1_Read2ByteRegister@reg(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_Read2ByteRegister@returnValue$data(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> I2C1_ReadDataBlock@reg(COMMON[1]), I2C1_Write1ByteRegister@data(COMMON[1]), I2C1_Write1ByteRegister@data$data(COMMON[2]), I2C1_Write1ByteRegister@reg(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), I2C1_Write2ByteRegister@data$data(COMMON[2]), I2C1_Write2ByteRegister@reg(COMMON[1]), readINA220@buff(BANK0[2]), 
		 -> readINA220@regadd(BANK0[1]), writeINA220@Txbuffer(BANK0[3]), NULL(NULL[0]), 

    I2C1_Write1ByteRegister@data$data	PTR unsigned char  size(2) Largest target is 0

    I2C1_Write2ByteRegister@data$data	PTR unsigned char  size(2) Largest target is 0

    I2C1_WriteNBytes@data	PTR unsigned char  size(1) Largest target is 3
		 -> readINA220@regadd(BANK0[1]), writeINA220@Txbuffer(BANK0[3]), 

    initRxBuffer@buf	PTR unsigned char  size(2) Largest target is 11
		 -> main@packet(BANK2[11]), 

    int16ToString@data	PTR unsigned char  size(2) Largest target is 8
		 -> sendSensorData@packet(BANK0[8]), 

    NULL$0	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    processCommand@data	PTR unsigned char  size(2) Largest target is 11
		 -> main@packet(BANK2[11]), 

    processCommand@sensor	PTR struct . size(2) Largest target is 59
		 -> battery(BANK2[59]), cons(BANK4[59]), panel(BANK3[59]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    rdBlkRegCompleteHandler@ptr$data	PTR unsigned char  size(2) Largest target is 0

    readINA220@pRxbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> readINA220@buff(BANK0[2]), 

    readINA220@pTxbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readINA220@regadd(BANK0[1]), 

    receiveData@data	PTR unsigned char  size(2) Largest target is 11
		 -> main@packet(BANK2[11]), 

    S571$0$0	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    S571$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    S571$callbackTable	PTR FTN(PTR void ,)enum E363[6] size(2) Largest target is 1
		 -> I2C1_CallbackReturnReset(), I2C1_CallbackReturnStop(), rd1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rdBlkRegCompleteHandler(), wr1RegCompleteHandler(), wr2RegCompleteHandler(), NULL(), 

    S571$data_ptr	PTR unsigned char  size(2) Largest target is 4
		 -> I2C1_Read1ByteRegister@reg(COMMON[1]), I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@reg(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_ReadDataBlock@reg(COMMON[1]), I2C1_Write1ByteRegister@data(COMMON[1]), I2C1_Write1ByteRegister@reg(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), I2C1_Write2ByteRegister@reg(COMMON[1]), readINA220@buff(BANK0[2]), readINA220@regadd(BANK0[1]), 
		 -> writeINA220@Txbuffer(BANK0[3]), NULL(NULL[0]), 

    S94$data	PTR unsigned char  size(2) Largest target is 0

    sendPacket@str	PTR const unsigned char  size(2) Largest target is 8
		 -> sendSensorData@packet(BANK0[8]), sendSensorInfo@packet(BANK0[7]), 

    sendSensorInfo@sensor_info	PTR struct . size(2) Largest target is 59
		 -> battery(BANK2[59]), cons(BANK4[59]), panel(BANK3[59]), 

    stringCompare@buf	PTR const unsigned char  size(2) Largest target is 59
		 -> battery(BANK2[59]), battery$sensor_info(BANK0[8]), battery$sensor_info$codename(BANK2[5]), battery$sensor_info$codename$address(BANK0[3]), 
		 -> cons(BANK4[59]), cons$sensor_info(BANK0[8]), cons$sensor_info$codename(BANK4[5]), cons$sensor_info$codename$address(BANK0[3]), 
		 -> panel(BANK3[59]), panel$sensor_info(BANK0[8]), panel$sensor_info$codename(BANK3[5]), panel$sensor_info$codename$address(BANK0[3]), 

    stringCompare@str	PTR const unsigned char  size(2) Largest target is 11
		 -> main@packet(BANK2[11]), main@packet$address(COMMON[3]), 

    stringlen@str	PTR const unsigned char  size(2) Largest target is 11
		 -> main@packet(BANK2[11]), packet$value(COMMON[6]), sendSensorData@packet(BANK0[8]), 

    stringToInt16@string	PTR unsigned char  size(2) Largest target is 11
		 -> main@packet(BANK2[11]), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), NULL(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), NULL(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), NULL(), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C1_Read1ByteRegister@returnValue(COMMON[1]), I2C1_Read2ByteRegister@returnValue(COMMON[2]), I2C1_ReadDataBlock@bufferBlock(COMMON[4]), I2C1_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C1_Write2ByteRegister@data(COMMON[2]), NULL(NULL[0]), 

    writeINA220@pTxbuffer	PTR unsigned char  size(1) Largest target is 3
		 -> writeINA220@Txbuffer(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_initRxBuffer
    _receiveData->_EUSART1_Read
    _processCommand->_getMax
    _processCommand->_getMin
    _processCommand->_stringlen
    _stringToInt16->___wmul
    _stringToInt16->_stringlen
    _I2C1_WriteNBytes->_I2C1_Open
    _I2C1_SetAddressNackCallback->_I2C1_SetCallback
    _I2C1_ReadNBytes->_I2C1_Open
    _I2C1_DO_SEND_ADR_WRITE->_I2C1_MasterSendTxData
    _I2C1_SetDataCompleteCallback->_I2C1_SetCallback
    _sendSensorData->_int16ToString
    _sendSensorData->_stringlen
    _sendPacket->_stringlen
    _int16ToString->___lwmod
    _getMetrics->_getMax
    _getMetrics->_getMin
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _EUSART1_Receive_ISR->_EUSART1_RxDataHandler
    _EUSART1_DefaultErrorHandler->_EUSART1_RxDataHandler

Critical Paths under _main in BANK0

    _main->_processCommand
    _processCommand->_getHis
    _stringToInt16->___wmul
    _sendSensorInfo->_sendPacket
    _getINA220Data->_readINA220
    _writeINA220->_I2C1_WriteNBytes
    _readINA220->_I2C1_ReadNBytes
    _readINA220->_I2C1_WriteNBytes
    _I2C1_SetAddressNackCallback->_I2C1_SetCallback
    _I2C1_MasterWrite->_I2C1_MasterOperation
    _I2C1_MasterRead->_I2C1_MasterOperation
    _I2C1_Poller->_I2C1_MasterFsm
    _I2C1_MasterFsm->_I2C1_DO_ADDRESS_NACK
    _I2C1_MasterFsm->_I2C1_DO_RX
    _I2C1_MasterFsm->_I2C1_DO_TX
    _I2C1_MasterFsm->_I2C1_DO_TX_EMPTY
    _I2C1_DO_TX_EMPTY->_I2C1_CallbackReturnReset
    _I2C1_DO_TX_EMPTY->_I2C1_CallbackReturnStop
    _I2C1_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C1_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C1_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C1_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C1_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C1_DO_TX->_I2C1_CallbackReturnReset
    _I2C1_DO_TX->_I2C1_CallbackReturnStop
    _I2C1_DO_TX->_rd1RegCompleteHandler
    _I2C1_DO_TX->_rd2RegCompleteHandler
    _I2C1_DO_TX->_rdBlkRegCompleteHandler
    _I2C1_DO_TX->_wr1RegCompleteHandler
    _I2C1_DO_TX->_wr2RegCompleteHandler
    _I2C1_DO_RX->_I2C1_CallbackReturnReset
    _I2C1_DO_RX->_I2C1_CallbackReturnStop
    _I2C1_DO_RX->_rd1RegCompleteHandler
    _I2C1_DO_RX->_rd2RegCompleteHandler
    _I2C1_DO_RX->_rdBlkRegCompleteHandler
    _I2C1_DO_RX->_wr1RegCompleteHandler
    _I2C1_DO_RX->_wr2RegCompleteHandler
    _I2C1_DO_ADDRESS_NACK->_I2C1_CallbackReturnReset
    _I2C1_DO_ADDRESS_NACK->_I2C1_CallbackReturnStop
    _I2C1_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C1_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C1_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C1_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C1_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C1_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C1_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C1_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C1_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C1_SetDataCompleteCallback
    _I2C1_SetDataCompleteCallback->_I2C1_SetCallback
    _getHis->_sendSensorData
    _sendSensorData->_int16ToString
    _sendPacket->_stringlen
    _int16ToString->___lwdiv
    _getMetrics->_getMed
    _getMed->___aldiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   80962
                                             47 BANK0      7     7      0
                                              0 BANK2     11    11      0
                  _SYSTEM_Initialize
                         _TMR2_Start
                          _TMR2_Stop
                         _TMR4_Start
                          _TMR4_Stop
                    _TxDeviceDisable
                      _getINA220Data
                         _getMetrics
                       _initRxBuffer
                     _processCommand
                        _receiveData
                      _stringCompare
 ---------------------------------------------------------------------------------
 (1) _stringCompare                                        9     3      6     166
                                              4 COMMON     1     1      0
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _receiveData                                          5     2      3     307
                                              0 BANK0      5     2      3
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      37
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _processCommand                                       9     5      4   42523
                                             38 BANK0      9     5      4
                        _TMR0_Reload
                             _getHis
                      _getINA220Data
                             _getMax
                             _getMed
                             _getMin
                     _sendSensorData
                     _sendSensorInfo
                      _stringToInt16
                          _stringlen
 ---------------------------------------------------------------------------------
 (2) _stringToInt16                                        8     5      3     574
                                              4 BANK0      8     5      3
                             ___wmul
                          _stringlen (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     154
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _sendSensorInfo                                      15    13      2     436
                                             13 BANK0     15    13      2
                         _sendPacket
 ---------------------------------------------------------------------------------
 (2) _getINA220Data                                        8     6      2   35596
                                             29 BANK0      8     6      2
                         _readINA220
                        _writeINA220
 ---------------------------------------------------------------------------------
 (3) _writeINA220                                          8     5      3   11810
                                             18 BANK0      8     5      3
                   _I2C1_WriteNBytes
 ---------------------------------------------------------------------------------
 (3) _readINA220                                          11     9      2   23049
                                             18 BANK0     11     9      2
                    _I2C1_ReadNBytes
                   _I2C1_WriteNBytes
 ---------------------------------------------------------------------------------
 (4) _I2C1_WriteNBytes                                     4     1      3   11504
                                             14 BANK0      4     1      3
                         _I2C1_Close
                   _I2C1_MasterWrite
                          _I2C1_Open
        _I2C1_SetAddressNackCallback
                     _I2C1_SetBuffer
 ---------------------------------------------------------------------------------
 (5) _I2C1_SetAddressNackCallback                          4     0      4     361
                                              4 BANK0      4     0      4
                   _I2C1_SetCallback
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterWrite                                     0     0      0   10797
               _I2C1_MasterOperation
 ---------------------------------------------------------------------------------
 (4) _I2C1_ReadNBytes                                      4     1      3   11137
                                             14 BANK0      4     1      3
                         _I2C1_Close
                    _I2C1_MasterRead
                          _I2C1_Open
                     _I2C1_SetBuffer
 ---------------------------------------------------------------------------------
 (5) _I2C1_Open                                            2     2      0      84
                                              4 COMMON     2     2      0
                _I2C1_MasterClearIrq
                    _I2C1_MasterOpen
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterOpen                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterRead                                      0     0      0   10797
               _I2C1_MasterOperation
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterOperation                                 2     2      0   10797
                                             12 BANK0      2     2      0
                   _I2C1_MasterStart
                        _I2C1_Poller
 ---------------------------------------------------------------------------------
 (7) _I2C1_Poller                                          0     0      0   10713
                     _I2C1_MasterFsm
            _I2C1_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (8) _I2C1_MasterWaitForEvent                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_MasterFsm                                       2     2      0   10713
                                             10 BANK0      2     2      0
               _I2C1_DO_ADDRESS_NACK *
                       _I2C1_DO_IDLE *
                       _I2C1_DO_RCEN *
                      _I2C1_DO_RESET *
                         _I2C1_DO_RX *
                     _I2C1_DO_RX_ACK *
            _I2C1_DO_RX_NACK_RESTART *
               _I2C1_DO_RX_NACK_STOP *
              _I2C1_DO_SEND_ADR_READ *
             _I2C1_DO_SEND_ADR_WRITE *
               _I2C1_DO_SEND_RESTART *
          _I2C1_DO_SEND_RESTART_READ *
         _I2C1_DO_SEND_RESTART_WRITE *
                  _I2C1_DO_SEND_STOP *
                         _I2C1_DO_TX *
                   _I2C1_DO_TX_EMPTY *
                _I2C1_MasterClearIrq
                  _I2C1_MasterIsNack
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_TX_EMPTY                                     2     2      0    2643
                                              8 BANK0      2     2      0
                                NULL *
           _I2C1_CallbackReturnReset *
            _I2C1_CallbackReturnStop *
               _I2C1_DO_SEND_RESTART
                  _I2C1_DO_SEND_STOP
                  _I2C1_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (10) _I2C1_MasterSetIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_TX                                           2     2      0    2690
                                              8 BANK0      2     2      0
                                NULL *
           _I2C1_CallbackReturnReset *
            _I2C1_CallbackReturnStop *
          _I2C1_DO_SEND_RESTART_READ
         _I2C1_DO_SEND_RESTART_WRITE
                  _I2C1_DO_SEND_STOP
                  _I2C1_MasterIsNack
              _I2C1_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (9) _I2C1_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C1_DO_SEND_RESTART_WRITE                          0     0      0       0
           _I2C1_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (10) _I2C1_DO_SEND_RESTART_READ                           0     0      0       0
           _I2C1_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_SEND_ADR_WRITE                               0     0      0      47
              _I2C1_MasterSendTxData
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_SEND_ADR_READ                                0     0      0      47
              _I2C1_MasterSendTxData
 ---------------------------------------------------------------------------------
 (10) _I2C1_MasterSendTxData                               1     1      0      47
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_RX_ACK                                       0     0      0       0
                 _I2C1_MasterSendAck
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_RX                                           2     2      0    2643
                                              8 BANK0      2     2      0
                                NULL *
           _I2C1_CallbackReturnReset *
            _I2C1_CallbackReturnStop *
            _I2C1_DO_RX_NACK_RESTART
               _I2C1_DO_RX_NACK_STOP
               _I2C1_MasterGetRxData
                 _I2C1_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (10) _I2C1_MasterSendAck                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C1_MasterGetRxData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_RX_NACK_STOP                                 0     0      0       0
                _I2C1_MasterSendNack
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_RX_NACK_RESTART                              0     0      0       0
                _I2C1_MasterSendNack
 ---------------------------------------------------------------------------------
 (10) _I2C1_MasterSendNack                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_RCEN                                         0     0      0       0
                 _I2C1_MasterStartRx
 ---------------------------------------------------------------------------------
 (10) _I2C1_MasterStartRx                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_DO_ADDRESS_NACK                                 2     2      0    2643
                                              8 BANK0      2     2      0
                                NULL *
           _I2C1_CallbackReturnReset *
            _I2C1_CallbackReturnStop *
               _I2C1_DO_SEND_RESTART
                  _I2C1_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (10) _wr2RegCompleteHandler                               1     0      1     520
                                              7 BANK0      1     0      1
                     _I2C1_SetBuffer
       _I2C1_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (10) _wr1RegCompleteHandler                               1     0      1     520
                                              7 BANK0      1     0      1
                     _I2C1_SetBuffer
       _I2C1_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (10) _rdBlkRegCompleteHandler                             1     0      1     551
                                              7 BANK0      1     0      1
                     _I2C1_SetBuffer
       _I2C1_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (10) _rd2RegCompleteHandler                               1     0      1     520
                                              7 BANK0      1     0      1
                     _I2C1_SetBuffer
       _I2C1_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (10) _rd1RegCompleteHandler                               1     0      1     520
                                              7 BANK0      1     0      1
                     _I2C1_SetBuffer
       _I2C1_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (11) _I2C1_SetDataCompleteCallback                        3     0      3     385
                                              4 BANK0      3     0      3
                   _I2C1_SetCallback
 ---------------------------------------------------------------------------------
 (6) _I2C1_SetCallback                                     6     3      3     293
                                              4 COMMON     2     2      0
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (5) _I2C1_SetBuffer                                       4     0      4     104
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (10) _I2C1_DO_SEND_STOP                                   0     0      0       0
                    _I2C1_MasterStop
 ---------------------------------------------------------------------------------
 (11) _I2C1_MasterStop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C1_DO_SEND_RESTART                                0     0      0       0
           _I2C1_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (11) _I2C1_MasterEnableRestart                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C1_CallbackReturnStop                             1     0      1       0
                                              7 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (10) _I2C1_CallbackReturnReset                            1     0      1      12
                                              7 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (15) NULL(Fake)                                           1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_MasterStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C1_Close                                           1     1      0      37
                                              4 COMMON     1     1      0
                _I2C1_MasterClearIrq
                   _I2C1_MasterClose
              _I2C1_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterDisableIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterClose                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterClearIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getHis                                               6     4      2    1834
                                             32 BANK0      6     4      2
                     _sendSensorData
 ---------------------------------------------------------------------------------
 (2) _sendSensorData                                      12    10      2    1627
                                             20 BANK0     12    10      2
                      _int16ToString
                         _sendPacket
                          _stringlen
 ---------------------------------------------------------------------------------
 (2) _stringlen                                            3     1      2     148
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _sendPacket                                          12     6      6     198
                                              1 BANK0     12     6      6
                      _EUSART1_Write
                 _EUSART1_is_tx_done
                _EUSART1_is_tx_ready
                    _TxDeviceDisable
                     _TxDeviceEnable
                          _stringlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _TxDeviceEnable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TxDeviceDisable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EUSART1_is_tx_ready                                  1     1      0      37
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _EUSART1_is_tx_done                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Write                                        1     1      0      47
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _int16ToString                                       14    10      4    1091
                                              5 COMMON     1     1      0
                                              7 BANK0     13     9      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     238
                                              4 COMMON     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     253
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRxBuffer                                        12     6      6     136
                                              4 COMMON     2     2      0
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) _getMetrics                                           2     0      2    1601
                                             30 BANK0      2     0      2
                             _getMax
                             _getMed
                             _getMin
 ---------------------------------------------------------------------------------
 (2) _getMin                                              11     9      2     337
                                              4 COMMON     2     0      2
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _getMed                                              16    14      2     732
                                             14 BANK0     16    14      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     451
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _getMax                                              11     9      2     337
                                              4 COMMON     2     0      2
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _TMR4_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR4_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     238
                    _CMP1_Initialize
                    _DAC1_Initialize
                 _EUSART1_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0      34
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2      34
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      34
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      34
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      34
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      34
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     136
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2      34
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2      34
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2      34
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2      34
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                          0     0      0      46
                                NULL *
                           _CMP1_ISR
                _EUSART1_Receive_ISR *
                           _TMR0_ISR
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (14) _TMR4_ISR                                            0     0      0       0
                                NULL *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR4_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR2_ISR                                            0     0      0       0
                                NULL *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR0_ISR                                            0     0      0       0
                                NULL *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EUSART1_Receive_ISR                                 0     0      0      46
                                NULL *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultOverrunErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultErrorHandler                         0     0      0      23
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (15) _EUSART1_RxDataHandler                               4     4      0      23
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (15) NULL(Fake)                                           1     0      1       0
 ---------------------------------------------------------------------------------
 (14) _CMP1_ISR                                            0     0      0       0
               _CMP1_GetOutputStatus
 ---------------------------------------------------------------------------------
 (15) _CMP1_GetOutputStatus                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _CMP1_Initialize
     _DAC1_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
   _TMR2_Start
   _TMR2_Stop
   _TMR4_Start
   _TMR4_Stop
   _TxDeviceDisable
   _getINA220Data
     _readINA220
       _I2C1_ReadNBytes
         _I2C1_Close
           _I2C1_MasterClearIrq
           _I2C1_MasterClose
           _I2C1_MasterDisableIrq
         _I2C1_MasterRead
           _I2C1_MasterOperation
             _I2C1_MasterStart
             _I2C1_Poller
               _I2C1_MasterFsm
                 _I2C1_DO_ADDRESS_NACK *
                   NULL(Fake) *
                   _I2C1_CallbackReturnReset *
                   _I2C1_CallbackReturnStop *
                   _I2C1_DO_SEND_RESTART *
                     _I2C1_MasterEnableRestart
                   _I2C1_DO_SEND_STOP *
                     _I2C1_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C1_SetBuffer
                     _I2C1_SetDataCompleteCallback
                       _I2C1_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C1_SetBuffer
                     _I2C1_SetDataCompleteCallback
                   _rdBlkRegCompleteHandler *
                     _I2C1_SetBuffer
                     _I2C1_SetDataCompleteCallback
                   _wr1RegCompleteHandler *
                     _I2C1_SetBuffer
                     _I2C1_SetDataCompleteCallback
                   _wr2RegCompleteHandler *
                     _I2C1_SetBuffer
                     _I2C1_SetDataCompleteCallback
                 _I2C1_DO_IDLE *
                 _I2C1_DO_RCEN *
                   _I2C1_MasterStartRx
                 _I2C1_DO_RESET *
                 _I2C1_DO_RX *
                   NULL(Fake) *
                   _I2C1_CallbackReturnReset *
                   _I2C1_CallbackReturnStop *
                   _I2C1_DO_RX_NACK_RESTART *
                     _I2C1_MasterSendNack
                   _I2C1_DO_RX_NACK_STOP *
                     _I2C1_MasterSendNack
                   _I2C1_MasterGetRxData *
                   _I2C1_MasterSendAck *
                   _rd1RegCompleteHandler *
                   _rd2RegCompleteHandler *
                   _rdBlkRegCompleteHandler *
                   _wr1RegCompleteHandler *
                   _wr2RegCompleteHandler *
                 _I2C1_DO_RX_ACK *
                   _I2C1_MasterSendAck
                 _I2C1_DO_RX_NACK_RESTART *
                 _I2C1_DO_RX_NACK_STOP *
                 _I2C1_DO_SEND_ADR_READ *
                   _I2C1_MasterSendTxData
                 _I2C1_DO_SEND_ADR_WRITE *
                   _I2C1_MasterSendTxData
                 _I2C1_DO_SEND_RESTART *
                 _I2C1_DO_SEND_RESTART_READ *
                   _I2C1_MasterEnableRestart
                 _I2C1_DO_SEND_RESTART_WRITE *
                   _I2C1_MasterEnableRestart
                 _I2C1_DO_SEND_STOP *
                 _I2C1_DO_TX *
                   NULL(Fake) *
                   _I2C1_CallbackReturnReset *
                   _I2C1_CallbackReturnStop *
                   _I2C1_DO_SEND_RESTART_READ *
                   _I2C1_DO_SEND_RESTART_WRITE *
                   _I2C1_DO_SEND_STOP *
                   _I2C1_MasterIsNack *
                   _I2C1_MasterSendTxData *
                   _rd1RegCompleteHandler *
                   _rd2RegCompleteHandler *
                   _rdBlkRegCompleteHandler *
                   _wr1RegCompleteHandler *
                   _wr2RegCompleteHandler *
                 _I2C1_DO_TX_EMPTY *
                   NULL(Fake) *
                   _I2C1_CallbackReturnReset *
                   _I2C1_CallbackReturnStop *
                   _I2C1_DO_SEND_RESTART *
                   _I2C1_DO_SEND_STOP *
                   _I2C1_MasterSetIrq *
                   _rd1RegCompleteHandler *
                   _rd2RegCompleteHandler *
                   _rdBlkRegCompleteHandler *
                   _wr1RegCompleteHandler *
                   _wr2RegCompleteHandler *
                 _I2C1_MasterClearIrq *
                 _I2C1_MasterIsNack *
               _I2C1_MasterWaitForEvent
         _I2C1_Open
           _I2C1_MasterClearIrq
           _I2C1_MasterOpen
         _I2C1_SetBuffer
       _I2C1_WriteNBytes
         _I2C1_Close
         _I2C1_MasterWrite
           _I2C1_MasterOperation
         _I2C1_Open
         _I2C1_SetAddressNackCallback
           _I2C1_SetCallback
         _I2C1_SetBuffer
     _writeINA220
       _I2C1_WriteNBytes
   _getMetrics
     _getMax
     _getMed
       ___aldiv
     _getMin
   _initRxBuffer
   _processCommand
     _TMR0_Reload
     _getHis
       _sendSensorData
         _int16ToString
           ___lwdiv
           ___lwmod
         _sendPacket
           _EUSART1_Write
           _EUSART1_is_tx_done
           _EUSART1_is_tx_ready
           _TxDeviceDisable
           _TxDeviceEnable
           _stringlen (ARG)
         _stringlen
     _getINA220Data
     _getMax
     _getMed
     _getMin
     _sendSensorData
     _sendSensorInfo
       _sendPacket
     _stringToInt16
       ___wmul
       _stringlen (ARG)
     _stringlen
   _receiveData
     _EUSART1_Read
   _stringCompare

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _CMP1_ISR *
     _CMP1_GetOutputStatus
   _EUSART1_Receive_ISR *
     NULL(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _TMR0_ISR *
     NULL(Fake) *
     _TMR0_DefaultInterruptHandler *
   _TMR2_ISR *
     NULL(Fake) *
     _TMR2_DefaultInterruptHandler *
   _TMR4_ISR *
     NULL(Fake) *
     _TMR4_DefaultInterruptHandler *

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            80      0       0      0.0%
BITBANK5            80      0       0      0.0%
BITBANK6            80      0       0      0.0%
BITBANK7            80      0       0      0.0%
BITBANK8            80      0       0      0.0%
BITBANK9            80      0       0      0.0%
BITBANK10           80      0       0      0.0%
BITBANK11           80      0       0      0.0%
BITBANK12           48      0       0      0.0%
BIGRAM            1008      0       0      0.0%
COMMON              14      6      10     71.4%
BANK0               80     54      71     88.8%
BANK1               80      0      79     98.8%
BANK2               80     11      70     87.5%
BANK3               80      0      59     73.8%
BANK4               80      0      59     73.8%
BANK5               80      0      64     80.0%
BANK6               80      0      64     80.0%
BANK7               80      0       0      0.0%
BANK8               80      0       0      0.0%
BANK9               80      0       0      0.0%
BANK10              80      0       0      0.0%
BANK11              80      0       0      0.0%
BANK12              48      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     476      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Mar 25 13:10:18 2025

              __end_of_TMR2_SetInterruptHandler 094D                             readINA220@pRxbuffer 0036  
                           readINA220@pTxbuffer 0037                               ??_CMP1_Initialize 0074  
                           ___wmul@multiplicand 0022                                 _DAC1_Initialize 092F  
                                           l513 0777                                             l196 09A1  
                                           l456 0B26                                             l529 0FD8  
                                           l670 0904                           ?_I2C1_MasterOperation 0070  
                               _TMR2_Initialize 0B00                                             wreg 0009  
                        ?_I2C1_MasterSendTxData 0070                            _I2C1_DO_RX_NACK_STOP 08FC  
                          receiveData@charCount 0024                       ?_I2C1_MasterEnableRestart 0070  
                               initRxBuffer@buf 0020                            I2C1_SetBuffer@buffer 0020  
                                   _status_prev 00E0                                            l1111 0656  
                                          l1113 068A                                            l1050 00A9  
                                          l1052 00E8                         ??_rd2RegCompleteHandler 0076  
                                          l1301 0392                                            l1061 0164  
                                          l1053 0109                                            l1063 0178  
                                          l1056 0168                                            l1163 0E07  
                                          l1068 0174                                            l1245 0417  
                                          l1246 046D                                            l1177 04A4  
                                          l1453 0B54                                            l1518 0521  
                                          l1295 0315                                            l5001 04E3  
                                          l5021 0AF5                                            l5015 0AEC  
                                          l5113 0585                                            l5105 056C  
                                          l5109 0577                                            l5141 0A23  
                                          l5065 0B4E                                            l5313 05A6  
                                          l5315 05E5                                            l5333 0735  
                                          l5421 0C4D                                            l4621 074D  
                                          l5095 0540                                            l5087 0530  
                                          l4703 0D22                                            l4631 0753  
                                          l5329 06FC                                            l5097 054C  
                                          l5353 06E6                                            l4473 0EBE  
                                          l4625 0750                                            l4617 074A  
                                          l5281 07A1                                            l5433 0BD2  
                                          l5425 0BC0                                            l5371 0609  
                                          l5451 0E32                                            l5349 06AD  
                                          l4661 0FDA                                            l4725 0CC7  
                                          l5461 022E                                            l4911 0CF1  
                                          l5391 07E1                                            l4639 078F  
                                          l4671 0FE0                                            l4735 0CCD  
                                          l4751 0C0E                                            l5463 0269  
                                          l5551 0175                                            l5543 0159  
                                          l4913 0CFB                                            l4921 0D10  
                                          l4665 0FDD                                            l4729 0CCA  
                                          l4761 09B2                                            l5473 02EB  
                                          l5465 0294                                            l5457 0220  
                                          l5449 0E25                                            l5561 0191  
                                          l5537 012A                                            l4691 0D1B  
                                          l5299 05A0                                            l5483 0318  
                                          l5475 02FD                                            l5467 02BF  
                                          l5459 0227                                            l5563 0195  
                                          l5547 0165                                            l4917 0D07  
                                          l5661 0CE2                                            l4829 0E01  
                                          l5485 0324                                            l5493 036C  
                                          l5573 01D6                                            l5557 0189  
                                          l4863 09CF                                            l4847 0AD3  
                                          l4687 0D18                                            l5663 0FF1  
                                          l4935 0CBB                                            l4927 0C9B  
                                          l5487 0337                                            l5479 0313  
                                          l4697 0D1F                                            l5665 0769  
                                          l4793 0B2E                                            l4945 0BB8  
                                          l5489 034A                                            l5577 01F9  
                                          l5569 01C7                                            l4963 069A  
                                          l4955 067E                                            l5667 0D33  
                                          l4939 0BA2                                            l4965 06A2  
                                          l4895 0DC2                                            l4887 0DA6  
                                          l4983 04B4                                            l4975 049D  
                                          l4959 0690                                            l4889 0DB0  
                                          l4899 0DCB                                            l4995 04D5  
                                          l4989 04B6                                            _LATA 0018  
                                          u3110 079B                                            u3015 0543  
                                          _LATC 001A                                            u3035 054D  
                                          u3045 0561                                            u3205 06CF  
                                          u3125 07C7                                            u3055 056D  
                                          u3320 009A                                            _T2PR 028D  
                                          u3315 0E11                                            u3175 071E  
                                          _T4PR 0293                                            u3275 0C64  
                                          u2715 0CF4                                            u2645 0DA9  
                                          u3445 01A1                                            u2735 0D01  
                                          u3455 01C2                                            u2665 0DB1  
                                          u2745 0D08                                            u2905 050E  
                                          u2825 066D                                            u3465 01D1  
                                          u2930 0EE0                                            u2675 0DBB  
                                          u3475 01F4                                            _PMD0 0796  
                                          u2685 0DC3                                            u3485 0217  
                                          _PMD1 0797                                            _PMD2 0798  
                                          _PMD3 0799                                            _PMD4 079A  
                                          u3497 0398                                            _PMD5 079B  
                                          _PMD6 079C                                            u2955 0B55  
                                          _PMD7 079D                                            u2885 04CF  
                                          u2965 0B5A                                            _WPUA 1F39  
                                          _WPUC 1F4F                         ??_wr2RegCompleteHandler 0076  
                              ??_I2C1_MasterFsm 002A                                   _EUSART1_Write 099E  
                     ??_I2C1_CallbackReturnStop 0076                                            _cons 0220  
                                          _main 0090                                   ?_EUSART1_Read 0070  
                                          fsr0h 0005                                            fsr1h 0007  
                                          indf0 0000                                            fsr0l 0004  
                                          indf1 0001                                            fsr1l 0006  
                                          btemp 007E                                            start 0030  
                              ??_I2C1_SetBuffer 0074                                __end_of_CMP1_ISR 0A03  
                    ??_TMR4_SetInterruptHandler 0076                                     _writeINA220 0A34  
                     sendSensorData@sensor_data 0034                                initRxBuffer@size 0022  
                 I2C1_CallbackReturnStop@funPtr 0027                         __end_of_TMR0_Initialize 0B4C  
                ??_TMR0_DefaultInterruptHandler 0070                               stringToInt16@sign 0027  
                 __end_of_OSCILLATOR_Initialize 099E                               ??_I2C1_ReadNBytes 0076  
                         _eusart1RxStatusBuffer 0320                                 __end_of___aldiv 058E  
                             __end_of_I2C1_Open 0E03                                           ?_main 0070  
                                         _T2CON 028E                          I2C1_ReadNBytes@address 0031  
                                         _T4CON 0294                                           _T2HLT 028F  
                                         _T4HLT 0295                                 __end_of___lwdiv 0DD0  
                                         _T2TMR 028C                                           _T2RST 0291  
                               __end_of___lwmod 0D15                                           _T4TMR 0292  
                                         i1l711 000E                                           i1l714 0017  
                                         _T4RST 0297                                           i1l723 002E  
                                         i1l716 001E                                           i1l718 0025  
                                         _OSCEN 0891                                           _TMR0H 059D  
                                         _TMR0L 059C                                  _TxDeviceEnable 08AB  
                                         _TRISA 0012                                           _TRISC 0014  
                        ??_I2C1_MasterGetRxData 0074                           ?_I2C1_DO_RX_NACK_STOP 0070  
                               _TMR4_Initialize 0AAB                       ?_TMR0_SetInterruptHandler 0074  
                             ??_I2C1_MasterRead 0076                      ??_I2C1_CallbackReturnReset 0076  
                             ??_I2C1_MasterOpen 0074                               ??_I2C1_MasterStop 0074  
                             ??_I2C1_Initialize 0074                                __end_of_TMR0_ISR 0A5B  
                              __end_of_TMR2_ISR 09DD                                __end_of_TMR4_ISR 09E9  
                                   ?_TMR2_Start 0070                                           _panel 01A0  
                                   ?_TMR4_Start 0070                                  ?_EUSART1_Write 0070  
                                         pclath 000A                                  ??_EUSART1_Read 0074  
                                         status 0003                                           wtemp0 007E  
                                  ??_I2C1_DO_RX 0028                                    ??_I2C1_DO_TX 0028  
                                  ?_receiveData 0020              _EUSART1_DefaultFramingErrorHandler 0000  
                        ??_I2C1_DO_ADDRESS_NACK 0028                                    ??_I2C1_Close 0074  
                           sendPacket@byteCount 0023                    __end_of_CMP1_GetOutputStatus 092F  
                                 _fsmStateTable 1000                                 __initialization 0032  
                    __end_of_EUSART1_Initialize 0D9E                                    __end_of_main 021D  
                       __end_of_DAC1_Initialize 0935                         __end_of_TMR2_Initialize 0B17  
                   ?_INTERRUPT_InterruptManager 0070                          __end_of_TxDeviceEnable 08AD  
                        ??_I2C1_MasterOperation 0076                        _TMR2_SetInterruptHandler 0947  
                                        ??_main 004F                                   ?_initRxBuffer 0020  
                                _sendSensorData 0ED6                                  _sendSensorInfo 0791  
                            __end_of_I2C1_DO_RX 1000                              __end_of_I2C1_DO_TX 0791  
                            __end_of_I2C1_Close 0AD5                        __end_of_I2C1_WriteNBytes 0CC2  
                                        _CM1NCH 0992                                          _CM1PCH 0993  
                                        _ANSELA 1F38                                          _ANSELC 1F4E  
                                        _T0CON0 059E                                          _T0CON1 059F  
                                        _RC1REG 0119                                          _RC0PPS 1F20  
                                        _RC1PPS 1F21                                          _RC1STA 011D  
                                        _RC4PPS 1F24                                          _ODCONA 1F3A  
                                        _ODCONC 1F50                                          i1l4151 0C39  
                                        i1l4155 0C48                                          i1l4177 0A00  
                                        i1l3765 0D5E                                          _INLVLA 1F3C  
                                        _INLVLC 1F52                                          _OSCFRQ 0893  
                                        _RX1PPS 1ECB                                          _TX1REG 011A  
                                        _TX1STA 011E                               ?_I2C1_MasterClose 0070  
                               _TxDeviceDisable 08BD                         ??_I2C1_MasterDisableIrq 0074  
                             ?_I2C1_MasterStart 0070                               ?_I2C1_MasterWrite 0070  
                      ?_I2C1_MasterWaitForEvent 0070                              ??_I2C1_MasterClose 0074  
                              _I2C1_DO_TX_EMPTY 0D15                              ??_I2C1_MasterStart 0074  
                              ??_processCommand 004A                           processCommand@command 004E  
                            ??_I2C1_MasterWrite 0076                                    ?_TMR0_Reload 0070  
                                     ??___aldiv 0074                                          ___wmul 0B4C  
                             __end_of_TMR2_Stop 08AB                               __end_of_TMR4_Stop 08BD  
                                        _getMed 05F9                                          _getHis 07D9  
                                        _getMax 06F4                                          _getMin 06A5  
                                     ??___lwdiv 0074                                       ??___lwmod 0074  
                      ?_EUSART1_SetErrorHandler 0074                          __end_of_sendSensorData 0F0D  
                              ?_TMR0_Initialize 0070                         __end_of_TMR4_Initialize 0AC0  
                        __end_of_sendSensorInfo 07D9                                  ??_initRxBuffer 0026  
              ??_EUSART1_SetOverrunErrorHandler 0076                 ?_EUSART1_SetOverrunErrorHandler 0074  
                               ?_TxDeviceEnable 0070                                          _status 0056  
                      ??_I2C1_DO_SEND_ADR_WRITE 0075                               ?_I2C1_SetCallback 0020  
                        ??_I2C1_DO_RX_NACK_STOP 0074            __end_of_TMR4_DefaultInterruptHandler 08A7  
                  _TMR4_DefaultInterruptHandler 08A5                           _I2C1_DO_SEND_ADR_READ 097A  
                                _PMD_Initialize 0A12                   ?_I2C1_SetDataCompleteCallback 0024  
                            ??_I2C1_SetCallback 0074                           __end_of_int16ToString 0511  
                                     ?_CMP1_ISR 0070                                 ??_EUSART1_Write 0074  
      TMR0_SetInterruptHandler@InterruptHandler 0074        TMR4_SetInterruptHandler@InterruptHandler 0074  
      TMR2_SetInterruptHandler@InterruptHandler 0074                               readINA220@address 0032  
                               _eusart1RxBuffer 02A0                         _I2C1_DO_RX_NACK_RESTART 0900  
                           I2C1_WriteNBytes@len 002F                               _SYSTEM_Initialize 0B83  
                I2C1_SetDataCompleteCallback@cb 0024                         __end_of__initialization 008C  
                               _CMP1_Initialize 0A03                 I2C1_MasterOperation@returnValue 002D  
                            ?_SYSTEM_Initialize 0070                                   ??_I2C1_Poller 0076  
                 __end_of_EUSART1_RxDataHandler 0D70                         _rdBlkRegCompleteHandler 0B67  
                                 _stringCompare 0E03                                  __pcstackCOMMON 0070  
                                  __pidataBANK0 0982                                    __pidataBANK1 0BDE  
                                  __pidataBANK2 0F83                                    __pidataBANK3 0F48  
                                  __pidataBANK4 0F0D                             ??_SYSTEM_Initialize 0076  
              __end_of_I2C1_MasterEnableRestart 08CC                                ?_DAC1_Initialize 0070  
                                     ?_TMR0_ISR 0070                                   _stringToInt16 058E  
                                     ?_TMR2_ISR 0070                            sendSensorData@F11244 00D1  
                                     ?_TMR4_ISR 0070                                 ?_sendSensorData 0034  
                           getINA220Data@device 003D                                ?_TMR2_Initialize 0070  
                               ?_sendSensorInfo 002D                          __end_of_PMD_Initialize 0A23  
                  ??_I2C1_DO_SEND_RESTART_WRITE 0074                         ??_I2C1_MasterSendTxData 0074  
                          __end_of_EUSART1_Read 0A34                     __end_of_EUSART1_Receive_ISR 0C4B  
                 ?_TMR4_DefaultInterruptHandler 0070                           __end_of_I2C1_DO_RESET 0929  
                          _CMP1_GetOutputStatus 0929                                      ??_CMP1_ISR 0070  
                       __end_of_TxDeviceDisable 08C0                       __end_of_SYSTEM_Initialize 0BA1  
                                 _eusart1RxHead 0079                                   _eusart1RxTail 0078  
                                    __pbssBANK0 0064                                      __pbssBANK1 00A0  
                                    __pbssBANK5 02A0                                      __pbssBANK6 0320  
               __end_of_I2C1_MasterWaitForEvent 0908                 ??_EUSART1_SetRxInterruptHandler 0076  
                 __end_of_rd2RegCompleteHandler 0A97                            I2C1_Open@returnValue 0075  
                          writeINA220@pTxbuffer 0036                            sendSensorData@packet 0038  
                 __end_of_wr2RegCompleteHandler 0A6F                           _TMR4_InterruptHandler 0060  
                         _rd1RegCompleteHandler 0A6F                                 _I2C1_ReadNBytes 0BA1  
                             _I2C1_DO_SEND_STOP 08F4                                  ?_stringCompare 0020  
                         stringToInt16@multiple 0028                           _wr1RegCompleteHandler 0A97  
               __end_of_EUSART1_SetErrorHandler 0915                             stringToInt16@result 002A  
                                  ?_writeINA220 0032                                      __pmaintext 0090  
                      rd1RegCompleteHandler@ptr 0027                             stringToInt16@string 0024  
                           stringToInt16@strlen 0026                                     sendPacket@i 002B  
                                ?_stringToInt16 0024                __end_of_TMR0_SetInterruptHandler 0947  
                            ?_I2C1_DO_SEND_STOP 0070                                         ?___wmul 0020  
                                    ??_TMR0_ISR 0070                                      ??_TMR2_ISR 0070  
                                    ??_TMR4_ISR 0070                                 _I2C1_MasterRead 0908  
                                       ?_getMed 002E                                         ?_getHis 0040  
                                       ?_getMax 0074                                         ?_getMin 0074  
                               _I2C1_MasterOpen 09E9                                      __pintentry 0004  
                               _I2C1_MasterStop 08CC                                 _I2C1_Initialize 098A  
                                       _CM1CON0 0990                                         _CM1CON1 0991  
                           __end_of_I2C1_Poller 09BC                                   sendPacket@str 0021  
                                    _getMetrics 0E6A                                ?_TMR4_Initialize 0070  
                     sendSensorInfo@sensor_info 002D                                 ?_PMD_Initialize 0070  
                        ?_I2C1_DO_SEND_ADR_READ 0070                             ??_I2C1_DO_SEND_STOP 0074  
        __end_of_EUSART1_SetFramingErrorHandler 093B                  _EUSART1_SetFramingErrorHandler 0935  
                                int16ToString@i 002E                                         _CPUDOZE 088C  
                  ?_EUSART1_DefaultErrorHandler 0070                               _I2C1_MasterIsNack 0953  
                                       _SP1BRGH 011C                                         _SP1BRGL 011B  
                                       _OSCCON1 088D                                         _OSCCON3 088F  
                                     _I2C1_Open 0DD0                       ??_I2C1_DO_RX_NACK_RESTART 0074  
                         ?_CMP1_GetOutputStatus 0070                                         _OSCTUNE 0892  
                             _I2C1_MasterSetIrq 08D5                                         _SSP1ADD 018D  
                                       _SLRCONA 1F3B                                         _SLRCONC 1F51  
                                       _SSP1BUF 018C                                    ??_TMR2_Start 0074  
                            ?_I2C1_MasterIsNack 0070                      ?_I2C1_DO_SEND_RESTART_READ 0070  
                       __end_of_CMP1_Initialize 0A12                                    ??_TMR4_Start 0074  
                ??_I2C1_SetDataCompleteCallback 0076                              ?_I2C1_MasterSetIrq 0070  
                                       _BuffReg 00BE                                      _readINA220 0E36  
                          __end_of_initRxBuffer 0C72                             ??_I2C1_MasterIsNack 0074  
                     __end_of_I2C1_DO_SEND_STOP 08F8                       ??_rdBlkRegCompleteHandler 0076  
                            I2C1_SetCallback@cb 0020                             int16ToString@flag_0 002B  
                           ??_I2C1_MasterSetIrq 0074                      ??_TMR2_SetInterruptHandler 0076  
                           int16ToString@result 002C                                         ___aldiv 0511  
                                       ___lwdiv 0D9E                                         ___lwmod 0CEB  
                            __end_of_TMR2_Start 08A9                      __end_of_EUSART1_is_tx_done 08E0  
                                 ?_I2C1_DO_IDLE 0070                              __end_of_TMR4_Start 08BA  
                                       _battery 0120                                   ?_I2C1_DO_RCEN 0070  
                           _EUSART1_is_tx_ready 09C6                                         __ptext1 0E03  
                                       __ptext2 0BBF                                         __ptext3 0A23  
                                       __ptext4 021D                                         __ptext5 058E  
                                       __ptext6 0B4C                                         __ptext7 0791  
                                       __ptext8 0393                                         __ptext9 0A34  
                      _I2C1_MasterEnableRestart 08C9                       __end_of_I2C1_MasterIsNack 0959  
                                 _getINA220Data 0393                    ?_I2C1_SetAddressNackCallback 0024  
                         _OSCILLATOR_Initialize 0994                                       _T2CONbits 028E  
                     __end_of_I2C1_MasterSetIrq 08D8                        __end_of_I2C1_DO_TX_EMPTY 0D42  
                              ___aldiv@dividend 0024                                       _T4CONbits 0294  
                            _EUSART1_Initialize 0D70                        ??_PIN_MANAGER_Initialize 0074  
                      wr1RegCompleteHandler@ptr 0027                                      ?_I2C1_Open 0070  
                                       getMed@i 003C                                         getHis@i 0044  
                     ?_TMR4_SetInterruptHandler 0074                                         getMax@i 0027  
                                       getMin@i 0027                                    stringlen@idx 0020  
                                  stringlen@str 0074                   ??_EUSART1_DefaultErrorHandler 0074  
                              stringCompare@buf 0022                                stringCompare@idx 0026  
                              stringCompare@str 0020                        ?_I2C1_CallbackReturnStop 0027  
                             ?_I2C1_WriteNBytes 002E                                ?_TxDeviceDisable 0070  
                          sendSensorInfo@F11239 00D9                                         clrloop0 0960  
                                    _sendPacket 0651               __end_of_I2C1_DO_SEND_RESTART_READ 08EC  
                          end_of_initialization 008C                      __end_of_I2C1_MasterSendAck 08E8  
                       __end_of_I2C1_ReadNBytes 0BBF                             _I2C1_MasterClearIrq 08C0  
                ??_TMR4_DefaultInterruptHandler 0070                             ?_EUSART1_Initialize 0070  
                            ??_I2C1_WriteNBytes 0076                            ?_EUSART1_is_tx_ready 0070  
                                       init_ram 0965                      __end_of_I2C1_MasterStartRx 08D2  
                   _EUSART1_OverrunErrorHandler 00E9                          ?_rd1RegCompleteHandler 0027  
                                       initloop 0966                                   readINA220@ret 003B  
                        _I2C1_DO_SEND_ADR_WRITE 096B                                      getMed@data 002E  
                                    getMed@buff 0038                                 ??_stringCompare 0074  
                                    getHis@data 0040                    __end_of_I2C1_DO_SEND_RESTART 08F4  
                       __end_of_I2C1_MasterRead 090C                         __end_of_I2C1_MasterOpen 09F5  
                        ?_wr1RegCompleteHandler 0027                         __end_of_I2C1_MasterStop 08CF  
                       __end_of_I2C1_Initialize 0994           __end_of_EUSART1_SetRxInterruptHandler 0941  
                 _EUSART1_SetRxInterruptHandler 093B                                      getMax@data 0074  
                                   _I2C1_Poller 09B2                                 ??_stringToInt16 0076  
                     ?_I2C1_CallbackReturnReset 0027                   __end_of_I2C1_MasterDisableIrq 08AF  
                                    getMin@data 0074                                     _I2C1_Status 00A0  
                               receiveData@data 0020                                ___aldiv@quotient 002A  
                              ??_TxDeviceEnable 0074                             _I2C1_MasterSendNack 08E0  
                                    main@F11276 00C6             __end_of_I2C1_SetAddressNackCallback 09C6  
                   _I2C1_SetAddressNackCallback 09BC                            ?_I2C1_MasterClearIrq 0070  
                                ??_I2C1_DO_IDLE 0074                            ??_EUSART1_Initialize 0076  
                                ??_I2C1_DO_RCEN 0074              __end_of_I2C1_DO_SEND_RESTART_WRITE 08F0  
                                   ?_getMetrics 003E                      _I2C1_DO_SEND_RESTART_WRITE 08EC  
                                ?_getINA220Data 003D                        _TMR0_SetInterruptHandler 0941  
                                     _TMR2_Stop 08A9                 __end_of_rdBlkRegCompleteHandler 0B83  
                          sendSensorInfo@packet 0033                                       _TMR4_Stop 08BA  
                             __end_of_stringlen 0B00                            I2C1_WriteNBytes@data 002E  
                        ??_CMP1_GetOutputStatus 0070                   ??_I2C1_SetAddressNackCallback 0076  
               I2C1_SetDataCompleteCallback@ptr 0026                  I2C1_CallbackReturnReset@funPtr 0027  
                          ?_I2C1_MasterSendNack 0070                             EUSART1_Write@txData 0074  
                              ?_CMP1_Initialize 0070                           ??_EUSART1_is_tx_ready 0074  
                                   _CM1CON0bits 0990                                     ?_readINA220 0032  
                    rdBlkRegCompleteHandler@ptr 0027                                    _EUSART1_Read 0A23  
                                    main@packet 015B                                ??_sendSensorData 0036  
                              ??_sendSensorInfo 002F                            _timer0ReloadVal16bit 0064  
                         ??_I2C1_MasterClearIrq 0074            __end_of_TMR2_DefaultInterruptHandler 08A5  
                  _TMR2_DefaultInterruptHandler 08A3                                  __end_of___wmul 0B67  
                                _I2C1_DO_RX_ACK 08F8                                  __end_of_getMed 0651  
                                __end_of_getHis 0800                                  __end_of_getMax 0743  
                                __end_of_getMin 06F4                                      ?_TMR2_Stop 0070  
                        ?_OSCILLATOR_Initialize 0070                                      ?_TMR4_Stop 0070  
               __end_of_I2C1_CallbackReturnStop 08B1                                    receiveData@c 0023  
                 __end_of_I2C1_MasterSendTxData 091F                             start_initialization 0032  
                              getMetrics@device 003E                                     ??_I2C1_Open 0074  
                         ??_I2C1_MasterSendNack 0074                           int16ToString@dividend 0030  
 EUSART1_SetRxInterruptHandler@interruptHandler 0074                                     ?_sendPacket 0021  
                         __end_of_EUSART1_Write 09A8                                ?_I2C1_ReadNBytes 002E  
                      I2C1_SetBuffer@bufferSize 0022                                ?_I2C1_MasterRead 0070  
                              ?_I2C1_MasterOpen 0070                                ?_I2C1_MasterStop 0070  
                              ?_I2C1_Initialize 0070                                ??_PMD_Initialize 0074  
                        __end_of_I2C1_DO_RX_ACK 08FC                                        ??___wmul 0074  
                          processCommand@sensor 0048                           _EUSART1_RxDataHandler 0D42  
                       ??_I2C1_DO_SEND_ADR_READ 0074                                        ??_getMed 0030  
                                      ??_getHis 0042                                        ??_getMax 0020  
                                      ??_getMin 0020                  ?_EUSART1_SetRxInterruptHandler 0074  
                                   __pdataBANK0 0056                                     __pdataBANK1 00C6  
                                   __pdataBANK2 0120                                     __pdataBANK3 01A0  
                                   __pdataBANK4 0220                                 ??_getINA220Data 003F  
                 ?_TMR2_DefaultInterruptHandler 0070                                I2C1_Open@address 0074  
                                _eusart1RxCount 0077                                    _initRxBuffer 0C4B  
                              readINA220@regadd 003A                                     __pbssCOMMON 0076  
                          _I2C1_DO_SEND_RESTART 08F0               _EUSART1_RxDefaultInterruptHandler 00ED  
                                     ___latbits 0002                             writeINA220@Txbuffer 0037  
                                 __pcstackBANK0 0020                                   __pcstackBANK2 015B  
                   ??_I2C1_DO_SEND_RESTART_READ 0074                             _eusart1PacketFinish 0066  
                          __end_of_I2C1_DO_IDLE 0924                ??_EUSART1_SetFramingErrorHandler 0076  
               ?_EUSART1_SetFramingErrorHandler 0074                            __end_of_I2C1_DO_RCEN 095F  
                                 ??_receiveData 0075                   I2C1_SetAddressNackCallback@cb 0024  
                         _TMR0_InterruptHandler 005E                                       __pnvBANK0 005E  
                                     __pnvBANK1 00E7                           _rd2RegCompleteHandler 0A83  
                         __end_of_fsmStateTable 1020                                ___lwdiv@dividend 0022  
                        _PIN_MANAGER_Initialize 0C72                           _wr2RegCompleteHandler 0A5B  
                       _EUSART1_is_tx_ready$357 0074                      ??_I2C1_MasterEnableRestart 0074  
                      rd2RegCompleteHandler@ptr 0027                                  _I2C1_MasterFsm 0BFF  
                                      ?___aldiv 0020                __end_of_TMR4_SetInterruptHandler 0953  
                               ?_I2C1_DO_RX_ACK 0070                                       __ptext100 0910  
                                     __ptext101 092F                                       __ptext110 0C24  
                                     __ptext102 0A03                                       __ptext111 08D8  
                                     __ptext112 08B1                                       __ptext104 09DD  
                                     __ptext113 0D42                                       __ptext105 08A5  
                                     __ptext114 09F5                                       __ptext106 09D1  
                                     __ptext115 0929                                       __ptext107 08A3  
                                     __ptext108 0A47                                       __ptext109 08B4  
                                      ?___lwdiv 0020                                        ?___lwmod 0020  
                       _I2C1_MasterWaitForEvent 0904                                _I2C1_MasterClose 08C3  
                                      _DAC1CON0 090E                                        _DAC1CON1 090F  
                                _I2C1_SetBuffer 0AD5                    ??_INTERRUPT_InterruptManager 0074  
                                   ??_TMR2_Stop 0074                                _I2C1_MasterStart 08C6  
                                   ??_TMR4_Stop 0074                                _I2C1_MasterWrite 090C  
                                      _BAUD1CON 011F      __end_of_EUSART1_DefaultOverrunErrorHandler 08DC  
          ??_EUSART1_DefaultOverrunErrorHandler 0070             ?_EUSART1_DefaultOverrunErrorHandler 0070  
            _EUSART1_DefaultOverrunErrorHandler 08D8                           ?_I2C1_DO_SEND_RESTART 0070  
                          _EUSART1_ErrorHandler 00E7                               ?_I2C1_DO_TX_EMPTY 0070  
                            int16ToString@value 0027                         _EUSART1_SetErrorHandler 0910  
                                      _CMP1_ISR 09F5                __end_of_I2C1_CallbackReturnReset 0004  
                                 _int16ToString 048A                                ___lwdiv@quotient 0025  
                            ??_I2C1_DO_TX_EMPTY 0028                              _EUSART1_is_tx_done 08DC  
                                      _T2CLKCON 0290                         ??_rd1RegCompleteHandler 0076  
                       ?_I2C1_DO_SEND_ADR_WRITE 0070                                        _T4CLKCON 0296  
                     I2C1_MasterSendTxData@data 0074                          EUSART1_RxDataHandler@t 0072  
                       ??_wr1RegCompleteHandler 0076                                 ___aldiv@divisor 0020  
                             ??_TMR0_Initialize 0076                                _I2C1_SetCallback 0EA0  
                               ___aldiv@counter 0028                                  ___wmul@product 0074  
                                      _LATAbits 0018         EUSART1_SetErrorHandler@interruptHandler 0074  
                                      _LATCbits 001A                                      _I2C1_DO_RX 0FBE  
                                    _I2C1_DO_TX 0743                             ?_EUSART1_is_tx_done 0070  
                                     clear_ram0 095F                                        _PIE0bits 0716  
                                      _PIE2bits 0718                                        _PIE3bits 0719  
                                      _PIE4bits 071A                                      _I2C1_Close 0AC0  
                                     getMed@aux 003D                                    ?_I2C1_Poller 0070  
                                     getHis@aux 0045                          __end_of_I2C1_MasterFsm 0C24  
                  __end_of_I2C1_MasterGetRxData 08D5                                       getMax@aux 0028  
                    ??_TMR0_SetInterruptHandler 0076                                        _PIR0bits 070C  
                                      _PIR2bits 070E                                        _PIR3bits 070F  
                                      _PIR4bits 0710                                       getMin@aux 0028  
                                 ??_TMR0_Reload 0074                          ?_EUSART1_RxDataHandler 0070  
                            _I2C1_MasterSendAck 08E4                       _I2C1_DO_SEND_RESTART_READ 08E8  
                           __end_of_receiveData 0BDE                                        _SSP1CON1 0190  
                                      _SSP1CON2 0191                                        _TMR0_ISR 0A47  
                                      _TMR2_ISR 09D1                                        _TMR4_ISR 09DD  
                        __end_of_I2C1_SetBuffer 0AEA                                        _SSP1STAT 018F  
          __end_of_I2C1_SetDataCompleteCallback 09B2                    _I2C1_SetDataCompleteCallback 09A8  
                                  ??_getMetrics 0076                              _I2C1_MasterStartRx 08CF  
                   ?_I2C1_DO_SEND_RESTART_WRITE 0070                             ?_I2C1_MasterSendAck 0070  
                             ___wmul@multiplier 0020                        ?_I2C1_DO_RX_NACK_RESTART 0070  
                          ??_EUSART1_is_tx_done 0074                                   initRxBuffer@i 0074  
                           I2C1_ReadNBytes@data 002E                             ?_I2C1_MasterStartRx 0070  
                  __end_of_I2C1_DO_ADDRESS_NACK 0CEB                  ??_TMR2_DefaultInterruptHandler 0070  
                     ?_TMR2_SetInterruptHandler 0074                        wr2RegCompleteHandler@ptr 0027  
                                ?_int16ToString 0027                                       _stringlen 0AEA  
                __end_of_I2C1_DO_SEND_ADR_WRITE 0972                                   _I2C1_DO_RESET 0924  
                            receiveData@maxdata 0022                           I2C1_Close@returnValue 0074  
                      ?_rdBlkRegCompleteHandler 0027                               ??_DAC1_Initialize 0074  
                           I2C1_SetCallback@idx 0023                             I2C1_SetCallback@ptr 0022  
                          ??_I2C1_MasterSendAck 0074                               ??_TMR2_Initialize 0076  
                                  ??_readINA220 0034                           EUSART1_Read@readValue 0074  
                          int16ToString@divisor 0032                          ?_rd2RegCompleteHandler 0027  
                            __end_of_getMetrics 0EA0                    __end_of_I2C1_MasterOperation 0B31  
                        ?_wr2RegCompleteHandler 0027                            ??_I2C1_MasterStartRx 0074  
                         __end_of_stringCompare 0E36                                 ?_I2C1_MasterFsm 0070  
                         __end_of_stringToInt16 05F9                       ??_I2C1_MasterWaitForEvent 0074  
                                   _measureTime 005D                           _I2C1_MasterDisableIrq 08AD  
                       ??_OSCILLATOR_Initialize 0074                                 ?_I2C1_SetBuffer 0020  
                             sendSensorInfo@idx 003A                              writeINA220@address 0034  
                           __end_of_TMR0_Reload 097A                               getINA220Data@buff 0043  
                      _TMR4_SetInterruptHandler 094D                                  _processCommand 021D  
                        ??_I2C1_DO_SEND_RESTART 0074                       ??_EUSART1_SetErrorHandler 0076  
           __end_of_EUSART1_DefaultErrorHandler 08B4                     _EUSART1_DefaultErrorHandler 08B1  
                            __end_of_readINA220 0E6A                     __end_of_EUSART1_is_tx_ready 09D1  
                               ___lwdiv@divisor 0020                                  ?_I2C1_DO_RESET 0070  
                                    ?_stringlen 0074                                 ___lwdiv@counter 0024  
                            writeINA220@regdata 0032                                        __ptext10 0E36  
                                      __ptext11 0C9A                                        __ptext20 0904  
                                      __ptext12 09BC                                        __ptext21 0BFF  
                                      __ptext13 090C                                        __ptext30 08E8  
                                      __ptext22 0CC2                                        __ptext14 0BA1  
                                      __ptext31 0959                                        __ptext23 0924  
                                      __ptext15 0DD0                                        __ptext40 091A  
                                      __ptext32 0FBE                                        __ptext24 0900  
                                      __ptext16 09E9                                        __ptext41 08E4  
                                      __ptext33 0743                                        __ptext25 08FC  
                                      __ptext17 0908                                        __ptext50 0A6F  
                                      __ptext42 08D2                                        __ptext34 096B  
                                      __ptext26 08F8                                        __ptext18 0B17  
                                      __ptext51 0A5B                                        __ptext43 08E0  
                                      __ptext35 097A                                        __ptext27 08F4  
                                      __ptext19 09B2                                        __ptext60 08C3  
                                      __ptext52 09A8                                        __ptext44 08CF  
                                      __ptext36 091F                                        __ptext28 08F0  
                                      __ptext61 08C0                                        __ptext53 0EA0  
                                      __ptext45 0002                                        __ptext37 0D15  
                                      __ptext29 08EC                                        __ptext70 099E  
                                      __ptext62 07D9                                        __ptext54 0AD5  
                                      __ptext46 08AF                                        __ptext38 08D5  
                                      __ptext71 048A                                        __ptext63 0ED6  
                                      __ptext55 08CC                                        __ptext47 0B67  
                                      __ptext39 0953                                        __ptext80 06F4  
                                      __ptext72 0CEB                                        __ptext64 0AEA  
                                      __ptext56 08C9                                        __ptext48 0A97  
                                      __ptext81 08BA                                        __ptext73 0D9E  
                                      __ptext65 0651                                        __ptext57 08C6  
                                      __ptext49 0A83                                        __ptext90 0B31  
                                      __ptext82 08B7                                        __ptext74 0972  
                                      __ptext66 08AB                                        __ptext58 0AC0  
                                      __ptext91 0941                                        __ptext83 08A9  
                                      __ptext75 0C4B                                        __ptext67 08BD  
                                      __ptext59 08AD                                        __ptext92 0A12  
                                      __ptext84 08A7                                        __ptext76 0E6A  
                                      __ptext68 09C6                                        __ptext93 0C72  
                                      __ptext85 0B83                                        __ptext77 06A5  
                                      __ptext69 08DC                                        __ptext94 0994  
                                      __ptext86 0AAB                                        __ptext78 05F9  
                                      __ptext95 098A                                        __ptext87 094D  
                                      __ptext79 0511                                        __ptext96 0D70  
                                      __ptext88 0B00                                        __ptext97 093B  
                                      __ptext89 0947                                        __ptext98 0915  
                                      __ptext99 0935                                    _SSP1CON1bits 0190  
                                  _SSP1CON2bits 0191                                    ??_sendPacket 0027  
                             int16ToString@data 0029                        _I2C1_CallbackReturnReset 0002  
                             ??_TMR4_Initialize 0076                                     ?_I2C1_DO_RX 0070  
                                   ?_I2C1_DO_TX 0070                                     _receiveData 0BBF  
          __end_of_TMR0_DefaultInterruptHandler 08B7                    _TMR0_DefaultInterruptHandler 08B4  
                   __end_of_I2C1_MasterClearIrq 08C3                    __end_of_I2C1_DO_RX_NACK_STOP 0900  
                                   ?_I2C1_Close 0070                                   ??_writeINA220 0076  
                                    _RC1STAbits 011D  EUSART1_SetOverrunErrorHandler@interruptHandler 0074  
                       stringCompare@byte_count 0024                                        int$flags 007E  
               __end_of_I2C1_DO_RX_NACK_RESTART 0904                        I2C1_MasterOperation@read 002C  
            __end_of_INTERRUPT_InterruptManager 0030                      _INTERRUPT_InterruptManager 0004  
                        __end_of_processCommand 0393                              I2C1_ReadNBytes@len 002F  
                 __end_of_I2C1_DO_SEND_ADR_READ 0982                              __end_of_sendPacket 06A5  
                   _EUSART1_FramingErrorHandler 00EB                                    _I2C1_DO_IDLE 091F  
                           _EUSART1_Receive_ISR 0C24                                    _I2C1_DO_RCEN 0959  
                   __end_of_I2C1_MasterSendNack 08E4                                 ??_int16ToString 0075  
                                    _INTCONbits 000B                              processCommand@data 0046  
                I2C1_SetAddressNackCallback@ptr 0026                            _I2C1_MasterGetRxData 08D2  
                         _I2C1_MasterSendTxData 091A                                  readINA220@buff 0038  
                                      intlevel1 0000                        __end_of_I2C1_MasterClose 08C6  
                          ?_EUSART1_Receive_ISR 0070                               writeINA220@regadd 0035  
                              ___lwmod@dividend 0022                         ?_PIN_MANAGER_Initialize 0070  
                      __end_of_I2C1_MasterStart 08C9                        __end_of_I2C1_MasterWrite 0910  
                       I2C1_WriteNBytes@address 0031          __end_of_EUSART1_SetOverrunErrorHandler 091A  
                _EUSART1_SetOverrunErrorHandler 0915                                ??_I2C1_DO_RX_ACK 0074  
                       _I2C1_CallbackReturnStop 08AF                   ?_TMR0_DefaultInterruptHandler 0070  
                          _I2C1_DO_ADDRESS_NACK 0CC2                          ?_I2C1_MasterDisableIrq 0070  
                              _I2C1_WriteNBytes 0C9A                                     _TMR0_Reload 0972  
EUSART1_SetFramingErrorHandler@interruptHandler 0074                               ??_TxDeviceDisable 0074  
                               ?_processCommand 0046                             __end_of_writeINA220 0A47  
                            _eusart1RxLastError 0076                           __end_of_getINA220Data 048A  
                                 __pstringtext1 1000                        __end_of_I2C1_SetCallback 0ED6  
                                    _SSP1DATPPS 1EC6                                      _SSP1CLKPPS 1EC5  
                               ??_I2C1_DO_RESET 0074                                 ___lwmod@divisor 0020  
                          _I2C1_MasterOperation 0B17                                 _TMR0_Initialize 0B31  
                               ___lwmod@counter 0074                                    ___aldiv@sign 0029  
                         ?_I2C1_MasterGetRxData 0070                                     ??_stringlen 0076  
                                    _TX1STAbits 011E                                      _TMR2_Start 08A7  
                                    _TMR4_Start 08B7                           ??_EUSART1_Receive_ISR 0074  
                __end_of_PIN_MANAGER_Initialize 0C9A                   __end_of_rd1RegCompleteHandler 0A83  
                 __end_of_wr1RegCompleteHandler 0AAB                           _TMR2_InterruptHandler 0062  
                       ??_EUSART1_RxDataHandler 0070                           ?_I2C1_DO_ADDRESS_NACK 0070  
